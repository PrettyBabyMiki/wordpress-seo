(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var Assessor = require( "./assessor.js" );

var introductionKeyword = require( "./assessments/introductionKeywordAssessment.js" );
var keyphraseLength = require( "./assessments/keyphraseLengthAssessment.js" );
var keywordDensity = require( "./assessments/keywordDensityAssessment.js" );
var keywordStopWords = require( "./assessments/keywordStopWordsAssessment.js" );
var metaDescriptionKeyword = require( "./assessments/metaDescriptionKeywordAssessment.js" );
var metaDescriptionLength = require( "./assessments/metaDescriptionLengthAssessment.js" );
var subheadingsKeyword = require( "./assessments/subheadingsKeywordAssessment.js" );
var textCompetingLinks = require( "./assessments/textCompetingLinksAssessment.js" );
var textImages = require( "./assessments/textImagesAssessment.js" );
var textLength = require( "./assessments/textLengthAssessment.js" );
var textLinks = require( "./assessments/textLinksAssessment.js" );
var titleKeyword = require( "./assessments/titleKeywordAssessment.js" );
var titleWidth = require( "./assessments/pageTitleWidthAssessment.js" );
var urlKeyword = require( "./assessments/urlKeywordAssessment.js" );
var urlLength = require( "./assessments/urlLengthAssessment.js" );
var urlStopWords = require( "./assessments/urlStopWordsAssessment.js" );
/**
 * Creates the Assessor
 *
 * @param {object} i18n The i18n object used for translations.
 * @param {Object} options The options for this assessor.
 * @param {Object} options.marker The marker to pass the list of marks to.
 *
 * @constructor
 */
var SEOAssessor = function( i18n, options ) {
	Assessor.call( this, i18n, options );

	this._assessments = [
		introductionKeyword,
		keyphraseLength,
		keywordDensity,
		keywordStopWords,
		metaDescriptionKeyword,
		metaDescriptionLength,
		subheadingsKeyword,
		textCompetingLinks,
		textImages,
		textLength,
		textLinks,
		titleKeyword,
		titleWidth,
		urlKeyword,
		urlLength,
		urlStopWords,
	];
};

module.exports = SEOAssessor;

require( "util" ).inherits( module.exports, Assessor );


},{"./assessments/introductionKeywordAssessment.js":2,"./assessments/keyphraseLengthAssessment.js":3,"./assessments/keywordDensityAssessment.js":4,"./assessments/keywordStopWordsAssessment.js":5,"./assessments/metaDescriptionKeywordAssessment.js":6,"./assessments/metaDescriptionLengthAssessment.js":7,"./assessments/pageTitleWidthAssessment.js":8,"./assessments/subheadingsKeywordAssessment.js":9,"./assessments/textCompetingLinksAssessment.js":11,"./assessments/textImagesAssessment.js":12,"./assessments/textLengthAssessment.js":13,"./assessments/textLinksAssessment.js":14,"./assessments/titleKeywordAssessment.js":15,"./assessments/urlKeywordAssessment.js":16,"./assessments/urlLengthAssessment.js":17,"./assessments/urlStopWordsAssessment.js":18,"./assessor.js":19,"util":324}],2:[function(require,module,exports){
var AssessmentResult = require( "../values/AssessmentResult.js" );

/**
 * Returns a score and text based on the firstParagraph object.
 *
 * @param {object} firstParagraphMatches The object with all firstParagraphMatches.
 * @param {object} i18n The object used for translations
 * @returns {object} resultObject with score and text
 */
var calculateFirstParagraphResult = function( firstParagraphMatches, i18n ) {
	if ( firstParagraphMatches > 0 ) {
		return {
			score: 9,
			text: i18n.dgettext( "js-text-analysis", "The focus keyword appears in the first paragraph of the copy." ),
		};
	}

	return {
		score: 3,
		text: i18n.dgettext( "js-text-analysis", "The focus keyword doesn\'t appear in the first paragraph of the copy. " +
			"Make sure the topic is clear immediately." ),
	};
};

/**
 * Runs the findKeywordInFirstParagraph module, based on this returns an assessment result with score.
 *
 * @param {Paper} paper The paper to use for the assessment.
 * @param {object} researcher The researcher used for calling research.
 * @param {object} i18n The object used for translations
 * @returns {object} the Assessmentresult
 */
var introductionHasKeywordAssessment = function( paper, researcher, i18n ) {
	var firstParagraphMatches = researcher.getResearch( "firstParagraph" );
	var firstParagraphResult = calculateFirstParagraphResult( firstParagraphMatches, i18n );
	var assessmentResult = new AssessmentResult();

	assessmentResult.setScore( firstParagraphResult.score );
	assessmentResult.setText( firstParagraphResult.text );

	return assessmentResult;
};

module.exports = {
	identifier: "introductionKeyword",
	getResult: introductionHasKeywordAssessment,
	isApplicable: function( paper ) {
		return paper.hasKeyword();
	},
};

},{"../values/AssessmentResult.js":128}],3:[function(require,module,exports){
var AssessmentResult = require( "../values/AssessmentResult.js" );

/**
 * Assesses the keyphrase presence and length
 *
 * @param {Paper} paper The paper to use for the assessment.
 * @param {Researcher} researcher The researcher used for calling research.
 * @param {Jed} i18n The object used for translations
 * @returns {AssessmentResult} The result of this assessment
*/
function keyphraseAssessment( paper, researcher, i18n ) {
	var keyphraseLength = researcher.getResearch( "keyphraseLength" );

	var assessmentResult = new AssessmentResult();

	if ( ! paper.hasKeyword() ) {
		assessmentResult.setScore( -999 );
		assessmentResult.setText( i18n.dgettext( "js-text-analysis", "No focus keyword was set for this page. " +
			"If you do not set a focus keyword, no score can be calculated." ) );
	} else if ( keyphraseLength > 10 ) {
		assessmentResult.setScore( 0 );
		assessmentResult.setText( i18n.dgettext( "js-text-analysis", "The keyphrase is over 10 words, a keyphrase should be shorter." ) );
	}

	return assessmentResult;
}

module.exports = {
	identifier: "keyphraseLength",
	getResult: keyphraseAssessment,
};

},{"../values/AssessmentResult.js":128}],4:[function(require,module,exports){
var AssessmentResult = require( "../values/AssessmentResult.js" );
var countWordOccurrences = require( "../stringProcessing/countWordOccurrences.js" );
var countWords = require( "../stringProcessing/countWords.js" );
var formatNumber = require( "../helpers/formatNumber.js" );
var inRange = require( "../helpers/inRange.js" );

var inRangeEndInclusive = inRange.inRangeEndInclusive;
var inRangeStartInclusive = inRange.inRangeStartInclusive;

/**
 * Returns the scores and text for keyword density
 *
 * @param {string} keywordDensity The keyword density
 * @param {object} i18n The i18n object used for translations
 * @param {number} keywordCount The number of times the keyword has been found in the text.
 * @returns {{score: number, text: *}} The assessment result
 */
var calculateKeywordDensityResult = function( keywordDensity, i18n, keywordCount ) {
	var score, text, max;

	var roundedKeywordDensity = formatNumber( keywordDensity );
	var keywordDensityPercentage = roundedKeywordDensity + "%";

	if ( roundedKeywordDensity > 3.5 ) {
		score = -50;

		/* Translators: %1$s expands to the keyword density percentage, %2$d expands to the keyword count,
		%3$s expands to the maximum keyword density percentage. */
		text = i18n.dgettext( "js-text-analysis", "The keyword density is %1$s," +
			" which is way over the advised %3$s maximum;" +
			" the focus keyword was found %2$d times." );

		max = "2.5%";

		text = i18n.sprintf( text, keywordDensityPercentage, keywordCount, max );
	}

	if ( inRangeEndInclusive( roundedKeywordDensity, 2.5, 3.5 ) ) {
		score = -10;

		/* Translators: %1$s expands to the keyword density percentage, %2$d expands to the keyword count,
		%3$s expands to the maximum keyword density percentage. */
		text = i18n.dgettext( "js-text-analysis", "The keyword density is %1$s," +
			" which is over the advised %3$s maximum;" +
			" the focus keyword was found %2$d times." );

		max = "2.5%";

		text = i18n.sprintf( text, keywordDensityPercentage, keywordCount, max );
	}

	if ( inRangeEndInclusive( roundedKeywordDensity, 0.5, 2.5 ) ) {
		score = 9;

		/* Translators: %1$s expands to the keyword density percentage, %2$d expands to the keyword count. */
		text = i18n.dgettext( "js-text-analysis", "The keyword density is %1$s, which is great;" +
			" the focus keyword was found %2$d times." );

		text = i18n.sprintf( text, keywordDensityPercentage, keywordCount );
	}

	if ( inRangeStartInclusive( roundedKeywordDensity, 0, 0.5 ) ) {
		score = 4;

		/* Translators: %1$s expands to the keyword density percentage, %2$d expands to the keyword count. */
		text = i18n.dgettext( "js-text-analysis", "The keyword density is %1$s, which is too low;" +
			" the focus keyword was found %2$d times." );

		text = i18n.sprintf( text, keywordDensityPercentage, keywordCount );
	}

	return {
		score: score,
		text: text,
	};
};

/**
 * Runs the getkeywordDensity module, based on this returns an assessment result with score.
 *
 * @param {object} paper The paper to use for the assessment.
 * @param {object} researcher The researcher used for calling research.
 * @param {object} i18n The object used for translations
 * @returns {object} the Assessmentresult
 */
var keywordDensityAssessment = function( paper, researcher, i18n ) {
	var keywordDensity = researcher.getResearch( "getKeywordDensity" );
	var keywordCount = countWordOccurrences( paper.getText(), paper.getKeyword(), paper.getLocale() );

	var keywordDensityResult = calculateKeywordDensityResult( keywordDensity, i18n, keywordCount );
	var assessmentResult = new AssessmentResult();

	assessmentResult.setScore( keywordDensityResult.score );
	assessmentResult.setText( keywordDensityResult.text );

	return assessmentResult;
};

module.exports = {
	identifier: "keywordDensity",
	getResult: keywordDensityAssessment,
	isApplicable: function( paper ) {
		return paper.hasText() && paper.hasKeyword() && countWords( paper.getText() ) >= 100;
	},
};

},{"../helpers/formatNumber.js":32,"../helpers/inRange.js":37,"../stringProcessing/countWordOccurrences.js":93,"../stringProcessing/countWords.js":94,"../values/AssessmentResult.js":128}],5:[function(require,module,exports){
var AssessmentResult = require( "../values/AssessmentResult.js" );

/**
 * Calculate the score based on the amount of stop words in the keyword.
 * @param {number} stopWordCount The amount of stop words to be checked against.
 * @param {object} i18n The locale object.
 * @returns {object} The resulting score object.
 */
var calculateStopWordsCountResult = function( stopWordCount, i18n ) {
	if ( stopWordCount > 0 ) {
		return {
			score: 0,
			text: i18n.dngettext(
				"js-text-analysis",
				/* Translators: %1$s opens a link to a Yoast article about stop words, %2$s closes the link */
				"The focus keyword contains a stop word. This may or may not be wise depending on the circumstances. " +
				"Read %1$sthis article%2$s for more info.",
				"The focus keyword contains %3$d stop words. This may or may not be wise depending on the circumstances. " +
				"Read %1$sthis article%2$s for more info.",
				stopWordCount
			),
		};
	}

	return {};
};

/**
 * Execute the Assessment and return a result.
 * @param {Paper} paper The Paper object to assess.
 * @param {Researcher} researcher The Researcher object containing all available researches.
 * @param {object} i18n The locale object.
 * @returns {AssessmentResult} The result of the assessment, containing both a score and a descriptive text.
 */
var keywordHasStopWordsAssessment = function( paper, researcher, i18n ) {
	var stopWords = researcher.getResearch( "stopWordsInKeyword" );
	var stopWordsResult = calculateStopWordsCountResult( stopWords.length, i18n );

	var assessmentResult = new AssessmentResult();
	assessmentResult.setScore( stopWordsResult.score );
	assessmentResult.setText( i18n.sprintf(
		stopWordsResult.text,
		"<a href='https://yoast.com/handling-stopwords/' target='new'>",
		"</a>",
		stopWords.length
	) );

	return assessmentResult;
};

module.exports = {
	identifier: "keywordStopWords",
	getResult: keywordHasStopWordsAssessment,
	isApplicable: function( paper ) {
		return paper.hasKeyword();
	},
};

},{"../values/AssessmentResult.js":128}],6:[function(require,module,exports){
var AssessmentResult = require( "../values/AssessmentResult.js" );

/**
 * Returns the score and text for the description keyword match.
 * @param {number} keywordMatches The number of keyword matches in the description.
 * @param {object} i18n The i18n object used for translations.
 * @returns {Object} An object with values for the assessment result.
 */
var calculateKeywordMatchesResult = function( keywordMatches, i18n ) {
	if ( keywordMatches > 0 ) {
		return {
			score: 9,
			text: i18n.dgettext( "js-text-analysis", "The meta description contains the focus keyword." ),
		};
	}
	if ( keywordMatches === 0 ) {
		return {
			score: 3,
			text: i18n.dgettext( "js-text-analysis", "A meta description has been specified, but it does not contain the focus keyword." ),
		};
	}
	return {};
};

/**
 * Runs the metaDescription keyword module, based on this returns an assessment result with score.
 *
 * @param {object} paper The paper to use for the assessment.
 * @param {object} researcher The researcher used for calling research.
 * @param {object} i18n The object used for translations
 * @returns {object} the Assessmentresult
 */
var metaDescriptionHasKeywordAssessment = function( paper, researcher, i18n ) {
	var keywordMatches = researcher.getResearch( "metaDescriptionKeyword" );
	var descriptionLengthResult = calculateKeywordMatchesResult( keywordMatches, i18n );
	var assessmentResult = new AssessmentResult();

	assessmentResult.setScore( descriptionLengthResult.score );
	assessmentResult.setText( descriptionLengthResult.text );

	return assessmentResult;
};

module.exports = {
	identifier: "metaDescriptionKeyword",
	getResult: metaDescriptionHasKeywordAssessment,
	isApplicable: function( paper ) {
		return paper.hasKeyword();
	},
};

},{"../values/AssessmentResult.js":128}],7:[function(require,module,exports){
var AssessmentResult = require( "../values/AssessmentResult.js" );

/**
 * Returns the score and text for the descriptionLength
 * @param {number} descriptionLength The length of the metadescription.
 * @param {object} i18n The i18n object used for translations.
 * @returns {Object} An object with values for the assessment result.
 */
var calculateDescriptionLengthResult = function( descriptionLength, i18n ) {
	var recommendedValue = 120;
	var maximumValue = 156;
	if ( descriptionLength === 0 ) {
		return {
			score: 1,
			text: i18n.dgettext( "js-text-analysis", "No meta description has been specified, " +
				"search engines will display copy from the page instead." ),
		};
	}
	if ( descriptionLength <= recommendedValue ) {
		return {
			score: 6,
			text: i18n.sprintf( i18n.dgettext( "js-text-analysis", "The meta description is under %1$d characters, " +
				"however up to %2$d characters are available." ), recommendedValue, maximumValue ),
		};
	}
	if ( descriptionLength > maximumValue ) {
		return {
			score: 6,
			text: i18n.sprintf( i18n.dgettext( "js-text-analysis", "The specified meta description is over %1$d characters. " +
				"Reducing it will ensure the entire description is visible." ), maximumValue ),
		};
	}
	if ( descriptionLength >= recommendedValue && descriptionLength <= maximumValue ) {
		return {
			score: 9,
			text: i18n.dgettext( "js-text-analysis", "In the specified meta description, consider: " +
				"How does it compare to the competition? Could it be made more appealing?" ),
		};
	}
};

/**
 * Runs the metaDescriptionLength module, based on this returns an assessment result with score.
 *
 * @param {object} paper The paper to use for the assessment.
 * @param {object} researcher The researcher used for calling research.
 * @param {object} i18n The object used for translations
 * @returns {object} the Assessmentresult
 */
var metaDescriptionLengthAssessment = function( paper, researcher, i18n ) {
	var descriptionLength = researcher.getResearch( "metaDescriptionLength" );
	var descriptionLengthResult = calculateDescriptionLengthResult( descriptionLength, i18n );
	var assessmentResult = new AssessmentResult();

	assessmentResult.setScore( descriptionLengthResult.score );
	assessmentResult.setText( descriptionLengthResult.text );

	return assessmentResult;
};

module.exports = {
	identifier: "metaDescriptionLength",
	getResult: metaDescriptionLengthAssessment,
};

},{"../values/AssessmentResult.js":128}],8:[function(require,module,exports){
var AssessmentResult = require( "../values/AssessmentResult.js" );
var inRange = require( "../helpers/inRange" ).inRangeEndInclusive;

/**
 * Returns the score and text for the pageTitleLength
 * @param {number} pageTitleLength The length of the pageTitle.
 * @param {object} i18n The i18n object used for translations.
 * @returns {object} The result object.
 */
var calculatePageTitleLengthResult = function( pageTitleLength, i18n ) {
	var minLength = 400;
	var maxLength = 600;

	if ( inRange( pageTitleLength, 1, 400 ) ) {
		return {
			score: 6,
			text: i18n.dgettext(
				"js-text-analysis",
				"The page title is too short. Use the space to add keyword variations or create compelling call-to-action copy."
			),
		};
	}

	if ( inRange( pageTitleLength, minLength, maxLength ) ) {
		return {
			score: 9,
			text: i18n.dgettext(
				"js-text-analysis",
				"The page title has a nice length."
			),
		};
	}

	if ( pageTitleLength > maxLength ) {
		return {
			score: 6,
			text: i18n.dgettext(
				"js-text-analysis",
				"The page title is wider than the viewable limit."
			),
		};
	}

	return {
		score: 1,
		text: i18n.dgettext( "js-text-analysis", "Please create a page title." ),
	};
};

/**
 * Runs the pageTitleLength module, based on this returns an assessment result with score.
 *
 * @param {object} paper The paper to use for the assessment.
 * @param {object} researcher The researcher used for calling research.
 * @param {object} i18n The object used for translations
 * @returns {object} the Assessmentresult
 */
var titleWidthAssessment = function( paper, researcher, i18n ) {
	var pageTitleWidth = researcher.getResearch( "pageTitleWidth" );
	var pageTitleWidthResult = calculatePageTitleLengthResult( pageTitleWidth, i18n );
	var assessmentResult = new AssessmentResult();

	assessmentResult.setScore( pageTitleWidthResult.score );
	assessmentResult.setText( pageTitleWidthResult.text );

	return assessmentResult;
};

module.exports = {
	identifier: "titleWidth",
	getResult: titleWidthAssessment,
};


},{"../helpers/inRange":37,"../values/AssessmentResult.js":128}],9:[function(require,module,exports){
var AssessmentResult = require( "../values/AssessmentResult.js" );

/**
 * Returns a score and text based on the keyword matches object.
 *
 * @param {object} subHeadings The object with all subHeadings matches.
 * @param {object} i18n The object used for translations.
 * @returns {object} resultObject with score and text.
 */
var calculateKeywordMatchesResult = function( subHeadings, i18n ) {
	if ( subHeadings.matches === 0 ) {
		return {
			score: 6,
			text: i18n.dgettext( "js-text-analysis", "You have not used the focus keyword in any subheading (such as an H2) in your copy." ),
		};
	}
	if ( subHeadings.matches >= 1 ) {
		return {
			score: 9,
			text: i18n.sprintf( i18n.dgettext( "js-text-analysis", "The focus keyword appears in %2$d (out of %1$d) subheadings in the copy. " +
				"While not a major ranking factor, this is beneficial." ), subHeadings.count, subHeadings.matches ),
		};
	}
	return {};
};

/**
 * Runs the match keyword in subheadings module, based on this returns an assessment result with score.
 *
 * @param {object} paper The paper to use for the assessment.
 * @param {object} researcher The researcher used for calling research.
 * @param {object} i18n The object used for translations.
 * @returns {object} the Assessmentresult
 */
var subheadingsHaveKeywordAssessment = function( paper, researcher, i18n ) {
	var subHeadings = researcher.getResearch( "matchKeywordInSubheadings" );
	var subHeadingsResult = calculateKeywordMatchesResult( subHeadings, i18n );
	var assessmentResult = new AssessmentResult();

	assessmentResult.setScore( subHeadingsResult.score );
	assessmentResult.setText( subHeadingsResult.text );

	return assessmentResult;
};

module.exports = {
	identifier: "subheadingsKeyword",
	getResult: subheadingsHaveKeywordAssessment,
	isApplicable: function( paper ) {
		return paper.hasText() && paper.hasKeyword();
	},
};

},{"../values/AssessmentResult.js":128}],10:[function(require,module,exports){
var AssessmentResult = require( "../values/AssessmentResult.js" );
var inRange = require( "lodash/inRange" );

var recommendedMinimum = 150;
/**
 * Calculate the score based on the current word count.
 * @param {number} wordCount The amount of words to be checked against.
 * @param {object} i18n The locale object.
 * @returns {object} The resulting score object.
 */
var calculateWordCountResult = function( wordCount, i18n ) {
	if ( wordCount >= 150 ) {
		return {
			score: 9,
			text: i18n.dngettext(


				"js-text-analysis",
				/* Translators: %1$d expands to the number of words in the text. */
				"The text contains %1$d word.",
				"The text contains %1$d words.",
				wordCount
			) + " " + i18n.dngettext(
				"js-text-analysis",
				/* Translators: The preceding sentence is "The text contains x words.", %2$s expands to the recommended minimum of words. */
				"This is more than or equal to the recommended minimum of %2$d word.",
				"This is more than or equal to the recommended minimum of %2$d words.",
				recommendedMinimum
			),
		};
	}

	if ( inRange( wordCount, 125, 150 ) ) {
		return {
			score: 7,
			text: i18n.dngettext(
				"js-text-analysis",
				/* Translators: %1$d expands to the number of words in the text. */
				"The text contains %1$d word.",
				"The text contains %1$d words.",
				wordCount
			) + " " + i18n.dngettext(
				"js-text-analysis",
				/* Translators: The preceding sentence is "The text contains x words.", %2$s expands to the recommended minimum of words. */
				"This is slightly below the recommended minimum of %2$d word. Add a bit more copy.",
				"This is slightly below the recommended minimum of %2$d words. Add a bit more copy.",
				recommendedMinimum
			),
		};
	}

	if ( inRange( wordCount, 100, 125 ) ) {
		return {
			score: 5,
			text: i18n.dngettext(
				"js-text-analysis",
				/* Translators: %1$d expands to the number of words in the text. */
				"The text contains %1$d word.",
				"The text contains %1$d words.",
				wordCount
			) + " " + i18n.dngettext(
				"js-text-analysis",
				/* Translators: The preceding sentence is "The text contains x words.", %2$s expands to the recommended minimum of words. */
				"This is below the recommended minimum of %2$d word. Add more content that is relevant for the topic.",
				"This is below the recommended minimum of %2$d words. Add more content that is relevant for the topic.",
				recommendedMinimum
			),
		};
	}

	if ( inRange( wordCount, 50, 100 ) ) {
		return {
			score: -10,
			text: i18n.dngettext(
				"js-text-analysis",
				/* Translators: %1$d expands to the number of words in the text. */
				"The text contains %1$d word.",
				"The text contains %1$d words.",
				wordCount
			) + " " + i18n.dngettext(
				"js-text-analysis",
				/* Translators: The preceding sentence is "The text contains x words.", %2$s expands to the recommended minimum of words. */
				"This is below the recommended minimum of %2$d word. Add more content that is relevant for the topic.",
				"This is below the recommended minimum of %2$d words. Add more content that is relevant for the topic.",
				recommendedMinimum
			),
		};
	}

	if ( inRange( wordCount, 0, 50 ) ) {
		return {
			score: -20,
			text: i18n.dngettext(
				"js-text-analysis",
				/* Translators: %1$d expands to the number of words in the text. */
				"The text contains %1$d word.",
				"The text contains %1$d words.",
				wordCount
			) + " " + i18n.dngettext(
				"js-text-analysis",
				/* Translators: The preceding sentence is "The text contains x words.", %2$s expands to the recommended minimum of words. */
				"This is far below the recommended minimum of %2$d word. Add more content that is relevant for the topic.",
				"This is far below the recommended minimum of %2$d words. Add more content that is relevant for the topic.",
				recommendedMinimum
			),
		};
	}
};

/**
 * Execute the Assessment and return a result.
 * @param {Paper} paper The Paper object to assess.
 * @param {Researcher} researcher The Researcher object containing all available researches.
 * @param {object} i18n The locale object.
 * @returns {AssessmentResult} The result of the assessment, containing both a score and a descriptive text.
 */
var taxonomyTextLengthAssessment = function( paper, researcher, i18n ) {
	var wordCount = researcher.getResearch( "wordCountInText" );
	var wordCountResult = calculateWordCountResult( wordCount, i18n );
	var assessmentResult = new AssessmentResult();

	assessmentResult.setScore( wordCountResult.score );
	assessmentResult.setText( i18n.sprintf( wordCountResult.text, wordCount, recommendedMinimum ) );

	return assessmentResult;
};

module.exports = {
	identifier: "taxonomyTextLength",
	getResult: taxonomyTextLengthAssessment,
};

},{"../values/AssessmentResult.js":128,"lodash/inRange":271}],11:[function(require,module,exports){
var AssessmentResult = require( "../values/AssessmentResult.js" );

var Mark = require( "../values/Mark.js" );
var addMark = require( "../markers/addMark.js" );

var map = require( "lodash/map" );

/**
 * Returns a score and text based on the number of links.
 *
 * @param {object} linkStatistics The object with all linkstatistics.
 * @param {object} i18n The object used for translations
 * @returns {object} resultObject with score and text
 */
var calculateLinkCountResult = function( linkStatistics, i18n ) {
	if ( linkStatistics.keyword.totalKeyword > 0 ) {
		return {
			score: 2,
			hasMarks: true,
			text: i18n.dgettext( "js-text-analysis", "You\'re linking to another page with the focus keyword you want this page to rank for. " +
				"Consider changing that if you truly want this page to rank." ),
		};
	}
	return {};
};

/**
 * Runs the linkCount module, based on this returns an assessment result with score.
 *
 * @param {object} paper The paper to use for the assessment.
 * @param {object} researcher The researcher used for calling research.
 * @param {object} i18n The object used for translations
 * @returns {object} the Assessmentresult
 */
var textHasCompetingLinksAssessment = function( paper, researcher, i18n ) {
	var linkCount = researcher.getResearch( "getLinkStatistics" );

	var linkCountResult = calculateLinkCountResult( linkCount, i18n );
	var assessmentResult = new AssessmentResult();

	assessmentResult.setScore( linkCountResult.score );
	assessmentResult.setText( linkCountResult.text );
	assessmentResult.setHasMarks( linkCountResult.hasMarks );

	return assessmentResult;
};

/**
 * Mark the anchors.
 *
 * @param {Paper} paper The paper to use for the marking.
 * @param {Researcher} researcher The researcher to use.
 * @returns {Array} Array with all the marked anchors.
 */
var competingLinkMarker = function( paper, researcher ) {
	var competingLinks = researcher.getResearch( "getLinkStatistics" );

	return map( competingLinks.keyword.matchedAnchors, function( matchedAnchor ) {
		return new Mark( {
			original: matchedAnchor,
			marked: addMark( matchedAnchor ),
		} );
	} );
};

module.exports = {
	identifier: "textCompetingLinks",
	getResult: textHasCompetingLinksAssessment,
	isApplicable: function( paper ) {
		return paper.hasText() && paper.hasKeyword();
	},
	getMarks: competingLinkMarker,
};

},{"../markers/addMark.js":40,"../values/AssessmentResult.js":128,"../values/Mark.js":129,"lodash/map":294}],12:[function(require,module,exports){
var AssessmentResult = require( "../values/AssessmentResult.js" );
var isEmpty = require( "lodash/isEmpty" );

/**
 * Calculate the score based on the current image count.
 * @param {number} imageCount The amount of images to be checked against.
 * @param {object} i18n The locale object.
 * @returns {object} The resulting score object.
 */
var calculateImageCountResult = function( imageCount, i18n ) {
	if ( imageCount === 0 ) {
		return {
			score: 3,
			text: i18n.dgettext( "js-text-analysis", "No images appear in this page, consider adding some as appropriate." ),
		};
	}

	return {};
};

/**
 * Calculate the score based on the current image alt-tag count.
 * @param {object} altProperties An object containing the various alt-tags.
 * @param {object} i18n The locale object.
 * @returns {object} The resulting score object.
 */
var assessImages = function( altProperties, i18n ) {
	// Has alt-tag and keywords
	if ( altProperties.withAltKeyword > 0 ) {
		return {
			score: 9,
			text: i18n.dgettext( "js-text-analysis", "The images on this page contain alt attributes with the focus keyword." ),
		};
	}

	// Has alt-tag, but no keywords and it's not okay
	if ( altProperties.withAltNonKeyword > 0 ) {
		return {
			score: 5,
			text: i18n.dgettext( "js-text-analysis", "The images on this page do not have alt attributes containing the focus keyword." ),
		};
	}

	// Has alt-tag, but no keyword is set
	if ( altProperties.withAlt > 0 ) {
		return {
			score: 5,
			text: i18n.dgettext( "js-text-analysis", "The images on this page contain alt attributes." ),
		};
	}

	// Has no alt-tag
	if ( altProperties.noAlt > 0 ) {
		return {
			score: 5,
			text: i18n.dgettext( "js-text-analysis", "The images on this page are missing alt attributes." ),
		};
	}

	return {};
};

/**
 * Execute the Assessment and return a result.
 * @param {Paper} paper The Paper object to assess.
 * @param {Researcher} researcher The Researcher object containing all available researches.
 * @param {object} i18n The locale object.
 * @returns {AssessmentResult} The result of the assessment, containing both a score and a descriptive text.
 */
var textHasImagesAssessment = function( paper, researcher, i18n ) {
	var assessmentResult = new AssessmentResult();

	var imageCount = researcher.getResearch( "imageCount" );
	var imageCountResult = calculateImageCountResult( imageCount, i18n );

	if ( isEmpty( imageCountResult ) ) {
		var altTagCount = researcher.getResearch( "altTagCount" );
		var altTagCountResult = assessImages( altTagCount, i18n );

		assessmentResult.setScore( altTagCountResult.score );
		assessmentResult.setText( altTagCountResult.text );

		return assessmentResult;
	}

	assessmentResult.setScore( imageCountResult.score );
	assessmentResult.setText( imageCountResult.text );

	return assessmentResult;
};

module.exports = {
	identifier: "textImages",
	getResult: textHasImagesAssessment,
	isApplicable: function( paper ) {
		return paper.hasText();
	},
};

},{"../values/AssessmentResult.js":128,"lodash/isEmpty":278}],13:[function(require,module,exports){
var AssessmentResult = require( "../values/AssessmentResult.js" );
var inRange = require( "lodash/inRange" );

var recommendedMinimum = 300;
/**
 * Calculate the score based on the current word count.
 * @param {number} wordCount The amount of words to be checked against.
 * @param {object} i18n The locale object.
 * @returns {object} The resulting score object.
 */
var calculateWordCountResult = function( wordCount, i18n ) {
	if ( wordCount >= 300 ) {
		return {
			score: 9,
			text: i18n.dngettext(
				"js-text-analysis",
				/* Translators: %1$d expands to the number of words in the text */
				"The text contains %1$d word.",
				"The text contains %1$d words.",
				wordCount
			) + " " + i18n.dngettext(
				"js-text-analysis",
				/* Translators: The preceding sentence is "The text contains x words.", %2$s expands to the recommended minimum of words. */
				"This is more than or equal to the recommended minimum of %2$d word.",
				"This is more than or equal to the recommended minimum of %2$d words.",
				recommendedMinimum
			),
		};
	}

	if ( inRange( wordCount, 250, 300 ) ) {
		return {
			score: 7,
			text: i18n.dngettext(
				"js-text-analysis",
				/* Translators: %1$d expands to the number of words in the text */
				"The text contains %1$d word.",
				"The text contains %1$d words.",
				wordCount
			) + " " + i18n.dngettext(
				"js-text-analysis",
				/* Translators: The preceding sentence is "The text contains x words.", %2$s expands to the recommended minimum of words */
				"This is slightly below the recommended minimum of %2$d word. Add a bit more copy.",
				"This is slightly below the recommended minimum of %2$d words. Add a bit more copy.",
				recommendedMinimum
			),
		};
	}

	if ( inRange( wordCount, 200, 250 ) ) {
		return {
			score: 5,
			text: i18n.dngettext(
				"js-text-analysis",
				/* Translators: %1$d expands to the number of words in the text */
				"The text contains %1$d word.",
				"The text contains %1$d words.",
				wordCount
			) + " " + i18n.dngettext(
				"js-text-analysis",
				/* Translators: The preceding sentence is "The text contains x words.", %2$s expands to the recommended minimum of words */
				"This is below the recommended minimum of %2$d word. Add more content that is relevant for the topic.",
				"This is below the recommended minimum of %2$d words. Add more content that is relevant for the topic.",
				recommendedMinimum
			),
		};
	}

	if ( inRange( wordCount, 100, 200 ) ) {
		return {
			score: -10,
			text: i18n.dngettext(
				"js-text-analysis",
				/* Translators: %1$d expands to the number of words in the text */
				"The text contains %1$d word.",
				"The text contains %1$d words.",
				wordCount
			) + " " + i18n.dngettext(
				"js-text-analysis",
				/* Translators: The preceding sentence is "The text contains x words.", %2$s expands to the recommended minimum of words */
				"This is below the recommended minimum of %2$d word. Add more content that is relevant for the topic.",
				"This is below the recommended minimum of %2$d words. Add more content that is relevant for the topic.",
				recommendedMinimum
			),
		};
	}

	if ( inRange( wordCount, 0, 100 ) ) {
		return {
			score: -20,
			text: i18n.dngettext(
				"js-text-analysis",
				/* Translators: %1$d expands to the number of words in the text */
				"The text contains %1$d word.",
				"The text contains %1$d words.",
				wordCount
			) + " " + i18n.dngettext(
				"js-text-analysis",
				/* Translators: The preceding sentence is "The text contains x words.", %2$s expands to the recommended minimum of words */
				"This is far below the recommended minimum of %2$d word. Add more content that is relevant for the topic.",
				"This is far below the recommended minimum of %2$d words. Add more content that is relevant for the topic.",
				recommendedMinimum
			),
		};
	}
};

/**
 * Execute the Assessment and return a result.
 * @param {Paper} paper The Paper object to assess.
 * @param {Researcher} researcher The Researcher object containing all available researches.
 * @param {object} i18n The locale object.
 * @returns {AssessmentResult} The result of the assessment, containing both a score and a descriptive text.
 */
var textLengthAssessment = function( paper, researcher, i18n ) {
	var wordCount = researcher.getResearch( "wordCountInText" );
	var wordCountResult = calculateWordCountResult( wordCount, i18n );
	var assessmentResult = new AssessmentResult();

	assessmentResult.setScore( wordCountResult.score );
	assessmentResult.setText( i18n.sprintf( wordCountResult.text, wordCount, recommendedMinimum ) );

	return assessmentResult;
};

module.exports = {
	identifier: "textLength",
	getResult: textLengthAssessment,
};

},{"../values/AssessmentResult.js":128,"lodash/inRange":271}],14:[function(require,module,exports){
var AssessmentResult = require( "../values/AssessmentResult.js" );
var isEmpty = require( "lodash/isEmpty" );

/**
 * Returns a score and text based on the linkStatistics object.
 *
 * @param {object} linkStatistics The object with all linkstatistics.
 * @param {object} i18n The object used for translations
 * @returns {object} resultObject with score and text
 */
var calculateLinkStatisticsResult = function( linkStatistics, i18n ) {
	if ( linkStatistics.total === 0 ) {
		return {
			score: 6,
			text: i18n.dgettext( "js-text-analysis", "No links appear in this page, consider adding some as appropriate." ),
		};
	}

	if ( linkStatistics.externalNofollow === linkStatistics.total ) {
		return {
			score: 7,
			/* Translators: %1$s expands the number of outbound links */
			text: i18n.sprintf( i18n.dgettext( "js-text-analysis", "This page has %1$s outbound link(s), all nofollowed." ),
				linkStatistics.externalNofollow ),
		};
	}

	if ( linkStatistics.externalNofollow < linkStatistics.externalTotal ) {
		return {
			score: 8,
			/* Translators: %1$s expands to the number of nofollow links, %2$s to the number of outbound links */
			text: i18n.sprintf( i18n.dgettext( "js-text-analysis", "This page has %1$s nofollowed link(s) and %2$s normal outbound link(s)." ),
				linkStatistics.externalNofollow, linkStatistics.externalDofollow ),
		};
	}

	if ( linkStatistics.externalDofollow === linkStatistics.total ) {
		return {
			score: 9,
			/* Translators: %1$s expands to the number of outbound links */
			text: i18n.sprintf( i18n.dgettext( "js-text-analysis", "This page has %1$s outbound link(s)." ), linkStatistics.externalTotal ),
		};
	}

	return {};
};

/**
 * Runs the getLinkStatistics module, based on this returns an assessment result with score.
 *
 * @param {object} paper The paper to use for the assessment.
 * @param {object} researcher The researcher used for calling research.
 * @param {object} i18n The object used for translations
 * @returns {object} the Assessmentresult
 */
var textHasLinksAssessment = function( paper, researcher, i18n ) {
	var linkStatistics = researcher.getResearch( "getLinkStatistics" );
	var assessmentResult = new AssessmentResult();
	if ( ! isEmpty( linkStatistics ) ) {
		var linkStatisticsResult = calculateLinkStatisticsResult( linkStatistics, i18n );
		assessmentResult.setScore( linkStatisticsResult.score );
		assessmentResult.setText( linkStatisticsResult.text );
	}
	return assessmentResult;
};

module.exports = {
	identifier: "textLinks",
	getResult: textHasLinksAssessment,
	isApplicable: function( paper ) {
		return paper.hasText();
	},
};

},{"../values/AssessmentResult.js":128,"lodash/isEmpty":278}],15:[function(require,module,exports){
var AssessmentResult = require( "../values/AssessmentResult.js" );
var escape = require( "lodash/escape" );

/**
 * Executes the pagetitle keyword assessment and returns an assessment result.
 * @param {Paper} paper The Paper object to assess.
 * @param {Researcher} researcher The Researcher object containing all available researches.
 * @param {object} i18n The locale object.
 * @returns {AssessmentResult} The result of the assessment with text and score
 */
var titleHasKeywordAssessment = function( paper, researcher, i18n ) {
	var keywordMatches = researcher.getResearch( "findKeywordInPageTitle" );
	var score, text;

	if ( keywordMatches.matches === 0 ) {
		score = 2;
		text = i18n.sprintf( i18n.dgettext( "js-text-analysis", "The focus keyword '%1$s' does " +
			"not appear in the SEO title." ), escape( paper.getKeyword() ) );
	}

	if ( keywordMatches.matches > 0 && keywordMatches.position === 0 ) {
		score = 9;
		text = i18n.dgettext( "js-text-analysis", "The SEO title contains the focus keyword, at the beginning which is considered " +
			"to improve rankings." );
	}

	if ( keywordMatches.matches > 0 && keywordMatches.position > 0 ) {
		score = 6;
		text = i18n.dgettext( "js-text-analysis", "The SEO title contains the focus keyword, but it does not appear at the beginning;" +
			" try and move it to the beginning." );
	}
	var assessmentResult = new AssessmentResult();

	assessmentResult.setScore( score );
	assessmentResult.setText( text );

	return assessmentResult;
};

module.exports = {
	identifier: "titleKeyword",
	getResult: titleHasKeywordAssessment,
	isApplicable: function( paper ) {
		return paper.hasKeyword();
	},
};

},{"../values/AssessmentResult.js":128,"lodash/escape":262}],16:[function(require,module,exports){
var AssessmentResult = require( "../values/AssessmentResult.js" );

/**
 * Calculate the score based on whether or not there's a keyword in the url.
 * @param {number} keywordsResult The amount of keywords to be checked against.
 * @param {object} i18n The locale object.
 * @returns {object} The resulting score object.
 */
var calculateUrlKeywordCountResult = function( keywordsResult, i18n ) {
	if ( keywordsResult > 0 ) {
		return {
			score: 9,
			text: i18n.dgettext( "js-text-analysis", "The focus keyword appears in the URL for this page." ),
		};
	}

	return {
		score: 6,
		text: i18n.dgettext( "js-text-analysis", "The focus keyword does not appear in the URL for this page. " +
		                                         "If you decide to rename the URL be sure to check the old URL 301 redirects to the new one!" ),
	};
};

/**
 * Execute the Assessment and return a result.
 * @param {Paper} paper The Paper object to assess.
 * @param {Researcher} researcher The Researcher object containing all available researches.
 * @param {object} i18n The locale object.
 * @returns {AssessmentResult} The result of the assessment, containing both a score and a descriptive text.
 */
var urlHasKeywordAssessment = function( paper, researcher, i18n ) {
	var keywords = researcher.getResearch( "keywordCountInUrl" );
	var keywordsResult = calculateUrlKeywordCountResult( keywords, i18n );

	var assessmentResult = new AssessmentResult();
	assessmentResult.setScore( keywordsResult.score );
	assessmentResult.setText( keywordsResult.text );

	return assessmentResult;
};

module.exports = {
	identifier: "urlKeyword",
	getResult: urlHasKeywordAssessment,
	isApplicable: function( paper ) {
		return paper.hasKeyword() && paper.hasUrl();
	},
};

},{"../values/AssessmentResult.js":128}],17:[function(require,module,exports){
var AssessmentResult = require( "../values/AssessmentResult.js" );

/**
 * The assessment that checks the url length
 *
 * @param {Paper} paper The paper to run this assessment on.
 * @param {object} researcher The researcher used for the assessment.
 * @param {object} i18n The i18n-object used for parsing translations.
 * @returns {object} an AssessmentResult with the score and the formatted text.
 */
var urlLengthAssessment = function( paper, researcher, i18n ) {
	var urlIsTooLong = researcher.getResearch( "urlLength" );
	var assessmentResult = new AssessmentResult();
	if ( urlIsTooLong ) {
		var score = 5;
		var text = i18n.dgettext( "js-text-analysis", "The slug for this page is a bit long, consider shortening it." );
		assessmentResult.setScore( score );
		assessmentResult.setText( text );
	}
	return assessmentResult;
};

module.exports = {
	identifier: "urlLength",
	getResult: urlLengthAssessment,
	isApplicable: function( paper ) {
		return paper.hasUrl();
	},
};

},{"../values/AssessmentResult.js":128}],18:[function(require,module,exports){
var AssessmentResult = require( "../values/AssessmentResult.js" );

/**
 * Calculate the score based on the amount of stop words in the url.
 * @param {number} stopWordCount The amount of stop words to be checked against.
 * @param {object} i18n The locale object.
 * @returns {object} The resulting score object.
 */
var calculateUrlStopWordsCountResult = function( stopWordCount, i18n ) {
	if ( stopWordCount > 0 ) {
		return {
			score: 5,
			text: i18n.dngettext(
				"js-text-analysis",
				/* Translators: %1$s opens a link to a wikipedia article about stop words, %2$s closes the link */
				"The slug for this page contains a %1$sstop word%2$s, consider removing it.",
				"The slug for this page contains %1$sstop words%2$s, consider removing them.",
				stopWordCount
			),
		};
	}

	return {};
};

/**
 * Execute the Assessment and return a result.
 * @param {Paper} paper The Paper object to assess.
 * @param {Researcher} researcher The Researcher object containing all available researches.
 * @param {object} i18n The locale object.
 * @returns {AssessmentResult} The result of the assessment, containing both a score and a descriptive text.
 */
var urlHasStopWordsAssessment = function( paper, researcher, i18n ) {
	var stopWords = researcher.getResearch( "stopWordsInUrl" );
	var stopWordsResult = calculateUrlStopWordsCountResult( stopWords.length, i18n );

	var assessmentResult = new AssessmentResult();
	assessmentResult.setScore( stopWordsResult.score );
	assessmentResult.setText( i18n.sprintf(
		stopWordsResult.text,
		/* Translators: this link is referred to in the content analysis when a slug contains one or more stop words */
		"<a href='" + i18n.dgettext( "js-text-analysis", "http://en.wikipedia.org/wiki/Stop_words" ) + "' target='new'>",
		"</a>"
	) );

	return assessmentResult;
};

module.exports = {
	identifier: "urlStopWords",
	getResult: urlHasStopWordsAssessment,
};

},{"../values/AssessmentResult.js":128}],19:[function(require,module,exports){
var Researcher = require( "./researcher.js" );
var MissingArgument = require( "./errors/missingArgument" );
var removeDuplicateMarks = require( "./markers/removeDuplicateMarks" );
var AssessmentResult = require( "./values/AssessmentResult.js" );
var showTrace = require( "./helpers/errors.js" ).showTrace;

var isUndefined = require( "lodash/isUndefined" );
var isFunction = require( "lodash/isFunction" );
var forEach = require( "lodash/forEach" );
var filter = require( "lodash/filter" );
var map = require( "lodash/map" );
var findIndex = require( "lodash/findIndex" );
var find = require( "lodash/find" );

var ScoreRating = 9;

/**
 * Creates the Assessor
 *
 * @param {Object} i18n The i18n object used for translations.
 * @param {Object} options The options for this assessor.
 * @param {Object} options.marker The marker to pass the list of marks to.
 *
 * @constructor
 */
var Assessor = function( i18n, options ) {
	this.setI18n( i18n );
	this._assessments = [];

	this._options = options || {};
};

/**
 * Checks if the i18n object is defined and sets it.
 * @param {Object} i18n The i18n object used for translations.
 * @throws {MissingArgument} Parameter needs to be a valid i18n object.
 */
Assessor.prototype.setI18n = function( i18n ) {
	if ( isUndefined( i18n ) ) {
		throw new MissingArgument( "The assessor requires an i18n object." );
	}
	this.i18n = i18n;
};

/**
 * Gets all available assessments.
 * @returns {object} assessment
 */
Assessor.prototype.getAvailableAssessments = function() {
	return this._assessments;
};

/**
 * Checks whether or not the Assessment is applicable.
 * @param {Object} assessment The Assessment object that needs to be checked.
 * @param {Paper} paper The Paper object to check against.
 * @param {Researcher} [researcher] The Researcher object containing additional information.
 * @returns {boolean} Whether or not the Assessment is applicable.
 */
Assessor.prototype.isApplicable = function( assessment, paper, researcher ) {
	if ( assessment.hasOwnProperty( "isApplicable" ) ) {
		return assessment.isApplicable( paper, researcher );
	}

	return true;
};

/**
 * Determines whether or not an assessment has a marker
 *
 * @param {Object} assessment The assessment to check for.
 * @returns {boolean} Whether or not the assessment has a marker.
 */
Assessor.prototype.hasMarker = function( assessment ) {
	if ( ! isUndefined( window ) && ! isUndefined( window.yoastHideMarkers ) && window.yoastHideMarkers ) {
		return false;
	}

	return isFunction( this._options.marker ) && assessment.hasOwnProperty( "getMarks" );
};

/**
 * Returns the specific marker for this assessor
 *
 * @returns {Function} The specific marker for this assessor.
 */
Assessor.prototype.getSpecificMarker = function() {
	return this._options.marker;
};

/**
 * Returns the paper that was most recently assessed
 *
 * @returns {Paper} The paper that was most recently assessed.
 */
Assessor.prototype.getPaper = function() {
	return this._lastPaper;
};

/**
 * Returns the marker for a given assessment, composes the specific marker with the assessment getMarks function.
 *
 * @param {Object} assessment The assessment for which we are retrieving the composed marker.
 * @param {Paper} paper The paper to retrieve the marker for.
 * @param {Researcher} researcher The researcher for the paper.
 * @returns {Function} A function that can mark the given paper according to the given assessment.
 */
Assessor.prototype.getMarker = function( assessment, paper, researcher ) {
	var specificMarker = this._options.marker;

	return function() {
		var marks = assessment.getMarks( paper, researcher );

		marks = removeDuplicateMarks( marks );

		specificMarker( paper, marks );
	};
};

/**
 * Runs the researches defined in the tasklist or the default researches.
 * @param {Paper} paper The paper to run assessments on.
 */
Assessor.prototype.assess = function( paper ) {
	var researcher = new Researcher( paper );
	var assessments = this.getAvailableAssessments();
	this.results = [];

	assessments = filter( assessments, function( assessment ) {
		return this.isApplicable( assessment, paper, researcher );
	}.bind( this ) );

	this.setHasMarkers( false );
	this.results = map( assessments, this.executeAssessment.bind( this, paper, researcher ) );

	this._lastPaper = paper;
};

/**
 * Sets the value of has markers with a boolean to determine if there are markers.
 *
 * @param {bool} hasMarkers True when there are markers, otherwise it is false.
 */
Assessor.prototype.setHasMarkers = function( hasMarkers ) {
	this._hasMarkers = hasMarkers;
};

/**
 * Returns true when there are markers.
 *
 * @returns {bool} Are there markers
 */
Assessor.prototype.hasMarkers = function() {
	return this._hasMarkers;
};

/**
 * Executes an assessment and returns the AssessmentResult
 *
 * @param {Paper} paper The paper to pass to the assessment.
 * @param {Researcher} researcher The researcher to pass to the assessment.
 * @param {Object} assessment The assessment to execute.
 * @returns {AssessmentResult} The result of the assessment.
 */
Assessor.prototype.executeAssessment = function( paper, researcher, assessment ) {
	var result;

	try {
		result = assessment.getResult( paper, researcher, this.i18n );
		result.setIdentifier( assessment.identifier );

		if ( result.hasMarks() && this.hasMarker( assessment ) ) {
			this.setHasMarkers( true );

			result.setMarker( this.getMarker( assessment, paper, researcher ) );
		}
	} catch ( assessmentError ) {
		showTrace( assessmentError );

		result = new AssessmentResult();

		result.setScore( 0 );
		result.setText( this.i18n.sprintf(
			/* Translators: %1$s expands to the name of the assessment. */
			this.i18n.dgettext( "js-text-analysis", "An error occurred in the '%1$s' assessment" ),
			assessment.identifier,
			assessmentError
		) );
	}
	return result;
};

/**
 * Filters out all assessmentresults that have no score and no text.
 * @returns {Array<AssessmentResult>} The array with all the valid assessments.
 */
Assessor.prototype.getValidResults = function() {
	return filter( this.results, function( result ) {
		return this.isValidResult( result );
	}.bind( this ) );
};

/**
 * Returns if an assessmentResult is valid.
 * @param {object} assessmentResult The assessmentResult to validate.
 * @returns {boolean} whether or not the result is valid.
 */
Assessor.prototype.isValidResult = function( assessmentResult ) {
	return assessmentResult.hasScore() && assessmentResult.hasText();
};

/**
 * Returns the overallscore. Calculates the totalscore by adding all scores and dividing these
 * by the number of results times the ScoreRating.
 *
 * @returns {number} The overallscore
 */
Assessor.prototype.calculateOverallScore  = function() {
	var results = this.getValidResults();
	var totalScore = 0;

	forEach( results, function( assessmentResult ) {
		totalScore += assessmentResult.getScore();
	} );

	return Math.round( totalScore / ( results.length * ScoreRating ) * 100 ) || 0;
};

/**
 * Register an assessment to add it to the internal assessments object.
 *
 * @param {string} name The name of the assessment.
 * @param {object} assessment The object containing function to run as an assessment and it's requirements.
 * @returns {boolean} Whether registering the assessment was successful.
 * @private
 */
Assessor.prototype.addAssessment = function( name, assessment ) {
	if ( ! assessment.hasOwnProperty( "identifier" ) ) {
		assessment.identifier = name;
	}

	this._assessments.push( assessment );
	return true;
};

/**
 * Remove a specific Assessment from the list of Assessments.
 * @param {string} name The Assessment to remove from the list of assessments.
 */
Assessor.prototype.removeAssessment = function( name ) {
	var toDelete = findIndex( this._assessments, function( assessment ) {
		return assessment.hasOwnProperty( "identifier" ) && name === assessment.identifier;
	} );

	if ( -1 !== toDelete ) {
		this._assessments.splice( toDelete, 1 );
	}
};

/**
 * Returns an assessment by identifier
 *
 * @param {string} identifier The identifier of the assessment.
 * @returns {undefined|Object} The object if found, otherwise undefined.
 */
Assessor.prototype.getAssessment = function( identifier ) {
	return find( this._assessments, function( assessment ) {
		return assessment.hasOwnProperty( "identifier" ) && identifier === assessment.identifier;
	} );
};

module.exports = Assessor;

},{"./errors/missingArgument":30,"./helpers/errors.js":31,"./markers/removeDuplicateMarks":41,"./researcher.js":42,"./values/AssessmentResult.js":128,"lodash/filter":263,"lodash/find":264,"lodash/findIndex":265,"lodash/forEach":267,"lodash/isFunction":279,"lodash/isUndefined":290,"lodash/map":294}],20:[function(require,module,exports){
/** @module config/diacritics */

/**
 * Returns the diacritics map
 *
 * @returns {array} diacritics map
 */
module.exports = function() {
	return [
		{
			base: "a",
			letters: /[\u0061\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250]/g
		},
		{ base: "aa", letters: /[\uA733]/g },
		{ base: "ae", letters: /[\u00E6\u01FD\u01E3]/g },
		{ base: "ao", letters: /[\uA735]/g },
		{ base: "au", letters: /[\uA737]/g },
		{ base: "av", letters: /[\uA739\uA73B]/g },
		{ base: "ay", letters: /[\uA73D]/g },
		{ base: "b", letters: /[\u0062\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253]/g },
		{
			base: "c",
			letters: /[\u0063\u24D2\uFF43\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184]/g
		},
		{
			base: "d",
			letters: /[\u0064\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A]/g
		},
		{ base: "dz", letters: /[\u01F3\u01C6]/g },
		{
			base: "e",
			letters: /[\u0065\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD]/g
		},
		{ base: "f", letters: /[\u0066\u24D5\uFF46\u1E1F\u0192\uA77C]/g },
		{
			base: "g",
			letters: /[\u0067\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F]/g
		},
		{
			base: "h",
			letters: /[\u0068\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265]/g
		},
		{ base: "hv", letters: /[\u0195]/g },
		{
			base: "i",
			letters: /[\u0069\u24D8\uFF49\u00EC\u00ED\u00EE\u0129\u012B\u012D\u00EF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131]/g
		},
		{ base: "j", letters: /[\u006A\u24D9\uFF4A\u0135\u01F0\u0249]/g },
		{
			base: "k",
			letters: /[\u006B\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3]/g
		},
		{
			base: "l",
			letters: /[\u006C\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747]/g
		},
		{ base: "lj", letters: /[\u01C9]/g },
		{ base: "m", letters: /[\u006D\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F]/g },
		{
			base: "n",
			letters: /[\u006E\u24DD\uFF4E\u01F9\u0144\u00F1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5]/g
		},
		{ base: "nj", letters: /[\u01CC]/g },
		{
			base: "o",
			letters: /[\u006F\u24DE\uFF4F\u00F2\u00F3\u00F4\u1ED3\u1ED1\u1ED7\u1ED5\u00F5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\u00F6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\u00F8\u01FF\u0254\uA74B\uA74D\u0275]/g
		},
		{ base: "oi", letters: /[\u01A3]/g },
		{ base: "ou", letters: /[\u0223]/g },
		{ base: "oo", letters: /[\uA74F]/g },
		{ base: "p", letters: /[\u0070\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755]/g },
		{ base: "q", letters: /[\u0071\u24E0\uFF51\u024B\uA757\uA759]/g },
		{
			base: "r",
			letters: /[\u0072\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783]/g
		},
		{
			base: "s",
			letters: /[\u0073\u24E2\uFF53\u00DF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B]/g
		},
		{
			base: "t",
			letters: /[\u0074\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787]/g
		},
		{ base: "tz", letters: /[\uA729]/g },
		{
			base: "u",
			letters: /[\u0075\u24E4\uFF55\u00F9\u00FA\u00FB\u0169\u1E79\u016B\u1E7B\u016D\u00FC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289]/g
		},
		{ base: "v", letters: /[\u0076\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C]/g },
		{ base: "vy", letters: /[\uA761]/g },
		{
			base: "w",
			letters: /[\u0077\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73]/g
		},
		{ base: "x", letters: /[\u0078\u24E7\uFF58\u1E8B\u1E8D]/g },
		{
			base: "y",
			letters: /[\u0079\u24E8\uFF59\u1EF3\u00FD\u0177\u1EF9\u0233\u1E8F\u00FF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF]/g
		},
		{
			base: "z",
			letters: /[\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763]/g
		}
	];
};

},{}],21:[function(require,module,exports){
/** @module config/removalWords */

/**
 * Returns an array with words that need to be removed
 *
 * @returns {array} removalWords Returns an array with words.
 */
module.exports = function() {
	return [ " a", " in", " an", " on", " for", " the", " and" ];
};

},{}],22:[function(require,module,exports){
/** @module config/stopwords */

/**
 * Returns an array with stopwords to be used by the analyzer.
 *
 * @returns {Array} stopwords The array filled with stopwords.
 */
module.exports = function() {
	return [ "a", "about", "above", "after", "again", "against", "all", "am", "an", "and", "any", "are", "as", "at", "be", "because", "been", "before", "being", "below", "between", "both", "but", "by", "could", "did", "do", "does", "doing", "down", "during", "each", "few", "for", "from", "further", "had", "has", "have", "having", "he", "he'd", "he'll", "he's", "her", "here", "here's", "hers", "herself", "him", "himself", "his", "how", "how's", "i", "i'd", "i'll", "i'm", "i've", "if", "in", "into", "is", "it", "it's", "its", "itself", "let's", "me", "more", "most", "my", "myself", "nor", "of", "on", "once", "only", "or", "other", "ought", "our", "ours", "ourselves", "out", "over", "own", "same", "she", "she'd", "she'll", "she's", "should", "so", "some", "such", "than", "that", "that's", "the", "their", "theirs", "them", "themselves", "then", "there", "there's", "these", "they", "they'd", "they'll", "they're", "they've", "this", "those", "through", "to", "too", "under", "until", "up", "very", "was", "we", "we'd", "we'll", "we're", "we've", "were", "what", "what's", "when", "when's", "where", "where's", "which", "while", "who", "who's", "whom", "why", "why's", "with", "would", "you", "you'd", "you'll", "you're", "you've", "your", "yours", "yourself", "yourselves" ];
};

},{}],23:[function(require,module,exports){
/** @module config/syllables */

var getLanguage = require( "../helpers/getLanguage.js" );
var isUndefined = require( "lodash/isUndefined" );

var de = require( "./syllables/de.json" );
var en = require( './syllables/en.json' );
var nl = require( './syllables/nl.json' );

module.exports = function( locale ) {
	if ( isUndefined( locale ) ) {
		locale = "en_US"
	}

	switch( getLanguage( locale ) ) {
		case "de":
			return de;
		case "nl":
			return nl;
		case "en":
		default:
			return en;
	}
};

},{"../helpers/getLanguage.js":34,"./syllables/de.json":24,"./syllables/en.json":25,"./syllables/nl.json":26,"lodash/isUndefined":290}],24:[function(require,module,exports){
module.exports={
  "vowels": "aeiouyäöüáéâàèîêâûôœ",
  "deviations": {
    "vowels": [
      {
        "fragments": ["ouil", "deaux", "deau$", "oard", "äthiop", "euil", "veau", "eau$", "ueue", "lienisch", "ance$", "ence$", "time$",
          "once$", "ziat", "guette", "ête$", "ôte$", "[hmp]omme$", "[qdscn]ue$", "chaise", "aire$", "ture$", "êpe$", "[^q]ui$", "tiche$",
          "ource$", "vice$", "oile$", "zial", "cruis", "leas", "blue", "lead", "coa[ct]", "^deal", "[^i]deal", "[fw]eat", "cache[^t]", "[lsx]sed$"],
        "countModifier": -1
      },
      {
        "fragments": ["aau", "a[äöüo]", "äue", "äeu", "aei", "aue", "aeu", "ael", "ayo", "ai[aeo]", "saik", "aismus", "ä[aeoi]", "auä", "éa",
          "e[äaoö]", "ei[eo]", "ee[eiuoa]", "eu[aäe]", "eum$", "eü", "o[aäöü]", "poet", "oo[eo]", "oie", "oei[^l]", "oeu[^f]", "öa", "[fgrz]ieu",
          "mieun", "tieur", "ieum", "i[aiuü]", "[^l]iä", "[^s]chien", "io[wqtpdfhjkxcvbmu]", "[brpdhvm]ion", "[lr]ior", "[^g]ios",
          "[^g]iog", "[rd]ioz", "elioz", "zioni", "bio[lnzr]", "iö[^s]", "ie[ei]", "rier$", "öi[ge]", "[^r]oïsch",
          "[^qgv]u[aeéioöuü]", "quie$", "quie[^s]", "uäu", "^us-", "^it-", "üe", "naiv", "aisch$", "aische$", "[lst]ien", "dien$", "gois", "[^g]rient",
          "[aeiou]y[aeiou]", "byi", "yä", "[a-z]yo", "[a-z]ya", "yau", "yie", "koor", "scient", "eriel", "[bdg]oing"],
        "countModifier": 1
      },
      {
        "fragments": ["ioi", "ioo", "ioa", "eio", "iii", "oai", "eueu"],
        "countModifier": 1
      }
    ],
    "words": {
      "full": [
        {"word": "beach", "syllables": 1},
        {"word": "beat", "syllables": 1},
        {"word": "beau", "syllables": 1},
        {"word": "beaune", "syllables": 1},
        {"word": "belle", "syllables": 1},
        {"word": "bouche", "syllables": 1},
        {"word": "brake", "syllables": 1},
        {"word": "cache", "syllables": 1},
        {"word": "cache", "syllables": 1},
        {"word": "chaiselongue", "syllables": 2},
        {"word": "choke", "syllables": 1},
        {"word": "cordiale", "syllables": 3},
        {"word": "core", "syllables": 1},
        {"word": "dope", "syllables": 1},
        {"word": "eat", "syllables": 1},
        {"word": "eye", "syllables": 1},
        {"word": "fake", "syllables": 1},
        {"word": "fame", "syllables": 1},
        {"word": "fatigue", "syllables": 2},
        {"word": "femme", "syllables": 1},
        {"word": "force", "syllables": 1},
        {"word": "game", "syllables": 1},
        {"word": "games", "syllables": 1},
        {"word": "gate", "syllables": 1},
        {"word": "grande", "syllables": 1},
        {"word": "ice", "syllables": 1},
        {"word": "ion", "syllables": 2},
        {"word": "joke", "syllables": 1},
        {"word": "jupe", "syllables": 1},
        {"word": "maisch", "syllables": 1},
        {"word": "maische", "syllables": 2},
        {"word": "move", "syllables": 1},
        {"word": "native", "syllables": 2},
        {"word": "nice", "syllables": 1},
        {"word": "one", "syllables": 1},
        {"word": "pipe", "syllables": 1},
        {"word": "prime", "syllables": 1},
        {"word": "rate", "syllables": 1},
        {"word": "rhythm", "syllables": 2},
        {"word": "ride", "syllables": 1},
        {"word": "rides", "syllables": 1},
        {"word": "rien", "syllables": 2},
        {"word": "save", "syllables": 1},
        {"word": "science", "syllables": 2},
        {"word": "siècle", "syllables": 1},
        {"word": "site", "syllables": 1},
        {"word": "suite", "syllables": 1},
        {"word": "take", "syllables": 1},
        {"word": "taupe", "syllables": 1},
        {"word": "universe", "syllables": 3},
        {"word": "vogue", "syllables": 1},
        {"word": "wave", "syllables": 1},
        {"word": "zion", "syllables": 2}
      ],
      "fragments": {
        "global": [
          {"word": "abreaktion", "syllables": 4},
          {"word": "adware", "syllables": 2},
          {"word": "affaire", "syllables": 3},
          {"word": "aiguière", "syllables": 2},
          {"word": "anisette", "syllables": 3},
          {"word": "appeal", "syllables": 2},
          {"word": "backstage", "syllables": 2},
          {"word": "bankrate", "syllables": 2},
          {"word": "baseball", "syllables": 2},
          {"word": "basejump", "syllables": 2},
          {"word": "beachcomber", "syllables": 3},
          {"word": "beachvolleyball", "syllables": 4},
          {"word": "beagle", "syllables": 2},
          {"word": "beamer", "syllables": 2},
          {"word": "beamer", "syllables": 2},
          {"word": "béarnaise", "syllables": 3},
          {"word": "beaufort", "syllables": 2},
          {"word": "beaujolais", "syllables": 3},
          {"word": "beauté", "syllables": 2},
          {"word": "beauty", "syllables": 2},
          {"word": "belgier", "syllables": 3},
          {"word": "bestien", "syllables": 2},
          {"word": "biskuit", "syllables": 2},
          {"word": "bleach", "syllables": 1},
          {"word": "board", "syllables": 1},
          {"word": "boat", "syllables": 1},
          {"word": "bodysuit", "syllables": 3},
          {"word": "bordelaise", "syllables": 3},
          {"word": "break", "syllables": 1},
          {"word": "build", "syllables": 1},
          {"word": "bureau", "syllables": 2},
          {"word": "business", "syllables": 2},
          {"word": "cabrio", "syllables": 3},
          {"word": "cabriolet", "syllables": 4},
          {"word": "cachesexe", "syllables": 2},
          {"word": "camaieu", "syllables": 3},
          {"word": "canyon", "syllables": 2},
          {"word": "case", "syllables": 1},
          {"word": "catsuit", "syllables": 2},
          {"word": "centime", "syllables": 3},
          {"word": "champion", "syllables": 2},
          {"word": "championat", "syllables": 3},
          {"word": "chapiteau", "syllables": 3},
          {"word": "chateau", "syllables": 2},
          {"word": "château", "syllables": 2},
          {"word": "cheat", "syllables": 1},
          {"word": "cheese", "syllables": 1},
          {"word": "chihuahua", "syllables": 3},
          {"word": "choice", "syllables": 1},
          {"word": "circonflexe", "syllables": 3},
          {"word": "clean", "syllables": 1},
          {"word": "cloche", "syllables": 1},
          {"word": "close", "syllables": 1},
          {"word": "clothes", "syllables": 1},
          {"word": "commerce", "syllables": 2},
          {"word": "crime", "syllables": 1},
          {"word": "crossrate", "syllables": 2},
          {"word": "cuisine", "syllables": 2},
          {"word": "culotte", "syllables": 2},
          {"word": "death", "syllables": 1},
          {"word": "defense", "syllables": 2},
          {"word": "détente", "syllables": 2},
          {"word": "dread", "syllables": 1},
          {"word": "dream", "syllables": 1},
          {"word": "dresscode", "syllables": 2},
          {"word": "dungeon", "syllables": 2},
          {"word": "easy", "syllables": 2},
          {"word": "engagement", "syllables": 3},
          {"word": "entente", "syllables": 2},
          {"word": "eye-catcher", "syllables": 3},
          {"word": "eyecatcher", "syllables": 3},
          {"word": "eyeliner", "syllables": 3},
          {"word": "eyeword", "syllables": 2},
          {"word": "fashion", "syllables": 2},
          {"word": "ferien", "syllables": 3},
          {"word": "fineliner", "syllables": 3},
          {"word": "fisheye", "syllables": 2},
          {"word": "flake", "syllables": 1},
          {"word": "flambeau", "syllables": 2},
          {"word": "flatrate", "syllables": 2},
          {"word": "fleece", "syllables": 1},
          {"word": "fraîche", "syllables": 1},
          {"word": "freak", "syllables": 1},
          {"word": "frites", "syllables": 1},
          {"word": "future", "syllables": 2},
          {"word": "gaelic", "syllables": 2},
          {"word": "game-show", "syllables": 2},
          {"word": "gameboy", "syllables": 2},
          {"word": "gamepad", "syllables": 2},
          {"word": "gameplay", "syllables": 2},
          {"word": "gameport", "syllables": 2},
          {"word": "gameshow", "syllables": 2},
          {"word": "garigue", "syllables": 2},
          {"word": "garrigue", "syllables": 2},
          {"word": "gatefold", "syllables": 2},
          {"word": "gateway", "syllables": 2},
          {"word": "geflashed", "syllables": 2},
          {"word": "georgier", "syllables": 4},
          {"word": "goal", "syllables": 1},
          {"word": "grapefruit", "syllables": 2},
          {"word": "great", "syllables": 1},
          {"word": "groupware", "syllables": 2},
          {"word": "gueule", "syllables": 1},
          {"word": "guide", "syllables": 1},
          {"word": "guilloche", "syllables": 2},
          {"word": "gynäzeen", "syllables": 4},
          {"word": "gynözeen", "syllables": 4},
          {"word": "haircare", "syllables": 2},
          {"word": "hardcore", "syllables": 2},
          {"word": "hardware", "syllables": 2},
          {"word": "head", "syllables": 1},
          {"word": "hearing", "syllables": 2},
          {"word": "heart", "syllables": 1},
          {"word": "heavy", "syllables": 2},
          {"word": "hedge", "syllables": 1},
          {"word": "heroin", "syllables": 3},
          {"word": "inclusive", "syllables": 3},
          {"word": "initiative", "syllables": 4},
          {"word": "inside", "syllables": 2},
          {"word": "jaguar", "syllables": 3},
          {"word": "jalousette", "syllables": 3},
          {"word": "jeans", "syllables": 1},
          {"word": "jeunesse", "syllables": 2},
          {"word": "juice", "syllables": 1},
          {"word": "jukebox", "syllables": 2},
          {"word": "jumpsuit", "syllables": 2},
          {"word": "kanarien", "syllables": 4},
          {"word": "kapriole", "syllables": 4},
          {"word": "karosserielinie", "syllables": 6},
          {"word": "konopeen", "syllables": 4},
          {"word": "lacrosse", "syllables": 2},
          {"word": "laplace", "syllables": 2},
          {"word": "late-", "syllables": 1},
          {"word": "league", "syllables": 1},
          {"word": "learn", "syllables": 1},
          {"word": "légière", "syllables": 2},
          {"word": "lizenziat", "syllables": 4},
          {"word": "load", "syllables": 1},
          {"word": "lotterielos", "syllables": 4},
          {"word": "lounge", "syllables": 1},
          {"word": "lyzeen", "syllables": 3},
          {"word": "madame", "syllables": 2},
          {"word": "mademoiselle", "syllables": 3},
          {"word": "magier", "syllables": 3},
          {"word": "make-up", "syllables": 2},
          {"word": "malware", "syllables": 2},
          {"word": "management", "syllables": 3},
          {"word": "manteau", "syllables": 2},
          {"word": "mausoleen", "syllables": 4},
          {"word": "mauve", "syllables": 1},
          {"word": "medien", "syllables": 3},
          {"word": "mesdames", "syllables": 2},
          {"word": "mesopotamien", "syllables": 6},
          {"word": "milliarde", "syllables": 3},
          {"word": "missile", "syllables": 2},
          {"word": "miszellaneen", "syllables": 5},
          {"word": "mousse", "syllables": 1},
          {"word": "mousseline", "syllables": 3},
          {"word": "museen", "syllables": 3},
          {"word": "musette", "syllables": 2},
          {"word": "nahuatl", "syllables": 2},
          {"word": "noisette", "syllables": 2},
          {"word": "notebook", "syllables": 2},
          {"word": "nuance", "syllables": 3},
          {"word": "nuklease", "syllables": 4},
          {"word": "odeen", "syllables": 3},
          {"word": "offline", "syllables": 2},
          {"word": "offside", "syllables": 2},
          {"word": "oleaster", "syllables": 4},
          {"word": "on-stage", "syllables": 2},
          {"word": "online", "syllables": 2},
          {"word": "orpheen", "syllables": 3},
          {"word": "parforceritt", "syllables": 3},
          {"word": "patiens", "syllables": 2},
          {"word": "patient", "syllables": 2},
          {"word": "peace", "syllables": 1},
          {"word": "peace", "syllables": 1},
          {"word": "peanuts", "syllables": 2},
          {"word": "people", "syllables": 2},
          {"word": "perineen", "syllables": 4},
          {"word": "peritoneen", "syllables": 5},
          {"word": "picture", "syllables": 2},
          {"word": "piece", "syllables": 1},
          {"word": "pipeline", "syllables": 2},
          {"word": "plateau", "syllables": 2},
          {"word": "poesie", "syllables": 3},
          {"word": "poleposition", "syllables": 4},
          {"word": "portemanteau", "syllables": 3},
          {"word": "portemonnaie", "syllables": 3},
          {"word": "primerate", "syllables": 2},
          {"word": "primerate", "syllables": 2},
          {"word": "primetime", "syllables": 2},
          {"word": "protease", "syllables": 4},
          {"word": "protein", "syllables": 3},
          {"word": "prytaneen", "syllables": 4},
          {"word": "quotient", "syllables": 2},
          {"word": "radio", "syllables": 3},
          {"word": "reader", "syllables": 2},
          {"word": "ready", "syllables": 2},
          {"word": "reallife", "syllables": 2},
          {"word": "repeat", "syllables": 2},
          {"word": "retake", "syllables": 2},
          {"word": "rigole", "syllables": 2},
          {"word": "risolle", "syllables": 2},
          {"word": "road", "syllables": 1},
          {"word": "roaming", "syllables": 2},
          {"word": "roquefort", "syllables": 2},
          {"word": "safe", "syllables": 1},
          {"word": "savonette", "syllables": 3},
          {"word": "sciencefiction", "syllables": 3},
          {"word": "search", "syllables": 1},
          {"word": "selfmade", "syllables": 2},
          {"word": "septime", "syllables": 3},
          {"word": "serapeen", "syllables": 4},
          {"word": "service", "syllables": 2},
          {"word": "serviette", "syllables": 2},
          {"word": "share", "syllables": 1},
          {"word": "shave", "syllables": 1},
          {"word": "shore", "syllables": 1},
          {"word": "sidebar", "syllables": 2},
          {"word": "sideboard", "syllables": 2},
          {"word": "sidekick", "syllables": 2},
          {"word": "silhouette", "syllables": 3},
          {"word": "sitemap", "syllables": 2},
          {"word": "slide", "syllables": 1},
          {"word": "sneak", "syllables": 1},
          {"word": "soap", "syllables": 1},
          {"word": "softcore", "syllables": 2},
          {"word": "software", "syllables": 2},
          {"word": "soutanelle", "syllables": 3},
          {"word": "speak", "syllables": 1},
          {"word": "special", "syllables": 2},
          {"word": "spracheinstellung", "syllables": 5},
          {"word": "spyware", "syllables": 2},
          {"word": "square", "syllables": 1},
          {"word": "stagediving", "syllables": 3},
          {"word": "stakeholder", "syllables": 3},
          {"word": "statement", "syllables": 2},
          {"word": "steady", "syllables": 2},
          {"word": "steak", "syllables": 1},
          {"word": "stealth", "syllables": 1},
          {"word": "steam", "syllables": 1},
          {"word": "stoned", "syllables": 1},
          {"word": "stracciatella", "syllables": 4},
          {"word": "stream", "syllables": 1},
          {"word": "stride", "syllables": 1},
          {"word": "strike", "syllables": 1},
          {"word": "suitcase", "syllables": 2},
          {"word": "sweepstake", "syllables": 2},
          {"word": "t-bone", "syllables": 2},
          {"word": "t-shirt", "syllables": 1},
          {"word": "tailgate", "syllables": 2},
          {"word": "take-off", "syllables": 2},
          {"word": "take-over", "syllables": 3},
          {"word": "takeaway", "syllables": 3},
          {"word": "takeoff", "syllables": 2},
          {"word": "takeover", "syllables": 3},
          {"word": "throat", "syllables": 1},
          {"word": "time-out", "syllables": 2},
          {"word": "timelag", "syllables": 2},
          {"word": "timeline", "syllables": 2},
          {"word": "timesharing", "syllables": 3},
          {"word": "toast", "syllables": 1},
          {"word": "traubenmaische", "syllables": 4},
          {"word": "tristesse", "syllables": 2},
          {"word": "usenet", "syllables": 2},
          {"word": "varietät", "syllables": 4},
          {"word": "varieté", "syllables": 4},
          {"word": "vinaigrette", "syllables": 3},
          {"word": "vintage", "syllables": 2},
          {"word": "violett", "syllables": 3},
          {"word": "voice", "syllables": 1},
          {"word": "wakeboard", "syllables": 2},
          {"word": "washed", "syllables": 1},
          {"word": "waveboard", "syllables": 2},
          {"word": "wear", "syllables": 1},
          {"word": "wear", "syllables": 1},
          {"word": "website", "syllables": 2},
          {"word": "white", "syllables": 1},
          {"word": "widescreen", "syllables": 2},
          {"word": "wire", "syllables": 1},
          {"word": "yacht", "syllables": 1},
          {"word": "yorkshire", "syllables": 2},
          {"word": "éprouvette", "syllables": 3, "notFollowedBy": ["n"]},
          {"word": "galette", "syllables": 2, "notFollowedBy": ["n"]},
          {"word": "gigue", "syllables": 1, "notFollowedBy": ["n"]},
          {"word": "groove", "syllables": 1, "notFollowedBy": ["n"]},
          {"word": "morgue", "syllables": 1, "notFollowedBy": ["n"]},
          {"word": "paillette", "syllables": 2, "notFollowedBy": ["n"]},
          {"word": "raclette", "syllables": 2, "notFollowedBy": ["n"]},
          {"word": "roulette", "syllables": 2, "notFollowedBy": ["n"]},
          {"word": "spike", "syllables": 1, "notFollowedBy": ["n"]},
          {"word": "style", "syllables": 1, "notFollowedBy": ["n"]},
          {"word": "tablette", "syllables": 2, "notFollowedBy": ["n"]},
          {"word": "grunge", "syllables": 1, "notFollowedBy": ["r"]},
          {"word": "size", "syllables": 1, "notFollowedBy": ["r"]},
          {"word": "value", "syllables": 1, "notFollowedBy": ["r"]},
          {"word": "quiche", "syllables": 1, "notFollowedBy": ["s"]},
          {"word": "house", "syllables": 1, "notFollowedBy": ["n", "s"]},
          {"word": "sauce", "syllables": 1, "notFollowedBy": ["n", "s"]},
          {"word": "space", "syllables": 1, "notFollowedBy": ["n", "s"]},
          {"word": "airline", "syllables": 2, "notFollowedBy": ["n", "r"]},
          {"word": "autosave", "syllables": 3, "notFollowedBy": ["n", "r"]},
          {"word": "bagpipe", "syllables": 2, "notFollowedBy": ["n", "r"]},
          {"word": "bike", "syllables": 1, "notFollowedBy": ["n", "r"]},
          {"word": "dance", "syllables": 1, "notFollowedBy": ["n", "r"]},
          {"word": "deadline", "syllables": 2, "notFollowedBy": ["n", "r"]},
          {"word": "halfpipe", "syllables": 2, "notFollowedBy": ["n", "r"]},
          {"word": "headline", "syllables": 2, "notFollowedBy": ["n", "r"]},
          {"word": "home", "syllables": 1, "notFollowedBy": ["n", "r"]},
          {"word": "hornpipe", "syllables": 2, "notFollowedBy": ["n", "r"]},
          {"word": "hotline", "syllables": 2, "notFollowedBy": ["n", "r"]},
          {"word": "infoline", "syllables": 3, "notFollowedBy": ["n", "r"]},
          {"word": "inline", "syllables": 2, "notFollowedBy": ["n", "r"]},
          {"word": "kite", "syllables": 1, "notFollowedBy": ["n", "r"]},
          {"word": "rollerblade", "syllables": 1, "notFollowedBy": ["n", "r"]},
          {"word": "score", "syllables": 1, "notFollowedBy": ["n", "r"]},
          {"word": "skyline", "syllables": 2, "notFollowedBy": ["n", "r"]},
          {"word": "slackline", "syllables": 2, "notFollowedBy": ["n", "r"]},
          {"word": "slice", "syllables": 1, "notFollowedBy": ["n", "r"]},
          {"word": "snooze", "syllables": 1, "notFollowedBy": ["n", "r"]},
          {"word": "storyline", "syllables": 3, "notFollowedBy": ["n", "r"]},
          {"word": "office", "syllables": 2, "notFollowedBy": ["s", "r"]},
          {"word": "space", "syllables": 1, "notFollowedBy": ["n", "s", "r"]},
          {"word": "tease", "syllables": 1, "notFollowedBy": ["n", "s", "r"]}
        ],
        "atBeginningOrEnd": [
          {"word": "case", "syllables": 1},
          {"word": "life", "syllables": 1},
          {"word": "teak", "syllables": 1},
          {"word": "team", "syllables": 1},
          {"word": "creme", "syllables": 1, "notFollowedBy": ["n", "r"]},
          {"word": "crème", "syllables": 1, "notFollowedBy": ["n", "r"]},
          {"word": "drive", "syllables": 1, "notFollowedBy": ["n", "r"]},
          {"word": "skate", "syllables": 1, "notFollowedBy": ["n", "r"]},
          {"word": "update", "syllables": 2, "notFollowedBy": ["n", "r"]},
          {"word": "upgrade", "syllables": 2, "notFollowedBy": ["n", "r"]}
        ],
        "atBeginning": [
          {"word": "anion", "syllables": 3},
          {"word": "facelift", "syllables": 2},
          {"word": "jiu", "syllables": 1},
          {"word": "pace", "syllables": 1},
          {"word": "shake", "syllables": 1},
          {"word": "tea", "syllables": 1},
          {"word": "trade", "syllables": 1}
        ],
        "atEnd": [
          {"word": "face", "syllables": 1},
          {"word": "file", "syllables": 1},
          {"word": "mousse", "syllables": 1},
          {"word": "plate", "syllables": 1},
          {"word": "tape", "syllables": 1},
          {"word": "byte", "syllables": 1, "alsoFollowedBy": ["s"]},
          {"word": "cape", "syllables": 1, "alsoFollowedBy": ["s"]},
          {"word": "five", "syllables": 1, "alsoFollowedBy": ["s"]},
          {"word": "hype", "syllables": 1, "alsoFollowedBy": ["s"]},
          {"word": "leak", "syllables": 1, "alsoFollowedBy": ["s"]},
          {"word": "like", "syllables": 1, "alsoFollowedBy": ["s"]},
          {"word": "make", "syllables": 1, "alsoFollowedBy": ["s"]},
          {"word": "phone", "syllables": 1, "alsoFollowedBy": ["s"]},
          {"word": "rave", "syllables": 1, "alsoFollowedBy": ["s"]},
          {"word": "regime", "syllables": 2, "alsoFollowedBy": ["s"]},
          {"word": "statue", "syllables": 2, "alsoFollowedBy": ["s"]},
          {"word": "store", "syllables": 1, "alsoFollowedBy": ["s"]},
          {"word": "wave", "syllables": 1, "alsoFollowedBy": ["s"]},
          {"word": "date", "syllables": 1, "notFollowedBy": ["n"]},
          {"word": "image", "syllables": 2, "notFollowedBy": ["s"]}
        ]
      }
    }
  }
}

},{}],25:[function(require,module,exports){
module.exports={
	"vowels": "aeiouy",
	"deviations": {
		"vowels": [
			{
				"fragments": [ "cial", "tia", "cius", "cious", "giu", "ion",
					"iou", "sia$", "[^aeiuoyt]{2,}ed$",
					"[aeiouy][^aeiuoyts]{1,}e$", ".ely$", "[cg]h?e[sd]",
					"rved$", "rved", "[aeiouy][dt]es?$",
					"[aeiouy][^aeiouydt]e[sd]?$", "^[dr]e[aeiou][^aeiou]+$",
					"[aeiouy]rse$" ],
				"countModifier": -1
			},
			{
				"fragments": [ "ia", "riet", "dien", "iu", "io", "ii",
					"[aeiouym][bdp]le$", "[aeiou]{3}", "^mc", "ism$",
					"([^aeiouy])\\1l$", "[^l]lien", "^coa[dglx].",
					"[^gq]ua[^auieo]", "dnt$", "uity$", "ie(r|st)",
					"[aeiouy]ing", "[aeiouw]y[aeiou]", "[^ao]ire[ds]", "[^ao]ire$" ],
				"countModifier": 1
			}
		],
		"words": {
			"full": [
				{ "word": "business", "syllables": 2 },
				{ "word": "coheiress", "syllables": 3 },
				{ "word": "colonel", "syllables": 2 },
				{ "word": "heiress", "syllables": 2 },
				{ "word": "i.e", "syllables": 2 },
				{ "word": "shoreline", "syllables": 2 },
				{ "word": "simile", "syllables": 3 },
				{ "word": "unheired", "syllables": 2 },
				{ "word": "wednesday", "syllables": 2 }
			]
		}
	}
}

},{}],26:[function(require,module,exports){
module.exports={
	"vowels": "aáäâeéëêiíïîoóöôuúüûy",
	"deviations": {
		"vowels": [
			{
				"fragments": [ "ue+$", "ue$", "dge+$", "dge$", "[tcp]iënt",
					"ace$", "ace+$", "[br]each", "[ainpr]tiaal", "[io]tiaan",
					"gua[yc]", "[^i]deal", "^deal", "tive$", "base[^enr]",
					"base$", "load", "close[^rt]", "close$", "[^e]coke",
					"^coke", "drive[^r]", "drive$", "[^s]core$", "^core$",
					"face[^nt]", "face$", "cache[^clntx]", "cache$",
					"game[^nlr]", "game$" ],
				"countModifier": -1
			},
			{
				"fragments": [ "aä", "aeu", "aie", "ao", "ë", "eo",
					"eú", "ieau", "ea$", "ea+$", "ea[^u]", "ei[ej]",
					"eu[iu]", "ï", "iei", "ienne", "[^l]ieu[^w]",
					"[^l]ieu$", "[^l]ieu+$", "i[auiy]", "stion",
					"[^cstx]io", "^sion", "riè", "oö", "oa", "oeing",
					"oeyo", "oie", "[eu]ü", "[^q]u[oaeè]", "uie",
					"[aeolu]y[eéèaoóu]", "[bhnpr]ieel", "[bhnpr]iël" ],
				"countModifier": 1
			}
		],
		"words": {
			"full": [
				{ "word": "bye", "syllables": 1 },
				{ "word": "cure", "syllables": 1 },
				{ "word": "dei", "syllables": 2 },
				{ "word": "dope", "syllables": 1 },
				{ "word": "dude", "syllables": 1 },
				{ "word": "fake", "syllables": 1 },
				{ "word": "fame", "syllables": 1 },
				{ "word": "five", "syllables": 1 },
				{ "word": "hole", "syllables": 1 },
				{ "word": "least", "syllables": 1 },
				{ "word": "lone", "syllables": 1 },
				{ "word": "minute", "syllables": 2 },
				{ "word": "move", "syllables": 1 },
				{ "word": "nice", "syllables": 1 },
				{ "word": "one", "syllables": 1 },
				{ "word": "state", "syllables": 1 },
				{ "word": "surplace", "syllables": 2 },
				{ "word": "take", "syllables": 1 },
				{ "word": "trade", "syllables": 1 },
				{ "word": "wide", "syllables": 1 }
			],
			"fragments": {
				"global": [
					{ "word": "adieu", "syllables": 2 },
					{ "word": "airline", "syllables": 2 },
					{ "word": "airmiles", "syllables": 2 },
					{ "word": "alien", "syllables": 3 },
					{ "word": "ambient", "syllables": 3 },
					{ "word": "announcement", "syllables": 3 },
					{ "word": "appearance", "syllables": 3 },
					{ "word": "appeasement", "syllables": 3 },
					{ "word": "atheneum", "syllables": 4 },
					{ "word": "awesome", "syllables": 2 },
					{ "word": "baccalaurei", "syllables": 5 },
					{ "word": "baccalaureus", "syllables": 5 },
					{ "word": "baseball", "syllables": 3 },
					{ "word": "basejump", "syllables": 2 },
					{ "word": "banlieue", "syllables": 3 },
					{ "word": "bapao", "syllables": 2 },
					{ "word": "barbecue", "syllables": 3 },
					{ "word": "beamer", "syllables": 2 },
					{ "word": "beanie", "syllables": 2 },
					{ "word": "beat", "syllables": 1 },
					{ "word": "belle", "syllables": 2 },
					{ "word": "bête", "syllables": 1 },
					{ "word": "bingewatch", "syllables": 2 },
					{ "word": "blocnote", "syllables": 2 },
					{ "word": "blue", "syllables": 1 },
					{ "word": "board", "syllables": 1 },
					{ "word": "break", "syllables": 1 },
					{ "word": "broad", "syllables": 1 },
					{ "word": "bulls-eye", "syllables": 2 },
					{ "word": "business", "syllables": 2 },
					{ "word": "byebye", "syllables": 2 },
					{ "word": "cacao", "syllables": 2 },
					{ "word": "caesar", "syllables": 2 },
					{ "word": "camaieu", "syllables": 3 },
					{ "word": "caoutchouc", "syllables": 2 },
					{ "word": "carbolineum", "syllables": 5 },
					{ "word": "catchphrase", "syllables": 1 },
					{ "word": "carrier", "syllables": 3 },
					{ "word": "cheat", "syllables": 1 },
					{ "word": "cheese", "syllables": 1 },
					{ "word": "circonflexe", "syllables": 3 },
					{ "word": "clean", "syllables": 1 },
					{ "word": "cloak", "syllables": 1 },
					{ "word": "cobuying", "syllables": 3 },
					{ "word": "comeback", "syllables": 2 },
					{ "word": "comfortzone", "syllables": 3 },
					{ "word": "communiqué", "syllables": 4 },
					{ "word": "conopeum", "syllables": 4 },
					{ "word": "console", "syllables": 2 },
					{ "word": "corporate", "syllables": 3 },
					{ "word": "coûte", "syllables": 1 },
					{ "word": "creamer", "syllables": 2 },
					{ "word": "crime", "syllables": 1 },
					{ "word": "cruesli", "syllables": 2 },
					{ "word": "deadline", "syllables": 2 },
					{ "word": "deautoriseren", "syllables": 6 },
					{ "word": "deuce", "syllables": 1 },
					{ "word": "deum", "syllables": 2 },
					{ "word": "dirndl", "syllables": 2 },
					{ "word": "dread", "syllables": 2 },
					{ "word": "dreamteam", "syllables": 2 },
					{ "word": "drone", "syllables": 1 },
					{ "word": "enquête", "syllables": 3 },
					{ "word": "escape", "syllables": 2 },
					{ "word": "exposure", "syllables": 3 },
					{ "word": "extranei", "syllables": 4 },
					{ "word": "extraneus", "syllables": 4 },
					{ "word": "eyecatcher", "syllables": 3 },
					{ "word": "eyeliner", "syllables": 3 },
					{ "word": "eyeopener", "syllables": 4 },
					{ "word": "eyetracker", "syllables": 3 },
					{ "word": "eyetracking", "syllables": 3 },
					{ "word": "fairtrade", "syllables": 2 },
					{ "word": "fauteuil", "syllables": 2 },
					{ "word": "feature", "syllables": 2 },
					{ "word": "feuilletee", "syllables": 3 },
					{ "word": "feuilleton", "syllables": 3 },
					{ "word": "fisheye", "syllables": 2 },
					{ "word": "fineliner", "syllables": 3 },
					{ "word": "finetunen", "syllables": 3 },
					{ "word": "forehand", "syllables": 2 },
					{ "word": "freak", "syllables": 1 },
					{ "word": "fusioneren", "syllables": 4 },
					{ "word": "gayparade", "syllables": 3 },
					{ "word": "gaypride", "syllables": 2 },
					{ "word": "goal", "syllables": 1 },
					{ "word": "grapefruit", "syllables": 2 },
					{ "word": "gruyère", "syllables": 3 },
					{ "word": "guele", "syllables": 1 },
					{ "word": "guerrilla", "syllables": 3 },
					{ "word": "guest", "syllables": 1 },
					{ "word": "hardware", "syllables": 2 },
					{ "word": "haute", "syllables": 1 },
					{ "word": "healing", "syllables": 2 },
					{ "word": "heater", "syllables": 2 },
					{ "word": "heavy", "syllables": 2 },
					{ "word": "hoax", "syllables": 1 },
					{ "word": "hotline", "syllables": 2 },
					{ "word": "idee-fixe", "syllables": 3 },
					{ "word": "inclusive", "syllables": 3 },
					{ "word": "inline", "syllables": 2 },
					{ "word": "intake", "syllables": 2 },
					{ "word": "intensive", "syllables": 3 },
					{ "word": "jeans", "syllables": 1 },
					{ "word": "Jones", "syllables": 1 },
					{ "word": "jubileum", "syllables": 4 },
					{ "word": "kalfsribeye", "syllables": 3 },
					{ "word": "kraaiennest", "syllables": 3 },
					{ "word": "lastminute", "syllables": 3 },
					{ "word": "learning", "syllables": 2 },
					{ "word": "league", "syllables": 1 },
					{ "word": "line-up", "syllables": 2 },
					{ "word": "linoleum", "syllables": 4 },
					{ "word": "load", "syllables": 1 },
					{ "word": "loafer", "syllables": 2 },
					{ "word": "longread", "syllables": 2 },
					{ "word": "lookalike", "syllables": 3 },
					{ "word": "louis", "syllables": 3 },
					{ "word": "lyceum", "syllables": 3 },
					{ "word": "magazine", "syllables": 3 },
					{ "word": "mainstream", "syllables": 2 },
					{ "word": "make-over", "syllables": 3 },
					{ "word": "make-up", "syllables": 2 },
					{ "word": "malware", "syllables": 2 },
					{ "word": "marmoleum", "syllables": 4 },
					{ "word": "mausoleum", "syllables": 4 },
					{ "word": "medeauteur", "syllables": 4 },
					{ "word": "midlifecrisis", "syllables": 4 },
					{ "word": "migraineaura", "syllables": 5 },
					{ "word": "milkshake", "syllables": 2 },
					{ "word": "millefeuille", "syllables": 4 },
					{ "word": "mixed", "syllables": 1 },
					{ "word": "muesli", "syllables": 2 },
					{ "word": "museum", "syllables": 3 },
					{ "word": "must-have", "syllables": 2 },
					{ "word": "must-read", "syllables": 2 },
					{ "word": "notebook", "syllables": 2 },
					{ "word": "nonsense", "syllables": 2 },
					{ "word": "nowhere", "syllables": 2 },
					{ "word": "nurture", "syllables": 2 },
					{ "word": "offline", "syllables": 2 },
					{ "word": "oneliner", "syllables": 3 },
					{ "word": "onesie", "syllables": 2 },
					{ "word": "online", "syllables": 2 },
					{ "word": "opinion", "syllables": 3 },
					{ "word": "paella", "syllables": 3 },
					{ "word": "pacemaker", "syllables": 3 },
					{ "word": "panache", "syllables": 2 },
					{ "word": "papegaaienneus", "syllables": 5 },
					{ "word": "passe-partout", "syllables": 3 },
					{ "word": "peanuts", "syllables": 2 },
					{ "word": "perigeum", "syllables": 4 },
					{ "word": "perineum", "syllables": 4 },
					{ "word": "perpetuum", "syllables": 4 },
					{ "word": "petroleum", "syllables": 4 },
					{ "word": "phone", "syllables": 3 },
					{ "word": "picture", "syllables": 2 },
					{ "word": "placemat", "syllables": 2 },
					{ "word": "porte-manteau", "syllables": 3 },
					{ "word": "portefeuille", "syllables": 4 },
					{ "word": "presse-papier", "syllables": 3 },
					{ "word": "primetime", "syllables": 2 },
					{ "word": "queen", "syllables": 1 },
					{ "word": "questionnaire", "syllables": 3 },
					{ "word": "queue", "syllables": 1 },
					{ "word": "reader", "syllables": 2 },
					{ "word": "reality", "syllables": 3 },
					{ "word": "reallife", "syllables": 2 },
					{ "word": "remake", "syllables": 2 },
					{ "word": "repeat", "syllables": 2 },
					{ "word": "repertoire", "syllables": 3 },
					{ "word": "research", "syllables": 2 },
					{ "word": "reverence", "syllables": 3 },
					{ "word": "ribeye", "syllables": 2 },
					{ "word": "ringtone", "syllables": 3 },
					{ "word": "road", "syllables": 1 },
					{ "word": "roaming", "syllables": 2 },
					{ "word": "sciencefiction", "syllables": 4 },
					{ "word": "selfmade", "syllables": 2 },
					{ "word": "sidekick", "syllables": 2 },
					{ "word": "sightseeing", "syllables": 3 },
					{ "word": "skyline", "syllables": 2 },
					{ "word": "smile", "syllables": 1 },
					{ "word": "sneaky", "syllables": 2 },
					{ "word": "software", "syllables": 2 },
					{ "word": "sparerib", "syllables": 2 },
					{ "word": "speaker", "syllables": 2 },
					{ "word": "spread", "syllables": 1 },
					{ "word": "statement", "syllables": 2 },
					{ "word": "steak", "syllables": 1 },
					{ "word": "steeplechase", "syllables": 3 },
					{ "word": "stonewash", "syllables": 2 },
					{ "word": "store", "syllables": 1 },
					{ "word": "streaken", "syllables": 2 },
					{ "word": "stream", "syllables": 1 },
					{ "word": "streetware", "syllables": 1 },
					{ "word": "supersoaker", "syllables": 4 },
					{ "word": "surprise-party", "syllables": 4 },
					{ "word": "sweater", "syllables": 2 },
					{ "word": "teaser", "syllables": 2 },
					{ "word": "tenue", "syllables": 2 },
					{ "word": "template", "syllables": 2 },
					{ "word": "timeline", "syllables": 2 },
					{ "word": "tissue", "syllables": 2 },
					{ "word": "toast", "syllables": 1 },
					{ "word": "tête-à-tête", "syllables": 3 },
					{ "word": "typecast", "syllables": 2 },
					{ "word": "unique", "syllables": 2 },
					{ "word": "ureum", "syllables": 3 },
					{ "word": "vibe", "syllables": 1 },
					{ "word": "vieux", "syllables": 1 },
					{ "word": "ville", "syllables": 1 },
					{ "word": "vintage", "syllables": 2 },
					{ "word": "wandelyup", "syllables": 3 },
					{ "word": "wiseguy", "syllables": 2 },
					{ "word": "wake-up-call", "syllables": 3 },
					{ "word": "webcare", "syllables": 2 },
					{ "word": "winegum", "syllables": 2 },
					{ "word": "style", "syllables": 1, "notFollowedBy": [ "n", "s" ] },
					{ "word": "douche", "syllables": 1, "notFollowedBy": [ "n", "s" ] },
					{ "word": "space", "syllables": 1, "notFollowedBy": [ "n", "s" ] },
					{ "word": "striptease", "syllables": 2, "notFollowedBy": [ "n", "s" ] },
					{ "word": "office", "syllables": 2, "notFollowedBy": [ "r", "s" ] },
					{ "word": "jive", "syllables": 1, "notFollowedBy": [ "n", "r" ] },
					{ "word": "keynote", "syllables": 2, "notFollowedBy": [ "n", "r" ] },
					{ "word": "mountainbike", "syllables": 3, "notFollowedBy": [ "n", "r" ] },
					{ "word": "challenge", "syllables": 2, "notFollowedBy": [ "n", "r", "s" ] },
					{ "word": "cruise", "syllables": 1, "notFollowedBy": [ "n", "r", "s" ] },
					{ "word": "house", "syllables": 1, "notFollowedBy": [ "n", "r", "s" ] },
					{ "word": "dance", "syllables": 1, "notFollowedBy": [ "n", "r", "s" ] },
					{ "word": "franchise", "syllables": 2, "notFollowedBy": [ "n", "r", "s" ] },
					{ "word": "freelance", "syllables": 2, "notFollowedBy": [ "n", "r", "s" ] },
					{ "word": "lease", "syllables": 1, "notFollowedBy": [ "n", "r", "s" ] },
					{ "word": "lounge", "syllables": 1, "notFollowedBy": [ "n", "r", "s" ] },
					{ "word": "merchandise", "syllables": 3, "notFollowedBy": [ "n", "r", "s" ] },
					{ "word": "performance", "syllables": 3, "notFollowedBy": [ "n", "r", "s" ] },
					{ "word": "release", "syllables": 2, "notFollowedBy": [ "n", "r", "s" ] },
					{ "word": "resource", "syllables": 2, "notFollowedBy": [ "n", "r", "s" ] }
				],
				"atBeginningOrEnd": [
					{ "word": "byte", "syllables": 1 },
					{ "word": "cake", "syllables": 1 },
					{ "word": "care", "syllables": 1 },
					{ "word": "coach", "syllables": 1 },
					{ "word": "coat", "syllables": 1 },
					{ "word": "earl", "syllables": 1 },
					{ "word": "foam", "syllables": 1 },
					{ "word": "gate", "syllables": 1 },
					{ "word": "head", "syllables": 1 },
					{ "word": "home", "syllables": 1 },
					{ "word": "live", "syllables": 1 },
					{ "word": "safe", "syllables": 1 },
					{ "word": "site", "syllables": 1 },
					{ "word": "soap", "syllables": 1 },
					{ "word": "teak", "syllables": 1 },
					{ "word": "team", "syllables": 1 },
					{ "word": "wave", "syllables": 1 },
					{ "word": "brace", "syllables": 1, "notFollowedBy": [ "s" ] },
					{ "word": "case", "syllables": 1, "notFollowedBy": [ "s" ] },
					{ "word": "fleece", "syllables": 1, "notFollowedBy": [ "s" ] },
					{ "word": "service", "syllables": 2, "notFollowedBy": [ "s" ] },
					{ "word": "voice", "syllables": 1, "notFollowedBy": [ "s" ] },
					{ "word": "kite", "syllables": 1, "notFollowedBy": [ "n", "r" ] },
					{ "word": "skate", "syllables": 1, "notFollowedBy": [ "n", "r" ] },
					{ "word": "race", "syllables": 1, "notFollowedBy": [ "n", "r", "s" ] }
				],
				"atBeginning": [
					{ "word": "image", "syllables": 2, "notFollowedBy": [ "s" ] }
				],
				"atEnd": [
					{ "word": "force", "syllables": 1 },
					{ "word": "tea", "syllables": 1 },
					{ "word": "time", "syllables": 1 },
					{ "word": "date", "syllables": 1, "alsoFollowedBy": [ "s" ] },
					{ "word": "hype", "syllables": 1, "alsoFollowedBy": [ "s" ] },
					{ "word": "quote", "syllables": 1, "alsoFollowedBy": [ "s" ] },
					{ "word": "tape", "syllables": 1, "alsoFollowedBy": [ "s" ] },
					{ "word": "upgrade", "syllables": 2, "alsoFollowedBy": [ "s" ] }
				]
			}
		}
	}
}

},{}],27:[function(require,module,exports){
var getLanguage = require( "../helpers/getLanguage.js" );
var isUndefined = require( "lodash/isUndefined" );


var transliterations = {

	// Language: Spanish.
	// Source: https://en.wikipedia.org/wiki/Spanish_orthography
	es: [
		{ letter: /[\u00F1]/g, alternative: "n" },
		{ letter: /[\u00D1]/g, alternative: "N" },
		{ letter: /[\u00E1]/g, alternative: "a" },
		{ letter: /[\u00C1]/g, alternative: "A" },
		{ letter: /[\u00E9]/g, alternative: "e" },
		{ letter: /[\u00C9]/g, alternative: "E" },
		{ letter: /[\u00ED]/g, alternative: "i" },
		{ letter: /[\u00CD]/g, alternative: "I" },
		{ letter: /[\u00F3]/g, alternative: "o" },
		{ letter: /[\u00D3]/g, alternative: "O" },
		{ letter: /[\u00FA\u00FC]/g, alternative: "u" },
		{ letter: /[\u00DA\u00DC]/g, alternative: "U" }
	],
	// Language: Polish.
	// Source: https://en.wikipedia.org/wiki/Polish_orthography
	pl: [
		{ letter: /[\u0105]/g, alternative: "a" },
		{ letter: /[\u0104]/g, alternative: "A" },
		{ letter: /[\u0107]/g, alternative: "c" },
		{ letter: /[\u0106]/g, alternative: "C" },
		{ letter: /[\u0119]/g, alternative: "e" },
		{ letter: /[\u0118]/g, alternative: "E" },
		{ letter: /[\u0142]/g, alternative: "l" },
		{ letter: /[\u0141]/g, alternative: "L" },
		{ letter: /[\u0144]/g, alternative: "n" },
		{ letter: /[\u0143]/g, alternative: "N" },
		{ letter: /[\u00F3]/g, alternative: "o" },
		{ letter: /[\u00D3]/g, alternative: "O" },
		{ letter: /[\u015B]/g, alternative: "s" },
		{ letter: /[\u015A]/g, alternative: "S" },
		{ letter: /[\u017A\u017C]/g, alternative: "z" },
		{ letter: /[\u0179\u017B]/g, alternative: "Z" }
	],
	// Language: German.
	// Source: https://en.wikipedia.org/wiki/German_orthography#Special_characters
	de: [
		{ letter: /[\u00E4]/g, alternative: "ae" },
		{ letter: /[\u00C4]/g, alternative: "Ae" },
		{ letter: /[\u00FC]/g, alternative: "ue" },
		{ letter: /[\u00DC]/g, alternative: "Ue" },
		{ letter: /[\u00F6]/g, alternative: "oe" },
		{ letter: /[\u00D6]/g, alternative: "Oe" },
		{ letter: /[\u00DF]/g, alternative: "ss" },
		{ letter: /[\u1E9E]/g, alternative: "SS" }
	],
	// Language Bokmål
	// Source: http://www.dagbladet.no/2011/12/30/tema/reise/reiseeksperter/forbrukerrettigheter/19494227/
	// Language Nynorks
	// Source: http://www.dagbladet.no/2011/12/30/tema/reise/reiseeksperter/forbrukerrettigheter/19494227/
	// Bokmål and Nynorks use the same transliterations
	nbnn: [
		{ letter: /[\u00E6\u04D5]/g, alternative: "ae" },
		{ letter: /[\u00C6\u04D4]/g, alternative: "Ae" },
		{ letter: /[\u00E5]/g, alternative: "aa" },
		{ letter: /[\u00C5]/g, alternative: "Aa" },
		{ letter: /[\u00F8]/g, alternative: "oe" },
		{ letter: /[\u00D8]/g, alternative: "Oe" },
		{ letter: /[\u00E9\u00E8\u00EA]/g, alternative: "e" },
		{ letter: /[\u00C9\u00C8\u00CA]/g, alternative: "E" },
		{ letter: /[\u00F3\u00F2\u00F4]/g, alternative: "o" },
		{ letter: /[\u00D3\u00D2\u00D4]/g, alternative: "O" }
	],
	// Language: Swedish.
	// Sources: https://sv.wikipedia.org/wiki/%C3%85#Historia
	// http://forum.wordreference.com/threads/swedish-%C3%A4-ae-%C3%B6-oe-acceptable.1451839/
	sv: [
		{ letter: /[\u00E5]/g, alternative: "aa" },
		{ letter: /[\u00C5]/g, alternative: "Aa" },
		{ letter: /[\u00E4]/g, alternative: "ae" },
		{ letter: /[\u00C4]/g, alternative: "Ae" },
		{ letter: /[\u00F6]/g, alternative: "oe" },
		{ letter: /[\u00D6]/g, alternative: "Oe" },
		{ letter: /[\u00E9]/g, alternative: "e" },
		{ letter: /[\u00C9]/g, alternative: "E" },
		{ letter: /[\u00E0]/g, alternative: "a" },
		{ letter: /[\u00C0]/g, alternative: "A" }
	],
	// Language: Finnish.
	// Sources: https://www.cs.tut.fi/~jkorpela/lang/finnish-letters.html
	// https://en.wikipedia.org/wiki/Finnish_orthography
	fi: [
		{ letter: /[\u00E5]/g, alternative: "aa" },
		{ letter: /[\u00C5]/g, alternative: "Aa" },
		{ letter: /[\u00E4]/g, alternative: "a" },
		{ letter: /[\u00C4]/g, alternative: "A" },
		{ letter: /[\u00F6]/g, alternative: "o" },
		{ letter: /[\u00D6]/g, alternative: "O" },
		{ letter: /[\u017E]/g, alternative: "zh" },
		{ letter: /[\u017D]/g, alternative: "Zh" },
		{ letter: /[\u0161]/g, alternative: "sh" },
		{ letter: /[\u0160]/g, alternative: "Sh" }
	],
	// Language: Danish.
	// Sources: https://sv.wikipedia.org/wiki/%C3%85#Historia
	// https://en.wikipedia.org/wiki/Danish_orthography
	da: [
		{ letter: /[\u00E5]/g, alternative: "aa" },
		{ letter: /[\u00C5]/g, alternative: "Aa" },
		{ letter: /[\u00E6\u04D5]/g, alternative: "ae" },
		{ letter: /[\u00C6\u04D4]/g, alternative: "Ae" },
		{ letter: /[\u00C4]/g, alternative: "Ae" },
		{ letter: /[\u00F8]/g, alternative: "oe" },
		{ letter: /[\u00D8]/g, alternative: "Oe" },
		{ letter: /[\u00E9]/g, alternative: "e" },
		{ letter: /[\u00C9]/g, alternative: "E" }
	],
	// Language: Turkish.
	// Source: https://en.wikipedia.org/wiki/Turkish_alphabet
	// ‘İ’ is the capital dotted ‘i’. Its lowercase counterpart is the ‘regular’ ‘i’.
	tr: [
		{ letter: /[\u00E7]/g, alternative: "c" },
		{ letter: /[\u00C7]/g, alternative: "C" },
		{ letter: /[\u011F]/g, alternative: "g" },
		{ letter: /[\u011E]/g, alternative: "G" },
		{ letter: /[\u00F6]/g, alternative: "o" },
		{ letter: /[\u00D6]/g, alternative: "O" },
		{ letter: /[\u015F]/g, alternative: "s" },
		{ letter: /[\u015E]/g, alternative: "S" },
		{ letter: /[\u00E2]/g, alternative: "a" },
		{ letter: /[\u00C2]/g, alternative: "A" },
		{ letter: /[\u0131\u00EE]/g, alternative: "i" },
		{ letter: /[\u0130\u00CE]/g, alternative: "I" },
		{ letter: /[\u00FC\u00FB]/g, alternative: "u" },
		{ letter: /[\u00DC\u00DB]/g, alternative: "U" }
	],
	// Language: Latvian.
	// Source: https://en.wikipedia.org/wiki/Latvian_orthography
	lv: [
		{ letter: /[\u0101]/g, alternative: "a" },
		{ letter: /[\u0100]/g, alternative: "A" },
		{ letter: /[\u010D]/g, alternative: "c" },
		{ letter: /[\u010C]/g, alternative: "C" },
		{ letter: /[\u0113]/g, alternative: "e" },
		{ letter: /[\u0112]/g, alternative: "E" },
		{ letter: /[\u0123]/g, alternative: "g" },
		{ letter: /[\u0122]/g, alternative: "G" },
		{ letter: /[\u012B]/g, alternative: "i" },
		{ letter: /[\u012A]/g, alternative: "I" },
		{ letter: /[\u0137]/g, alternative: "k" },
		{ letter: /[\u0136]/g, alternative: "K" },
		{ letter: /[\u013C]/g, alternative: "l" },
		{ letter: /[\u013B]/g, alternative: "L" },
		{ letter: /[\u0146]/g, alternative: "n" },
		{ letter: /[\u0145]/g, alternative: "N" },
		{ letter: /[\u0161]/g, alternative: "s" },
		{ letter: /[\u0160]/g, alternative: "S" },
		{ letter: /[\u016B]/g, alternative: "u" },
		{ letter: /[\u016A]/g, alternative: "U" },
		{ letter: /[\u017E]/g, alternative: "z" },
		{ letter: /[\u017D]/g, alternative: "Z" }
	],
	// Language: Icelandic.
	// Sources: https://en.wikipedia.org/wiki/Thorn_(letter),
	// https://en.wikipedia.org/wiki/Eth,  https://en.wikipedia.org/wiki/Icelandic_orthography
	is: [
		{ letter: /[\u00E1]/g, alternative: "a" },
		{ letter: /[\u00C1]/g, alternative: "A" },
		{ letter: /[\u00F0]/g, alternative: "d" },
		{ letter: /[\u00D0]/g, alternative: "D" },
		{ letter: /[\u00E9]/g, alternative: "e" },
		{ letter: /[\u00C9]/g, alternative: "E" },
		{ letter: /[\u00ED]/g, alternative: "i" },
		{ letter: /[\u00CD]/g, alternative: "I" },
		{ letter: /[\u00F3\u00F6]/g, alternative: "o" },
		{ letter: /[\u00D3\u00D6]/g, alternative: "O" },
		{ letter: /[\u00FA]/g, alternative: "u" },
		{ letter: /[\u00DA]/g, alternative: "U" },
		{ letter: /[\u00FD]/g, alternative: "y" },
		{ letter: /[\u00DD]/g, alternative: "Y" },
		{ letter: /[\u00FE]/g, alternative: "th" },
		{ letter: /[\u00DE]/g, alternative: "Th" },
		{ letter: /[\u00E6\u04D5]/g, alternative: "ae" },
		{ letter: /[\u00C6\u04D4]/g, alternative: "Ae" }
	],
	// Language: Faroese.
	// Source: https://www.facebook.com/groups/1557965757758234/permalink/1749847165236758/ (conversation in private Facebook Group ‘Faroese Language Learning Enthusiasts’)
	// depending on the word, ð can be d, g, j, v, ng or nothing. However, ‘d’ is most frequent.
	// when writing text messages or using a foreign keyboard, í is sometimes written as ij, ý as yj, ú as uv, ó as ov, ø as oe, and á as aa or oa.
	// However, in website URLs the alternatives mentioned below are by far the most common.
	fa: [
		{ letter: /[\u00E1]/g, alternative: "a" },
		{ letter: /[\u00C1]/g, alternative: "A" },
		{ letter: /[\u00F0]/g, alternative: "d" },
		{ letter: /[\u00D0]/g, alternative: "D" },
		{ letter: /[\u00ED]/g, alternative: "i" },
		{ letter: /[\u00CD]/g, alternative: "I" },
		{ letter: /[\u00FD]/g, alternative: "y" },
		{ letter: /[\u00DD]/g, alternative: "Y" },
		{ letter: /[\u00FA]/g, alternative: "u" },
		{ letter: /[\u00DA]/g, alternative: "U" },
		{ letter: /[\u00F3\u00F8]/g, alternative: "o" },
		{ letter: /[\u00D3\u00D8]/g, alternative: "O" },
		{ letter: /[\u00E6\u04D5]/g, alternative: "ae" },
		{ letter: /[\u00C6\u04D4]/g, alternative: "Ae" }
	],
	// Language: Czech.
	// Source: https://en.wikipedia.org/wiki/Czech_orthography
	cs: [
		{ letter: /[\u00E1]/g, alternative: "a" },
		{ letter: /[\u00C1]/g, alternative: "A" },
		{ letter: /[\u010D]/g, alternative: "c" },
		{ letter: /[\u010C]/g, alternative: "C" },
		{ letter: /[\u010F]/g, alternative: "d" },
		{ letter: /[\u010E]/g, alternative: "D" },
		{ letter: /[\u00ED]/g, alternative: "i" },
		{ letter: /[\u00CD]/g, alternative: "I" },
		{ letter: /[\u0148]/g, alternative: "n" },
		{ letter: /[\u0147]/g, alternative: "N" },
		{ letter: /[\u00F3]/g, alternative: "o" },
		{ letter: /[\u00D3]/g, alternative: "O" },
		{ letter: /[\u0159]/g, alternative: "r" },
		{ letter: /[\u0158]/g, alternative: "R" },
		{ letter: /[\u0161]/g, alternative: "s" },
		{ letter: /[\u0160]/g, alternative: "S" },
		{ letter: /[\u0165]/g, alternative: "t" },
		{ letter: /[\u0164]/g, alternative: "T" },
		{ letter: /[\u00FD]/g, alternative: "y" },
		{ letter: /[\u00DD]/g, alternative: "Y" },
		{ letter: /[\u017E]/g, alternative: "z" },
		{ letter: /[\u017D]/g, alternative: "Z" },
		{ letter: /[\u00E9\u011B]/g, alternative: "e" },
		{ letter: /[\u00C9\u011A]/g, alternative: "E" },
		{ letter: /[\u00FA\u016F]/g, alternative: "u" },
		{ letter: /[\u00DA\u016E]/g, alternative: "U" }
	],
	// Language: Russian.
	// Source:  Machine Readable Travel Documents, Doc 9303, Part 1, Volume 1 (PDF) (Sixth ed.).
	// ICAO. 2006. p. IV-50—IV-52. http://www.icao.int/publications/Documents/9303_p3_cons_en.pdf
	// ‘ь’ is the so-called soft sign, indicating a sound change (palatalization) of the preceding consonant.
	// In text it is transliterated to a character similar to an apostroph: ′.
	// I recommend omittance in slugs. (https://en.wikipedia.org/wiki/Romanization_of_Russian)
	ru: [
		{ letter: /[\u0430]/g, alternative: "a" },
		{ letter: /[\u0410]/g, alternative: "A" },
		{ letter: /[\u0431]/g, alternative: "b" },
		{ letter: /[\u0411]/g, alternative: "B" },
		{ letter: /[\u0432]/g, alternative: "v" },
		{ letter: /[\u0412]/g, alternative: "V" },
		{ letter: /[\u0433]/g, alternative: "g" },
		{ letter: /[\u0413]/g, alternative: "G" },
		{ letter: /[\u0434]/g, alternative: "d" },
		{ letter: /[\u0414]/g, alternative: "D" },
		{ letter: /[\u0435]/g, alternative: "e" },
		{ letter: /[\u0415]/g, alternative: "E" },
		{ letter: /[\u0436]/g, alternative: "zh" },
		{ letter: /[\u0416]/g, alternative: "Zh" },
		{ letter: /[\u0437]/g, alternative: "z" },
		{ letter: /[\u0417]/g, alternative: "Z" },
		{ letter: /[\u0456\u0438\u0439]/g, alternative: "i" },
		{ letter: /[\u0406\u0418\u0419]/g, alternative: "I" },
		{ letter: /[\u043A]/g, alternative: "k" },
		{ letter: /[\u041A]/g, alternative: "K" },
		{ letter: /[\u043B]/g, alternative: "l" },
		{ letter: /[\u041B]/g, alternative: "L" },
		{ letter: /[\u043C]/g, alternative: "m" },
		{ letter: /[\u041C]/g, alternative: "M" },
		{ letter: /[\u043D]/g, alternative: "n" },
		{ letter: /[\u041D]/g, alternative: "N" },
		{ letter: /[\u0440]/g, alternative: "r" },
		{ letter: /[\u0420]/g, alternative: "R" },
		{ letter: /[\u043E]/g, alternative: "o" },
		{ letter: /[\u041E]/g, alternative: "O" },
		{ letter: /[\u043F]/g, alternative: "p" },
		{ letter: /[\u041F]/g, alternative: "P" },
		{ letter: /[\u0441]/g, alternative: "s" },
		{ letter: /[\u0421]/g, alternative: "S" },
		{ letter: /[\u0442]/g, alternative: "t" },
		{ letter: /[\u0422]/g, alternative: "T" },
		{ letter: /[\u0443]/g, alternative: "u" },
		{ letter: /[\u0423]/g, alternative: "U" },
		{ letter: /[\u0444]/g, alternative: "f" },
		{ letter: /[\u0424]/g, alternative: "F" },
		{ letter: /[\u0445]/g, alternative: "kh" },
		{ letter: /[\u0425]/g, alternative: "Kh" },
		{ letter: /[\u0446]/g, alternative: "ts" },
		{ letter: /[\u0426]/g, alternative: "Ts" },
		{ letter: /[\u0447]/g, alternative: "ch" },
		{ letter: /[\u0427]/g, alternative: "Ch" },
		{ letter: /[\u0448]/g, alternative: "sh" },
		{ letter: /[\u0428]/g, alternative: "Sh" },
		{ letter: /[\u0449]/g, alternative: "shch" },
		{ letter: /[\u0429]/g, alternative: "Shch" },
		{ letter: /[\u044A]/g, alternative: "ie" },
		{ letter: /[\u042A]/g, alternative: "Ie" },
		{ letter: /[\u044B]/g, alternative: "y" },
		{ letter: /[\u042B]/g, alternative: "Y" },
		{ letter: /[\u044C]/g, alternative: "" },
		{ letter: /[\u042C]/g, alternative: "" },
		{ letter: /[\u0451\u044D]/g, alternative: "e" },
		{ letter: /[\u0401\u042D]/g, alternative: "E" },
		{ letter: /[\u044E]/g, alternative: "iu" },
		{ letter: /[\u042E]/g, alternative: "Iu" },
		{ letter: /[\u044F]/g, alternative: "ia" },
		{ letter: /[\u042F]/g, alternative: "Ia" }
	],
	// Language: Esperanto.
	// Source: https://en.wikipedia.org/wiki/Esperanto#Writing_diacritics
	eo: [
		{ letter: /[\u0109]/g, alternative: "ch" },
		{ letter: /[\u0108]/g, alternative: "Ch" },
		{ letter: /[\u011d]/g, alternative: "gh" },
		{ letter: /[\u011c]/g, alternative: "Gh" },
		{ letter: /[\u0125]/g, alternative: "hx" },
		{ letter: /[\u0124]/g, alternative: "Hx" },
		{ letter: /[\u0135]/g, alternative: "jx" },
		{ letter: /[\u0134]/g, alternative: "Jx" },
		{ letter: /[\u015d]/g, alternative: "sx" },
		{ letter: /[\u015c]/g, alternative: "Sx" },
		{ letter: /[\u016d]/g, alternative: "ux" },
		{ letter: /[\u016c]/g, alternative: "Ux" }
	],
	// Language: Afrikaans.
	// Source: https://en.wikipedia.org/wiki/Afrikaans#Orthography
	af: [
		{ letter: /[\u00E8\u00EA\u00EB]/g, alternative: "e" },
		{ letter: /[\u00CB\u00C8\u00CA]/g, alternative: "E" },
		{ letter: /[\u00EE\u00EF]/g, alternative: "i" },
		{ letter: /[\u00CE\u00CF]/g, alternative: "I" },
		{ letter: /[\u00F4\u00F6]/g, alternative: "o" },
		{ letter: /[\u00D4\u00D6]/g, alternative: "O" },
		{ letter: /[\u00FB\u00FC]/g, alternative: "u" },
		{ letter: /[\u00DB\u00DC]/g, alternative: "U" }
	],
	// Language: Catalan.
	// Source: https://en.wikipedia.org/wiki/Catalan_orthography
	ca: [
		{ letter: /[\u00E0]/g, alternative: "a" },
		{ letter: /[\u00C0]/g, alternative: "A" },
		{ letter: /[\u00E9|\u00E8]/g, alternative: "e" },
		{ letter: /[\u00C9|\u00C8]/g, alternative: "E" },
		{ letter: /[\u00ED|\u00EF]/g, alternative: "i" },
		{ letter: /[\u00CD|\u00CF]/g, alternative: "I" },
		{ letter: /[\u00F3|\u00F2]/g, alternative: "o" },
		{ letter: /[\u00D3|\u00D2]/g, alternative: "O" },
		{ letter: /[\u00FA|\u00FC]/g, alternative: "u" },
		{ letter: /[\u00DA|\u00DC]/g, alternative: "U" },
		{ letter: /[\u00E7]/g, alternative: "c" },
		{ letter: /[\u00C7]/g, alternative: "C" }
	],
	// Language: Asturian.
	// Source: http://www.orbilat.com/Languages/Asturian/Grammar/Asturian-Alphabet.html
	ast: [
		{ letter: /[\u00F1]/g, alternative: "n" },
		{ letter: /[\u00D1]/g, alternative: "N" }
	],
	// Language: Aragonese.
	// Source: https://en.wikipedia.org/wiki/Aragonese_language#Orthography
	an: [
		{ letter: /[\u00FC]/g, alternative: "u" },
		{ letter: /[\u00F1]/g, alternative: "ny" },
		{ letter: /[\u00E7]/g, alternative: "c" },
		{ letter: /[\u00ED]/g, alternative: "i" },
		{ letter: /[\u00F3]/g, alternative: "o" },
		{ letter: /[\u00E1]/g, alternative: "a" },
		{ letter: /[\u00DC]/g, alternative: "U" },
		{ letter: /[\u00D1]/g, alternative: "Ny" },
		{ letter: /[\u00C7]/g, alternative: "C" },
		{ letter: /[\u00CD]/g, alternative: "I" },
		{ letter: /[\u00D3]/g, alternative: "O" },
		{ letter: /[\u00C1]/g, alternative: "A" }
	],
	// Language: Aymara.
	// Source: http://www.omniglot.com/writing/aymara.htm
	ay: [
		{ letter: /(([\u00EF])|([\u00ED]))/g, alternative: "i" },
		{ letter: /(([\u00CF])|([\u00CD]))/g, alternative: "I" },
		{ letter: /[\u00E4]/g, alternative: "a" },
		{ letter: /[\u00C4]/g, alternative: "A" },
		{ letter: /[\u00FC]/g, alternative: "u" },
		{ letter: /[\u00DC]/g, alternative: "U" },
		{ letter: /[\u0027]/g, alternative: "" },
		{ letter: /[\u00F1]/g, alternative: "n" },
		{ letter: /[\u00D1]/g, alternative: "N" }
	],
	// Language: English.
	// Sources: https://en.wikipedia.org/wiki/English_terms_with_diacritical_marks https://en.wikipedia.org/wiki/English_orthography
	en: [
		{ letter: /[\u00E6\u04D5]/g, alternative: "ae" },
		{ letter: /[\u00C6\u04D4]/g, alternative: "Ae" },
		{ letter: /[\u0153]/g, alternative: "oe" },
		{ letter: /[\u0152]/g, alternative: "Oe" },
		{ letter: /[\u00EB\u00E9]/g, alternative: "e" },
		{ letter: /[\u00C9\u00CB]/g, alternative: "E" },
		{ letter: /[\u00F4\u00F6]/g, alternative: "o" },
		{ letter: /[\u00D4\u00D6]/g, alternative: "O" },
		{ letter: /[\u00EF]/g, alternative: "i" },
		{ letter: /[\u00CF]/g, alternative: "I" },
		{ letter: /[\u00E7]/g, alternative: "c" },
		{ letter: /[\u00C7]/g, alternative: "C" },
		{ letter: /[\u00F1]/g, alternative: "n" },
		{ letter: /[\u00D1]/g, alternative: "N" },
		{ letter: /[\u00FC]/g, alternative: "u" },
		{ letter: /[\u00DC]/g, alternative: "U" },
		{ letter: /[\u00E4]/g, alternative: "a" },
		{ letter: /[\u00C4]/g, alternative: "A" }
	],
	// Language: French.
	// Sources: https://en.wikipedia.org/wiki/French_orthography#Ligatures https://en.wikipedia.org/wiki/French_orthography#Diacritics
	fr: [
		{ letter: /[\u00E6\u04D5]/g, alternative: "ae" },
		{ letter: /[\u00C6\u04D4]/g, alternative: "Ae" },
		{ letter: /[\u0153]/g, alternative: "oe" },
		{ letter: /[\u0152]/g, alternative: "Oe" },
		{ letter: /[\u00E9\u00E8\u00EB\u00EA]/g, alternative: "e" },
		{ letter: /[\u00C9\u00C8\u00CB\u00CA]/g, alternative: "E" },
		{ letter: /[\u00E0\u00E2]/g, alternative: "a" },
		{ letter: /[\u00C0\u00C2]/g, alternative: "A" },
		{ letter: /[\u00EF\u00EE]/g, alternative: "i" },
		{ letter: /[\u00CF\u00CE]/g, alternative: "I" },
		{ letter: /[\u00F9\u00FB\u00FC]/g, alternative: "u" },
		{ letter: /[\u00D9\u00DB\u00DC]/g, alternative: "U" },
		{ letter: /[\u00F4]/g, alternative: "o" },
		{ letter: /[\u00D4]/g, alternative: "O" },
		{ letter: /[\u00FF]/g, alternative: "y" },
		{ letter: /[\u0178]/g, alternative: "Y" },
		{ letter: /[\u00E7]/g, alternative: "c" },
		{ letter: /[\u00C7]/g, alternative: "C" },
		{ letter: /[\u00F1]/g, alternative: "n" },
		{ letter: /[\u00D1]/g, alternative: "N" }
	],
	// Language: Italian.
	// Source: https://en.wikipedia.org/wiki/Italian_orthography
	it: [
		{ letter: /[\u00E0]/g, alternative: "a" },
		{ letter: /[\u00C0]/g, alternative: "A" },
		{ letter: /[\u00E9\u00E8]/g, alternative: "e" },
		{ letter: /[\u00C9\u00C8]/g, alternative: "E" },
		{ letter: /[\u00EC\u00ED\u00EE]/g, alternative: "i" },
		{ letter: /[\u00CC\u00CD\u00CE]/g, alternative: "I" },
		{ letter: /[\u00F3\u00F2]/g, alternative: "o" },
		{ letter: /[\u00D3\u00D2]/g, alternative: "O" },
		{ letter: /[\u00F9\u00FA]/g, alternative: "u" },
		{ letter: /[\u00D9\u00DA]/g, alternative: "U" }
	],
	// Language: Dutch.
	// Sources: https://en.wikipedia.org/wiki/Dutch_orthography https://nl.wikipedia.org/wiki/Trema_in_de_Nederlandse_spelling
	nl: [
		{ letter: /[\u00E7]/g, alternative: "c" },
		{ letter: /[\u00C7]/g, alternative: "C" },
		{ letter: /[\u00F1]/g, alternative: "n" },
		{ letter: /[\u00D1]/g, alternative: "N" },
		{ letter: /[\u00E9\u00E8\u00EA\u00EB]/g, alternative: "e" },
		{ letter: /[\u00C9\u00C8\u00CA\u00CB]/g, alternative: "E" },
		{ letter: /[\u00F4\u00F6]/g, alternative: "o" },
		{ letter: /[\u00D4\u00D6]/g, alternative: "O" },
		{ letter: /[\u00EF]/g, alternative: "i" },
		{ letter: /[\u00CF]/g, alternative: "I" },
		{ letter: /[\u00FC]/g, alternative: "u" },
		{ letter: /[\u00DC]/g, alternative: "U" },
		{ letter: /[\u00E4]/g, alternative: "a" },
		{ letter: /[\u00C4]/g, alternative: "A" }
	],
	// Language: Bambara.
	// Sources: http://www.omniglot.com/writing/bambara.htm https://en.wikipedia.org/wiki/Bambara_language
	bm: [
		{ letter: /[\u025B]/g, alternative: "e" },
		{ letter: /[\u0190]/g, alternative: "E" },
		{ letter: /[\u0272]/g, alternative: "ny" },
		{ letter: /[\u019D]/g, alternative: "Ny" },
		{ letter: /[\u014B]/g, alternative: "ng" },
		{ letter: /[\u014A]/g, alternative: "Ng" },
		{ letter: /[\u0254]/g, alternative: "o" },
		{ letter: /[\u0186]/g, alternative: "O" }
	],
	// Language: Ukrainian.
	// Source: Resolution no. 55 of the Cabinet of Ministers of Ukraine, January 27, 2010 http://zakon2.rada.gov.ua/laws/show/55-2010-%D0%BF
	// ‘ь’ is the so-called soft sign, indicating a sound change (palatalization) of the preceding consonant. In text it is sometimes transliterated
	// to a character similar to an apostroph: ′. Omittance is recommended in slugs (https://en.wikipedia.org/wiki/Romanization_of_Ukrainian).
	uk: [
		{ letter: /[\u0431]/g, alternative: "b" },
		{ letter: /[\u0411]/g, alternative: "B" },
		{ letter: /[\u0432]/g, alternative: "v" },
		{ letter: /[\u0412]/g, alternative: "V" },
		{ letter: /[\u0433]/g, alternative: "h" },
		{ letter: /[\u0413]/g, alternative: "H" },
		{ letter: /[\u0491]/g, alternative: "g" },
		{ letter: /[\u0490]/g, alternative: "G" },
		{ letter: /[\u0434]/g, alternative: "d" },
		{ letter: /[\u0414]/g, alternative: "D" },
		{ letter: /[\u043A]/g, alternative: "k" },
		{ letter: /[\u041A]/g, alternative: "K" },
		{ letter: /[\u043B]/g, alternative: "l" },
		{ letter: /[\u041B]/g, alternative: "L" },
		{ letter: /[\u043C]/g, alternative: "m" },
		{ letter: /[\u041C]/g, alternative: "M" },
		{ letter: /[\u0070]/g, alternative: "r" },
		{ letter: /[\u0050]/g, alternative: "R" },
		{ letter: /[\u043F]/g, alternative: "p" },
		{ letter: /[\u041F]/g, alternative: "P" },
		{ letter: /[\u0441]/g, alternative: "s" },
		{ letter: /[\u0421]/g, alternative: "S" },
		{ letter: /[\u0442]/g, alternative: "t" },
		{ letter: /[\u0422]/g, alternative: "T" },
		{ letter: /[\u0443]/g, alternative: "u" },
		{ letter: /[\u0423]/g, alternative: "U" },
		{ letter: /[\u0444]/g, alternative: "f" },
		{ letter: /[\u0424]/g, alternative: "F" },
		{ letter: /[\u0445]/g, alternative: "kh" },
		{ letter: /[\u0425]/g, alternative: "Kh" },
		{ letter: /[\u0446]/g, alternative: "ts" },
		{ letter: /[\u0426]/g, alternative: "Ts" },
		{ letter: /[\u0447]/g, alternative: "ch" },
		{ letter: /[\u0427]/g, alternative: "Ch" },
		{ letter: /[\u0448]/g, alternative: "sh" },
		{ letter: /[\u0428]/g, alternative: "Sh" },
		{ letter: /[\u0449]/g, alternative: "shch" },
		{ letter: /[\u0429]/g, alternative: "Shch" },
		{ letter: /[\u044C\u042C]/g, alternative: "" },
		{ letter: /[\u0436]/g, alternative: "zh" },
		{ letter: /[\u0416]/g, alternative: "Zh" },
		{ letter: /[\u0437]/g, alternative: "z" },
		{ letter: /[\u0417]/g, alternative: "Z" },
		{ letter: /[\u0438]/g, alternative: "y" },
		{ letter: /[\u0418]/g, alternative: "Y" },
		{ letter: /^[\u0454]/g, alternative: "ye" },
		{ letter: /[\s][\u0454]/g, alternative: " ye" },
		{ letter: /[\u0454]/g, alternative: "ie" },
		{ letter: /^[\u0404]/g, alternative: "Ye" },
		{ letter: /[\s][\u0404]/g, alternative: " Ye" },
		{ letter: /[\u0404]/g, alternative: "IE" },
		{ letter: /^[\u0457]/g, alternative: "yi" },
		{ letter: /[\s][\u0457]/g, alternative: " yi" },
		{ letter: /[\u0457]/g, alternative: "i" },
		{ letter: /^[\u0407]/g, alternative: "Yi" },
		{ letter: /[\s][\u0407]/g, alternative: " Yi" },
		{ letter: /[\u0407]/g, alternative: "I" },
		{ letter: /^[\u0439]/g, alternative: "y" },
		{ letter: /[\s][\u0439]/g, alternative: " y" },
		{ letter: /[\u0439]/g, alternative: "i" },
		{ letter: /^[\u0419]/g, alternative: "Y" },
		{ letter: /[\s][\u0419]/g, alternative: " Y" },
		{ letter: /[\u0419]/g, alternative: "I" },
		{ letter: /^[\u044E]/g, alternative: "yu" },
		{ letter: /[\s][\u044E]/g, alternative: " yu" },
		{ letter: /[\u044E]/g, alternative: "iu" },
		{ letter: /^[\u042E]/g, alternative: "Yu" },
		{ letter: /[\s][\u042E]/g, alternative: " Yu" },
		{ letter: /[\u042E]/g, alternative: "IU" },
		{ letter: /^[\u044F]/g, alternative: "ya" },
		{ letter: /[\s][\u044F]/g, alternative: " ya" },
		{ letter: /[\u044F]/g, alternative: "ia" },
		{ letter: /^[\u042F]/g, alternative: "Ya" },
		{ letter: /[\s][\u042F]/g, alternative: " Ya" },
		{ letter: /[\u042F]/g, alternative: "IA" }
	],
	// Language: Breton
	// Source: http://www.omniglot.com/writing/breton.htm
	br: [
		{ letter: /\u0063\u0027\u0068/g, alternative: "ch" },
		{ letter: /\u0043\u0027\u0048/g, alternative: "CH" },
		{ letter: /[\u00e2]/g, alternative: "a" },
		{ letter: /[\u00c2]/g, alternative: "A" },
		{ letter: /[\u00ea]/g, alternative: "e" },
		{ letter: /[\u00ca]/g, alternative: "E" },
		{ letter: /[\u00ee]/g, alternative: "i" },
		{ letter: /[\u00ce]/g, alternative: "I" },
		{ letter: /[\u00f4]/g, alternative: "o" },
		{ letter: /[\u00d4]/g, alternative: "O" },
		{ letter: /[\u00fb\u00f9\u00fc]/g, alternative: "u" },
		{ letter: /[\u00db\u00d9\u00dc]/g, alternative: "U" },
		{ letter: /[\u00f1]/g, alternative: "n" },
		{ letter: /[\u00d1]/g, alternative: "N" }
	],
	// Language: Chamorro
	// Source: http://www.omniglot.com/writing/chamorro.htm
	ch: [
		{ letter: /[\u0027]/g, alternative: "" },
		{ letter: /[\u00e5]/g, alternative: "a" },
		{ letter: /[\u00c5]/g, alternative: "A" },
		{ letter: /[\u00f1]/g, alternative: "n" },
		{ letter: /[\u00d1]/g, alternative: "N" }
	],
	// Language: Corsican
	// Sources: http://www.omniglot.com/writing/corsican.htm https://en.wikipedia.org/wiki/Corsican_alphabet
	co: [
		{ letter: /[\u00e2\u00e0]/g, alternative: "a" },
		{ letter: /[\u00c2\u00c0]/g, alternative: "A" },
		{ letter: /[\u00e6\u04d5]/g, alternative: "ae" },
		{ letter: /[\u00c6\u04d4]/g, alternative: "Ae" },
		{ letter: /[\u00e7]/g, alternative: "c" },
		{ letter: /[\u00c7]/g, alternative: "C" },
		{ letter: /[\u00e9\u00ea\u00e8\u00eb]/g, alternative: "e" },
		{ letter: /[\u00c9\u00ca\u00c8\u00cb]/g, alternative: "E" },
		{ letter: /[\u00ec\u00ee\u00ef]/g, alternative: "i" },
		{ letter: /[\u00cc\u00ce\u00cf]/g, alternative: "I" },
		{ letter: /[\u00f1]/g, alternative: "n" },
		{ letter: /[\u00d1]/g, alternative: "N" },
		{ letter: /[\u00f4\u00f2]/g, alternative: "o" },
		{ letter: /[\u00d4\u00d2]/g, alternative: "O" },
		{ letter: /[\u0153]/g, alternative: "oe" },
		{ letter: /[\u0152]]/g, alternative: "Oe" },
		{ letter: /[\u00f9\u00fc]/g, alternative: "u" },
		{ letter: /[\u00d9\u00dc]/g, alternative: "U" },
		{ letter: /[\u00ff]/g, alternative: "y" },
		{ letter: /[\u0178]/g, alternative: "Y" }
	],
	// Language: Kashubian
	// Sources: http://www.omniglot.com/writing/kashubian.htm https://en.wikipedia.org/wiki/Kashubian_language
	csb: [
		{ letter: /[\u0105\u00e3]/g, alternative: "a" },
		{ letter: /[\u0104\u00c3]/g, alternative: "A" },
		{ letter: /[\u00e9\u00eb]/g, alternative: "e" },
		{ letter: /[\u00c9\u00cb]/g, alternative: "E" },
		{ letter: /[\u0142]/g, alternative: "l" },
		{ letter: /[\u0141]/g, alternative: "L" },
		{ letter: /[\u0144]/g, alternative: "n" },
		{ letter: /[\u0143]/g, alternative: "N" },
		{ letter: /[\u00f2\u00f3\u00f4]/g, alternative: "o" },
		{ letter: /[\u00d2\u00d3\u00d4]/g, alternative: "O" },
		{ letter: /[\u00f9]/g, alternative: "u" },
		{ letter: /[\u00d9]/g, alternative: "U" },
		{ letter: /[\u017c]/g, alternative: "z" },
		{ letter: /[\u017b]/g, alternative: "Z" }
	],
	// Language: Welsh
	// Sources: http://www.omniglot.com/writing/welsh.htm https://en.wikipedia.org/wiki/Welsh_orthography#Diacritics
	cy: [
		{ letter: /[\u00e2]/g, alternative: "a" },
		{ letter: /[\u00c2]/g, alternative: "A" },
		{ letter: /[\u00ea]/g, alternative: "e" },
		{ letter: /[\u00ca]/g, alternative: "E" },
		{ letter: /[\u00ee]/g, alternative: "i" },
		{ letter: /[\u00ce]/g, alternative: "I" },
		{ letter: /[\u00f4]/g, alternative: "o" },
		{ letter: /[\u00d4]/g, alternative: "O" },
		{ letter: /[\u00fb]/g, alternative: "u" },
		{ letter: /[\u00db]/g, alternative: "U" },
		{ letter: /[\u0175]/g, alternative: "w" },
		{ letter: /[\u0174]/g, alternative: "W" },
		{ letter: /[\u0177]/g, alternative: "y" },
		{ letter: /[\u0176]/g, alternative: "Y" }
	],
	// Language: Ewe
	// Sources: http://www.omniglot.com/writing/ewe.htm https://en.wikipedia.org/wiki/Ewe_language#Writing_system
	ee: [
		{ letter: /[\u0256]/g, alternative: "d" },
		{ letter: /[\u0189]/g, alternative: "D" },
		{ letter: /[\u025b]/g, alternative: "e" },
		{ letter: /[\u0190]/g, alternative: "E" },
		{ letter: /[\u0192]/g, alternative: "f" },
		{ letter: /[\u0191]/g, alternative: "F" },
		{ letter: /[\u0263]/g, alternative: "g" },
		{ letter: /[\u0194]/g, alternative: "G" },
		{ letter: /[\u014b]/g, alternative: "ng" },
		{ letter: /[\u014a]/g, alternative: "Ng" },
		{ letter: /[\u0254]/g, alternative: "o" },
		{ letter: /[\u0186]/g, alternative: "O" },
		{ letter: /[\u028b]/g, alternative: "w" },
		{ letter: /[\u01b2]/g, alternative: "W" },
		{ letter: /\u0061\u0303/g, alternative: "a" },
		{ letter: /[\u00e1\u00e0\u01ce\u00e2\u00e3]/g, alternative: "a" },
		{ letter: /\u0041\u0303/g, alternative: "A" },
		{ letter: /[\u00c1\u00c0\u01cd\u00c2\u00c3]/g, alternative: "A" },
		{ letter: /[\u00e9\u00e8\u011b\u00ea]/g, alternative: "e" },
		{ letter: /[\u00c9\u00c8\u011a\u00ca]/g, alternative: "E" },
		{ letter: /[\u00f3\u00f2\u01d2\u00f4]/g, alternative: "o" },
		{ letter: /[\u00d3\u00d2\u01d1\u00d4]/g, alternative: "O" },
		{ letter: /[\u00fa\u00f9\u01d4\u00fb]/g, alternative: "u" },
		{ letter: /[\u00da\u00d9\u01d3\u00db]/g, alternative: "U" },
		{ letter: /[\u00ed\u00ec\u01d0\u00ee]/g, alternative: "i" },
		{ letter: /[\u00cd\u00cc\u01cf\u00ce]/g, alternative: "I" }
	],
	// Language: Estonian
	// Sources: http://www.omniglot.com/writing/estonian.htm https://en.wikipedia.org/wiki/Estonian_orthography https://en.wikipedia.org/wiki/%C5%BD https://en.wikipedia.org/wiki/%C5%A0
	et: [
		{ letter: /[\u0161]/g, alternative: "sh" },
		{ letter: /[\u0160]/g, alternative: "Sh" },
		{ letter: /[\u017e]/g, alternative: "zh" },
		{ letter: /[\u017d]/g, alternative: "Zh" },
		{ letter: /[\u00f5\u00f6]/g, alternative: "o" },
		{ letter: /[\u00d6\u00d5]/g, alternative: "O" },
		{ letter: /[\u00e4]/g, alternative: "a" },
		{ letter: /[\u00c4]/g, alternative: "A" },
		{ letter: /[\u00fc]/g, alternative: "u" },
		{ letter: /[\u00dc]/g, alternative: "U" }
		],
	// Language: Basque
	// Sources: http://www.omniglot.com/writing/basque.htm https://en.wikipedia.org/wiki/Basque_language#Writing_system https://en	.wikipedia.org/wiki/Basque_alphabet
	eu: [
		{ letter: /[\u00f1]/g, alternative: "n" },
		{ letter: /[\u00d1]/g, alternative: "N" },
		{ letter: /[\u00e7]/g, alternative: "c" },
		{ letter: /[\u00c7]/g, alternative: "C" },
		{ letter: /[\u00fc]/g, alternative: "u" },
		{ letter: /[\u00dc]/g, alternative: "U" }
	],
	// Language: Fulah
	// Sources: http://www.omniglot.com/writing/fula.htm https://en.wikipedia.org/wiki/Fula_language#Writing_systems
	fuc: [
		{ letter: /[\u0253]/g, alternative: "b" },
		{ letter: /[\u0181]/g, alternative: "B" },
		{ letter: /[\u0257]/g, alternative: "d" },
		{ letter: /[\u018a]/g, alternative: "D" },
		{ letter: /[\u014b]/g, alternative: "ng" },
		{ letter: /[\u014a]/g, alternative: "Ng" },
		{ letter: /[\u0272\u00f1]/g, alternative: "ny" },
		{ letter: /[\u019d\u00d1]/g, alternative: "Ny" },
		{ letter: /[\u01b4]/g, alternative: "y" },
		{ letter: /[\u01b3]/g, alternative: "Y" },
		{ letter: /[\u0260]/g, alternative: "g" },
		{ letter: /[\u0193]/g, alternative: "G" }
	],
	// Language: Fijian
	// Source: http://www.omniglot.com/writing/fijian.htm
	fj: [
		{ letter: /[\u0101]/g, alternative: "a" },
		{ letter: /[\u0100]/g, alternative: "A" },
		{ letter: /[\u0113]/g, alternative: "e" },
		{ letter: /[\u0112]/g, alternative: "E" },
		{ letter: /[\u012b]/g, alternative: "i" },
		{ letter: /[\u012a]/g, alternative: "I" },
		{ letter: /[\u016b]/g, alternative: "u" },
		{ letter: /[\u016a]/g, alternative: "U" },
		{ letter: /[\u014d]/g, alternative: "o" },
		{ letter: /[\u014c]/g, alternative: "O" }
	],
	// Language: Arpitan (Franco-Provençal language)
	// Source: http://www.omniglot.com/writing/francoprovencal.htm
	frp: [
		{ letter: /[\u00e2]/g, alternative: "a" },
		{ letter: /[\u00c2]/g, alternative: "A" },
		{ letter: /[\u00ea\u00e8\u00e9]/g, alternative: "e" },
		{ letter: /[\u00ca\u00c8\u00c9]/g, alternative: "E" },
		{ letter: /[\u00ee]/g, alternative: "i" },
		{ letter: /[\u00ce]/g, alternative: "I" },
		{ letter: /[\u00fb\u00fc]/g, alternative: "u" },
		{ letter: /[\u00db\u00dc]/g, alternative: "U" },
		{ letter: /[\u00f4]/g, alternative: "o" },
		{ letter: /[\u00d4]/g, alternative: "O" }
	],
	// Language: Friulian
	// Sources: https://en.wikipedia.org/wiki/Friulian_language https://en.wikipedia.org/wiki/Faggin-Nazzi_alphabet
	// http://www.omniglot.com/writing/friulian.htm
	fur: [
		{ letter: /[\u00E7]/g, alternative: "c" },
		{ letter: /[\u00C7]/g, alternative: "C" },
		{ letter: /[\u00e0\u00e2]/g, alternative: "a" },
		{ letter: /[\u00c0\u00c2]/g, alternative: "A" },
		{ letter: /[\u00e8\u00ea]/g, alternative: "e" },
		{ letter: /[\u00c8\u00ca]/g, alternative: "E" },
		{ letter: /[\u00ec\u00ee]/g, alternative: "i" },
		{ letter: /[\u00cc\u00ce]/g, alternative: "I" },
		{ letter: /[\u00f2\u00f4]/g, alternative: "o" },
		{ letter: /[\u00d2\u00d4]/g, alternative: "O" },
		{ letter: /[\u00f9\u00fb]/g, alternative: "u" },
		{ letter: /[\u00d9\u00db]/g, alternative: "U" },
		{ letter: /[\u010d]/g, alternative: "c" },
		{ letter: /[\u010c]/g, alternative: "C" },
		{ letter: /[\u011f]/g, alternative: "g" },
		{ letter: /[\u011e]/g, alternative: "G" },
		{ letter: /[\u0161]/g, alternative: "s" },
		{ letter: /[\u0160]/g, alternative: "S" }
	],
	// Language: Frisian
	// Sources: https://en.wikipedia.org/wiki/West_Frisian_alphabet http://www.omniglot.com/writing/frisian.htm
	fy: [
		{ letter: /[\u00e2\u0101\u00e4\u00e5]/g, alternative: "a" },
		{ letter: /[\u00c2\u0100\u00c4\u00c5]/g, alternative: "A" },
		{ letter: /[\u00ea\u00e9\u0113]/g, alternative: "e" },
		{ letter: /[\u00ca\u00c9\u0112]/g, alternative: "E" },
		{ letter: /[\u00f4\u00f6]/g, alternative: "o" },
		{ letter: /[\u00d4\u00d6]/g, alternative: "O" },
		{ letter: /[\u00fa\u00fb\u00fc]/g, alternative: "u" },
		{ letter: /[\u00da\u00db\u00dc]/g, alternative: "U" },
		{ letter: /[\u00ed]/g, alternative: "i" },
		{ letter: /[\u00cd]/g, alternative: "I" },
		{ letter: /[\u0111\u00f0]/g, alternative: "d" },
		{ letter: /[\u0110\u00d0]/g, alternative: "D" }
	],
	// Language: Irish
	// Source: https://en.wikipedia.org/wiki/Irish_orthography
	ga: [
		{ letter: /[\u00e1]/g, alternative: "a" },
		{ letter: /[\u00c1]/g, alternative: "A" },
		{ letter: /[\u00e9]/g, alternative: "e" },
		{ letter: /[\u00c9]/g, alternative: "E" },
		{ letter: /[\u00f3]/g, alternative: "o" },
		{ letter: /[\u00d3]/g, alternative: "O" },
		{ letter: /[\u00fa]/g, alternative: "u" },
		{ letter: /[\u00da]/g, alternative: "U" },
		{ letter: /[\u00ed]/g, alternative: "i" },
		{ letter: /[\u00cd]/g, alternative: "I" }
	],
	// Language: Scottish Gaelic
	// Sources: https://en.wikipedia.org/wiki/Scottish_Gaelic_orthography http://www.omniglot.com/writing/gaelic.htm
	gd: [
		{ letter: /[\u00e0]/g, alternative: "a" },
		{ letter: /[\u00c0]/g, alternative: "A" },
		{ letter: /[\u00e8]/g, alternative: "e" },
		{ letter: /[\u00c8]/g, alternative: "E" },
		{ letter: /[\u00f2]/g, alternative: "o" },
		{ letter: /[\u00d2]/g, alternative: "O" },
		{ letter: /[\u00f9]/g, alternative: "u" },
		{ letter: /[\u00d9]/g, alternative: "U" },
		{ letter: /[\u00ec]/g, alternative: "i" },
		{ letter: /[\u00cc]/g, alternative: "I" }
	],
	// Language: Galician
	// Sources: https://en.wikipedia.org/wiki/Diacritic https://en.wikipedia.org/wiki/Galician_Alphabet
	gl: [
		{ letter: /[\u00e1\u00e0]/g, alternative: "a" },
		{ letter: /[\u00c1\u00c0]/g, alternative: "A" },
		{ letter: /[\u00e9\u00ea]/g, alternative: "e" },
		{ letter: /[\u00c9\u00ca]/g, alternative: "E" },
		{ letter: /[\u00ed\u00ef]/g, alternative: "i" },
		{ letter: /[\u00cd\u00cf]/g, alternative: "I" },
		{ letter: /[\u00f3]/g, alternative: "o" },
		{ letter: /[\u00d3]/g, alternative: "O" },
		{ letter: /[\u00fa\u00fc]/g, alternative: "u" },
		{ letter: /[\u00da\u00dc]/g, alternative: "U" },
		{ letter: /[\u00e7]/g, alternative: "c" },
		{ letter: /[\u00c7]/g, alternative: "C" },
		{ letter: /[\u00f1]/g, alternative: "n" },
		{ letter: /[\u00d1]/g, alternative: "N" }
	],
	// Language: Guarani
	// Sources: https://en.wikipedia.org/wiki/Guarani_alphabet http://www.omniglot.com/writing/guarani.htm
	gn: [
		{ letter: /[\u2019]/g, alternative: "" },
		{ letter: /\u0067\u0303/g, alternative: "g" },
		{ letter: /\u0047\u0303/g, alternative: "G" },
		{ letter: /[\u00e3]/g, alternative: "a" },
		{ letter: /[\u00c3]/g, alternative: "A" },
		{ letter: /[\u1ebd]/g, alternative: "e" },
		{ letter: /[\u1ebc]/g, alternative: "E" },
		{ letter: /[\u0129]/g, alternative: "i" },
		{ letter: /[\u0128]/g, alternative: "I" },
		{ letter: /[\u00f5]/g, alternative: "o" },
		{ letter: /[\u00d5]/g, alternative: "O" },
		{ letter: /[\u00f1]/g, alternative: "n" },
		{ letter: /[\u00d1]/g, alternative: "N" },
		{ letter: /[\u0169]/g, alternative: "u" },
		{ letter: /[\u0168]/g, alternative: "U" },
		{ letter: /[\u1ef9]/g, alternative: "y" },
		{ letter: /[\u1ef8]/g, alternative: "Y" }
	],
	// Language: Swiss German
	// Source: http://www.omniglot.com/writing/swissgerman.htm
	gsw: [
		{ letter: /[\u00e4]/g, alternative: "a" },
		{ letter: /[\u00c4]/g, alternative: "A" },
		{ letter: /[\u00f6]/g, alternative: "o" },
		{ letter: /[\u00d6]/g, alternative: "O" },
		{ letter: /[\u00fc]/g, alternative: "u" },
		{ letter: /[\u00dc]/g, alternative: "U" }
	],
	// Language: Haitian Creole
	// Sources: https://en.wikipedia.org/wiki/Haitian_Creole http://www.omniglot.com/writing/haitiancreole.htm
	hat: [
		{ letter: /[\u00e8]/g, alternative: "e" },
		{ letter: /[\u00c8]/g, alternative: "E" },
		{ letter: /[\u00f2]/g, alternative: "o" },
		{ letter: /[\u00d2]/g, alternative: "O" }
	],
	// Language: Hawaiian
	// Sources: https://en.wikipedia.org/wiki/Hawaiian_language#Macron http://www.omniglot.com/writing/hawaiian.htm
	haw: [
		{ letter: /[\u02bb\u0027\u2019]/g, alternative: "" },
		{ letter: /[\u0101]/g, alternative: "a" },
		{ letter: /[\u0113]/g, alternative: "e" },
		{ letter: /[\u012b]/g, alternative: "i" },
		{ letter: /[\u014d]/g, alternative: "o" },
		{ letter: /[\u016b]/g, alternative: "u" },
		{ letter: /[\u0100]/g, alternative: "A" },
		{ letter: /[\u0112]/g, alternative: "E" },
		{ letter: /[\u012a]/g, alternative: "I" },
		{ letter: /[\u014c]/g, alternative: "O" },
		{ letter: /[\u016a]/g, alternative: "U" }
	],
	// Language: Croatian
	// Sources: https://en.wikipedia.org/wiki/Gaj%27s_Latin_alphabet https://en.wikipedia.org/wiki/D_with_stroke
	// http://www.omniglot.com/writing/croatian.htm
	hr: [
		{ letter: /[\u010d\u0107]/g, alternative: "c" },
		{ letter: /[\u010c\u0106]/g, alternative: "C" },
		{ letter: /[\u0111]/g, alternative: "dj" },
		{ letter: /[\u0110]/g, alternative: "Dj" },
		{ letter: /[\u0161]/g, alternative: "s" },
		{ letter: /[\u0160]/g, alternative: "S" },
		{ letter: /[\u017e]/g, alternative: "z" },
		{ letter: /[\u017d]/g, alternative: "Z" },
		{ letter: /[\u01c4]/g, alternative: "DZ" },
		{ letter: /[\u01c5]/g, alternative: "Dz" },
		{ letter: /[\u01c6]/g, alternative: "dz" }
	],
	// Language: Georgian
	// The Georgian language does not use capital letters.
	// Sources: https://en.wikipedia.org/wiki/Romanization_of_Georgian (national system)
	ka: [
		{ letter: /[\u10d0]/g, alternative: "a" },
		{ letter: /[\u10d1]/g, alternative: "b" },
		{ letter: /[\u10d2]/g, alternative: "g" },
		{ letter: /[\u10d3]/g, alternative: "d" },
		{ letter: /[\u10d4]/g, alternative: "e" },
		{ letter: /[\u10d5]/g, alternative: "v" },
		{ letter: /[\u10d6]/g, alternative: "z" },
		{ letter: /[\u10d7]/g, alternative: "t" },
		{ letter: /[\u10d8]/g, alternative: "i" },
		{ letter: /[\u10d9]/g, alternative: "k" },
		{ letter: /[\u10da]/g, alternative: "l" },
		{ letter: /[\u10db]/g, alternative: "m" },
		{ letter: /[\u10dc]/g, alternative: "n" },
		{ letter: /[\u10dd]/g, alternative: "o" },
		{ letter: /[\u10de]/g, alternative: "p" },
		{ letter: /[\u10df]/g, alternative: "zh" },
		{ letter: /[\u10e0]/g, alternative: "r" },
		{ letter: /[\u10e1]/g, alternative: "s" },
		{ letter: /[\u10e2]/g, alternative: "t" },
		{ letter: /[\u10e3]/g, alternative: "u" },
		{ letter: /[\u10e4]/g, alternative: "p" },
		{ letter: /[\u10e5]/g, alternative: "k" },
		{ letter: /[\u10e6]/g, alternative: "gh" },
		{ letter: /[\u10e7]/g, alternative: "q" },
		{ letter: /[\u10e8]/g, alternative: "sh" },
		{ letter: /[\u10e9]/g, alternative: "ch" },
		{ letter: /[\u10ea]/g, alternative: "ts" },
		{ letter: /[\u10eb]/g, alternative: "dz" },
		{ letter: /[\u10ec]/g, alternative: "ts" },
		{ letter: /[\u10ed]/g, alternative: "ch" },
		{ letter: /[\u10ee]/g, alternative: "kh" },
		{ letter: /[\u10ef]/g, alternative: "j" },
		{ letter: /[\u10f0]/g, alternative: "h" }
	],
	// Language: Greenlandic.
	// Source: https://en.wikipedia.org/wiki/Greenlandic_language#Orthography
	kal: [
		{ letter: /[\u00E5]/g, alternative: "aa" },
		{ letter: /[\u00C5]/g, alternative: "Aa" },
		{ letter: /[\u00E6\u04D5]/g, alternative: "ae" },
		{ letter: /[\u00C6\u04D4]/g, alternative: "Ae" },
		{ letter: /[\u00C4]/g, alternative: "Ae" },
		{ letter: /[\u00F8]/g, alternative: "oe" },
		{ letter: /[\u00D8]/g, alternative: "Oe" }
		],
	// Language: Kinyarwanda.
	// Source: https://en.wikipedia.org/wiki/Kinyarwanda
	kin: [
		{ letter: /[\u2019\u0027]/g, alternative: "" }
	],
	// Language: Luxembourgish.
	// Source: http://www.omniglot.com/writing/luxembourgish.htm
	lb: [
		{ letter: /[\u00e4]/g, alternative: "a" },
		{ letter: /[\u00c4]/g, alternative: "A" },
		{ letter: /[\u00eb\u00e9]/g, alternative: "e" },
		{ letter: /[\u00cb\u00c9]/g, alternative: "E" }
	],
	// Language: Limburgish.
	// Source: http://www.omniglot.com/writing/limburgish.htm
	li: [
		{ letter: /[\u00e1\u00e2\u00e0\u00e4]/g, alternative: "a" },
		{ letter: /[\u00c1\u00c2\u00c0\u00c4]/g, alternative: "A" },
		{ letter: /[\u00eb\u00e8\u00ea]/g, alternative: "e" },
		{ letter: /[\u00cb\u00c8\u00ca]/g, alternative: "E" },
		{ letter: /[\u00f6\u00f3]/g, alternative: "o" },
		{ letter: /[\u00d6\u00d3]/g, alternative: "O" }
	],
	// Language: Lingala.
	// Sources: https://en.wikipedia.org/wiki/Lingala#Writing_system http://www.omniglot.com/writing/lingala.htm
	lin: [
		{ letter: /[\u00e1\u00e2\u01ce]/g, alternative: "a" },
		{ letter: /[\u00c1\u00c2\u01cd]/g, alternative: "A" },
		{ letter: /\u025b\u0301/g, alternative: "e" },
		{ letter: /\u025b\u0302/g, alternative: "e" },
		{ letter: /\u025b\u030c/g, alternative: "e" },
		{ letter: /[\u00e9\u00ea\u011b\u025b]/g, alternative: "e" },
		{ letter: /\u0190\u0301/g, alternative: "E" },
		{ letter: /\u0190\u0302/g, alternative: "E" },
		{ letter: /\u0190\u030c/g, alternative: "E" },
		{ letter: /[\u00c9\u00ca\u011a\u0190]/g, alternative: "E" },
		{ letter: /[\u00ed\u00ee\u01d0]/g, alternative: "i" },
		{ letter: /[\u00cd\u00ce\u01cf]/g, alternative: "I" },
		{ letter: /\u0254\u0301/g, alternative: "o" },
		{ letter: /\u0254\u0302/g, alternative: "o" },
		{ letter: /\u0254\u030c/g, alternative: "o" },
		{ letter: /[\u00f3\u00f4\u01d2\u0254]/g, alternative: "o" },
		{ letter: /\u0186\u0301/g, alternative: "O" },
		{ letter: /\u0186\u0302/g, alternative: "O" },
		{ letter: /\u0186\u030c/g, alternative: "O" },
		{ letter: /[\u00d3\u00d4\u01d1\u0186]/g, alternative: "O" },
		{ letter: /[\u00fa]/g, alternative: "u" },
		{ letter: /[\u00da]/g, alternative: "U" }
	],
	// Language: Lithuanian.
	// Sources: https://en.wikipedia.org/wiki/Lithuanian_orthography http://www.omniglot.com/writing/lithuanian.htm
	lt: [
		{ letter: /[\u0105]/g, alternative: "a" },
		{ letter: /[\u0104]/g, alternative: "A" },
		{ letter: /[\u010d]/g, alternative: "c" },
		{ letter: /[\u010c]/g, alternative: "C" },
		{ letter: /[\u0119\u0117]/g, alternative: "e" },
		{ letter: /[\u0118\u0116]/g, alternative: "E" },
		{ letter: /[\u012f]/g, alternative: "i" },
		{ letter: /[\u012e]/g, alternative: "I" },
		{ letter: /[\u0161]/g, alternative: "s" },
		{ letter: /[\u0160]/g, alternative: "S" },
		{ letter: /[\u0173\u016b]/g, alternative: "u" },
		{ letter: /[\u0172\u016a]/g, alternative: "U" },
		{ letter: /[\u017e]/g, alternative: "z" },
		{ letter: /[\u017d]/g, alternative: "Z" }
	],
	// Language: Malagasy.
	// Source: http://www.omniglot.com/writing/malagasy.htm
	mg: [
		{ letter: /[\u00f4]/g, alternative: "ao" },
		{ letter: /[\u00d4]/g, alternative: "Ao" }
	],
	// Language: Macedonian.
	// Source: http://www.omniglot.com/writing/macedonian.htm
	mk: [
		{ letter: /[\u0430]/g, alternative: "a" },
		{ letter: /[\u0410]/g, alternative: "A" },
		{ letter: /[\u0431]/g, alternative: "b" },
		{ letter: /[\u0411]/g, alternative: "B" },
		{ letter: /[\u0432]/g, alternative: "v" },
		{ letter: /[\u0412]/g, alternative: "V" },
		{ letter: /[\u0433]/g, alternative: "g" },
		{ letter: /[\u0413]/g, alternative: "G" },
		{ letter: /[\u0434]/g, alternative: "d" },
		{ letter: /[\u0414]/g, alternative: "D" },
		{ letter: /[\u0453]/g, alternative: "gj" },
		{ letter: /[\u0403]/g, alternative: "Gj" },
		{ letter: /[\u0435]/g, alternative: "e" },
		{ letter: /[\u0415]/g, alternative: "E" },
		{ letter: /[\u0436]/g, alternative: "zh" },
		{ letter: /[\u0416]/g, alternative: "Zh" },
		{ letter: /[\u0437]/g, alternative: "z" },
		{ letter: /[\u0417]/g, alternative: "Z" },
		{ letter: /[\u0455]/g, alternative: "dz" },
		{ letter: /[\u0405]/g, alternative: "Dz" },
		{ letter: /[\u0438]/g, alternative: "i" },
		{ letter: /[\u0418]/g, alternative: "I" },
		{ letter: /[\u0458]/g, alternative: "j" },
		{ letter: /[\u0408]/g, alternative: "J" },
		{ letter: /[\u043A]/g, alternative: "k" },
		{ letter: /[\u041A]/g, alternative: "K" },
		{ letter: /[\u043B]/g, alternative: "l" },
		{ letter: /[\u041B]/g, alternative: "L" },
		{ letter: /[\u0459]/g, alternative: "lj" },
		{ letter: /[\u0409]/g, alternative: "Lj" },
		{ letter: /[\u043C]/g, alternative: "m" },
		{ letter: /[\u041C]/g, alternative: "M" },
		{ letter: /[\u043D]/g, alternative: "n" },
		{ letter: /[\u041D]/g, alternative: "N" },
		{ letter: /[\u045A]/g, alternative: "nj" },
		{ letter: /[\u040A]/g, alternative: "Nj" },
		{ letter: /[\u043E]/g, alternative: "o" },
		{ letter: /[\u041E]/g, alternative: "O" },
		{ letter: /[\u0440]/g, alternative: "r" },
		{ letter: /[\u0420]/g, alternative: "R" },
		{ letter: /[\u043F]/g, alternative: "p" },
		{ letter: /[\u041F]/g, alternative: "P" },
		{ letter: /[\u0441]/g, alternative: "s" },
		{ letter: /[\u0421]/g, alternative: "S" },
		{ letter: /[\u0442]/g, alternative: "t" },
		{ letter: /[\u0422]/g, alternative: "T" },
		{ letter: /[\u045C]/g, alternative: "kj" },
		{ letter: /[\u040C]/g, alternative: "Kj" },
		{ letter: /[\u0443]/g, alternative: "u" },
		{ letter: /[\u0423]/g, alternative: "U" },
		{ letter: /[\u0444]/g, alternative: "f" },
		{ letter: /[\u0424]/g, alternative: "F" },
		{ letter: /[\u0445]/g, alternative: "h" },
		{ letter: /[\u0425]/g, alternative: "H" },
		{ letter: /[\u0446]/g, alternative: "c" },
		{ letter: /[\u0426]/g, alternative: "C" },
		{ letter: /[\u0447]/g, alternative: "ch" },
		{ letter: /[\u0427]/g, alternative: "Ch" },
		{ letter: /[\u045F]/g, alternative: "dj" },
		{ letter: /[\u040F]/g, alternative: "Dj" },
		{ letter: /[\u0448]/g, alternative: "sh" },
		{ letter: /[\u0428]/g, alternative: "Sh" }
	],
	// Language: Maori.
	// Source: http://www.omniglot.com/writing/maori.htm
	mri: [
		{ letter: /[\u0101]/g, alternative: "aa" },
		{ letter: /[\u0100]/g, alternative: "Aa" },
		{ letter: /[\u0113]/g, alternative: "ee" },
		{ letter: /[\u0112]/g, alternative: "Ee" },
		{ letter: /[\u012b]/g, alternative: "ii" },
		{ letter: /[\u012a]/g, alternative: "Ii" },
		{ letter: /[\u014d]/g, alternative: "oo" },
		{ letter: /[\u014c]/g, alternative: "Oo" },
		{ letter: /[\u016b]/g, alternative: "uu" },
		{ letter: /[\u016a]/g, alternative: "Uu" }
	],
	// Language: Mirandese.
	// Source: http://www.omniglot.com/writing/mirandese.htm
	mwl: [
		{ letter: /[\u00e7]/g, alternative: "c" },
		{ letter: /[\u00c7]/g, alternative: "C" },
		{ letter: /[\u00e1]/g, alternative: "a" },
		{ letter: /[\u00c1]/g, alternative: "A" },
		{ letter: /[\u00e9\u00ea]/g, alternative: "e" },
		{ letter: /[\u00c9\u00ca]/g, alternative: "E" },
		{ letter: /[\u00ed]/g, alternative: "i" },
		{ letter: /[\u00cd]/g, alternative: "I" },
		{ letter: /[\u00f3\u00f4]/g, alternative: "o" },
		{ letter: /[\u00d3\u00d4]/g, alternative: "O" },
		{ letter: /[\u00fa\u0169]/g, alternative: "u" },
		{ letter: /[\u00da\u0168]/g, alternative: "U" }
	],
	// Language: Occitan.
	// Sources: http://www.omniglot.com/writing/oromo.htm https://en.wikipedia.org/wiki/Occitan_alphabet
	oci: [
		{ letter: /[\u00e7]/g, alternative: "c" },
		{ letter: /[\u00c7]/g, alternative: "C" },
		{ letter: /[\u00e0\u00e1]/g, alternative: "a" },
		{ letter: /[\u00c0\u00c1]/g, alternative: "A" },
		{ letter: /[\u00e8\u00e9]/g, alternative: "e" },
		{ letter: /[\u00c8\u00c9]/g, alternative: "E" },
		{ letter: /[\u00ed\u00ef]/g, alternative: "i" },
		{ letter: /[\u00cd\u00cf]/g, alternative: "I" },
		{ letter: /[\u00f2\u00f3]/g, alternative: "o" },
		{ letter: /[\u00d2\u00d3]/g, alternative: "O" },
		{ letter: /[\u00fa\u00fc]/g, alternative: "u" },
		{ letter: /[\u00da\u00dc]/g, alternative: "U" },
		{ letter: /[\u00b7]/g, alternative: "" }
	],
	// Language: Oromo.
	// Source: http://www.omniglot.com/writing/occitan.htm
	orm: [
		{ letter: /[\u0027]/g, alternative: "" }
	],
	// Language: Portuguese.
	// Source: https://en.wikipedia.org/wiki/Portuguese_orthography http://www.omniglot.com/writing/portuguese.htm
	pt: [
		{ letter: /[\u00e7]/g, alternative: "c" },
		{ letter: /[\u00c7]/g, alternative: "C" },
		{ letter: /[\u00e1\u00e2\u00e3\u00e0]/g, alternative: "a" },
		{ letter: /[\u00c1\u00c2\u00c3\u00c0]/g, alternative: "A" },
		{ letter: /[\u00e9\u00ea]/g, alternative: "e" },
		{ letter: /[\u00c9\u00ca]/g, alternative: "E" },
		{ letter: /[\u00ed]/g, alternative: "i" },
		{ letter: /[\u00cd]/g, alternative: "I" },
		{ letter: /[\u00f3\u00f4\u00f5]/g, alternative: "o" },
		{ letter: /[\u00d3\u00d4\u00d5]/g, alternative: "O" },
		{ letter: /[\u00fa]/g, alternative: "u" },
		{ letter: /[\u00da]/g, alternative: "U" }
	],
	// Language: Romansh Vallader.
	// Source: https://en.wikipedia.org/wiki/Romansh_language#Orthography http://www.omniglot.com/writing/romansh.htm
	roh: [
		{ letter: /[\u00e9\u00e8\u00ea]/g, alternative: "e" },
		{ letter: /[\u00c9\u00c8\u00ca]/g, alternative: "E" },
		{ letter: /[\u00ef]/g, alternative: "i" },
		{ letter: /[\u00cf]/g, alternative: "I" },
		{ letter: /[\u00f6]/g, alternative: "oe" },
		{ letter: /[\u00d6]/g, alternative: "Oe" },
		{ letter: /[\u00fc]/g, alternative: "ue" },
		{ letter: /[\u00dc]/g, alternative: "Ue" },
		{ letter: /[\u00e4]/g, alternative: "ae" },
		{ letter: /[\u00c4]/g, alternative: "Ae" }
	],
	// Language: Aromanian.
	// Sources: https://en.wikipedia.org/wiki/Aromanian_alphabet http://www.omniglot.com/writing/aromanian.htm
	rup: [
		{ letter: /[\u00e3]/g, alternative: "a" },
		{ letter: /[\u00c3]/g, alternative: "A" }
	],
	// Language: Romanian.
	// Sources: http://forum.wordreference.com/threads/romanian-transliteration.3193544/#post-16161251
	// https://en.wikipedia.org/wiki/Romanian_alphabet http://www.omniglot.com/writing/romanian.htm
	ro: [
		{ letter: /[\u0103\u00e2]/g, alternative: "a" },
		{ letter: /[\u0102\u00c2]/g, alternative: "A" },
		{ letter: /[\u00ee]/g, alternative: "i" },
		{ letter: /[\u00ce]/g, alternative: "I" },
		{ letter: /[\u0219\u015f]/g, alternative: "s" },
		{ letter: /[\u0218\u015e]/g, alternative: "S" },
		{ letter: /[\u021b\u0163]/g, alternative: "t" },
		{ letter: /[\u021a\u0162]/g, alternative: "T" }
	],
	// Language: Klingon.
	// Sources: http://www.omniglot.com/conscripts/klingon.htm https://en.wikipedia.org/wiki/Klingon_language#Writing_systems
	// This translation module only works for Klingon written in Latin characters. KLI PlqaD script is not supported yet.
	tlh: [
		{ letter: /[\u2019\u0027]/g, alternative: "" }
	],
	// Language: Slovak.
	// Sources: https://en.wikipedia.org/wiki/Dz_(digraph) https://en.wikipedia.org/wiki/Slovak_orthography
	// http://www.omniglot.com/writing/slovak.htm
	sk: [
		{ letter: /[\u01c4]/g, alternative: "DZ" },
		{ letter: /[\u01c5]/g, alternative: "Dz" },
		{ letter: /[\u01c6]/g, alternative: "dz" },
		{ letter: /[\u00e1\u00e4]/g, alternative: "a" },
		{ letter: /[\u00c1\u00c4]/g, alternative: "A" },
		{ letter: /[\u010d]/g, alternative: "c" },
		{ letter: /[\u010c]/g, alternative: "C" },
		{ letter: /[\u010f]/g, alternative: "d" },
		{ letter: /[\u010e]/g, alternative: "D" },
		{ letter: /[\u00e9]/g, alternative: "e" },
		{ letter: /[\u00c9]/g, alternative: "E" },
		{ letter: /[\u00ed]/g, alternative: "i" },
		{ letter: /[\u00cd]/g, alternative: "I" },
		{ letter: /[\u013e\u013a]/g, alternative: "l" },
		{ letter: /[\u013d\u0139]/g, alternative: "L" },
		{ letter: /[\u0148]/g, alternative: "n" },
		{ letter: /[\u0147]/g, alternative: "N" },
		{ letter: /[\u00f3\u00f4]/g, alternative: "o" },
		{ letter: /[\u00d3\u00d4]/g, alternative: "O" },
		{ letter: /[\u0155]/g, alternative: "r" },
		{ letter: /[\u0154]/g, alternative: "R" },
		{ letter: /[\u0161]/g, alternative: "s" },
		{ letter: /[\u0160]/g, alternative: "S" },
		{ letter: /[\u0165]/g, alternative: "t" },
		{ letter: /[\u0164]/g, alternative: "T" },
		{ letter: /[\u00fa]/g, alternative: "u" },
		{ letter: /[\u00da]/g, alternative: "U" },
		{ letter: /[\u00fd]/g, alternative: "y" },
		{ letter: /[\u00dd]/g, alternative: "Y" },
		{ letter: /[\u017e]/g, alternative: "z" },
		{ letter: /[\u017d]/g, alternative: "Z" }
	],
	// Language: Slovenian.
	// Sources: https://en.wikipedia.org/wiki/Slovene_alphabet http://www.omniglot.com/writing/slovene.htm
	sl: [
		{ letter: /[\u010d\u0107]/g, alternative: "c" },
		{ letter: /[\u010c\u0106]/g, alternative: "C" },
		{ letter: /[\u0111]/g, alternative: "d" },
		{ letter: /[\u0110]/g, alternative: "D" },
		{ letter: /[\u0161]/g, alternative: "s" },
		{ letter: /[\u0160]/g, alternative: "S" },
		{ letter: /[\u017e]/g, alternative: "z" },
		{ letter: /[\u017d]/g, alternative: "Z" },
		{ letter: /[\u00e0\u00e1\u0203\u0201]/g, alternative: "a" },
		{ letter: /[\u00c0\u00c1\u0202\u0200]/g, alternative: "A" },
		{ letter: /[\u00e8\u00e9\u0207\u0205]/g, alternative: "e" },
		{ letter: /\u01dd\u0300/g, alternative: "e" },
		{ letter: /\u01dd\u030f/g, alternative: "e" },
		{ letter: /\u1eb9\u0301/g, alternative: "e" },
		{ letter: /\u1eb9\u0311/g, alternative: "e" },
		{ letter: /[\u00c8\u00c9\u0206\u0204]/g, alternative: "E" },
		{ letter: /\u018e\u030f/g, alternative: "E" },
		{ letter: /\u018e\u0300/g, alternative: "E" },
		{ letter: /\u1eb8\u0311/g, alternative: "E" },
		{ letter: /\u1eb8\u0301/g, alternative: "E" },
		{ letter: /[\u00ec\u00ed\u020b\u0209]/g, alternative: "i" },
		{ letter: /[\u00cc\u00cd\u020a\u0208]/g, alternative: "I" },
		{ letter: /[\u00f2\u00f3\u020f\u020d]/g, alternative: "o" },
		{ letter: /\u1ecd\u0311/g, alternative: "o" },
		{ letter: /\u1ecd\u0301/g, alternative: "o" },
		{ letter: /\u1ecc\u0311/g, alternative: "O" },
		{ letter: /\u1ecc\u0301/g, alternative: "O" },
		{ letter: /[\u00d2\u00d3\u020e\u020c]/g, alternative: "O" },
		{ letter: /[\u00f9\u00fa\u0217\u0215]/g, alternative: "u" },
		{ letter: /[\u00d9\u00da\u0216\u0214]/g, alternative: "U" },
		{ letter: /[\u0155\u0213]/g, alternative: "r" },
		{ letter: /[\u0154\u0212]/g, alternative: "R" }
	],
	// Language: Albanian.
	// Sources: https://en.wikipedia.org/wiki/Albanian_alphabet http://www.omniglot.com/writing/albanian.htm
	sq: [
		{ letter: /[\u00e7]/g, alternative: "c" },
		{ letter: /[\u00c7]/g, alternative: "C" },
		{ letter: /[\u00eb]/g, alternative: "e" },
		{ letter: /[\u00cb]/g, alternative: "E" }
	],
	// Language: Hungarian.
	// Sources: http://forum.wordreference.com/threads/hungarian-transliteration.3193022/#post-16166901
	// http://www.omniglot.com/writing/hungarian.htm
	hu: [
		{ letter: /[\u00e1]/g, alternative: "a" },
		{ letter: /[\u00c1]/g, alternative: "A" },
		{ letter: /[\u00e9]/g, alternative: "e" },
		{ letter: /[\u00c9]/g, alternative: "E" },
		{ letter: /[\u00ed]/g, alternative: "i" },
		{ letter: /[\u00cd]/g, alternative: "I" },
		{ letter: /[\u00f3\u00f6\u0151]/g, alternative: "o" },
		{ letter: /[\u00d3\u00d6\u0150]/g, alternative: "O" },
		{ letter: /[\u00fa\u00fc\u0171]/g, alternative: "u" },
		{ letter: /[\u00da\u00dc\u0170]/g, alternative: "U" }
	],
	// Language: Sardinian.
	// Sources: http://www.omniglot.com/writing/sardinian.htm https://en.wikipedia.org/wiki/Sardinian_language
	srd: [
		{ letter: /[\u00e7]/g, alternative: "c" },
		{ letter: /[\u00c7]/g, alternative: "C" },
		{ letter: /[\u00e0\u00e1]/g, alternative: "a" },
		{ letter: /[\u00c0\u00c1]/g, alternative: "A" },
		{ letter: /[\u00e8\u00e9]/g, alternative: "e" },
		{ letter: /[\u00c8\u00c9]/g, alternative: "E" },
		{ letter: /[\u00ed\u00ef]/g, alternative: "i" },
		{ letter: /[\u00cd\u00cf]/g, alternative: "I" },
		{ letter: /[\u00f2\u00f3]/g, alternative: "o" },
		{ letter: /[\u00d2\u00d3]/g, alternative: "O" },
		{ letter: /[\u00fa\u00f9]/g, alternative: "u" },
		{ letter: /[\u00da\u00d9]/g, alternative: "U" }
	],
	// Language: Silesian.
	// Source: https://en.wikipedia.org/wiki/Silesian_language#Writing_system
	szl: [
		{ letter: /[\u0107]/g, alternative: "c" },
		{ letter: /[\u0106]/g, alternative: "C" },
		{ letter: /[\u00e3]/g, alternative: "a" },
		{ letter: /[\u00c3]/g, alternative: "A" },
		{ letter: /[\u0142]/g, alternative: "u" },
		{ letter: /[\u0141]/g, alternative: "U" },
		{ letter: /[\u006e]/g, alternative: "n" },
		{ letter: /[\u004e]/g, alternative: "N" },
		{ letter: /[\u014f\u014d\u00f4\u00f5]/g, alternative: "o" },
		{ letter: /[\u014e\u014c\u00d4\u00d5]/g, alternative: "O" },
		{ letter: /[\u015b]/g, alternative: "s" },
		{ letter: /[\u015a]/g, alternative: "S" },
		{ letter: /[\u017a\u017c\u017e]/g, alternative: "z" },
		{ letter: /[\u0179\u017b\u017d]/g, alternative: "Z" },
		{ letter: /[\u016f]/g, alternative: "u" },
		{ letter: /[\u016e]/g, alternative: "U" },
		{ letter: /[\u010d]/g, alternative: "cz" },
		{ letter: /[\u010c]/g, alternative: "Cz" },
		{ letter: /[\u0159]/g, alternative: "rz" },
		{ letter: /[\u0158]/g, alternative: "Rz" },
		{ letter: /[\u0161]/g, alternative: "sz" },
		{ letter: /[\u0160]/g, alternative: "Sz" }
	],
	// Language: Tahitian.
	// Sources: https://en.wikipedia.org/wiki/Tahitian_language#Phonology http://www.omniglot.com/writing/tahitian.htm
	tah: [
		{ letter: /[\u0101\u00e2\u00e0]/g, alternative: "a" },
		{ letter: /[\u0100\u00c2\u00c0]/g, alternative: "A" },
		{ letter: /[\u00ef\u00ee\u00ec]/g, alternative: "i" },
		{ letter: /[\u00cf\u00ce\u00cc]/g, alternative: "I" },
		{ letter: /[\u0113\u00ea\u00e9]/g, alternative: "e" },
		{ letter: /[\u0112\u00ca\u00c9]/g, alternative: "E" },
		{ letter: /[\u016b\u00fb\u00fa]/g, alternative: "u" },
		{ letter: /[\u016a\u00db\u00da]/g, alternative: "U" },
		{ letter: /[\u00e7]/g, alternative: "c" },
		{ letter: /[\u00c7]/g, alternative: "C" },
		{ letter: /[\u00f2\u00f4\u014d]/g, alternative: "o" },
		{ letter: /[\u00d2\u00d4\u014c]/g, alternative: "O" },
		{ letter: /[\u2019\u0027\u2018]/g, alternative: "" }
	],
	// Language: Venetian.
	// Sources: http://www.omniglot.com/writing/venetian.htm https://en.wikipedia.org/wiki/Venetian_language#Spelling_systems
	// http://www.venipedia.org/wiki/index.php?title=Venetian_Language
	vec: [
		{ letter: /\u0073\u002d\u0063/g, alternative: "sc" },
		{ letter: /\u0053\u002d\u0043/g, alternative: "SC" },
		{ letter: /\u0073\u0027\u0063/g, alternative: "sc" },
		{ letter: /\u0053\u0027\u0043/g, alternative: "SC" },
		{ letter: /\u0073\u2019\u0063/g, alternative: "sc" },
		{ letter: /\u0053\u2019\u0043/g, alternative: "SC" },
		{ letter: /\u0073\u2018\u0063/g, alternative: "sc" },
		{ letter: /\u0053\u2018\u0043/g, alternative: "SC" },
		{ letter: /\u0053\u002d\u0063/g, alternative: "Sc" },
		{ letter: /\u0053\u0027\u0063/g, alternative: "Sc" },
		{ letter: /\u0053\u2019\u0063/g, alternative: "Sc" },
		{ letter: /\u0053\u2018\u0063/g, alternative: "Sc" },
		{ letter: /\u0063\u2019/g, alternative: "c" },
		{ letter: /\u0043\u2019/g, alternative: "C" },
		{ letter: /\u0063\u2018/g, alternative: "c" },
		{ letter: /\u0043\u2018/g, alternative: "C" },
		{ letter: /\u0063\u0027/g, alternative: "c" },
		{ letter: /\u0043\u0027/g, alternative: "C" },
		{ letter: /[\u00e0\u00e1\u00e2]/g, alternative: "a" },
		{ letter: /[\u00c0\u00c1\u00c2]/g, alternative: "A" },
		{ letter: /[\u00e8\u00e9]/g, alternative: "e" },
		{ letter: /[\u00c8\u00c9]/g, alternative: "E" },
		{ letter: /[\u00f2\u00f3]/g, alternative: "o" },
		{ letter: /[\u00d2\u00d3]/g, alternative: "O" },
		{ letter: /[\u00f9\u00fa]/g, alternative: "u" },
		{ letter: /[\u00d9\u00da]/g, alternative: "U" },
		{ letter: /[\u00e7\u010d\u010b]/g, alternative: "c" },
		{ letter: /[\u00c7\u010c\u010a]/g, alternative: "C" },
		{ letter: /[\u0142]/g, alternative: "l" },
		{ letter: /[\u00a3\u0141]/g, alternative: "L" },
		{ letter: /\ud835\udeff/g, alternative: "dh" },
		{ letter: /[\u0111\u03b4]/g, alternative: "dh" },
		{ letter: /[\u0110\u0394]/g, alternative: "Dh" }
	],
	// Language: Walloon.
	// Sources: http://www.omniglot.com/writing/walloon.htm https://en.wikipedia.org/wiki/Walloon_alphabet
	wa: [
		{ letter: /[\u00e2\u00e5]/g, alternative: "a" },
		{ letter: /[\u00c2\u00c5]/g, alternative: "A" },
		{ letter: /[\u00e7]/g, alternative: "c" },
		{ letter: /[\u00c7]/g, alternative: "C" },
		{ letter: /\u0065\u030a/g, alternative: "e" },
		{ letter: /\u0045\u030a/g, alternative: "E" },
		{ letter: /[\u00eb\u00ea\u00e8\u00e9]/g, alternative: "e" },
		{ letter: /[\u00c9\u00c8\u00ca\u00cb]/g, alternative: "E" },
		{ letter: /[\u00ee]/g, alternative: "i" },
		{ letter: /[\u00ce]/g, alternative: "I" },
		{ letter: /[\u00f4\u00f6]/g, alternative: "o" },
		{ letter: /[\u00d6\u00d4]/g, alternative: "O" },
		{ letter: /[\u00fb]/g, alternative: "u" },
		{ letter: /[\u00db]/g, alternative: "U" }
	],
	// Language: Yoruba.
	// Sources: http://www.omniglot.com/writing/yoruba.htm https://en.wikipedia.org/wiki/Yoruba_language
	yor: [
		{ letter: /[\u00e1\u00e0]/g, alternative: "a" },
		{ letter: /[\u00c1\u00c0]/g, alternative: "A" },
		{ letter: /[\u00ec\u00ed]/g, alternative: "i" },
		{ letter: /[\u00cc\u00cd]/g, alternative: "I" },
		{ letter: /\u1ecd\u0301/g, alternative: "o" },
		{ letter: /\u1ecc\u0301/g, alternative: "O" },
		{ letter: /\u1ecd\u0300/g, alternative: "o" },
		{ letter: /\u1ecc\u0300/g, alternative: "O" },
		{ letter: /[\u00f3\u00f2\u1ecd]/g, alternative: "o" },
		{ letter: /[\u00d3\u00d2\u1ecc]/g, alternative: "O" },
		{ letter: /[\u00fa\u00f9]/g, alternative: "u" },
		{ letter: /[\u00da\u00d9]/g, alternative: "U" },
		{ letter: /\u1eb9\u0301/g, alternative: "e" },
		{ letter: /\u1eb8\u0301/g, alternative: "E" },
		{ letter: /\u1eb9\u0300/g, alternative: "e" },
		{ letter: /\u1eb8\u0300/g, alternative: "E" },
		{ letter: /[\u00e9\u00e8\u1eb9]/g, alternative: "e" },
		{ letter: /[\u00c9\u00c8\u1eb8]/g, alternative: "E" },
		{ letter: /[\u1e63]/g, alternative: "s" },
		{ letter: /[\u1e62]/g, alternative: "S" }
	]
};

/**
 * The function returning an array containing transliteration objects, based on the given locale.
 *
 * @param {string} locale The locale.
 * @returns {Array} An array containing transliteration objects.
 */
module.exports = function( locale ) {
	if ( isUndefined( locale ) ) {
		return [];
	}
	switch( getLanguage( locale ) ) {
		case "es":
			return transliterations.es;
		case "pl":
			return transliterations.pl;
		case "de":
			return transliterations.de;
		case "nb":
		case "nn":
			return transliterations.nbnn;
		case "sv":
			return transliterations.sv;
		case "fi":
			return transliterations.fi;
		case "da":
			return transliterations.da;
		case "tr":
			return transliterations.tr;
		case "lv":
			return transliterations.lv;
		case "is":
			return transliterations.is;
		case "fa":
			return transliterations.fa;
		case "cs":
			return transliterations.cs;
		case "ru":
			return transliterations.ru;
		case "eo":
			return transliterations.eo;
		case "af":
			return transliterations.af;
		case "bal":
		case "ca":
			return transliterations.ca;
		case "ast":
			return transliterations.ast;
		case "an":
			return transliterations.an;
		case "ay":
			return transliterations.ay;
		case "en":
			return transliterations.en;
		case "fr":
			return transliterations.fr;
		case "it":
			return transliterations.it;
		case "nl":
			return transliterations.nl;
		case "bm":
			return transliterations.bm;
		case "uk":
			return transliterations.uk;
		case "br":
			return transliterations.br;
		case "ch":
			return transliterations.ch;
		case "csb":
			return transliterations.csb;
		case "cy":
			return transliterations.cy;
		case "ee":
			return transliterations.ee;
		case "et":
			return transliterations.et;
		case "eu":
			return transliterations.eu;
		case "fuc":
			return transliterations.fuc;
		case "fj":
			return transliterations.fj;
		case "frp":
			return transliterations.frp;
		case "fur":
			return transliterations.fur;
		case "fy":
			return transliterations.fy;
		case "ga":
			return transliterations.ga;
		case "gd":
			return transliterations.gd;
		case "gl":
			return transliterations.gl;
		case "gn":
			return transliterations.gn;
		case "gsw":
			return transliterations.gsw;
		case "hat":
			return transliterations.hat;
		case "haw":
			return transliterations.haw;
		case "hr":
			return transliterations.hr;
		case "ka":
			return transliterations.ka;
		case "kal":
			return transliterations.kal;
		case "kin":
			return transliterations.kin;
		case "lb":
			return transliterations.lb;
		case "li":
			return transliterations.li;
		case "lin":
			return transliterations.lin;
		case "lt":
			return transliterations.lt;
		case "mg":
			return transliterations.mg;
		case "mk":
			return transliterations.mk;
		case "mri":
			return transliterations.mri;
		case "mwl":
			return transliterations.mwl;
		case "oci":
			return transliterations.oci;
		case "orm":
			return transliterations.orm;
		case "pt":
			return transliterations.pt;
		case "roh":
			return transliterations.roh;
		case "rup":
			return transliterations.rup;
		case "ro":
			return transliterations.ro;
		case "tlh":
			return transliterations.tlh;
		case "sk":
			return transliterations.sk;
		case "sl":
			return transliterations.sl;
		case "sq":
			return transliterations.sq;
		case "hu":
			return transliterations.hu;
		case "srd":
			return transliterations.srd;
		case "szl":
			return transliterations.szl;
		case "tah":
			return transliterations.tah;
		case "vec":
			return transliterations.vec;
		case "wa":
			return transliterations.wa;
		case "yor":
			return transliterations.yor;
		default:
			return [];
	}
};

},{"../helpers/getLanguage.js":34,"lodash/isUndefined":290}],28:[function(require,module,exports){
module.exports = function() {
	return [
		// Whitespace is always a word boundary.
		" ", "\\n", "\\r", "\\t",
		// NO-BREAK SPACE.
		"\u00a0",
		" ",

		".", ",", "'", "(", ")", "\"", "+", "-", ";", "!", "?", ":", "/", "»", "«", "‹", "›", "<", ">" ];
};

},{}],29:[function(require,module,exports){
/**
 * Throws an invalid type error
 * @param {string} message The message to show when the error is thrown
 * @returns {void}
 */
module.exports = function InvalidTypeError( message ) {
	Error.captureStackTrace( this, this.constructor );
	this.name = this.constructor.name;
	this.message = message;
};

require( "util" ).inherits( module.exports, Error );

},{"util":324}],30:[function(require,module,exports){
module.exports = function MissingArgumentError( message ) {
	Error.captureStackTrace( this, this.constructor );
	this.name = this.constructor.name;
	this.message = message;
};

require( "util" ).inherits( module.exports, Error );

},{"util":324}],31:[function(require,module,exports){
var isUndefined = require( "lodash/isUndefined" );

/**
 * Shows and error trace of the error message in the console if the console is available.
 *
 * @param {string} [errorMessage=""] The error message.
 */
function showTrace( errorMessage ) {
	if ( isUndefined( errorMessage ) ) {
		errorMessage = "";
	}

	if (
		! isUndefined( console ) &&
		! isUndefined( console.trace )
	) {
		console.trace( errorMessage );
	}
}

module.exports = {
	showTrace: showTrace,
};

},{"lodash/isUndefined":290}],32:[function(require,module,exports){
/**
 * Returns rounded number to fix floating point bug http://floating-point-gui.de
 * @param {number} number The unrounded number
 * @returns {number} Rounded number
 */
module.exports = function( number ) {
	if ( Math.round( number ) === number ) {
		return Math.round( number );
	}

	return Math.round( number * 10 ) / 10;
};

},{}],33:[function(require,module,exports){
var firstWordExceptionsEnglish = require( "../researches/english/firstWordExceptions.js" );
var firstWordExceptionsGerman = require( "../researches/german/firstWordExceptions.js" );
var firstWordExceptionsSpanish = require( "../researches/spanish/firstWordExceptions.js" );
var firstWordExceptionsFrench = require( "../researches/french/firstWordExceptions.js" );

var getLanguage = require( "./getLanguage.js" );

module.exports = function( locale ) {
	switch( getLanguage( locale ) ) {
		case "de":
			return firstWordExceptionsGerman;
		case "fr":
			return firstWordExceptionsFrench;
		case "es":
			return firstWordExceptionsSpanish;
		default:
		case "en":
			return firstWordExceptionsEnglish;
	}
};

},{"../researches/english/firstWordExceptions.js":47,"../researches/french/firstWordExceptions.js":58,"../researches/german/firstWordExceptions.js":61,"../researches/spanish/firstWordExceptions.js":82,"./getLanguage.js":34}],34:[function(require,module,exports){
/**
 * The function getting the language part of the locale.
 *
 * @param {string} locale The locale.
 * @returns {string} The language part of the locale.
 */
module.exports = function( locale ) {
	return locale.split( "_" )[ 0 ];
};

},{}],35:[function(require,module,exports){
var transitionWordsEnglish = require( "../researches/english/transitionWords.js" );
var twoPartTransitionWordsEnglish = require( "../researches/english/twoPartTransitionWords.js" );
var transitionWordsGerman = require( "../researches/german/transitionWords.js" );
var twoPartTransitionWordsGerman = require( "../researches/german/twoPartTransitionWords.js" );
var transitionWordsFrench = require( "../researches/french/transitionWords.js" );
var twoPartTransitionWordsFrench = require( "../researches/french/twoPartTransitionWords.js" );
var transitionWordsSpanish = require( "../researches/spanish/transitionWords.js" );
var twoPartTransitionWordsSpanish = require( "../researches/spanish/twoPartTransitionWords.js" );

var getLanguage = require( "./getLanguage.js" );

module.exports = function( locale ) {
	switch( getLanguage( locale ) ) {
		case "de":
			return {
				transitionWords: transitionWordsGerman,
				twoPartTransitionWords: twoPartTransitionWordsGerman,
			};
		case "es":
			return {
				transitionWords: transitionWordsSpanish,
				twoPartTransitionWords: twoPartTransitionWordsSpanish,
			};
		case "fr":
			return {
				transitionWords: transitionWordsFrench,
				twoPartTransitionWords: twoPartTransitionWordsFrench,
			};
		default:
		case "en":
			return {
				transitionWords: transitionWordsEnglish,
				twoPartTransitionWords: twoPartTransitionWordsEnglish,
			};
	}
};

},{"../researches/english/transitionWords.js":53,"../researches/english/twoPartTransitionWords.js":54,"../researches/french/transitionWords.js":59,"../researches/french/twoPartTransitionWords.js":60,"../researches/german/transitionWords.js":62,"../researches/german/twoPartTransitionWords.js":63,"../researches/spanish/transitionWords.js":83,"../researches/spanish/twoPartTransitionWords.js":84,"./getLanguage.js":34}],36:[function(require,module,exports){
var blockElements = [ "address", "article", "aside", "blockquote", "canvas", "dd", "div", "dl", "fieldset", "figcaption",
	"figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "header", "hgroup", "hr", "li", "main", "nav",
	"noscript", "ol", "output", "p", "pre", "section", "table", "tfoot", "ul", "video" ];
var inlineElements = [ "b", "big", "i", "small", "tt", "abbr", "acronym", "cite", "code", "dfn", "em", "kbd", "strong",
	"samp", "time", "var", "a", "bdo", "br", "img", "map", "object", "q", "script", "span", "sub", "sup", "button",
	"input", "label", "select", "textarea" ];

var blockElementsRegex = new RegExp( "^(" + blockElements.join( "|" ) + ")$", "i" );
var inlineElementsRegex = new RegExp( "^(" + inlineElements.join( "|" ) + ")$", "i" );

var blockElementStartRegex = new RegExp( "^<(" + blockElements.join( "|" ) + ")[^>]*?>$", "i" );
var blockElementEndRegex = new RegExp( "^</(" + blockElements.join( "|" ) + ")[^>]*?>$", "i" );

var inlineElementStartRegex = new RegExp( "^<(" + inlineElements.join( "|" ) + ")[^>]*>$", "i" );
var inlineElementEndRegex = new RegExp( "^</(" + inlineElements.join( "|" ) + ")[^>]*>$", "i" );

var otherElementStartRegex = /^<([^>\s\/]+)[^>]*>$/;
var otherElementEndRegex = /^<\/([^>\s]+)[^>]*>$/;

var contentRegex = /^[^<]+$/;
var greaterThanContentRegex = /^<[^><]*$/;

var commentRegex = /<!--(.|[\r\n])*?-->/g;

var core = require( "tokenizer2/core" );
var forEach = require( "lodash/forEach" );
var memoize = require( "lodash/memoize" );

var tokens = [];
var htmlBlockTokenizer;

/**
 * Creates a tokenizer to tokenize HTML into blocks.
 */
function createTokenizer() {
	tokens = [];

	htmlBlockTokenizer = core( function( token ) {
		tokens.push( token );
	} );

	htmlBlockTokenizer.addRule( contentRegex, "content" );
	htmlBlockTokenizer.addRule( greaterThanContentRegex, "greater-than-sign-content" );

	htmlBlockTokenizer.addRule( blockElementStartRegex, "block-start" );
	htmlBlockTokenizer.addRule( blockElementEndRegex, "block-end" );
	htmlBlockTokenizer.addRule( inlineElementStartRegex, "inline-start" );
	htmlBlockTokenizer.addRule( inlineElementEndRegex, "inline-end" );

	htmlBlockTokenizer.addRule( otherElementStartRegex, "other-element-start" );
	htmlBlockTokenizer.addRule( otherElementEndRegex, "other-element-end" );
}

/**
 * Returns whether or not the given element name is a block element.
 *
 * @param {string} htmlElementName The name of the HTML element.
 * @returns {boolean} Whether or not it is a block element.
 */
function isBlockElement( htmlElementName ) {
	return blockElementsRegex.test( htmlElementName );
}

/**
 * Returns whether or not the given element name is an inline element.
 *
 * @param {string} htmlElementName The name of the HTML element.
 * @returns {boolean} Whether or not it is an inline element.
 */
function isInlineElement( htmlElementName ) {
	return inlineElementsRegex.test( htmlElementName );
}

/**
 * Splits a text into blocks based on HTML block elements.
 *
 * @param {string} text The text to split.
 * @returns {Array} A list of blocks based on HTML block elements.
 */
function getBlocks( text ) {
	var blocks = [], depth = 0,
		blockStartTag = "",
		currentBlock = "",
		blockEndTag = "";

	// Remove all comments because it is very hard to tokenize them.
	text = text.replace( commentRegex, "" );

	createTokenizer();
	htmlBlockTokenizer.onText( text );

	htmlBlockTokenizer.end();

	forEach( tokens, function( token, i ) {
		var nextToken = tokens[ i + 1 ];

		switch ( token.type ) {

			case "content":
			case "greater-than-sign-content":
			case "inline-start":
			case "inline-end":
			case "other-tag":
			case "other-element-start":
			case "other-element-end":
			case "greater than sign":
				if ( ! nextToken || ( depth === 0 && ( nextToken.type === "block-start" || nextToken.type === "block-end" ) ) ) {
					currentBlock += token.src;

					blocks.push( currentBlock );
					blockStartTag = "";
					currentBlock = "";
					blockEndTag = "";
				} else {
					currentBlock += token.src;
				}
				break;

			case "block-start":
				if ( depth !== 0 ) {
					if ( currentBlock.trim() !== "" ) {
						blocks.push( currentBlock );
					}
					currentBlock = "";
					blockEndTag = "";
				}

				depth++;
				blockStartTag = token.src;
				break;

			case "block-end":
				depth--;
				blockEndTag = token.src;

				/*
				 * We try to match the most deep blocks so discard any other blocks that have been started but not
				 * finished.
				 */
				if ( "" !== blockStartTag && "" !== blockEndTag ) {
					blocks.push( blockStartTag + currentBlock + blockEndTag );
				} else if ( "" !== currentBlock.trim() ) {
					blocks.push( currentBlock );
				}
				blockStartTag = "";
				currentBlock = "";
				blockEndTag = "";
				break;
		}

		// Handles HTML with too many closing tags.
		if ( depth < 0 ) {
			depth = 0;
		}
	} );

	return blocks;
}

module.exports = {
	blockElements: blockElements,
	inlineElements: inlineElements,
	isBlockElement: isBlockElement,
	isInlineElement: isInlineElement,
	getBlocks: memoize( getBlocks ),
};

},{"lodash/forEach":267,"lodash/memoize":295,"tokenizer2/core":310}],37:[function(require,module,exports){
/**
 * Checks if `n` is between `start` and up to, but not including, `start`.
 *
 * @param {number} number The number to check.
 * @param {number} start The start of the range.
 * @param {number} end The end of the range.
 * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
 */
function inRangeEndInclusive( number, start, end ) {
	return number > start && number <= end;
}

/**
 * Checks if `n` is between `start` and up to, but not including, `end`.
 *
 * @param {number} number The number to check.
 * @param {number} start The start of the range.
 * @param {number} end The end of the range.
 * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
 */
function inRangeStartInclusive( number, start, end ) {
	return number >= start && number < end;
}

/**
 * Checks if `n` is between `start` and up to, but not including, `start`.
 *
 * @param {number} number The number to check.
 * @param {number} start The start of the range.
 * @param {number} end The end of the range.
 * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
 */
function inRange( number, start, end ) {
	return inRangeEndInclusive( number, start, end );
}

module.exports = {
	inRange: inRange,
	inRangeStartInclusive: inRangeStartInclusive,
	inRangeEndInclusive: inRangeEndInclusive,
};

},{}],38:[function(require,module,exports){
var SyllableCountStep = require( "./syllableCountStep.js" );

var isUndefined = require( "lodash/isUndefined" );
var forEach = require( "lodash/forEach" );

/**
 * Creates a syllable count iterator.
 *
 * @param {object} config The config object containing an array with syllable exclusions.
 * @constructor
 */
var SyllableCountIterator = function( config ) {
	this.countSteps = [];
	if ( ! isUndefined( config ) ) {
		this.createSyllableCountSteps( config.deviations.vowels );
	}
};

/**
 * Creates a syllable count step object for each exclusion.
 *
 * @param {object} syllableCounts The object containing all exclusion syllables including the multipliers.
 */
SyllableCountIterator.prototype.createSyllableCountSteps = function( syllableCounts ) {
	forEach( syllableCounts, function( syllableCountStep ) {
		this.countSteps.push( new SyllableCountStep( syllableCountStep ) );
	}.bind( this ) );
};

/**
 * Returns all available count steps.
 *
 * @returns {Array} All available count steps.
 */
SyllableCountIterator.prototype.getAvailableSyllableCountSteps = function() {
	return this.countSteps;
};

/**
 * Counts the syllables for all the steps and returns the total syllable count.
 *
 * @param {String} word The word to count syllables in.
 * @returns {number} The number of syllables found based on exclusions.
 */
SyllableCountIterator.prototype.countSyllables = function( word ) {
	var syllableCount = 0;
	forEach( this.countSteps, function( step ) {
		syllableCount += step.countSyllables( word );
	} );
	return syllableCount;
};

module.exports = SyllableCountIterator;

},{"./syllableCountStep.js":39,"lodash/forEach":267,"lodash/isUndefined":290}],39:[function(require,module,exports){
var isUndefined = require( "lodash/isUndefined" );

var arrayToRegex = require( "../stringProcessing/createRegexFromArray.js" );

/**
 * Constructs a language syllable regex that contains a regex for matching syllable exclusion.
 *
 * @param {object} syllableRegex The object containing the syllable exclusions.
 * @constructor
 */
var SyllableCountStep = function( syllableRegex ) {
	this._hasRegex = false;
	this._regex = "";
	this._multiplier = "";
	this.createRegex( syllableRegex );
};

/**
 * Returns if a valid regex has been set.
 *
 * @returns {boolean} True if a regex has been set, false if not.
 */
SyllableCountStep.prototype.hasRegex = function() {
	return this._hasRegex;
};

/**
 * Creates a regex based on the given syllable exclusions, and sets the multiplier to use.
 *
 * @param {object} syllableRegex The object containing the syllable exclusions and multiplier.
 */
SyllableCountStep.prototype.createRegex = function( syllableRegex ) {
	if ( ! isUndefined( syllableRegex ) && ! isUndefined( syllableRegex.fragments ) ) {
		this._hasRegex = true;
		this._regex = arrayToRegex( syllableRegex.fragments, true );
		this._multiplier = syllableRegex.countModifier;
	}
};

/**
 * Returns the stored regular expression.
 *
 * @returns {RegExp} The stored regular expression.
 */
SyllableCountStep.prototype.getRegex = function() {
	return this._regex;
};

/**
 * Matches syllable exclusions in a given word and the returns the number found multiplied with the
 * given multiplier.
 *
 * @param {String} word The word to match for syllable exclusions.
 * @returns {number} The amount of syllables found.
 */
SyllableCountStep.prototype.countSyllables = function( word ) {
	if ( this._hasRegex ) {
		var match = word.match( this._regex ) || [];
		return match.length * this._multiplier;
	}
	return 0;
};

module.exports = SyllableCountStep;

},{"../stringProcessing/createRegexFromArray.js":95,"lodash/isUndefined":290}],40:[function(require,module,exports){
/**
 * Marks a text with HTML tags
 *
 * @param {string} text The unmarked text.
 * @returns {string} The marked text.
 */
module.exports = function( text ) {
	return "<yoastmark class='yoast-text-mark'>" + text + "</yoastmark>";
};

},{}],41:[function(require,module,exports){
var uniqBy = require( "lodash/uniqBy" );

/**
 * Removes duplicate marks from an array
 *
 * @param {Array} marks The marks to remove duplications from
 * @returns {Array} A list of de-duplicated marks.
 */
function removeDuplicateMarks( marks ) {
	return uniqBy( marks, function( mark ) {
		return mark.getOriginal();
	} );
}

module.exports = removeDuplicateMarks;

},{"lodash/uniqBy":308}],42:[function(require,module,exports){
var merge = require( "lodash/merge" );
var InvalidTypeError = require( "./errors/invalidType" );
var MissingArgument = require( "./errors/missingArgument" );
var isUndefined = require( "lodash/isUndefined" );
var isEmpty = require( "lodash/isEmpty" );

// Researches
var wordCountInText = require( "./researches/wordCountInText.js" );
var getLinkStatistics = require( "./researches/getLinkStatistics.js" );
var linkCount = require( "./researches/countLinks.js" );
var urlLength = require( "./researches/urlIsTooLong.js" );
var findKeywordInPageTitle = require( "./researches/findKeywordInPageTitle.js" );
var matchKeywordInSubheadings = require( "./researches/matchKeywordInSubheadings.js" );
var getKeywordDensity = require( "./researches/getKeywordDensity.js" );
var stopWordsInKeyword = require( "./researches/stopWordsInKeyword" );
var stopWordsInUrl = require( "./researches/stopWordsInUrl" );
var calculateFleschReading = require( "./researches/calculateFleschReading.js" );
var metaDescriptionLength = require( "./researches/metaDescriptionLength.js" );
var imageCount = require( "./researches/imageCountInText.js" );
var altTagCount = require( "./researches/imageAltTags.js" );
var keyphraseLength = require( "./researches/keyphraseLength" );
var metaDescriptionKeyword = require( "./researches/metaDescriptionKeyword.js" );
var keywordCountInUrl = require( "./researches/keywordCountInUrl" );
var findKeywordInFirstParagraph = require( "./researches/findKeywordInFirstParagraph.js" );
var pageTitleWidth = require( "./researches/pageTitleWidth.js" );
var wordComplexity = require( "./researches/getWordComplexity.js" );
var getParagraphLength = require( "./researches/getParagraphLength.js" );
var countSentencesFromText = require( "./researches/countSentencesFromText.js" );
var countSentencesFromDescription = require( "./researches/countSentencesFromDescription.js" );
var getSubheadingLength = require( "./researches/getSubheadingLength.js" );
var getSubheadingTextLengths = require( "./researches/getSubheadingTextLengths.js" );
var getSubheadingPresence = require( "./researches/getSubheadingPresence.js" );
var findTransitionWords = require( "./researches/findTransitionWords.js" );
var passiveVoice = require( "./researches/getPassiveVoice.js" );
var getSentenceBeginnings = require( "./researches/getSentenceBeginnings.js" );

/**
 * This contains all possible, default researches.
 * @param {Paper} paper The Paper object that is needed within the researches.
 * @constructor
 * @throws {InvalidTypeError} Parameter needs to be an instance of the Paper object.
 */
var Researcher = function( paper ) {
	this.setPaper( paper );

	this.defaultResearches = {
		urlLength: urlLength,
		wordCountInText: wordCountInText,
		findKeywordInPageTitle: findKeywordInPageTitle,
		calculateFleschReading: calculateFleschReading,
		getLinkStatistics: getLinkStatistics,
		linkCount: linkCount,
		imageCount: imageCount,
		altTagCount: altTagCount,
		matchKeywordInSubheadings: matchKeywordInSubheadings,
		getKeywordDensity: getKeywordDensity,
		stopWordsInKeyword: stopWordsInKeyword,
		stopWordsInUrl: stopWordsInUrl,
		metaDescriptionLength: metaDescriptionLength,
		keyphraseLength: keyphraseLength,
		keywordCountInUrl: keywordCountInUrl,
		firstParagraph: findKeywordInFirstParagraph,
		metaDescriptionKeyword: metaDescriptionKeyword,
		pageTitleWidth: pageTitleWidth,
		wordComplexity: wordComplexity,
		getParagraphLength: getParagraphLength,
		countSentencesFromText: countSentencesFromText,
		countSentencesFromDescription: countSentencesFromDescription,
		getSubheadingLength: getSubheadingLength,
		getSubheadingTextLengths: getSubheadingTextLengths,
		getSubheadingPresence: getSubheadingPresence,
		findTransitionWords: findTransitionWords,
		passiveVoice: passiveVoice,
		getSentenceBeginnings: getSentenceBeginnings,
	};

	this.customResearches = {};
};

/**
 * Set the Paper associated with the Researcher.
 * @param {Paper} paper The Paper to use within the Researcher
 * @throws {InvalidTypeError} Parameter needs to be an instance of the Paper object.
 * @returns {void}
 */
Researcher.prototype.setPaper = function( paper ) {
	this.paper = paper;
};

/**
 * Add a custom research that will be available within the Researcher.
 * @param {string} name A name to reference the research by.
 * @param {function} research The function to be added to the Researcher.
 * @throws {MissingArgument} Research name cannot be empty.
 * @throws {InvalidTypeError} The research requires a valid Function callback.
 * @returns {void}
 */
Researcher.prototype.addResearch = function( name, research ) {
	if ( isUndefined( name ) || isEmpty( name ) ) {
		throw new MissingArgument( "Research name cannot be empty" );
	}

	if ( ! ( research instanceof Function ) ) {
		throw new InvalidTypeError( "The research requires a Function callback." );
	}

	this.customResearches[ name ] = research;
};

/**
 * Check wheter or not the research is known by the Researcher.
 * @param {string} name The name to reference the research by.
 * @returns {boolean} Whether or not the research is known by the Researcher
 */
Researcher.prototype.hasResearch = function( name ) {
	return Object.keys( this.getAvailableResearches() ).filter(
	function( research ) {
		return research === name;
	} ).length > 0;
};

/**
 * Return all available researches.
 * @returns {Object} An object containing all available researches.
 */
Researcher.prototype.getAvailableResearches = function() {
	return merge( this.defaultResearches, this.customResearches );
};

/**
 * Return the Research by name.
 * @param {string} name The name to reference the research by.
 * @returns {*} Returns the result of the research or false if research does not exist.
 * @throws {MissingArgument} Research name cannot be empty.
 */
Researcher.prototype.getResearch = function( name ) {
	if ( isUndefined( name ) || isEmpty( name ) ) {
		throw new MissingArgument( "Research name cannot be empty" );
	}

	if ( ! this.hasResearch( name ) ) {
		return false;
	}

	return this.getAvailableResearches()[ name ]( this.paper );
};

module.exports = Researcher;

},{"./errors/invalidType":29,"./errors/missingArgument":30,"./researches/calculateFleschReading.js":43,"./researches/countLinks.js":44,"./researches/countSentencesFromDescription.js":45,"./researches/countSentencesFromText.js":46,"./researches/findKeywordInFirstParagraph.js":55,"./researches/findKeywordInPageTitle.js":56,"./researches/findTransitionWords.js":57,"./researches/getKeywordDensity.js":64,"./researches/getLinkStatistics.js":65,"./researches/getParagraphLength.js":67,"./researches/getPassiveVoice.js":68,"./researches/getSentenceBeginnings.js":69,"./researches/getSubheadingLength.js":70,"./researches/getSubheadingPresence.js":71,"./researches/getSubheadingTextLengths.js":72,"./researches/getWordComplexity.js":73,"./researches/imageAltTags.js":74,"./researches/imageCountInText.js":75,"./researches/keyphraseLength":76,"./researches/keywordCountInUrl":77,"./researches/matchKeywordInSubheadings.js":78,"./researches/metaDescriptionKeyword.js":79,"./researches/metaDescriptionLength.js":80,"./researches/pageTitleWidth.js":81,"./researches/stopWordsInKeyword":85,"./researches/stopWordsInUrl":87,"./researches/urlIsTooLong.js":88,"./researches/wordCountInText.js":89,"lodash/isEmpty":278,"lodash/isUndefined":290,"lodash/merge":296}],43:[function(require,module,exports){
/** @module analyses/calculateFleschReading */

var stripNumbers = require( "../stringProcessing/stripNumbers.js" );
var countSentences = require( "../stringProcessing/countSentences.js" );
var countWords = require( "../stringProcessing/countWords.js" );
var countSyllables = require( "../stringProcessing/syllables/count.js" );
var formatNumber = require( "../helpers/formatNumber.js" );

var getLanguage = require( "../helpers/getLanguage.js" );

/**
 * Calculates an average from a total and an amount
 *
 * @param {number} total The total.
 * @param {number} amount The amount.
 * @returns {number} The average from the total and the amount.
 */
var getAverage = function( total, amount ) {
	return total / amount;
};

/**
 * This calculates the fleschreadingscore for a given text
 * The formula used:
 * 206.835 - 1.015 (total words / total sentences) - 84.6 ( total syllables / total words);
 *
 * @param {object} paper The paper containing the text
 * @returns {number} the score of the fleschreading test
 */
module.exports = function( paper ) {
	var score;
	var text = paper.getText();
	var locale = paper.getLocale();
	var language = getLanguage( locale );
	if ( text === "" ) {
		return 0;
	}

	text = stripNumbers( text );

	var numberOfSentences = countSentences( text );

	var numberOfWords = countWords( text );

	// Prevent division by zero errors.
	if ( numberOfSentences === 0 || numberOfWords === 0 ) {
		return 0;
	}

	var numberOfSyllables = countSyllables( text, locale );
	var averageWordsPerSentence = getAverage( numberOfWords, numberOfSentences );
	switch( language ) {
		case "nl":
			var syllablesPer100Words = numberOfSyllables * ( 100 / numberOfWords );
			score = 206.84 - ( 0.77 * syllablesPer100Words ) - ( 0.93 * ( averageWordsPerSentence  ) );
			break;
		case "de":
			score = 180 - averageWordsPerSentence - ( 58.5 * numberOfSyllables / numberOfWords );
			break;
		case "en":
		default:
			score = 206.835 - ( 1.015 * ( averageWordsPerSentence ) ) - ( 84.6 * ( numberOfSyllables / numberOfWords ) );
			break;
	}


	return formatNumber( score );
};

},{"../helpers/formatNumber.js":32,"../helpers/getLanguage.js":34,"../stringProcessing/countSentences.js":92,"../stringProcessing/countWords.js":94,"../stringProcessing/stripNumbers.js":120,"../stringProcessing/syllables/count.js":124}],44:[function(require,module,exports){
/** @module analyses/getLinkStatistics */

var getLinks = require( "./getLinks" );

/**
 * Checks a text for anchors and returns the number found.
 *
 * @param {object} paper The paper object containing text, keyword and url.
 * @returns {number} The number of links found in the text.
 */
module.exports = function( paper ) {
	var text = paper.getText();
	var anchors = getLinks( text );

	return anchors.length;
};

},{"./getLinks":66}],45:[function(require,module,exports){
var getSentences = require( "../stringProcessing/getSentences" );
var sentencesLength = require( "./../stringProcessing/sentencesLength.js" );

/**
 * Counts sentences in the description..
 * @param {Paper} paper The Paper object to get description from.
 * @returns {Array} The sentences from the text.
 */
module.exports = function( paper ) {
	var sentences = getSentences( paper.getDescription() );
	return sentencesLength( sentences );
};

},{"../stringProcessing/getSentences":101,"./../stringProcessing/sentencesLength.js":116}],46:[function(require,module,exports){
var getSentences = require( "../stringProcessing/getSentences" );
var sentencesLength = require( "./../stringProcessing/sentencesLength.js" );

/**
 * Count sentences in the text.
 * @param {Paper} paper The Paper object to get text from.
 * @returns {Array} The sentences from the text.
 */
module.exports = function( paper ) {
	var sentences = getSentences( paper.getText() );
	return sentencesLength( sentences );
};

},{"../stringProcessing/getSentences":101,"./../stringProcessing/sentencesLength.js":116}],47:[function(require,module,exports){
/**
 * Returns an array with exceptions for the sentence beginning researcher.
 * @returns {Array} The array filled with exceptions.
 */
module.exports = function() {
	return [
		// Definite articles:
		"the",
		// Indefinite articles:
		"a", "an",
		// Numbers 1-10:
		"one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten",
		// Demonstrative pronouns:
		"this", "that", "these", "those",
	];
};

},{}],48:[function(require,module,exports){
module.exports = function() {
	return [
		"am",
		"is",
		"are",
		"was",
		"were",
		"been",
		"being",
		"get",
		"gets",
		"getting",
		"got",
		"gotten",
		"having",
		"be",
		"she's",
		"he's",
		"it's",
		"i'm",
		"we're",
		"they're",
		"you're",
		"what's",
		"isn't",
		"weren't",
		"wasn't",
		"that's",
		"aren't",
	];
};

},{}],49:[function(require,module,exports){
module.exports = function() {
	return [
		"a",
		"an",
		"the",
		"my",
		"her",
		"his",
		"their",
		"its",
		"our",
		"your",
		"am",
		"is",
		"are",
		"was",
		"were",
		"been",
		"being",
		"get",
		"gets",
		"getting",
		"got",
		"gotten",
		"having",
		"be",
		"she's",
		"he's",
		"it's",
		"i'm",
		"we're",
		"they're",
		"you're",
		"what's",
		"isn't",
		"weren't",
		"wasn't",
		"that's",
		"aren't",
	];
};


},{}],50:[function(require,module,exports){
module.exports = function() {
	return [
		"arisen",
		"awoken",
		"reawoken",
		"babysat",
		"backslid",
		"backslidden",
		"beat",
		"beaten",
		"become",
		"begun",
		"bent",
		"unbent",
		"bet",
		"bid",
		"outbid",
		"rebid",
		"underbid",
		"overbid",
		"bidden",
		"bitten",
		"blown",
		"bought",
		"overbought",
		"bound",
		"unbound",
		"rebound",
		"broadcast",
		"rebroadcast",
		"broken",
		"brought",
		"browbeat",
		"browbeaten",
		"built",
		"prebuilt",
		"rebuilt",
		"overbuilt",
		"burnt",
		"burst",
		"bust",
		"cast",
		"miscast",
		"recast",
		"caught",
		"chosen",
		"clung",
		"come",
		"overcome",
		"cost",
		"crept",
		"cut",
		"undercut",
		"recut",
		"daydreamt",
		"dealt",
		"misdealt",
		"redealt",
		"disproven",
		"done",
		"predone",
		"outdone",
		"misdone",
		"redone",
		"overdone",
		"undone",
		"drawn",
		"outdrawn",
		"redrawn",
		"overdrawn",
		"dreamt",
		"driven",
		"outdriven",
		"drunk",
		"outdrunk",
		"overdrunk",
		"dug",
		"dwelt",
		"eaten",
		"overeaten",
		"fallen",
		"felt",
		"fit",
		"refit",
		"retrofit",
		"flown",
		"outflown",
		"flung",
		"forbidden",
		"forecast",
		"foregone",
		"foreseen",
		"foretold",
		"forgiven",
		"forgotten",
		"forsaken",
		"fought",
		"outfought",
		"found",
		"frostbitten",
		"frozen",
		"unfrozen",
		"given",
		"gone",
		"undergone",
//		"got",
		"gotten",
		"ground",
		"reground",
		"grown",
		"outgrown",
		"regrown",
		"had",
		"handwritten",
		"heard",
		"reheard",
		"misheard",
		"overheard",
		"held",
		"hewn",
		"hidden",
		"unhidden",
		"hit",
		"hung",
		"rehung",
		"overhung",
		"unhung",
		"hurt",
		"inlaid",
		"input",
		"interwound",
		"interwoven",
		"jerry-built",
		"kept",
		"knelt",
		"knit",
		"reknit",
		"unknit",
		"known",
		"laid",
		"mislaid",
		"relaid",
		"overlaid",
		"lain",
		"underlain",
		"leant",
		"leapt",
		"outleapt",
		"learnt",
		"unlearnt",
		"relearnt",
		"mislearnt",
		"left",
		"lent",
		"let",
		"lip-read",
		"lit",
		"relit",
		"lost",
		"made",
		"premade",
		"remade",
		"meant",
		"met",
		"mown",
		"offset",
		"paid",
		"prepaid",
		"repaid",
		"overpaid",
		"partaken",
		"proofread",
		"proven",
		"put",
		"quick-frozen",
		"quit",
		"read",
		"misread",
		"reread",
		"retread",
		"rewaken",
		"rid",
		"ridden",
		"outridden",
		"overridden",
		"risen",
		"roughcast",
		"run",
		"outrun",
		"rerun",
		"overrun",
		"rung",
		"said",
		"sand-cast",
		"sat",
		"outsat",
		"sawn",
		"seen",
		"overseen",
		"sent",
		"resent",
		"set",
		"preset",
		"reset",
		"misset",
		"sewn",
		"resewn",
		"oversewn",
		"unsewn",
		"shaken",
		"shat",
		"shaven",
		"shit",
		"shone",
		"outshone",
		"shorn",
		"shot",
		"outshot",
		"overshot",
		"shown",
		"shrunk",
		"preshrunk",
		"shut",
		"sight-read",
		"slain",
		"slept",
		"outslept",
		"overslept",
		"slid",
		"slit",
		"slung",
		"unslung",
		"slunk",
		"smelt",
		"outsmelt",
		"snuck",
		"sold",
		"undersold",
		"presold",
		"outsold",
		"resold",
		"oversold",
		"sought",
		"sown",
		"spat",
		"spelt",
		"misspelt",
		"spent",
		"underspent",
		"outspent",
		"misspent",
		"overspent",
		"spilt",
		"overspilt",
		"spit",
		"split",
		"spoilt",
		"spoken",
		"outspoken",
		"misspoken",
		"overspoken",
		"spread",
		"sprung",
		"spun",
		"unspun",
		"stolen",
		"stood",
		"understood",
		"misunderstood",
		"strewn",
		"stricken",
		"stridden",
		"striven",
		"struck",
		"strung",
		"unstrung",
		"stuck",
		"unstuck",
		"stung",
		"stunk",
		"sublet",
		"sunburnt",
		"sung",
		"outsung",
		"sunk",
		"sweat",
		"swept",
		"swollen",
		"sworn",
		"outsworn",
		"swum",
		"outswum",
		"swung",
		"taken",
		"undertaken",
		"mistaken",
		"retaken",
		"overtaken",
		"taught",
		"mistaught",
		"retaught",
		"telecast",
		"test-driven",
		"test-flown",
		"thought",
		"outthought",
		"rethought",
		"overthought",
		"thrown",
		"outthrown",
		"overthrown",
		"thrust",
		"told",
		"retold",
		"torn",
		"retorn",
		"trod",
		"trodden",
		"typecast",
		"typeset",
		"upheld",
		"upset",
		"waylaid",
		"wept",
		"wet",
		"rewet",
		"withdrawn",
		"withheld",
		"withstood",
		"woken",
		"won",
		"rewon",
		"worn",
		"reworn",
		"wound",
		"rewound",
		"overwound",
		"unwound",
		"woven",
		"rewoven",
		"unwoven",
		"written",
		"typewritten",
		"underwritten",
		"outwritten",
		"miswritten",
		"rewritten",
		"overwritten",
		"wrung",
	];
};

},{}],51:[function(require,module,exports){
module.exports = function() {
	return [
		"ablebodied",
		"abovementioned",
		"absentminded",
		"accoladed",
		"accompanied",
		"acculturized",
		"accursed",
		"acerated",
		"acerbated",
		"acetylized",
		"achromatised",
		"achromatized",
		"acidified",
		"acned",
		"actualised",
		"adrenalised",
		"adulated",
		"adversed",
		"aestheticised",
		"affectioned",
		"affined",
		"affricated",
		"aforementioned",
		"agerelated",
		"aggrieved",
		"airbed",
		"aircooled",
		"airspeed",
		"alcoholized",
		"alcoved",
		"alkalised",
		"allianced",
		"aluminized",
		"alveolated",
		"ambered",
		"ammonified",
		"amplified",
		"anagrammatised",
		"anagrammatized",
		"anathematised",
		"aniseed",
		"ankled",
		"annualized",
		"anonymised",
		"anthologized",
		"antlered",
		"anucleated",
		"anviled",
		"anvilshaped",
		"apostrophised",
		"apostrophized",
		"appliqued",
		"apprized",
		"arbitrated",
		"armored",
		"articled",
		"ashamed",
		"assented",
		"atomised",
		"atrophied",
		"auricled",
		"auriculated",
		"aurified",
		"autopsied",
		"axled",
		"babied",
		"backhoed",
		"badmannered",
		"badtempered",
		"balustered",
		"baned",
		"barcoded",
		"bareboned",
		"barefooted",
		"barelegged",
		"barnacled",
		"bayoneted",
		"beadyeyed",
		"beaked",
		"beaned",
		"beatified",
		"beautified",
		"beavered",
		"bed",
		"bedamned",
		"bedecked",
		"behoved",
		"belated",
		"bellbottomed",
		"bellshaped",
		"benighted",
		"bequeathed",
		"berried",
		"bespectacled",
		"bewhiskered",
		"bighearted",
		"bigmouthed",
		"bigoted",
		"bindweed",
		"binucleated",
		"biopsied",
		"bioturbed",
		"biped",
		"bipinnated",
		"birdfeed",
		"birdseed",
		"bisegmented",
		"bitterhearted",
		"blabbermouthed",
		"blackhearted",
		"bladed",
		"blankminded",
		"blearyeyed",
		"bleed",
		"blissed",
		"blobbed",
		"blondhaired",
		"bloodied",
		"bloodred",
		"bloodshed",
		"blueblooded",
		"boatshaped",
		"bobsled",
		"bodied",
		"boldhearted",
		"boogied",
		"boosed",
		"bosomed",
		"bottlefed",
		"bottlefeed",
		"bottlenecked",
		"bouldered",
		"bowlegged",
		"bowlshaped",
		"brandied",
		"bravehearted",
		"breastfed",
		"breastfeed",
		"breed",
		"brighteyed",
		"brindled",
		"broadhearted",
		"broadleaved",
		"broadminded",
		"brokenhearted",
		"broomed",
		"broomweed",
		"buccaned",
		"buckskinned",
		"bucktoothed",
		"buddied",
		"buffaloed",
		"bugeyed",
		"bugleweed",
		"bugweed",
		"bulletined",
		"bunked",
		"busied",
		"butterfingered",
		"cabbed",
		"caddied",
		"cairned",
		"calcified",
		"canalized",
		"candied",
		"cannulated",
		"canoed",
		"canopied",
		"canvased",
		"caped",
		"capsulated",
		"cassocked",
		"castellated",
		"catabolised",
		"catheterised",
		"caudated",
		"cellmediated",
		"cellulosed",
		"certified",
		"chagrined",
		"chambered",
		"chested",
		"chevroned",
		"chickenfeed",
		"chickenhearted",
		"chickweed",
		"chilblained",
		"childbed",
		"chinned",
		"chromatographed",
		"ciliated",
		"cindered",
		"cingulated",
		"circumstanced",
		"cisgendered",
		"citrullinated",
		"clappered",
		"clarified",
		"classified",
		"clawshaped",
		"claysized",
		"cleanhearted",
		"clearminded",
		"clearsighted",
		"cliched",
		"clodded",
		"cloistered",
		"closefisted",
		"closehearted",
		"closelipped",
		"closemouthed",
		"closeted",
		"cloudseed",
		"clubfooted",
		"clubshaped",
		"clued",
		"cockeyed",
		"codified",
		"coed",
		"coevolved",
		"coffined",
		"coiffed",
		"coinfected",
		"coldblooded",
		"coldhearted",
		"collateralised",
		"colonialised",
		"colorcoded",
		"colorised",
		"colourised",
		"columned",
		"commoditized",
		"compactified",
		"companioned",
		"complexioned",
		"conceited",
		"concerned",
		"concussed",
		"coneshaped",
		"congested",
		"contented",
		"convexed",
		"coralled",
		"corymbed",
		"cottonseed",
		"countrified",
		"countrybred",
		"courtmartialled",
		"coved",
		"coveralled",
		"cowshed",
		"cozied",
		"cragged",
		"crayoned",
		"credentialed",
		"creed",
		"crenulated",
		"crescentshaped",
		"cressweed",
		"crewed",
		"cricked",
		"crispated",
		"crossbarred",
		"crossbed",
		"crossbred",
		"crossbreed",
		"crossclassified",
		"crosseyed",
		"crossfertilised",
		"crossfertilized",
		"crossindexed",
		"crosslegged",
		"crossshaped",
		"crossstratified",
		"crossstriated",
		"crotched",
		"crucified",
		"cruelhearted",
		"crutched",
		"cubeshaped",
		"cubified",
		"cuckolded",
		"cucumbershaped",
		"cumbered",
		"cuminseed",
		"cupshaped",
		"curated",
		"curded",
		"curfewed",
		"curlicued",
		"curlycued",
		"curried",
		"curtsied",
		"cyclized",
		"cylindershaped",
		"damed",
		"dandified",
		"dangered",
		"darkhearted",
		"daybed",
		"daylighted",
		"deacidified",
		"deacylated",
		"deadhearted",
		"deadlined",
		"deaminized",
		"deathbed",
		"decalcified",
		"decertified",
		"deckbed",
		"declassified",
		"declutched",
		"decolourated",
		"decreed",
		"deed",
		"deeprooted",
		"deepseated",
		"defensed",
		"defied",
		"deflexed",
		"deglamorised",
		"degunkified",
		"dehumidified",
		"deified",
		"deled",
		"delegitimised",
		"demoded",
		"demystified",
		"denasalized",
		"denazified",
		"denied",
		"denitrified",
		"denticulated",
		"deseed",
		"desexualised",
		"desposited",
		"detoxified",
		"deuced",
		"devitrified",
		"dewlapped",
		"dezincified",
		"diagonalised",
		"dialogued",
		"died",
		"digitated",
		"dignified",
		"dilled",
		"dimwitted",
		"diphthonged",
		"disaffected",
		"disaggregated",
		"disarrayed",
		"discalced",
		"discolorated",
		"discolourated",
		"discshaped",
		"diseased",
		"disembodied",
		"disencumbered",
		"disfranchised",
		"diskshaped",
		"disproportionated",
		"disproportioned",
		"disqualified",
		"distempered",
		"districted",
		"diversified",
		"diverticulated",
		"divested",
		"divvied",
		"dizzied",
		"dogged",
		"dogsbodied",
		"dogsled",
		"domeshaped",
		"domiciled",
		"dormered",
		"doublebarrelled",
		"doublestranded",
		"doublewalled",
		"downhearted",
		"duckbilled",
		"eared",
		"echeloned",
		"eddied",
		"edified",
		"eggshaped",
		"elasticated",
		"electrified",
		"elegized",
		"embed",
		"embodied",
		"emceed",
		"empaneled",
		"empanelled",
		"emptyhearted",
		"emulsified",
		"engined",
		"ennobled",
		"envied",
		"enzymecatalysed",
		"enzymecatalyzed",
		"epitomised",
		"epoxidized",
		"epoxied",
		"etherised",
		"etherized",
		"evilhearted",
		"evilminded",
		"exceed",
		"exemplified",
		"exponentiated",
		"expurgated",
		"extravasated",
		"extraverted",
		"extroverted",
		"fabled",
		"facelifted",
		"facsimiled",
		"fainthearted",
		"falcated",
		"falsehearted",
		"falsified",
		"famed",
		"fancified",
		"fanged",
		"fanshaped",
		"fantasied",
		"farsighted",
		"fated",
		"fatted",
		"fazed",
		"featherbed",
		"fed",
		"federalized",
		"feeblehearted",
		"feebleminded",
		"feeblewitted",
		"feed",
		"fendered",
		"fenestrated",
		"ferried",
		"fevered",
		"fibered",
		"fibred",
		"ficklehearted",
		"fiercehearted",
		"figged",
		"filigreed",
		"filterfeed",
		"fireweed",
		"firmhearted",
		"fissured",
		"flanged",
		"flanneled",
		"flannelled",
		"flatbed",
		"flatfooted",
		"flatted",
		"flaxenhaired",
		"flaxseed",
		"flaxweed",
		"flighted",
		"floodgenerated",
		"flowerbed",
		"fluidised",
		"fluidized",
		"flurried",
		"fobbed",
		"fonded",
		"forcefeed",
		"foreshortened",
		"foresighted",
		"forkshaped",
		"formfeed",
		"fortified",
		"fortressed",
		"foulmouthed",
		"foureyed",
		"foxtailed",
		"fractionalised",
		"fractionalized",
		"frankhearted",
		"freed",
		"freehearted",
		"freespirited",
		"frenzied",
		"friezed",
		"frontiered",
		"fructified",
		"frumped",
		"fullblooded",
		"fullbodied",
		"fullfledged",
		"fullhearted",
		"funnelshaped",
		"furnaced",
		"gaitered",
		"galleried",
		"gangliated",
		"ganglionated",
		"gangrened",
		"gargoyled",
		"gasified",
		"gaunted",
		"gauntleted",
		"gauzed",
		"gavelled",
		"gelatinised",
		"gemmed",
		"genderized",
		"gentled",
		"gentlehearted",
		"gerrymandered",
		"gladhearted",
		"glamored",
		"globed",
		"gloried",
		"glorified",
		"glycosylated",
		"goateed",
		"gobletshaped",
		"godspeed",
		"goodhearted",
		"goodhumored",
		"goodhumoured",
		"goodnatured",
		"goodtempered",
		"goosed",
		"goosenecked",
		"goutweed",
		"grainfed",
		"grammaticalized",
		"grapeseed",
		"gratified",
		"graved",
		"gravelbed",
		"grayhaired",
		"greathearted",
		"greed",
		"greenweed",
		"grommeted",
		"groundspeed",
		"groved",
		"gruffed",
		"guiled",
		"gulled",
		"gumshoed",
		"gunkholed",
		"gussied",
		"guyed",
		"gyrostabilized",
		"hackneyed",
		"hagged",
		"haired",
		"halfcivilized",
		"halfhearted",
		"halfwitted",
		"haloed",
		"handballed",
		"handfed",
		"handfeed",
		"hardcoded",
		"hardhearted",
		"hardnosed",
		"hared",
		"harelipped",
		"hasted",
		"hatred",
		"haunched",
		"hawkeyed",
		"hayseed",
		"hayweed",
		"hearsed",
		"hearted",
		"heartshaped",
		"heavenlyminded",
		"heavyfooted",
		"heavyhearted",
		"heed",
		"heired",
		"heisted",
		"helicoptered",
		"helmed",
		"helmeted",
		"hemagglutinated",
		"hemolyzed",
		"hempseed",
		"hempweed",
		"heparinised",
		"heparinized",
		"herbed",
		"highheeled",
		"highminded",
		"highpriced",
		"highspeed",
		"highspirited",
		"hilled",
		"hipped",
		"hispanicised",
		"hocked",
		"hoed",
		"hogweed",
		"holstered",
		"homaged",
		"hoodooed",
		"hoofed",
		"hooknosed",
		"hooved",
		"horned",
		"horrified",
		"horseshoed",
		"horseweed",
		"hotbed",
		"hotblooded",
		"hothearted",
		"hotted",
		"hottempered",
		"hued",
		"humansized",
		"humidified",
		"humped",
		"hundred",
		"hutched",
		"hyperinflated",
		"hyperpigmented",
		"hyperstimulated",
		"hypertrophied",
		"hyphened",
		"hypophysectomised",
		"hypophysectomized",
		"hypopigmented",
		"hypostatised",
		"hysterectomized",
		"iconified",
		"iconised",
		"iconized",
		"ideologised",
		"illbred",
		"illconceived",
		"illdefined",
		"illdisposed",
		"illequipped",
		"illfated",
		"illfavored",
		"illfavoured",
		"illflavored",
		"illfurnished",
		"illhumored",
		"illhumoured",
		"illimited",
		"illmannered",
		"illnatured",
		"illomened",
		"illproportioned",
		"illqualified",
		"illscented",
		"illtempered",
		"illumed",
		"illusioned",
		"imbed",
		"imbossed",
		"imbued",
		"immatured",
		"impassioned",
		"impenetrated",
		"imperfected",
		"imperialised",
		"imperturbed",
		"impowered",
		"imputed",
		"inarticulated",
		"inbred",
		"inbreed",
		"incapsulated",
		"incased",
		"incrustated",
		"incrusted",
		"indebted",
		"indeed",
		"indemnified",
		"indentured",
		"indigested",
		"indisposed",
		"inexperienced",
		"infrared",
		"intensified",
		"intentioned",
		"interbedded",
		"interbred",
		"interbreed",
		"interluded",
		"introverted",
		"inured",
		"inventoried",
		"iodinated",
		"iodised",
		"irked",
		"ironfisted",
		"ironweed",
		"itchweed",
		"ivied",
		"ivyweed",
		"jagged",
		"jellified",
		"jerseyed",
		"jetlagged",
		"jetpropelled",
		"jeweled",
		"jewelled",
		"jewelweed",
		"jiggered",
		"jimmyweed",
		"jimsonweed",
		"jointweed",
		"joyweed",
		"jungled",
		"juried",
		"justiceweed",
		"justified",
		"karstified",
		"kerchiefed",
		"kettleshaped",
		"kibbled",
		"kidneyshaped",
		"kimonoed",
		"kindhearted",
		"kindred",
		"kingsized",
		"kirtled",
		"knacked",
		"knapweed",
		"kneed",
		"knobbed",
		"knobweed",
		"knopweed",
		"knotweed",
		"lakebed",
		"lakeweed",
		"lamed",
		"lamellated",
		"lanceshaped",
		"lanceted",
		"landbased",
		"lapeled",
		"lapelled",
		"largehearted",
		"lariated",
		"lased",
		"latticed",
		"lauded",
		"lavaged",
		"lavendered",
		"lawned",
		"led",
		"lefteyed",
		"legitimatised",
		"legitimatized",
		"leisured",
		"lensshaped",
		"leveed",
		"levied",
		"lichened",
		"lichenized",
		"lidded",
		"lifesized",
		"lightfingered",
		"lightfooted",
		"lighthearted",
		"lightminded",
		"lightspeed",
		"lignified",
		"likeminded",
		"lilylivered",
		"limbed",
		"linearised",
		"linearized",
		"linefeed",
		"linseed",
		"lionhearted",
		"liquefied",
		"liquified",
		"lithified",
		"liveried",
		"lobbied",
		"locoweed",
		"longarmed",
		"longhaired",
		"longhorned",
		"longlegged",
		"longnecked",
		"longsighted",
		"longwinded",
		"lopsided",
		"loudmouthed",
		"louvered",
		"louvred",
		"lowbred",
		"lowpriced",
		"lowspirited",
		"lozenged",
		"lunated",
		"lyrated",
		"lysinated",
		"maced",
		"macroaggregated",
		"macrodissected",
		"maculated",
		"madweed",
		"magnified",
		"maidenweed",
		"maladapted",
		"maladjusted",
		"malnourished",
		"malrotated",
		"maned",
		"mannered",
		"manuevered",
		"manyhued",
		"manyshaped",
		"manysided",
		"masted",
		"mealymouthed",
		"meanspirited",
		"membered",
		"membraned",
		"metaled",
		"metalized",
		"metallised",
		"metallized",
		"metamerized",
		"metathesized",
		"meted",
		"methylated",
		"mettled",
		"microbrecciated",
		"microminiaturized",
		"microstratified",
		"middleaged",
		"midsized",
		"miffed",
		"mildhearted",
		"milkweed",
		"miniskirted",
		"misactivated",
		"misaligned",
		"mischiefed",
		"misclassified",
		"misdeed",
		"misdemeaned",
		"mismannered",
		"misnomered",
		"misproportioned",
		"miswired",
		"mitred",
		"mitted",
		"mittened",
		"moneyed",
		"monocled",
		"mononucleated",
		"monospaced",
		"monotoned",
		"monounsaturated",
		"mortified",
		"moseyed",
		"motorised",
		"motorized",
		"moussed",
		"moustached",
		"muddied",
		"mugweed",
		"multiarmed",
		"multibarreled",
		"multibladed",
		"multicelled",
		"multichambered",
		"multichanneled",
		"multichannelled",
		"multicoated",
		"multidirected",
		"multiengined",
		"multifaceted",
		"multilaminated",
		"multilaned",
		"multilayered",
		"multilobed",
		"multilobulated",
		"multinucleated",
		"multipronged",
		"multisegmented",
		"multisided",
		"multispeed",
		"multistemmed",
		"multistoried",
		"multitalented",
		"multitoned",
		"multitowered",
		"multivalued",
		"mummied",
		"mummified",
		"mustached",
		"mustachioed",
		"mutinied",
		"myelinated",
		"mystified",
		"mythicised",
		"naked",
		"narcotised",
		"narrowminded",
		"natured",
		"neaped",
		"nearsighted",
		"necrosed",
		"nectared",
		"need",
		"needleshaped",
		"newfangled",
		"newlywed",
		"nibbed",
		"nimblewitted",
		"nippled",
		"nixed",
		"nobled",
		"noduled",
		"noised",
		"nonaccented",
		"nonactivated",
		"nonadsorbed",
		"nonadulterated",
		"nonaerated",
		"nonaffiliated",
		"nonaliased",
		"nonalienated",
		"nonaligned",
		"nonarchived",
		"nonarmored",
		"nonassociated",
		"nonattenuated",
		"nonblackened",
		"nonbreastfed",
		"nonbrecciated",
		"nonbuffered",
		"nonbuttered",
		"noncarbonated",
		"noncarbonized",
		"noncatalogued",
		"noncatalyzed",
		"noncategorized",
		"noncertified",
		"nonchlorinated",
		"nonciliated",
		"noncircumcised",
		"noncivilized",
		"nonclassified",
		"noncoated",
		"noncodified",
		"noncoerced",
		"noncommercialized",
		"noncommissioned",
		"noncompacted",
		"noncompiled",
		"noncomplicated",
		"noncomposed",
		"noncomputed",
		"noncomputerized",
		"nonconcerted",
		"nonconditioned",
		"nonconfirmed",
		"noncongested",
		"nonconjugated",
		"noncooled",
		"noncorrugated",
		"noncoupled",
		"noncreated",
		"noncrowded",
		"noncultured",
		"noncurated",
		"noncushioned",
		"nondecoded",
		"nondecomposed",
		"nondedicated",
		"nondeferred",
		"nondeflated",
		"nondegenerated",
		"nondegraded",
		"nondelegated",
		"nondelimited",
		"nondelineated",
		"nondemarcated",
		"nondeodorized",
		"nondeployed",
		"nonderivatized",
		"nonderived",
		"nondetached",
		"nondetailed",
		"nondifferentiated",
		"nondigested",
		"nondigitized",
		"nondilapidated",
		"nondilated",
		"nondimensionalised",
		"nondimensionalized",
		"nondirected",
		"nondisabled",
		"nondisciplined",
		"nondispersed",
		"nondisputed",
		"nondisqualified",
		"nondisrupted",
		"nondisseminated",
		"nondissipated",
		"nondissolved",
		"nondistressed",
		"nondistributed",
		"nondiversified",
		"nondiverted",
		"nondocumented",
		"nondomesticated",
		"nondoped",
		"nondrafted",
		"nondrugged",
		"nondubbed",
		"nonducted",
		"nonearthed",
		"noneclipsed",
		"nonedged",
		"nonedited",
		"nonelasticized",
		"nonelectrified",
		"nonelectroplated",
		"nonelectroporated",
		"nonelevated",
		"noneliminated",
		"nonelongated",
		"nonembedded",
		"nonembodied",
		"nonemphasized",
		"nonencapsulated",
		"nonencoded",
		"nonencrypted",
		"nonendangered",
		"nonengraved",
		"nonenlarged",
		"nonenriched",
		"nonentangled",
		"nonentrenched",
		"nonepithelized",
		"nonequilibrated",
		"nonestablished",
		"nonetched",
		"nonethoxylated",
		"nonethylated",
		"nonetiolated",
		"nonexaggerated",
		"nonexcavated",
		"nonexhausted",
		"nonexperienced",
		"nonexpired",
		"nonfabricated",
		"nonfalsified",
		"nonfeathered",
		"nonfeatured",
		"nonfed",
		"nonfederated",
		"nonfeed",
		"nonfenestrated",
		"nonfertilized",
		"nonfilamented",
		"nonfinanced",
		"nonfinished",
		"nonfinned",
		"nonfissured",
		"nonflagellated",
		"nonflagged",
		"nonflared",
		"nonflavored",
		"nonfluidized",
		"nonfluorinated",
		"nonfluted",
		"nonforested",
		"nonformalized",
		"nonformatted",
		"nonfragmented",
		"nonfragranced",
		"nonfranchised",
		"nonfreckled",
		"nonfueled",
		"nonfumigated",
		"nonfunctionalized",
		"nonfunded",
		"nongalvanized",
		"nongated",
		"nongelatinized",
		"nongendered",
		"nongeneralized",
		"nongenerated",
		"nongifted",
		"nonglazed",
		"nonglucosated",
		"nonglucosylated",
		"nonglycerinated",
		"nongraded",
		"nongrounded",
		"nonhalogenated",
		"nonhandicapped",
		"nonhospitalised",
		"nonhospitalized",
		"nonhydrated",
		"nonincorporated",
		"nonindexed",
		"noninfected",
		"noninfested",
		"noninitialized",
		"noninitiated",
		"noninoculated",
		"noninseminated",
		"noninstitutionalized",
		"noninsured",
		"nonintensified",
		"noninterlaced",
		"noninterpreted",
		"nonintroverted",
		"noninvestigated",
		"noninvolved",
		"nonirrigated",
		"nonisolated",
		"nonisomerized",
		"nonissued",
		"nonitalicized",
		"nonitemized",
		"noniterated",
		"nonjaded",
		"nonlabelled",
		"nonlaminated",
		"nonlateralized",
		"nonlayered",
		"nonlegalized",
		"nonlegislated",
		"nonlesioned",
		"nonlexicalized",
		"nonliberated",
		"nonlichenized",
		"nonlighted",
		"nonlignified",
		"nonlimited",
		"nonlinearized",
		"nonlinked",
		"nonlobed",
		"nonlobotomized",
		"nonlocalized",
		"nonlysed",
		"nonmachined",
		"nonmalnourished",
		"nonmandated",
		"nonmarginalized",
		"nonmassaged",
		"nonmatriculated",
		"nonmatted",
		"nonmatured",
		"nonmechanized",
		"nonmedicated",
		"nonmedullated",
		"nonmentioned",
		"nonmetabolized",
		"nonmetallized",
		"nonmetastasized",
		"nonmetered",
		"nonmethoxylated",
		"nonmilled",
		"nonmineralized",
		"nonmirrored",
		"nonmodeled",
		"nonmoderated",
		"nonmodified",
		"nonmonetized",
		"nonmonitored",
		"nonmortgaged",
		"nonmotorized",
		"nonmottled",
		"nonmounted",
		"nonmultithreaded",
		"nonmutilated",
		"nonmyelinated",
		"nonnormalized",
		"nonnucleated",
		"nonobjectified",
		"nonobligated",
		"nonoccupied",
		"nonoiled",
		"nonopinionated",
		"nonoxygenated",
		"nonpaginated",
		"nonpaired",
		"nonparalyzed",
		"nonparameterized",
		"nonparasitized",
		"nonpasteurized",
		"nonpatterned",
		"nonphased",
		"nonphosphatized",
		"nonphosphorized",
		"nonpierced",
		"nonpigmented",
		"nonpiloted",
		"nonpipelined",
		"nonpitted",
		"nonplussed",
		"nonpuffed",
		"nonrandomized",
		"nonrated",
		"nonrefined",
		"nonregistered",
		"nonregulated",
		"nonrelated",
		"nonretarded",
		"nonsacred",
		"nonsalaried",
		"nonsanctioned",
		"nonsaturated",
		"nonscented",
		"nonscheduled",
		"nonseasoned",
		"nonsecluded",
		"nonsegmented",
		"nonsegregated",
		"nonselected",
		"nonsolidified",
		"nonspecialized",
		"nonspored",
		"nonstandardised",
		"nonstandardized",
		"nonstratified",
		"nonstressed",
		"nonstriated",
		"nonstriped",
		"nonstructured",
		"nonstylised",
		"nonstylized",
		"nonsubmerged",
		"nonsubscripted",
		"nonsubsidised",
		"nonsubsidized",
		"nonsubstituted",
		"nonsyndicated",
		"nonsynthesised",
		"nontabulated",
		"nontalented",
		"nonthreaded",
		"nontinted",
		"nontolerated",
		"nontranslated",
		"nontunnelled",
		"nonunified",
		"nonunionised",
		"nonupholstered",
		"nonutilised",
		"nonutilized",
		"nonvalued",
		"nonvaried",
		"nonverbalized",
		"nonvitrified",
		"nonvolatilised",
		"nonvolatilized",
		"normed",
		"nosebleed",
		"notated",
		"notified",
		"nuanced",
		"nullified",
		"numerated",
		"oarweed",
		"objectified",
		"obliqued",
		"obtunded",
		"occupied",
		"octupled",
		"odored",
		"oilseed",
		"oinked",
		"oldfashioned",
		"onesided",
		"oophorectomized",
		"opaqued",
		"openhearted",
		"openminded",
		"openmouthed",
		"opiated",
		"opinionated",
		"oracled",
		"oreweed",
		"ossified",
		"outbreed",
		"outmoded",
		"outrigged",
		"outriggered",
		"outsized",
		"outskated",
		"outspeed",
		"outtopped",
		"outtrumped",
		"outvoiced",
		"outweed",
		"ovated",
		"overadorned",
		"overaged",
		"overalled",
		"overassured",
		"overbred",
		"overbreed",
		"overcomplicated",
		"overdamped",
		"overdetailed",
		"overdiversified",
		"overdyed",
		"overequipped",
		"overfatigued",
		"overfed",
		"overfeed",
		"overindebted",
		"overintensified",
		"overinventoried",
		"overmagnified",
		"overmodified",
		"overpreoccupied",
		"overprivileged",
		"overproportionated",
		"overqualified",
		"overseed",
		"oversexed",
		"oversimplified",
		"oversized",
		"oversophisticated",
		"overstudied",
		"oversulfated",
		"ovicelled",
		"ovoidshaped",
		"ozonated",
		"pacified",
		"packeted",
		"palatalized",
		"paled",
		"palsied",
		"paned",
		"panicled",
		"parabled",
		"parallelepiped",
		"parallelized",
		"parallelopiped",
		"parenthesised",
		"parodied",
		"parqueted",
		"passioned",
		"paunched",
		"pauperised",
		"pedigreed",
		"pedimented",
		"pedunculated",
		"pegged",
		"peglegged",
		"penanced",
		"pencilshaped",
		"permineralized",
		"personified",
		"petrified",
		"photodissociated",
		"photoduplicated",
		"photoed",
		"photoinduced",
		"photolysed",
		"photolyzed",
		"pied",
		"pigeoned",
		"pigtailed",
		"pigweed",
		"pilastered",
		"pillared",
		"pilloried",
		"pimpled",
		"pinealectomised",
		"pinealectomized",
		"pinfeathered",
		"pinnacled",
		"pinstriped",
		"pixellated",
		"pixilated",
		"pixillated",
		"plainclothed",
		"plantarflexed",
		"pled",
		"plumaged",
		"pocked",
		"pokeweed",
		"polychlorinated",
		"polyunsaturated",
		"ponytailed",
		"pooched",
		"poorspirited",
		"popeyed",
		"poppyseed",
		"porcelainized",
		"porched",
		"poshed",
		"pottered",
		"poxed",
		"preachified",
		"precertified",
		"preclassified",
		"preconized",
		"preinoculated",
		"premed",
		"prenotified",
		"preoccupied",
		"preposed",
		"prequalified",
		"preshaped",
		"presignified",
		"prespecified",
		"prettified",
		"pried",
		"principled",
		"proceed",
		"prophesied",
		"propounded",
		"prosed",
		"protonated",
		"proudhearted",
		"proxied",
		"pulpified",
		"pumpkinseed",
		"puppied",
		"purebred",
		"pured",
		"pureed",
		"purified",
		"pustuled",
		"putrefied",
		"pyjamaed",
		"quadruped",
		"qualified",
		"quantified",
		"quantised",
		"quantized",
		"quarried",
		"queried",
		"questoned",
		"quicktempered",
		"quickwitted",
		"quiesced",
		"quietened",
		"quizzified",
		"racemed",
		"radiosensitised",
		"ragweed",
		"raindrenched",
		"ramped",
		"rapeseed",
		"rarefied",
		"rarified",
		"ratified",
		"razoredged",
		"reaccelerated",
		"reaccompanied",
		"reachieved",
		"reacknowledged",
		"readdicted",
		"readied",
		"reamplified",
		"reannealed",
		"reassociated",
		"rebadged",
		"rebiopsied",
		"recabled",
		"recategorised",
		"receipted",
		"recentred",
		"recertified",
		"rechoreographed",
		"reclarified",
		"reclassified",
		"reconferred",
		"recrystalized",
		"rectified",
		"recursed",
		"redblooded",
		"redefied",
		"redenied",
		"rednecked",
		"redshifted",
		"redweed",
		"redyed",
		"reed",
		"reembodied",
		"reenlighted",
		"refeed",
		"refereed",
		"reflexed",
		"refortified",
		"refronted",
		"refuged",
		"reglorified",
		"reimpregnated",
		"reinitialized",
		"rejustified",
		"reliquefied",
		"remedied",
		"remodified",
		"remonetized",
		"remythologized",
		"renotified",
		"renullified",
		"renumerated",
		"reoccupied",
		"repacified",
		"repurified",
		"reputed",
		"requalified",
		"rescinded",
		"reseed",
		"reshoed",
		"resolidified",
		"resorbed",
		"respecified",
		"restudied",
		"retabulated",
		"reticulated",
		"retinted",
		"retreed",
		"retroacted",
		"reunified",
		"reverified",
		"revested",
		"revivified",
		"rewed",
		"ridgepoled",
		"riffled",
		"rightminded",
		"rigidified",
		"rinded",
		"riped",
		"rited",
		"ritualised",
		"riverbed",
		"rivered",
		"roached",
		"roadbed",
		"robotised",
		"robotized",
		"romanized",
		"rosetted",
		"rosined",
		"roughhearted",
		"rubied",
		"ruddied",
		"runcinated",
		"russeted",
		"sabled",
		"sabred",
		"sabretoothed",
		"sacheted",
		"sacred",
		"saddlebred",
		"sainted",
		"salaried",
		"samoyed",
		"sanctified",
		"satellited",
		"savvied",
		"sawtoothed",
		"scandalled",
		"scarified",
		"scarped",
		"sceptred",
		"scissored",
		"screed",
		"screwshaped",
		"scrupled",
		"sculked",
		"scurried",
		"scuttled",
		"seabed",
		"seaweed",
		"seed",
		"seedbed",
		"selfassured",
		"selforganized",
		"semicivilized",
		"semidetached",
		"semidisassembled",
		"semidomesticated",
		"semipetrified",
		"semipronated",
		"semirefined",
		"semivitrified",
		"sentineled",
		"sepaled",
		"sepalled",
		"sequinned",
		"sexed",
		"shagged",
		"shaggycoated",
		"shaggyhaired",
		"shaled",
		"shammed",
		"sharpangled",
		"sharpclawed",
		"sharpcornered",
		"sharpeared",
		"sharpedged",
		"sharpeyed",
		"sharpflavored",
		"sharplimbed",
		"sharpnosed",
		"sharpsighted",
		"sharptailed",
		"sharptongued",
		"sharptoothed",
		"sharpwitted",
		"sharpworded",
		"shed",
		"shellbed",
		"shieldshaped",
		"shimmied",
		"shinned",
		"shirted",
		"shirtsleeved",
		"shoed",
		"shortbeaked",
		"shortbilled",
		"shortbodied",
		"shorthaired",
		"shortlegged",
		"shortlimbed",
		"shortnecked",
		"shortnosed",
		"shortsighted",
		"shortsleeved",
		"shortsnouted",
		"shortstaffed",
		"shorttailed",
		"shorttempered",
		"shorttoed",
		"shorttongued",
		"shortwinded",
		"shortwinged",
		"shotted",
		"shred",
		"shrewsized",
		"shrined",
		"shrinkproofed",
		"sickbed",
		"sickleshaped",
		"sickleweed",
		"signalised",
		"signified",
		"silicified",
		"siliconized",
		"silkweed",
		"siltsized",
		"silvertongued",
		"simpleminded",
		"simplified",
		"singlebarreled",
		"singlebarrelled",
		"singlebed",
		"singlebladed",
		"singlebreasted",
		"singlecelled",
		"singlefooted",
		"singlelayered",
		"singleminded",
		"singleseeded",
		"singleshelled",
		"singlestranded",
		"singlevalued",
		"sissified",
		"sistered",
		"sixgilled",
		"sixmembered",
		"sixsided",
		"sixstoried",
		"skulled",
		"slickered",
		"slipcased",
		"slowpaced",
		"slowwitted",
		"slurried",
		"smallminded",
		"smoothened",
		"smoothtongued",
		"snaggletoothed",
		"snouted",
		"snowballed",
		"snowcapped",
		"snowshed",
		"snowshoed",
		"snubnosed",
		"so-called",
		"sofabed",
		"softhearted",
		"sogged",
		"soled",
		"solidified",
		"soliped",
		"sorbed",
		"souled",
		"spearshaped",
		"specified",
		"spectacled",
		"sped",
		"speeched",
		"speechified",
		"speed",
		"spied",
		"spiffied",
		"spindleshaped",
		"spiritualised",
		"spirted",
		"splayfooted",
		"spoonfed",
		"spoonfeed",
		"spoonshaped",
		"spreadeagled",
		"squarejawed",
		"squareshaped",
		"squareshouldered",
		"squaretoed",
		"squeegeed",
		"staled",
		"starshaped",
		"starspangled",
		"starstudded",
		"statechartered",
		"statesponsored",
		"statued",
		"steadied",
		"steampowered",
		"steed",
		"steelhearted",
		"steepled",
		"sterned",
		"stiffnecked",
		"stilettoed",
		"stimied",
		"stinkweed",
		"stirrupshaped",
		"stockinged",
		"storeyed",
		"storied",
		"stouthearted",
		"straitlaced",
		"stratified",
		"strawberryflavored",
		"streambed",
		"stressinduced",
		"stretchered",
		"strictured",
		"strongbodied",
		"strongboned",
		"strongflavored",
		"stronghearted",
		"stronglimbed",
		"strongminded",
		"strongscented",
		"strongwilled",
		"stubbled",
		"studied",
		"stultified",
		"stupefied",
		"styed",
		"stymied",
		"subclassified",
		"subcommissioned",
		"subminiaturised",
		"subsaturated",
		"subulated",
		"suburbanised",
		"suburbanized",
		"suburbed",
		"succeed",
		"sueded",
		"sugarrelated",
		"sulfurized",
		"sunbed",
		"superhardened",
		"superinfected",
		"supersimplified",
		"surefooted",
		"sweetscented",
		"swifted",
		"swordshaped",
		"syllabified",
		"syphilized",
		"tabularized",
		"talented",
		"tarpapered",
		"tautomerized",
		"teated",
		"teed",
		"teenaged",
		"teetotaled",
		"tenderhearted",
		"tentacled",
		"tenured",
		"termed",
		"ternated",
		"testbed",
		"testified",
		"theatricalised",
		"theatricalized",
		"themed",
		"thicketed",
		"thickskinned",
		"thickwalled",
		"thighed",
		"thimbled",
		"thimblewitted",
		"thonged",
		"thoroughbred",
		"thralled",
		"threated",
		"throated",
		"throughbred",
		"thyroidectomised",
		"thyroidectomized",
		"tiaraed",
		"ticktocked",
		"tidied",
		"tightassed",
		"tightfisted",
		"tightlipped",
		"timehonoured",
		"tindered",
		"tined",
		"tinselled",
		"tippytoed",
		"tiptoed",
		"titled",
		"toed",
		"tomahawked",
		"tonged",
		"toolshed",
		"toothplated",
		"toplighted",
		"torchlighted",
		"toughhearted",
		"traditionalized",
		"trajected",
		"tranced",
		"transgendered",
		"transliterated",
		"translocated",
		"transmogrified",
		"treadled",
		"treed",
		"treelined",
		"tressed",
		"trialled",
		"triangled",
		"trifoliated",
		"trifoliolated",
		"trilobed",
		"trucklebed",
		"truehearted",
		"trumpetshaped",
		"trumpetweed",
		"tuberculated",
		"tumbleweed",
		"tunnelshaped",
		"turbaned",
		"turreted",
		"turtlenecked",
		"tuskshaped",
		"tweed",
		"twigged",
		"typified",
		"ulcered",
		"ultracivilised",
		"ultracivilized",
		"ultracooled",
		"ultradignified",
		"ultradispersed",
		"ultrafiltered",
		"ultrared",
		"ultrasimplified",
		"ultrasophisticated",
		"unabandoned",
		"unabashed",
		"unabbreviated",
		"unabetted",
		"unabolished",
		"unaborted",
		"unabraded",
		"unabridged",
		"unabsolved",
		"unabsorbed",
		"unaccelerated",
		"unaccented",
		"unaccentuated",
		"unacclimatised",
		"unacclimatized",
		"unaccompanied",
		"unaccomplished",
		"unaccosted",
		"unaccredited",
		"unaccrued",
		"unaccumulated",
		"unaccustomed",
		"unacidulated",
		"unacquainted",
		"unacquitted",
		"unactivated",
		"unactuated",
		"unadapted",
		"unaddicted",
		"unadjourned",
		"unadjudicated",
		"unadjusted",
		"unadmonished",
		"unadopted",
		"unadored",
		"unadorned",
		"unadsorbed",
		"unadulterated",
		"unadvertised",
		"unaerated",
		"unaffiliated",
		"unaggregated",
		"unagitated",
		"unaimed",
		"unaired",
		"unaliased",
		"unalienated",
		"unaligned",
		"unallocated",
		"unalloyed",
		"unalphabetized",
		"unamassed",
		"unamortized",
		"unamplified",
		"unanaesthetised",
		"unanaesthetized",
		"unaneled",
		"unanesthetised",
		"unanesthetized",
		"unangered",
		"unannealed",
		"unannexed",
		"unannihilated",
		"unannotated",
		"unanointed",
		"unanticipated",
		"unappareled",
		"unappendaged",
		"unapportioned",
		"unapprenticed",
		"unapproached",
		"unappropriated",
		"unarbitrated",
		"unarched",
		"unarchived",
		"unarmored",
		"unarmoured",
		"unarticulated",
		"unascertained",
		"unashamed",
		"unaspirated",
		"unassembled",
		"unasserted",
		"unassessed",
		"unassociated",
		"unassorted",
		"unassuaged",
		"unastonished",
		"unastounded",
		"unatoned",
		"unattained",
		"unattainted",
		"unattenuated",
		"unattributed",
		"unauctioned",
		"unaudited",
		"unauthenticated",
		"unautographed",
		"unaverted",
		"unawaked",
		"unawakened",
		"unawarded",
		"unawed",
		"unbaffled",
		"unbaited",
		"unbalconied",
		"unbanded",
		"unbanished",
		"unbaptised",
		"unbaptized",
		"unbarreled",
		"unbarrelled",
		"unbattered",
		"unbeaded",
		"unbearded",
		"unbeneficed",
		"unbesotted",
		"unbetrayed",
		"unbetrothed",
		"unbiased",
		"unbiassed",
		"unbigoted",
		"unbilled",
		"unblackened",
		"unblanketed",
		"unblasphemed",
		"unblazoned",
		"unblistered",
		"unblockaded",
		"unbloodied",
		"unbodied",
		"unbonded",
		"unbothered",
		"unbounded",
		"unbracketed",
		"unbranded",
		"unbreaded",
		"unbrewed",
		"unbridged",
		"unbridled",
		"unbroached",
		"unbudgeted",
		"unbuffed",
		"unbuffered",
		"unburnished",
		"unbutchered",
		"unbuttered",
		"uncached",
		"uncaked",
		"uncalcified",
		"uncalibrated",
		"uncamouflaged",
		"uncamphorated",
		"uncanceled",
		"uncancelled",
		"uncapitalized",
		"uncarbonated",
		"uncarpeted",
		"uncased",
		"uncashed",
		"uncastrated",
		"uncatalogued",
		"uncatalysed",
		"uncatalyzed",
		"uncategorised",
		"uncatered",
		"uncaulked",
		"uncelebrated",
		"uncensored",
		"uncensured",
		"uncertified",
		"unchambered",
		"unchanneled",
		"unchannelled",
		"unchaperoned",
		"uncharacterized",
		"uncharted",
		"unchartered",
		"unchastened",
		"unchastised",
		"unchelated",
		"uncherished",
		"unchilled",
		"unchristened",
		"unchronicled",
		"uncircumcised",
		"uncircumscribed",
		"uncited",
		"uncivilised",
		"uncivilized",
		"unclarified",
		"unclassed",
		"unclassified",
		"uncleaved",
		"unclimbed",
		"unclustered",
		"uncluttered",
		"uncoagulated",
		"uncoded",
		"uncodified",
		"uncoerced",
		"uncoined",
		"uncollapsed",
		"uncollated",
		"uncolonised",
		"uncolonized",
		"uncolumned",
		"uncombined",
		"uncommented",
		"uncommercialised",
		"uncommercialized",
		"uncommissioned",
		"uncommitted",
		"uncompacted",
		"uncompartmentalized",
		"uncompartmented",
		"uncompensated",
		"uncompiled",
		"uncomplicated",
		"uncompounded",
		"uncomprehened",
		"uncomputed",
		"unconcealed",
		"unconceded",
		"unconcluded",
		"uncondensed",
		"unconditioned",
		"unconfined",
		"unconfirmed",
		"uncongested",
		"unconglomerated",
		"uncongratulated",
		"unconjugated",
		"unconquered",
		"unconsecrated",
		"unconsoled",
		"unconsolidated",
		"unconstipated",
		"unconstricted",
		"unconstructed",
		"unconsumed",
		"uncontacted",
		"uncontracted",
		"uncontradicted",
		"uncontrived",
		"unconverted",
		"unconveyed",
		"unconvicted",
		"uncooked",
		"uncooled",
		"uncoordinated",
		"uncopyrighted",
		"uncored",
		"uncorrelated",
		"uncorroborated",
		"uncosted",
		"uncounseled",
		"uncounselled",
		"uncounterfeited",
		"uncoveted",
		"uncrafted",
		"uncramped",
		"uncrannied",
		"uncrazed",
		"uncreamed",
		"uncreased",
		"uncreated",
		"uncredentialled",
		"uncredited",
		"uncrested",
		"uncrevassed",
		"uncrippled",
		"uncriticised",
		"uncriticized",
		"uncropped",
		"uncrosslinked",
		"uncrowded",
		"uncrucified",
		"uncrumbled",
		"uncrystalized",
		"uncrystallised",
		"uncrystallized",
		"uncubed",
		"uncuddled",
		"uncued",
		"unculled",
		"uncultivated",
		"uncultured",
		"uncupped",
		"uncurated",
		"uncurbed",
		"uncurried",
		"uncurtained",
		"uncushioned",
		"undamped",
		"undampened",
		"undappled",
		"undarkened",
		"undated",
		"undaubed",
		"undazzled",
		"undeadened",
		"undeafened",
		"undebated",
		"undebunked",
		"undeceased",
		"undecimalized",
		"undeciphered",
		"undecked",
		"undeclared",
		"undecomposed",
		"undeconstructed",
		"undedicated",
		"undefeated",
		"undeferred",
		"undefied",
		"undefined",
		"undeflected",
		"undefrauded",
		"undefrayed",
		"undegassed",
		"undejected",
		"undelegated",
		"undeleted",
		"undelimited",
		"undelineated",
		"undemented",
		"undemolished",
		"undemonstrated",
		"undenatured",
		"undenied",
		"undented",
		"undeodorized",
		"undepicted",
		"undeputized",
		"underaged",
		"underarmed",
		"underassessed",
		"underbred",
		"underbudgeted",
		"undercapitalised",
		"undercapitalized",
		"underdiagnosed",
		"underdocumented",
		"underequipped",
		"underexploited",
		"underexplored",
		"underfed",
		"underfeed",
		"underfurnished",
		"undergoverned",
		"undergrazed",
		"underinflated",
		"underinsured",
		"underinvested",
		"underived",
		"undermaintained",
		"undermentioned",
		"undermotivated",
		"underperceived",
		"underpowered",
		"underprivileged",
		"underqualified",
		"underrehearsed",
		"underresourced",
		"underripened",
		"undersaturated",
		"undersexed",
		"undersized",
		"underspecified",
		"understaffed",
		"understocked",
		"understressed",
		"understudied",
		"underutilised",
		"underventilated",
		"undescaled",
		"undesignated",
		"undetached",
		"undetailed",
		"undetained",
		"undeteriorated",
		"undeterred",
		"undetonated",
		"undevised",
		"undevoted",
		"undevoured",
		"undiagnosed",
		"undialed",
		"undialysed",
		"undialyzed",
		"undiapered",
		"undiffracted",
		"undigested",
		"undignified",
		"undiluted",
		"undiminished",
		"undimmed",
		"undipped",
		"undirected",
		"undisciplined",
		"undiscouraged",
		"undiscussed",
		"undisfigured",
		"undisguised",
		"undisinfected",
		"undismayed",
		"undisposed",
		"undisproved",
		"undisputed",
		"undisrupted",
		"undissembled",
		"undissipated",
		"undissociated",
		"undissolved",
		"undistilled",
		"undistorted",
		"undistracted",
		"undistributed",
		"undisturbed",
		"undiversified",
		"undiverted",
		"undivulged",
		"undoctored",
		"undocumented",
		"undomesticated",
		"undosed",
		"undramatised",
		"undrilled",
		"undrugged",
		"undubbed",
		"unduplicated",
		"uneclipsed",
		"unedged",
		"unedited",
		"unejaculated",
		"unejected",
		"unelaborated",
		"unelapsed",
		"unelected",
		"unelectrified",
		"unelevated",
		"unelongated",
		"unelucidated",
		"unemaciated",
		"unemancipated",
		"unemasculated",
		"unembalmed",
		"unembed",
		"unembellished",
		"unembodied",
		"unemboldened",
		"unemerged",
		"unenacted",
		"unencoded",
		"unencrypted",
		"unencumbered",
		"unendangered",
		"unendorsed",
		"unenergized",
		"unenfranchised",
		"unengraved",
		"unenhanced",
		"unenlarged",
		"unenlivened",
		"unenraptured",
		"unenriched",
		"unentangled",
		"unentitled",
		"unentombed",
		"unentranced",
		"unentwined",
		"unenumerated",
		"unenveloped",
		"unenvied",
		"unequaled",
		"unequalised",
		"unequalized",
		"unequalled",
		"unequipped",
		"unerased",
		"unerected",
		"uneroded",
		"unerupted",
		"unescorted",
		"unestablished",
		"unevaluated",
		"unexaggerated",
		"unexampled",
		"unexcavated",
		"unexceeded",
		"unexcelled",
		"unexecuted",
		"unexerted",
		"unexhausted",
		"unexpensed",
		"unexperienced",
		"unexpired",
		"unexploited",
		"unexplored",
		"unexposed",
		"unexpurgated",
		"unextinguished",
		"unfabricated",
		"unfaceted",
		"unfanned",
		"unfashioned",
		"unfathered",
		"unfathomed",
		"unfattened",
		"unfavored",
		"unfavoured",
		"unfazed",
		"unfeathered",
		"unfed",
		"unfeigned",
		"unfermented",
		"unfertilised",
		"unfertilized",
		"unfilleted",
		"unfiltered",
		"unfinished",
		"unflavored",
		"unflavoured",
		"unflawed",
		"unfledged",
		"unfleshed",
		"unflurried",
		"unflushed",
		"unflustered",
		"unfluted",
		"unfocussed",
		"unforested",
		"unformatted",
		"unformulated",
		"unfortified",
		"unfractionated",
		"unfractured",
		"unfragmented",
		"unfrequented",
		"unfretted",
		"unfrosted",
		"unfueled",
		"unfunded",
		"unfurnished",
		"ungarbed",
		"ungarmented",
		"ungarnished",
		"ungeared",
		"ungerminated",
		"ungifted",
		"unglazed",
		"ungoverned",
		"ungraded",
		"ungrasped",
		"ungratified",
		"ungroomed",
		"ungrounded",
		"ungrouped",
		"ungummed",
		"ungusseted",
		"unhabituated",
		"unhampered",
		"unhandicapped",
		"unhardened",
		"unharvested",
		"unhasped",
		"unhatched",
		"unheralded",
		"unhindered",
		"unhomogenised",
		"unhomogenized",
		"unhonored",
		"unhonoured",
		"unhooded",
		"unhusked",
		"unhyphenated",
		"unified",
		"unillustrated",
		"unimpacted",
		"unimpaired",
		"unimpassioned",
		"unimpeached",
		"unimpelled",
		"unimplemented",
		"unimpregnated",
		"unimprisoned",
		"unimpugned",
		"unincorporated",
		"unincubated",
		"unincumbered",
		"unindemnified",
		"unindexed",
		"unindicted",
		"unindorsed",
		"uninduced",
		"unindustrialised",
		"unindustrialized",
		"uninebriated",
		"uninfected",
		"uninflated",
		"uninflected",
		"uninhabited",
		"uninhibited",
		"uninitialised",
		"uninitialized",
		"uninitiated",
		"uninoculated",
		"uninseminated",
		"uninsulated",
		"uninsured",
		"uninterpreted",
		"unintimidated",
		"unintoxicated",
		"unintroverted",
		"uninucleated",
		"uninverted",
		"uninvested",
		"uninvolved",
		"unissued",
		"unjaundiced",
		"unjointed",
		"unjustified",
		"unkeyed",
		"unkindled",
		"unlabelled",
		"unlacquered",
		"unlamented",
		"unlaminated",
		"unlarded",
		"unlaureled",
		"unlaurelled",
		"unleaded",
		"unleavened",
		"unled",
		"unlettered",
		"unlicenced",
		"unlighted",
		"unlimbered",
		"unlimited",
		"unlined",
		"unlipped",
		"unliquidated",
		"unlithified",
		"unlittered",
		"unliveried",
		"unlobed",
		"unlocalised",
		"unlocalized",
		"unlocated",
		"unlogged",
		"unlubricated",
		"unmagnified",
		"unmailed",
		"unmaimed",
		"unmaintained",
		"unmalted",
		"unmangled",
		"unmanifested",
		"unmanipulated",
		"unmannered",
		"unmanufactured",
		"unmapped",
		"unmarred",
		"unmastered",
		"unmatriculated",
		"unmechanised",
		"unmechanized",
		"unmediated",
		"unmedicated",
		"unmentioned",
		"unmerged",
		"unmerited",
		"unmetabolised",
		"unmetabolized",
		"unmetamorphosed",
		"unmethylated",
		"unmineralized",
		"unmitigated",
		"unmoderated",
		"unmodernised",
		"unmodernized",
		"unmodified",
		"unmodulated",
		"unmolded",
		"unmolested",
		"unmonitored",
		"unmortgaged",
		"unmotivated",
		"unmotorised",
		"unmotorized",
		"unmounted",
		"unmutated",
		"unmutilated",
		"unmyelinated",
		"unnaturalised",
		"unnaturalized",
		"unnotched",
		"unnourished",
		"unobligated",
		"unobstructed",
		"unoccupied",
		"unoiled",
		"unopposed",
		"unoptimised",
		"unordained",
		"unorganised",
		"unorganized",
		"unoriented",
		"unoriginated",
		"unornamented",
		"unoxidized",
		"unoxygenated",
		"unpacified",
		"unpackaged",
		"unpaired",
		"unparalleled",
		"unparallelled",
		"unparasitized",
		"unpardoned",
		"unparodied",
		"unpartitioned",
		"unpasteurised",
		"unpasteurized",
		"unpatented",
		"unpaved",
		"unpedigreed",
		"unpenetrated",
		"unpenned",
		"unperfected",
		"unperjured",
		"unpersonalised",
		"unpersuaded",
		"unperturbed",
		"unperverted",
		"unpestered",
		"unphosphorylated",
		"unphotographed",
		"unpigmented",
		"unpiloted",
		"unpledged",
		"unploughed",
		"unplumbed",
		"unpoised",
		"unpolarized",
		"unpoliced",
		"unpolled",
		"unpopulated",
		"unposed",
		"unpowered",
		"unprecedented",
		"unpredicted",
		"unprejudiced",
		"unpremeditated",
		"unprescribed",
		"unpressurised",
		"unpressurized",
		"unpriced",
		"unprimed",
		"unprincipled",
		"unprivileged",
		"unprized",
		"unprocessed",
		"unprofaned",
		"unprofessed",
		"unprohibited",
		"unprompted",
		"unpronounced",
		"unproposed",
		"unprospected",
		"unproved",
		"unpruned",
		"unpublicised",
		"unpublicized",
		"unpublished",
		"unpuckered",
		"unpunctuated",
		"unpurified",
		"unqualified",
		"unquantified",
		"unquenched",
		"unquoted",
		"unranked",
		"unrated",
		"unratified",
		"unrebuked",
		"unreckoned",
		"unrecompensed",
		"unreconciled",
		"unreconstructed",
		"unrectified",
		"unredeemed",
		"unrefined",
		"unrefreshed",
		"unrefrigerated",
		"unregarded",
		"unregimented",
		"unregistered",
		"unregulated",
		"unrehearsed",
		"unrelated",
		"unrelieved",
		"unrelinquished",
		"unrenewed",
		"unrented",
		"unrepealed",
		"unreplicated",
		"unreprimanded",
		"unrequited",
		"unrespected",
		"unrestricted",
		"unretained",
		"unretarded",
		"unrevised",
		"unrevived",
		"unrevoked",
		"unrifled",
		"unripened",
		"unrivaled",
		"unrivalled",
		"unroasted",
		"unroofed",
		"unrounded",
		"unruffled",
		"unsalaried",
		"unsalted",
		"unsanctified",
		"unsanctioned",
		"unsanded",
		"unsaponified",
		"unsated",
		"unsatiated",
		"unsatisfied",
		"unsaturated",
		"unscaled",
		"unscarred",
		"unscathed",
		"unscented",
		"unscheduled",
		"unschooled",
		"unscreened",
		"unscripted",
		"unseamed",
		"unseared",
		"unseasoned",
		"unseeded",
		"unsegmented",
		"unsegregated",
		"unselected",
		"unserviced",
		"unsexed",
		"unshamed",
		"unshaped",
		"unsharpened",
		"unsheared",
		"unshielded",
		"unshifted",
		"unshirted",
		"unshoed",
		"unshuttered",
		"unsifted",
		"unsighted",
		"unsilenced",
		"unsimplified",
		"unsized",
		"unskewed",
		"unskinned",
		"unslaked",
		"unsliced",
		"unsloped",
		"unsmoothed",
		"unsoiled",
		"unsoldered",
		"unsolicited",
		"unsolved",
		"unsophisticated",
		"unsorted",
		"unsourced",
		"unsoured",
		"unspaced",
		"unspanned",
		"unspecialised",
		"unspecialized",
		"unspecified",
		"unspiced",
		"unstaged",
		"unstandardised",
		"unstandardized",
		"unstapled",
		"unstarched",
		"unstarred",
		"unstated",
		"unsteadied",
		"unstemmed",
		"unsterilised",
		"unsterilized",
		"unstickered",
		"unstiffened",
		"unstifled",
		"unstigmatised",
		"unstigmatized",
		"unstilted",
		"unstippled",
		"unstipulated",
		"unstirred",
		"unstocked",
		"unstoked",
		"unstoppered",
		"unstratified",
		"unstressed",
		"unstriped",
		"unstructured",
		"unstudied",
		"unstumped",
		"unsubdued",
		"unsubmitted",
		"unsubsidised",
		"unsubsidized",
		"unsubstantiated",
		"unsubstituted",
		"unsugared",
		"unsummarized",
		"unsupervised",
		"unsuprised",
		"unsurveyed",
		"unswayed",
		"unsweetened",
		"unsyllabled",
		"unsymmetrized",
		"unsynchronised",
		"unsynchronized",
		"unsyncopated",
		"unsyndicated",
		"unsynthesized",
		"unsystematized",
		"untagged",
		"untainted",
		"untalented",
		"untanned",
		"untaped",
		"untapered",
		"untargeted",
		"untarnished",
		"untattooed",
		"untelevised",
		"untempered",
		"untenanted",
		"unterminated",
		"untextured",
		"unthickened",
		"unthinned",
		"unthrashed",
		"unthreaded",
		"unthrottled",
		"unticketed",
		"untiled",
		"untilled",
		"untilted",
		"untimbered",
		"untinged",
		"untinned",
		"untinted",
		"untitled",
		"untoasted",
		"untoggled",
		"untoothed",
		"untopped",
		"untoughened",
		"untracked",
		"untrammeled",
		"untrammelled",
		"untranscribed",
		"untransduced",
		"untransferred",
		"untranslated",
		"untransmitted",
		"untraumatized",
		"untraversed",
		"untufted",
		"untuned",
		"untutored",
		"unupgraded",
		"unupholstered",
		"unutilised",
		"unutilized",
		"unuttered",
		"unvaccinated",
		"unvacuumed",
		"unvalidated",
		"unvalued",
		"unvandalized",
		"unvaned",
		"unvanquished",
		"unvapourised",
		"unvapourized",
		"unvaried",
		"unvariegated",
		"unvarnished",
		"unvented",
		"unventilated",
		"unverbalised",
		"unverbalized",
		"unverified",
		"unversed",
		"unvetted",
		"unvictimized",
		"unviolated",
		"unvitrified",
		"unvocalized",
		"unvoiced",
		"unwaged",
		"unwarped",
		"unwarranted",
		"unwaxed",
		"unweakened",
		"unweaned",
		"unwearied",
		"unweathered",
		"unwebbed",
		"unwed",
		"unwedded",
		"unweeded",
		"unweighted",
		"unwelded",
		"unwinterized",
		"unwired",
		"unwitnessed",
		"unwonted",
		"unwooded",
		"unworshipped",
		"unwounded",
		"unzoned",
		"uprated",
		"uprighted",
		"upsized",
		"upswelled",
		"vacuolated",
		"valanced",
		"valueoriented",
		"varied",
		"vascularised",
		"vascularized",
		"vasectomised",
		"vaunted",
		"vectorised",
		"vectorized",
		"vegged",
		"verdured",
		"verified",
		"vermiculated",
		"vernacularized",
		"versified",
		"verticillated",
		"vesiculated",
		"vied",
		"vilified",
		"virtualised",
		"vitrified",
		"vivified",
		"volumed",
		"vulcanised",
		"wabbled",
		"wafered",
		"waisted",
		"walleyed",
		"wared",
		"warmblooded",
		"warmhearted",
		"warted",
		"waterbased",
		"waterbed",
		"watercooled",
		"watersaturated",
		"watershed",
		"wavegenerated",
		"waxweed",
		"weakhearted",
		"weakkneed",
		"weakminded",
		"wearied",
		"weatherised",
		"weatherstriped",
		"webfooted",
		"wedgeshaped",
		"weed",
		"weeviled",
		"welladapted",
		"welladjusted",
		"wellbred",
		"wellconducted",
		"welldefined",
		"welldisposed",
		"welldocumented",
		"wellequipped",
		"wellestablished",
		"wellfavored",
		"wellfed",
		"wellgrounded",
		"wellintentioned",
		"wellmannered",
		"wellminded",
		"wellorganised",
		"wellrounded",
		"wellshaped",
		"wellstructured",
		"whinged",
		"whinnied",
		"whiplashed",
		"whiskered",
		"wholehearted",
		"whorled",
		"widebased",
		"wideeyed",
		"widemeshed",
		"widemouthed",
		"widenecked",
		"widespaced",
		"wilded",
		"wildered",
		"wildeyed",
		"willinghearted",
		"windspeed",
		"winterfed",
		"winterfeed",
		"winterised",
		"wirehaired",
		"wised",
		"witchweed",
		"woaded",
		"wombed",
		"wooded",
		"woodshed",
		"wooled",
		"woolled",
		"woollyhaired",
		"woollystemmed",
		"woolyhaired",
		"woolyminded",
		"wormholed",
		"wormshaped",
		"wrappered",
		"wretched",
		"wronghearted",
		"ycleped",
		"yolked",
		"zincified",
		"zinckified",
		"zinkified",
		"zombified",
	];
};

},{}],52:[function(require,module,exports){
module.exports = function() {
	return [
		"to",
		"which",
		"who",
		"whom",
		"that",
		"whose",
		"after",
		"although",
		"as",
		"because",
		"before",
		"even if",
		"even though",
		"how",
		"if",
		"in order that",
		"inasmuch",
		"lest",
		"once",
		"provided",
		"since",
		"so that",
		"than",
		"though",
		"till",
		"unless",
		"until",
		"when",
		"whenever",
		"where",
		"whereas",
		"wherever",
		"whether",
		"while",
		"why",
		"by the time",
		"supposing",
		"no matter",
		"how",
		"what",
		"won't",
		"do",
		"does",
		"'ll",
		":",
	];
};

},{}],53:[function(require,module,exports){
/** @module config/transitionWords */

/**
 * Returns an array with transition words to be used by the assessments.
 * @returns {Array} The array filled with transition words.
 */
module.exports = function() {
	return [ "above all", "accordingly", "additionally", "after all", "after that", "afterward", "afterwards", "albeit",
		"all in all", "all of a sudden", "all things considered", "also", "although", "although this may be true", "altogether",
		"analogous to", "another", "another key point", "as a matter of fact", "as a result", "as an illustration",
		"as can be seen", "as has been noted", "as I have noted", "as I have said", "as I have shown", "as long as",
		"as much as", "as shown above", "as soon as", "as well as", "at any rate", "at first", "at last", "at least",
		"at length", "at the present time", "at the same time", "at this instant", "at this point", "at this time",
		"balanced against", "basically", "be that as it may", "because", "before", "being that", "besides", "but",
		"by all means", "by and large", "by comparison", "by the same token", "by the time", "certainly", "chiefly",
		"comparatively", "compared to", "concurrently", "consequently", "contrarily", "conversely", "correspondingly",
		"coupled with", "despite", "different from", "doubtedly", "due to", "during", "e.g.", "earlier", "emphatically",
		"equally", "equally important", "especially", "even if", "even more", "even so", "even though", "eventually",
		"evidently", "explicitly", "finally", "first thing to remember", "firstly", "following", "for example",
		"for fear that", "for instance", "for one thing", "for that reason", "for the most part", "for the purpose of",
		"for the same reason", "for this purpose", "for this reason", "formerly", "forthwith", "fourthly",
		"from time to time", "further", "furthermore", "generally", "given that", "given these points",
		"hence", "henceforth", "however", "i.e.", "identically", "important to realize", "in a word", "in addition",
		"in another case", "in any case", "in any event", "in brief", "in case", "in conclusion", "in contrast",
		"in detail", "in due time", "in effect", "in either case", "in essence", "in fact", "in general", "in light of",
		"in like fashion", "in like manner", "in order that", "in order to", "in other words", "in particular", "in reality",
		"in short", "in similar fashion", "in spite of", "in sum", "in summary", "in that case", "in the event that",
		"in the final analysis", "in the first place", "in the fourth place", "in the hope that", "in the light of",
		"in the long run", "in the meantime", "in the same fashion", "in the same way", "in the second place",
		"in the third place", "in this case", "in this situation", "in time", "in truth", "in view of", "inasmuch as",
		"indeed", "instead", "last", "lastly", "later", "lest", "likewise", "markedly", "meanwhile", "moreover",
		"most compelling evidence", "most important", "must be remembered", "nevertheless", "nonetheless", "nor",
		"not to mention",  "notwithstanding", "now that", "obviously", "occasionally", "of course", "on account of",
		"on balance", "on condition that", "on one hand", "on the condition that", "on the contrary", "on the negative side",
		"on the other hand", "on the positive side", "on the whole", "on this occasion", "once", "once in a while",
		"only if", "otherwise", "overall", "owing to", "particularly", "point often overlooked", "presently",
		"previously", "prior to", "provided that", "rather", "regardless", "secondly", "seeing that",
		"shortly", "significantly", "similarly", "simultaneously", "since", "so", "so as to", "so far", "so long as",
		"so that", "soon", "sooner or later", "specifically", "still", "straightaway", "subsequently", "such as",
		"summing up", "surely", "surprisingly", "take the case of", "than", "that is", "that is to say", "then",
		"then again", "thereafter", "therefore", "thereupon", "thirdly", "this time", "though", "thus",
		"till", "to be sure", "to begin with", "to clarify", "to conclude", "to demonstrate", "to emphasize",
		"to enumerate", "to explain", "to illustrate", "too", "to list", "to point out", "to put it another way",
		"to put it differently", "to repeat", "to rephrase it", "to say nothing of", "to sum up", "to summarize",
		"to that end", "to the end that", "to this end", "together with", "undeniably", "under those circumstances",
		"undoubtedly", "unless", "unlike", "unquestionably", "until", "until now", "up against", "up to the present time",
		"vis a vis", "what's more", "when", "whenever", "whereas", "while", "while it may be true", "while this may be true",
		"with attention to", "with the result that", "with this in mind", "with this intention", "with this purpose in mind",
		"without a doubt", "without delay", "without doubt", "without reservation" ];
};


},{}],54:[function(require,module,exports){
/** @module config/twoPartTransitionWords */

/**
 * Returns an array with two-part transition words to be used by the assessments.
 * @returns {Array} The array filled with two-part transition words.
 */
module.exports = function() {
	return [ [ "both", "and" ], [ "if", "then" ], [ "not only", "but also" ], [ "neither", "nor" ], [ "either", "or" ], [ "not", "but" ],
		[ "whether", "or" ], [ "no sooner", "than" ] ];
};

},{}],55:[function(require,module,exports){
/** @module analyses/findKeywordInFirstParagraph */

var matchParagraphs = require( "../stringProcessing/matchParagraphs.js" );
var wordMatch = require( "../stringProcessing/matchTextWithWord.js" );

/**
 * Counts the occurrences of the keyword in the first paragraph, returns 0 if it is not found,
 * if there is no paragraph tag or 0 hits, it checks for 2 newlines, otherwise returns the keyword
 * count of the complete text.
 *
 * @param {Paper} paper The text to check for paragraphs.
 * @returns {number} The number of occurences of the keyword in the first paragraph.
 */
module.exports = function( paper ) {
	var paragraph = matchParagraphs( paper.getText() );
	return wordMatch( paragraph[ 0 ], paper.getKeyword(), paper.getLocale() );
};

},{"../stringProcessing/matchParagraphs.js":106,"../stringProcessing/matchTextWithWord.js":109}],56:[function(require,module,exports){
/** @module analyses/findKeywordInPageTitle */

var wordMatch = require( "../stringProcessing/matchTextWithWord.js" );

/**
 * Counts the occurrences of the keyword in the pagetitle. Returns the number of matches
 * and the position of the keyword.
 *
 * @param {object} paper The paper containing title and keyword.
 * @returns {object} result with the matches and position.
 */

module.exports = function( paper ) {
	var title = paper.getTitle();
	var keyword = paper.getKeyword();
	var locale = paper.getLocale();
	var result = { matches: 0, position: -1 };
	result.matches = wordMatch( title, keyword, locale );
	result.position = title.toLocaleLowerCase().indexOf( keyword );

	return result;
};

},{"../stringProcessing/matchTextWithWord.js":109}],57:[function(require,module,exports){
var createRegexFromDoubleArray = require( "../stringProcessing/createRegexFromDoubleArray.js" );
var getSentences = require( "../stringProcessing/getSentences.js" );
var matchWordInSentence = require( "../stringProcessing/matchWordInSentence.js" );
var normalizeSingleQuotes = require( "../stringProcessing/quotes.js" ).normalizeSingle;
var getTransitionWords = require( "../helpers/getTransitionWords.js" );

var forEach = require( "lodash/forEach" );
var filter = require( "lodash/filter" );
var memoize = require( "lodash/memoize" );

var createRegexFromDoubleArrayCached = memoize( createRegexFromDoubleArray );
/**
 * Matches the sentence against two part transition words.
 *
 * @param {string} sentence The sentence to match against.
 * @param {Array} twoPartTransitionWords The array containing two-part transition words.
 * @returns {Array} The found transitional words.
 */
var matchTwoPartTransitionWords = function( sentence, twoPartTransitionWords ) {
	sentence = normalizeSingleQuotes( sentence );
	var twoPartTransitionWordsRegex = createRegexFromDoubleArrayCached( twoPartTransitionWords );
	return sentence.match( twoPartTransitionWordsRegex );
};

/**
 * Matches the sentence against transition words.
 *
 * @param {string} sentence The sentence to match against.
 * @param {Array} transitionWords The array containing transition words.
 * @returns {Array} The found transitional words.
 */
var matchTransitionWords = function( sentence, transitionWords ) {
	sentence = normalizeSingleQuotes( sentence );

	var matchedTransitionWords = filter( transitionWords, function( word ) {
		return matchWordInSentence( word, sentence );
	} );

	return matchedTransitionWords;
};

/**
 * Checks the passed sentences to see if they contain transition words.
 *
 * @param {Array} sentences The sentences to match against.
 * @param {Object} transitionWords The object containing both transition words and two part transition words.
 * @returns {Array} Array of sentence objects containing the complete sentence and the transition words.
 */
var checkSentencesForTransitionWords = function( sentences, transitionWords ) {
	var results = [];

	forEach( sentences, function( sentence ) {
		var twoPartMatches = matchTwoPartTransitionWords( sentence, transitionWords.twoPartTransitionWords() );

		if ( twoPartMatches !== null ) {
			results.push( {
				sentence: sentence,
				transitionWords: twoPartMatches,
			} );

			return;
		}

		var transitionWordMatches = matchTransitionWords( sentence, transitionWords.transitionWords() );

		if ( transitionWordMatches.length !== 0 ) {
			results.push( {
				sentence: sentence,
				transitionWords: transitionWordMatches,
			} );

			return;
		}
	} );

	return results;
};

/**
 * Checks how many sentences from a text contain at least one transition word or two-part transition word
 * that are defined in the transition words config and two part transition words config.
 *
 * @param {Paper} paper The Paper object to get text from.
 * @returns {object} An object with the total number of sentences in the text
 * and the total number of sentences containing one or more transition words.
 */
module.exports = function( paper ) {
	var locale = paper.getLocale();
	var transitionWords = getTransitionWords( locale );
	var sentences = getSentences( paper.getText() );
	var sentenceResults = checkSentencesForTransitionWords( sentences, transitionWords );

	return {
		totalSentences: sentences.length,
		sentenceResults: sentenceResults,
		transitionWordSentences: sentenceResults.length,
	};
};

},{"../helpers/getTransitionWords.js":35,"../stringProcessing/createRegexFromDoubleArray.js":96,"../stringProcessing/getSentences.js":101,"../stringProcessing/matchWordInSentence.js":110,"../stringProcessing/quotes.js":111,"lodash/filter":263,"lodash/forEach":267,"lodash/memoize":295}],58:[function(require,module,exports){
/**
 * Returns an array with exceptions for the sentence beginning researcher.
 * @returns {Array} The array filled with exceptions.
 */
module.exports = function() {
	return [
		// Definite articles:
		"le", "la", "les",
		// Indefinite articles:
		"un", "une",
		// Numbers 2-10 ('une' is already included in the indefinite articles):
		"deux", "trois", "quatre", "cinq", "six", "sept", "huit", "neuf", "dix",
		// Demonstrative pronouns:
		"celui", "celle", "ceux", "celles", "celui-ci", "celle-là", "celui-là", "celle-ci",
	];
};


},{}],59:[function(require,module,exports){
/** @module config/transitionWords */

/**
 * Returns an array with transition words to be used by the assessments.
 * @returns {Array} The array filled with transition words.
 */
module.exports = function() {
	return [
		"à cause de", "à ce propos", "à ce sujet", "à condition que", "à l'encontre de", "à l'image de", "à l'inverse",
		"à l'inverse de", "à mesure que", "à moins que", "à première vue", "à savoir", "à seule fin que", "à supposer que",
		"à vrai dire", "afin que", "ainsi", "ainsi donc", "ainsi que", "alors", "alors que", "apès réflexion", "après cela",
		"après que", "après réflexion", "après tout", "attendu que", "au cas où", "au contraire", "au fur et à mesure que",
		"au lieu de", "au même temps", "au moment où", "au point que", "aussi", "aussi bien que", "aussitôt que", "autant que",
		"autrement dit", "avant que", "avant tout", "ayant fini", "bien que", "c'est à dire que", "c'est ainsi que",
		"c'est le cas de", "c'est pourquoi", "c'est qu'en effet", "c'est-à-dire", "ça confirme que", "ça montre que",
		"ça prouve que", "car", "cela dit", "cela étant", "cependant", "cependant que", "comme l'illustre", "comme le souligne",
		"comme quoi", "comme si", "conséquemment", "contrairement à", "d'abord", "d'ailleurs", "d'après", "d'autant plus que",
		"d'autant que", "d'autre part", "d'ici là", "d'un autre côté", "d'un côté", "d'une facon générale ''", "dans ce cas",
		"dans ces conditions", "dans l'ensemble", "dans l'hypothèse où", "dans la mesure où", "dans le cadre de",
		"dans le cas où", "dans un autre ordre d'idée", "de crainte que", "de façon à ce que", "de façon que", "de fait",
		"de l'autre côté", "de la même façon que", "de manière que", "de même", "de même qua", "de même que", "de peur que",
		"de prime abord", "de sorte que", "de surcroît", "de telle manière que", "de telle sorte que", "de toute façon",
		"depuis que", "dès lors que", "dès qua", "dès que", "désormais", "deuxièmement", "donc", "dorénavant", "du fait que",
		"du moment que", "du point de vue de", "du reste", "effectivement", "également", "en admettant que", "en attendant que",
		"en bref", "en cas que", "en ce domaine", "en cela", "en concequence", "en conclusion", "en conséquence",
		"en d'autres termes", "en définitive", "en dépit de", "en dernier lieu", "en deuxième lieu", "en effet", "en face de",
		"en fait", "en fin de compte", "en général", "en guise de conclusion", "en même temps que", "en outre", "en particulier",
		"en plus", "en premier lieu", "en raison de", "en réalité", "en règle générale", "en résumé", "en revanche", "en second lieu",
		"en somme", "en sorte que", "en supposant que", "en tant que", "en tout cas", "en troisième lieu", "en un mot", "en vue que",
		"encore que", "enfin", "ensuite", "entre autres", "et puis", "étant donné qua", "étant donné que", "face à", "finalement",
		"globalement", "grâce à", "il faut dire aussi que", "jusqu'à ce que", "la preuve c'est que", "la-dessus", "loin que", "lorsque",
		"mais", "malgré", "malgré cela", "malgré tout", "même si", "mis à part le fait que", "néanmoins", "notamment", "nul doute que",
		"ou bien", "où que", "par ailleurs", "par conséquent", "par contre", "par example", "par exemple", "par la suite",
		"par rapport à", "par suite", "par suite de", "parce que", "pareillement", "partant", "partant de ce fait", "pas du tout",
		"pendant que", "pour ainsi dire", "pour ces raisons", "pour cette raison", "pour conclure", "pour peu que", "pour que", "pour résumé",
		"pourtant", "pourvu que", "premièrement", "probablement", "puis", "puisque", "pur toutes ces raisons", "quand bien même que",
		"quand même", "quant à", "quant même", "quel que soit", "qui que", "quoi qu'il en soit", "quoi que", "quoiqu'il en soit",
		"quoique", "sans doute", "selon", "selon que", "semblablement", "si bien que", "si ce n'est que", "sinon", "sitôt que",
		"somme toute", "sous prétexte que", "suivant", "suivant que", "supposé que", "tandis que", "tant et si bien que", "tant que",
		"tellement que", "tout bien pesé", "tout compte fait", "tout d'abord", "tout de même", "toutefois", "troisièmement", "vu que",
	];
};

},{}],60:[function(require,module,exports){
/** @module config/twoPartTransitionWords */

/**
 * Returns an array with two-part transition words to be used by the assessments.
 * @returns {Array} The array filled with two-part transition words.
 */
module.exports = function() {
	return [
		[ "à première vue", "mais à bien considérer les choses" ], [ "à première vue", "mais toute réflexion faite" ],
		[ "aussi", "que" ], [ "certes", "mais" ], [ "d'un côté", "de l'autre côté" ], [ "d'un côté", "de l'autre" ],
		[ "d'une part", "d'autre part" ], [ "d'une parte", "de l'autre parte" ], [ "non seulement", "mais aussi" ],
		[ "non seulement", "mais en outre" ], [ "non seulement", "mais encore" ], [ "quelque", "que" ], [ "si", "que" ],
		[ "soit", "soit" ], [ "tantôt", "tantôt" ], [ "tout d'abord", "ensuite" ], [ "tout", "que" ],
	];
};

},{}],61:[function(require,module,exports){
/**
 * Returns an array with exceptions for the sentence beginning researcher.
 * @returns {Array} The array filled with exceptions.
 */
module.exports = function() {
	return [
		// Definite articles:
		"das", "dem", "den", "der", "des", "die",
		// Indefinite articles:
		"ein", "eine", "einem", "einen", "einer", "eines",
		// Numbers 1-10:
		"eins", "zwei", "drei", "vier", "fünf", "sechs", "sieben", "acht", "neun", "zehn",
		// Demonstrative pronouns:
		"denen", "deren", "derer", "dessen", "diese", "diesem", "diesen", "dieser", "dieses", "jene",
		"jenem", "jenen", "jener", "jenes",
	];
};



},{}],62:[function(require,module,exports){
/** @module config/transitionWords */

/**
 * Returns an array with transition words to be used by the assessments.
 * @returns {Array} The array filled with transition words.
 */
module.exports = function() {
	return [ "aber", "abgesehen von", "alldieweil", "allerdings", "als dass", "also", "anderenteils",
		"andererseits", "andernteils", "anders ausgedrückt", "anders ausgedrueckt", "anders formuliert",
		"anders gefasst", "anders gefragt", "anders gesagt", "anders gesprochen", "anfaenglich", "anfänglich",
		"anfangs", "angenommen", "anschliessend", "anschließend", "auch wenn", "auf grund", "auf jeden Fall", "aufgrund",
		"ausgenommen", "aus diesem Grund", "ausser", "außer", "ausser dass", "außer dass", "ausser wenn", "außer wenn",
		"ausserdem", "außerdem", "beispielsweise", "besser ausgedrückt", "besser ausgedrueckt", "besser formuliert",
		"besser gesagt", "besser gesprochen", "bevor", "beziehungsweise", "bloss dass", "bloß dass",
		"bspw.", "bzw.", "d.h.", "da", "dabei", "dadurch", "dafuer", "dafür", "dagegen", "daher", "dahingegen",
		"danach", "dann", "darauf", "darum", "das heisst", "das heißt", "dass", "davor", "dazu", "dementgegen",
		"dementsprechend", "demgegenüber", "demgegenueber", "demgemaess", "demgemäß", "demzufolge", "denn", "dennoch",
		"des Weiteren", "deshalb", "dessen ungeachtet", "desungeachtet", "deswegen", "doch", "dort", "drittens",
		"ebenfalls", "ebenso wie", "ehe", "einerseits", "einesteils", "entsprechend", "erstens", "falls", "ferner",
		"folglich", "genauso", "genauso wie", "hierdurch", "hierzu", "hingegen", "im Folgenden", "im Gegensatz dazu",
		"im Grunde genommen", "immerhin", "indem", "infolge", "infolgedessen", "inzwischen", "je nachdem",
		"jedenfalls", "jedoch", "kurzum", "m.a.W.", "mit anderen Worten", "nachdem", "nebenher",
		"nichtsdestotrotz", "nichtsdestoweniger", "ob", "obenrein", "obgleich", "obschon", "obwohl", "obzwar",
		"schliesslich", "schließlich", "seit", "seitdem", "sobald", "sodass", "sofern", "solange", "somit",
		"sondern", "sooft", "sowie", "später", "trotz", "trotzdem", "überdies", "überigens", "ueberdies", "ueberigens",
		"umso mehr, als", "umso weniger, als", "unbeschadet dessen", "und zwar", "unter dem Strich", "vielmehr",
		"vorausgesetzt", "vorher", "waehrend", "während", "wegen", "weil", "weiter", "weiterhin", "wenn", "wenngleich",
		"wennschon", "wennzwar", "weshalb", "widrigenfalls", "wiewohl", "wohingegen", "zudem", "zuerst",
		"zufolge", "zuletzt", "zum beispiel", "zumal", "zuvor", "zwar", "zweitens" ];
};

},{}],63:[function(require,module,exports){
/** @module config/twoPartTransitionWords */

/**
 * Returns an array with two-part transition words to be used by the assessments.
 * @returns {Array} The array filled with two-part transition words.
 */
module.exports = function() {
	return [ [ "anstatt", "dass" ], [ "bald", "bald" ], [ "dadurch", "dass" ], [ "dessen ungeachtet", "dass" ],
		[ "entweder", "oder" ], [ "einerseits", "andererseits" ], [ "erst", "wenn" ], [ "je", "desto" ], [ "je", "umsto" ],
		[ "nicht nur", "sondern auch" ], [ "ob", "oder" ], [ "ohne", "dass" ], [ "so", "dass" ], [ "sowohl", "als auch" ],
		[ "sowohl", "wie auch" ], [ "unbeschadet dessen", "dass" ], [ "weder", "noch" ], [ "wenn", "auch" ],
		[ "wenn", "schon" ], [ "nicht weil", "sondern" ]  ];
};

},{}],64:[function(require,module,exports){
/** @module analyses/getKeywordDensity */

var countWords = require( "../stringProcessing/countWords.js" );
var countWordOccurrences = require( "../stringProcessing/countWordOccurrences.js" );

/**
 * Calculates the keyword density .
 *
 * @param {object} paper The paper containing keyword and text.
  * @returns {number} The keyword density.
 */
module.exports = function( paper ) {
	var keyword = paper.getKeyword();
	var text = paper.getText();
	var locale = paper.getLocale();
	var wordCount = countWords( text );
	if ( wordCount === 0 ) {
		return 0;
	}
	var keywordCount = countWordOccurrences( text, keyword, locale );
	return ( keywordCount / wordCount ) * 100;
};

},{"../stringProcessing/countWordOccurrences.js":93,"../stringProcessing/countWords.js":94}],65:[function(require,module,exports){
/** @module analyses/getLinkStatistics */

var getLinks = require( "./getLinks.js" );
var findKeywordInUrl = require( "../stringProcessing/findKeywordInUrl.js" );
var getLinkType = require( "../stringProcessing/getLinkType.js" );
var checkNofollow = require( "../stringProcessing/checkNofollow.js" );
var urlHelper = require( "../stringProcessing/url.js" );

/**
 * Checks whether or not an anchor contains the passed keyword.
 * @param {string} keyword The keyword to look for.
 * @param {string} anchor The anchor to check against.
 * @param {string} locale The locale used for transliteration.
 * @returns {boolean} Whether or not the keyword was found.
 */
var keywordInAnchor = function( keyword, anchor, locale ) {
	if ( keyword === "" ) {
		return false;
	}

	return findKeywordInUrl( anchor, keyword, locale );
};

/**
 * Counts the links found in the text.
 *
 * @param {object} paper The paper object containing text, keyword and url.
 * @returns {object} The object containing all linktypes.
 * total: the total number of links found.
 * totalNaKeyword: the total number of links if keyword is not available.
 * keyword: Object containing all the keyword related counts and matches.
 * keyword.totalKeyword: the total number of links with the keyword.
 * keyword.matchedAnchors: Array with the anchors that contain the keyword.
 * internalTotal: the total number of links that are internal.
 * internalDofollow: the internal links without a nofollow attribute.
 * internalNofollow: the internal links with a nofollow attribute.
 * externalTotal: the total number of links that are external.
 * externalDofollow: the external links without a nofollow attribute.
 * externalNofollow: the internal links with a dofollow attribute.
 * otherTotal: all links that are not HTTP or HTTPS.
 * otherDofollow: other links without a nofollow attribute.
 * otherNofollow: other links with a nofollow attribute.
 */
var countLinkTypes = function( paper ) {
	var keyword = paper.getKeyword();
	var locale = paper.getLocale();
	var anchors = getLinks( paper.getText() );
	var permalink = paper.getPermalink();

	var linkCount = {
		total: anchors.length,
		totalNaKeyword: 0,
		keyword: {
			totalKeyword: 0,
			matchedAnchors: [],
		},
		internalTotal: 0,
		internalDofollow: 0,
		internalNofollow: 0,
		externalTotal: 0,
		externalDofollow: 0,
		externalNofollow: 0,
		otherTotal: 0,
		otherDofollow: 0,
		otherNofollow: 0,
	};

	for ( var i = 0; i < anchors.length; i++ ) {
		var currentAnchor = anchors[ i ];

		var anchorLink = urlHelper.getFromAnchorTag( currentAnchor );
		var linkToSelf = urlHelper.areEqual( anchorLink, permalink );

		if ( keywordInAnchor( keyword, currentAnchor, locale ) && ! linkToSelf ) {
			linkCount.keyword.totalKeyword++;
			linkCount.keyword.matchedAnchors.push( currentAnchor );
		}

		var linkType = getLinkType( currentAnchor, permalink );
		var linkFollow = checkNofollow( currentAnchor );

		linkCount[ linkType + "Total" ]++;
		linkCount[ linkType + linkFollow ]++;
	}

	return linkCount;
};

/**
 * Checks a text for anchors and returns an object with all linktypes found.
 *
 * @param {Paper} paper The paper object containing text, keyword and url.
 * @returns {Object} The object containing all linktypes.
 */
module.exports = function( paper ) {
	return countLinkTypes( paper );
};

},{"../stringProcessing/checkNofollow.js":91,"../stringProcessing/findKeywordInUrl.js":97,"../stringProcessing/getLinkType.js":100,"../stringProcessing/url.js":127,"./getLinks.js":66}],66:[function(require,module,exports){
/** @module analyses/getLinkStatistics */

var getAnchors = require( "../stringProcessing/getAnchorsFromText.js" );

/**
 * Checks a text for anchors and returns the number found.
 *
 * @param {Object} text The text
 * @returns {Array} An array with the anchors
 */
module.exports = function( text ) {
	return getAnchors( text );
};

},{"../stringProcessing/getAnchorsFromText.js":99}],67:[function(require,module,exports){
var countWords = require( "../stringProcessing/countWords.js" );
var matchParagraphs = require( "../stringProcessing/matchParagraphs.js" );
var filter = require( "lodash/filter" );

/**
 * Gets all paragraphs and their word counts from the text.
 *
 * @param {Paper} paper The paper object to get the text from.
 * @returns {Array} The array containing an object with the paragraph word count and paragraph text.
 */
module.exports = function( paper ) {
	var text = paper.getText();
	var paragraphs = matchParagraphs( text );
	var paragraphsLength = [];
	paragraphs.map( function( paragraph ) {
		paragraphsLength.push( {
			wordCount: countWords( paragraph ),
			text: paragraph,
		} );
	} );

	return filter( paragraphsLength, function( paragraphLength ) {
		return ( paragraphLength.wordCount > 0 );
	} );
};

},{"../stringProcessing/countWords.js":94,"../stringProcessing/matchParagraphs.js":106,"lodash/filter":263}],68:[function(require,module,exports){
var getSentences = require( "../stringProcessing/getSentences.js" );
var arrayToRegex = require( "../stringProcessing/createRegexFromArray.js" );
var stripSpaces = require( "../stringProcessing/stripSpaces.js" );
var stripHTMLTags = require( "../stringProcessing/stripHTMLTags.js" ).stripFullTags;
var matchWordInSentence = require( "../stringProcessing/matchWordInSentence.js" );
var normalizeSingleQuotes = require( "../stringProcessing/quotes.js" ).normalizeSingle;

var nonverbEndingEd = require( "./english/passivevoice-english/non-verb-ending-ed.js" )();
var determiners = require( "./english/passivevoice-english/determiners.js" )();

var auxiliaries = require( "./english/passivevoice-english/auxiliaries.js" )();
var irregulars = require( "./english/passivevoice-english/irregulars.js" )();
var stopwords = require( "./english/passivevoice-english/stopwords.js" )();

var filter = require( "lodash/filter" );
var isUndefined = require( "lodash/isUndefined" );
var forEach = require( "lodash/forEach" );
var includes = require( "lodash/includes" );

var auxiliaryRegex = arrayToRegex( auxiliaries );
var verbEndingInIngRegex = /\w+ing($|[ \n\r\t\.,'\(\)\"\+\-;!?:\/»«‹›<>])/ig;
var regularVerbsRegex = /\w+ed($|[ \n\r\t\.,'\(\)\"\+\-;!?:\/»«‹›<>])/ig;

var ingExclusionArray = [ "king", "cling", "ring", "being" ];
var irregularExclusionArray = [ "get", "gets", "getting", "got", "gotten" ];

/**
 * Returns the indices of a string in a sentence. If it is found multiple times, it will return multiple indices.
 *
 * @param {string} part The part to find in the sentence.
 * @param {string} sentence The sentence to check for parts.
 * @returns {Array} All indices found.
 */
function getIndicesOf( part, sentence ) {
	var startIndex = 0;
	var searchStringLength = part.length;
	var index, indices = [];
	while ( ( index = sentence.indexOf( part, startIndex ) ) > -1 ) {
		indices.push(
			{
				index: index,
				match: part,
			}
		);
		startIndex = index + searchStringLength;
	}
	return indices;
}

/**
 * Matches string with an array, returns the word and the index it was found on.
 *
 * @param {string} sentence The sentence to match the strings from the array to.
 * @param {Array} matches The array with strings to match.
 * @returns {Array} The array with matches, containing the index of the match and the matched string.
 * Returns an empty array if none are found.
 */
var matchArray = function( sentence, matches ) {
	var matchedParts = [];

	forEach( matches, function( part ) {
		part = stripSpaces( part );
		if ( ! matchWordInSentence( part, sentence ) ) {
			return;
		}
		matchedParts = matchedParts.concat( getIndicesOf( part, sentence ) );
	} );

	return matchedParts;
};

/**
 * Sorts the array on the index property of each entry.
 *
 * @param {Array} indices The array with indices.
 * @returns {Array} The sorted array with indices.
 */
var sortIndices = function( indices ) {
	return indices.sort( function( a, b ) {
		return ( a.index > b.index );
	} );
};

/**
 * Filters duplicate entries if the indices overlap.
 *
 * @param {Array} indices The array with indices to be filtered.
 * @returns {Array} The filtered array.
 */
var filterIndices = function( indices ) {
	indices = sortIndices( indices );
	for ( var i = 0; i < indices.length; i++ ) {
		// If the next index is within the range of the current index and the length of the word, remove it
		// This makes sure we don't match combinations twice, like "even though" and "though".
		if ( ! isUndefined( indices[ i + 1 ] ) && indices[ i + 1 ].index < indices[ i ].index + indices[ i ].match.length ) {
			indices.pop( i + 1 );
		}
	}
	return indices;
};

/**
 * Gets active verbs (ending in ing) to determine sentence breakers.
 *
 * @param {string} sentence The sentence to get the active verbs from.
 * @returns {Array} The array with valid matches.
 */
var getVerbsEndingInIng = function( sentence ) {
	// Matches the sentences with words ending in ing
	var matches = sentence.match( verbEndingInIngRegex ) || [];

	// Filters out words ending in -ing that aren't verbs.
	return filter( matches, function( match ) {
		return ! includes( ingExclusionArray, stripSpaces( match ) );
	} );
};

/**
 * Gets the indexes of sentence breakers (auxiliaries, stopwords and active verbs) to determine subsentences.
 * Stopwords are filtered because they can contain duplicate matches, like "even though" and "though".
 *
 * @param {string} sentence The sentence to check for indices of auxiliaries, stopwords and active verbs.
 * @returns {Array} The array with valid indices to use for determining subsentences.
 */
var getSentenceBreakers = function( sentence ) {
	sentence = sentence.toLocaleLowerCase();
	var auxiliaryIndices = matchArray( sentence, auxiliaries );

	var stopwordIndices = matchArray( sentence, stopwords );
	stopwordIndices = filterIndices( stopwordIndices );

	var ingVerbs = getVerbsEndingInIng( sentence );
	var ingVerbsIndices = matchArray( sentence, ingVerbs );

	// Concat all indices arrays and sort them.
	var indices = [].concat( auxiliaryIndices, stopwordIndices, ingVerbsIndices );
	return sortIndices( indices );
};

/**
 * Gets the subsentences from a sentence by determining sentence breakers.
 *
 * @param {string} sentence The sentence to split up in subsentences.
 * @returns {Array} The array with all subsentences of a sentence that have an auxiliary.
 */
var getSubsentences = function( sentence ) {
	var subSentences = [];

	sentence = normalizeSingleQuotes( sentence );

	// First check if there is an auxiliary word in the sentence
	if( sentence.match( auxiliaryRegex ) !== null ) {
		var indices = getSentenceBreakers( sentence );

		// Get the words after the found auxiliary
		for ( var i = 0; i < indices.length; i++ ) {
			var endIndex = sentence.length;
			if ( ! isUndefined( indices[ i + 1 ] ) ) {
				endIndex = indices[ i + 1 ].index;
			}

			// Cut the sentence from the current index to the endIndex (start of next breaker, of end of sentence).
			var subSentence = stripSpaces( sentence.substr( indices[ i ].index, endIndex - indices[ i ].index ) );
			subSentences.push( subSentence );
		}
	}

	// If a subsentence doesn't have an auxiliary, we don't need it, so it can be filtered out.
	subSentences = filter( subSentences, function( subSentence ) {
		return subSentence.match( auxiliaryRegex ) !== null;
	} );

	return subSentences;
};

/**
 * Gets regular passive verbs.
 *
 * @param {string} subSentence The sub sentence to check for passive verbs.
 * @returns {Array} The array with all matched verbs.
 */
var getRegularVerbs = function( subSentence ) {
	// Matches the sentences with words ending in ed
	var matches = subSentence.match( regularVerbsRegex ) || [];

	// Filters out words ending in -ed that aren't verbs.
	return filter( matches, function( match ) {
		return ! includes( nonverbEndingEd, stripSpaces( match ) );
	} );
};

/**
 * Loops through a list of words and detects if they are present in the sentence.
 *
 * @param {Array} wordList The list of words to filter through.
 * @param {string} sentence The sentence to check for matches.
 * @returns {Array} A list of detected words.
 */
var filterWordListInSentence = function( wordList, sentence ) {
	return filter( wordList, function( word ) {
		return matchWordInSentence( word, sentence );
	} );
};

/**
 * Checks whether the sentence contains an excluded verb.
 *
 * @param {string} sentence The sentence to check for excluded verbs.
 * @returns {boolean} Whether or not the sentence contains an excluded verb.
 */
var hasExcludedIrregularVerb = function( sentence ) {
	return filterWordListInSentence( irregularExclusionArray, sentence ).length !== 0;
};

/**
 * Gets irregular passive verbs.
 *
 * @param {string} sentence The sentence to check for passive verbs.
 * @returns {Array} The array with all matched verbs.
 */
var getIrregularVerbs = function( sentence ) {
	var irregularVerbs = filterWordListInSentence( irregulars, sentence );

	return filter( irregularVerbs, function( verb ) {
		// If rid is used with get, gets, getting, got or gotten, remove it.
		if ( verb !== "rid" ) {
			return true;
		}

		return ! hasExcludedIrregularVerb( sentence );
	} );
};

/**
 * Matches 'having' with a verb directly following it. If so, it is not passive.
 *
 * @param {string} subSentence The subsentence to check for the word 'having' and a verb
 * @param {Array} verbs The array with verbs to check.
 * @returns {boolean} True if it is an exception, false if it is not.
 */
var isHavingException = function( subSentence, verbs ) {
	// Match having with a verb directly following it. If so it is active.
	var indexOfHaving = subSentence.indexOf( "having" );

	if ( indexOfHaving > -1 ) {
		var verbIndices = matchArray( subSentence, verbs );

		if ( ! isUndefined( verbIndices[ 0 ] ) && ! isUndefined( verbIndices[ 0 ].index ) ) {
			// 7 is the number of characters of the word 'having' including space.
			return verbIndices[ 0 ].index  <= subSentence.indexOf( "having" ) + 7;
		}
	}
	return false;
};

/**
 * Match 'left'. If left is preceeded by `a` or `the`, it isn't a verb.
 *
 * @param {string} subSentence The subsentence to check for the word 'left'
 * @param {Array} verbs The array with verbs to check.
 * @returns {boolean} True if it is an exception, false if it is not.
 */
var isLeftException = function( subSentence, verbs ) {
	// Matches left with the or a preceeding.
	var matchLeft = subSentence.match( /(the|a)\sleft/ig ) || [];
	return matchLeft.length > 0 && verbs[ 0 ].match === "left";
};

/**
 * If the word 'fit' is preceeded by a determiner, it shouldn't be marked as active.
 *
 * @param {string} subSentence The subsentence to check for the word 'fit'
 * @returns {boolean} True if it is an exception, false if it is not.
 */
var isFitException = function( subSentence ) {
	var indexOfFit = subSentence.indexOf( "fit" );
	if ( indexOfFit > -1 ) {
		var subString = subSentence.substr( 0, indexOfFit );
		var determinerIndices = filterWordListInSentence( determiners, subString );
		return determinerIndices.length > 1;
	}
	return false;
};

/**
 * Gets the exceptions. Some combinations shouldn't be marked as passive, so we need to filter them out.
 *
 * @param {string} subSentence The subsentence to check for exceptions.
 * @param {array} verbs The array of verbs, used to determine exceptions.
 * @returns {boolean} Wether there is an exception or not.
 */
var getExceptions = function( subSentence, verbs ) {
	if ( isHavingException( subSentence, verbs ) ) {
		return true;
	}

	if ( isLeftException( subSentence, verbs ) ) {
		return true;
	}

	if ( isFitException( subSentence ) ) {
		return true;
	}

	return false;
};

/**
 * Checks the subsentence for any passive verb.
 *
 * @param {string} subSentence The subsentence to check for passives.
 * @returns {boolean} True if passive is found, false if no passive is found.
 */
var determinePassives = function( subSentence ) {
	var regularVerbs = getRegularVerbs( subSentence );
	var irregularVerbs = getIrregularVerbs( subSentence );
	var verbs = regularVerbs.concat( irregularVerbs );

	// Checks for exceptions in the found verbs.
	var exceptions = getExceptions( subSentence, verbs );

	// If there is any exception, this subsentence cannot be passive.
	return verbs.length > 0 && exceptions === false;
};

/**
 * Determines the number of passive sentences in the text.
 *
 * @param {Paper} paper The paper object to get the text from.
 * @returns {object} The number of passives found in the text and the passive sentences.
 */
module.exports = function( paper ) {
	var text = paper.getText();
	var sentences = getSentences( text );
	var passiveSentences = [];

	// Get subsentences for each sentence.
	forEach( sentences, function( sentence ) {
		var strippedSentence = stripHTMLTags( sentence );

		var subSentences = getSubsentences( strippedSentence );

		var passive = false;
		forEach( subSentences, function( subSentence ) {
			passive = passive || determinePassives( subSentence );
		} );

		if ( passive === true ) {
			passiveSentences.push( sentence );
		}
	} );

	return {
		total: sentences.length,
		passives: passiveSentences,
	};
};

},{"../stringProcessing/createRegexFromArray.js":95,"../stringProcessing/getSentences.js":101,"../stringProcessing/matchWordInSentence.js":110,"../stringProcessing/quotes.js":111,"../stringProcessing/stripHTMLTags.js":118,"../stringProcessing/stripSpaces.js":121,"./english/passivevoice-english/auxiliaries.js":48,"./english/passivevoice-english/determiners.js":49,"./english/passivevoice-english/irregulars.js":50,"./english/passivevoice-english/non-verb-ending-ed.js":51,"./english/passivevoice-english/stopwords.js":52,"lodash/filter":263,"lodash/forEach":267,"lodash/includes":272,"lodash/isUndefined":290}],69:[function(require,module,exports){
var getSentences = require( "../stringProcessing/getSentences.js" );
var getWords = require( "../stringProcessing/getWords.js" );
var stripSpaces = require( "../stringProcessing/stripSpaces.js" );
var stripTags = require( "../stringProcessing/stripHTMLTags.js" ).stripFullTags;
var getFirstWordExceptions = require( "../helpers/getFirstWordExceptions.js" );

var isEmpty = require( "lodash/isEmpty" );
var forEach = require( "lodash/forEach" );

/**
 * Compares the first word of each sentence with the first word of the following sentence.
 *
 * @param {string} currentSentenceBeginning The first word of the current sentence.
 * @param {string} nextSentenceBeginning The first word of the next sentence.
 * @returns {boolean} Returns true if sentence beginnings match.
 */
var startsWithSameWord = function( currentSentenceBeginning, nextSentenceBeginning ) {
	if ( ! isEmpty( currentSentenceBeginning ) && currentSentenceBeginning === nextSentenceBeginning ) {
		return true;
	}

	return false;
};

/**
 * Counts the number of similar sentence beginnings.
 *
 * @param {Array} sentenceBeginnings The array containing the first word of each sentence.
 * @param {Array} sentences The array containing all sentences.
 * @returns {Array} The array containing the objects containing the first words and the corresponding counts.
 */
var compareFirstWords = function( sentenceBeginnings, sentences ) {
	var consecutiveFirstWords = [];
	var foundSentences = [];
	var sameBeginnings = 1;

	forEach( sentenceBeginnings, function( beginning, i ) {
		var currentSentenceBeginning = beginning;
		var nextSentenceBeginning = sentenceBeginnings[ i + 1 ];
		foundSentences.push( sentences[ i ] );

		if ( startsWithSameWord( currentSentenceBeginning, nextSentenceBeginning ) ) {
			sameBeginnings++;
		} else {
			consecutiveFirstWords.push( { word: currentSentenceBeginning, count: sameBeginnings, sentences: foundSentences } );
			sameBeginnings = 1;
			foundSentences = [];
		}
	} );

	return consecutiveFirstWords;
};

/**
 * Sanitizes the sentence.
 *
 * @param {string} sentence The sentence to sanitize.
 * @returns {string} The sanitized sentence.
 */
function sanitizeSentence( sentence ) {
	sentence = stripTags( sentence );
	sentence = sentence.replace( /^[^A-Za-z0-9]/, "" );

	return sentence;
}

/**
 * Retrieves the first word from the sentence.
 *
 * @param {string} sentence The sentence to retrieve the first word from.
 * @param {Array} firstWordExceptions Exceptions to match against.
 * @returns {string} The first word of the sentence.
 */
function getSentenceBeginning( sentence, firstWordExceptions ) {
	sentence = sanitizeSentence( sentence );

	var words = getWords( stripSpaces( sentence ) );

	var firstWord = words[ 0 ].toLocaleLowerCase();

	if ( firstWordExceptions.indexOf( firstWord ) > -1 && words.length > 1 ) {
		firstWord += " " + words[ 1 ];
	}

	return firstWord;
}
/**
 * Gets the first word of each sentence from the text, and returns an object containing the first word of each sentence and the corresponding counts.
 *
 * @param {Paper} paper The Paper object to get the text from.
 * @returns {Object} The object containing the first word of each sentence and the corresponding counts.
 */
module.exports = function( paper ) {
	var sentences = getSentences( paper.getText() );
	var firstWordExceptions = getFirstWordExceptions( paper.getLocale() )();

	var sentenceBeginnings = sentences.map( function( sentence ) {
		return getSentenceBeginning( sentence, firstWordExceptions );
	} );

	return compareFirstWords( sentenceBeginnings, sentences );
};



},{"../helpers/getFirstWordExceptions.js":33,"../stringProcessing/getSentences.js":101,"../stringProcessing/getWords.js":104,"../stringProcessing/stripHTMLTags.js":118,"../stringProcessing/stripSpaces.js":121,"lodash/forEach":267,"lodash/isEmpty":278}],70:[function(require,module,exports){
var getSubheadingContents = require( "../stringProcessing/getSubheadings.js" ).getSubheadingContents;
var stripTags = require( "../stringProcessing/stripHTMLTags.js" ).stripFullTags;
var forEach = require( "lodash/forEach" );

/**
 * Gets the subheadings from the text and returns the length of these subheading in an array.
 * @param {Paper} paper The Paper object to get the text from.
 * @returns {Array} The array with the length of each subheading.
 */
module.exports = function( paper ) {
	var text = paper.getText();
	var matches = getSubheadingContents( text );

	var subHeadings = [];
	forEach( matches, function( subHeading ) {
		subHeading = stripTags( subHeading ).length;
		if ( subHeading > 0 ) {
			subHeadings.push( subHeading );
		}
	} );

	return subHeadings;
};

},{"../stringProcessing/getSubheadings.js":103,"../stringProcessing/stripHTMLTags.js":118,"lodash/forEach":267}],71:[function(require,module,exports){
var getSubheadingsContents = require( "../stringProcessing/getSubheadings.js" ).getSubheadingContents;

/**
 * Checks if there is a subheading present in the text
 * @param {Paper} paper The Paper object to get the text from.
 * @returns {number} Number of headings found.
 */
module.exports = function( paper ) {
	var text = paper.getText();
	var headings = getSubheadingsContents( text ) || [];
	return headings.length;
};

},{"../stringProcessing/getSubheadings.js":103}],72:[function(require,module,exports){
var getSubheadingTexts = require( "../stringProcessing/getSubheadingTexts.js" );
var countWords = require( "../stringProcessing/countWords.js" );
var forEach = require( "lodash/forEach" );

/**
 * Gets the subheadings from the text and returns the length of these subheading in an array.
 * @param {Paper} paper The Paper object to get the text from.
 * @returns {Array} The array with the length of each subheading.
 */
module.exports = function( paper ) {
	var text = paper.getText();

	var matches = getSubheadingTexts( text );

	var subHeadingTexts = [];
	forEach( matches, function( subHeading ) {
		subHeadingTexts.push( {
			text: subHeading,
			wordCount: countWords( subHeading ),
		} );
	} );
	return subHeadingTexts;
};


},{"../stringProcessing/countWords.js":94,"../stringProcessing/getSubheadingTexts.js":102,"lodash/forEach":267}],73:[function(require,module,exports){
var getWords = require( "../stringProcessing/getWords.js" );
var countSyllables = require( "../stringProcessing/syllables/count.js" );
var getSentences = require( "../stringProcessing/getSentences.js" );

var map = require( "lodash/map" );
var forEach = require( "lodash/forEach" );

/**
 * Gets the complexity per word, along with the index for the sentence.
 * @param {string} sentence The sentence to get wordComplexity from.
 * @returns {Array} A list with words, the index and the complexity per word.
 */
var getWordComplexityForSentence = function( sentence ) {
	var words = getWords( sentence );
	var results = [];

	forEach( words, function( word, i ) {
		results.push( {
			word: word,
			wordIndex: i,
			complexity: countSyllables( word ),
		} );
	} );

	return results;
};

/**
 * Calculates the complexity of words in a text, returns each words with their complexity.
 * @param {Paper} paper The Paper object to get the text from.
 * @returns {Object} The words found in the text with the number of syllables.
 */
module.exports = function( paper ) {
	var sentences = getSentences( paper.getText() );

	return map( sentences, function( sentence ) {
		return {
			sentence: sentence,
			words: getWordComplexityForSentence( sentence ),
		};
	} );
};


},{"../stringProcessing/getSentences.js":101,"../stringProcessing/getWords.js":104,"../stringProcessing/syllables/count.js":124,"lodash/forEach":267,"lodash/map":294}],74:[function(require,module,exports){
/** @module researches/imageAltTags */

var imageInText = require( "../stringProcessing/imageInText" );
var imageAlttag = require( "../stringProcessing/getAlttagContent" );
var wordMatch = require( "../stringProcessing/matchTextWithWord" );

/**
 * Matches the alt-tags in the images found in the text.
 * Returns an object with the totals and different alt-tags.
 *
 * @param {Array} imageMatches Array with all the matched images in the text
 * @param {string} keyword the keyword to check for.
 * @param {string} locale The locale used for transliteration.
 * @returns {object} altProperties Object with all alt-tags that were found.
 */
var matchAltProperties = function( imageMatches, keyword, locale ) {
	var altProperties = {
		noAlt: 0,
		withAlt: 0,
		withAltKeyword: 0,
		withAltNonKeyword: 0,
	};

	for ( var i = 0; i < imageMatches.length; i++ ) {
		var alttag = imageAlttag( imageMatches[ i ] );

		// If no alt-tag is set
		if ( alttag === "" ) {
			altProperties.noAlt++;
			continue;
		}

		// If no keyword is set, but the alt-tag is
		if ( keyword === "" && alttag !== "" ) {
			altProperties.withAlt++;
			continue;
		}

		if ( wordMatch( alttag, keyword, locale ) === 0 && alttag !== "" ) {
			// Match for keywords?
			altProperties.withAltNonKeyword++;
			continue;
		}

		if ( wordMatch( alttag, keyword, locale ) > 0 ) {
			altProperties.withAltKeyword++;
			continue;
		}
	}

	return altProperties;
};

/**
 * Checks the text for images, checks the type of each image and alttags for containing keywords
 *
 * @param {Paper} paper The paper to check for images
 * @returns {object} Object containing all types of found images
 */
module.exports = function( paper ) {
	return matchAltProperties( imageInText( paper.getText() ), paper.getKeyword(), paper.getLocale() );
};

},{"../stringProcessing/getAlttagContent":98,"../stringProcessing/imageInText":105,"../stringProcessing/matchTextWithWord":109}],75:[function(require,module,exports){
/** @module researches/imageInText */

var imageInText = require( "./../stringProcessing/imageInText" );

/**
 * Checks the amount of images in the text.
 *
 * @param {Paper} paper The paper to check for images
 * @returns {number} The amount of found images
 */
module.exports = function( paper ) {
	return imageInText( paper.getText() ).length;
};

},{"./../stringProcessing/imageInText":105}],76:[function(require,module,exports){
var countWords = require( "../stringProcessing/countWords" );
var sanitizeString = require( "../stringProcessing/sanitizeString" );

/**
 * Determines the length in words of a the keyphrase, the keyword is a keyphrase if it is more than one word.
 *
 * @param {Paper} paper The paper to research
 * @returns {number} The length of the keyphrase
 */
function keyphraseLengthResearch( paper ) {
	var keyphrase = sanitizeString( paper.getKeyword() );

	return countWords( keyphrase );
}

module.exports = keyphraseLengthResearch;

},{"../stringProcessing/countWords":94,"../stringProcessing/sanitizeString":115}],77:[function(require,module,exports){
/** @module researches/countKeywordInUrl */

var wordMatch = require( "../stringProcessing/matchTextWithWord.js" );
/**
 * Matches the keyword in the URL. Replaces whitespaces with dashes and uses dash as wordboundary.
 *
 * @param {Paper} paper the Paper object to use in this count.
 * @returns {int} Number of times the keyword is found.
 */
module.exports = function( paper ) {
	var keyword = paper.getKeyword().replace( "'", "" ).replace( /\s/ig, "-" );

	return wordMatch( paper.getUrl(), keyword, paper.getLocale() );
};

},{"../stringProcessing/matchTextWithWord.js":109}],78:[function(require,module,exports){
/* @module analyses/matchKeywordInSubheadings */

var stripSomeTags = require( "../stringProcessing/stripNonTextTags.js" );
var subheadingMatch = require( "../stringProcessing/subheadingsMatch.js" );
var getSubheadingContents = require( "../stringProcessing/getSubheadings.js" ).getSubheadingContents;

/**
 * Checks if there are any subheadings like h2 in the text
 * and if they have the keyword in them.
 *
 * @param {object} paper The paper object containing the text and keyword.
 * @returns {object} the result object.
 */
module.exports = function( paper ) {
	var text = paper.getText();
	var keyword = paper.getKeyword();
	var locale = paper.getLocale();
	var result = { count: 0 };
	text = stripSomeTags( text );
	var matches = getSubheadingContents( text );

	if ( 0 !== matches.length ) {
		result.count = matches.length;
		result.matches = subheadingMatch( matches, keyword, locale );
	}

	return result;
};


},{"../stringProcessing/getSubheadings.js":103,"../stringProcessing/stripNonTextTags.js":119,"../stringProcessing/subheadingsMatch.js":122}],79:[function(require,module,exports){
var matchTextWithWord = require( "../stringProcessing/matchTextWithWord.js" );

/**
 * Matches the keyword in the description if a description and keyword are available.
 * default is -1 if no description and/or keyword is specified
 *
 * @param {Paper} paper The paper object containing the description.
 * @returns {number} The number of matches with the keyword
 */
module.exports = function( paper ) {
	if ( paper.getDescription() === "" ) {
		return -1;
	}
	return matchTextWithWord( paper.getDescription(), paper.getKeyword(), paper.getLocale() );
};


},{"../stringProcessing/matchTextWithWord.js":109}],80:[function(require,module,exports){
/**
 * Check the length of the description.
 * @param {Paper} paper The paper object containing the description.
 * @returns {number} The length of the description.
 */
module.exports = function( paper ) {
	return paper.getDescription().length;
};

},{}],81:[function(require,module,exports){
/**
 * Check the width of the title in pixels
 * @param {Paper} paper The paper object containing the title width in pixels.
 * @returns {number} The width of the title in pixels
 */
module.exports = function( paper ) {
	if( paper.hasTitle() ) {
		return paper.getTitleWidth();
	}
	return 0;
};

},{}],82:[function(require,module,exports){
/**
 * Returns an array with exceptions for the sentence beginning researcher.
 * @returns {Array} The array filled with exceptions.
 */
module.exports = function() {
	return [
		// Definite articles:
		"el", "los", "la", "las",
		// Indefinite articles:
		"un", "una", "unas", "unos",
		// Numbers 1-10:
		"uno", "dos", "tres", "cuatro", "cinco", "seis", "siete", "ocho", "nueve", "diez",
		// Demonstrative pronouns:
		"este", "estos", "esta", "estas", "ese", "esos", "esa", "esas", "aquel",
		"aquellos", "aquella", "aquellas", "esto", "eso", "aquello" ];
};



},{}],83:[function(require,module,exports){
/** @module config/transitionWords */

/**
 * Returns an array with transition words to be used by the assessments.
 * @returns {Array} The array filled with transition words.
 */
module.exports = function() {
	return [ "a causa de", "a continuación", "a diferencia de", "a la inversa", "a la misma vez", "a más de", "a más de esto",
		"a menos que", "a pesar de", "a pesar de eso", "a pesar de todo", "a peser de", "a propósito", "a saber", "a todo esto",
		"además", "adicional", "al contrario", "al fin y al cabo", "al final", "al inicio", "al mismo tiempo", "al principio",
		"ante todo", "antes de", "aparte de", "as asií como", "así", "así como", "así mismo", "así que", "asimismo", "aún así",
		"aunque", "ciertamente", "claro está que", "claro que", "claro que sí", "como", "como caso típico", "como era de esperarse",
		"como es de esperarse", "como muestra", "como resultado", "como se ha notado", "como sigue", "comparado con", "con que",
		"con relación a", "con todo", "conque", "cuando", "dado que", "de ahí", "de cierta manera", "de cualquier manera",
		"de cualquier modo", "de este modo", "de golpe", "de hecho", "de igual manera", "de igual modo", "de igualmanera",
		"de la manera siguente", "de la misma forma", "de la misma manera", "de manera semejante", "de mismo modo", "de modo que",
		"de nuevo", "de otra manera", "de otro modo", "de qualquier manera", "de repente", "de todas formas", "de todas maneras",
		"de todos modos", "de veras", "debido a", "debido a que", "decididamente", "decisivamente", "del mismo modo",
		"dentro de poco", "desde entonces", "después", "después de", "después de todo", "diferentemente", "dúbitamente",
		"efectivamente", "ejemplo de esto", "en cambio", "en cierto modo", "en comparación con", "en conclusión", "en concreto",
		"en conformidad con", "en consecuencia", "en consiguiente", "en contraste con", "en cuanto", "en cuanto a", "en efecto",
		"en fin", "en fin de cuentas", "en general", "en lugar de", "en otras palabras", "en particular", "en primer lugar",
		"en primer término", "en primera instancia", "en realidad", "en relación a", "en relación con", "en representación de",
		"en resumen", "en segundo lugar", "en síntesis", "en suma", "en todo caso", "en último término", "en verdad", "en vez de",
		"entonces", "entre ellas figura", "entre ellos figura", "es decir", "es más", "especialmente", "específicamente",
		"esto indica", "eventualmente", "finalmente", "frecuentemente", "generalmente", "generalmente por ejemplo",
		"hasta cierto punto", "hay que añadir", "igual que", "igualmente", "la mayor parte del tiempo", "la mayoría del tiempo",
		"lo que es peor", "lógicamente", "luego", "más tarde", "mientras", "mientras tanto", "mirándolo todo", "no faltaría más",
		"no obstante", "o sea", "otra vez", "otro aspecto", "par ilustrar", "par terminar", "para concluir", "para conclusión",
		"para continuar", "para empezar", "para mencionar una cosa", "para que", "para resumir", "pero", "por", "por añadidura",
		"por consiguiente", "por ejemplo", "por el contrario", "por eso", "por esta razón", "por esto", "por fin", "por la mayor parte",
		"por lo general", "por lo tanto", "por orto lado", "por otra parte", "por otro lado", "por supuesto", "por tanto",
		"por último", "por un lado", "por una parte", "porque", "posteriormente", "primero", "primero que nada", "principalmente",
		"pronto", "próximamente", "pues bien", "puesto que", "rara vez", "raramente", "realmente", "resulta que", "seguidamente",
		"seguidamente entre tanto", "segundo", "semejantemente", "siempre que", "sigue que", "siguiente", "sin duda", "sin embargo",
		"sino", "sobre todo", "supongamos", "supuesto que", "tal como", "también", "tan pronto como", "tanto como", "tercero",
		"una vez", "verbigracia", "vice-versa", "ya", "ya que" ];
};

},{}],84:[function(require,module,exports){
/** @module config/twoPartTransitionWords */

/**
 * Returns an array with two-part transition words to be used by the assessments.
 * @returns {Array} The array filled with two-part transition words.
 */
module.exports = function() {
	return [ [ "de un lado", "de otra parte" ], [ "de un lado", "de otro" ], [ "no", "sino que" ], [ "no", "sino" ],
		[ "por un lado", "por otro lado" ], [ "por una parte", "por otra parte" ], [ "por una parte", "por otra" ], [ "tanto", "como" ] ];
};

},{}],85:[function(require,module,exports){
/** @module researches/stopWordsInKeyword */

var stopWordsInText = require( "./stopWordsInText.js" );

/**
 * Checks for the amount of stop words in the keyword.
 * @param {Paper} paper The Paper object to be checked against.
 * @returns {Array} All the stopwords that were found in the keyword.
 */
module.exports = function( paper ) {
	return stopWordsInText( paper.getKeyword() );
};

},{"./stopWordsInText.js":86}],86:[function(require,module,exports){
var stopwords = require( "../config/stopwords.js" )();
var toRegex = require( "../stringProcessing/stringToRegex.js" );

/**
 * Checks a text to see if there are any stopwords, that are defined in the stopwords config.
 *
 * @param {string} text The input text to match stopwords.
 * @returns {Array} An array with all stopwords found in the text.
 */
module.exports = function( text ) {
	var i, matches = [];

	for ( i = 0; i < stopwords.length; i++ ) {
		if ( text.match( toRegex( stopwords[ i ] ) ) !== null ) {
			matches.push( stopwords[ i ] );
		}
	}

	return matches;
};

},{"../config/stopwords.js":22,"../stringProcessing/stringToRegex.js":117}],87:[function(require,module,exports){
/** @module researches/stopWordsInUrl */

var stopWordsInText = require( "./stopWordsInText.js" );

/**
 * Matches stopwords in the URL. Replaces - and _ with whitespace.
 * @param {Paper} paper The Paper object to get the url from.
 * @returns {Array} stopwords found in URL
 */
module.exports = function( paper ) {
	return stopWordsInText( paper.getUrl().replace( /[-_]/g, " " ) );
};

},{"./stopWordsInText.js":86}],88:[function(require,module,exports){
/** @module analyses/isUrlTooLong */

/**
 * Checks if an URL is too long, based on slug and relative to keyword length.
 *
 * @param {object} paper the paper to run this assessment on
 * @returns {boolean} true if the URL is too long, false if it isn't
 */
module.exports = function( paper ) {
	var urlLength = paper.getUrl().length;
	var keywordLength = paper.getKeyword().length;
	var maxUrlLength = 40;
	var maxSlugLength = 20;

	if ( urlLength > maxUrlLength	&& urlLength > keywordLength + maxSlugLength ) {
		return true;
	}
	return false;
};

},{}],89:[function(require,module,exports){
var wordCount = require( "../stringProcessing/countWords.js" );

/**
 * Count the words in the text
 * @param {Paper} paper The Paper object who's
 * @returns {number} The amount of words found in the text.
 */
module.exports = function( paper ) {
	return wordCount( paper.getText() );
};

},{"../stringProcessing/countWords.js":94}],90:[function(require,module,exports){
/** @module stringProcessing/addWordboundary */

/**
 * Returns a string that can be used in a regex to match a matchString with word boundaries.
 *
 * @param {string} matchString The string to generate a regex string for.
 * @param {string} [extraWordBoundary] Extra characters to match a word boundary on.
 * @returns {string} A regex string that matches the matchString with word boundaries.
 */
module.exports = function( matchString, extraWordBoundary ) {
	var wordBoundary, wordBoundaryStart, wordBoundaryEnd;
	var _extraWordBoundary = extraWordBoundary || "";

	wordBoundary = "[ \n\r\t\.,'\(\)\"\+\-;!?:\/»«‹›" + _extraWordBoundary + "<>]";
	wordBoundaryStart = "(^|" + wordBoundary + ")";
	wordBoundaryEnd = "($|" + wordBoundary + ")";

	return wordBoundaryStart + matchString + wordBoundaryEnd;
};

},{}],91:[function(require,module,exports){
/** @module stringProcessing/checkNofollow */

/**
 * Checks if a links has a nofollow attribute. If it has, returns Nofollow, otherwise Dofollow.
 *
 * @param {string} text The text to check against.
 * @returns {string} Returns Dofollow or Nofollow.
 */
module.exports = function( text ) {
	var linkFollow = "Dofollow";

	// Matches all nofollow links, case insensitive and global
	if ( text.match( /rel=([\'\"])nofollow\1/ig ) !== null ) {
		linkFollow = "Nofollow";
	}
	return linkFollow;
};

},{}],92:[function(require,module,exports){
/** @module stringProcessing/countSentences */

var getSentences = require( "../stringProcessing/getSentences.js" );

/**
 * Counts the number of sentences in a given string.
 *
 * @param {string} text The text used to count sentences.
 * @returns {number} The number of sentences in the text.
 */
module.exports = function( text ) {
	var sentences = getSentences( text );
	var sentenceCount = 0;
	for ( var i = 0; i < sentences.length; i++ ) {
		if ( sentences[ i ] !== "" && sentences[ i ] !== " " ) {
			sentenceCount++;
		}
	}
	return sentenceCount;
};

},{"../stringProcessing/getSentences.js":101}],93:[function(require,module,exports){
var filter = require( "lodash/filter" );

var transliterate = require( "./transliterate.js" );
var getWords = require( "./getWords.js" );

/**
 * Counts the number of occurrences of a word in a text.
 *
 * @param {String} text The text to count the word in.
 * @param {String} wordToMatch The word to check in the text.
 * @param {String} locale The locale used for transliteration.
 * @returns {Number} The number of occurrences.
 */
module.exports = function( text, wordToMatch, locale ) {
	var words = getWords( text );
	var count = filter( words, function( word ) {
		return ( wordToMatch === word || transliterate( wordToMatch, locale ) === word );
	} );
	return count.length;
};

},{"./getWords.js":104,"./transliterate.js":125,"lodash/filter":263}],94:[function(require,module,exports){
/** @module stringProcessing/countWords */

var getWords = require( "../stringProcessing/getWords.js" );

/**
 * Calculates the wordcount of a certain text.
 *
 * @param {string} text The text to be counted.
 * @returns {int} The word count of the given text.
 */
module.exports = function( text ) {
	return getWords( text ).length;
};

},{"../stringProcessing/getWords.js":104}],95:[function(require,module,exports){
/** @module stringProcessing/createRegexFromArray */

var addWordBoundary = require( "../stringProcessing/addWordboundary.js" );
var map = require( "lodash/map" );

/**
 * Creates a regex of combined strings from the input array.
 *
 * @param {array} array The array with strings
 * @param {boolean} [disableWordBoundary] Boolean indicating whether or not to disable word boundaries
 * @returns {RegExp} regex The regex created from the array.
 */
module.exports = function( array, disableWordBoundary ) {
	var regexString;
	var _disableWordBoundary = disableWordBoundary || false;

	var boundedArray = map( array, function( string ) {
		if ( _disableWordBoundary ) {
			return string;
		}
		return addWordBoundary( string );
	} );

	regexString = "(" + boundedArray.join( ")|(" ) + ")";

	return new RegExp( regexString, "ig" );
};

},{"../stringProcessing/addWordboundary.js":90,"lodash/map":294}],96:[function(require,module,exports){
/** @module stringProcessing/createRegexFromDoubleArray */

var addWordBoundary = require( "../stringProcessing/addWordboundary.js" );

/**
 * Creates a regex string of combined strings from the input array.
 * @param {array} array The array containing the various parts of a transition word combination.
 * @returns {array} The array with replaced entries.
 */
var wordCombinationToRegexString = function( array ) {
	array = array.map( function( word ) {
		return addWordBoundary( word );
	} );
	return array.join( "(.*?)" );
};

/**
 * Creates a regex of combined strings from the input array, containing arrays with two entries.
 * @param {array} array The array containing arrays.
 * @returns {RegExp} The regex created from the array.
 */
module.exports = function( array ) {
	array = array.map( function( wordCombination ) {
		return wordCombinationToRegexString( wordCombination );
	} );
	var regexString = "(" + array.join( ")|(" ) + ")";
	return new RegExp( regexString, "ig" );
};

},{"../stringProcessing/addWordboundary.js":90}],97:[function(require,module,exports){
/** @module stringProcessing/findKeywordInUrl */

var matchTextWithTransliteration = require( "./matchTextWithTransliteration.js" );

/**
 * Matches the keyword in the URL.
 *
 * @param {string} url The url to check for keyword
 * @param {string} keyword The keyword to check if it is in the URL
 * @param {string} locale The locale used for transliteration.
 * @returns {boolean} If a keyword is found, returns true
 */
module.exports = function( url, keyword, locale ) {
	var formatUrl = url.match( />(.*)/ig );

	if ( formatUrl !== null ) {
		formatUrl = formatUrl[ 0 ].replace( /<.*?>\s?/ig, "" );
		return matchTextWithTransliteration( formatUrl, keyword, locale ).length > 0;
	}

	return false;
};

},{"./matchTextWithTransliteration.js":108}],98:[function(require,module,exports){
/** @module stringProcessing/getAlttagContent */

var stripSpaces = require( "../stringProcessing/stripSpaces.js" );

var regexAltTag = /alt=(['"])(.*?)\1/i;

/**
 * Checks for an alttag in the image and returns its content
 *
 * @param {String} text Textstring to match alt
 * @returns {String} the contents of the alttag, empty if none is set.
 */
module.exports = function( text ) {
	var alt = "";

	var matches = text.match( regexAltTag );

	if ( matches !== null ) {
		alt = stripSpaces( matches[ 2 ] );

		alt = alt.replace( /&quot;/g, "\"" );
		alt = alt.replace( /&#039;/g, "'" );
	}
	return alt;
};

},{"../stringProcessing/stripSpaces.js":121}],99:[function(require,module,exports){
/** @module stringProcessing/getAnchorsFromText */

/**
 * Check for anchors in the textstring and returns them in an array.
 *
 * @param {String} text The text to check for matches.
 * @returns {Array} The matched links in text.
 */
module.exports = function( text ) {
	var matches;

	// Regex matches everything between <a> and </a>
	matches = text.match( /<a(?:[^>]+)?>(.*?)<\/a>/ig );

	if ( matches === null ) {
		matches = [];
	}

	return matches;
};

},{}],100:[function(require,module,exports){
/** @module stringProcess/getLinkType */

var urlHelper = require( "./url" );

/**
 * Determines the type of link.
 *
 * @param {string} text String with anchor tag.
 * @param {string} url Url to match against.
 * @returns {string} The link type (other, external or internal).
 */

module.exports = function( text, url ) {
	var linkType = "other";

	var anchorUrl = urlHelper.getFromAnchorTag( text );

	// Matches all links that start with http:// and https://, case insensitive and global
	if ( anchorUrl.match( /https?:\/\//ig ) !== null ) {
		linkType = "external";

		if ( urlHelper.getHostname( anchorUrl ) === urlHelper.getHostname( url ) ) {
			linkType = "internal";
		}
	}

	return linkType;
};

},{"./url":127}],101:[function(require,module,exports){
var map = require( "lodash/map" );
var isUndefined = require( "lodash/isUndefined" );
var forEach = require( "lodash/forEach" );
var isNaN = require( "lodash/isNaN" );
var filter = require( "lodash/filter" );
var flatMap = require( "lodash/flatMap" );
var isEmpty = require( "lodash/isEmpty" );
var negate = require( "lodash/negate" );
var memoize = require( "lodash/memoize" );

var core = require( "tokenizer2/core" );

var getBlocks = require( "../helpers/html.js" ).getBlocks;
var normalizeQuotes = require( "../stringProcessing/quotes.js" ).normalize;

var unifyWhitespace = require( "../stringProcessing/unifyWhitespace.js" ).unifyNonBreakingSpace;

// All characters that indicate a sentence delimiter.
var fullStop = ".";
// The \u2026 character is an ellipsis
var sentenceDelimiters = "?!;\u2026";
var newLines = "\n\r|\n|\r";

var fullStopRegex = new RegExp( "^[" + fullStop + "]$" );
var sentenceDelimiterRegex = new RegExp( "^[" + sentenceDelimiters + "]$" );
var sentenceRegex = new RegExp( "^[^" + fullStop + sentenceDelimiters + "<\\(\\)\\[\\]]+$" );
var htmlStartRegex = /^<([^>\s\/]+)[^>]*>$/mi;
var htmlEndRegex = /^<\/([^>\s]+)[^>]*>$/mi;
var newLineRegex = new RegExp( newLines );

var blockStartRegex = /^\s*[\[\(\{]\s*$/;
var blockEndRegex = /^\s*[\]\)}]\s*$/;

var tokens = [];
var sentenceTokenizer;

/**
 * Creates a tokenizer to create tokens from a sentence.
 *
 * @returns {void}
 */
function createTokenizer() {
	tokens = [];

	sentenceTokenizer = core( function( token ) {
		tokens.push( token );
	} );

	sentenceTokenizer.addRule( htmlStartRegex, "html-start" );
	sentenceTokenizer.addRule( htmlEndRegex, "html-end" );
	sentenceTokenizer.addRule( blockStartRegex, "block-start" );
	sentenceTokenizer.addRule( blockEndRegex, "block-end" );
	sentenceTokenizer.addRule( fullStopRegex, "full-stop" );
	sentenceTokenizer.addRule( sentenceDelimiterRegex, "sentence-delimiter" );
	sentenceTokenizer.addRule( sentenceRegex, "sentence" );
}

/**
 * Returns whether or not a certain character is a capital letter.
 *
 * @param {string} character The character to check.
 * @returns {boolean} Whether or not the character is a capital letter.
 */
function isCapitalLetter( character ) {
	return character !== character.toLocaleLowerCase();
}

/**
 * Returns whether or not a certain character is a number.
 *
 * @param {string} character The character to check.
 * @returns {boolean} Whether or not the character is a capital letter.
 */
function isNumber( character ) {
	return ! isNaN( parseInt( character, 10 ) );
}

/**
 * Returns whether or not a given HTML tag is a break tag.
 *
 * @param {string} htmlTag The HTML tag to check.
 * @returns {boolean} Whether or not the given HTML tag is a break tag.
 */
function isBreakTag( htmlTag ) {
	return /<br/.test( htmlTag );
}

/**
 * Returns whether or not a given character is quotation mark.
 *
 * @param {string} character The character to check.
 * @returns {boolean} Whether or not the given character is a quotation mark.
 */
function isQuotation( character ) {
	character = normalizeQuotes( character );

	return "'" === character
		|| "\"" === character;
}

/**
 * Returns whether or not a given character is a punctuation mark that can be at the beginning
 * of a sentence, like ¿ and ¡ used in Spanish.
 *
 * @param {string} character The character to check.
 * @returns {boolean} Whether or not the given character is a punctuation mark.
 */
function isPunctuation( character ) {
	return "¿" === character
		|| "¡" === character;
}

/**
 * Tokenizes a sentence, assumes that the text has already been split into blocks.
 *
 * @param {string} text The text to tokenize.
 * @returns {Array} An array of tokens.
 */
function tokenizeSentences( text ) {
	createTokenizer();
	sentenceTokenizer.onText( text );

	sentenceTokenizer.end();

	return tokens;
}

/**
 * Removes duplicate whitespace from a given text.
 *
 * @param {string} text The text with duplicate whitespace.
 * @returns {string} The text without duplicate whitespace.
 */
function removeDuplicateWhitespace( text ) {
	return text.replace( /\s+/, " " );
}

/**
 * Retrieves the next two characters from an array with the two next tokens.
 *
 * @param {Array} nextTokens The two next tokens. Might be undefined.
 * @returns {string} The next two characters.
 */
function getNextTwoCharacters( nextTokens ) {
	var next = "";

	if ( ! isUndefined( nextTokens[ 0 ] ) ) {
		next += nextTokens[ 0 ].src;
	}

	if ( ! isUndefined( nextTokens[ 1 ] ) ) {
		next += nextTokens[ 1 ].src;
	}

	next = removeDuplicateWhitespace( next );

	return next;
}

/**
 * Checks if the sentenceBeginning beginning is a valid beginning.
 *
 * @param {string} sentenceBeginning The beginning of the sentence to validate.
 * @returns {boolean} Returns true if it is a valid beginning, false if it is not.
 */
function isValidSentenceBeginning( sentenceBeginning ) {
	return (
		isCapitalLetter( sentenceBeginning ) ||
		isNumber( sentenceBeginning ) ||
		isQuotation( sentenceBeginning ) ||
		isPunctuation( sentenceBeginning )
	);
}

/**
 * Checks if the token is a valid sentence ending.
 *
 * @param {Object} token The token to validate.
 * @returns {boolean} Returns true if the token is valid ending, false if it is not.
 */
function isSentenceStart( token ) {
	return ( !isUndefined( token ) && (
		"html-start" === token.type ||
		"html-end" === token.type ||
		"block-start" === token.type
	) );
}

/**
 * Returns an array of sentences for a given array of tokens, assumes that the text has already been split into blocks.
 *
 * @param {Array} tokens The tokens from the sentence tokenizer.
 * @returns {Array<string>} A list of sentences.
 */
function getSentencesFromTokens( tokens ) {
	var tokenSentences = [], currentSentence = "", nextSentenceStart;

	var sliced;

	// Drop the first and last HTML tag if both are present.
	do {
		sliced = false;
		var firstToken = tokens[ 0 ];
		var lastToken = tokens[ tokens.length - 1 ];

		if ( firstToken.type === "html-start" && lastToken.type === "html-end" ) {
			tokens = tokens.slice( 1, tokens.length - 1 );

			sliced = true;
		}
	} while ( sliced && tokens.length > 1 );

	forEach( tokens, function( token, i ) {
		var hasNextSentence;
		var nextToken = tokens[ i + 1 ];
		var secondToNextToken = tokens[ i + 2 ];
		var nextCharacters;

		switch ( token.type ) {

			case "html-start":
			case "html-end":
				if ( isBreakTag( token.src ) ) {
					tokenSentences.push( currentSentence );
					currentSentence = "";
				} else {
					currentSentence += token.src;
				}
				break;

			case "sentence":
				currentSentence += token.src;
				break;

			case "sentence-delimiter":
				currentSentence += token.src;

				if ( ! isUndefined( nextToken ) && "block-end" !== nextToken.type ) {
					tokenSentences.push( currentSentence );
					currentSentence = "";
				}
				break;

			case "full-stop":
				currentSentence += token.src;

				nextCharacters = getNextTwoCharacters( [ nextToken, secondToNextToken ] );

				// For a new sentence we need to check the next two characters.
				hasNextSentence = nextCharacters.length >= 2;
				nextSentenceStart = hasNextSentence ? nextCharacters[ 1 ] : "";
				// If the next character is a number, never split. For example: IPv4-numbers.
				if ( hasNextSentence && isNumber( nextCharacters[ 0 ] ) ) {
					break;
				}
				// Only split on sentence delimiters when the next sentence looks like the start of a sentence.
				if ( ( hasNextSentence && isValidSentenceBeginning( nextSentenceStart ) ) || isSentenceStart( nextToken ) ) {

					tokenSentences.push( currentSentence );
					currentSentence = "";
				}
				break;

			case "newline":
				tokenSentences.push( currentSentence );
				currentSentence = "";
				break;

			case "block-start":
				currentSentence += token.src;
				break;

			case "block-end":
				currentSentence += token.src;

				nextCharacters = getNextTwoCharacters( [ nextToken, secondToNextToken ] );

				// For a new sentence we need to check the next two characters.
				hasNextSentence = nextCharacters.length >= 2;
				nextSentenceStart = hasNextSentence ? nextCharacters[ 0 ] : "";
				// If the next character is a number, never split. For example: IPv4-numbers.
				if ( hasNextSentence && isNumber( nextCharacters[ 0 ] ) ) {
					break;
				}

				if ( ( hasNextSentence && isValidSentenceBeginning( nextSentenceStart ) ) || isSentenceStart( nextToken ) ) {
					tokenSentences.push( currentSentence );
					currentSentence = "";
				}
				break;
		}
	} );

	if ( "" !== currentSentence ) {
		tokenSentences.push( currentSentence );
	}

	tokenSentences = map( tokenSentences, function( sentence ) {
		return sentence.trim();
	} );

	return tokenSentences;
}

/**
 * Returns the sentences from a certain block.
 *
 * @param {string} block The HTML inside a HTML block.
 * @returns {Array<string>} The list of sentences in the block.
 */
function getSentencesFromBlock( block ) {
	var tokens = tokenizeSentences( block );

	return tokens.length === 0 ? [] : getSentencesFromTokens( tokens );
}

var getSentencesFromBlockCached = memoize( getSentencesFromBlock );

/**
 * Returns sentences in a string.
 *
 * @param {String} text The string to count sentences in.
 * @returns {Array} Sentences found in the text.
 */
module.exports = function( text ) {
	text = unifyWhitespace( text );
	var sentences, blocks = getBlocks( text );

	// Split each block on newlines.
	blocks = flatMap( blocks, function( block ) {
		return block.split( newLineRegex );
	} );

	sentences = flatMap( blocks, getSentencesFromBlockCached );

	return filter( sentences, negate( isEmpty ) );
};

},{"../helpers/html.js":36,"../stringProcessing/quotes.js":111,"../stringProcessing/unifyWhitespace.js":126,"lodash/filter":263,"lodash/flatMap":266,"lodash/forEach":267,"lodash/isEmpty":278,"lodash/isNaN":281,"lodash/isUndefined":290,"lodash/map":294,"lodash/memoize":295,"lodash/negate":297,"tokenizer2/core":310}],102:[function(require,module,exports){
/**
 * Returns all texts per subheading.
 * @param {string} text The text to analyze from.
 * @returns {Array} an array with text blocks per subheading.
 */
module.exports = function( text ) {
	/*
	 Matching this in a regex is pretty hard, since we need to find a way for matching the text after a heading, and before the end of the text.
	 The hard thing capturing this is with a capture, it captures the next subheading as well, so it skips the next part of the text,
	 since the subheading is already matched.
	 For now we use this method to be sure we capture the right blocks of text. We remove all | 's from text,
	 then replace all headings with a | and split on a |.
	 */
	text = text.replace( /\|/ig, "" );
	text = text.replace( /<h([1-6])(?:[^>]+)?>(.*?)<\/h\1>/ig, "|" );
	var subheadings =  text.split( "|" );

	/*
	 * We never need the first entry, if the text starts with a subheading it will be empty, and if the text doesn't start with a subheading,
	 * the text doesnt't belong to a subheading, so it can be removed
	 */
	subheadings.shift();
	return subheadings;
};



},{}],103:[function(require,module,exports){
var map = require( "lodash/map" );

/**
 * Gets all subheadings from the text and returns these in an array.
 *
 * @param {string} text The text to return the headings from.
 * @returns {Array} Matches of subheadings in the text, first key is everything including tags, second is the heading
 *                  level, third is the content of the subheading.
 */
function getSubheadings( text ) {
	var subheadings = [];
	var regex = /<h([1-6])(?:[^>]+)?>(.*?)<\/h\1>/ig;
	var match;

	while ( ( match = regex.exec( text ) ) !== null ) {
		subheadings.push( match );
	}

	return subheadings;
}

/**
 * Gets the content of subheadings in the text
 *
 * @param {string} text The text to get the subheading contents from.
 * @returns {Array<string>} A list of all the subheadings with their content.
 */
function getSubheadingContents( text ) {
	var subheadings = getSubheadings( text );

	subheadings = map( subheadings, function( subheading ) {
		return subheading[ 0 ];
	} );

	return subheadings;
}

module.exports = {
	getSubheadings: getSubheadings,
	getSubheadingContents: getSubheadingContents,
};

},{"lodash/map":294}],104:[function(require,module,exports){
/** @module stringProcessing/countWords */

var stripTags = require( "./stripHTMLTags.js" ).stripFullTags;
var stripSpaces = require( "./stripSpaces.js" );
var removeTerminators = require( "./removeTerminators.js" );
var map = require( "lodash/map" );
var filter = require( "lodash/filter" );

/**
 * Returns an array with words used in the text.
 *
 * @param {string} text The text to be counted.
 * @returns {Array} The array with all words.
 */
module.exports = function( text ) {
	text = stripSpaces( stripTags( text ) );
	if ( text === "" ) {
		return [];
	}

	var words = text.split( /\s/g );

	words = map( words, function( word ) {
		return removeTerminators( word );
	} );

	return filter( words, function( word ) {
		return word.trim() !== "";
	} );
};


},{"./removeTerminators.js":112,"./stripHTMLTags.js":118,"./stripSpaces.js":121,"lodash/filter":263,"lodash/map":294}],105:[function(require,module,exports){
/** @module stringProcessing/imageInText */

var matchStringWithRegex = require( "./matchStringWithRegex.js" );

/**
 * Checks the text for images.
 *
 * @param {string} text The textstring to check for images
 * @returns {Array} Array containing all types of found images
 */
module.exports = function( text ) {
	return matchStringWithRegex( text, "<img(?:[^>]+)?>" );
};

},{"./matchStringWithRegex.js":107}],106:[function(require,module,exports){
var map = require( "lodash/map" );
var flatMap = require( "lodash/flatMap" );
var filter = require( "lodash/filter" );

var getBlocks = require( "../helpers/html" ).getBlocks;

/**
 * Matches the paragraphs in <p>-tags and returns the text in them.
 * @param {string} text The text to match paragraph in.
 * @returns {array} An array containing all paragraphs texts.
 */
var getParagraphsInTags = function( text ) {
	var paragraphs = [];
	// Matches everything between the <p> and </p> tags.
	var regex = /<p(?:[^>]+)?>(.*?)<\/p>/ig;
	var match;

	while ( ( match = regex.exec( text ) ) !== null ) {
		paragraphs.push( match );
	}

	// Returns only the text from within the paragraph tags.
	return map( paragraphs, function( paragraph ) {
		return paragraph[ 1 ];
	} );
};

/**
 * Returns an array with all paragraphs from the text.
 * @param {string} text The text to match paragraph in.
 * @returns {Array} The array containing all paragraphs from the text.
 */
module.exports = function( text ) {
	var paragraphs = getParagraphsInTags( text );

	if ( paragraphs.length > 0 ) {
		return paragraphs;
	}

	// If no <p> tags found, split on double linebreaks.
	var blocks = getBlocks( text );

	blocks = filter( blocks, function( block ) {
		// Match explicit paragraph tags, or if a block has no HTML tags.
		return 0 !== block.indexOf( "<h" );
	} );

	paragraphs = flatMap( blocks, function( block ) {
		return block.split( "\n\n" );
	} );

	if ( paragraphs.length > 0 ) {
		return paragraphs;
	}

	// If no paragraphs are found, return an array containing the entire text.
	return [ text ];
};

},{"../helpers/html":36,"lodash/filter":263,"lodash/flatMap":266,"lodash/map":294}],107:[function(require,module,exports){
/** @module stringProcessing/matchStringWithRegex */

/**
 * Checks a string with a regex, return all matches found with that regex.
 *
 * @param {String} text The text to match the
 * @param {String} regexString A string to use as regex.
 * @returns {Array} Array with matches, empty array if no matches found.
 */
module.exports = function( text, regexString ) {
	var regex = new RegExp( regexString, "ig" );
	var matches = text.match( regex );

	if ( matches === null ) {
		matches = [];
	}

	return matches;
};

},{}],108:[function(require,module,exports){
var map = require( "lodash/map" );
var addWordBoundary = require( "./addWordboundary.js" );
var stripSpaces = require( "./stripSpaces.js" );
var transliterate = require( "./transliterate.js" );

/**
 * Creates a regex from the keyword with included wordboundaries.
 * @param {string} keyword The keyword to create a regex from.
 * @returns {RegExp} Regular expression of the keyword with wordboundaries.
 */
var toRegex = function( keyword ) {
	keyword = addWordBoundary( keyword );
	return new RegExp( keyword, "ig" );
};

/**
 * Matches a string with and without transliteration.
 * @param {string} text The text to match.
 * @param {string} keyword The keyword to match in the text.
 * @param {string} locale The locale used for transliteration.
 * @returns {Array} All matches from the original as the transliterated text and keyword.
 */
module.exports = function( text, keyword, locale ) {
	var keywordRegex = toRegex( keyword );
	var matches = text.match( keywordRegex ) || [];

	text = text.replace( keywordRegex, "" );

	var transliterateKeyword = transliterate( keyword, locale );
	var transliterateKeywordRegex = toRegex( transliterateKeyword );
	var transliterateMatches = text.match( transliterateKeywordRegex ) || [];

	var combinedArray = matches.concat( transliterateMatches );
	return map( combinedArray, function( keyword ) {
		return stripSpaces( keyword );
	} );
};



},{"./addWordboundary.js":90,"./stripSpaces.js":121,"./transliterate.js":125,"lodash/map":294}],109:[function(require,module,exports){
/** @module stringProcessing/matchTextWithWord */

var stripSomeTags = require( "../stringProcessing/stripNonTextTags.js" );
var unifyWhitespace = require( "../stringProcessing/unifyWhitespace.js" ).unifyAllSpaces;
var matchStringWithTransliteration = require( "../stringProcessing/matchTextWithTransliteration.js" );

/**
 * Returns the number of matches in a given string
 *
 * @param {string} text The text to use for matching the wordToMatch.
 * @param {string} wordToMatch The word to match in the text
 * @param {string} locale The locale used for transliteration.
 * @param {string} [extraBoundary] An extra string that can be added to the wordboundary regex
 * @returns {number} The amount of matches found.
 */
module.exports = function( text, wordToMatch, locale, extraBoundary ) {
	text = stripSomeTags( text );
	text = unifyWhitespace( text );
	var matches = matchStringWithTransliteration( text, wordToMatch, locale, extraBoundary );
	return matches.length;
};

},{"../stringProcessing/matchTextWithTransliteration.js":108,"../stringProcessing/stripNonTextTags.js":119,"../stringProcessing/unifyWhitespace.js":126}],110:[function(require,module,exports){
var wordBoundaries = require( "../config/wordBoundaries.js" )();
var includes = require( "lodash/includes" );

/**
 * Checks whether a character is present in the list of word boundaries.
 *
 * @param {string} character The character to look for.
 * @returns {boolean} Whether or not the character is present in the list of word boundaries.
 */
var characterInBoundary = function( character ) {
	return includes( wordBoundaries, character );
};

/**
 * Checks whether a word is present in a sentence.
 *
 * @param {string} word The word to search for in the sentence.
 * @param {string} sentence The sentence to look through.
 * @returns {boolean} Whether or not the word is present in the sentence.
 */
module.exports = function( word, sentence ) {
	// To ensure proper matching, make everything lowercase.
	word = word.toLocaleLowerCase();
	sentence = sentence.toLocaleLowerCase();

	var occurrenceStart = sentence.indexOf( word );
	var occurrenceEnd = occurrenceStart + word.length;

	// Return false if no match has been found.
	if ( occurrenceStart === -1 ) {
		return false;
	}

	// Check if the previous and next character are word boundaries to determine if a complete word was detected
	var previousCharacter = characterInBoundary( sentence[ occurrenceStart - 1 ] ) || occurrenceStart === 0;
	var nextCharacter = characterInBoundary( sentence[ occurrenceEnd ] ) || occurrenceEnd === sentence.length;

	return ( ( previousCharacter ) && ( nextCharacter ) );
};

},{"../config/wordBoundaries.js":28,"lodash/includes":272}],111:[function(require,module,exports){
/**
 * Normalizes single quotes to 'regular' quotes.
 *
 * @param {string} text Text to normalize.
 * @returns {string} The normalized text.
 */
function normalizeSingleQuotes( text ) {
	return text.replace( /[‘’‛`]/g, "'" );
}

/**
 * Normalizes double quotes to 'regular' quotes.
 *
 * @param {string} text Text to normalize.
 * @returns {string} The normalized text.
 */
function normalizeDoubleQuotes( text ) {
	return text.replace( /[“”〝〞〟‟„]/g, "\"" );
}

/**
 * Normalizes quotes to 'regular' quotes.
 *
 * @param {string} text Text to normalize.
 * @returns {string} The normalized text.
 */
function normalizeQuotes( text ) {
	return normalizeDoubleQuotes( normalizeSingleQuotes( text ) );
}

module.exports = {
	normalizeSingle: normalizeSingleQuotes,
	normalizeDouble: normalizeDoubleQuotes,
	normalize: normalizeQuotes,
};

},{}],112:[function(require,module,exports){
var terminatorRegexString = "[\-()_\\[\\]’“”\"'\/.?!:;,¿¡]";
var terminatorRegexStart = new RegExp( "^" + terminatorRegexString + "+" );
var terminatorRegexEnd = new RegExp( terminatorRegexString + "+$" );

/**
 * Removes sentence terminators at the beginning and end of a sentence.
 *
 * @param {String} word The word to remove terminators from.
 * @returns {String} The word without terminators.
 */
module.exports = function( word ) {
	word = word.replace( terminatorRegexStart, "" );
	word = word.replace( terminatorRegexEnd, "" );
	return word;
};

},{}],113:[function(require,module,exports){
/** @module stringProcessing/replaceDiacritics */

var diacriticsRemovalMap = require( "../config/diacritics.js" );

/**
 * Replaces all diacritics from the text based on the diacritics removal map.
 *
 * @param {string} text The text to remove diacritics from.
 * @returns {string} The text with all diacritics replaced.
 */
module.exports = function( text ) {
	var map = diacriticsRemovalMap();

	for ( var i = 0; i < map.length; i++ ) {
		text = text.replace(
			map[ i ].letters,
			map[ i ].base
		);
	}
	return text;
};

},{"../config/diacritics.js":20}],114:[function(require,module,exports){
/** @module stringProcessing/replaceString */

/**
 * Replaces string with a replacement in text
 *
 * @param {string} text The textstring to remove
 * @param {string} stringToReplace The string to replace
 * @param {string} replacement The replacement of the string
 * @returns {string} The text with the string replaced
 */
module.exports = function( text, stringToReplace, replacement ) {
	text = text.replace( stringToReplace, replacement );

	return text;
};

},{}],115:[function(require,module,exports){
/** @module stringProcessing/sanitizeString */

var stripTags = require( "../stringProcessing/stripHTMLTags.js" ).stripFullTags;
var stripSpaces = require( "../stringProcessing/stripSpaces.js" );

/**
 * Strip HTMLtags characters from string that break regex
 *
 * @param {String} text The text to strip the characters from.
 * @returns {String} The text without characters.
 */
module.exports = function( text ) {
	text = text.replace( /[\[\]\{\}\(\)\*\+\?\^\$\|]/g, "" );
	text = stripTags( text );
	text = stripSpaces( text );

	return text;
};

},{"../stringProcessing/stripHTMLTags.js":118,"../stringProcessing/stripSpaces.js":121}],116:[function(require,module,exports){
var wordCount = require( "./countWords.js" );
var forEach = require( "lodash/forEach" );
var stripHTMLTags = require( "./stripHTMLTags.js" ).stripFullTags;

/**
 * Returns an array with the number of words in a sentence.
 * @param {Array} sentences Array with sentences from text.
 * @returns {Array} Array with amount of words in each sentence.
 */
module.exports = function( sentences ) {
	var sentencesWordCount = [];
	forEach( sentences, function( sentence ) {
		// For counting words we want to omit the HTMLtags.
		var strippedSentence = stripHTMLTags( sentence );
		var length = wordCount( strippedSentence );

		if ( length <= 0 ) {
			return;
		}

		sentencesWordCount.push( {
			sentence: sentence,
			sentenceLength: wordCount( sentence ),
		} );
	} );
	return sentencesWordCount;
};

},{"./countWords.js":94,"./stripHTMLTags.js":118,"lodash/forEach":267}],117:[function(require,module,exports){
/** @module stringProcessing/stringToRegex */
var isUndefined = require( "lodash/isUndefined" );
var replaceDiacritics = require( "../stringProcessing/replaceDiacritics.js" );
var sanitizeString = require( "../stringProcessing/sanitizeString.js" );
var addWordBoundary = require( "../stringProcessing/addWordboundary.js" );

var memoize = require( "lodash/memoize" );

/**
 * Creates a regex from a string so it can be matched everywhere in the same way.
 *
 * @param {string} string The string to make a regex from.
 * @param {string} [extraBoundary=""] A string that is used as extra boundary for the regex.
 * @param {boolean} [doReplaceDiacritics=true] If set to false, it doesn't replace diacritics. Defaults to true.
 * @returns {RegExp} regex The regex made from the keyword
 */
module.exports = memoize( function( string, extraBoundary, doReplaceDiacritics ) {
	if ( isUndefined( extraBoundary ) ) {
		extraBoundary = "";
	}

	if ( isUndefined( doReplaceDiacritics ) || doReplaceDiacritics === true ) {
		string = replaceDiacritics( string );
	}

	string = sanitizeString( string );
	string = addWordBoundary( string, extraBoundary );
	return new RegExp( string, "ig" );
} );

},{"../stringProcessing/addWordboundary.js":90,"../stringProcessing/replaceDiacritics.js":113,"../stringProcessing/sanitizeString.js":115,"lodash/isUndefined":290,"lodash/memoize":295}],118:[function(require,module,exports){
/** @module stringProcessing/stripHTMLTags */

var stripSpaces = require( "../stringProcessing/stripSpaces.js" );

var blockElements = require( "../helpers/html.js" ).blockElements;

var blockElementStartRegex = new RegExp( "^<(" + blockElements.join( "|" ) + ")[^>]*?>", "i" );
var blockElementEndRegex = new RegExp( "</(" + blockElements.join( "|" ) + ")[^>]*?>$", "i" );

/**
 * Strip incomplete tags within a text. Strips an endtag at the beginning of a string and the start tag at the end of a
 * start of a string.
 * @param {String} text The text to strip the HTML-tags from at the begin and end.
 * @returns {String} The text without HTML-tags at the begin and end.
 */
var stripIncompleteTags = function( text ) {
	text = text.replace( /^(<\/([^>]+)>)+/i, "" );
	text = text.replace( /(<([^\/>]+)>)+$/i, "" );
	return text;
};

/**
 * Removes the block element tags at the beginning and end of a string and returns this string.
 *
 * @param {string} text The unformatted string.
 * @returns {string} The text with removed HTML begin and end block elements
 */
var stripBlockTagsAtStartEnd = function( text ) {
	text = text.replace( blockElementStartRegex, "" );
	text = text.replace( blockElementEndRegex, "" );
	return text;
};

/**
 * Strip HTML-tags from text
 *
 * @param {String} text The text to strip the HTML-tags from.
 * @returns {String} The text without HTML-tags.
 */
var stripFullTags = function( text ) {
	text = text.replace( /(<([^>]+)>)/ig, " " );
	text = stripSpaces( text );
	return text;
};

module.exports = {
	stripFullTags: stripFullTags,
	stripIncompleteTags: stripIncompleteTags,
	stripBlockTagsAtStartEnd: stripBlockTagsAtStartEnd,
};

},{"../helpers/html.js":36,"../stringProcessing/stripSpaces.js":121}],119:[function(require,module,exports){
/** @module stringProcessing/stripNonTextTags */

var stripSpaces = require( "../stringProcessing/stripSpaces.js" );

/**
 * Strips all tags from the text, except li, p, dd and h1-h6 tags from the text that contain content to check.
 *
 * @param {string} text The text to strip tags from
 * @returns {string} The text stripped of tags, except for li, p, dd and h1-h6 tags.
 */
module.exports = function( text ) {
	text = text.replace( /<(?!li|\/li|p|\/p|h1|\/h1|h2|\/h2|h3|\/h3|h4|\/h4|h5|\/h5|h6|\/h6|dd).*?\>/g, "" );
	text = stripSpaces( text );
	return text;
};

},{"../stringProcessing/stripSpaces.js":121}],120:[function(require,module,exports){
/** @module stringProcessing/stripNumbers */

var stripSpaces = require( "../stringProcessing/stripSpaces.js" );

/**
 * Removes all words comprised only of numbers.
 *
 * @param {string} text to remove words
 * @returns {string} The text with numberonly words removed.
 */

module.exports = function( text ) {
	// Remove "words" comprised only of numbers
	text = text.replace( /\b[0-9]+\b/g, "" );

	text = stripSpaces( text );

	if ( text === "." ) {
		text = "";
	}
	return text;
};

},{"../stringProcessing/stripSpaces.js":121}],121:[function(require,module,exports){
/** @module stringProcessing/stripSpaces */

/**
 * Strip double spaces from text
 *
 * @param {String} text The text to strip spaces from.
 * @returns {String} The text without double spaces
 */
module.exports = function( text ) {
	// Replace multiple spaces with single space
	text = text.replace( /\s{2,}/g, " " );

	// Replace spaces followed by periods with only the period.
	text = text.replace( /\s\./g, "." );

	// Remove first/last character if space
	text = text.replace( /^\s+|\s+$/g, "" );

	return text;
};

},{}],122:[function(require,module,exports){
var replaceString = require( "../stringProcessing/replaceString.js" );
var removalWords = require( "../config/removalWords.js" )();
var matchTextWithTransliteration = require( "../stringProcessing/matchTextWithTransliteration.js" );

/**
 * Matches the keyword in an array of strings
 *
 * @param {Array} matches The array with the matched headings.
 * @param {String} keyword The keyword to match
 * @param {string} locale The locale used for transliteration.
 * @returns {number} The number of occurrences of the keyword in the headings.
 */
module.exports = function( matches, keyword, locale ) {
	var foundInHeader;
	if ( matches === null ) {
		foundInHeader = -1;
	} else {
		foundInHeader = 0;
		for ( var i = 0; i < matches.length; i++ ) {
			// TODO: This replaceString call seemingly doesn't work, as no replacement value is being sent to the .replace method in replaceString
			var formattedHeaders = replaceString(
				matches[ i ], removalWords
			);
			if (
				matchTextWithTransliteration( formattedHeaders, keyword, locale ).length > 0 ||
				matchTextWithTransliteration( matches[ i ], keyword, locale ).length > 0
			) {
				foundInHeader++;
			}
		}
	}
	return foundInHeader;
};

},{"../config/removalWords.js":21,"../stringProcessing/matchTextWithTransliteration.js":108,"../stringProcessing/replaceString.js":114}],123:[function(require,module,exports){
var isUndefined = require( "lodash/isUndefined" );
var pick = require( "lodash/pick" );

/**
 * Represents a partial deviation when counting syllables
 *
 * @param {Object} options Extra options about how to match this fragment.
 * @param {string} options.location The location in the word where this deviation can occur.
 * @param {string} options.word The actual string that should be counted differently.
 * @param {number} options.syllables The amount of syllables this fragment has.
 * @param {string[]} [options.notFollowedBy] A list of characters that this fragment shouldn't be followed with.
 * @param {string[]} [options.alsoFollowedBy] A list of characters that this fragment could be followed with.
 *
 * @constructor
 */
function DeviationFragment( options ) {
	this._location = options.location;
	this._fragment = options.word;
	this._syllables = options.syllables;
	this._regex = null;

	this._options = pick( options, [ "notFollowedBy", "alsoFollowedBy" ] );
}

/**
 * Creates a regex that matches this fragment inside a word.
 *
 * @returns {void}
 */
DeviationFragment.prototype.createRegex = function() {
	var regexString = "";
	var options = this._options;

	var fragment = this._fragment;

	if ( ! isUndefined( options.notFollowedBy ) ) {
		fragment += "(?![" + options.notFollowedBy.join( "" ) + "])";
	}

	if ( ! isUndefined( options.alsoFollowedBy ) ) {
		fragment += "[" + options.alsoFollowedBy.join( "" ) + "]?";
	}

	switch ( this._location ) {
		case "atBeginning":
			regexString = "^" + fragment;
			break;

		case "atEnd":
			regexString = fragment + "$";
			break;

		case "atBeginningOrEnd":
			regexString = "(^" + fragment + ")|(" + fragment + "$)";
			break;

		default:
			regexString = fragment;
			break;
	}

	this._regex = new RegExp( regexString );
};

/**
 * Returns the regex that matches this fragment inside a word.
 *
 * @returns {RegExp} The regexp that matches this fragment.
 */
DeviationFragment.prototype.getRegex = function() {
	if ( null === this._regex ) {
		this.createRegex();
	}

	return this._regex;
};

/**
 * Returns whether or not this fragment occurs in a word.
 *
 * @param {string} word The word to match the fragment in.
 * @returns {boolean} Whether or not this fragment occurs in a word.
 */
DeviationFragment.prototype.occursIn = function( word ) {
	var regex = this.getRegex();

	return regex.test( word );
};

/**
 * Removes this fragment from the given word.
 *
 * @param {string} word The word to remove this fragment from.
 * @returns {string} The modified word.
 */
DeviationFragment.prototype.removeFrom = function( word ) {
	// Replace by a space to keep the remaining parts separated.
	return word.replace( this._fragment, " " );
};

/**
 * Returns the amount of syllables for this fragment.
 *
 * @returns {number} The amount of syllables for this fragment.
 */
DeviationFragment.prototype.getSyllables = function() {
	return this._syllables;
};

module.exports = DeviationFragment;

},{"lodash/isUndefined":290,"lodash/pick":299}],124:[function(require,module,exports){
/** @module stringProcessing/countSyllables */

var syllableMatchers = require( "../../config/syllables.js" );

var getWords = require( "../getWords.js" );

var forEach = require( "lodash/forEach" );
var filter = require( "lodash/filter" );
var find = require( "lodash/find" );
var isUndefined = require( "lodash/isUndefined" );
var map = require( "lodash/map" );
var sum = require( "lodash/sum" );
var memoize = require( "lodash/memoize" );
var flatMap = require( "lodash/flatMap" );

var SyllableCountIterator = require( "../../helpers/syllableCountIterator.js" );
var DeviationFragment = require( "./DeviationFragment" );

/**
 * Counts vowel groups inside a word.
 *
 * @param {string} word A text with words to count syllables.
 * @param {String} locale The locale to use for counting syllables.
 * @returns {number} the syllable count.
 */
var countVowelGroups = function( word, locale ) {
	var numberOfSyllables = 0;
	var vowelRegex = new RegExp( "[^" + syllableMatchers( locale ).vowels + "]", "ig" );
	var foundVowels = word.split( vowelRegex );
	var filteredWords = filter( foundVowels, function( vowel ) {
		return vowel !== "";
	} );
	numberOfSyllables += filteredWords.length;

	return numberOfSyllables;
};

/**
 * Counts the syllables using vowel exclusions. These are used for groups of vowels that are more or less
 * than 1 syllable.
 *
 * @param {String} word The word to count syllables of.
 * @param {String} locale The locale to use for counting syllables.
 * @returns {number} The number of syllables found in the given word.
 */
var countVowelDeviations = function( word, locale ) {
	var syllableCountIterator = new SyllableCountIterator( syllableMatchers( locale ) );
	return syllableCountIterator.countSyllables( word );
};

/**
 * Returns the number of syllables for the word if it is in the list of full word deviations.
 *
 * @param {String} word The word to retrieve the syllables for.
 * @param {String} locale The locale to use for counting syllables.
 * @returns {number} The number of syllables found.
 */
var countFullWordDeviations = function( word, locale ) {
	var fullWordDeviations = syllableMatchers( locale ).deviations.words.full;

	var deviation = find( fullWordDeviations, function( fullWordDeviation ) {
		return fullWordDeviation.word === word;
	} );

	if ( ! isUndefined( deviation ) ) {
		return deviation.syllables;
	}

	return 0;
};

/**
 * Creates an array of deviation fragments for a certain locale.
 *
 * @param {Object} syllableConfig Syllable config for a certain locale.
 * @returns {DeviationFragment[]} A list of deviation fragments
 */
function createDeviationFragments( syllableConfig ) {
	var deviationFragments = [];

	var deviations = syllableConfig.deviations;

	if ( ! isUndefined( deviations.words ) && ! isUndefined( deviations.words.fragments ) ) {
		deviationFragments = flatMap( deviations.words.fragments, function( fragments, fragmentLocation ) {
			return map( fragments, function( fragment ) {
				fragment.location = fragmentLocation;

				return new DeviationFragment( fragment );
			} );
		} );
	}

	return deviationFragments;
}

var createDeviationFragmentsMemoized = memoize( createDeviationFragments );

/**
 * Counts syllables in partial exclusions. If these are found, returns the number of syllables  found, and the modified word.
 * The word is modified so the excluded part isn't counted by the normal syllable counter.
 *
 * @param {String} word The word to count syllables of.
 * @param {String} locale The locale to use for counting syllables.
 * @returns {object} The number of syllables found and the modified word.
 */
var countPartialWordDeviations = function( word, locale ) {
	var deviationFragments = createDeviationFragmentsMemoized( syllableMatchers( locale ) );
	var remainingParts = word;
	var syllableCount = 0;

	forEach( deviationFragments, function( deviationFragment ) {
		if ( deviationFragment.occursIn( remainingParts ) ) {
			remainingParts = deviationFragment.removeFrom( remainingParts );
			syllableCount += deviationFragment.getSyllables();
		}
	} );

	return { word: remainingParts, syllableCount: syllableCount };
};

/**
 * Count the number of syllables in a word, using vowels and exceptions.
 *
 * @param {String} word The word to count the number of syllables of.
 * @param {String} locale The locale to use for counting syllables.
 * @returns {number} The number of syllables found in a word.
 */
var countUsingVowels = function( word, locale ) {
	var syllableCount = 0;

	syllableCount += countVowelGroups( word, locale );
	syllableCount += countVowelDeviations( word, locale );

	return syllableCount;
};

/**
 * Counts the number of syllables in a word.
 *
 * @param {string} word The word to count syllables of.
 * @param {string} locale The locale of the word.
 * @returns {number} The syllable count for the word.
 */
var countSyllablesInWord = function( word, locale ) {
	var syllableCount = 0;

	var fullWordExclusion = countFullWordDeviations( word, locale );
	if ( fullWordExclusion !== 0 ) {
		return fullWordExclusion;
	}

	var partialExclusions = countPartialWordDeviations( word, locale );
	word = partialExclusions.word;
	syllableCount += partialExclusions.syllableCount;
	syllableCount += countUsingVowels( word, locale );

	return syllableCount;
};

/**
 * Counts the number of syllables in a text per word based on vowels.
 * Uses exclusion words for words that cannot be matched with vowel matching.
 *
 * @param {String} text The text to count the syllables of.
 * @param {String} locale The locale to use for counting syllables.
 * @returns {int} The total number of syllables found in the text.
 */
var countSyllablesInText = function( text, locale ) {
	text = text.toLocaleLowerCase();
	var words = getWords( text );

	var syllableCounts = map( words,  function( word ) {
		return countSyllablesInWord( word, locale );
	} );

	return sum( syllableCounts );
};

module.exports = countSyllablesInText;

},{"../../config/syllables.js":23,"../../helpers/syllableCountIterator.js":38,"../getWords.js":104,"./DeviationFragment":123,"lodash/filter":263,"lodash/find":264,"lodash/flatMap":266,"lodash/forEach":267,"lodash/isUndefined":290,"lodash/map":294,"lodash/memoize":295,"lodash/sum":302}],125:[function(require,module,exports){
/** @module stringProcessing/replaceDiacritics */

var transliterationsMap = require( "../config/transliterations.js" );

/**
 * Replaces all special characters from the text based on the transliterations map.
 *
 * @param {string} text The text to remove special characters from.
 * @param {string} locale The locale.
 * @returns {string} The text with all special characters replaced.
 */
module.exports = function( text, locale ) {
	var map = transliterationsMap( locale );
	for ( var i = 0; i < map.length; i++ ) {
		text = text.replace(
			map[ i ].letter,
			map[ i ].alternative
		);
	}
	return text;
};

},{"../config/transliterations.js":27}],126:[function(require,module,exports){
/** @module stringProcessing/unifyWhitespace */

/**
 * Replaces a non breaking space with a normal space
 * @param {string} text The string to replace the non breaking space in.
 * @returns {string} The text with unified spaces.
 */
var unifyNonBreakingSpace = function( text ) {
	return text.replace( /&nbsp;/g, " " );
};

/**
 * Replaces all whitespaces with a normal space
 * @param {string} text The string to replace the non breaking space in.
 * @returns {string} The text with unified spaces.
 */
var unifyWhiteSpace = function( text ) {
	return text.replace( /\s/g, " " );
};

/**
 * Converts all whitespace to spaces.
 *
 * @param {string} text The text to replace spaces.
 * @returns {string} The text with unified spaces.
 */
var unifyAllSpaces = function( text ) {
	text = unifyNonBreakingSpace( text );
	return unifyWhiteSpace( text );
};

module.exports = {
	unifyNonBreakingSpace: unifyNonBreakingSpace,
	unifyWhiteSpace: unifyWhiteSpace,
	unifyAllSpaces: unifyAllSpaces,
};

},{}],127:[function(require,module,exports){
var urlFromAnchorRegex = /href=(["'])([^"']+)\1/i;
var urlMethods = require( "url" );

/**
 * Removes a hash from a URL, assumes a well formed URL.
 *
 * @param {string} url The URL to remove a hash from.
 * @returns {string} The URL without the hash.
 */
function removeHash( url ) {
	return url.split( "#" )[ 0 ];
}

/**
 * Removes all query args from a URL, assumes a well formed URL.
 *
 * @param {string} url The URL to remove the query args from.
 * @returns {string} The URL without the query args.
 */
function removeQueryArgs( url ) {
	return url.split( "?" )[ 0 ];
}

/**
 * Removes the trailing slash of a URL.
 *
 * @param {string} url The URL to remove the trailing slash from.
 * @returns {string} A URL without a trailing slash.
 */
function removeTrailingSlash( url ) {
	return url.replace( /\/$/, "" );
}

/**
 * Adds a trailing slash to a URL if it is not present.
 *
 * @param {string} url The URL to add a trailing slash to.
 * @returns {string} A URL with a trailing slash.
 */
function addTrailingSlash( url ) {
	return removeTrailingSlash( url ) + "/";
}

/**
 * Retrieves the URL from an anchor tag
 *
 * @param {string} anchorTag An anchor tag.
 * @returns {string} The URL in the anchor tag.
 */
function getFromAnchorTag( anchorTag ) {
	var urlMatch = urlFromAnchorRegex.exec( anchorTag );

	return ( urlMatch === null ) ? "" : urlMatch[ 2 ];
}

/**
 * Returns whether or not the given URLs are equal
 *
 * @param {string} urlA The first URL to compare.
 * @param {string} urlB The second URL to compare.
 *
 * @returns {boolean} Whether or not the given URLs are equal.
 */
function areEqual( urlA, urlB ) {
	// Make sure we are comparing URLs without query arguments and hashes.
	urlA = removeQueryArgs( removeHash( urlA ) );
	urlB = removeQueryArgs( removeHash( urlB ) );

	return addTrailingSlash( urlA ) === addTrailingSlash( urlB );
}

/**
 * Returns the domain name of a URL
 *
 * @param {string} url The URL to retrieve the domain name of.
 * @returns {string} The domain name of the URL.
 */
function getHostname( url ) {
	url = urlMethods.parse( url );

	return url.hostname;
}

module.exports = {
	removeHash: removeHash,
	removeQueryArgs: removeQueryArgs,
	removeTrailingSlash: removeTrailingSlash,
	addTrailingSlash: addTrailingSlash,
	getFromAnchorTag: getFromAnchorTag,
	areEqual: areEqual,
	getHostname: getHostname,
};

},{"url":321}],128:[function(require,module,exports){
var isUndefined = require( "lodash/isUndefined" );
var isNumber = require( "lodash/isNumber" );

/**
 * A function that only returns an empty that can be used as an empty marker
 *
 * @returns {Array} A list of empty marks.
 */
var emptyMarker = function() {
	return [];
};

/**
 * Construct the AssessmentResult value object.
 *
 * @param {Object} [values] The values for this assessment result.
 *
 * @constructor
 */
var AssessmentResult = function( values ) {
	this._hasScore = false;
	this._identifier = "";
	this._hasMarks = false;
	this._marker = emptyMarker;
	this.score = 0;
	this.text = "";

	if ( isUndefined( values ) ) {
		values = {};
	}

	if ( ! isUndefined( values.score ) ) {
		this.setScore( values.score );
	}

	if ( ! isUndefined( values.text ) ) {
		this.setText( values.text );
	}
};

/**
 * Check if a score is available.
 * @returns {boolean} Whether or not a score is available.
 */
AssessmentResult.prototype.hasScore = function() {
	return this._hasScore;
};

/**
 * Get the available score
 * @returns {number} The score associated with the AssessmentResult.
 */
AssessmentResult.prototype.getScore = function() {
	return this.score;
};

/**
 * Set the score for the assessment.
 * @param {number} score The score to be used for the score property
 * @returns {void}
 */
AssessmentResult.prototype.setScore = function( score ) {
	if ( isNumber( score ) ) {
		this.score = score;
		this._hasScore = true;
	}
};

/**
 * Check if a text is available.
 * @returns {boolean} Whether or not a text is available.
 */
AssessmentResult.prototype.hasText = function() {
	return this.text !== "";
};

/**
 * Get the available text
 * @returns {string} The text associated with the AssessmentResult.
 */
AssessmentResult.prototype.getText = function() {
	return this.text;
};

/**
 * Set the text for the assessment.
 * @param {string} text The text to be used for the text property
 * @returns {void}
 */
AssessmentResult.prototype.setText = function( text ) {
	if ( isUndefined( text ) ) {
		text = "";
	}

	this.text = text;
};

/**
 * Sets the identifier
 *
 * @param {string} identifier An alphanumeric identifier for this result.
 */
AssessmentResult.prototype.setIdentifier = function( identifier ) {
	this._identifier = identifier;
};

/**
 * Gets the identifier
 *
 * @returns {string} An alphanumeric identifier for this result.
 */
AssessmentResult.prototype.getIdentifier = function() {
	return this._identifier;
};

/**
 * Sets the marker, a pure function that can return the marks for a given Paper
 *
 * @param {Function} marker The marker to set.
 */
AssessmentResult.prototype.setMarker = function( marker ) {
	this._marker = marker;
};

/**
 * Returns whether or not this result has a marker that can be used to mark for a given Paper
 *
 * @returns {boolean} Whether or this result has a marker.
 */
AssessmentResult.prototype.hasMarker = function() {
	return this._hasMarks && this._marker !== emptyMarker;
};

/**
 * Gets the marker, a pure function that can return the marks for a given Paper
 *
 * @returns {Function} The marker.
 */
AssessmentResult.prototype.getMarker = function() {
	return this._marker;
};

/**
 * Sets the value of _hasMarks to determine if there is something to mark.
 *
 * @param {boolean} hasMarks Is there something to mark.
 */
AssessmentResult.prototype.setHasMarks = function( hasMarks ) {
	this._hasMarks = hasMarks;
};

/**
 * Returns the value of _hasMarks to determine if there is something to mark.
 *
 * @returns {boolean} Is there something to mark.
 */
AssessmentResult.prototype.hasMarks = function() {
	return this._hasMarks;
};

module.exports = AssessmentResult;

},{"lodash/isNumber":283,"lodash/isUndefined":290}],129:[function(require,module,exports){
var defaults = require( "lodash/defaults" );

/**
 * Represents a marked piece of text
 *
 * @param {Object} properties The properties of this Mark.
 * @param {string} properties.original The original text that should be marked.
 * @param {string} properties.marked The new text including marks.
 * @constructor
 */
function Mark( properties ) {
	defaults( properties, { original: "", marked: "" } );

	this._properties = properties;
}


/**
 * Returns the original text
 *
 * @returns {string} The original text.
 */
Mark.prototype.getOriginal = function() {
	return this._properties.original;
};

/**
 * Returns the marked text
 *
 * @returns {string} The replaced text.
 */
Mark.prototype.getMarked = function() {
	return this._properties.marked;
};

/**
 * Applies this mark to the given text
 *
 * @param {string} text The original text without the mark applied.
 * @returns {string} The A new text with the mark applied to it.
 */
Mark.prototype.applyWithReplace = function( text ) {
	// Cute method to replace everything in a string without using regex.
	return text.split( this._properties.original ).join( this._properties.marked );
};

module.exports = Mark;

},{"lodash/defaults":260}],130:[function(require,module,exports){
var defaults = require( "lodash/defaults" );
var sanitizeString = require( "../stringProcessing/sanitizeString.js" );

/**
 * Default attributes to be used by the Paper if they are left undefined.
 * @type {{keyword: string, description: string, title: string, url: string}}
 */
var defaultAttributes = {
	keyword: "",
	description: "",
	title: "",
	titleWidth: 0,
	url: "",
	locale: "en_US",
	permalink: "",
};

/**
 * Sanitize attributes before they are assigned to the Paper.
 * @param {object} attributes The attributes that need sanitizing.
 * @returns {object} The attributes passed to the Paper.
 */
var sanitizeAttributes = function( attributes ) {
	attributes.keyword = sanitizeString( attributes.keyword );

	return attributes;
};

/**
 * Construct the Paper object and set the keyword property.
 * @param {string} text The text to use in the analysis.
 * @param {object} attributes The object containing all attributes.
 * @constructor
 */
var Paper = function( text, attributes ) {
	this._text = text || "";

	attributes = attributes || {};
	defaults( attributes, defaultAttributes );
	if ( attributes.locale === "" ) {
		attributes.locale = defaultAttributes.locale;
	}
	this._attributes = sanitizeAttributes( attributes );
};

/**
 * Check whether a keyword is available.
 * @returns {boolean} Returns true if the Paper has a keyword.
 */
Paper.prototype.hasKeyword = function() {
	return this._attributes.keyword !== "";
};

/**
 * Return the associated keyword or an empty string if no keyword is available.
 * @returns {string} Returns Keyword
 */
Paper.prototype.getKeyword = function() {
	return this._attributes.keyword;
};

/**
 * Check whether the text is available.
 * @returns {boolean} Returns true if the paper has a text.
 */
Paper.prototype.hasText = function() {
	return this._text !== "";
};

/**
 * Return the associated text or am empty string if no text is available.
 * @returns {string} Returns text
 */
Paper.prototype.getText = function() {
	return this._text;
};

/**
 * Check whether a description is available.
 * @returns {boolean} Returns true if the paper has a description.
 */
Paper.prototype.hasDescription = function() {
	return this._attributes.description !== "";
};

/**
 * Return the description or an empty string if no description is available.
 * @returns {string} Returns the description.
 */
Paper.prototype.getDescription = function() {
	return this._attributes.description;
};

/**
 * Check whether an title is available
 * @returns {boolean} Returns true if the Paper has a title.
 */
Paper.prototype.hasTitle = function() {
	return this._attributes.title !== "";
};

/**
 * Return the title, or an empty string of no title is available.
 * @returns {string} Returns the title
 */
Paper.prototype.getTitle = function() {
	return this._attributes.title;
};

/**
 * Check whether an title width in pixels is available
 * @returns {boolean} Returns true if the Paper has a title.
 */
Paper.prototype.hasTitleWidth = function() {
	return this._attributes.titleWidth !== 0;
};

/**
 * Return the title width in pixels, or an empty string of no title width in pixels is available.
 * @returns {string} Returns the title
 */
Paper.prototype.getTitleWidth = function() {
	return this._attributes.titleWidth;
};

/**
 * Check whether an url is available
 * @returns {boolean} Returns true if the Paper has an Url.
 */
Paper.prototype.hasUrl = function() {
	return this._attributes.url !== "";
};

/**
 * Return the url, or an empty string of no url is available.
 * @returns {string} Returns the url
 */
Paper.prototype.getUrl = function() {
	return this._attributes.url;
};

/**
 * Check whether a locale is available
 * @returns {boolean} Returns true if the paper has a locale
 */
Paper.prototype.hasLocale = function() {
	return this._attributes.locale !== "";
};

/**
 * Return the locale or an empty string if no locale is available
 * @returns {string} Returns the locale
 */
Paper.prototype.getLocale = function() {
	return this._attributes.locale;
};

/**
 * Check whether a permalink is available
 * @returns {boolean} Returns true if the Paper has a permalink.
 */
Paper.prototype.hasPermalink = function() {
	return this._attributes.permalink !== "";
};

/**
 * Return the permalink, or an empty string of no permalink is available.
 * @returns {string} Returns the permalink.
 */
Paper.prototype.getPermalink = function() {
	return this._attributes.permalink;
};

module.exports = Paper;

},{"../stringProcessing/sanitizeString.js":115,"lodash/defaults":260}],131:[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Creates an hash object.
 *
 * @private
 * @constructor
 * @returns {Object} Returns the new hash object.
 */
function Hash() {}

// Avoid inheriting from `Object.prototype` when possible.
Hash.prototype = nativeCreate ? nativeCreate(null) : objectProto;

module.exports = Hash;

},{"./_nativeCreate":248}],132:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map');

module.exports = Map;

},{"./_getNative":221,"./_root":250}],133:[function(require,module,exports){
var mapClear = require('./_mapClear'),
    mapDelete = require('./_mapDelete'),
    mapGet = require('./_mapGet'),
    mapHas = require('./_mapHas'),
    mapSet = require('./_mapSet');

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function MapCache(values) {
  var index = -1,
      length = values ? values.length : 0;

  this.clear();
  while (++index < length) {
    var entry = values[index];
    this.set(entry[0], entry[1]);
  }
}

// Add functions to the `MapCache`.
MapCache.prototype.clear = mapClear;
MapCache.prototype['delete'] = mapDelete;
MapCache.prototype.get = mapGet;
MapCache.prototype.has = mapHas;
MapCache.prototype.set = mapSet;

module.exports = MapCache;

},{"./_mapClear":242,"./_mapDelete":243,"./_mapGet":244,"./_mapHas":245,"./_mapSet":246}],134:[function(require,module,exports){
var root = require('./_root');

/** Built-in value references. */
var Reflect = root.Reflect;

module.exports = Reflect;

},{"./_root":250}],135:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var Set = getNative(root, 'Set');

module.exports = Set;

},{"./_getNative":221,"./_root":250}],136:[function(require,module,exports){
var MapCache = require('./_MapCache'),
    cachePush = require('./_cachePush');

/**
 *
 * Creates a set cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values ? values.length : 0;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.push(values[index]);
  }
}

// Add functions to the `SetCache`.
SetCache.prototype.push = cachePush;

module.exports = SetCache;

},{"./_MapCache":133,"./_cachePush":198}],137:[function(require,module,exports){
var stackClear = require('./_stackClear'),
    stackDelete = require('./_stackDelete'),
    stackGet = require('./_stackGet'),
    stackHas = require('./_stackHas'),
    stackSet = require('./_stackSet');

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function Stack(values) {
  var index = -1,
      length = values ? values.length : 0;

  this.clear();
  while (++index < length) {
    var entry = values[index];
    this.set(entry[0], entry[1]);
  }
}

// Add functions to the `Stack` cache.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

module.exports = Stack;

},{"./_stackClear":252,"./_stackDelete":253,"./_stackGet":254,"./_stackHas":255,"./_stackSet":256}],138:[function(require,module,exports){
var root = require('./_root');

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;

},{"./_root":250}],139:[function(require,module,exports){
var root = require('./_root');

/** Built-in value references. */
var Uint8Array = root.Uint8Array;

module.exports = Uint8Array;

},{"./_root":250}],140:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var WeakMap = getNative(root, 'WeakMap');

module.exports = WeakMap;

},{"./_getNative":221,"./_root":250}],141:[function(require,module,exports){
/**
 * Adds the key-value `pair` to `map`.
 *
 * @private
 * @param {Object} map The map to modify.
 * @param {Array} pair The key-value pair to add.
 * @returns {Object} Returns `map`.
 */
function addMapEntry(map, pair) {
  // Don't return `Map#set` because it doesn't return the map instance in IE 11.
  map.set(pair[0], pair[1]);
  return map;
}

module.exports = addMapEntry;

},{}],142:[function(require,module,exports){
/**
 * Adds `value` to `set`.
 *
 * @private
 * @param {Object} set The set to modify.
 * @param {*} value The value to add.
 * @returns {Object} Returns `set`.
 */
function addSetEntry(set, value) {
  set.add(value);
  return set;
}

module.exports = addSetEntry;

},{}],143:[function(require,module,exports){
/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {...*} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  var length = args.length;
  switch (length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

module.exports = apply;

},{}],144:[function(require,module,exports){
/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array.length;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

module.exports = arrayEach;

},{}],145:[function(require,module,exports){
/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

module.exports = arrayFilter;

},{}],146:[function(require,module,exports){
var baseIndexOf = require('./_baseIndexOf');

/**
 * A specialized version of `_.includes` for arrays without support for
 * specifying an index to search from.
 *
 * @private
 * @param {Array} array The array to search.
 * @param {*} target The value to search for.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludes(array, value) {
  return !!array.length && baseIndexOf(array, value, 0) > -1;
}

module.exports = arrayIncludes;

},{"./_baseIndexOf":176}],147:[function(require,module,exports){
/**
 * This function is like `arrayIncludes` except that it accepts a comparator.
 *
 * @private
 * @param {Array} array The array to search.
 * @param {*} target The value to search for.
 * @param {Function} comparator The comparator invoked per element.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludesWith(array, value, comparator) {
  var index = -1,
      length = array.length;

  while (++index < length) {
    if (comparator(value, array[index])) {
      return true;
    }
  }
  return false;
}

module.exports = arrayIncludesWith;

},{}],148:[function(require,module,exports){
/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

module.exports = arrayMap;

},{}],149:[function(require,module,exports){
/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

module.exports = arrayPush;

},{}],150:[function(require,module,exports){
/**
 * A specialized version of `_.reduce` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the first element of `array` as the initial value.
 * @returns {*} Returns the accumulated value.
 */
function arrayReduce(array, iteratee, accumulator, initAccum) {
  var index = -1,
      length = array.length;

  if (initAccum && length) {
    accumulator = array[++index];
  }
  while (++index < length) {
    accumulator = iteratee(accumulator, array[index], index, array);
  }
  return accumulator;
}

module.exports = arrayReduce;

},{}],151:[function(require,module,exports){
/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check, else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

module.exports = arraySome;

},{}],152:[function(require,module,exports){
var eq = require('./eq');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used by `_.defaults` to customize its `_.assignIn` use.
 *
 * @private
 * @param {*} objValue The destination value.
 * @param {*} srcValue The source value.
 * @param {string} key The key of the property to assign.
 * @param {Object} object The parent object of `objValue`.
 * @returns {*} Returns the value to assign.
 */
function assignInDefaults(objValue, srcValue, key, object) {
  if (objValue === undefined ||
      (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
    return srcValue;
  }
  return objValue;
}

module.exports = assignInDefaults;

},{"./eq":261}],153:[function(require,module,exports){
var eq = require('./eq');

/**
 * This function is like `assignValue` except that it doesn't assign
 * `undefined` values.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignMergeValue(object, key, value) {
  if ((value !== undefined && !eq(object[key], value)) ||
      (typeof key == 'number' && value === undefined && !(key in object))) {
    object[key] = value;
  }
}

module.exports = assignMergeValue;

},{"./eq":261}],154:[function(require,module,exports){
var eq = require('./eq');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
      (value === undefined && !(key in object))) {
    object[key] = value;
  }
}

module.exports = assignValue;

},{"./eq":261}],155:[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the associative array.
 *
 * @private
 * @param {Array} array The array to query.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function assocDelete(array, key) {
  var index = assocIndexOf(array, key);
  if (index < 0) {
    return false;
  }
  var lastIndex = array.length - 1;
  if (index == lastIndex) {
    array.pop();
  } else {
    splice.call(array, index, 1);
  }
  return true;
}

module.exports = assocDelete;

},{"./_assocIndexOf":158}],156:[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/**
 * Gets the associative array value for `key`.
 *
 * @private
 * @param {Array} array The array to query.
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function assocGet(array, key) {
  var index = assocIndexOf(array, key);
  return index < 0 ? undefined : array[index][1];
}

module.exports = assocGet;

},{"./_assocIndexOf":158}],157:[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/**
 * Checks if an associative array value for `key` exists.
 *
 * @private
 * @param {Array} array The array to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function assocHas(array, key) {
  return assocIndexOf(array, key) > -1;
}

module.exports = assocHas;

},{"./_assocIndexOf":158}],158:[function(require,module,exports){
var eq = require('./eq');

/**
 * Gets the index at which the first occurrence of `key` is found in `array`
 * of key-value pairs.
 *
 * @private
 * @param {Array} array The array to search.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

module.exports = assocIndexOf;

},{"./eq":261}],159:[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/**
 * Sets the associative array `key` to `value`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 */
function assocSet(array, key, value) {
  var index = assocIndexOf(array, key);
  if (index < 0) {
    array.push([key, value]);
  } else {
    array[index][1] = value;
  }
}

module.exports = assocSet;

},{"./_assocIndexOf":158}],160:[function(require,module,exports){
var copyObject = require('./_copyObject'),
    keys = require('./keys');

/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssign(object, source) {
  return object && copyObject(source, keys(source), object);
}

module.exports = baseAssign;

},{"./_copyObject":208,"./keys":291}],161:[function(require,module,exports){
var identity = require('./identity');

/**
 * Casts `value` to `identity` if it's not a function.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Array} Returns the array-like object.
 */
function baseCastFunction(value) {
  return typeof value == 'function' ? value : identity;
}

module.exports = baseCastFunction;

},{"./identity":270}],162:[function(require,module,exports){
var isArray = require('./isArray'),
    stringToPath = require('./_stringToPath');

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Array} Returns the cast property path array.
 */
function baseCastPath(value) {
  return isArray(value) ? value : stringToPath(value);
}

module.exports = baseCastPath;

},{"./_stringToPath":257,"./isArray":274}],163:[function(require,module,exports){
var Stack = require('./_Stack'),
    arrayEach = require('./_arrayEach'),
    assignValue = require('./_assignValue'),
    baseAssign = require('./_baseAssign'),
    baseForOwn = require('./_baseForOwn'),
    cloneBuffer = require('./_cloneBuffer'),
    copyArray = require('./_copyArray'),
    copySymbols = require('./_copySymbols'),
    getTag = require('./_getTag'),
    initCloneArray = require('./_initCloneArray'),
    initCloneByTag = require('./_initCloneByTag'),
    initCloneObject = require('./_initCloneObject'),
    isArray = require('./isArray'),
    isBuffer = require('./isBuffer'),
    isHostObject = require('./_isHostObject'),
    isObject = require('./isObject');

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values supported by `_.clone`. */
var cloneableTags = {};
cloneableTags[argsTag] = cloneableTags[arrayTag] =
cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =
cloneableTags[dateTag] = cloneableTags[float32Tag] =
cloneableTags[float64Tag] = cloneableTags[int8Tag] =
cloneableTags[int16Tag] = cloneableTags[int32Tag] =
cloneableTags[mapTag] = cloneableTags[numberTag] =
cloneableTags[objectTag] = cloneableTags[regexpTag] =
cloneableTags[setTag] = cloneableTags[stringTag] =
cloneableTags[symbolTag] = cloneableTags[uint8Tag] =
cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] =
cloneableTags[uint32Tag] = true;
cloneableTags[errorTag] = cloneableTags[funcTag] =
cloneableTags[weakMapTag] = false;

/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @param {boolean} [isFull] Specify a clone including symbols.
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */
function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
  var result;
  if (customizer) {
    result = object ? customizer(value, key, object, stack) : customizer(value);
  }
  if (result !== undefined) {
    return result;
  }
  if (!isObject(value)) {
    return value;
  }
  var isArr = isArray(value);
  if (isArr) {
    result = initCloneArray(value);
    if (!isDeep) {
      return copyArray(value, result);
    }
  } else {
    var tag = getTag(value),
        isFunc = tag == funcTag || tag == genTag;

    if (isBuffer(value)) {
      return cloneBuffer(value, isDeep);
    }
    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
      if (isHostObject(value)) {
        return object ? value : {};
      }
      result = initCloneObject(isFunc ? {} : value);
      if (!isDeep) {
        result = baseAssign(result, value);
        return isFull ? copySymbols(value, result) : result;
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value : {};
      }
      result = initCloneByTag(value, tag, isDeep);
    }
  }
  // Check for circular references and return its corresponding clone.
  stack || (stack = new Stack);
  var stacked = stack.get(value);
  if (stacked) {
    return stacked;
  }
  stack.set(value, result);

  // Recursively populate clone (susceptible to call stack limits).
  (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {
    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));
  });
  return (isFull && !isArr) ? copySymbols(value, result) : result;
}

module.exports = baseClone;

},{"./_Stack":137,"./_arrayEach":144,"./_assignValue":154,"./_baseAssign":160,"./_baseForOwn":171,"./_cloneBuffer":201,"./_copyArray":207,"./_copySymbols":210,"./_getTag":223,"./_initCloneArray":231,"./_initCloneByTag":232,"./_initCloneObject":233,"./_isHostObject":234,"./isArray":274,"./isBuffer":277,"./isObject":284}],164:[function(require,module,exports){
var isObject = require('./isObject');

/** Built-in value references. */
var objectCreate = Object.create;

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} prototype The object to inherit from.
 * @returns {Object} Returns the new object.
 */
function baseCreate(proto) {
  return isObject(proto) ? objectCreate(proto) : {};
}

module.exports = baseCreate;

},{"./isObject":284}],165:[function(require,module,exports){
var baseForOwn = require('./_baseForOwn'),
    createBaseEach = require('./_createBaseEach');

/**
 * The base implementation of `_.forEach` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */
var baseEach = createBaseEach(baseForOwn);

module.exports = baseEach;

},{"./_baseForOwn":171,"./_createBaseEach":212}],166:[function(require,module,exports){
var baseEach = require('./_baseEach');

/**
 * The base implementation of `_.filter` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function baseFilter(collection, predicate) {
  var result = [];
  baseEach(collection, function(value, index, collection) {
    if (predicate(value, index, collection)) {
      result.push(value);
    }
  });
  return result;
}

module.exports = baseFilter;

},{"./_baseEach":165}],167:[function(require,module,exports){
/**
 * The base implementation of methods like `_.find` and `_.findKey`, without
 * support for iteratee shorthands, which iterates over `collection` using
 * `eachFunc`.
 *
 * @private
 * @param {Array|Object} collection The collection to search.
 * @param {Function} predicate The function invoked per iteration.
 * @param {Function} eachFunc The function to iterate over `collection`.
 * @param {boolean} [retKey] Specify returning the key of the found element instead of the element itself.
 * @returns {*} Returns the found element or its key, else `undefined`.
 */
function baseFind(collection, predicate, eachFunc, retKey) {
  var result;
  eachFunc(collection, function(value, key, collection) {
    if (predicate(value, key, collection)) {
      result = retKey ? key : value;
      return false;
    }
  });
  return result;
}

module.exports = baseFind;

},{}],168:[function(require,module,exports){
/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to search.
 * @param {Function} predicate The function invoked per iteration.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseFindIndex(array, predicate, fromRight) {
  var length = array.length,
      index = fromRight ? length : -1;

  while ((fromRight ? index-- : ++index < length)) {
    if (predicate(array[index], index, array)) {
      return index;
    }
  }
  return -1;
}

module.exports = baseFindIndex;

},{}],169:[function(require,module,exports){
var arrayPush = require('./_arrayPush'),
    isArguments = require('./isArguments'),
    isArray = require('./isArray'),
    isArrayLikeObject = require('./isArrayLikeObject');

/**
 * The base implementation of `_.flatten` with support for restricting flattening.
 *
 * @private
 * @param {Array} array The array to flatten.
 * @param {number} depth The maximum recursion depth.
 * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.
 * @param {Array} [result=[]] The initial result value.
 * @returns {Array} Returns the new flattened array.
 */
function baseFlatten(array, depth, isStrict, result) {
  result || (result = []);

  var index = -1,
      length = array.length;

  while (++index < length) {
    var value = array[index];
    if (depth > 0 && isArrayLikeObject(value) &&
        (isStrict || isArray(value) || isArguments(value))) {
      if (depth > 1) {
        // Recursively flatten arrays (susceptible to call stack limits).
        baseFlatten(value, depth - 1, isStrict, result);
      } else {
        arrayPush(result, value);
      }
    } else if (!isStrict) {
      result[result.length] = value;
    }
  }
  return result;
}

module.exports = baseFlatten;

},{"./_arrayPush":149,"./isArguments":273,"./isArray":274,"./isArrayLikeObject":276}],170:[function(require,module,exports){
var createBaseFor = require('./_createBaseFor');

/**
 * The base implementation of `baseForIn` and `baseForOwn` which iterates
 * over `object` properties returned by `keysFunc` invoking `iteratee` for
 * each property. Iteratee functions may exit iteration early by explicitly
 * returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

module.exports = baseFor;

},{"./_createBaseFor":213}],171:[function(require,module,exports){
var baseFor = require('./_baseFor'),
    keys = require('./keys');

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn(object, iteratee) {
  return object && baseFor(object, iteratee, keys);
}

module.exports = baseForOwn;

},{"./_baseFor":170,"./keys":291}],172:[function(require,module,exports){
var baseCastPath = require('./_baseCastPath'),
    isKey = require('./_isKey');

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = isKey(path, object) ? [path + ''] : baseCastPath(path);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[path[index++]];
  }
  return (index && index == length) ? object : undefined;
}

module.exports = baseGet;

},{"./_baseCastPath":162,"./_isKey":237}],173:[function(require,module,exports){
/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Built-in value references. */
var getPrototypeOf = Object.getPrototypeOf;

/**
 * The base implementation of `_.has` without support for deep paths.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHas(object, key) {
  // Avoid a bug in IE 10-11 where objects with a [[Prototype]] of `null`,
  // that are composed entirely of index properties, return `false` for
  // `hasOwnProperty` checks of them.
  return hasOwnProperty.call(object, key) ||
    (typeof object == 'object' && key in object && getPrototypeOf(object) === null);
}

module.exports = baseHas;

},{}],174:[function(require,module,exports){
/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHasIn(object, key) {
  return key in Object(object);
}

module.exports = baseHasIn;

},{}],175:[function(require,module,exports){
/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max,
    nativeMin = Math.min;

/**
 * The base implementation of `_.inRange` which doesn't coerce arguments to numbers.
 *
 * @private
 * @param {number} number The number to check.
 * @param {number} start The start of the range.
 * @param {number} end The end of the range.
 * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
 */
function baseInRange(number, start, end) {
  return number >= nativeMin(start, end) && number < nativeMax(start, end);
}

module.exports = baseInRange;

},{}],176:[function(require,module,exports){
var indexOfNaN = require('./_indexOfNaN');

/**
 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
 *
 * @private
 * @param {Array} array The array to search.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseIndexOf(array, value, fromIndex) {
  if (value !== value) {
    return indexOfNaN(array, fromIndex);
  }
  var index = fromIndex - 1,
      length = array.length;

  while (++index < length) {
    if (array[index] === value) {
      return index;
    }
  }
  return -1;
}

module.exports = baseIndexOf;

},{"./_indexOfNaN":230}],177:[function(require,module,exports){
var baseIsEqualDeep = require('./_baseIsEqualDeep'),
    isObject = require('./isObject'),
    isObjectLike = require('./isObjectLike');

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {boolean} [bitmask] The bitmask of comparison flags.
 *  The bitmask may be composed of the following flags:
 *     1 - Unordered comparison
 *     2 - Partial comparison
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, customizer, bitmask, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
}

module.exports = baseIsEqual;

},{"./_baseIsEqualDeep":178,"./isObject":284,"./isObjectLike":285}],178:[function(require,module,exports){
var Stack = require('./_Stack'),
    equalArrays = require('./_equalArrays'),
    equalByTag = require('./_equalByTag'),
    equalObjects = require('./_equalObjects'),
    getTag = require('./_getTag'),
    isArray = require('./isArray'),
    isHostObject = require('./_isHostObject'),
    isTypedArray = require('./isTypedArray');

/** Used to compose bitmasks for comparison styles. */
var PARTIAL_COMPARE_FLAG = 2;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = arrayTag,
      othTag = arrayTag;

  if (!objIsArr) {
    objTag = getTag(object);
    objTag = objTag == argsTag ? objectTag : objTag;
  }
  if (!othIsArr) {
    othTag = getTag(other);
    othTag = othTag == argsTag ? objectTag : othTag;
  }
  var objIsObj = objTag == objectTag && !isHostObject(object),
      othIsObj = othTag == objectTag && !isHostObject(other),
      isSameTag = objTag == othTag;

  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack);
    return (objIsArr || isTypedArray(object))
      ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)
      : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
  }
  if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      stack || (stack = new Stack);
      return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, bitmask, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack);
  return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
}

module.exports = baseIsEqualDeep;

},{"./_Stack":137,"./_equalArrays":215,"./_equalByTag":216,"./_equalObjects":217,"./_getTag":223,"./_isHostObject":234,"./isArray":274,"./isTypedArray":289}],179:[function(require,module,exports){
var Stack = require('./_Stack'),
    baseIsEqual = require('./_baseIsEqual');

/** Used to compose bitmasks for comparison styles. */
var UNORDERED_COMPARE_FLAG = 1,
    PARTIAL_COMPARE_FLAG = 2;

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */
function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if ((noCustomizer && data[2])
          ? data[1] !== object[data[0]]
          : !(data[0] in object)
        ) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack,
          result = customizer ? customizer(objValue, srcValue, key, object, source, stack) : undefined;

      if (!(result === undefined
            ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)
            : result
          )) {
        return false;
      }
    }
  }
  return true;
}

module.exports = baseIsMatch;

},{"./_Stack":137,"./_baseIsEqual":177}],180:[function(require,module,exports){
var baseMatches = require('./_baseMatches'),
    baseMatchesProperty = require('./_baseMatchesProperty'),
    identity = require('./identity'),
    isArray = require('./isArray'),
    property = require('./property');

/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */
function baseIteratee(value) {
  var type = typeof value;
  if (type == 'function') {
    return value;
  }
  if (value == null) {
    return identity;
  }
  if (type == 'object') {
    return isArray(value)
      ? baseMatchesProperty(value[0], value[1])
      : baseMatches(value);
  }
  return property(value);
}

module.exports = baseIteratee;

},{"./_baseMatches":184,"./_baseMatchesProperty":185,"./identity":270,"./isArray":274,"./property":300}],181:[function(require,module,exports){
/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = Object.keys;

/**
 * The base implementation of `_.keys` which doesn't skip the constructor
 * property of prototypes or treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  return nativeKeys(Object(object));
}

module.exports = baseKeys;

},{}],182:[function(require,module,exports){
var Reflect = require('./_Reflect'),
    iteratorToArray = require('./_iteratorToArray');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Built-in value references. */
var enumerate = Reflect ? Reflect.enumerate : undefined,
    propertyIsEnumerable = objectProto.propertyIsEnumerable;

/**
 * The base implementation of `_.keysIn` which doesn't skip the constructor
 * property of prototypes or treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeysIn(object) {
  object = object == null ? object : Object(object);

  var result = [];
  for (var key in object) {
    result.push(key);
  }
  return result;
}

// Fallback for IE < 9 with es6-shim.
if (enumerate && !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf')) {
  baseKeysIn = function(object) {
    return iteratorToArray(enumerate(object));
  };
}

module.exports = baseKeysIn;

},{"./_Reflect":134,"./_iteratorToArray":241}],183:[function(require,module,exports){
var baseEach = require('./_baseEach'),
    isArrayLike = require('./isArrayLike');

/**
 * The base implementation of `_.map` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function baseMap(collection, iteratee) {
  var index = -1,
      result = isArrayLike(collection) ? Array(collection.length) : [];

  baseEach(collection, function(value, key, collection) {
    result[++index] = iteratee(value, key, collection);
  });
  return result;
}

module.exports = baseMap;

},{"./_baseEach":165,"./isArrayLike":275}],184:[function(require,module,exports){
var baseIsMatch = require('./_baseIsMatch'),
    getMatchData = require('./_getMatchData');

/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new function.
 */
function baseMatches(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    var key = matchData[0][0],
        value = matchData[0][1];

    return function(object) {
      if (object == null) {
        return false;
      }
      return object[key] === value &&
        (value !== undefined || (key in Object(object)));
    };
  }
  return function(object) {
    return object === source || baseIsMatch(object, source, matchData);
  };
}

module.exports = baseMatches;

},{"./_baseIsMatch":179,"./_getMatchData":220}],185:[function(require,module,exports){
var baseIsEqual = require('./_baseIsEqual'),
    get = require('./get'),
    hasIn = require('./hasIn');

/** Used to compose bitmasks for comparison styles. */
var UNORDERED_COMPARE_FLAG = 1,
    PARTIAL_COMPARE_FLAG = 2;

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new function.
 */
function baseMatchesProperty(path, srcValue) {
  return function(object) {
    var objValue = get(object, path);
    return (objValue === undefined && objValue === srcValue)
      ? hasIn(object, path)
      : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
  };
}

module.exports = baseMatchesProperty;

},{"./_baseIsEqual":177,"./get":268,"./hasIn":269}],186:[function(require,module,exports){
var Stack = require('./_Stack'),
    arrayEach = require('./_arrayEach'),
    assignMergeValue = require('./_assignMergeValue'),
    baseMergeDeep = require('./_baseMergeDeep'),
    isArray = require('./isArray'),
    isObject = require('./isObject'),
    isTypedArray = require('./isTypedArray'),
    keysIn = require('./keysIn');

/**
 * The base implementation of `_.merge` without support for multiple sources.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} [customizer] The function to customize merged values.
 * @param {Object} [stack] Tracks traversed source values and their merged counterparts.
 */
function baseMerge(object, source, srcIndex, customizer, stack) {
  if (object === source) {
    return;
  }
  var props = (isArray(source) || isTypedArray(source))
    ? undefined
    : keysIn(source);

  arrayEach(props || source, function(srcValue, key) {
    if (props) {
      key = srcValue;
      srcValue = source[key];
    }
    if (isObject(srcValue)) {
      stack || (stack = new Stack);
      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
    }
    else {
      var newValue = customizer
        ? customizer(object[key], srcValue, (key + ''), object, source, stack)
        : undefined;

      if (newValue === undefined) {
        newValue = srcValue;
      }
      assignMergeValue(object, key, newValue);
    }
  });
}

module.exports = baseMerge;

},{"./_Stack":137,"./_arrayEach":144,"./_assignMergeValue":153,"./_baseMergeDeep":187,"./isArray":274,"./isObject":284,"./isTypedArray":289,"./keysIn":292}],187:[function(require,module,exports){
var assignMergeValue = require('./_assignMergeValue'),
    baseClone = require('./_baseClone'),
    copyArray = require('./_copyArray'),
    isArguments = require('./isArguments'),
    isArray = require('./isArray'),
    isArrayLikeObject = require('./isArrayLikeObject'),
    isFunction = require('./isFunction'),
    isObject = require('./isObject'),
    isPlainObject = require('./isPlainObject'),
    isTypedArray = require('./isTypedArray'),
    toPlainObject = require('./toPlainObject');

/**
 * A specialized version of `baseMerge` for arrays and objects which performs
 * deep merges and tracks traversed objects enabling objects with circular
 * references to be merged.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {string} key The key of the value to merge.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} mergeFunc The function to merge values.
 * @param {Function} [customizer] The function to customize assigned values.
 * @param {Object} [stack] Tracks traversed source values and their merged counterparts.
 */
function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
  var objValue = object[key],
      srcValue = source[key],
      stacked = stack.get(srcValue);

  if (stacked) {
    assignMergeValue(object, key, stacked);
    return;
  }
  var newValue = customizer
    ? customizer(objValue, srcValue, (key + ''), object, source, stack)
    : undefined;

  var isCommon = newValue === undefined;

  if (isCommon) {
    newValue = srcValue;
    if (isArray(srcValue) || isTypedArray(srcValue)) {
      if (isArray(objValue)) {
        newValue = objValue;
      }
      else if (isArrayLikeObject(objValue)) {
        newValue = copyArray(objValue);
      }
      else {
        isCommon = false;
        newValue = baseClone(srcValue, !customizer);
      }
    }
    else if (isPlainObject(srcValue) || isArguments(srcValue)) {
      if (isArguments(objValue)) {
        newValue = toPlainObject(objValue);
      }
      else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
        isCommon = false;
        newValue = baseClone(srcValue, !customizer);
      }
      else {
        newValue = objValue;
      }
    }
    else {
      isCommon = false;
    }
  }
  stack.set(srcValue, newValue);

  if (isCommon) {
    // Recursively merge objects and arrays (susceptible to call stack limits).
    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
  }
  stack['delete'](srcValue);
  assignMergeValue(object, key, newValue);
}

module.exports = baseMergeDeep;

},{"./_assignMergeValue":153,"./_baseClone":163,"./_copyArray":207,"./isArguments":273,"./isArray":274,"./isArrayLikeObject":276,"./isFunction":279,"./isObject":284,"./isPlainObject":286,"./isTypedArray":289,"./toPlainObject":306}],188:[function(require,module,exports){
var arrayReduce = require('./_arrayReduce');

/**
 * The base implementation of `_.pick` without support for individual
 * property names.
 *
 * @private
 * @param {Object} object The source object.
 * @param {string[]} props The property names to pick.
 * @returns {Object} Returns the new object.
 */
function basePick(object, props) {
  object = Object(object);
  return arrayReduce(props, function(result, key) {
    if (key in object) {
      result[key] = object[key];
    }
    return result;
  }, {});
}

module.exports = basePick;

},{"./_arrayReduce":150}],189:[function(require,module,exports){
/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

module.exports = baseProperty;

},{}],190:[function(require,module,exports){
var baseGet = require('./_baseGet');

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new function.
 */
function basePropertyDeep(path) {
  return function(object) {
    return baseGet(object, path);
  };
}

module.exports = basePropertyDeep;

},{"./_baseGet":172}],191:[function(require,module,exports){
/**
 * The base implementation of `_.slice` without an iteratee call guard.
 *
 * @private
 * @param {Array} array The array to slice.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the slice of `array`.
 */
function baseSlice(array, start, end) {
  var index = -1,
      length = array.length;

  if (start < 0) {
    start = -start > length ? 0 : (length + start);
  }
  end = end > length ? length : end;
  if (end < 0) {
    end += length;
  }
  length = start > end ? 0 : ((end - start) >>> 0);
  start >>>= 0;

  var result = Array(length);
  while (++index < length) {
    result[index] = array[index + start];
  }
  return result;
}

module.exports = baseSlice;

},{}],192:[function(require,module,exports){
/**
 * The base implementation of `_.sum` without support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {number} Returns the sum.
 */
function baseSum(array, iteratee) {
  var result,
      index = -1,
      length = array.length;

  while (++index < length) {
    var current = iteratee(array[index]);
    if (current !== undefined) {
      result = result === undefined ? current : (result + current);
    }
  }
  return result;
}

module.exports = baseSum;

},{}],193:[function(require,module,exports){
/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

module.exports = baseTimes;

},{}],194:[function(require,module,exports){
var arrayMap = require('./_arrayMap');

/**
 * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
 * of key-value pairs for `object` corresponding to the property names of `props`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} props The property names to get values for.
 * @returns {Object} Returns the new array of key-value pairs.
 */
function baseToPairs(object, props) {
  return arrayMap(props, function(key) {
    return [key, object[key]];
  });
}

module.exports = baseToPairs;

},{"./_arrayMap":148}],195:[function(require,module,exports){
var SetCache = require('./_SetCache'),
    arrayIncludes = require('./_arrayIncludes'),
    arrayIncludesWith = require('./_arrayIncludesWith'),
    cacheHas = require('./_cacheHas'),
    createSet = require('./_createSet'),
    setToArray = require('./_setToArray');

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * The base implementation of `_.uniqBy` without support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new duplicate free array.
 */
function baseUniq(array, iteratee, comparator) {
  var index = -1,
      includes = arrayIncludes,
      length = array.length,
      isCommon = true,
      result = [],
      seen = result;

  if (comparator) {
    isCommon = false;
    includes = arrayIncludesWith;
  }
  else if (length >= LARGE_ARRAY_SIZE) {
    var set = iteratee ? null : createSet(array);
    if (set) {
      return setToArray(set);
    }
    isCommon = false;
    includes = cacheHas;
    seen = new SetCache;
  }
  else {
    seen = iteratee ? [] : result;
  }
  outer:
  while (++index < length) {
    var value = array[index],
        computed = iteratee ? iteratee(value) : value;

    if (isCommon && computed === computed) {
      var seenIndex = seen.length;
      while (seenIndex--) {
        if (seen[seenIndex] === computed) {
          continue outer;
        }
      }
      if (iteratee) {
        seen.push(computed);
      }
      result.push(value);
    }
    else if (!includes(seen, computed, comparator)) {
      if (seen !== result) {
        seen.push(computed);
      }
      result.push(value);
    }
  }
  return result;
}

module.exports = baseUniq;

},{"./_SetCache":136,"./_arrayIncludes":146,"./_arrayIncludesWith":147,"./_cacheHas":197,"./_createSet":214,"./_setToArray":251}],196:[function(require,module,exports){
var arrayMap = require('./_arrayMap');

/**
 * The base implementation of `_.values` and `_.valuesIn` which creates an
 * array of `object` property values corresponding to the property names
 * of `props`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} props The property names to get values for.
 * @returns {Object} Returns the array of property values.
 */
function baseValues(object, props) {
  return arrayMap(props, function(key) {
    return object[key];
  });
}

module.exports = baseValues;

},{"./_arrayMap":148}],197:[function(require,module,exports){
var isKeyable = require('./_isKeyable');

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Checks if `value` is in `cache`.
 *
 * @private
 * @param {Object} cache The set cache to search.
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function cacheHas(cache, value) {
  var map = cache.__data__;
  if (isKeyable(value)) {
    var data = map.__data__,
        hash = typeof value == 'string' ? data.string : data.hash;

    return hash[value] === HASH_UNDEFINED;
  }
  return map.has(value);
}

module.exports = cacheHas;

},{"./_isKeyable":238}],198:[function(require,module,exports){
var isKeyable = require('./_isKeyable');

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Adds `value` to the set cache.
 *
 * @private
 * @name push
 * @memberOf SetCache
 * @param {*} value The value to cache.
 */
function cachePush(value) {
  var map = this.__data__;
  if (isKeyable(value)) {
    var data = map.__data__,
        hash = typeof value == 'string' ? data.string : data.hash;

    hash[value] = HASH_UNDEFINED;
  }
  else {
    map.set(value, HASH_UNDEFINED);
  }
}

module.exports = cachePush;

},{"./_isKeyable":238}],199:[function(require,module,exports){
/**
 * Checks if `value` is a global object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {null|Object} Returns `value` if it's a global object, else `null`.
 */
function checkGlobal(value) {
  return (value && value.Object === Object) ? value : null;
}

module.exports = checkGlobal;

},{}],200:[function(require,module,exports){
var Uint8Array = require('./_Uint8Array');

/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
  return result;
}

module.exports = cloneArrayBuffer;

},{"./_Uint8Array":139}],201:[function(require,module,exports){
/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var result = new buffer.constructor(buffer.length);
  buffer.copy(result);
  return result;
}

module.exports = cloneBuffer;

},{}],202:[function(require,module,exports){
var addMapEntry = require('./_addMapEntry'),
    arrayReduce = require('./_arrayReduce'),
    mapToArray = require('./_mapToArray');

/**
 * Creates a clone of `map`.
 *
 * @private
 * @param {Object} map The map to clone.
 * @returns {Object} Returns the cloned map.
 */
function cloneMap(map) {
  return arrayReduce(mapToArray(map), addMapEntry, new map.constructor);
}

module.exports = cloneMap;

},{"./_addMapEntry":141,"./_arrayReduce":150,"./_mapToArray":247}],203:[function(require,module,exports){
/** Used to match `RegExp` flags from their coerced string values. */
var reFlags = /\w*$/;

/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */
function cloneRegExp(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  result.lastIndex = regexp.lastIndex;
  return result;
}

module.exports = cloneRegExp;

},{}],204:[function(require,module,exports){
var addSetEntry = require('./_addSetEntry'),
    arrayReduce = require('./_arrayReduce'),
    setToArray = require('./_setToArray');

/**
 * Creates a clone of `set`.
 *
 * @private
 * @param {Object} set The set to clone.
 * @returns {Object} Returns the cloned set.
 */
function cloneSet(set) {
  return arrayReduce(setToArray(set), addSetEntry, new set.constructor);
}

module.exports = cloneSet;

},{"./_addSetEntry":142,"./_arrayReduce":150,"./_setToArray":251}],205:[function(require,module,exports){
var Symbol = require('./_Symbol');

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */
function cloneSymbol(symbol) {
  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}

module.exports = cloneSymbol;

},{"./_Symbol":138}],206:[function(require,module,exports){
var cloneArrayBuffer = require('./_cloneArrayBuffer');

/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

module.exports = cloneTypedArray;

},{"./_cloneArrayBuffer":200}],207:[function(require,module,exports){
/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

module.exports = copyArray;

},{}],208:[function(require,module,exports){
var copyObjectWith = require('./_copyObjectWith');

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property names to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object) {
  return copyObjectWith(source, props, object);
}

module.exports = copyObject;

},{"./_copyObjectWith":209}],209:[function(require,module,exports){
var assignValue = require('./_assignValue');

/**
 * This function is like `copyObject` except that it accepts a function to
 * customize copied values.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property names to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObjectWith(source, props, object, customizer) {
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : source[key];

    assignValue(object, key, newValue);
  }
  return object;
}

module.exports = copyObjectWith;

},{"./_assignValue":154}],210:[function(require,module,exports){
var copyObject = require('./_copyObject'),
    getSymbols = require('./_getSymbols');

/**
 * Copies own symbol properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbols(source, object) {
  return copyObject(source, getSymbols(source), object);
}

module.exports = copySymbols;

},{"./_copyObject":208,"./_getSymbols":222}],211:[function(require,module,exports){
var isIterateeCall = require('./_isIterateeCall'),
    rest = require('./rest');

/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */
function createAssigner(assigner) {
  return rest(function(object, sources) {
    var index = -1,
        length = sources.length,
        customizer = length > 1 ? sources[length - 1] : undefined,
        guard = length > 2 ? sources[2] : undefined;

    customizer = typeof customizer == 'function'
      ? (length--, customizer)
      : undefined;

    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      customizer = length < 3 ? undefined : customizer;
      length = 1;
    }
    object = Object(object);
    while (++index < length) {
      var source = sources[index];
      if (source) {
        assigner(object, source, index, customizer);
      }
    }
    return object;
  });
}

module.exports = createAssigner;

},{"./_isIterateeCall":236,"./rest":301}],212:[function(require,module,exports){
var isArrayLike = require('./isArrayLike');

/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseEach(eachFunc, fromRight) {
  return function(collection, iteratee) {
    if (collection == null) {
      return collection;
    }
    if (!isArrayLike(collection)) {
      return eachFunc(collection, iteratee);
    }
    var length = collection.length,
        index = fromRight ? length : -1,
        iterable = Object(collection);

    while ((fromRight ? index-- : ++index < length)) {
      if (iteratee(iterable[index], index, iterable) === false) {
        break;
      }
    }
    return collection;
  };
}

module.exports = createBaseEach;

},{"./isArrayLike":275}],213:[function(require,module,exports){
/**
 * Creates a base function for methods like `_.forIn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

module.exports = createBaseFor;

},{}],214:[function(require,module,exports){
var Set = require('./_Set'),
    noop = require('./noop');

/**
 * Creates a set of `values`.
 *
 * @private
 * @param {Array} values The values to add to the set.
 * @returns {Object} Returns the new set.
 */
var createSet = !(Set && new Set([1, 2]).size === 2) ? noop : function(values) {
  return new Set(values);
};

module.exports = createSet;

},{"./_Set":135,"./noop":298}],215:[function(require,module,exports){
var arraySome = require('./_arraySome');

/** Used to compose bitmasks for comparison styles. */
var UNORDERED_COMPARE_FLAG = 1,
    PARTIAL_COMPARE_FLAG = 2;

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} customizer The function to customize comparisons.
 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual` for more details.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
  var index = -1,
      isPartial = bitmask & PARTIAL_COMPARE_FLAG,
      isUnordered = bitmask & UNORDERED_COMPARE_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(array);
  if (stacked) {
    return stacked == other;
  }
  var result = true;
  stack.set(array, other);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (isUnordered) {
      if (!arraySome(other, function(othValue) {
            return arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack);
          })) {
        result = false;
        break;
      }
    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  return result;
}

module.exports = equalArrays;

},{"./_arraySome":151}],216:[function(require,module,exports){
var Symbol = require('./_Symbol'),
    Uint8Array = require('./_Uint8Array'),
    equalArrays = require('./_equalArrays'),
    mapToArray = require('./_mapToArray'),
    setToArray = require('./_setToArray');

/** Used to compose bitmasks for comparison styles. */
var UNORDERED_COMPARE_FLAG = 1,
    PARTIAL_COMPARE_FLAG = 2;

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]';

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} customizer The function to customize comparisons.
 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual` for more details.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
  switch (tag) {
    case arrayBufferTag:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
      // Coerce dates and booleans to numbers, dates to milliseconds and booleans
      // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
      return +object == +other;

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case numberTag:
      // Treat `NaN` vs. `NaN` as equal.
      return (object != +object) ? other != +other : object == +other;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings primitives and string
      // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
      return object == (other + '');

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      // Recursively compare objects (susceptible to call stack limits).
      return equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask | UNORDERED_COMPARE_FLAG, stack.set(object, other));

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

module.exports = equalByTag;

},{"./_Symbol":138,"./_Uint8Array":139,"./_equalArrays":215,"./_mapToArray":247,"./_setToArray":251}],217:[function(require,module,exports){
var baseHas = require('./_baseHas'),
    keys = require('./keys');

/** Used to compose bitmasks for comparison styles. */
var PARTIAL_COMPARE_FLAG = 2;

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} customizer The function to customize comparisons.
 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual` for more details.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
      objProps = keys(object),
      objLength = objProps.length,
      othProps = keys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : baseHas(other, key))) {
      return false;
    }
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(object);
  if (stacked) {
    return stacked == other;
  }
  var result = true;
  stack.set(object, other);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  return result;
}

module.exports = equalObjects;

},{"./_baseHas":173,"./keys":291}],218:[function(require,module,exports){
/** Used to map characters to HTML entities. */
var htmlEscapes = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;',
  "'": '&#39;',
  '`': '&#96;'
};

/**
 * Used by `_.escape` to convert characters to HTML entities.
 *
 * @private
 * @param {string} chr The matched character to escape.
 * @returns {string} Returns the escaped character.
 */
function escapeHtmlChar(chr) {
  return htmlEscapes[chr];
}

module.exports = escapeHtmlChar;

},{}],219:[function(require,module,exports){
var baseProperty = require('./_baseProperty');

/**
 * Gets the "length" property value of `object`.
 *
 * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
 * that affects Safari on at least iOS 8.1-8.3 ARM64.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {*} Returns the "length" value.
 */
var getLength = baseProperty('length');

module.exports = getLength;

},{"./_baseProperty":189}],220:[function(require,module,exports){
var isStrictComparable = require('./_isStrictComparable'),
    toPairs = require('./toPairs');

/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */
function getMatchData(object) {
  var result = toPairs(object),
      length = result.length;

  while (length--) {
    result[length][2] = isStrictComparable(result[length][1]);
  }
  return result;
}

module.exports = getMatchData;

},{"./_isStrictComparable":240,"./toPairs":305}],221:[function(require,module,exports){
var isNative = require('./isNative');

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = object[key];
  return isNative(value) ? value : undefined;
}

module.exports = getNative;

},{"./isNative":282}],222:[function(require,module,exports){
/** Built-in value references. */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own symbol properties of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = getOwnPropertySymbols || function() {
  return [];
};

module.exports = getSymbols;

},{}],223:[function(require,module,exports){
var Map = require('./_Map'),
    Set = require('./_Set'),
    WeakMap = require('./_WeakMap');

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    objectTag = '[object Object]',
    setTag = '[object Set]',
    weakMapTag = '[object WeakMap]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = Function.prototype.toString;

/**
 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Used to detect maps, sets, and weakmaps. */
var mapCtorString = Map ? funcToString.call(Map) : '',
    setCtorString = Set ? funcToString.call(Set) : '',
    weakMapCtorString = WeakMap ? funcToString.call(WeakMap) : '';

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function getTag(value) {
  return objectToString.call(value);
}

// Fallback for IE 11 providing `toStringTag` values for maps, sets, and weakmaps.
if ((Map && getTag(new Map) != mapTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = objectToString.call(value),
        Ctor = result == objectTag ? value.constructor : null,
        ctorString = typeof Ctor == 'function' ? funcToString.call(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case mapCtorString: return mapTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

module.exports = getTag;

},{"./_Map":132,"./_Set":135,"./_WeakMap":140}],224:[function(require,module,exports){
var baseCastPath = require('./_baseCastPath'),
    isArguments = require('./isArguments'),
    isArray = require('./isArray'),
    isIndex = require('./_isIndex'),
    isKey = require('./_isKey'),
    isLength = require('./isLength'),
    isString = require('./isString'),
    last = require('./last'),
    parent = require('./_parent');

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath(object, path, hasFunc) {
  if (object == null) {
    return false;
  }
  var result = hasFunc(object, path);
  if (!result && !isKey(path)) {
    path = baseCastPath(path);
    object = parent(object, path);
    if (object != null) {
      path = last(path);
      result = hasFunc(object, path);
    }
  }
  var length = object ? object.length : undefined;
  return result || (
    !!length && isLength(length) && isIndex(path, length) &&
    (isArray(object) || isString(object) || isArguments(object))
  );
}

module.exports = hasPath;

},{"./_baseCastPath":162,"./_isIndex":235,"./_isKey":237,"./_parent":249,"./isArguments":273,"./isArray":274,"./isLength":280,"./isString":287,"./last":293}],225:[function(require,module,exports){
var hashHas = require('./_hashHas');

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(hash, key) {
  return hashHas(hash, key) && delete hash[key];
}

module.exports = hashDelete;

},{"./_hashHas":227}],226:[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @param {Object} hash The hash to query.
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(hash, key) {
  if (nativeCreate) {
    var result = hash[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(hash, key) ? hash[key] : undefined;
}

module.exports = hashGet;

},{"./_nativeCreate":248}],227:[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @param {Object} hash The hash to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(hash, key) {
  return nativeCreate ? hash[key] !== undefined : hasOwnProperty.call(hash, key);
}

module.exports = hashHas;

},{"./_nativeCreate":248}],228:[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 */
function hashSet(hash, key, value) {
  hash[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
}

module.exports = hashSet;

},{"./_nativeCreate":248}],229:[function(require,module,exports){
var baseTimes = require('./_baseTimes'),
    isArguments = require('./isArguments'),
    isArray = require('./isArray'),
    isLength = require('./isLength'),
    isString = require('./isString');

/**
 * Creates an array of index keys for `object` values of arrays,
 * `arguments` objects, and strings, otherwise `null` is returned.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array|null} Returns index keys, else `null`.
 */
function indexKeys(object) {
  var length = object ? object.length : undefined;
  if (isLength(length) &&
      (isArray(object) || isString(object) || isArguments(object))) {
    return baseTimes(length, String);
  }
  return null;
}

module.exports = indexKeys;

},{"./_baseTimes":193,"./isArguments":273,"./isArray":274,"./isLength":280,"./isString":287}],230:[function(require,module,exports){
/**
 * Gets the index at which the first occurrence of `NaN` is found in `array`.
 *
 * @private
 * @param {Array} array The array to search.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched `NaN`, else `-1`.
 */
function indexOfNaN(array, fromIndex, fromRight) {
  var length = array.length,
      index = fromIndex + (fromRight ? 0 : -1);

  while ((fromRight ? index-- : ++index < length)) {
    var other = array[index];
    if (other !== other) {
      return index;
    }
  }
  return -1;
}

module.exports = indexOfNaN;

},{}],231:[function(require,module,exports){
/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */
function initCloneArray(array) {
  var length = array.length,
      result = array.constructor(length);

  // Add properties assigned by `RegExp#exec`.
  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
    result.index = array.index;
    result.input = array.input;
  }
  return result;
}

module.exports = initCloneArray;

},{}],232:[function(require,module,exports){
var cloneArrayBuffer = require('./_cloneArrayBuffer'),
    cloneMap = require('./_cloneMap'),
    cloneRegExp = require('./_cloneRegExp'),
    cloneSet = require('./_cloneSet'),
    cloneSymbol = require('./_cloneSymbol'),
    cloneTypedArray = require('./_cloneTypedArray');

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneByTag(object, tag, isDeep) {
  var Ctor = object.constructor;
  switch (tag) {
    case arrayBufferTag:
      return cloneArrayBuffer(object);

    case boolTag:
    case dateTag:
      return new Ctor(+object);

    case float32Tag: case float64Tag:
    case int8Tag: case int16Tag: case int32Tag:
    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
      return cloneTypedArray(object, isDeep);

    case mapTag:
      return cloneMap(object);

    case numberTag:
    case stringTag:
      return new Ctor(object);

    case regexpTag:
      return cloneRegExp(object);

    case setTag:
      return cloneSet(object);

    case symbolTag:
      return cloneSymbol(object);
  }
}

module.exports = initCloneByTag;

},{"./_cloneArrayBuffer":200,"./_cloneMap":202,"./_cloneRegExp":203,"./_cloneSet":204,"./_cloneSymbol":205,"./_cloneTypedArray":206}],233:[function(require,module,exports){
var baseCreate = require('./_baseCreate'),
    isPrototype = require('./_isPrototype');

/** Built-in value references. */
var getPrototypeOf = Object.getPrototypeOf;

/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneObject(object) {
  return (typeof object.constructor == 'function' && !isPrototype(object))
    ? baseCreate(getPrototypeOf(object))
    : {};
}

module.exports = initCloneObject;

},{"./_baseCreate":164,"./_isPrototype":239}],234:[function(require,module,exports){
/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */
function isHostObject(value) {
  // Many host objects are `Object` objects that can coerce to strings
  // despite having improperly defined `toString` methods.
  var result = false;
  if (value != null && typeof value.toString != 'function') {
    try {
      result = !!(value + '');
    } catch (e) {}
  }
  return result;
}

module.exports = isHostObject;

},{}],235:[function(require,module,exports){
/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
  length = length == null ? MAX_SAFE_INTEGER : length;
  return value > -1 && value % 1 == 0 && value < length;
}

module.exports = isIndex;

},{}],236:[function(require,module,exports){
var eq = require('./eq'),
    isArrayLike = require('./isArrayLike'),
    isIndex = require('./_isIndex'),
    isObject = require('./isObject');

/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
 */
function isIterateeCall(value, index, object) {
  if (!isObject(object)) {
    return false;
  }
  var type = typeof index;
  if (type == 'number'
      ? (isArrayLike(object) && isIndex(index, object.length))
      : (type == 'string' && index in object)) {
    return eq(object[index], value);
  }
  return false;
}

module.exports = isIterateeCall;

},{"./_isIndex":235,"./eq":261,"./isArrayLike":275,"./isObject":284}],237:[function(require,module,exports){
var isArray = require('./isArray');

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (typeof value == 'number') {
    return true;
  }
  return !isArray(value) &&
    (reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
      (object != null && value in Object(object)));
}

module.exports = isKey;

},{"./isArray":274}],238:[function(require,module,exports){
/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return type == 'number' || type == 'boolean' ||
    (type == 'string' && value != '__proto__') || value == null;
}

module.exports = isKeyable;

},{}],239:[function(require,module,exports){
/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

module.exports = isPrototype;

},{}],240:[function(require,module,exports){
var isObject = require('./isObject');

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */
function isStrictComparable(value) {
  return value === value && !isObject(value);
}

module.exports = isStrictComparable;

},{"./isObject":284}],241:[function(require,module,exports){
/**
 * Converts `iterator` to an array.
 *
 * @private
 * @param {Object} iterator The iterator to convert.
 * @returns {Array} Returns the converted array.
 */
function iteratorToArray(iterator) {
  var data,
      result = [];

  while (!(data = iterator.next()).done) {
    result.push(data.value);
  }
  return result;
}

module.exports = iteratorToArray;

},{}],242:[function(require,module,exports){
var Hash = require('./_Hash'),
    Map = require('./_Map');

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapClear() {
  this.__data__ = {
    'hash': new Hash,
    'map': Map ? new Map : [],
    'string': new Hash
  };
}

module.exports = mapClear;

},{"./_Hash":131,"./_Map":132}],243:[function(require,module,exports){
var Map = require('./_Map'),
    assocDelete = require('./_assocDelete'),
    hashDelete = require('./_hashDelete'),
    isKeyable = require('./_isKeyable');

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapDelete(key) {
  var data = this.__data__;
  if (isKeyable(key)) {
    return hashDelete(typeof key == 'string' ? data.string : data.hash, key);
  }
  return Map ? data.map['delete'](key) : assocDelete(data.map, key);
}

module.exports = mapDelete;

},{"./_Map":132,"./_assocDelete":155,"./_hashDelete":225,"./_isKeyable":238}],244:[function(require,module,exports){
var Map = require('./_Map'),
    assocGet = require('./_assocGet'),
    hashGet = require('./_hashGet'),
    isKeyable = require('./_isKeyable');

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapGet(key) {
  var data = this.__data__;
  if (isKeyable(key)) {
    return hashGet(typeof key == 'string' ? data.string : data.hash, key);
  }
  return Map ? data.map.get(key) : assocGet(data.map, key);
}

module.exports = mapGet;

},{"./_Map":132,"./_assocGet":156,"./_hashGet":226,"./_isKeyable":238}],245:[function(require,module,exports){
var Map = require('./_Map'),
    assocHas = require('./_assocHas'),
    hashHas = require('./_hashHas'),
    isKeyable = require('./_isKeyable');

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapHas(key) {
  var data = this.__data__;
  if (isKeyable(key)) {
    return hashHas(typeof key == 'string' ? data.string : data.hash, key);
  }
  return Map ? data.map.has(key) : assocHas(data.map, key);
}

module.exports = mapHas;

},{"./_Map":132,"./_assocHas":157,"./_hashHas":227,"./_isKeyable":238}],246:[function(require,module,exports){
var Map = require('./_Map'),
    assocSet = require('./_assocSet'),
    hashSet = require('./_hashSet'),
    isKeyable = require('./_isKeyable');

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache object.
 */
function mapSet(key, value) {
  var data = this.__data__;
  if (isKeyable(key)) {
    hashSet(typeof key == 'string' ? data.string : data.hash, key, value);
  } else if (Map) {
    data.map.set(key, value);
  } else {
    assocSet(data.map, key, value);
  }
  return this;
}

module.exports = mapSet;

},{"./_Map":132,"./_assocSet":159,"./_hashSet":228,"./_isKeyable":238}],247:[function(require,module,exports){
/**
 * Converts `map` to an array.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the converted array.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

module.exports = mapToArray;

},{}],248:[function(require,module,exports){
var getNative = require('./_getNative');

/* Built-in method references that are verified to be native. */
var nativeCreate = getNative(Object, 'create');

module.exports = nativeCreate;

},{"./_getNative":221}],249:[function(require,module,exports){
var baseSlice = require('./_baseSlice'),
    get = require('./get');

/**
 * Gets the parent value at `path` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} path The path to get the parent value of.
 * @returns {*} Returns the parent value.
 */
function parent(object, path) {
  return path.length == 1 ? object : get(object, baseSlice(path, 0, -1));
}

module.exports = parent;

},{"./_baseSlice":191,"./get":268}],250:[function(require,module,exports){
(function (global){
var checkGlobal = require('./_checkGlobal');

/** Used to determine if values are of the language type `Object`. */
var objectTypes = {
  'function': true,
  'object': true
};

/** Detect free variable `exports`. */
var freeExports = (objectTypes[typeof exports] && exports && !exports.nodeType)
  ? exports
  : undefined;

/** Detect free variable `module`. */
var freeModule = (objectTypes[typeof module] && module && !module.nodeType)
  ? module
  : undefined;

/** Detect free variable `global` from Node.js. */
var freeGlobal = checkGlobal(freeExports && freeModule && typeof global == 'object' && global);

/** Detect free variable `self`. */
var freeSelf = checkGlobal(objectTypes[typeof self] && self);

/** Detect free variable `window`. */
var freeWindow = checkGlobal(objectTypes[typeof window] && window);

/** Detect `this` as the global object. */
var thisGlobal = checkGlobal(objectTypes[typeof this] && this);

/**
 * Used as a reference to the global object.
 *
 * The `this` value is used if it's the global object to avoid Greasemonkey's
 * restricted `window` object, otherwise the `window` object is used.
 */
var root = freeGlobal ||
  ((freeWindow !== (thisGlobal && thisGlobal.window)) && freeWindow) ||
    freeSelf || thisGlobal || Function('return this')();

module.exports = root;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./_checkGlobal":199}],251:[function(require,module,exports){
/**
 * Converts `set` to an array.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the converted array.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

module.exports = setToArray;

},{}],252:[function(require,module,exports){
/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = { 'array': [], 'map': null };
}

module.exports = stackClear;

},{}],253:[function(require,module,exports){
var assocDelete = require('./_assocDelete');

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      array = data.array;

  return array ? assocDelete(array, key) : data.map['delete'](key);
}

module.exports = stackDelete;

},{"./_assocDelete":155}],254:[function(require,module,exports){
var assocGet = require('./_assocGet');

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  var data = this.__data__,
      array = data.array;

  return array ? assocGet(array, key) : data.map.get(key);
}

module.exports = stackGet;

},{"./_assocGet":156}],255:[function(require,module,exports){
var assocHas = require('./_assocHas');

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  var data = this.__data__,
      array = data.array;

  return array ? assocHas(array, key) : data.map.has(key);
}

module.exports = stackHas;

},{"./_assocHas":157}],256:[function(require,module,exports){
var MapCache = require('./_MapCache'),
    assocSet = require('./_assocSet');

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache object.
 */
function stackSet(key, value) {
  var data = this.__data__,
      array = data.array;

  if (array) {
    if (array.length < (LARGE_ARRAY_SIZE - 1)) {
      assocSet(array, key, value);
    } else {
      data.array = null;
      data.map = new MapCache(array);
    }
  }
  var map = data.map;
  if (map) {
    map.set(key, value);
  }
  return this;
}

module.exports = stackSet;

},{"./_MapCache":133,"./_assocSet":159}],257:[function(require,module,exports){
var toString = require('./toString');

/** Used to match property names within property paths. */
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
function stringToPath(string) {
  var result = [];
  toString(string).replace(rePropName, function(match, number, quote, string) {
    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
}

module.exports = stringToPath;

},{"./toString":307}],258:[function(require,module,exports){
var copyObjectWith = require('./_copyObjectWith'),
    createAssigner = require('./_createAssigner'),
    keysIn = require('./keysIn');

/**
 * This method is like `_.assignIn` except that it accepts `customizer` which
 * is invoked to produce the assigned values. If `customizer` returns `undefined`
 * assignment is handled by the method instead. The `customizer` is invoked
 * with five arguments: (objValue, srcValue, key, object, source).
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @alias extendWith
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} sources The source objects.
 * @param {Function} [customizer] The function to customize assigned values.
 * @returns {Object} Returns `object`.
 * @example
 *
 * function customizer(objValue, srcValue) {
 *   return _.isUndefined(objValue) ? srcValue : objValue;
 * }
 *
 * var defaults = _.partialRight(_.assignInWith, customizer);
 *
 * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
 * // => { 'a': 1, 'b': 2 }
 */
var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
  copyObjectWith(source, keysIn(source), object, customizer);
});

module.exports = assignInWith;

},{"./_copyObjectWith":209,"./_createAssigner":211,"./keysIn":292}],259:[function(require,module,exports){
/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new function.
 * @example
 *
 * var object = { 'user': 'fred' };
 * var getter = _.constant(object);
 *
 * getter() === object;
 * // => true
 */
function constant(value) {
  return function() {
    return value;
  };
}

module.exports = constant;

},{}],260:[function(require,module,exports){
var apply = require('./_apply'),
    assignInDefaults = require('./_assignInDefaults'),
    assignInWith = require('./assignInWith'),
    rest = require('./rest');

/**
 * Assigns own and inherited enumerable properties of source objects to the
 * destination object for all destination properties that resolve to `undefined`.
 * Source objects are applied from left to right. Once a property is set,
 * additional values of the same property are ignored.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @example
 *
 * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
 * // => { 'user': 'barney', 'age': 36 }
 */
var defaults = rest(function(args) {
  args.push(undefined, assignInDefaults);
  return apply(assignInWith, undefined, args);
});

module.exports = defaults;

},{"./_apply":143,"./_assignInDefaults":152,"./assignInWith":258,"./rest":301}],261:[function(require,module,exports){
/**
 * Performs a [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'user': 'fred' };
 * var other = { 'user': 'fred' };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

module.exports = eq;

},{}],262:[function(require,module,exports){
var escapeHtmlChar = require('./_escapeHtmlChar'),
    toString = require('./toString');

/** Used to match HTML entities and HTML characters. */
var reUnescapedHtml = /[&<>"'`]/g,
    reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

/**
 * Converts the characters "&", "<", ">", '"', "'", and "\`" in `string` to
 * their corresponding HTML entities.
 *
 * **Note:** No other characters are escaped. To escape additional
 * characters use a third-party library like [_he_](https://mths.be/he).
 *
 * Though the ">" character is escaped for symmetry, characters like
 * ">" and "/" don't need escaping in HTML and have no special meaning
 * unless they're part of a tag or unquoted attribute value.
 * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
 * (under "semi-related fun fact") for more details.
 *
 * Backticks are escaped because in IE < 9, they can break out of
 * attribute values or HTML comments. See [#59](https://html5sec.org/#59),
 * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
 * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)
 * for more details.
 *
 * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)
 * to reduce XSS vectors.
 *
 * @static
 * @memberOf _
 * @category String
 * @param {string} [string=''] The string to escape.
 * @returns {string} Returns the escaped string.
 * @example
 *
 * _.escape('fred, barney, & pebbles');
 * // => 'fred, barney, &amp; pebbles'
 */
function escape(string) {
  string = toString(string);
  return (string && reHasUnescapedHtml.test(string))
    ? string.replace(reUnescapedHtml, escapeHtmlChar)
    : string;
}

module.exports = escape;

},{"./_escapeHtmlChar":218,"./toString":307}],263:[function(require,module,exports){
var arrayFilter = require('./_arrayFilter'),
    baseFilter = require('./_baseFilter'),
    baseIteratee = require('./_baseIteratee'),
    isArray = require('./isArray');

/**
 * Iterates over elements of `collection`, returning an array of all elements
 * `predicate` returns truthy for. The predicate is invoked with three arguments:
 * (value, index|key, collection).
 *
 * @static
 * @memberOf _
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 * @example
 *
 * var users = [
 *   { 'user': 'barney', 'age': 36, 'active': true },
 *   { 'user': 'fred',   'age': 40, 'active': false }
 * ];
 *
 * _.filter(users, function(o) { return !o.active; });
 * // => objects for ['fred']
 *
 * // The `_.matches` iteratee shorthand.
 * _.filter(users, { 'age': 36, 'active': true });
 * // => objects for ['barney']
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.filter(users, ['active', false]);
 * // => objects for ['fred']
 *
 * // The `_.property` iteratee shorthand.
 * _.filter(users, 'active');
 * // => objects for ['barney']
 */
function filter(collection, predicate) {
  var func = isArray(collection) ? arrayFilter : baseFilter;
  return func(collection, baseIteratee(predicate, 3));
}

module.exports = filter;

},{"./_arrayFilter":145,"./_baseFilter":166,"./_baseIteratee":180,"./isArray":274}],264:[function(require,module,exports){
var baseEach = require('./_baseEach'),
    baseFind = require('./_baseFind'),
    baseFindIndex = require('./_baseFindIndex'),
    baseIteratee = require('./_baseIteratee'),
    isArray = require('./isArray');

/**
 * Iterates over elements of `collection`, returning the first element
 * `predicate` returns truthy for. The predicate is invoked with three arguments:
 * (value, index|key, collection).
 *
 * @static
 * @memberOf _
 * @category Collection
 * @param {Array|Object} collection The collection to search.
 * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
 * @returns {*} Returns the matched element, else `undefined`.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'age': 36, 'active': true },
 *   { 'user': 'fred',    'age': 40, 'active': false },
 *   { 'user': 'pebbles', 'age': 1,  'active': true }
 * ];
 *
 * _.find(users, function(o) { return o.age < 40; });
 * // => object for 'barney'
 *
 * // The `_.matches` iteratee shorthand.
 * _.find(users, { 'age': 1, 'active': true });
 * // => object for 'pebbles'
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.find(users, ['active', false]);
 * // => object for 'fred'
 *
 * // The `_.property` iteratee shorthand.
 * _.find(users, 'active');
 * // => object for 'barney'
 */
function find(collection, predicate) {
  predicate = baseIteratee(predicate, 3);
  if (isArray(collection)) {
    var index = baseFindIndex(collection, predicate);
    return index > -1 ? collection[index] : undefined;
  }
  return baseFind(collection, predicate, baseEach);
}

module.exports = find;

},{"./_baseEach":165,"./_baseFind":167,"./_baseFindIndex":168,"./_baseIteratee":180,"./isArray":274}],265:[function(require,module,exports){
var baseFindIndex = require('./_baseFindIndex'),
    baseIteratee = require('./_baseIteratee');

/**
 * This method is like `_.find` except that it returns the index of the first
 * element `predicate` returns truthy for instead of the element itself.
 *
 * @static
 * @memberOf _
 * @category Array
 * @param {Array} array The array to search.
 * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
 * @returns {number} Returns the index of the found element, else `-1`.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'active': false },
 *   { 'user': 'fred',    'active': false },
 *   { 'user': 'pebbles', 'active': true }
 * ];
 *
 * _.findIndex(users, function(o) { return o.user == 'barney'; });
 * // => 0
 *
 * // The `_.matches` iteratee shorthand.
 * _.findIndex(users, { 'user': 'fred', 'active': false });
 * // => 1
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.findIndex(users, ['active', false]);
 * // => 0
 *
 * // The `_.property` iteratee shorthand.
 * _.findIndex(users, 'active');
 * // => 2
 */
function findIndex(array, predicate) {
  return (array && array.length)
    ? baseFindIndex(array, baseIteratee(predicate, 3))
    : -1;
}

module.exports = findIndex;

},{"./_baseFindIndex":168,"./_baseIteratee":180}],266:[function(require,module,exports){
var baseFlatten = require('./_baseFlatten'),
    map = require('./map');

/**
 * Creates an array of flattened values by running each element in `collection`
 * through `iteratee` and concating its result to the other mapped values.
 * The iteratee is invoked with three arguments: (value, index|key, collection).
 *
 * @static
 * @memberOf _
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new flattened array.
 * @example
 *
 * function duplicate(n) {
 *   return [n, n];
 * }
 *
 * _.flatMap([1, 2], duplicate);
 * // => [1, 1, 2, 2]
 */
function flatMap(collection, iteratee) {
  return baseFlatten(map(collection, iteratee), 1);
}

module.exports = flatMap;

},{"./_baseFlatten":169,"./map":294}],267:[function(require,module,exports){
var arrayEach = require('./_arrayEach'),
    baseCastFunction = require('./_baseCastFunction'),
    baseEach = require('./_baseEach'),
    isArray = require('./isArray');

/**
 * Iterates over elements of `collection` invoking `iteratee` for each element.
 * The iteratee is invoked with three arguments: (value, index|key, collection).
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * **Note:** As with other "Collections" methods, objects with a "length" property
 * are iterated like arrays. To avoid this behavior use `_.forIn` or `_.forOwn`
 * for object iteration.
 *
 * @static
 * @memberOf _
 * @alias each
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 * @example
 *
 * _([1, 2]).forEach(function(value) {
 *   console.log(value);
 * });
 * // => logs `1` then `2`
 *
 * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
 *   console.log(key);
 * });
 * // => logs 'a' then 'b' (iteration order is not guaranteed)
 */
function forEach(collection, iteratee) {
  return (typeof iteratee == 'function' && isArray(collection))
    ? arrayEach(collection, iteratee)
    : baseEach(collection, baseCastFunction(iteratee));
}

module.exports = forEach;

},{"./_arrayEach":144,"./_baseCastFunction":161,"./_baseEach":165,"./isArray":274}],268:[function(require,module,exports){
var baseGet = require('./_baseGet');

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined` the `defaultValue` is used in its place.
 *
 * @static
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

module.exports = get;

},{"./_baseGet":172}],269:[function(require,module,exports){
var baseHasIn = require('./_baseHasIn'),
    hasPath = require('./_hasPath');

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': _.create({ 'c': 3 }) }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b.c');
 * // => true
 *
 * _.hasIn(object, ['a', 'b', 'c']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */
function hasIn(object, path) {
  return hasPath(object, path, baseHasIn);
}

module.exports = hasIn;

},{"./_baseHasIn":174,"./_hasPath":224}],270:[function(require,module,exports){
/**
 * This method returns the first argument given to it.
 *
 * @static
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'user': 'fred' };
 *
 * _.identity(object) === object;
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = identity;

},{}],271:[function(require,module,exports){
var baseInRange = require('./_baseInRange'),
    toNumber = require('./toNumber');

/**
 * Checks if `n` is between `start` and up to but not including, `end`. If
 * `end` is not specified it's set to `start` with `start` then set to `0`.
 * If `start` is greater than `end` the params are swapped to support
 * negative ranges.
 *
 * @static
 * @memberOf _
 * @category Number
 * @param {number} number The number to check.
 * @param {number} [start=0] The start of the range.
 * @param {number} end The end of the range.
 * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
 * @example
 *
 * _.inRange(3, 2, 4);
 * // => true
 *
 * _.inRange(4, 8);
 * // => true
 *
 * _.inRange(4, 2);
 * // => false
 *
 * _.inRange(2, 2);
 * // => false
 *
 * _.inRange(1.2, 2);
 * // => true
 *
 * _.inRange(5.2, 4);
 * // => false
 *
 * _.inRange(-3, -2, -6);
 * // => true
 */
function inRange(number, start, end) {
  start = toNumber(start) || 0;
  if (end === undefined) {
    end = start;
    start = 0;
  } else {
    end = toNumber(end) || 0;
  }
  number = toNumber(number);
  return baseInRange(number, start, end);
}

module.exports = inRange;

},{"./_baseInRange":175,"./toNumber":304}],272:[function(require,module,exports){
var baseIndexOf = require('./_baseIndexOf'),
    isArrayLike = require('./isArrayLike'),
    isString = require('./isString'),
    toInteger = require('./toInteger'),
    values = require('./values');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * Checks if `value` is in `collection`. If `collection` is a string it's checked
 * for a substring of `value`, otherwise [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
 * is used for equality comparisons. If `fromIndex` is negative, it's used as
 * the offset from the end of `collection`.
 *
 * @static
 * @memberOf _
 * @category Collection
 * @param {Array|Object|string} collection The collection to search.
 * @param {*} value The value to search for.
 * @param {number} [fromIndex=0] The index to search from.
 * @param- {Object} [guard] Enables use as an iteratee for functions like `_.reduce`.
 * @returns {boolean} Returns `true` if `value` is found, else `false`.
 * @example
 *
 * _.includes([1, 2, 3], 1);
 * // => true
 *
 * _.includes([1, 2, 3], 1, 2);
 * // => false
 *
 * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
 * // => true
 *
 * _.includes('pebbles', 'eb');
 * // => true
 */
function includes(collection, value, fromIndex, guard) {
  collection = isArrayLike(collection) ? collection : values(collection);
  fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

  var length = collection.length;
  if (fromIndex < 0) {
    fromIndex = nativeMax(length + fromIndex, 0);
  }
  return isString(collection)
    ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
    : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
}

module.exports = includes;

},{"./_baseIndexOf":176,"./isArrayLike":275,"./isString":287,"./toInteger":303,"./values":309}],273:[function(require,module,exports){
var isArrayLikeObject = require('./isArrayLikeObject');

/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
function isArguments(value) {
  // Safari 8.1 incorrectly makes `arguments.callee` enumerable in strict mode.
  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
}

module.exports = isArguments;

},{"./isArrayLikeObject":276}],274:[function(require,module,exports){
/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @type {Function}
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

module.exports = isArray;

},{}],275:[function(require,module,exports){
var getLength = require('./_getLength'),
    isFunction = require('./isFunction'),
    isLength = require('./isLength');

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(getLength(value)) && !isFunction(value);
}

module.exports = isArrayLike;

},{"./_getLength":219,"./isFunction":279,"./isLength":280}],276:[function(require,module,exports){
var isArrayLike = require('./isArrayLike'),
    isObjectLike = require('./isObjectLike');

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object, else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

module.exports = isArrayLikeObject;

},{"./isArrayLike":275,"./isObjectLike":285}],277:[function(require,module,exports){
var constant = require('./constant'),
    root = require('./_root');

/** Used to determine if values are of the language type `Object`. */
var objectTypes = {
  'function': true,
  'object': true
};

/** Detect free variable `exports`. */
var freeExports = (objectTypes[typeof exports] && exports && !exports.nodeType)
  ? exports
  : undefined;

/** Detect free variable `module`. */
var freeModule = (objectTypes[typeof module] && module && !module.nodeType)
  ? module
  : undefined;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = (freeModule && freeModule.exports === freeExports)
  ? freeExports
  : undefined;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = !Buffer ? constant(false) : function(value) {
  return value instanceof Buffer;
};

module.exports = isBuffer;

},{"./_root":250,"./constant":259}],278:[function(require,module,exports){
var isArguments = require('./isArguments'),
    isArray = require('./isArray'),
    isArrayLike = require('./isArrayLike'),
    isFunction = require('./isFunction'),
    isString = require('./isString');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if `value` is an empty collection or object. A value is considered
 * empty if it's an `arguments` object, array, string, or jQuery-like collection
 * with a length of `0` or has no own enumerable properties.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
 * @example
 *
 * _.isEmpty(null);
 * // => true
 *
 * _.isEmpty(true);
 * // => true
 *
 * _.isEmpty(1);
 * // => true
 *
 * _.isEmpty([1, 2, 3]);
 * // => false
 *
 * _.isEmpty({ 'a': 1 });
 * // => false
 */
function isEmpty(value) {
  if (isArrayLike(value) &&
      (isArray(value) || isString(value) ||
        isFunction(value.splice) || isArguments(value))) {
    return !value.length;
  }
  for (var key in value) {
    if (hasOwnProperty.call(value, key)) {
      return false;
    }
  }
  return true;
}

module.exports = isEmpty;

},{"./isArguments":273,"./isArray":274,"./isArrayLike":275,"./isFunction":279,"./isString":287}],279:[function(require,module,exports){
var isObject = require('./isObject');

/** `Object#toString` result references. */
var funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8 which returns 'object' for typed array and weak map constructors,
  // and PhantomJS 1.9 which returns 'function' for `NodeList` instances.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

module.exports = isFunction;

},{"./isObject":284}],280:[function(require,module,exports){
/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This function is loosely based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

module.exports = isLength;

},{}],281:[function(require,module,exports){
var isNumber = require('./isNumber');

/**
 * Checks if `value` is `NaN`.
 *
 * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)
 * which returns `true` for `undefined` and other non-numeric values.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 * @example
 *
 * _.isNaN(NaN);
 * // => true
 *
 * _.isNaN(new Number(NaN));
 * // => true
 *
 * isNaN(undefined);
 * // => true
 *
 * _.isNaN(undefined);
 * // => false
 */
function isNaN(value) {
  // An `NaN` primitive is the only value that is not equal to itself.
  // Perform the `toStringTag` check first to avoid errors with some ActiveX objects in IE.
  return isNumber(value) && value != +value;
}

module.exports = isNaN;

},{"./isNumber":283}],282:[function(require,module,exports){
var isFunction = require('./isFunction'),
    isHostObject = require('./_isHostObject'),
    isObjectLike = require('./isObjectLike');

/** Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns). */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari > 5). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = Function.prototype.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * Checks if `value` is a native function.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
 * @example
 *
 * _.isNative(Array.prototype.push);
 * // => true
 *
 * _.isNative(_);
 * // => false
 */
function isNative(value) {
  if (value == null) {
    return false;
  }
  if (isFunction(value)) {
    return reIsNative.test(funcToString.call(value));
  }
  return isObjectLike(value) &&
    (isHostObject(value) ? reIsNative : reIsHostCtor).test(value);
}

module.exports = isNative;

},{"./_isHostObject":234,"./isFunction":279,"./isObjectLike":285}],283:[function(require,module,exports){
var isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var numberTag = '[object Number]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/**
 * Checks if `value` is classified as a `Number` primitive or object.
 *
 * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
 * as numbers, use the `_.isFinite` method.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isNumber(3);
 * // => true
 *
 * _.isNumber(Number.MIN_VALUE);
 * // => true
 *
 * _.isNumber(Infinity);
 * // => true
 *
 * _.isNumber('3');
 * // => false
 */
function isNumber(value) {
  return typeof value == 'number' ||
    (isObjectLike(value) && objectToString.call(value) == numberTag);
}

module.exports = isNumber;

},{"./isObjectLike":285}],284:[function(require,module,exports){
/**
 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

module.exports = isObject;

},{}],285:[function(require,module,exports){
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

module.exports = isObjectLike;

},{}],286:[function(require,module,exports){
var isHostObject = require('./_isHostObject'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var objectTag = '[object Object]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = Function.prototype.toString;

/** Used to infer the `Object` constructor. */
var objectCtorString = funcToString.call(Object);

/**
 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Built-in value references. */
var getPrototypeOf = Object.getPrototypeOf;

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */
function isPlainObject(value) {
  if (!isObjectLike(value) ||
      objectToString.call(value) != objectTag || isHostObject(value)) {
    return false;
  }
  var proto = getPrototypeOf(value);
  if (proto === null) {
    return true;
  }
  var Ctor = proto.constructor;
  return (typeof Ctor == 'function' &&
    Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);
}

module.exports = isPlainObject;

},{"./_isHostObject":234,"./isObjectLike":285}],287:[function(require,module,exports){
var isArray = require('./isArray'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var stringTag = '[object String]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/**
 * Checks if `value` is classified as a `String` primitive or object.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isString('abc');
 * // => true
 *
 * _.isString(1);
 * // => false
 */
function isString(value) {
  return typeof value == 'string' ||
    (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);
}

module.exports = isString;

},{"./isArray":274,"./isObjectLike":285}],288:[function(require,module,exports){
var isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && objectToString.call(value) == symbolTag);
}

module.exports = isSymbol;

},{"./isObjectLike":285}],289:[function(require,module,exports){
var isLength = require('./isLength'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dateTag] = typedArrayTags[errorTag] =
typedArrayTags[funcTag] = typedArrayTags[mapTag] =
typedArrayTags[numberTag] = typedArrayTags[objectTag] =
typedArrayTags[regexpTag] = typedArrayTags[setTag] =
typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
function isTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
}

module.exports = isTypedArray;

},{"./isLength":280,"./isObjectLike":285}],290:[function(require,module,exports){
/**
 * Checks if `value` is `undefined`.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
 * @example
 *
 * _.isUndefined(void 0);
 * // => true
 *
 * _.isUndefined(null);
 * // => false
 */
function isUndefined(value) {
  return value === undefined;
}

module.exports = isUndefined;

},{}],291:[function(require,module,exports){
var baseHas = require('./_baseHas'),
    baseKeys = require('./_baseKeys'),
    indexKeys = require('./_indexKeys'),
    isArrayLike = require('./isArrayLike'),
    isIndex = require('./_isIndex'),
    isPrototype = require('./_isPrototype');

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  var isProto = isPrototype(object);
  if (!(isProto || isArrayLike(object))) {
    return baseKeys(object);
  }
  var indexes = indexKeys(object),
      skipIndexes = !!indexes,
      result = indexes || [],
      length = result.length;

  for (var key in object) {
    if (baseHas(object, key) &&
        !(skipIndexes && (key == 'length' || isIndex(key, length))) &&
        !(isProto && key == 'constructor')) {
      result.push(key);
    }
  }
  return result;
}

module.exports = keys;

},{"./_baseHas":173,"./_baseKeys":181,"./_indexKeys":229,"./_isIndex":235,"./_isPrototype":239,"./isArrayLike":275}],292:[function(require,module,exports){
var baseKeysIn = require('./_baseKeysIn'),
    indexKeys = require('./_indexKeys'),
    isIndex = require('./_isIndex'),
    isPrototype = require('./_isPrototype');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */
function keysIn(object) {
  var index = -1,
      isProto = isPrototype(object),
      props = baseKeysIn(object),
      propsLength = props.length,
      indexes = indexKeys(object),
      skipIndexes = !!indexes,
      result = indexes || [],
      length = result.length;

  while (++index < propsLength) {
    var key = props[index];
    if (!(skipIndexes && (key == 'length' || isIndex(key, length))) &&
        !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = keysIn;

},{"./_baseKeysIn":182,"./_indexKeys":229,"./_isIndex":235,"./_isPrototype":239}],293:[function(require,module,exports){
/**
 * Gets the last element of `array`.
 *
 * @static
 * @memberOf _
 * @category Array
 * @param {Array} array The array to query.
 * @returns {*} Returns the last element of `array`.
 * @example
 *
 * _.last([1, 2, 3]);
 * // => 3
 */
function last(array) {
  var length = array ? array.length : 0;
  return length ? array[length - 1] : undefined;
}

module.exports = last;

},{}],294:[function(require,module,exports){
var arrayMap = require('./_arrayMap'),
    baseIteratee = require('./_baseIteratee'),
    baseMap = require('./_baseMap'),
    isArray = require('./isArray');

/**
 * Creates an array of values by running each element in `collection` through
 * `iteratee`. The iteratee is invoked with three arguments:
 * (value, index|key, collection).
 *
 * Many lodash methods are guarded to work as iteratees for methods like
 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
 *
 * The guarded methods are:
 * `ary`, `curry`, `curryRight`, `drop`, `dropRight`, `every`, `fill`,
 * `invert`, `parseInt`, `random`, `range`, `rangeRight`, `slice`, `some`,
 * `sortBy`, `take`, `takeRight`, `template`, `trim`, `trimEnd`, `trimStart`,
 * and `words`
 *
 * @static
 * @memberOf _
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * _.map([4, 8], square);
 * // => [16, 64]
 *
 * _.map({ 'a': 4, 'b': 8 }, square);
 * // => [16, 64] (iteration order is not guaranteed)
 *
 * var users = [
 *   { 'user': 'barney' },
 *   { 'user': 'fred' }
 * ];
 *
 * // The `_.property` iteratee shorthand.
 * _.map(users, 'user');
 * // => ['barney', 'fred']
 */
function map(collection, iteratee) {
  var func = isArray(collection) ? arrayMap : baseMap;
  return func(collection, baseIteratee(iteratee, 3));
}

module.exports = map;

},{"./_arrayMap":148,"./_baseIteratee":180,"./_baseMap":183,"./isArray":274}],295:[function(require,module,exports){
var MapCache = require('./_MapCache');

/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoizing function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result);
    return result;
  };
  memoized.cache = new memoize.Cache;
  return memoized;
}

// Assign cache to `_.memoize`.
memoize.Cache = MapCache;

module.exports = memoize;

},{"./_MapCache":133}],296:[function(require,module,exports){
var baseMerge = require('./_baseMerge'),
    createAssigner = require('./_createAssigner');

/**
 * This method is like `_.assign` except that it recursively merges own and
 * inherited enumerable properties of source objects into the destination
 * object. Source properties that resolve to `undefined` are skipped if a
 * destination value exists. Array and plain object properties are merged
 * recursively.Other objects and value types are overridden by assignment.
 * Source objects are applied from left to right. Subsequent sources
 * overwrite property assignments of previous sources.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var users = {
 *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
 * };
 *
 * var ages = {
 *   'data': [{ 'age': 36 }, { 'age': 40 }]
 * };
 *
 * _.merge(users, ages);
 * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
 */
var merge = createAssigner(function(object, source, srcIndex) {
  baseMerge(object, source, srcIndex);
});

module.exports = merge;

},{"./_baseMerge":186,"./_createAssigner":211}],297:[function(require,module,exports){
/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that negates the result of the predicate `func`. The
 * `func` predicate is invoked with the `this` binding and arguments of the
 * created function.
 *
 * @static
 * @memberOf _
 * @category Function
 * @param {Function} predicate The predicate to negate.
 * @returns {Function} Returns the new function.
 * @example
 *
 * function isEven(n) {
 *   return n % 2 == 0;
 * }
 *
 * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
 * // => [1, 3, 5]
 */
function negate(predicate) {
  if (typeof predicate != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  return function() {
    return !predicate.apply(this, arguments);
  };
}

module.exports = negate;

},{}],298:[function(require,module,exports){
/**
 * A no-operation function that returns `undefined` regardless of the
 * arguments it receives.
 *
 * @static
 * @memberOf _
 * @category Util
 * @example
 *
 * var object = { 'user': 'fred' };
 *
 * _.noop(object) === undefined;
 * // => true
 */
function noop() {
  // No operation performed.
}

module.exports = noop;

},{}],299:[function(require,module,exports){
var baseFlatten = require('./_baseFlatten'),
    basePick = require('./_basePick'),
    rest = require('./rest');

/**
 * Creates an object composed of the picked `object` properties.
 *
 * @static
 * @memberOf _
 * @category Object
 * @param {Object} object The source object.
 * @param {...(string|string[])} [props] The property names to pick, specified
 *  individually or in arrays.
 * @returns {Object} Returns the new object.
 * @example
 *
 * var object = { 'a': 1, 'b': '2', 'c': 3 };
 *
 * _.pick(object, ['a', 'c']);
 * // => { 'a': 1, 'c': 3 }
 */
var pick = rest(function(object, props) {
  return object == null ? {} : basePick(object, baseFlatten(props, 1));
});

module.exports = pick;

},{"./_baseFlatten":169,"./_basePick":188,"./rest":301}],300:[function(require,module,exports){
var baseProperty = require('./_baseProperty'),
    basePropertyDeep = require('./_basePropertyDeep'),
    isKey = require('./_isKey');

/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': { 'c': 2 } } },
 *   { 'a': { 'b': { 'c': 1 } } }
 * ];
 *
 * _.map(objects, _.property('a.b.c'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
 * // => [1, 2]
 */
function property(path) {
  return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
}

module.exports = property;

},{"./_baseProperty":189,"./_basePropertyDeep":190,"./_isKey":237}],301:[function(require,module,exports){
var apply = require('./_apply'),
    toInteger = require('./toInteger');

/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT = 'Expected a function';

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * Creates a function that invokes `func` with the `this` binding of the
 * created function and arguments from `start` and beyond provided as an array.
 *
 * **Note:** This method is based on the [rest parameter](https://mdn.io/rest_parameters).
 *
 * @static
 * @memberOf _
 * @category Function
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 * @example
 *
 * var say = _.rest(function(what, names) {
 *   return what + ' ' + _.initial(names).join(', ') +
 *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
 * });
 *
 * say('hello', 'fred', 'barney', 'pebbles');
 * // => 'hello fred, barney, & pebbles'
 */
function rest(func, start) {
  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  start = nativeMax(start === undefined ? (func.length - 1) : toInteger(start), 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    switch (start) {
      case 0: return func.call(this, array);
      case 1: return func.call(this, args[0], array);
      case 2: return func.call(this, args[0], args[1], array);
    }
    var otherArgs = Array(start + 1);
    index = -1;
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = array;
    return apply(func, this, otherArgs);
  };
}

module.exports = rest;

},{"./_apply":143,"./toInteger":303}],302:[function(require,module,exports){
var baseSum = require('./_baseSum'),
    identity = require('./identity');

/**
 * Computes the sum of the values in `array`.
 *
 * @static
 * @memberOf _
 * @category Math
 * @param {Array} array The array to iterate over.
 * @returns {number} Returns the sum.
 * @example
 *
 * _.sum([4, 2, 8, 6]);
 * // => 20
 */
function sum(array) {
  return (array && array.length)
    ? baseSum(array, identity)
    : 0;
}

module.exports = sum;

},{"./_baseSum":192,"./identity":270}],303:[function(require,module,exports){
var toNumber = require('./toNumber');

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0,
    MAX_INTEGER = 1.7976931348623157e+308;

/**
 * Converts `value` to an integer.
 *
 * **Note:** This function is loosely based on [`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3');
 * // => 3
 */
function toInteger(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber(value);
  if (value === INFINITY || value === -INFINITY) {
    var sign = (value < 0 ? -1 : 1);
    return sign * MAX_INTEGER;
  }
  var remainder = value % 1;
  return value === value ? (remainder ? value - remainder : value) : 0;
}

module.exports = toInteger;

},{"./toNumber":304}],304:[function(require,module,exports){
var isFunction = require('./isFunction'),
    isObject = require('./isObject');

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** Used to match leading and trailing whitespace. */
var reTrim = /^\s+|\s+$/g;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3);
 * // => 3
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3');
 * // => 3
 */
function toNumber(value) {
  if (isObject(value)) {
    var other = isFunction(value.valueOf) ? value.valueOf() : value;
    value = isObject(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

module.exports = toNumber;

},{"./isFunction":279,"./isObject":284}],305:[function(require,module,exports){
var baseToPairs = require('./_baseToPairs'),
    keys = require('./keys');

/**
 * Creates an array of own enumerable key-value pairs for `object` which
 * can be consumed by `_.fromPairs`.
 *
 * @static
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the new array of key-value pairs.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.toPairs(new Foo);
 * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
 */
function toPairs(object) {
  return baseToPairs(object, keys(object));
}

module.exports = toPairs;

},{"./_baseToPairs":194,"./keys":291}],306:[function(require,module,exports){
var copyObject = require('./_copyObject'),
    keysIn = require('./keysIn');

/**
 * Converts `value` to a plain object flattening inherited enumerable
 * properties of `value` to own properties of the plain object.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {Object} Returns the converted plain object.
 * @example
 *
 * function Foo() {
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.assign({ 'a': 1 }, new Foo);
 * // => { 'a': 1, 'b': 2 }
 *
 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
 * // => { 'a': 1, 'b': 2, 'c': 3 }
 */
function toPlainObject(value) {
  return copyObject(value, keysIn(value));
}

module.exports = toPlainObject;

},{"./_copyObject":208,"./keysIn":292}],307:[function(require,module,exports){
var Symbol = require('./_Symbol'),
    isSymbol = require('./isSymbol');

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * Converts `value` to a string if it's not one. An empty string is returned
 * for `null` and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (value == null) {
    return '';
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = toString;

},{"./_Symbol":138,"./isSymbol":288}],308:[function(require,module,exports){
var baseIteratee = require('./_baseIteratee'),
    baseUniq = require('./_baseUniq');

/**
 * This method is like `_.uniq` except that it accepts `iteratee` which is
 * invoked for each element in `array` to generate the criterion by which
 * uniqueness is computed. The iteratee is invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
 * @returns {Array} Returns the new duplicate free array.
 * @example
 *
 * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
 * // => [2.1, 1.2]
 *
 * // The `_.property` iteratee shorthand.
 * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
 * // => [{ 'x': 1 }, { 'x': 2 }]
 */
function uniqBy(array, iteratee) {
  return (array && array.length)
    ? baseUniq(array, baseIteratee(iteratee))
    : [];
}

module.exports = uniqBy;

},{"./_baseIteratee":180,"./_baseUniq":195}],309:[function(require,module,exports){
var baseValues = require('./_baseValues'),
    keys = require('./keys');

/**
 * Creates an array of the own enumerable property values of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property values.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.values(new Foo);
 * // => [1, 2] (iteration order is not guaranteed)
 *
 * _.values('hi');
 * // => ['h', 'i']
 */
function values(object) {
  return object ? baseValues(object, keys(object)) : [];
}

module.exports = values;

},{"./_baseValues":196,"./keys":291}],310:[function(require,module,exports){
var findMatchingRule = function(rules, text){
  var i;
  for(i=0; i<rules.length; i++)
    if(rules[i].regex.test(text))
      return rules[i];
  return undefined;
};

var findMaxIndexAndRule = function(rules, text){
  var i, rule, last_matching_rule;
  for(i=0; i<text.length; i++){
    rule = findMatchingRule(rules, text.substring(0, i + 1));
    if(rule)
      last_matching_rule = rule;
    else if(last_matching_rule)
      return {max_index: i, rule: last_matching_rule};
  }
  return last_matching_rule ? {max_index: text.length, rule: last_matching_rule} : undefined;
};

module.exports = function(onToken_orig){
  var buffer = "";
  var rules = [];
  var line = 1;
  var col = 1;

  var onToken = function(src, type){
    onToken_orig({
      type: type,
      src: src,
      line: line,
      col: col
    });
    var lines = src.split("\n");
    line += lines.length - 1;
    col = (lines.length > 1 ? 1 : col) + lines[lines.length - 1].length;
  };

  return {
    addRule: function(regex, type){
      rules.push({regex: regex, type: type});
    },
    onText: function(text){
      var str = buffer + text;
      var m = findMaxIndexAndRule(rules, str);
      while(m && m.max_index !== str.length){
        onToken(str.substring(0, m.max_index), m.rule.type);

        //now find the next token
        str = str.substring(m.max_index);
        m = findMaxIndexAndRule(rules, str);
      }
      buffer = str;
    },
    end: function(){
      if(buffer.length === 0)
        return;

      var rule = findMatchingRule(rules, buffer);
      if(!rule){
        var err = new Error("unable to tokenize");
        err.tokenizer2 = {
          buffer: buffer,
          line: line,
          col: col
        };
        throw err;
      }

      onToken(buffer, rule.type);
    }
  };
};

},{}],311:[function(require,module,exports){
"use strict";

var Assessor = require("yoastseo/js/assessor.js");

var introductionKeyword = require("yoastseo/js/assessments/introductionKeywordAssessment.js");
var keyphraseLength = require("yoastseo/js/assessments/keyphraseLengthAssessment.js");
var keywordDensity = require("yoastseo/js/assessments/keywordDensityAssessment.js");
var keywordStopWords = require("yoastseo/js/assessments/keywordStopWordsAssessment.js");
var metaDescriptionKeyword = require("yoastseo/js/assessments/metaDescriptionKeywordAssessment.js");
var metaDescriptionLength = require("yoastseo/js/assessments/metaDescriptionLengthAssessment.js");
var titleKeyword = require("yoastseo/js/assessments/titleKeywordAssessment.js");
var titleWidth = require("yoastseo/js/assessments/pageTitleWidthAssessment.js");
var urlKeyword = require("yoastseo/js/assessments/urlKeywordAssessment.js");
var urlLength = require("yoastseo/js/assessments/urlLengthAssessment.js");
var urlStopWords = require("yoastseo/js/assessments/urlStopWordsAssessment.js");
var taxonomyTextLength = require("yoastseo/js/assessments/taxonomyTextLengthAssessment");

/**
 * Creates the Assessor
 *
 * @param {object} i18n The i18n object used for translations.
 * @constructor
 */
var TaxonomyAssessor = function TaxonomyAssessor(i18n) {
	Assessor.call(this, i18n);

	this._assessments = [introductionKeyword, keyphraseLength, keywordDensity, keywordStopWords, metaDescriptionKeyword, metaDescriptionLength, taxonomyTextLength, titleKeyword, titleWidth, urlKeyword, urlLength, urlStopWords];
};

module.exports = TaxonomyAssessor;

require("util").inherits(module.exports, Assessor);

},{"util":324,"yoastseo/js/assessments/introductionKeywordAssessment.js":2,"yoastseo/js/assessments/keyphraseLengthAssessment.js":3,"yoastseo/js/assessments/keywordDensityAssessment.js":4,"yoastseo/js/assessments/keywordStopWordsAssessment.js":5,"yoastseo/js/assessments/metaDescriptionKeywordAssessment.js":6,"yoastseo/js/assessments/metaDescriptionLengthAssessment.js":7,"yoastseo/js/assessments/pageTitleWidthAssessment.js":8,"yoastseo/js/assessments/taxonomyTextLengthAssessment":10,"yoastseo/js/assessments/titleKeywordAssessment.js":15,"yoastseo/js/assessments/urlKeywordAssessment.js":16,"yoastseo/js/assessments/urlLengthAssessment.js":17,"yoastseo/js/assessments/urlStopWordsAssessment.js":18,"yoastseo/js/assessor.js":19}],312:[function(require,module,exports){
"use strict";

/* global wpseoAdminL10n */
/* global ajaxurl */
/* global require */

var Jed = require("jed");
var Paper = require("yoastseo/js/values/Paper");
var SEOAssessor = require("yoastseo/js/SEOAssessor");
var TaxonomyAssessor = require("./assessors/taxonomyAssessor");
var isUndefined = require("lodash/isUndefined");

(function ($) {
	"use strict";

	var i18n = new Jed({
		domain: "js-text-analysis",
		locale_data: {
			"js-text-analysis": {
				"": {}
			}
		}
	});

	/**
  * Constructs the recalculate score.
  *
  * @constructor
  */
	var YoastRecalculateScore = function YoastRecalculateScore(total_count) {
		// Sets the total count
		this.total_count = total_count;
		this.oncomplete = false;

		this.setupAssessors();

		$("#wpseo_count_total").html(total_count);

		jQuery("#wpseo_progressbar").progressbar({ value: 0 });
	};

	/**
  * Sets up the Assessors needed for the recalculation.
  */
	YoastRecalculateScore.prototype.setupAssessors = function () {
		var postAssessor = new SEOAssessor(i18n);
		var taxonomyAssessor = new TaxonomyAssessor(i18n);

		this.validAssessors = {
			post: postAssessor,
			term: taxonomyAssessor
		};
	};

	/**
  * Starts the recalculation
  *
  * @param {int} items_to_fetch
  * @param {string} fetch_type
  * @param {string} id_field
  * @param {Function|bool} callback
  */
	YoastRecalculateScore.prototype.start = function (items_to_fetch, fetch_type, id_field, callback) {
		if (!this.validAssessors.hasOwnProperty(fetch_type)) {
			throw new Error("Unknown fetch type of " + fetch_type + " given.");
		}

		this.fetch_type = fetch_type;
		this.items_to_fetch = items_to_fetch;
		this.id_field = id_field;
		this.oncomplete = callback;

		this.assessor = this.validAssessors[fetch_type];

		this.getItemsToRecalculate(1);
	};

	/**
  * Updates the progressbar
  *
  * @param {int} total_posts
  */
	YoastRecalculateScore.prototype.updateProgressBar = function (total_posts) {
		var current_value = jQuery("#wpseo_count").text();
		var new_value = parseInt(current_value, 10) + total_posts;
		var new_width = new_value * (100 / this.total_count);

		jQuery("#wpseo_progressbar").progressbar("value", new_width);

		this.updateCountElement(new_value);
	};

	/**
  * Updates the element with the new count value
  *
  * @param {int} new_value
  */
	YoastRecalculateScore.prototype.updateCountElement = function (new_value) {
		jQuery("#wpseo_count").html(new_value);
	};

	/**
  * Calculate the scores
  *
  * @param {int}   total_items
  * @param {array} items
  */
	YoastRecalculateScore.prototype.calculateScores = function (total_items, items) {
		var scores = [];
		for (var i = 0; i < total_items; i++) {
			scores.push(this.getScore(items[i]));
		}

		return scores;
	};

	/**
  * Returns the score
  *
  * @param {json} item
  * @returns {{item_id: int, score}}
  */
	YoastRecalculateScore.prototype.getScore = function (item) {
		return {
			item_id: this.getItemID(item),
			taxonomy: item.taxonomy ? item.taxonomy : "",
			score: this.calculateItemScore(item)
		};
	};

	/**
  * Returns the item id
  *
  * @param {json} item
  * @returns {int}
  */
	YoastRecalculateScore.prototype.getItemID = function (item) {
		this.items_to_fetch--;

		return item[this.id_field];
	};

	/**
  * Pass the post to the analyzer to calculates it's core
  *
  * @param {Object} item
  */
	YoastRecalculateScore.prototype.calculateItemScore = function (item) {
		var tempPaper = new Paper(item.text, {
			keyword: item.keyword,
			url: item.url,
			locale: wpseoAdminL10n.locale,
			description: item.meta,
			title: item.pageTitle
		});

		var tempAssessor = this.assessor;

		tempAssessor.assess(tempPaper);

		return tempAssessor.calculateOverallScore();
	};

	/**
  * Parse the response given by request in getItemsToRecalculate.
  *
  * @param {Object} response
  */
	YoastRecalculateScore.prototype.parseResponse = function (response) {
		if (response !== "" && response !== null) {
			if (!isUndefined(response.total_items)) {
				var scores = this.calculateScores(response.total_items, response.items);

				this.sendScores(scores);

				this.updateProgressBar(response.total_items);
			}

			if (!isUndefined(response.next_page)) {
				this.getItemsToRecalculate(response.next_page);
			} else {
				this.onCompleteRequest();
			}

			return true;
		}

		this.onCompleteRequest();
	};

	/**
  * Run the oncomplete method when the process is done..
  */
	YoastRecalculateScore.prototype.onCompleteRequest = function () {
		// When there is nothing to do.
		if (this.oncomplete !== false) {
			this.oncomplete();
			this.oncomplete = false;
		}
	};

	/**
  * Sends the scores to the backend
  *
  * @param {array} scores
  */
	YoastRecalculateScore.prototype.sendScores = function (scores) {
		jQuery.post(ajaxurl, {
			action: "wpseo_update_score",
			nonce: jQuery("#wpseo_recalculate_nonce").val(),
			scores: scores,
			type: this.fetch_type
		});
	};

	/**
  * Get the posts which have to be recalculated.
  *
  * @param {int} current_page
  */
	YoastRecalculateScore.prototype.getItemsToRecalculate = function (current_page) {
		jQuery.post(ajaxurl, {
			action: "wpseo_recalculate_scores",
			nonce: jQuery("#wpseo_recalculate_nonce").val(),
			paged: current_page,
			type: this.fetch_type
		}, this.parseResponse.bind(this), "json");
	};

	/**
  * Starting the recalculation process
  *
  * @param {object} response
  */
	function start_recalculate(response) {
		var PostsToFetch = parseInt(response.posts, 10);
		var TermsToFetch = parseInt(response.terms, 10);

		var RecalculateScore = new YoastRecalculateScore(PostsToFetch + TermsToFetch);

		RecalculateScore.start(PostsToFetch, "post", "post_id", function () {
			RecalculateScore.start(TermsToFetch, "term", "term_id", false);
		});
	}

	/**
  * Initializes the event handler for the recalculate button.
  */
	function init() {
		var recalculate_link = jQuery("#wpseo_recalculate_link");

		if (!isUndefined(recalculate_link)) {
			recalculate_link.click(function () {
				// Reset the count element and the progressbar
				jQuery("#wpseo_count").text(0);

				$.post(ajaxurl, {
					action: "wpseo_recalculate_total",
					nonce: jQuery("#wpseo_recalculate_nonce").val()
				}, start_recalculate, "json");
			});

			if (recalculate_link.data("open")) {
				recalculate_link.trigger("click");
			}
		}
	}

	$(init);
})(jQuery);

},{"./assessors/taxonomyAssessor":311,"jed":315,"lodash/isUndefined":316,"yoastseo/js/SEOAssessor":1,"yoastseo/js/values/Paper":130}],313:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

(function () {
    try {
        cachedSetTimeout = setTimeout;
    } catch (e) {
        cachedSetTimeout = function () {
            throw new Error('setTimeout is not defined');
        }
    }
    try {
        cachedClearTimeout = clearTimeout;
    } catch (e) {
        cachedClearTimeout = function () {
            throw new Error('clearTimeout is not defined');
        }
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],314:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],315:[function(require,module,exports){
/**
 * @preserve jed.js https://github.com/SlexAxton/Jed
 */
/*
-----------
A gettext compatible i18n library for modern JavaScript Applications

by Alex Sexton - AlexSexton [at] gmail - @SlexAxton
WTFPL license for use
Dojo CLA for contributions

Jed offers the entire applicable GNU gettext spec'd set of
functions, but also offers some nicer wrappers around them.
The api for gettext was written for a language with no function
overloading, so Jed allows a little more of that.

Many thanks to Joshua I. Miller - unrtst@cpan.org - who wrote
gettext.js back in 2008. I was able to vet a lot of my ideas
against his. I also made sure Jed passed against his tests
in order to offer easy upgrades -- jsgettext.berlios.de
*/
(function (root, undef) {

  // Set up some underscore-style functions, if you already have
  // underscore, feel free to delete this section, and use it
  // directly, however, the amount of functions used doesn't
  // warrant having underscore as a full dependency.
  // Underscore 1.3.0 was used to port and is licensed
  // under the MIT License by Jeremy Ashkenas.
  var ArrayProto    = Array.prototype,
      ObjProto      = Object.prototype,
      slice         = ArrayProto.slice,
      hasOwnProp    = ObjProto.hasOwnProperty,
      nativeForEach = ArrayProto.forEach,
      breaker       = {};

  // We're not using the OOP style _ so we don't need the
  // extra level of indirection. This still means that you
  // sub out for real `_` though.
  var _ = {
    forEach : function( obj, iterator, context ) {
      var i, l, key;
      if ( obj === null ) {
        return;
      }

      if ( nativeForEach && obj.forEach === nativeForEach ) {
        obj.forEach( iterator, context );
      }
      else if ( obj.length === +obj.length ) {
        for ( i = 0, l = obj.length; i < l; i++ ) {
          if ( i in obj && iterator.call( context, obj[i], i, obj ) === breaker ) {
            return;
          }
        }
      }
      else {
        for ( key in obj) {
          if ( hasOwnProp.call( obj, key ) ) {
            if ( iterator.call (context, obj[key], key, obj ) === breaker ) {
              return;
            }
          }
        }
      }
    },
    extend : function( obj ) {
      this.forEach( slice.call( arguments, 1 ), function ( source ) {
        for ( var prop in source ) {
          obj[prop] = source[prop];
        }
      });
      return obj;
    }
  };
  // END Miniature underscore impl

  // Jed is a constructor function
  var Jed = function ( options ) {
    // Some minimal defaults
    this.defaults = {
      "locale_data" : {
        "messages" : {
          "" : {
            "domain"       : "messages",
            "lang"         : "en",
            "plural_forms" : "nplurals=2; plural=(n != 1);"
          }
          // There are no default keys, though
        }
      },
      // The default domain if one is missing
      "domain" : "messages",
      // enable debug mode to log untranslated strings to the console
      "debug" : false
    };

    // Mix in the sent options with the default options
    this.options = _.extend( {}, this.defaults, options );
    this.textdomain( this.options.domain );

    if ( options.domain && ! this.options.locale_data[ this.options.domain ] ) {
      throw new Error('Text domain set to non-existent domain: `' + options.domain + '`');
    }
  };

  // The gettext spec sets this character as the default
  // delimiter for context lookups.
  // e.g.: context\u0004key
  // If your translation company uses something different,
  // just change this at any time and it will use that instead.
  Jed.context_delimiter = String.fromCharCode( 4 );

  function getPluralFormFunc ( plural_form_string ) {
    return Jed.PF.compile( plural_form_string || "nplurals=2; plural=(n != 1);");
  }

  function Chain( key, i18n ){
    this._key = key;
    this._i18n = i18n;
  }

  // Create a chainable api for adding args prettily
  _.extend( Chain.prototype, {
    onDomain : function ( domain ) {
      this._domain = domain;
      return this;
    },
    withContext : function ( context ) {
      this._context = context;
      return this;
    },
    ifPlural : function ( num, pkey ) {
      this._val = num;
      this._pkey = pkey;
      return this;
    },
    fetch : function ( sArr ) {
      if ( {}.toString.call( sArr ) != '[object Array]' ) {
        sArr = [].slice.call(arguments, 0);
      }
      return ( sArr && sArr.length ? Jed.sprintf : function(x){ return x; } )(
        this._i18n.dcnpgettext(this._domain, this._context, this._key, this._pkey, this._val),
        sArr
      );
    }
  });

  // Add functions to the Jed prototype.
  // These will be the functions on the object that's returned
  // from creating a `new Jed()`
  // These seem redundant, but they gzip pretty well.
  _.extend( Jed.prototype, {
    // The sexier api start point
    translate : function ( key ) {
      return new Chain( key, this );
    },

    textdomain : function ( domain ) {
      if ( ! domain ) {
        return this._textdomain;
      }
      this._textdomain = domain;
    },

    gettext : function ( key ) {
      return this.dcnpgettext.call( this, undef, undef, key );
    },

    dgettext : function ( domain, key ) {
     return this.dcnpgettext.call( this, domain, undef, key );
    },

    dcgettext : function ( domain , key /*, category */ ) {
      // Ignores the category anyways
      return this.dcnpgettext.call( this, domain, undef, key );
    },

    ngettext : function ( skey, pkey, val ) {
      return this.dcnpgettext.call( this, undef, undef, skey, pkey, val );
    },

    dngettext : function ( domain, skey, pkey, val ) {
      return this.dcnpgettext.call( this, domain, undef, skey, pkey, val );
    },

    dcngettext : function ( domain, skey, pkey, val/*, category */) {
      return this.dcnpgettext.call( this, domain, undef, skey, pkey, val );
    },

    pgettext : function ( context, key ) {
      return this.dcnpgettext.call( this, undef, context, key );
    },

    dpgettext : function ( domain, context, key ) {
      return this.dcnpgettext.call( this, domain, context, key );
    },

    dcpgettext : function ( domain, context, key/*, category */) {
      return this.dcnpgettext.call( this, domain, context, key );
    },

    npgettext : function ( context, skey, pkey, val ) {
      return this.dcnpgettext.call( this, undef, context, skey, pkey, val );
    },

    dnpgettext : function ( domain, context, skey, pkey, val ) {
      return this.dcnpgettext.call( this, domain, context, skey, pkey, val );
    },

    // The most fully qualified gettext function. It has every option.
    // Since it has every option, we can use it from every other method.
    // This is the bread and butter.
    // Technically there should be one more argument in this function for 'Category',
    // but since we never use it, we might as well not waste the bytes to define it.
    dcnpgettext : function ( domain, context, singular_key, plural_key, val ) {
      // Set some defaults

      plural_key = plural_key || singular_key;

      // Use the global domain default if one
      // isn't explicitly passed in
      domain = domain || this._textdomain;

      var fallback;

      // Handle special cases

      // No options found
      if ( ! this.options ) {
        // There's likely something wrong, but we'll return the correct key for english
        // We do this by instantiating a brand new Jed instance with the default set
        // for everything that could be broken.
        fallback = new Jed();
        return fallback.dcnpgettext.call( fallback, undefined, undefined, singular_key, plural_key, val );
      }

      // No translation data provided
      if ( ! this.options.locale_data ) {
        throw new Error('No locale data provided.');
      }

      if ( ! this.options.locale_data[ domain ] ) {
        throw new Error('Domain `' + domain + '` was not found.');
      }

      if ( ! this.options.locale_data[ domain ][ "" ] ) {
        throw new Error('No locale meta information provided.');
      }

      // Make sure we have a truthy key. Otherwise we might start looking
      // into the empty string key, which is the options for the locale
      // data.
      if ( ! singular_key ) {
        throw new Error('No translation key found.');
      }

      var key  = context ? context + Jed.context_delimiter + singular_key : singular_key,
          locale_data = this.options.locale_data,
          dict = locale_data[ domain ],
          defaultConf = (locale_data.messages || this.defaults.locale_data.messages)[""],
          pluralForms = dict[""].plural_forms || dict[""]["Plural-Forms"] || dict[""]["plural-forms"] || defaultConf.plural_forms || defaultConf["Plural-Forms"] || defaultConf["plural-forms"],
          val_list,
          res;

      var val_idx;
      if (val === undefined) {
        // No value passed in; assume singular key lookup.
        val_idx = 0;

      } else {
        // Value has been passed in; use plural-forms calculations.

        // Handle invalid numbers, but try casting strings for good measure
        if ( typeof val != 'number' ) {
          val = parseInt( val, 10 );

          if ( isNaN( val ) ) {
            throw new Error('The number that was passed in is not a number.');
          }
        }

        val_idx = getPluralFormFunc(pluralForms)(val);
      }

      // Throw an error if a domain isn't found
      if ( ! dict ) {
        throw new Error('No domain named `' + domain + '` could be found.');
      }

      val_list = dict[ key ];

      // If there is no match, then revert back to
      // english style singular/plural with the keys passed in.
      if ( ! val_list || val_idx > val_list.length ) {
        if (this.options.missing_key_callback) {
          this.options.missing_key_callback(key, domain);
        }
        res = [ singular_key, plural_key ];

        // collect untranslated strings
        if (this.options.debug===true) {
          console.log(res[ getPluralFormFunc(pluralForms)( val ) ]);
        }
        return res[ getPluralFormFunc()( val ) ];
      }

      res = val_list[ val_idx ];

      // This includes empty strings on purpose
      if ( ! res  ) {
        res = [ singular_key, plural_key ];
        return res[ getPluralFormFunc()( val ) ];
      }
      return res;
    }
  });


  // We add in sprintf capabilities for post translation value interolation
  // This is not internally used, so you can remove it if you have this
  // available somewhere else, or want to use a different system.

  // We _slightly_ modify the normal sprintf behavior to more gracefully handle
  // undefined values.

  /**
   sprintf() for JavaScript 0.7-beta1
   http://www.diveintojavascript.com/projects/javascript-sprintf

   Copyright (c) Alexandru Marasteanu <alexaholic [at) gmail (dot] com>
   All rights reserved.

   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions are met:
       * Redistributions of source code must retain the above copyright
         notice, this list of conditions and the following disclaimer.
       * Redistributions in binary form must reproduce the above copyright
         notice, this list of conditions and the following disclaimer in the
         documentation and/or other materials provided with the distribution.
       * Neither the name of sprintf() for JavaScript nor the
         names of its contributors may be used to endorse or promote products
         derived from this software without specific prior written permission.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
   ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
   DISCLAIMED. IN NO EVENT SHALL Alexandru Marasteanu BE LIABLE FOR ANY
   DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
  var sprintf = (function() {
    function get_type(variable) {
      return Object.prototype.toString.call(variable).slice(8, -1).toLowerCase();
    }
    function str_repeat(input, multiplier) {
      for (var output = []; multiplier > 0; output[--multiplier] = input) {/* do nothing */}
      return output.join('');
    }

    var str_format = function() {
      if (!str_format.cache.hasOwnProperty(arguments[0])) {
        str_format.cache[arguments[0]] = str_format.parse(arguments[0]);
      }
      return str_format.format.call(null, str_format.cache[arguments[0]], arguments);
    };

    str_format.format = function(parse_tree, argv) {
      var cursor = 1, tree_length = parse_tree.length, node_type = '', arg, output = [], i, k, match, pad, pad_character, pad_length;
      for (i = 0; i < tree_length; i++) {
        node_type = get_type(parse_tree[i]);
        if (node_type === 'string') {
          output.push(parse_tree[i]);
        }
        else if (node_type === 'array') {
          match = parse_tree[i]; // convenience purposes only
          if (match[2]) { // keyword argument
            arg = argv[cursor];
            for (k = 0; k < match[2].length; k++) {
              if (!arg.hasOwnProperty(match[2][k])) {
                throw(sprintf('[sprintf] property "%s" does not exist', match[2][k]));
              }
              arg = arg[match[2][k]];
            }
          }
          else if (match[1]) { // positional argument (explicit)
            arg = argv[match[1]];
          }
          else { // positional argument (implicit)
            arg = argv[cursor++];
          }

          if (/[^s]/.test(match[8]) && (get_type(arg) != 'number')) {
            throw(sprintf('[sprintf] expecting number but found %s', get_type(arg)));
          }

          // Jed EDIT
          if ( typeof arg == 'undefined' || arg === null ) {
            arg = '';
          }
          // Jed EDIT

          switch (match[8]) {
            case 'b': arg = arg.toString(2); break;
            case 'c': arg = String.fromCharCode(arg); break;
            case 'd': arg = parseInt(arg, 10); break;
            case 'e': arg = match[7] ? arg.toExponential(match[7]) : arg.toExponential(); break;
            case 'f': arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg); break;
            case 'o': arg = arg.toString(8); break;
            case 's': arg = ((arg = String(arg)) && match[7] ? arg.substring(0, match[7]) : arg); break;
            case 'u': arg = Math.abs(arg); break;
            case 'x': arg = arg.toString(16); break;
            case 'X': arg = arg.toString(16).toUpperCase(); break;
          }
          arg = (/[def]/.test(match[8]) && match[3] && arg >= 0 ? '+'+ arg : arg);
          pad_character = match[4] ? match[4] == '0' ? '0' : match[4].charAt(1) : ' ';
          pad_length = match[6] - String(arg).length;
          pad = match[6] ? str_repeat(pad_character, pad_length) : '';
          output.push(match[5] ? arg + pad : pad + arg);
        }
      }
      return output.join('');
    };

    str_format.cache = {};

    str_format.parse = function(fmt) {
      var _fmt = fmt, match = [], parse_tree = [], arg_names = 0;
      while (_fmt) {
        if ((match = /^[^\x25]+/.exec(_fmt)) !== null) {
          parse_tree.push(match[0]);
        }
        else if ((match = /^\x25{2}/.exec(_fmt)) !== null) {
          parse_tree.push('%');
        }
        else if ((match = /^\x25(?:([1-9]\d*)\$|\(([^\)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-fosuxX])/.exec(_fmt)) !== null) {
          if (match[2]) {
            arg_names |= 1;
            var field_list = [], replacement_field = match[2], field_match = [];
            if ((field_match = /^([a-z_][a-z_\d]*)/i.exec(replacement_field)) !== null) {
              field_list.push(field_match[1]);
              while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {
                if ((field_match = /^\.([a-z_][a-z_\d]*)/i.exec(replacement_field)) !== null) {
                  field_list.push(field_match[1]);
                }
                else if ((field_match = /^\[(\d+)\]/.exec(replacement_field)) !== null) {
                  field_list.push(field_match[1]);
                }
                else {
                  throw('[sprintf] huh?');
                }
              }
            }
            else {
              throw('[sprintf] huh?');
            }
            match[2] = field_list;
          }
          else {
            arg_names |= 2;
          }
          if (arg_names === 3) {
            throw('[sprintf] mixing positional and named placeholders is not (yet) supported');
          }
          parse_tree.push(match);
        }
        else {
          throw('[sprintf] huh?');
        }
        _fmt = _fmt.substring(match[0].length);
      }
      return parse_tree;
    };

    return str_format;
  })();

  var vsprintf = function(fmt, argv) {
    argv.unshift(fmt);
    return sprintf.apply(null, argv);
  };

  Jed.parse_plural = function ( plural_forms, n ) {
    plural_forms = plural_forms.replace(/n/g, n);
    return Jed.parse_expression(plural_forms);
  };

  Jed.sprintf = function ( fmt, args ) {
    if ( {}.toString.call( args ) == '[object Array]' ) {
      return vsprintf( fmt, [].slice.call(args) );
    }
    return sprintf.apply(this, [].slice.call(arguments) );
  };

  Jed.prototype.sprintf = function () {
    return Jed.sprintf.apply(this, arguments);
  };
  // END sprintf Implementation

  // Start the Plural forms section
  // This is a full plural form expression parser. It is used to avoid
  // running 'eval' or 'new Function' directly against the plural
  // forms.
  //
  // This can be important if you get translations done through a 3rd
  // party vendor. I encourage you to use this instead, however, I
  // also will provide a 'precompiler' that you can use at build time
  // to output valid/safe function representations of the plural form
  // expressions. This means you can build this code out for the most
  // part.
  Jed.PF = {};

  Jed.PF.parse = function ( p ) {
    var plural_str = Jed.PF.extractPluralExpr( p );
    return Jed.PF.parser.parse.call(Jed.PF.parser, plural_str);
  };

  Jed.PF.compile = function ( p ) {
    // Handle trues and falses as 0 and 1
    function imply( val ) {
      return (val === true ? 1 : val ? val : 0);
    }

    var ast = Jed.PF.parse( p );
    return function ( n ) {
      return imply( Jed.PF.interpreter( ast )( n ) );
    };
  };

  Jed.PF.interpreter = function ( ast ) {
    return function ( n ) {
      var res;
      switch ( ast.type ) {
        case 'GROUP':
          return Jed.PF.interpreter( ast.expr )( n );
        case 'TERNARY':
          if ( Jed.PF.interpreter( ast.expr )( n ) ) {
            return Jed.PF.interpreter( ast.truthy )( n );
          }
          return Jed.PF.interpreter( ast.falsey )( n );
        case 'OR':
          return Jed.PF.interpreter( ast.left )( n ) || Jed.PF.interpreter( ast.right )( n );
        case 'AND':
          return Jed.PF.interpreter( ast.left )( n ) && Jed.PF.interpreter( ast.right )( n );
        case 'LT':
          return Jed.PF.interpreter( ast.left )( n ) < Jed.PF.interpreter( ast.right )( n );
        case 'GT':
          return Jed.PF.interpreter( ast.left )( n ) > Jed.PF.interpreter( ast.right )( n );
        case 'LTE':
          return Jed.PF.interpreter( ast.left )( n ) <= Jed.PF.interpreter( ast.right )( n );
        case 'GTE':
          return Jed.PF.interpreter( ast.left )( n ) >= Jed.PF.interpreter( ast.right )( n );
        case 'EQ':
          return Jed.PF.interpreter( ast.left )( n ) == Jed.PF.interpreter( ast.right )( n );
        case 'NEQ':
          return Jed.PF.interpreter( ast.left )( n ) != Jed.PF.interpreter( ast.right )( n );
        case 'MOD':
          return Jed.PF.interpreter( ast.left )( n ) % Jed.PF.interpreter( ast.right )( n );
        case 'VAR':
          return n;
        case 'NUM':
          return ast.val;
        default:
          throw new Error("Invalid Token found.");
      }
    };
  };

  Jed.PF.extractPluralExpr = function ( p ) {
    // trim first
    p = p.replace(/^\s\s*/, '').replace(/\s\s*$/, '');

    if (! /;\s*$/.test(p)) {
      p = p.concat(';');
    }

    var nplurals_re = /nplurals\=(\d+);/,
        plural_re = /plural\=(.*);/,
        nplurals_matches = p.match( nplurals_re ),
        res = {},
        plural_matches;

    // Find the nplurals number
    if ( nplurals_matches.length > 1 ) {
      res.nplurals = nplurals_matches[1];
    }
    else {
      throw new Error('nplurals not found in plural_forms string: ' + p );
    }

    // remove that data to get to the formula
    p = p.replace( nplurals_re, "" );
    plural_matches = p.match( plural_re );

    if (!( plural_matches && plural_matches.length > 1 ) ) {
      throw new Error('`plural` expression not found: ' + p);
    }
    return plural_matches[ 1 ];
  };

  /* Jison generated parser */
  Jed.PF.parser = (function(){

var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"e":4,"EOF":5,"?":6,":":7,"||":8,"&&":9,"<":10,"<=":11,">":12,">=":13,"!=":14,"==":15,"%":16,"(":17,")":18,"n":19,"NUMBER":20,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"?",7:":",8:"||",9:"&&",10:"<",11:"<=",12:">",13:">=",14:"!=",15:"==",16:"%",17:"(",18:")",19:"n",20:"NUMBER"},
productions_: [0,[3,2],[4,5],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,1],[4,1]],
performAction: function anonymous(yytext,yyleng,yylineno,yy,yystate,$$,_$) {

var $0 = $$.length - 1;
switch (yystate) {
case 1: return { type : 'GROUP', expr: $$[$0-1] };
break;
case 2:this.$ = { type: 'TERNARY', expr: $$[$0-4], truthy : $$[$0-2], falsey: $$[$0] };
break;
case 3:this.$ = { type: "OR", left: $$[$0-2], right: $$[$0] };
break;
case 4:this.$ = { type: "AND", left: $$[$0-2], right: $$[$0] };
break;
case 5:this.$ = { type: 'LT', left: $$[$0-2], right: $$[$0] };
break;
case 6:this.$ = { type: 'LTE', left: $$[$0-2], right: $$[$0] };
break;
case 7:this.$ = { type: 'GT', left: $$[$0-2], right: $$[$0] };
break;
case 8:this.$ = { type: 'GTE', left: $$[$0-2], right: $$[$0] };
break;
case 9:this.$ = { type: 'NEQ', left: $$[$0-2], right: $$[$0] };
break;
case 10:this.$ = { type: 'EQ', left: $$[$0-2], right: $$[$0] };
break;
case 11:this.$ = { type: 'MOD', left: $$[$0-2], right: $$[$0] };
break;
case 12:this.$ = { type: 'GROUP', expr: $$[$0-1] };
break;
case 13:this.$ = { type: 'VAR' };
break;
case 14:this.$ = { type: 'NUM', val: Number(yytext) };
break;
}
},
table: [{3:1,4:2,17:[1,3],19:[1,4],20:[1,5]},{1:[3]},{5:[1,6],6:[1,7],8:[1,8],9:[1,9],10:[1,10],11:[1,11],12:[1,12],13:[1,13],14:[1,14],15:[1,15],16:[1,16]},{4:17,17:[1,3],19:[1,4],20:[1,5]},{5:[2,13],6:[2,13],7:[2,13],8:[2,13],9:[2,13],10:[2,13],11:[2,13],12:[2,13],13:[2,13],14:[2,13],15:[2,13],16:[2,13],18:[2,13]},{5:[2,14],6:[2,14],7:[2,14],8:[2,14],9:[2,14],10:[2,14],11:[2,14],12:[2,14],13:[2,14],14:[2,14],15:[2,14],16:[2,14],18:[2,14]},{1:[2,1]},{4:18,17:[1,3],19:[1,4],20:[1,5]},{4:19,17:[1,3],19:[1,4],20:[1,5]},{4:20,17:[1,3],19:[1,4],20:[1,5]},{4:21,17:[1,3],19:[1,4],20:[1,5]},{4:22,17:[1,3],19:[1,4],20:[1,5]},{4:23,17:[1,3],19:[1,4],20:[1,5]},{4:24,17:[1,3],19:[1,4],20:[1,5]},{4:25,17:[1,3],19:[1,4],20:[1,5]},{4:26,17:[1,3],19:[1,4],20:[1,5]},{4:27,17:[1,3],19:[1,4],20:[1,5]},{6:[1,7],8:[1,8],9:[1,9],10:[1,10],11:[1,11],12:[1,12],13:[1,13],14:[1,14],15:[1,15],16:[1,16],18:[1,28]},{6:[1,7],7:[1,29],8:[1,8],9:[1,9],10:[1,10],11:[1,11],12:[1,12],13:[1,13],14:[1,14],15:[1,15],16:[1,16]},{5:[2,3],6:[2,3],7:[2,3],8:[2,3],9:[1,9],10:[1,10],11:[1,11],12:[1,12],13:[1,13],14:[1,14],15:[1,15],16:[1,16],18:[2,3]},{5:[2,4],6:[2,4],7:[2,4],8:[2,4],9:[2,4],10:[1,10],11:[1,11],12:[1,12],13:[1,13],14:[1,14],15:[1,15],16:[1,16],18:[2,4]},{5:[2,5],6:[2,5],7:[2,5],8:[2,5],9:[2,5],10:[2,5],11:[2,5],12:[2,5],13:[2,5],14:[2,5],15:[2,5],16:[1,16],18:[2,5]},{5:[2,6],6:[2,6],7:[2,6],8:[2,6],9:[2,6],10:[2,6],11:[2,6],12:[2,6],13:[2,6],14:[2,6],15:[2,6],16:[1,16],18:[2,6]},{5:[2,7],6:[2,7],7:[2,7],8:[2,7],9:[2,7],10:[2,7],11:[2,7],12:[2,7],13:[2,7],14:[2,7],15:[2,7],16:[1,16],18:[2,7]},{5:[2,8],6:[2,8],7:[2,8],8:[2,8],9:[2,8],10:[2,8],11:[2,8],12:[2,8],13:[2,8],14:[2,8],15:[2,8],16:[1,16],18:[2,8]},{5:[2,9],6:[2,9],7:[2,9],8:[2,9],9:[2,9],10:[2,9],11:[2,9],12:[2,9],13:[2,9],14:[2,9],15:[2,9],16:[1,16],18:[2,9]},{5:[2,10],6:[2,10],7:[2,10],8:[2,10],9:[2,10],10:[2,10],11:[2,10],12:[2,10],13:[2,10],14:[2,10],15:[2,10],16:[1,16],18:[2,10]},{5:[2,11],6:[2,11],7:[2,11],8:[2,11],9:[2,11],10:[2,11],11:[2,11],12:[2,11],13:[2,11],14:[2,11],15:[2,11],16:[2,11],18:[2,11]},{5:[2,12],6:[2,12],7:[2,12],8:[2,12],9:[2,12],10:[2,12],11:[2,12],12:[2,12],13:[2,12],14:[2,12],15:[2,12],16:[2,12],18:[2,12]},{4:30,17:[1,3],19:[1,4],20:[1,5]},{5:[2,2],6:[1,7],7:[2,2],8:[1,8],9:[1,9],10:[1,10],11:[1,11],12:[1,12],13:[1,13],14:[1,14],15:[1,15],16:[1,16],18:[2,2]}],
defaultActions: {6:[2,1]},
parseError: function parseError(str, hash) {
    throw new Error(str);
},
parse: function parse(input) {
    var self = this,
        stack = [0],
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    //this.reductionCount = this.shiftCount = 0;

    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    if (typeof this.lexer.yylloc == 'undefined')
        this.lexer.yylloc = {};
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);

    if (typeof this.yy.parseError === 'function')
        this.parseError = this.yy.parseError;

    function popStack (n) {
        stack.length = stack.length - 2*n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

    function lex() {
        var token;
        token = self.lexer.lex() || 1; // $end = 1
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval={},p,len,newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length-1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol == null)
                symbol = lex();
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

        // handle parse error
        _handle_error:
        if (typeof action === 'undefined' || !action.length || !action[0]) {

            if (!recovering) {
                // Report error
                expected = [];
                for (p in table[state]) if (this.terminals_[p] && p > 2) {
                    expected.push("'"+this.terminals_[p]+"'");
                }
                var errStr = '';
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+this.lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + this.terminals_[symbol]+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == 1 /*EOF*/ ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr,
                    {text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected});
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol == EOF) {
                    throw new Error(errStr || 'Parsing halted.');
                }

                // discard current lookahead and grab another
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            while (1) {
                // check for error recovery rule in this state
                if ((TERROR.toString()) in table[state]) {
                    break;
                }
                if (state == 0) {
                    throw new Error(errStr || 'Parsing halted.');
                }
                popStack(1);
                state = stack[stack.length-1];
            }

            preErrorSymbol = symbol; // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {

            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(this.lexer.yytext);
                lstack.push(this.lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = this.lexer.yyleng;
                    yytext = this.lexer.yytext;
                    yylineno = this.lexer.yylineno;
                    yyloc = this.lexer.yylloc;
                    if (recovering > 0)
                        recovering--;
                } else { // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2: // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3: // accept
                return true;
        }

    }

    return true;
}};/* Jison generated lexer */
var lexer = (function(){

var lexer = ({EOF:1,
parseError:function parseError(str, hash) {
        if (this.yy.parseError) {
            this.yy.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },
setInput:function (input) {
        this._input = input;
        this._more = this._less = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {first_line:1,first_column:0,last_line:1,last_column:0};
        return this;
    },
input:function () {
        var ch = this._input[0];
        this.yytext+=ch;
        this.yyleng++;
        this.match+=ch;
        this.matched+=ch;
        var lines = ch.match(/\n/);
        if (lines) this.yylineno++;
        this._input = this._input.slice(1);
        return ch;
    },
unput:function (ch) {
        this._input = ch + this._input;
        return this;
    },
more:function () {
        this._more = true;
        return this;
    },
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20)+(next.length > 20 ? '...':'')).replace(/\n/g, "");
    },
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c+"^";
    },
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) this.done = true;

        var token,
            match,
            col,
            lines;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i=0;i < rules.length; i++) {
            match = this._input.match(this.rules[rules[i]]);
            if (match) {
                lines = match[0].match(/\n.*/g);
                if (lines) this.yylineno += lines.length;
                this.yylloc = {first_line: this.yylloc.last_line,
                               last_line: this.yylineno+1,
                               first_column: this.yylloc.last_column,
                               last_column: lines ? lines[lines.length-1].length-1 : this.yylloc.last_column + match[0].length}
                this.yytext += match[0];
                this.match += match[0];
                this.matches = match;
                this.yyleng = this.yytext.length;
                this._more = false;
                this._input = this._input.slice(match[0].length);
                this.matched += match[0];
                token = this.performAction.call(this, this.yy, this, rules[i],this.conditionStack[this.conditionStack.length-1]);
                if (token) return token;
                else return;
            }
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            this.parseError('Lexical error on line '+(this.yylineno+1)+'. Unrecognized text.\n'+this.showPosition(),
                    {text: "", token: null, line: this.yylineno});
        }
    },
lex:function lex() {
        var r = this.next();
        if (typeof r !== 'undefined') {
            return r;
        } else {
            return this.lex();
        }
    },
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },
popState:function popState() {
        return this.conditionStack.pop();
    },
_currentRules:function _currentRules() {
        return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules;
    },
topState:function () {
        return this.conditionStack[this.conditionStack.length-2];
    },
pushState:function begin(condition) {
        this.begin(condition);
    }});
lexer.performAction = function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 20
break;
case 2:return 19
break;
case 3:return 8
break;
case 4:return 9
break;
case 5:return 6
break;
case 6:return 7
break;
case 7:return 11
break;
case 8:return 13
break;
case 9:return 10
break;
case 10:return 12
break;
case 11:return 14
break;
case 12:return 15
break;
case 13:return 16
break;
case 14:return 17
break;
case 15:return 18
break;
case 16:return 5
break;
case 17:return 'INVALID'
break;
}
};
lexer.rules = [/^\s+/,/^[0-9]+(\.[0-9]+)?\b/,/^n\b/,/^\|\|/,/^&&/,/^\?/,/^:/,/^<=/,/^>=/,/^</,/^>/,/^!=/,/^==/,/^%/,/^\(/,/^\)/,/^$/,/^./];
lexer.conditions = {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17],"inclusive":true}};return lexer;})()
parser.lexer = lexer;
return parser;
})();
// End parser

  // Handle node, amd, and global systems
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = Jed;
    }
    exports.Jed = Jed;
  }
  else {
    if (typeof define === 'function' && define.amd) {
      define('jed', function() {
        return Jed;
      });
    }
    // Leak a global regardless of module system
    root['Jed'] = Jed;
  }

})(this);

},{}],316:[function(require,module,exports){
/**
 * Checks if `value` is `undefined`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
 * @example
 *
 * _.isUndefined(void 0);
 * // => true
 *
 * _.isUndefined(null);
 * // => false
 */
function isUndefined(value) {
  return value === undefined;
}

module.exports = isUndefined;

},{}],317:[function(require,module,exports){
(function (global){
/*! https://mths.be/punycode v1.4.1 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports = typeof exports == 'object' && exports &&
		!exports.nodeType && exports;
	var freeModule = typeof module == 'object' && module &&
		!module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw new RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.4.1',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		typeof define == 'function' &&
		typeof define.amd == 'object' &&
		define.amd
	) {
		define('punycode', function() {
			return punycode;
		});
	} else if (freeExports && freeModule) {
		if (module.exports == freeExports) {
			// in Node.js, io.js, or RingoJS v0.8.0+
			freeModule.exports = punycode;
		} else {
			// in Narwhal or RingoJS v0.7.0-
			for (key in punycode) {
				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
			}
		}
	} else {
		// in Rhino or a web browser
		root.punycode = punycode;
	}

}(this));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],318:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

},{}],319:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};

},{}],320:[function(require,module,exports){
'use strict';

exports.decode = exports.parse = require('./decode');
exports.encode = exports.stringify = require('./encode');

},{"./decode":318,"./encode":319}],321:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var punycode = require('punycode');
var util = require('./util');

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // Special case for a simple path URL
    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    querystring = require('querystring');

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && util.isObject(url) && url instanceof Url) return url;

  var u = new Url;
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916
  var queryIndex = url.indexOf('?'),
      splitter =
          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }
      return this;
    }
  }

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1)
      hostEnd = rest.length;

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' &&
        this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1)
        continue;
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }


  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) this.pathname = rest;
  if (slashedProtocol[lowerProto] &&
      this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  //to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (util.isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function() {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ?
        this.hostname :
        '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query &&
      util.isObject(this.query) &&
      Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || (query && ('?' + query)) || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (this.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function(match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function(relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function(relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);
  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  }

  // hash is always overridden, no matter what.
  // even href="" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);
    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol')
        result[rkey] = relative[rkey];
    }

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);
      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;
      else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = (relative.host || relative.host === '') ?
                  relative.host : result.host;
    result.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ?
                       result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (result.host || relative.host || srcPath.length > 1) &&
      (last === '.' || last === '..') || last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = result.host && result.host.indexOf('@') > 0 ?
                     result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') +
                  (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function() {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) this.hostname = host;
};

},{"./util":322,"punycode":317,"querystring":320}],322:[function(require,module,exports){
'use strict';

module.exports = {
  isString: function(arg) {
    return typeof(arg) === 'string';
  },
  isObject: function(arg) {
    return typeof(arg) === 'object' && arg !== null;
  },
  isNull: function(arg) {
    return arg === null;
  },
  isNullOrUndefined: function(arg) {
    return arg == null;
  }
};

},{}],323:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],324:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./support/isBuffer":323,"_process":313,"inherits":314}]},{},[312])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIuLi9Zb2FzdFNFTy9qcy9TRU9Bc3Nlc3Nvci5qcyIsIi4uL1lvYXN0U0VPL2pzL2Fzc2Vzc21lbnRzL2ludHJvZHVjdGlvbktleXdvcmRBc3Nlc3NtZW50LmpzIiwiLi4vWW9hc3RTRU8vanMvYXNzZXNzbWVudHMva2V5cGhyYXNlTGVuZ3RoQXNzZXNzbWVudC5qcyIsIi4uL1lvYXN0U0VPL2pzL2Fzc2Vzc21lbnRzL2tleXdvcmREZW5zaXR5QXNzZXNzbWVudC5qcyIsIi4uL1lvYXN0U0VPL2pzL2Fzc2Vzc21lbnRzL2tleXdvcmRTdG9wV29yZHNBc3Nlc3NtZW50LmpzIiwiLi4vWW9hc3RTRU8vanMvYXNzZXNzbWVudHMvbWV0YURlc2NyaXB0aW9uS2V5d29yZEFzc2Vzc21lbnQuanMiLCIuLi9Zb2FzdFNFTy9qcy9hc3Nlc3NtZW50cy9tZXRhRGVzY3JpcHRpb25MZW5ndGhBc3Nlc3NtZW50LmpzIiwiLi4vWW9hc3RTRU8vanMvYXNzZXNzbWVudHMvcGFnZVRpdGxlV2lkdGhBc3Nlc3NtZW50LmpzIiwiLi4vWW9hc3RTRU8vanMvYXNzZXNzbWVudHMvc3ViaGVhZGluZ3NLZXl3b3JkQXNzZXNzbWVudC5qcyIsIi4uL1lvYXN0U0VPL2pzL2Fzc2Vzc21lbnRzL3RheG9ub215VGV4dExlbmd0aEFzc2Vzc21lbnQuanMiLCIuLi9Zb2FzdFNFTy9qcy9hc3Nlc3NtZW50cy90ZXh0Q29tcGV0aW5nTGlua3NBc3Nlc3NtZW50LmpzIiwiLi4vWW9hc3RTRU8vanMvYXNzZXNzbWVudHMvdGV4dEltYWdlc0Fzc2Vzc21lbnQuanMiLCIuLi9Zb2FzdFNFTy9qcy9hc3Nlc3NtZW50cy90ZXh0TGVuZ3RoQXNzZXNzbWVudC5qcyIsIi4uL1lvYXN0U0VPL2pzL2Fzc2Vzc21lbnRzL3RleHRMaW5rc0Fzc2Vzc21lbnQuanMiLCIuLi9Zb2FzdFNFTy9qcy9hc3Nlc3NtZW50cy90aXRsZUtleXdvcmRBc3Nlc3NtZW50LmpzIiwiLi4vWW9hc3RTRU8vanMvYXNzZXNzbWVudHMvdXJsS2V5d29yZEFzc2Vzc21lbnQuanMiLCIuLi9Zb2FzdFNFTy9qcy9hc3Nlc3NtZW50cy91cmxMZW5ndGhBc3Nlc3NtZW50LmpzIiwiLi4vWW9hc3RTRU8vanMvYXNzZXNzbWVudHMvdXJsU3RvcFdvcmRzQXNzZXNzbWVudC5qcyIsIi4uL1lvYXN0U0VPL2pzL2Fzc2Vzc29yLmpzIiwiLi4vWW9hc3RTRU8vanMvY29uZmlnL2RpYWNyaXRpY3MuanMiLCIuLi9Zb2FzdFNFTy9qcy9jb25maWcvcmVtb3ZhbFdvcmRzLmpzIiwiLi4vWW9hc3RTRU8vanMvY29uZmlnL3N0b3B3b3Jkcy5qcyIsIi4uL1lvYXN0U0VPL2pzL2NvbmZpZy9zeWxsYWJsZXMuanMiLCIuLi9Zb2FzdFNFTy9qcy9jb25maWcvc3lsbGFibGVzL2RlLmpzb24iLCIuLi9Zb2FzdFNFTy9qcy9jb25maWcvc3lsbGFibGVzL2VuLmpzb24iLCIuLi9Zb2FzdFNFTy9qcy9jb25maWcvc3lsbGFibGVzL25sLmpzb24iLCIuLi9Zb2FzdFNFTy9qcy9jb25maWcvdHJhbnNsaXRlcmF0aW9ucy5qcyIsIi4uL1lvYXN0U0VPL2pzL2NvbmZpZy93b3JkQm91bmRhcmllcy5qcyIsIi4uL1lvYXN0U0VPL2pzL2Vycm9ycy9pbnZhbGlkVHlwZS5qcyIsIi4uL1lvYXN0U0VPL2pzL2Vycm9ycy9taXNzaW5nQXJndW1lbnQuanMiLCIuLi9Zb2FzdFNFTy9qcy9oZWxwZXJzL2Vycm9ycy5qcyIsIi4uL1lvYXN0U0VPL2pzL2hlbHBlcnMvZm9ybWF0TnVtYmVyLmpzIiwiLi4vWW9hc3RTRU8vanMvaGVscGVycy9nZXRGaXJzdFdvcmRFeGNlcHRpb25zLmpzIiwiLi4vWW9hc3RTRU8vanMvaGVscGVycy9nZXRMYW5ndWFnZS5qcyIsIi4uL1lvYXN0U0VPL2pzL2hlbHBlcnMvZ2V0VHJhbnNpdGlvbldvcmRzLmpzIiwiLi4vWW9hc3RTRU8vanMvaGVscGVycy9odG1sLmpzIiwiLi4vWW9hc3RTRU8vanMvaGVscGVycy9pblJhbmdlLmpzIiwiLi4vWW9hc3RTRU8vanMvaGVscGVycy9zeWxsYWJsZUNvdW50SXRlcmF0b3IuanMiLCIuLi9Zb2FzdFNFTy9qcy9oZWxwZXJzL3N5bGxhYmxlQ291bnRTdGVwLmpzIiwiLi4vWW9hc3RTRU8vanMvbWFya2Vycy9hZGRNYXJrLmpzIiwiLi4vWW9hc3RTRU8vanMvbWFya2Vycy9yZW1vdmVEdXBsaWNhdGVNYXJrcy5qcyIsIi4uL1lvYXN0U0VPL2pzL3Jlc2VhcmNoZXIuanMiLCIuLi9Zb2FzdFNFTy9qcy9yZXNlYXJjaGVzL2NhbGN1bGF0ZUZsZXNjaFJlYWRpbmcuanMiLCIuLi9Zb2FzdFNFTy9qcy9yZXNlYXJjaGVzL2NvdW50TGlua3MuanMiLCIuLi9Zb2FzdFNFTy9qcy9yZXNlYXJjaGVzL2NvdW50U2VudGVuY2VzRnJvbURlc2NyaXB0aW9uLmpzIiwiLi4vWW9hc3RTRU8vanMvcmVzZWFyY2hlcy9jb3VudFNlbnRlbmNlc0Zyb21UZXh0LmpzIiwiLi4vWW9hc3RTRU8vanMvcmVzZWFyY2hlcy9lbmdsaXNoL2ZpcnN0V29yZEV4Y2VwdGlvbnMuanMiLCIuLi9Zb2FzdFNFTy9qcy9yZXNlYXJjaGVzL2VuZ2xpc2gvcGFzc2l2ZXZvaWNlLWVuZ2xpc2gvYXV4aWxpYXJpZXMuanMiLCIuLi9Zb2FzdFNFTy9qcy9yZXNlYXJjaGVzL2VuZ2xpc2gvcGFzc2l2ZXZvaWNlLWVuZ2xpc2gvZGV0ZXJtaW5lcnMuanMiLCIuLi9Zb2FzdFNFTy9qcy9yZXNlYXJjaGVzL2VuZ2xpc2gvcGFzc2l2ZXZvaWNlLWVuZ2xpc2gvaXJyZWd1bGFycy5qcyIsIi4uL1lvYXN0U0VPL2pzL3Jlc2VhcmNoZXMvZW5nbGlzaC9wYXNzaXZldm9pY2UtZW5nbGlzaC9ub24tdmVyYi1lbmRpbmctZWQuanMiLCIuLi9Zb2FzdFNFTy9qcy9yZXNlYXJjaGVzL2VuZ2xpc2gvcGFzc2l2ZXZvaWNlLWVuZ2xpc2gvc3RvcHdvcmRzLmpzIiwiLi4vWW9hc3RTRU8vanMvcmVzZWFyY2hlcy9lbmdsaXNoL3RyYW5zaXRpb25Xb3Jkcy5qcyIsIi4uL1lvYXN0U0VPL2pzL3Jlc2VhcmNoZXMvZW5nbGlzaC90d29QYXJ0VHJhbnNpdGlvbldvcmRzLmpzIiwiLi4vWW9hc3RTRU8vanMvcmVzZWFyY2hlcy9maW5kS2V5d29yZEluRmlyc3RQYXJhZ3JhcGguanMiLCIuLi9Zb2FzdFNFTy9qcy9yZXNlYXJjaGVzL2ZpbmRLZXl3b3JkSW5QYWdlVGl0bGUuanMiLCIuLi9Zb2FzdFNFTy9qcy9yZXNlYXJjaGVzL2ZpbmRUcmFuc2l0aW9uV29yZHMuanMiLCIuLi9Zb2FzdFNFTy9qcy9yZXNlYXJjaGVzL2ZyZW5jaC9maXJzdFdvcmRFeGNlcHRpb25zLmpzIiwiLi4vWW9hc3RTRU8vanMvcmVzZWFyY2hlcy9mcmVuY2gvdHJhbnNpdGlvbldvcmRzLmpzIiwiLi4vWW9hc3RTRU8vanMvcmVzZWFyY2hlcy9mcmVuY2gvdHdvUGFydFRyYW5zaXRpb25Xb3Jkcy5qcyIsIi4uL1lvYXN0U0VPL2pzL3Jlc2VhcmNoZXMvZ2VybWFuL2ZpcnN0V29yZEV4Y2VwdGlvbnMuanMiLCIuLi9Zb2FzdFNFTy9qcy9yZXNlYXJjaGVzL2dlcm1hbi90cmFuc2l0aW9uV29yZHMuanMiLCIuLi9Zb2FzdFNFTy9qcy9yZXNlYXJjaGVzL2dlcm1hbi90d29QYXJ0VHJhbnNpdGlvbldvcmRzLmpzIiwiLi4vWW9hc3RTRU8vanMvcmVzZWFyY2hlcy9nZXRLZXl3b3JkRGVuc2l0eS5qcyIsIi4uL1lvYXN0U0VPL2pzL3Jlc2VhcmNoZXMvZ2V0TGlua1N0YXRpc3RpY3MuanMiLCIuLi9Zb2FzdFNFTy9qcy9yZXNlYXJjaGVzL2dldExpbmtzLmpzIiwiLi4vWW9hc3RTRU8vanMvcmVzZWFyY2hlcy9nZXRQYXJhZ3JhcGhMZW5ndGguanMiLCIuLi9Zb2FzdFNFTy9qcy9yZXNlYXJjaGVzL2dldFBhc3NpdmVWb2ljZS5qcyIsIi4uL1lvYXN0U0VPL2pzL3Jlc2VhcmNoZXMvZ2V0U2VudGVuY2VCZWdpbm5pbmdzLmpzIiwiLi4vWW9hc3RTRU8vanMvcmVzZWFyY2hlcy9nZXRTdWJoZWFkaW5nTGVuZ3RoLmpzIiwiLi4vWW9hc3RTRU8vanMvcmVzZWFyY2hlcy9nZXRTdWJoZWFkaW5nUHJlc2VuY2UuanMiLCIuLi9Zb2FzdFNFTy9qcy9yZXNlYXJjaGVzL2dldFN1YmhlYWRpbmdUZXh0TGVuZ3Rocy5qcyIsIi4uL1lvYXN0U0VPL2pzL3Jlc2VhcmNoZXMvZ2V0V29yZENvbXBsZXhpdHkuanMiLCIuLi9Zb2FzdFNFTy9qcy9yZXNlYXJjaGVzL2ltYWdlQWx0VGFncy5qcyIsIi4uL1lvYXN0U0VPL2pzL3Jlc2VhcmNoZXMvaW1hZ2VDb3VudEluVGV4dC5qcyIsIi4uL1lvYXN0U0VPL2pzL3Jlc2VhcmNoZXMva2V5cGhyYXNlTGVuZ3RoLmpzIiwiLi4vWW9hc3RTRU8vanMvcmVzZWFyY2hlcy9rZXl3b3JkQ291bnRJblVybC5qcyIsIi4uL1lvYXN0U0VPL2pzL3Jlc2VhcmNoZXMvbWF0Y2hLZXl3b3JkSW5TdWJoZWFkaW5ncy5qcyIsIi4uL1lvYXN0U0VPL2pzL3Jlc2VhcmNoZXMvbWV0YURlc2NyaXB0aW9uS2V5d29yZC5qcyIsIi4uL1lvYXN0U0VPL2pzL3Jlc2VhcmNoZXMvbWV0YURlc2NyaXB0aW9uTGVuZ3RoLmpzIiwiLi4vWW9hc3RTRU8vanMvcmVzZWFyY2hlcy9wYWdlVGl0bGVXaWR0aC5qcyIsIi4uL1lvYXN0U0VPL2pzL3Jlc2VhcmNoZXMvc3BhbmlzaC9maXJzdFdvcmRFeGNlcHRpb25zLmpzIiwiLi4vWW9hc3RTRU8vanMvcmVzZWFyY2hlcy9zcGFuaXNoL3RyYW5zaXRpb25Xb3Jkcy5qcyIsIi4uL1lvYXN0U0VPL2pzL3Jlc2VhcmNoZXMvc3BhbmlzaC90d29QYXJ0VHJhbnNpdGlvbldvcmRzLmpzIiwiLi4vWW9hc3RTRU8vanMvcmVzZWFyY2hlcy9zdG9wV29yZHNJbktleXdvcmQuanMiLCIuLi9Zb2FzdFNFTy9qcy9yZXNlYXJjaGVzL3N0b3BXb3Jkc0luVGV4dC5qcyIsIi4uL1lvYXN0U0VPL2pzL3Jlc2VhcmNoZXMvc3RvcFdvcmRzSW5VcmwuanMiLCIuLi9Zb2FzdFNFTy9qcy9yZXNlYXJjaGVzL3VybElzVG9vTG9uZy5qcyIsIi4uL1lvYXN0U0VPL2pzL3Jlc2VhcmNoZXMvd29yZENvdW50SW5UZXh0LmpzIiwiLi4vWW9hc3RTRU8vanMvc3RyaW5nUHJvY2Vzc2luZy9hZGRXb3JkYm91bmRhcnkuanMiLCIuLi9Zb2FzdFNFTy9qcy9zdHJpbmdQcm9jZXNzaW5nL2NoZWNrTm9mb2xsb3cuanMiLCIuLi9Zb2FzdFNFTy9qcy9zdHJpbmdQcm9jZXNzaW5nL2NvdW50U2VudGVuY2VzLmpzIiwiLi4vWW9hc3RTRU8vanMvc3RyaW5nUHJvY2Vzc2luZy9jb3VudFdvcmRPY2N1cnJlbmNlcy5qcyIsIi4uL1lvYXN0U0VPL2pzL3N0cmluZ1Byb2Nlc3NpbmcvY291bnRXb3Jkcy5qcyIsIi4uL1lvYXN0U0VPL2pzL3N0cmluZ1Byb2Nlc3NpbmcvY3JlYXRlUmVnZXhGcm9tQXJyYXkuanMiLCIuLi9Zb2FzdFNFTy9qcy9zdHJpbmdQcm9jZXNzaW5nL2NyZWF0ZVJlZ2V4RnJvbURvdWJsZUFycmF5LmpzIiwiLi4vWW9hc3RTRU8vanMvc3RyaW5nUHJvY2Vzc2luZy9maW5kS2V5d29yZEluVXJsLmpzIiwiLi4vWW9hc3RTRU8vanMvc3RyaW5nUHJvY2Vzc2luZy9nZXRBbHR0YWdDb250ZW50LmpzIiwiLi4vWW9hc3RTRU8vanMvc3RyaW5nUHJvY2Vzc2luZy9nZXRBbmNob3JzRnJvbVRleHQuanMiLCIuLi9Zb2FzdFNFTy9qcy9zdHJpbmdQcm9jZXNzaW5nL2dldExpbmtUeXBlLmpzIiwiLi4vWW9hc3RTRU8vanMvc3RyaW5nUHJvY2Vzc2luZy9nZXRTZW50ZW5jZXMuanMiLCIuLi9Zb2FzdFNFTy9qcy9zdHJpbmdQcm9jZXNzaW5nL2dldFN1YmhlYWRpbmdUZXh0cy5qcyIsIi4uL1lvYXN0U0VPL2pzL3N0cmluZ1Byb2Nlc3NpbmcvZ2V0U3ViaGVhZGluZ3MuanMiLCIuLi9Zb2FzdFNFTy9qcy9zdHJpbmdQcm9jZXNzaW5nL2dldFdvcmRzLmpzIiwiLi4vWW9hc3RTRU8vanMvc3RyaW5nUHJvY2Vzc2luZy9pbWFnZUluVGV4dC5qcyIsIi4uL1lvYXN0U0VPL2pzL3N0cmluZ1Byb2Nlc3NpbmcvbWF0Y2hQYXJhZ3JhcGhzLmpzIiwiLi4vWW9hc3RTRU8vanMvc3RyaW5nUHJvY2Vzc2luZy9tYXRjaFN0cmluZ1dpdGhSZWdleC5qcyIsIi4uL1lvYXN0U0VPL2pzL3N0cmluZ1Byb2Nlc3NpbmcvbWF0Y2hUZXh0V2l0aFRyYW5zbGl0ZXJhdGlvbi5qcyIsIi4uL1lvYXN0U0VPL2pzL3N0cmluZ1Byb2Nlc3NpbmcvbWF0Y2hUZXh0V2l0aFdvcmQuanMiLCIuLi9Zb2FzdFNFTy9qcy9zdHJpbmdQcm9jZXNzaW5nL21hdGNoV29yZEluU2VudGVuY2UuanMiLCIuLi9Zb2FzdFNFTy9qcy9zdHJpbmdQcm9jZXNzaW5nL3F1b3Rlcy5qcyIsIi4uL1lvYXN0U0VPL2pzL3N0cmluZ1Byb2Nlc3NpbmcvcmVtb3ZlVGVybWluYXRvcnMuanMiLCIuLi9Zb2FzdFNFTy9qcy9zdHJpbmdQcm9jZXNzaW5nL3JlcGxhY2VEaWFjcml0aWNzLmpzIiwiLi4vWW9hc3RTRU8vanMvc3RyaW5nUHJvY2Vzc2luZy9yZXBsYWNlU3RyaW5nLmpzIiwiLi4vWW9hc3RTRU8vanMvc3RyaW5nUHJvY2Vzc2luZy9zYW5pdGl6ZVN0cmluZy5qcyIsIi4uL1lvYXN0U0VPL2pzL3N0cmluZ1Byb2Nlc3Npbmcvc2VudGVuY2VzTGVuZ3RoLmpzIiwiLi4vWW9hc3RTRU8vanMvc3RyaW5nUHJvY2Vzc2luZy9zdHJpbmdUb1JlZ2V4LmpzIiwiLi4vWW9hc3RTRU8vanMvc3RyaW5nUHJvY2Vzc2luZy9zdHJpcEhUTUxUYWdzLmpzIiwiLi4vWW9hc3RTRU8vanMvc3RyaW5nUHJvY2Vzc2luZy9zdHJpcE5vblRleHRUYWdzLmpzIiwiLi4vWW9hc3RTRU8vanMvc3RyaW5nUHJvY2Vzc2luZy9zdHJpcE51bWJlcnMuanMiLCIuLi9Zb2FzdFNFTy9qcy9zdHJpbmdQcm9jZXNzaW5nL3N0cmlwU3BhY2VzLmpzIiwiLi4vWW9hc3RTRU8vanMvc3RyaW5nUHJvY2Vzc2luZy9zdWJoZWFkaW5nc01hdGNoLmpzIiwiLi4vWW9hc3RTRU8vanMvc3RyaW5nUHJvY2Vzc2luZy9zeWxsYWJsZXMvRGV2aWF0aW9uRnJhZ21lbnQuanMiLCIuLi9Zb2FzdFNFTy9qcy9zdHJpbmdQcm9jZXNzaW5nL3N5bGxhYmxlcy9jb3VudC5qcyIsIi4uL1lvYXN0U0VPL2pzL3N0cmluZ1Byb2Nlc3NpbmcvdHJhbnNsaXRlcmF0ZS5qcyIsIi4uL1lvYXN0U0VPL2pzL3N0cmluZ1Byb2Nlc3NpbmcvdW5pZnlXaGl0ZXNwYWNlLmpzIiwiLi4vWW9hc3RTRU8vanMvc3RyaW5nUHJvY2Vzc2luZy91cmwuanMiLCIuLi9Zb2FzdFNFTy9qcy92YWx1ZXMvQXNzZXNzbWVudFJlc3VsdC5qcyIsIi4uL1lvYXN0U0VPL2pzL3ZhbHVlcy9NYXJrLmpzIiwiLi4vWW9hc3RTRU8vanMvdmFsdWVzL1BhcGVyLmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fSGFzaC5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvX01hcC5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvX01hcENhY2hlLmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fUmVmbGVjdC5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1NldC5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1NldENhY2hlLmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fU3RhY2suanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL19TeW1ib2wuanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL19VaW50OEFycmF5LmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fV2Vha01hcC5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FkZE1hcEVudHJ5LmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYWRkU2V0RW50cnkuanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL19hcHBseS5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5RWFjaC5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5RmlsdGVyLmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlJbmNsdWRlcy5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5SW5jbHVkZXNXaXRoLmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlNYXAuanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheVB1c2guanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheVJlZHVjZS5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5U29tZS5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Fzc2lnbkluRGVmYXVsdHMuanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL19hc3NpZ25NZXJnZVZhbHVlLmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXNzaWduVmFsdWUuanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL19hc3NvY0RlbGV0ZS5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Fzc29jR2V0LmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXNzb2NIYXMuanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL19hc3NvY0luZGV4T2YuanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL19hc3NvY1NldC5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VBc3NpZ24uanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlQ2FzdEZ1bmN0aW9uLmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUNhc3RQYXRoLmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUNsb25lLmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUNyZWF0ZS5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VFYWNoLmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUZpbHRlci5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VGaW5kLmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUZpbmRJbmRleC5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VGbGF0dGVuLmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUZvci5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VGb3JPd24uanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlR2V0LmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUhhcy5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VIYXNJbi5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJblJhbmdlLmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUluZGV4T2YuanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNFcXVhbC5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc0VxdWFsRGVlcC5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc01hdGNoLmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUl0ZXJhdGVlLmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUtleXMuanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlS2V5c0luLmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZU1hcC5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VNYXRjaGVzLmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZU1hdGNoZXNQcm9wZXJ0eS5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VNZXJnZS5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VNZXJnZURlZXAuanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlUGljay5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VQcm9wZXJ0eS5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VQcm9wZXJ0eURlZXAuanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlU2xpY2UuanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlU3VtLmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVRpbWVzLmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVRvUGFpcnMuanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlVW5pcS5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VWYWx1ZXMuanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL19jYWNoZUhhcy5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NhY2hlUHVzaC5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NoZWNrR2xvYmFsLmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2xvbmVBcnJheUJ1ZmZlci5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Nsb25lQnVmZmVyLmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2xvbmVNYXAuanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL19jbG9uZVJlZ0V4cC5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Nsb25lU2V0LmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2xvbmVTeW1ib2wuanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL19jbG9uZVR5cGVkQXJyYXkuanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL19jb3B5QXJyYXkuanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL19jb3B5T2JqZWN0LmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY29weU9iamVjdFdpdGguanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL19jb3B5U3ltYm9scy5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NyZWF0ZUFzc2lnbmVyLmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY3JlYXRlQmFzZUVhY2guanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL19jcmVhdGVCYXNlRm9yLmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY3JlYXRlU2V0LmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZXF1YWxBcnJheXMuanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL19lcXVhbEJ5VGFnLmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZXF1YWxPYmplY3RzLmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZXNjYXBlSHRtbENoYXIuanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRMZW5ndGguanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRNYXRjaERhdGEuanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXROYXRpdmUuanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRTeW1ib2xzLmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0VGFnLmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzUGF0aC5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hEZWxldGUuanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoR2V0LmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaEhhcy5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hTZXQuanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL19pbmRleEtleXMuanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL19pbmRleE9mTmFOLmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9faW5pdENsb25lQXJyYXkuanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL19pbml0Q2xvbmVCeVRhZy5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2luaXRDbG9uZU9iamVjdC5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzSG9zdE9iamVjdC5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzSW5kZXguanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL19pc0l0ZXJhdGVlQ2FsbC5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzS2V5LmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNLZXlhYmxlLmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNQcm90b3R5cGUuanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL19pc1N0cmljdENvbXBhcmFibGUuanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL19pdGVyYXRvclRvQXJyYXkuanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDbGVhci5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcERlbGV0ZS5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcEdldC5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcEhhcy5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcFNldC5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcFRvQXJyYXkuanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL19uYXRpdmVDcmVhdGUuanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL19wYXJlbnQuanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL19yb290LmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc2V0VG9BcnJheS5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrQ2xlYXIuanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL19zdGFja0RlbGV0ZS5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrR2V0LmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tIYXMuanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL19zdGFja1NldC5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0cmluZ1RvUGF0aC5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvYXNzaWduSW5XaXRoLmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9jb25zdGFudC5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvZGVmYXVsdHMuanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL2VxLmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9lc2NhcGUuanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL2ZpbHRlci5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvZmluZC5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvZmluZEluZGV4LmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9mbGF0TWFwLmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9mb3JFYWNoLmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9nZXQuanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL2hhc0luLmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9pZGVudGl0eS5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvaW5SYW5nZS5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvaW5jbHVkZXMuanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQXJndW1lbnRzLmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FycmF5LmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FycmF5TGlrZS5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcnJheUxpa2VPYmplY3QuanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQnVmZmVyLmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0VtcHR5LmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0Z1bmN0aW9uLmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0xlbmd0aC5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNOYU4uanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL2lzTmF0aXZlLmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc051bWJlci5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNPYmplY3QuanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0TGlrZS5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNQbGFpbk9iamVjdC5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNTdHJpbmcuanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL2lzU3ltYm9sLmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc1R5cGVkQXJyYXkuanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL2lzVW5kZWZpbmVkLmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9rZXlzLmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC9rZXlzSW4uanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL2xhc3QuanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL21hcC5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvbWVtb2l6ZS5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvbWVyZ2UuanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL25lZ2F0ZS5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvbm9vcC5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvcGljay5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvcHJvcGVydHkuanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL3Jlc3QuanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL3N1bS5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvdG9JbnRlZ2VyLmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL2xvZGFzaC90b051bWJlci5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvdG9QYWlycy5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvdG9QbGFpbk9iamVjdC5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvdG9TdHJpbmcuanMiLCIuLi9Zb2FzdFNFTy9ub2RlX21vZHVsZXMvbG9kYXNoL3VuaXFCeS5qcyIsIi4uL1lvYXN0U0VPL25vZGVfbW9kdWxlcy9sb2Rhc2gvdmFsdWVzLmpzIiwiLi4vWW9hc3RTRU8vbm9kZV9tb2R1bGVzL3Rva2VuaXplcjIvY29yZS5qcyIsImpzL3NyYy9hc3Nlc3NvcnMvdGF4b25vbXlBc3Nlc3Nvci5qcyIsImpzL3NyYy93cC1zZW8tcmVjYWxjdWxhdGUuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL2luaGVyaXRzL2luaGVyaXRzX2Jyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvamVkL2plZC5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvaXNVbmRlZmluZWQuanMiLCJub2RlX21vZHVsZXMvcHVueWNvZGUvcHVueWNvZGUuanMiLCJub2RlX21vZHVsZXMvcXVlcnlzdHJpbmctZXMzL2RlY29kZS5qcyIsIm5vZGVfbW9kdWxlcy9xdWVyeXN0cmluZy1lczMvZW5jb2RlLmpzIiwibm9kZV9tb2R1bGVzL3F1ZXJ5c3RyaW5nLWVzMy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy91cmwvdXJsLmpzIiwibm9kZV9tb2R1bGVzL3VybC91dGlsLmpzIiwibm9kZV9tb2R1bGVzL3V0aWwvc3VwcG9ydC9pc0J1ZmZlckJyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvdXRpbC91dGlsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2Y0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN1VBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcGpEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5OUZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25EQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JXQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeEdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDYkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqVkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDYkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25DQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkxBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaktBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbklBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDYkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeEVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25HQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ3pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25DQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25EQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0VBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUN6RUEsSUFBSSxXQUFXLFFBQVMseUJBQVQsQ0FBZjs7QUFFQSxJQUFJLHNCQUFzQixRQUFTLDBEQUFULENBQTFCO0FBQ0EsSUFBSSxrQkFBa0IsUUFBUyxzREFBVCxDQUF0QjtBQUNBLElBQUksaUJBQWlCLFFBQVMscURBQVQsQ0FBckI7QUFDQSxJQUFJLG1CQUFtQixRQUFTLHVEQUFULENBQXZCO0FBQ0EsSUFBSSx5QkFBeUIsUUFBUyw2REFBVCxDQUE3QjtBQUNBLElBQUksd0JBQXdCLFFBQVMsNERBQVQsQ0FBNUI7QUFDQSxJQUFJLGVBQWUsUUFBUyxtREFBVCxDQUFuQjtBQUNBLElBQUksYUFBYSxRQUFTLHFEQUFULENBQWpCO0FBQ0EsSUFBSSxhQUFhLFFBQVMsaURBQVQsQ0FBakI7QUFDQSxJQUFJLFlBQVksUUFBUyxnREFBVCxDQUFoQjtBQUNBLElBQUksZUFBZSxRQUFTLG1EQUFULENBQW5CO0FBQ0EsSUFBSSxxQkFBcUIsUUFBUyxzREFBVCxDQUF6Qjs7Ozs7Ozs7QUFRQSxJQUFJLG1CQUFtQixTQUFuQixnQkFBbUIsQ0FBVSxJQUFWLEVBQWlCO0FBQ3ZDLFVBQVMsSUFBVCxDQUFlLElBQWYsRUFBcUIsSUFBckI7O0FBRUEsTUFBSyxZQUFMLEdBQW9CLENBQ25CLG1CQURtQixFQUVuQixlQUZtQixFQUduQixjQUhtQixFQUluQixnQkFKbUIsRUFLbkIsc0JBTG1CLEVBTW5CLHFCQU5tQixFQU9uQixrQkFQbUIsRUFRbkIsWUFSbUIsRUFTbkIsVUFUbUIsRUFVbkIsVUFWbUIsRUFXbkIsU0FYbUIsRUFZbkIsWUFabUIsQ0FBcEI7QUFjQSxDQWpCRDs7QUFtQkEsT0FBTyxPQUFQLEdBQWlCLGdCQUFqQjs7QUFFQSxRQUFTLE1BQVQsRUFBa0IsUUFBbEIsQ0FBNEIsT0FBTyxPQUFuQyxFQUE0QyxRQUE1Qzs7Ozs7Ozs7O0FDdENBLElBQUksTUFBTSxRQUFTLEtBQVQsQ0FBVjtBQUNBLElBQUksUUFBUSxRQUFTLDBCQUFULENBQVo7QUFDQSxJQUFJLGNBQWMsUUFBUyx5QkFBVCxDQUFsQjtBQUNBLElBQUksbUJBQW1CLFFBQVMsOEJBQVQsQ0FBdkI7QUFDQSxJQUFJLGNBQWMsUUFBUyxvQkFBVCxDQUFsQjs7QUFFRSxXQUFVLENBQVYsRUFBYztBQUNmOztBQUVBLEtBQUksT0FBTyxJQUFJLEdBQUosQ0FBUztBQUNuQixVQUFRLGtCQURXO0FBRW5CLGVBQWE7QUFDWix1QkFBb0I7QUFDbkIsUUFBSTtBQURlO0FBRFI7QUFGTSxFQUFULENBQVg7Ozs7Ozs7QUFjQSxLQUFJLHdCQUF3QixTQUF4QixxQkFBd0IsQ0FBVSxXQUFWLEVBQXdCOztBQUVuRCxPQUFLLFdBQUwsR0FBbUIsV0FBbkI7QUFDQSxPQUFLLFVBQUwsR0FBbUIsS0FBbkI7O0FBRUEsT0FBSyxjQUFMOztBQUVBLElBQUcsb0JBQUgsRUFBMEIsSUFBMUIsQ0FBZ0MsV0FBaEM7O0FBRUEsU0FBUSxvQkFBUixFQUErQixXQUEvQixDQUE0QyxFQUFFLE9BQU8sQ0FBVCxFQUE1QztBQUNBLEVBVkQ7Ozs7O0FBZUEsdUJBQXNCLFNBQXRCLENBQWdDLGNBQWhDLEdBQWlELFlBQVc7QUFDM0QsTUFBSSxlQUFlLElBQUksV0FBSixDQUFpQixJQUFqQixDQUFuQjtBQUNBLE1BQUksbUJBQW1CLElBQUksZ0JBQUosQ0FBc0IsSUFBdEIsQ0FBdkI7O0FBRUEsT0FBSyxjQUFMLEdBQXNCO0FBQ3JCLFNBQU0sWUFEZTtBQUVyQixTQUFNO0FBRmUsR0FBdEI7QUFJQSxFQVJEOzs7Ozs7Ozs7O0FBa0JBLHVCQUFzQixTQUF0QixDQUFnQyxLQUFoQyxHQUF3QyxVQUFVLGNBQVYsRUFBMEIsVUFBMUIsRUFBc0MsUUFBdEMsRUFBZ0QsUUFBaEQsRUFBMkQ7QUFDbEcsTUFBSyxDQUFFLEtBQUssY0FBTCxDQUFvQixjQUFwQixDQUFvQyxVQUFwQyxDQUFQLEVBQTBEO0FBQ3pELFNBQU0sSUFBSSxLQUFKLENBQVcsMkJBQTJCLFVBQTNCLEdBQXdDLFNBQW5ELENBQU47QUFDQTs7QUFFRCxPQUFLLFVBQUwsR0FBc0IsVUFBdEI7QUFDQSxPQUFLLGNBQUwsR0FBc0IsY0FBdEI7QUFDQSxPQUFLLFFBQUwsR0FBc0IsUUFBdEI7QUFDQSxPQUFLLFVBQUwsR0FBc0IsUUFBdEI7O0FBRUEsT0FBSyxRQUFMLEdBQXNCLEtBQUssY0FBTCxDQUFxQixVQUFyQixDQUF0Qjs7QUFFQSxPQUFLLHFCQUFMLENBQTRCLENBQTVCO0FBQ0EsRUFiRDs7Ozs7OztBQW9CQSx1QkFBc0IsU0FBdEIsQ0FBZ0MsaUJBQWhDLEdBQW9ELFVBQVUsV0FBVixFQUF3QjtBQUMzRSxNQUFJLGdCQUFnQixPQUFRLGNBQVIsRUFBeUIsSUFBekIsRUFBcEI7QUFDQSxNQUFJLFlBQVksU0FBVSxhQUFWLEVBQXlCLEVBQXpCLElBQWdDLFdBQWhEO0FBQ0EsTUFBSSxZQUFZLGFBQWMsTUFBTSxLQUFLLFdBQXpCLENBQWhCOztBQUVBLFNBQVEsb0JBQVIsRUFBK0IsV0FBL0IsQ0FBNEMsT0FBNUMsRUFBcUQsU0FBckQ7O0FBRUEsT0FBSyxrQkFBTCxDQUF5QixTQUF6QjtBQUNBLEVBUkQ7Ozs7Ozs7QUFlQSx1QkFBc0IsU0FBdEIsQ0FBZ0Msa0JBQWhDLEdBQXFELFVBQVUsU0FBVixFQUFzQjtBQUMxRSxTQUFRLGNBQVIsRUFBeUIsSUFBekIsQ0FBK0IsU0FBL0I7QUFDQSxFQUZEOzs7Ozs7OztBQVVBLHVCQUFzQixTQUF0QixDQUFnQyxlQUFoQyxHQUFrRCxVQUFVLFdBQVYsRUFBdUIsS0FBdkIsRUFBK0I7QUFDaEYsTUFBSSxTQUFTLEVBQWI7QUFDQSxPQUFNLElBQUksSUFBSSxDQUFkLEVBQWlCLElBQUksV0FBckIsRUFBa0MsR0FBbEMsRUFBd0M7QUFDdkMsVUFBTyxJQUFQLENBQWEsS0FBSyxRQUFMLENBQWUsTUFBTyxDQUFQLENBQWYsQ0FBYjtBQUNBOztBQUVELFNBQU8sTUFBUDtBQUNBLEVBUEQ7Ozs7Ozs7O0FBZUEsdUJBQXNCLFNBQXRCLENBQWdDLFFBQWhDLEdBQTJDLFVBQVUsSUFBVixFQUFpQjtBQUMzRCxTQUFPO0FBQ04sWUFBUyxLQUFLLFNBQUwsQ0FBZ0IsSUFBaEIsQ0FESDtBQUVOLGFBQVksS0FBSyxRQUFQLEdBQW9CLEtBQUssUUFBekIsR0FBb0MsRUFGeEM7QUFHTixVQUFPLEtBQUssa0JBQUwsQ0FBeUIsSUFBekI7QUFIRCxHQUFQO0FBS0EsRUFORDs7Ozs7Ozs7QUFjQSx1QkFBc0IsU0FBdEIsQ0FBZ0MsU0FBaEMsR0FBNEMsVUFBVSxJQUFWLEVBQWlCO0FBQzVELE9BQUssY0FBTDs7QUFFQSxTQUFPLEtBQU0sS0FBSyxRQUFYLENBQVA7QUFDQSxFQUpEOzs7Ozs7O0FBV0EsdUJBQXNCLFNBQXRCLENBQWdDLGtCQUFoQyxHQUFxRCxVQUFVLElBQVYsRUFBaUI7QUFDckUsTUFBSSxZQUFZLElBQUksS0FBSixDQUFXLEtBQUssSUFBaEIsRUFBc0I7QUFDckMsWUFBUyxLQUFLLE9BRHVCO0FBRXJDLFFBQUssS0FBSyxHQUYyQjtBQUdyQyxXQUFRLGVBQWUsTUFIYztBQUlyQyxnQkFBYSxLQUFLLElBSm1CO0FBS3JDLFVBQU8sS0FBSztBQUx5QixHQUF0QixDQUFoQjs7QUFRQSxNQUFJLGVBQWUsS0FBSyxRQUF4Qjs7QUFFQSxlQUFhLE1BQWIsQ0FBcUIsU0FBckI7O0FBRUEsU0FBTyxhQUFhLHFCQUFiLEVBQVA7QUFDQSxFQWREOzs7Ozs7O0FBcUJBLHVCQUFzQixTQUF0QixDQUFnQyxhQUFoQyxHQUFnRCxVQUFVLFFBQVYsRUFBcUI7QUFDcEUsTUFBSyxhQUFhLEVBQWIsSUFBbUIsYUFBYSxJQUFyQyxFQUE0QztBQUMzQyxPQUFLLENBQUUsWUFBYSxTQUFTLFdBQXRCLENBQVAsRUFBNkM7QUFDNUMsUUFBSSxTQUFTLEtBQUssZUFBTCxDQUFzQixTQUFTLFdBQS9CLEVBQTRDLFNBQVMsS0FBckQsQ0FBYjs7QUFFQSxTQUFLLFVBQUwsQ0FBaUIsTUFBakI7O0FBRUEsU0FBSyxpQkFBTCxDQUF3QixTQUFTLFdBQWpDO0FBQ0E7O0FBRUQsT0FBSyxDQUFFLFlBQWEsU0FBUyxTQUF0QixDQUFQLEVBQTJDO0FBQzFDLFNBQUsscUJBQUwsQ0FBNEIsU0FBUyxTQUFyQztBQUNBLElBRkQsTUFHSztBQUNKLFNBQUssaUJBQUw7QUFDQTs7QUFFRCxVQUFPLElBQVA7QUFDQTs7QUFFRCxPQUFLLGlCQUFMO0FBQ0EsRUFyQkQ7Ozs7O0FBMEJBLHVCQUFzQixTQUF0QixDQUFnQyxpQkFBaEMsR0FBb0QsWUFBVzs7QUFFOUQsTUFBSyxLQUFLLFVBQUwsS0FBb0IsS0FBekIsRUFBaUM7QUFDaEMsUUFBSyxVQUFMO0FBQ0EsUUFBSyxVQUFMLEdBQWtCLEtBQWxCO0FBQ0E7QUFDRCxFQU5EOzs7Ozs7O0FBYUEsdUJBQXNCLFNBQXRCLENBQWdDLFVBQWhDLEdBQTZDLFVBQVUsTUFBVixFQUFtQjtBQUMvRCxTQUFPLElBQVAsQ0FDQyxPQURELEVBRUM7QUFDQyxXQUFRLG9CQURUO0FBRUMsVUFBTyxPQUFRLDBCQUFSLEVBQXFDLEdBQXJDLEVBRlI7QUFHQyxXQUFRLE1BSFQ7QUFJQyxTQUFNLEtBQUs7QUFKWixHQUZEO0FBU0EsRUFWRDs7Ozs7OztBQWlCQSx1QkFBc0IsU0FBdEIsQ0FBZ0MscUJBQWhDLEdBQXdELFVBQVUsWUFBVixFQUF5QjtBQUNoRixTQUFPLElBQVAsQ0FDQyxPQURELEVBRUM7QUFDQyxXQUFRLDBCQURUO0FBRUMsVUFBTyxPQUFRLDBCQUFSLEVBQXFDLEdBQXJDLEVBRlI7QUFHQyxVQUFPLFlBSFI7QUFJQyxTQUFNLEtBQUs7QUFKWixHQUZELEVBUUMsS0FBSyxhQUFMLENBQW1CLElBQW5CLENBQXlCLElBQXpCLENBUkQsRUFTQyxNQVREO0FBV0EsRUFaRDs7Ozs7OztBQW1CQSxVQUFTLGlCQUFULENBQTRCLFFBQTVCLEVBQXVDO0FBQ3RDLE1BQUksZUFBZSxTQUFVLFNBQVMsS0FBbkIsRUFBMEIsRUFBMUIsQ0FBbkI7QUFDQSxNQUFJLGVBQWUsU0FBVSxTQUFTLEtBQW5CLEVBQTBCLEVBQTFCLENBQW5COztBQUVBLE1BQUksbUJBQW1CLElBQUkscUJBQUosQ0FBMkIsZUFBZSxZQUExQyxDQUF2Qjs7QUFFQSxtQkFBaUIsS0FBakIsQ0FBd0IsWUFBeEIsRUFBc0MsTUFBdEMsRUFBOEMsU0FBOUMsRUFBeUQsWUFBVztBQUNuRSxvQkFBaUIsS0FBakIsQ0FBd0IsWUFBeEIsRUFBc0MsTUFBdEMsRUFBOEMsU0FBOUMsRUFBeUQsS0FBekQ7QUFDQSxHQUZEO0FBR0E7Ozs7O0FBS0QsVUFBUyxJQUFULEdBQWdCO0FBQ2YsTUFBSSxtQkFBbUIsT0FBUSx5QkFBUixDQUF2Qjs7QUFFQSxNQUFLLENBQUUsWUFBYSxnQkFBYixDQUFQLEVBQXlDO0FBQ3hDLG9CQUFpQixLQUFqQixDQUNDLFlBQVc7O0FBRVYsV0FBUSxjQUFSLEVBQXlCLElBQXpCLENBQStCLENBQS9COztBQUVBLE1BQUUsSUFBRixDQUNDLE9BREQsRUFFQztBQUNDLGFBQVEseUJBRFQ7QUFFQyxZQUFPLE9BQVEsMEJBQVIsRUFBcUMsR0FBckM7QUFGUixLQUZELEVBTUMsaUJBTkQsRUFPQyxNQVBEO0FBU0EsSUFkRjs7QUFpQkEsT0FBSyxpQkFBaUIsSUFBakIsQ0FBdUIsTUFBdkIsQ0FBTCxFQUF1QztBQUN0QyxxQkFBaUIsT0FBakIsQ0FBMEIsT0FBMUI7QUFDQTtBQUNEO0FBQ0Q7O0FBRUQsR0FBRyxJQUFIO0FBQ0EsQ0FqUkMsRUFpUkMsTUFqUkQsQ0FBRjs7O0FDVkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOS9CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUN0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDcmhCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1dEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJ2YXIgQXNzZXNzb3IgPSByZXF1aXJlKCBcIi4vYXNzZXNzb3IuanNcIiApO1xuXG52YXIgaW50cm9kdWN0aW9uS2V5d29yZCA9IHJlcXVpcmUoIFwiLi9hc3Nlc3NtZW50cy9pbnRyb2R1Y3Rpb25LZXl3b3JkQXNzZXNzbWVudC5qc1wiICk7XG52YXIga2V5cGhyYXNlTGVuZ3RoID0gcmVxdWlyZSggXCIuL2Fzc2Vzc21lbnRzL2tleXBocmFzZUxlbmd0aEFzc2Vzc21lbnQuanNcIiApO1xudmFyIGtleXdvcmREZW5zaXR5ID0gcmVxdWlyZSggXCIuL2Fzc2Vzc21lbnRzL2tleXdvcmREZW5zaXR5QXNzZXNzbWVudC5qc1wiICk7XG52YXIga2V5d29yZFN0b3BXb3JkcyA9IHJlcXVpcmUoIFwiLi9hc3Nlc3NtZW50cy9rZXl3b3JkU3RvcFdvcmRzQXNzZXNzbWVudC5qc1wiICk7XG52YXIgbWV0YURlc2NyaXB0aW9uS2V5d29yZCA9IHJlcXVpcmUoIFwiLi9hc3Nlc3NtZW50cy9tZXRhRGVzY3JpcHRpb25LZXl3b3JkQXNzZXNzbWVudC5qc1wiICk7XG52YXIgbWV0YURlc2NyaXB0aW9uTGVuZ3RoID0gcmVxdWlyZSggXCIuL2Fzc2Vzc21lbnRzL21ldGFEZXNjcmlwdGlvbkxlbmd0aEFzc2Vzc21lbnQuanNcIiApO1xudmFyIHN1YmhlYWRpbmdzS2V5d29yZCA9IHJlcXVpcmUoIFwiLi9hc3Nlc3NtZW50cy9zdWJoZWFkaW5nc0tleXdvcmRBc3Nlc3NtZW50LmpzXCIgKTtcbnZhciB0ZXh0Q29tcGV0aW5nTGlua3MgPSByZXF1aXJlKCBcIi4vYXNzZXNzbWVudHMvdGV4dENvbXBldGluZ0xpbmtzQXNzZXNzbWVudC5qc1wiICk7XG52YXIgdGV4dEltYWdlcyA9IHJlcXVpcmUoIFwiLi9hc3Nlc3NtZW50cy90ZXh0SW1hZ2VzQXNzZXNzbWVudC5qc1wiICk7XG52YXIgdGV4dExlbmd0aCA9IHJlcXVpcmUoIFwiLi9hc3Nlc3NtZW50cy90ZXh0TGVuZ3RoQXNzZXNzbWVudC5qc1wiICk7XG52YXIgdGV4dExpbmtzID0gcmVxdWlyZSggXCIuL2Fzc2Vzc21lbnRzL3RleHRMaW5rc0Fzc2Vzc21lbnQuanNcIiApO1xudmFyIHRpdGxlS2V5d29yZCA9IHJlcXVpcmUoIFwiLi9hc3Nlc3NtZW50cy90aXRsZUtleXdvcmRBc3Nlc3NtZW50LmpzXCIgKTtcbnZhciB0aXRsZVdpZHRoID0gcmVxdWlyZSggXCIuL2Fzc2Vzc21lbnRzL3BhZ2VUaXRsZVdpZHRoQXNzZXNzbWVudC5qc1wiICk7XG52YXIgdXJsS2V5d29yZCA9IHJlcXVpcmUoIFwiLi9hc3Nlc3NtZW50cy91cmxLZXl3b3JkQXNzZXNzbWVudC5qc1wiICk7XG52YXIgdXJsTGVuZ3RoID0gcmVxdWlyZSggXCIuL2Fzc2Vzc21lbnRzL3VybExlbmd0aEFzc2Vzc21lbnQuanNcIiApO1xudmFyIHVybFN0b3BXb3JkcyA9IHJlcXVpcmUoIFwiLi9hc3Nlc3NtZW50cy91cmxTdG9wV29yZHNBc3Nlc3NtZW50LmpzXCIgKTtcbi8qKlxuICogQ3JlYXRlcyB0aGUgQXNzZXNzb3JcbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gaTE4biBUaGUgaTE4biBvYmplY3QgdXNlZCBmb3IgdHJhbnNsYXRpb25zLlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgVGhlIG9wdGlvbnMgZm9yIHRoaXMgYXNzZXNzb3IuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucy5tYXJrZXIgVGhlIG1hcmtlciB0byBwYXNzIHRoZSBsaXN0IG9mIG1hcmtzIHRvLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICovXG52YXIgU0VPQXNzZXNzb3IgPSBmdW5jdGlvbiggaTE4biwgb3B0aW9ucyApIHtcblx0QXNzZXNzb3IuY2FsbCggdGhpcywgaTE4biwgb3B0aW9ucyApO1xuXG5cdHRoaXMuX2Fzc2Vzc21lbnRzID0gW1xuXHRcdGludHJvZHVjdGlvbktleXdvcmQsXG5cdFx0a2V5cGhyYXNlTGVuZ3RoLFxuXHRcdGtleXdvcmREZW5zaXR5LFxuXHRcdGtleXdvcmRTdG9wV29yZHMsXG5cdFx0bWV0YURlc2NyaXB0aW9uS2V5d29yZCxcblx0XHRtZXRhRGVzY3JpcHRpb25MZW5ndGgsXG5cdFx0c3ViaGVhZGluZ3NLZXl3b3JkLFxuXHRcdHRleHRDb21wZXRpbmdMaW5rcyxcblx0XHR0ZXh0SW1hZ2VzLFxuXHRcdHRleHRMZW5ndGgsXG5cdFx0dGV4dExpbmtzLFxuXHRcdHRpdGxlS2V5d29yZCxcblx0XHR0aXRsZVdpZHRoLFxuXHRcdHVybEtleXdvcmQsXG5cdFx0dXJsTGVuZ3RoLFxuXHRcdHVybFN0b3BXb3Jkcyxcblx0XTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU0VPQXNzZXNzb3I7XG5cbnJlcXVpcmUoIFwidXRpbFwiICkuaW5oZXJpdHMoIG1vZHVsZS5leHBvcnRzLCBBc3Nlc3NvciApO1xuXG4iLCJ2YXIgQXNzZXNzbWVudFJlc3VsdCA9IHJlcXVpcmUoIFwiLi4vdmFsdWVzL0Fzc2Vzc21lbnRSZXN1bHQuanNcIiApO1xuXG4vKipcbiAqIFJldHVybnMgYSBzY29yZSBhbmQgdGV4dCBiYXNlZCBvbiB0aGUgZmlyc3RQYXJhZ3JhcGggb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBmaXJzdFBhcmFncmFwaE1hdGNoZXMgVGhlIG9iamVjdCB3aXRoIGFsbCBmaXJzdFBhcmFncmFwaE1hdGNoZXMuXG4gKiBAcGFyYW0ge29iamVjdH0gaTE4biBUaGUgb2JqZWN0IHVzZWQgZm9yIHRyYW5zbGF0aW9uc1xuICogQHJldHVybnMge29iamVjdH0gcmVzdWx0T2JqZWN0IHdpdGggc2NvcmUgYW5kIHRleHRcbiAqL1xudmFyIGNhbGN1bGF0ZUZpcnN0UGFyYWdyYXBoUmVzdWx0ID0gZnVuY3Rpb24oIGZpcnN0UGFyYWdyYXBoTWF0Y2hlcywgaTE4biApIHtcblx0aWYgKCBmaXJzdFBhcmFncmFwaE1hdGNoZXMgPiAwICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzY29yZTogOSxcblx0XHRcdHRleHQ6IGkxOG4uZGdldHRleHQoIFwianMtdGV4dC1hbmFseXNpc1wiLCBcIlRoZSBmb2N1cyBrZXl3b3JkIGFwcGVhcnMgaW4gdGhlIGZpcnN0IHBhcmFncmFwaCBvZiB0aGUgY29weS5cIiApLFxuXHRcdH07XG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdHNjb3JlOiAzLFxuXHRcdHRleHQ6IGkxOG4uZGdldHRleHQoIFwianMtdGV4dC1hbmFseXNpc1wiLCBcIlRoZSBmb2N1cyBrZXl3b3JkIGRvZXNuXFwndCBhcHBlYXIgaW4gdGhlIGZpcnN0IHBhcmFncmFwaCBvZiB0aGUgY29weS4gXCIgK1xuXHRcdFx0XCJNYWtlIHN1cmUgdGhlIHRvcGljIGlzIGNsZWFyIGltbWVkaWF0ZWx5LlwiICksXG5cdH07XG59O1xuXG4vKipcbiAqIFJ1bnMgdGhlIGZpbmRLZXl3b3JkSW5GaXJzdFBhcmFncmFwaCBtb2R1bGUsIGJhc2VkIG9uIHRoaXMgcmV0dXJucyBhbiBhc3Nlc3NtZW50IHJlc3VsdCB3aXRoIHNjb3JlLlxuICpcbiAqIEBwYXJhbSB7UGFwZXJ9IHBhcGVyIFRoZSBwYXBlciB0byB1c2UgZm9yIHRoZSBhc3Nlc3NtZW50LlxuICogQHBhcmFtIHtvYmplY3R9IHJlc2VhcmNoZXIgVGhlIHJlc2VhcmNoZXIgdXNlZCBmb3IgY2FsbGluZyByZXNlYXJjaC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBpMThuIFRoZSBvYmplY3QgdXNlZCBmb3IgdHJhbnNsYXRpb25zXG4gKiBAcmV0dXJucyB7b2JqZWN0fSB0aGUgQXNzZXNzbWVudHJlc3VsdFxuICovXG52YXIgaW50cm9kdWN0aW9uSGFzS2V5d29yZEFzc2Vzc21lbnQgPSBmdW5jdGlvbiggcGFwZXIsIHJlc2VhcmNoZXIsIGkxOG4gKSB7XG5cdHZhciBmaXJzdFBhcmFncmFwaE1hdGNoZXMgPSByZXNlYXJjaGVyLmdldFJlc2VhcmNoKCBcImZpcnN0UGFyYWdyYXBoXCIgKTtcblx0dmFyIGZpcnN0UGFyYWdyYXBoUmVzdWx0ID0gY2FsY3VsYXRlRmlyc3RQYXJhZ3JhcGhSZXN1bHQoIGZpcnN0UGFyYWdyYXBoTWF0Y2hlcywgaTE4biApO1xuXHR2YXIgYXNzZXNzbWVudFJlc3VsdCA9IG5ldyBBc3Nlc3NtZW50UmVzdWx0KCk7XG5cblx0YXNzZXNzbWVudFJlc3VsdC5zZXRTY29yZSggZmlyc3RQYXJhZ3JhcGhSZXN1bHQuc2NvcmUgKTtcblx0YXNzZXNzbWVudFJlc3VsdC5zZXRUZXh0KCBmaXJzdFBhcmFncmFwaFJlc3VsdC50ZXh0ICk7XG5cblx0cmV0dXJuIGFzc2Vzc21lbnRSZXN1bHQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0aWRlbnRpZmllcjogXCJpbnRyb2R1Y3Rpb25LZXl3b3JkXCIsXG5cdGdldFJlc3VsdDogaW50cm9kdWN0aW9uSGFzS2V5d29yZEFzc2Vzc21lbnQsXG5cdGlzQXBwbGljYWJsZTogZnVuY3Rpb24oIHBhcGVyICkge1xuXHRcdHJldHVybiBwYXBlci5oYXNLZXl3b3JkKCk7XG5cdH0sXG59O1xuIiwidmFyIEFzc2Vzc21lbnRSZXN1bHQgPSByZXF1aXJlKCBcIi4uL3ZhbHVlcy9Bc3Nlc3NtZW50UmVzdWx0LmpzXCIgKTtcblxuLyoqXG4gKiBBc3Nlc3NlcyB0aGUga2V5cGhyYXNlIHByZXNlbmNlIGFuZCBsZW5ndGhcbiAqXG4gKiBAcGFyYW0ge1BhcGVyfSBwYXBlciBUaGUgcGFwZXIgdG8gdXNlIGZvciB0aGUgYXNzZXNzbWVudC5cbiAqIEBwYXJhbSB7UmVzZWFyY2hlcn0gcmVzZWFyY2hlciBUaGUgcmVzZWFyY2hlciB1c2VkIGZvciBjYWxsaW5nIHJlc2VhcmNoLlxuICogQHBhcmFtIHtKZWR9IGkxOG4gVGhlIG9iamVjdCB1c2VkIGZvciB0cmFuc2xhdGlvbnNcbiAqIEByZXR1cm5zIHtBc3Nlc3NtZW50UmVzdWx0fSBUaGUgcmVzdWx0IG9mIHRoaXMgYXNzZXNzbWVudFxuKi9cbmZ1bmN0aW9uIGtleXBocmFzZUFzc2Vzc21lbnQoIHBhcGVyLCByZXNlYXJjaGVyLCBpMThuICkge1xuXHR2YXIga2V5cGhyYXNlTGVuZ3RoID0gcmVzZWFyY2hlci5nZXRSZXNlYXJjaCggXCJrZXlwaHJhc2VMZW5ndGhcIiApO1xuXG5cdHZhciBhc3Nlc3NtZW50UmVzdWx0ID0gbmV3IEFzc2Vzc21lbnRSZXN1bHQoKTtcblxuXHRpZiAoICEgcGFwZXIuaGFzS2V5d29yZCgpICkge1xuXHRcdGFzc2Vzc21lbnRSZXN1bHQuc2V0U2NvcmUoIC05OTkgKTtcblx0XHRhc3Nlc3NtZW50UmVzdWx0LnNldFRleHQoIGkxOG4uZGdldHRleHQoIFwianMtdGV4dC1hbmFseXNpc1wiLCBcIk5vIGZvY3VzIGtleXdvcmQgd2FzIHNldCBmb3IgdGhpcyBwYWdlLiBcIiArXG5cdFx0XHRcIklmIHlvdSBkbyBub3Qgc2V0IGEgZm9jdXMga2V5d29yZCwgbm8gc2NvcmUgY2FuIGJlIGNhbGN1bGF0ZWQuXCIgKSApO1xuXHR9IGVsc2UgaWYgKCBrZXlwaHJhc2VMZW5ndGggPiAxMCApIHtcblx0XHRhc3Nlc3NtZW50UmVzdWx0LnNldFNjb3JlKCAwICk7XG5cdFx0YXNzZXNzbWVudFJlc3VsdC5zZXRUZXh0KCBpMThuLmRnZXR0ZXh0KCBcImpzLXRleHQtYW5hbHlzaXNcIiwgXCJUaGUga2V5cGhyYXNlIGlzIG92ZXIgMTAgd29yZHMsIGEga2V5cGhyYXNlIHNob3VsZCBiZSBzaG9ydGVyLlwiICkgKTtcblx0fVxuXG5cdHJldHVybiBhc3Nlc3NtZW50UmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0aWRlbnRpZmllcjogXCJrZXlwaHJhc2VMZW5ndGhcIixcblx0Z2V0UmVzdWx0OiBrZXlwaHJhc2VBc3Nlc3NtZW50LFxufTtcbiIsInZhciBBc3Nlc3NtZW50UmVzdWx0ID0gcmVxdWlyZSggXCIuLi92YWx1ZXMvQXNzZXNzbWVudFJlc3VsdC5qc1wiICk7XG52YXIgY291bnRXb3JkT2NjdXJyZW5jZXMgPSByZXF1aXJlKCBcIi4uL3N0cmluZ1Byb2Nlc3NpbmcvY291bnRXb3JkT2NjdXJyZW5jZXMuanNcIiApO1xudmFyIGNvdW50V29yZHMgPSByZXF1aXJlKCBcIi4uL3N0cmluZ1Byb2Nlc3NpbmcvY291bnRXb3Jkcy5qc1wiICk7XG52YXIgZm9ybWF0TnVtYmVyID0gcmVxdWlyZSggXCIuLi9oZWxwZXJzL2Zvcm1hdE51bWJlci5qc1wiICk7XG52YXIgaW5SYW5nZSA9IHJlcXVpcmUoIFwiLi4vaGVscGVycy9pblJhbmdlLmpzXCIgKTtcblxudmFyIGluUmFuZ2VFbmRJbmNsdXNpdmUgPSBpblJhbmdlLmluUmFuZ2VFbmRJbmNsdXNpdmU7XG52YXIgaW5SYW5nZVN0YXJ0SW5jbHVzaXZlID0gaW5SYW5nZS5pblJhbmdlU3RhcnRJbmNsdXNpdmU7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgc2NvcmVzIGFuZCB0ZXh0IGZvciBrZXl3b3JkIGRlbnNpdHlcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5d29yZERlbnNpdHkgVGhlIGtleXdvcmQgZGVuc2l0eVxuICogQHBhcmFtIHtvYmplY3R9IGkxOG4gVGhlIGkxOG4gb2JqZWN0IHVzZWQgZm9yIHRyYW5zbGF0aW9uc1xuICogQHBhcmFtIHtudW1iZXJ9IGtleXdvcmRDb3VudCBUaGUgbnVtYmVyIG9mIHRpbWVzIHRoZSBrZXl3b3JkIGhhcyBiZWVuIGZvdW5kIGluIHRoZSB0ZXh0LlxuICogQHJldHVybnMge3tzY29yZTogbnVtYmVyLCB0ZXh0OiAqfX0gVGhlIGFzc2Vzc21lbnQgcmVzdWx0XG4gKi9cbnZhciBjYWxjdWxhdGVLZXl3b3JkRGVuc2l0eVJlc3VsdCA9IGZ1bmN0aW9uKCBrZXl3b3JkRGVuc2l0eSwgaTE4biwga2V5d29yZENvdW50ICkge1xuXHR2YXIgc2NvcmUsIHRleHQsIG1heDtcblxuXHR2YXIgcm91bmRlZEtleXdvcmREZW5zaXR5ID0gZm9ybWF0TnVtYmVyKCBrZXl3b3JkRGVuc2l0eSApO1xuXHR2YXIga2V5d29yZERlbnNpdHlQZXJjZW50YWdlID0gcm91bmRlZEtleXdvcmREZW5zaXR5ICsgXCIlXCI7XG5cblx0aWYgKCByb3VuZGVkS2V5d29yZERlbnNpdHkgPiAzLjUgKSB7XG5cdFx0c2NvcmUgPSAtNTA7XG5cblx0XHQvKiBUcmFuc2xhdG9yczogJTEkcyBleHBhbmRzIHRvIHRoZSBrZXl3b3JkIGRlbnNpdHkgcGVyY2VudGFnZSwgJTIkZCBleHBhbmRzIHRvIHRoZSBrZXl3b3JkIGNvdW50LFxuXHRcdCUzJHMgZXhwYW5kcyB0byB0aGUgbWF4aW11bSBrZXl3b3JkIGRlbnNpdHkgcGVyY2VudGFnZS4gKi9cblx0XHR0ZXh0ID0gaTE4bi5kZ2V0dGV4dCggXCJqcy10ZXh0LWFuYWx5c2lzXCIsIFwiVGhlIGtleXdvcmQgZGVuc2l0eSBpcyAlMSRzLFwiICtcblx0XHRcdFwiIHdoaWNoIGlzIHdheSBvdmVyIHRoZSBhZHZpc2VkICUzJHMgbWF4aW11bTtcIiArXG5cdFx0XHRcIiB0aGUgZm9jdXMga2V5d29yZCB3YXMgZm91bmQgJTIkZCB0aW1lcy5cIiApO1xuXG5cdFx0bWF4ID0gXCIyLjUlXCI7XG5cblx0XHR0ZXh0ID0gaTE4bi5zcHJpbnRmKCB0ZXh0LCBrZXl3b3JkRGVuc2l0eVBlcmNlbnRhZ2UsIGtleXdvcmRDb3VudCwgbWF4ICk7XG5cdH1cblxuXHRpZiAoIGluUmFuZ2VFbmRJbmNsdXNpdmUoIHJvdW5kZWRLZXl3b3JkRGVuc2l0eSwgMi41LCAzLjUgKSApIHtcblx0XHRzY29yZSA9IC0xMDtcblxuXHRcdC8qIFRyYW5zbGF0b3JzOiAlMSRzIGV4cGFuZHMgdG8gdGhlIGtleXdvcmQgZGVuc2l0eSBwZXJjZW50YWdlLCAlMiRkIGV4cGFuZHMgdG8gdGhlIGtleXdvcmQgY291bnQsXG5cdFx0JTMkcyBleHBhbmRzIHRvIHRoZSBtYXhpbXVtIGtleXdvcmQgZGVuc2l0eSBwZXJjZW50YWdlLiAqL1xuXHRcdHRleHQgPSBpMThuLmRnZXR0ZXh0KCBcImpzLXRleHQtYW5hbHlzaXNcIiwgXCJUaGUga2V5d29yZCBkZW5zaXR5IGlzICUxJHMsXCIgK1xuXHRcdFx0XCIgd2hpY2ggaXMgb3ZlciB0aGUgYWR2aXNlZCAlMyRzIG1heGltdW07XCIgK1xuXHRcdFx0XCIgdGhlIGZvY3VzIGtleXdvcmQgd2FzIGZvdW5kICUyJGQgdGltZXMuXCIgKTtcblxuXHRcdG1heCA9IFwiMi41JVwiO1xuXG5cdFx0dGV4dCA9IGkxOG4uc3ByaW50ZiggdGV4dCwga2V5d29yZERlbnNpdHlQZXJjZW50YWdlLCBrZXl3b3JkQ291bnQsIG1heCApO1xuXHR9XG5cblx0aWYgKCBpblJhbmdlRW5kSW5jbHVzaXZlKCByb3VuZGVkS2V5d29yZERlbnNpdHksIDAuNSwgMi41ICkgKSB7XG5cdFx0c2NvcmUgPSA5O1xuXG5cdFx0LyogVHJhbnNsYXRvcnM6ICUxJHMgZXhwYW5kcyB0byB0aGUga2V5d29yZCBkZW5zaXR5IHBlcmNlbnRhZ2UsICUyJGQgZXhwYW5kcyB0byB0aGUga2V5d29yZCBjb3VudC4gKi9cblx0XHR0ZXh0ID0gaTE4bi5kZ2V0dGV4dCggXCJqcy10ZXh0LWFuYWx5c2lzXCIsIFwiVGhlIGtleXdvcmQgZGVuc2l0eSBpcyAlMSRzLCB3aGljaCBpcyBncmVhdDtcIiArXG5cdFx0XHRcIiB0aGUgZm9jdXMga2V5d29yZCB3YXMgZm91bmQgJTIkZCB0aW1lcy5cIiApO1xuXG5cdFx0dGV4dCA9IGkxOG4uc3ByaW50ZiggdGV4dCwga2V5d29yZERlbnNpdHlQZXJjZW50YWdlLCBrZXl3b3JkQ291bnQgKTtcblx0fVxuXG5cdGlmICggaW5SYW5nZVN0YXJ0SW5jbHVzaXZlKCByb3VuZGVkS2V5d29yZERlbnNpdHksIDAsIDAuNSApICkge1xuXHRcdHNjb3JlID0gNDtcblxuXHRcdC8qIFRyYW5zbGF0b3JzOiAlMSRzIGV4cGFuZHMgdG8gdGhlIGtleXdvcmQgZGVuc2l0eSBwZXJjZW50YWdlLCAlMiRkIGV4cGFuZHMgdG8gdGhlIGtleXdvcmQgY291bnQuICovXG5cdFx0dGV4dCA9IGkxOG4uZGdldHRleHQoIFwianMtdGV4dC1hbmFseXNpc1wiLCBcIlRoZSBrZXl3b3JkIGRlbnNpdHkgaXMgJTEkcywgd2hpY2ggaXMgdG9vIGxvdztcIiArXG5cdFx0XHRcIiB0aGUgZm9jdXMga2V5d29yZCB3YXMgZm91bmQgJTIkZCB0aW1lcy5cIiApO1xuXG5cdFx0dGV4dCA9IGkxOG4uc3ByaW50ZiggdGV4dCwga2V5d29yZERlbnNpdHlQZXJjZW50YWdlLCBrZXl3b3JkQ291bnQgKTtcblx0fVxuXG5cdHJldHVybiB7XG5cdFx0c2NvcmU6IHNjb3JlLFxuXHRcdHRleHQ6IHRleHQsXG5cdH07XG59O1xuXG4vKipcbiAqIFJ1bnMgdGhlIGdldGtleXdvcmREZW5zaXR5IG1vZHVsZSwgYmFzZWQgb24gdGhpcyByZXR1cm5zIGFuIGFzc2Vzc21lbnQgcmVzdWx0IHdpdGggc2NvcmUuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHBhcGVyIFRoZSBwYXBlciB0byB1c2UgZm9yIHRoZSBhc3Nlc3NtZW50LlxuICogQHBhcmFtIHtvYmplY3R9IHJlc2VhcmNoZXIgVGhlIHJlc2VhcmNoZXIgdXNlZCBmb3IgY2FsbGluZyByZXNlYXJjaC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBpMThuIFRoZSBvYmplY3QgdXNlZCBmb3IgdHJhbnNsYXRpb25zXG4gKiBAcmV0dXJucyB7b2JqZWN0fSB0aGUgQXNzZXNzbWVudHJlc3VsdFxuICovXG52YXIga2V5d29yZERlbnNpdHlBc3Nlc3NtZW50ID0gZnVuY3Rpb24oIHBhcGVyLCByZXNlYXJjaGVyLCBpMThuICkge1xuXHR2YXIga2V5d29yZERlbnNpdHkgPSByZXNlYXJjaGVyLmdldFJlc2VhcmNoKCBcImdldEtleXdvcmREZW5zaXR5XCIgKTtcblx0dmFyIGtleXdvcmRDb3VudCA9IGNvdW50V29yZE9jY3VycmVuY2VzKCBwYXBlci5nZXRUZXh0KCksIHBhcGVyLmdldEtleXdvcmQoKSwgcGFwZXIuZ2V0TG9jYWxlKCkgKTtcblxuXHR2YXIga2V5d29yZERlbnNpdHlSZXN1bHQgPSBjYWxjdWxhdGVLZXl3b3JkRGVuc2l0eVJlc3VsdCgga2V5d29yZERlbnNpdHksIGkxOG4sIGtleXdvcmRDb3VudCApO1xuXHR2YXIgYXNzZXNzbWVudFJlc3VsdCA9IG5ldyBBc3Nlc3NtZW50UmVzdWx0KCk7XG5cblx0YXNzZXNzbWVudFJlc3VsdC5zZXRTY29yZSgga2V5d29yZERlbnNpdHlSZXN1bHQuc2NvcmUgKTtcblx0YXNzZXNzbWVudFJlc3VsdC5zZXRUZXh0KCBrZXl3b3JkRGVuc2l0eVJlc3VsdC50ZXh0ICk7XG5cblx0cmV0dXJuIGFzc2Vzc21lbnRSZXN1bHQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0aWRlbnRpZmllcjogXCJrZXl3b3JkRGVuc2l0eVwiLFxuXHRnZXRSZXN1bHQ6IGtleXdvcmREZW5zaXR5QXNzZXNzbWVudCxcblx0aXNBcHBsaWNhYmxlOiBmdW5jdGlvbiggcGFwZXIgKSB7XG5cdFx0cmV0dXJuIHBhcGVyLmhhc1RleHQoKSAmJiBwYXBlci5oYXNLZXl3b3JkKCkgJiYgY291bnRXb3JkcyggcGFwZXIuZ2V0VGV4dCgpICkgPj0gMTAwO1xuXHR9LFxufTtcbiIsInZhciBBc3Nlc3NtZW50UmVzdWx0ID0gcmVxdWlyZSggXCIuLi92YWx1ZXMvQXNzZXNzbWVudFJlc3VsdC5qc1wiICk7XG5cbi8qKlxuICogQ2FsY3VsYXRlIHRoZSBzY29yZSBiYXNlZCBvbiB0aGUgYW1vdW50IG9mIHN0b3Agd29yZHMgaW4gdGhlIGtleXdvcmQuXG4gKiBAcGFyYW0ge251bWJlcn0gc3RvcFdvcmRDb3VudCBUaGUgYW1vdW50IG9mIHN0b3Agd29yZHMgdG8gYmUgY2hlY2tlZCBhZ2FpbnN0LlxuICogQHBhcmFtIHtvYmplY3R9IGkxOG4gVGhlIGxvY2FsZSBvYmplY3QuXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBUaGUgcmVzdWx0aW5nIHNjb3JlIG9iamVjdC5cbiAqL1xudmFyIGNhbGN1bGF0ZVN0b3BXb3Jkc0NvdW50UmVzdWx0ID0gZnVuY3Rpb24oIHN0b3BXb3JkQ291bnQsIGkxOG4gKSB7XG5cdGlmICggc3RvcFdvcmRDb3VudCA+IDAgKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNjb3JlOiAwLFxuXHRcdFx0dGV4dDogaTE4bi5kbmdldHRleHQoXG5cdFx0XHRcdFwianMtdGV4dC1hbmFseXNpc1wiLFxuXHRcdFx0XHQvKiBUcmFuc2xhdG9yczogJTEkcyBvcGVucyBhIGxpbmsgdG8gYSBZb2FzdCBhcnRpY2xlIGFib3V0IHN0b3Agd29yZHMsICUyJHMgY2xvc2VzIHRoZSBsaW5rICovXG5cdFx0XHRcdFwiVGhlIGZvY3VzIGtleXdvcmQgY29udGFpbnMgYSBzdG9wIHdvcmQuIFRoaXMgbWF5IG9yIG1heSBub3QgYmUgd2lzZSBkZXBlbmRpbmcgb24gdGhlIGNpcmN1bXN0YW5jZXMuIFwiICtcblx0XHRcdFx0XCJSZWFkICUxJHN0aGlzIGFydGljbGUlMiRzIGZvciBtb3JlIGluZm8uXCIsXG5cdFx0XHRcdFwiVGhlIGZvY3VzIGtleXdvcmQgY29udGFpbnMgJTMkZCBzdG9wIHdvcmRzLiBUaGlzIG1heSBvciBtYXkgbm90IGJlIHdpc2UgZGVwZW5kaW5nIG9uIHRoZSBjaXJjdW1zdGFuY2VzLiBcIiArXG5cdFx0XHRcdFwiUmVhZCAlMSRzdGhpcyBhcnRpY2xlJTIkcyBmb3IgbW9yZSBpbmZvLlwiLFxuXHRcdFx0XHRzdG9wV29yZENvdW50XG5cdFx0XHQpLFxuXHRcdH07XG5cdH1cblxuXHRyZXR1cm4ge307XG59O1xuXG4vKipcbiAqIEV4ZWN1dGUgdGhlIEFzc2Vzc21lbnQgYW5kIHJldHVybiBhIHJlc3VsdC5cbiAqIEBwYXJhbSB7UGFwZXJ9IHBhcGVyIFRoZSBQYXBlciBvYmplY3QgdG8gYXNzZXNzLlxuICogQHBhcmFtIHtSZXNlYXJjaGVyfSByZXNlYXJjaGVyIFRoZSBSZXNlYXJjaGVyIG9iamVjdCBjb250YWluaW5nIGFsbCBhdmFpbGFibGUgcmVzZWFyY2hlcy5cbiAqIEBwYXJhbSB7b2JqZWN0fSBpMThuIFRoZSBsb2NhbGUgb2JqZWN0LlxuICogQHJldHVybnMge0Fzc2Vzc21lbnRSZXN1bHR9IFRoZSByZXN1bHQgb2YgdGhlIGFzc2Vzc21lbnQsIGNvbnRhaW5pbmcgYm90aCBhIHNjb3JlIGFuZCBhIGRlc2NyaXB0aXZlIHRleHQuXG4gKi9cbnZhciBrZXl3b3JkSGFzU3RvcFdvcmRzQXNzZXNzbWVudCA9IGZ1bmN0aW9uKCBwYXBlciwgcmVzZWFyY2hlciwgaTE4biApIHtcblx0dmFyIHN0b3BXb3JkcyA9IHJlc2VhcmNoZXIuZ2V0UmVzZWFyY2goIFwic3RvcFdvcmRzSW5LZXl3b3JkXCIgKTtcblx0dmFyIHN0b3BXb3Jkc1Jlc3VsdCA9IGNhbGN1bGF0ZVN0b3BXb3Jkc0NvdW50UmVzdWx0KCBzdG9wV29yZHMubGVuZ3RoLCBpMThuICk7XG5cblx0dmFyIGFzc2Vzc21lbnRSZXN1bHQgPSBuZXcgQXNzZXNzbWVudFJlc3VsdCgpO1xuXHRhc3Nlc3NtZW50UmVzdWx0LnNldFNjb3JlKCBzdG9wV29yZHNSZXN1bHQuc2NvcmUgKTtcblx0YXNzZXNzbWVudFJlc3VsdC5zZXRUZXh0KCBpMThuLnNwcmludGYoXG5cdFx0c3RvcFdvcmRzUmVzdWx0LnRleHQsXG5cdFx0XCI8YSBocmVmPSdodHRwczovL3lvYXN0LmNvbS9oYW5kbGluZy1zdG9wd29yZHMvJyB0YXJnZXQ9J25ldyc+XCIsXG5cdFx0XCI8L2E+XCIsXG5cdFx0c3RvcFdvcmRzLmxlbmd0aFxuXHQpICk7XG5cblx0cmV0dXJuIGFzc2Vzc21lbnRSZXN1bHQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0aWRlbnRpZmllcjogXCJrZXl3b3JkU3RvcFdvcmRzXCIsXG5cdGdldFJlc3VsdDoga2V5d29yZEhhc1N0b3BXb3Jkc0Fzc2Vzc21lbnQsXG5cdGlzQXBwbGljYWJsZTogZnVuY3Rpb24oIHBhcGVyICkge1xuXHRcdHJldHVybiBwYXBlci5oYXNLZXl3b3JkKCk7XG5cdH0sXG59O1xuIiwidmFyIEFzc2Vzc21lbnRSZXN1bHQgPSByZXF1aXJlKCBcIi4uL3ZhbHVlcy9Bc3Nlc3NtZW50UmVzdWx0LmpzXCIgKTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBzY29yZSBhbmQgdGV4dCBmb3IgdGhlIGRlc2NyaXB0aW9uIGtleXdvcmQgbWF0Y2guXG4gKiBAcGFyYW0ge251bWJlcn0ga2V5d29yZE1hdGNoZXMgVGhlIG51bWJlciBvZiBrZXl3b3JkIG1hdGNoZXMgaW4gdGhlIGRlc2NyaXB0aW9uLlxuICogQHBhcmFtIHtvYmplY3R9IGkxOG4gVGhlIGkxOG4gb2JqZWN0IHVzZWQgZm9yIHRyYW5zbGF0aW9ucy5cbiAqIEByZXR1cm5zIHtPYmplY3R9IEFuIG9iamVjdCB3aXRoIHZhbHVlcyBmb3IgdGhlIGFzc2Vzc21lbnQgcmVzdWx0LlxuICovXG52YXIgY2FsY3VsYXRlS2V5d29yZE1hdGNoZXNSZXN1bHQgPSBmdW5jdGlvbigga2V5d29yZE1hdGNoZXMsIGkxOG4gKSB7XG5cdGlmICgga2V5d29yZE1hdGNoZXMgPiAwICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzY29yZTogOSxcblx0XHRcdHRleHQ6IGkxOG4uZGdldHRleHQoIFwianMtdGV4dC1hbmFseXNpc1wiLCBcIlRoZSBtZXRhIGRlc2NyaXB0aW9uIGNvbnRhaW5zIHRoZSBmb2N1cyBrZXl3b3JkLlwiICksXG5cdFx0fTtcblx0fVxuXHRpZiAoIGtleXdvcmRNYXRjaGVzID09PSAwICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzY29yZTogMyxcblx0XHRcdHRleHQ6IGkxOG4uZGdldHRleHQoIFwianMtdGV4dC1hbmFseXNpc1wiLCBcIkEgbWV0YSBkZXNjcmlwdGlvbiBoYXMgYmVlbiBzcGVjaWZpZWQsIGJ1dCBpdCBkb2VzIG5vdCBjb250YWluIHRoZSBmb2N1cyBrZXl3b3JkLlwiICksXG5cdFx0fTtcblx0fVxuXHRyZXR1cm4ge307XG59O1xuXG4vKipcbiAqIFJ1bnMgdGhlIG1ldGFEZXNjcmlwdGlvbiBrZXl3b3JkIG1vZHVsZSwgYmFzZWQgb24gdGhpcyByZXR1cm5zIGFuIGFzc2Vzc21lbnQgcmVzdWx0IHdpdGggc2NvcmUuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHBhcGVyIFRoZSBwYXBlciB0byB1c2UgZm9yIHRoZSBhc3Nlc3NtZW50LlxuICogQHBhcmFtIHtvYmplY3R9IHJlc2VhcmNoZXIgVGhlIHJlc2VhcmNoZXIgdXNlZCBmb3IgY2FsbGluZyByZXNlYXJjaC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBpMThuIFRoZSBvYmplY3QgdXNlZCBmb3IgdHJhbnNsYXRpb25zXG4gKiBAcmV0dXJucyB7b2JqZWN0fSB0aGUgQXNzZXNzbWVudHJlc3VsdFxuICovXG52YXIgbWV0YURlc2NyaXB0aW9uSGFzS2V5d29yZEFzc2Vzc21lbnQgPSBmdW5jdGlvbiggcGFwZXIsIHJlc2VhcmNoZXIsIGkxOG4gKSB7XG5cdHZhciBrZXl3b3JkTWF0Y2hlcyA9IHJlc2VhcmNoZXIuZ2V0UmVzZWFyY2goIFwibWV0YURlc2NyaXB0aW9uS2V5d29yZFwiICk7XG5cdHZhciBkZXNjcmlwdGlvbkxlbmd0aFJlc3VsdCA9IGNhbGN1bGF0ZUtleXdvcmRNYXRjaGVzUmVzdWx0KCBrZXl3b3JkTWF0Y2hlcywgaTE4biApO1xuXHR2YXIgYXNzZXNzbWVudFJlc3VsdCA9IG5ldyBBc3Nlc3NtZW50UmVzdWx0KCk7XG5cblx0YXNzZXNzbWVudFJlc3VsdC5zZXRTY29yZSggZGVzY3JpcHRpb25MZW5ndGhSZXN1bHQuc2NvcmUgKTtcblx0YXNzZXNzbWVudFJlc3VsdC5zZXRUZXh0KCBkZXNjcmlwdGlvbkxlbmd0aFJlc3VsdC50ZXh0ICk7XG5cblx0cmV0dXJuIGFzc2Vzc21lbnRSZXN1bHQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0aWRlbnRpZmllcjogXCJtZXRhRGVzY3JpcHRpb25LZXl3b3JkXCIsXG5cdGdldFJlc3VsdDogbWV0YURlc2NyaXB0aW9uSGFzS2V5d29yZEFzc2Vzc21lbnQsXG5cdGlzQXBwbGljYWJsZTogZnVuY3Rpb24oIHBhcGVyICkge1xuXHRcdHJldHVybiBwYXBlci5oYXNLZXl3b3JkKCk7XG5cdH0sXG59O1xuIiwidmFyIEFzc2Vzc21lbnRSZXN1bHQgPSByZXF1aXJlKCBcIi4uL3ZhbHVlcy9Bc3Nlc3NtZW50UmVzdWx0LmpzXCIgKTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBzY29yZSBhbmQgdGV4dCBmb3IgdGhlIGRlc2NyaXB0aW9uTGVuZ3RoXG4gKiBAcGFyYW0ge251bWJlcn0gZGVzY3JpcHRpb25MZW5ndGggVGhlIGxlbmd0aCBvZiB0aGUgbWV0YWRlc2NyaXB0aW9uLlxuICogQHBhcmFtIHtvYmplY3R9IGkxOG4gVGhlIGkxOG4gb2JqZWN0IHVzZWQgZm9yIHRyYW5zbGF0aW9ucy5cbiAqIEByZXR1cm5zIHtPYmplY3R9IEFuIG9iamVjdCB3aXRoIHZhbHVlcyBmb3IgdGhlIGFzc2Vzc21lbnQgcmVzdWx0LlxuICovXG52YXIgY2FsY3VsYXRlRGVzY3JpcHRpb25MZW5ndGhSZXN1bHQgPSBmdW5jdGlvbiggZGVzY3JpcHRpb25MZW5ndGgsIGkxOG4gKSB7XG5cdHZhciByZWNvbW1lbmRlZFZhbHVlID0gMTIwO1xuXHR2YXIgbWF4aW11bVZhbHVlID0gMTU2O1xuXHRpZiAoIGRlc2NyaXB0aW9uTGVuZ3RoID09PSAwICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzY29yZTogMSxcblx0XHRcdHRleHQ6IGkxOG4uZGdldHRleHQoIFwianMtdGV4dC1hbmFseXNpc1wiLCBcIk5vIG1ldGEgZGVzY3JpcHRpb24gaGFzIGJlZW4gc3BlY2lmaWVkLCBcIiArXG5cdFx0XHRcdFwic2VhcmNoIGVuZ2luZXMgd2lsbCBkaXNwbGF5IGNvcHkgZnJvbSB0aGUgcGFnZSBpbnN0ZWFkLlwiICksXG5cdFx0fTtcblx0fVxuXHRpZiAoIGRlc2NyaXB0aW9uTGVuZ3RoIDw9IHJlY29tbWVuZGVkVmFsdWUgKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNjb3JlOiA2LFxuXHRcdFx0dGV4dDogaTE4bi5zcHJpbnRmKCBpMThuLmRnZXR0ZXh0KCBcImpzLXRleHQtYW5hbHlzaXNcIiwgXCJUaGUgbWV0YSBkZXNjcmlwdGlvbiBpcyB1bmRlciAlMSRkIGNoYXJhY3RlcnMsIFwiICtcblx0XHRcdFx0XCJob3dldmVyIHVwIHRvICUyJGQgY2hhcmFjdGVycyBhcmUgYXZhaWxhYmxlLlwiICksIHJlY29tbWVuZGVkVmFsdWUsIG1heGltdW1WYWx1ZSApLFxuXHRcdH07XG5cdH1cblx0aWYgKCBkZXNjcmlwdGlvbkxlbmd0aCA+IG1heGltdW1WYWx1ZSApIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2NvcmU6IDYsXG5cdFx0XHR0ZXh0OiBpMThuLnNwcmludGYoIGkxOG4uZGdldHRleHQoIFwianMtdGV4dC1hbmFseXNpc1wiLCBcIlRoZSBzcGVjaWZpZWQgbWV0YSBkZXNjcmlwdGlvbiBpcyBvdmVyICUxJGQgY2hhcmFjdGVycy4gXCIgK1xuXHRcdFx0XHRcIlJlZHVjaW5nIGl0IHdpbGwgZW5zdXJlIHRoZSBlbnRpcmUgZGVzY3JpcHRpb24gaXMgdmlzaWJsZS5cIiApLCBtYXhpbXVtVmFsdWUgKSxcblx0XHR9O1xuXHR9XG5cdGlmICggZGVzY3JpcHRpb25MZW5ndGggPj0gcmVjb21tZW5kZWRWYWx1ZSAmJiBkZXNjcmlwdGlvbkxlbmd0aCA8PSBtYXhpbXVtVmFsdWUgKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNjb3JlOiA5LFxuXHRcdFx0dGV4dDogaTE4bi5kZ2V0dGV4dCggXCJqcy10ZXh0LWFuYWx5c2lzXCIsIFwiSW4gdGhlIHNwZWNpZmllZCBtZXRhIGRlc2NyaXB0aW9uLCBjb25zaWRlcjogXCIgK1xuXHRcdFx0XHRcIkhvdyBkb2VzIGl0IGNvbXBhcmUgdG8gdGhlIGNvbXBldGl0aW9uPyBDb3VsZCBpdCBiZSBtYWRlIG1vcmUgYXBwZWFsaW5nP1wiICksXG5cdFx0fTtcblx0fVxufTtcblxuLyoqXG4gKiBSdW5zIHRoZSBtZXRhRGVzY3JpcHRpb25MZW5ndGggbW9kdWxlLCBiYXNlZCBvbiB0aGlzIHJldHVybnMgYW4gYXNzZXNzbWVudCByZXN1bHQgd2l0aCBzY29yZS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gcGFwZXIgVGhlIHBhcGVyIHRvIHVzZSBmb3IgdGhlIGFzc2Vzc21lbnQuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzZWFyY2hlciBUaGUgcmVzZWFyY2hlciB1c2VkIGZvciBjYWxsaW5nIHJlc2VhcmNoLlxuICogQHBhcmFtIHtvYmplY3R9IGkxOG4gVGhlIG9iamVjdCB1c2VkIGZvciB0cmFuc2xhdGlvbnNcbiAqIEByZXR1cm5zIHtvYmplY3R9IHRoZSBBc3Nlc3NtZW50cmVzdWx0XG4gKi9cbnZhciBtZXRhRGVzY3JpcHRpb25MZW5ndGhBc3Nlc3NtZW50ID0gZnVuY3Rpb24oIHBhcGVyLCByZXNlYXJjaGVyLCBpMThuICkge1xuXHR2YXIgZGVzY3JpcHRpb25MZW5ndGggPSByZXNlYXJjaGVyLmdldFJlc2VhcmNoKCBcIm1ldGFEZXNjcmlwdGlvbkxlbmd0aFwiICk7XG5cdHZhciBkZXNjcmlwdGlvbkxlbmd0aFJlc3VsdCA9IGNhbGN1bGF0ZURlc2NyaXB0aW9uTGVuZ3RoUmVzdWx0KCBkZXNjcmlwdGlvbkxlbmd0aCwgaTE4biApO1xuXHR2YXIgYXNzZXNzbWVudFJlc3VsdCA9IG5ldyBBc3Nlc3NtZW50UmVzdWx0KCk7XG5cblx0YXNzZXNzbWVudFJlc3VsdC5zZXRTY29yZSggZGVzY3JpcHRpb25MZW5ndGhSZXN1bHQuc2NvcmUgKTtcblx0YXNzZXNzbWVudFJlc3VsdC5zZXRUZXh0KCBkZXNjcmlwdGlvbkxlbmd0aFJlc3VsdC50ZXh0ICk7XG5cblx0cmV0dXJuIGFzc2Vzc21lbnRSZXN1bHQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0aWRlbnRpZmllcjogXCJtZXRhRGVzY3JpcHRpb25MZW5ndGhcIixcblx0Z2V0UmVzdWx0OiBtZXRhRGVzY3JpcHRpb25MZW5ndGhBc3Nlc3NtZW50LFxufTtcbiIsInZhciBBc3Nlc3NtZW50UmVzdWx0ID0gcmVxdWlyZSggXCIuLi92YWx1ZXMvQXNzZXNzbWVudFJlc3VsdC5qc1wiICk7XG52YXIgaW5SYW5nZSA9IHJlcXVpcmUoIFwiLi4vaGVscGVycy9pblJhbmdlXCIgKS5pblJhbmdlRW5kSW5jbHVzaXZlO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIHNjb3JlIGFuZCB0ZXh0IGZvciB0aGUgcGFnZVRpdGxlTGVuZ3RoXG4gKiBAcGFyYW0ge251bWJlcn0gcGFnZVRpdGxlTGVuZ3RoIFRoZSBsZW5ndGggb2YgdGhlIHBhZ2VUaXRsZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSBpMThuIFRoZSBpMThuIG9iamVjdCB1c2VkIGZvciB0cmFuc2xhdGlvbnMuXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBUaGUgcmVzdWx0IG9iamVjdC5cbiAqL1xudmFyIGNhbGN1bGF0ZVBhZ2VUaXRsZUxlbmd0aFJlc3VsdCA9IGZ1bmN0aW9uKCBwYWdlVGl0bGVMZW5ndGgsIGkxOG4gKSB7XG5cdHZhciBtaW5MZW5ndGggPSA0MDA7XG5cdHZhciBtYXhMZW5ndGggPSA2MDA7XG5cblx0aWYgKCBpblJhbmdlKCBwYWdlVGl0bGVMZW5ndGgsIDEsIDQwMCApICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzY29yZTogNixcblx0XHRcdHRleHQ6IGkxOG4uZGdldHRleHQoXG5cdFx0XHRcdFwianMtdGV4dC1hbmFseXNpc1wiLFxuXHRcdFx0XHRcIlRoZSBwYWdlIHRpdGxlIGlzIHRvbyBzaG9ydC4gVXNlIHRoZSBzcGFjZSB0byBhZGQga2V5d29yZCB2YXJpYXRpb25zIG9yIGNyZWF0ZSBjb21wZWxsaW5nIGNhbGwtdG8tYWN0aW9uIGNvcHkuXCJcblx0XHRcdCksXG5cdFx0fTtcblx0fVxuXG5cdGlmICggaW5SYW5nZSggcGFnZVRpdGxlTGVuZ3RoLCBtaW5MZW5ndGgsIG1heExlbmd0aCApICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzY29yZTogOSxcblx0XHRcdHRleHQ6IGkxOG4uZGdldHRleHQoXG5cdFx0XHRcdFwianMtdGV4dC1hbmFseXNpc1wiLFxuXHRcdFx0XHRcIlRoZSBwYWdlIHRpdGxlIGhhcyBhIG5pY2UgbGVuZ3RoLlwiXG5cdFx0XHQpLFxuXHRcdH07XG5cdH1cblxuXHRpZiAoIHBhZ2VUaXRsZUxlbmd0aCA+IG1heExlbmd0aCApIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2NvcmU6IDYsXG5cdFx0XHR0ZXh0OiBpMThuLmRnZXR0ZXh0KFxuXHRcdFx0XHRcImpzLXRleHQtYW5hbHlzaXNcIixcblx0XHRcdFx0XCJUaGUgcGFnZSB0aXRsZSBpcyB3aWRlciB0aGFuIHRoZSB2aWV3YWJsZSBsaW1pdC5cIlxuXHRcdFx0KSxcblx0XHR9O1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRzY29yZTogMSxcblx0XHR0ZXh0OiBpMThuLmRnZXR0ZXh0KCBcImpzLXRleHQtYW5hbHlzaXNcIiwgXCJQbGVhc2UgY3JlYXRlIGEgcGFnZSB0aXRsZS5cIiApLFxuXHR9O1xufTtcblxuLyoqXG4gKiBSdW5zIHRoZSBwYWdlVGl0bGVMZW5ndGggbW9kdWxlLCBiYXNlZCBvbiB0aGlzIHJldHVybnMgYW4gYXNzZXNzbWVudCByZXN1bHQgd2l0aCBzY29yZS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gcGFwZXIgVGhlIHBhcGVyIHRvIHVzZSBmb3IgdGhlIGFzc2Vzc21lbnQuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzZWFyY2hlciBUaGUgcmVzZWFyY2hlciB1c2VkIGZvciBjYWxsaW5nIHJlc2VhcmNoLlxuICogQHBhcmFtIHtvYmplY3R9IGkxOG4gVGhlIG9iamVjdCB1c2VkIGZvciB0cmFuc2xhdGlvbnNcbiAqIEByZXR1cm5zIHtvYmplY3R9IHRoZSBBc3Nlc3NtZW50cmVzdWx0XG4gKi9cbnZhciB0aXRsZVdpZHRoQXNzZXNzbWVudCA9IGZ1bmN0aW9uKCBwYXBlciwgcmVzZWFyY2hlciwgaTE4biApIHtcblx0dmFyIHBhZ2VUaXRsZVdpZHRoID0gcmVzZWFyY2hlci5nZXRSZXNlYXJjaCggXCJwYWdlVGl0bGVXaWR0aFwiICk7XG5cdHZhciBwYWdlVGl0bGVXaWR0aFJlc3VsdCA9IGNhbGN1bGF0ZVBhZ2VUaXRsZUxlbmd0aFJlc3VsdCggcGFnZVRpdGxlV2lkdGgsIGkxOG4gKTtcblx0dmFyIGFzc2Vzc21lbnRSZXN1bHQgPSBuZXcgQXNzZXNzbWVudFJlc3VsdCgpO1xuXG5cdGFzc2Vzc21lbnRSZXN1bHQuc2V0U2NvcmUoIHBhZ2VUaXRsZVdpZHRoUmVzdWx0LnNjb3JlICk7XG5cdGFzc2Vzc21lbnRSZXN1bHQuc2V0VGV4dCggcGFnZVRpdGxlV2lkdGhSZXN1bHQudGV4dCApO1xuXG5cdHJldHVybiBhc3Nlc3NtZW50UmVzdWx0O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdGlkZW50aWZpZXI6IFwidGl0bGVXaWR0aFwiLFxuXHRnZXRSZXN1bHQ6IHRpdGxlV2lkdGhBc3Nlc3NtZW50LFxufTtcblxuIiwidmFyIEFzc2Vzc21lbnRSZXN1bHQgPSByZXF1aXJlKCBcIi4uL3ZhbHVlcy9Bc3Nlc3NtZW50UmVzdWx0LmpzXCIgKTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgc2NvcmUgYW5kIHRleHQgYmFzZWQgb24gdGhlIGtleXdvcmQgbWF0Y2hlcyBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHN1YkhlYWRpbmdzIFRoZSBvYmplY3Qgd2l0aCBhbGwgc3ViSGVhZGluZ3MgbWF0Y2hlcy5cbiAqIEBwYXJhbSB7b2JqZWN0fSBpMThuIFRoZSBvYmplY3QgdXNlZCBmb3IgdHJhbnNsYXRpb25zLlxuICogQHJldHVybnMge29iamVjdH0gcmVzdWx0T2JqZWN0IHdpdGggc2NvcmUgYW5kIHRleHQuXG4gKi9cbnZhciBjYWxjdWxhdGVLZXl3b3JkTWF0Y2hlc1Jlc3VsdCA9IGZ1bmN0aW9uKCBzdWJIZWFkaW5ncywgaTE4biApIHtcblx0aWYgKCBzdWJIZWFkaW5ncy5tYXRjaGVzID09PSAwICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzY29yZTogNixcblx0XHRcdHRleHQ6IGkxOG4uZGdldHRleHQoIFwianMtdGV4dC1hbmFseXNpc1wiLCBcIllvdSBoYXZlIG5vdCB1c2VkIHRoZSBmb2N1cyBrZXl3b3JkIGluIGFueSBzdWJoZWFkaW5nIChzdWNoIGFzIGFuIEgyKSBpbiB5b3VyIGNvcHkuXCIgKSxcblx0XHR9O1xuXHR9XG5cdGlmICggc3ViSGVhZGluZ3MubWF0Y2hlcyA+PSAxICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzY29yZTogOSxcblx0XHRcdHRleHQ6IGkxOG4uc3ByaW50ZiggaTE4bi5kZ2V0dGV4dCggXCJqcy10ZXh0LWFuYWx5c2lzXCIsIFwiVGhlIGZvY3VzIGtleXdvcmQgYXBwZWFycyBpbiAlMiRkIChvdXQgb2YgJTEkZCkgc3ViaGVhZGluZ3MgaW4gdGhlIGNvcHkuIFwiICtcblx0XHRcdFx0XCJXaGlsZSBub3QgYSBtYWpvciByYW5raW5nIGZhY3RvciwgdGhpcyBpcyBiZW5lZmljaWFsLlwiICksIHN1YkhlYWRpbmdzLmNvdW50LCBzdWJIZWFkaW5ncy5tYXRjaGVzICksXG5cdFx0fTtcblx0fVxuXHRyZXR1cm4ge307XG59O1xuXG4vKipcbiAqIFJ1bnMgdGhlIG1hdGNoIGtleXdvcmQgaW4gc3ViaGVhZGluZ3MgbW9kdWxlLCBiYXNlZCBvbiB0aGlzIHJldHVybnMgYW4gYXNzZXNzbWVudCByZXN1bHQgd2l0aCBzY29yZS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gcGFwZXIgVGhlIHBhcGVyIHRvIHVzZSBmb3IgdGhlIGFzc2Vzc21lbnQuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzZWFyY2hlciBUaGUgcmVzZWFyY2hlciB1c2VkIGZvciBjYWxsaW5nIHJlc2VhcmNoLlxuICogQHBhcmFtIHtvYmplY3R9IGkxOG4gVGhlIG9iamVjdCB1c2VkIGZvciB0cmFuc2xhdGlvbnMuXG4gKiBAcmV0dXJucyB7b2JqZWN0fSB0aGUgQXNzZXNzbWVudHJlc3VsdFxuICovXG52YXIgc3ViaGVhZGluZ3NIYXZlS2V5d29yZEFzc2Vzc21lbnQgPSBmdW5jdGlvbiggcGFwZXIsIHJlc2VhcmNoZXIsIGkxOG4gKSB7XG5cdHZhciBzdWJIZWFkaW5ncyA9IHJlc2VhcmNoZXIuZ2V0UmVzZWFyY2goIFwibWF0Y2hLZXl3b3JkSW5TdWJoZWFkaW5nc1wiICk7XG5cdHZhciBzdWJIZWFkaW5nc1Jlc3VsdCA9IGNhbGN1bGF0ZUtleXdvcmRNYXRjaGVzUmVzdWx0KCBzdWJIZWFkaW5ncywgaTE4biApO1xuXHR2YXIgYXNzZXNzbWVudFJlc3VsdCA9IG5ldyBBc3Nlc3NtZW50UmVzdWx0KCk7XG5cblx0YXNzZXNzbWVudFJlc3VsdC5zZXRTY29yZSggc3ViSGVhZGluZ3NSZXN1bHQuc2NvcmUgKTtcblx0YXNzZXNzbWVudFJlc3VsdC5zZXRUZXh0KCBzdWJIZWFkaW5nc1Jlc3VsdC50ZXh0ICk7XG5cblx0cmV0dXJuIGFzc2Vzc21lbnRSZXN1bHQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0aWRlbnRpZmllcjogXCJzdWJoZWFkaW5nc0tleXdvcmRcIixcblx0Z2V0UmVzdWx0OiBzdWJoZWFkaW5nc0hhdmVLZXl3b3JkQXNzZXNzbWVudCxcblx0aXNBcHBsaWNhYmxlOiBmdW5jdGlvbiggcGFwZXIgKSB7XG5cdFx0cmV0dXJuIHBhcGVyLmhhc1RleHQoKSAmJiBwYXBlci5oYXNLZXl3b3JkKCk7XG5cdH0sXG59O1xuIiwidmFyIEFzc2Vzc21lbnRSZXN1bHQgPSByZXF1aXJlKCBcIi4uL3ZhbHVlcy9Bc3Nlc3NtZW50UmVzdWx0LmpzXCIgKTtcbnZhciBpblJhbmdlID0gcmVxdWlyZSggXCJsb2Rhc2gvaW5SYW5nZVwiICk7XG5cbnZhciByZWNvbW1lbmRlZE1pbmltdW0gPSAxNTA7XG4vKipcbiAqIENhbGN1bGF0ZSB0aGUgc2NvcmUgYmFzZWQgb24gdGhlIGN1cnJlbnQgd29yZCBjb3VudC5cbiAqIEBwYXJhbSB7bnVtYmVyfSB3b3JkQ291bnQgVGhlIGFtb3VudCBvZiB3b3JkcyB0byBiZSBjaGVja2VkIGFnYWluc3QuXG4gKiBAcGFyYW0ge29iamVjdH0gaTE4biBUaGUgbG9jYWxlIG9iamVjdC5cbiAqIEByZXR1cm5zIHtvYmplY3R9IFRoZSByZXN1bHRpbmcgc2NvcmUgb2JqZWN0LlxuICovXG52YXIgY2FsY3VsYXRlV29yZENvdW50UmVzdWx0ID0gZnVuY3Rpb24oIHdvcmRDb3VudCwgaTE4biApIHtcblx0aWYgKCB3b3JkQ291bnQgPj0gMTUwICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzY29yZTogOSxcblx0XHRcdHRleHQ6IGkxOG4uZG5nZXR0ZXh0KFxuXG5cblx0XHRcdFx0XCJqcy10ZXh0LWFuYWx5c2lzXCIsXG5cdFx0XHRcdC8qIFRyYW5zbGF0b3JzOiAlMSRkIGV4cGFuZHMgdG8gdGhlIG51bWJlciBvZiB3b3JkcyBpbiB0aGUgdGV4dC4gKi9cblx0XHRcdFx0XCJUaGUgdGV4dCBjb250YWlucyAlMSRkIHdvcmQuXCIsXG5cdFx0XHRcdFwiVGhlIHRleHQgY29udGFpbnMgJTEkZCB3b3Jkcy5cIixcblx0XHRcdFx0d29yZENvdW50XG5cdFx0XHQpICsgXCIgXCIgKyBpMThuLmRuZ2V0dGV4dChcblx0XHRcdFx0XCJqcy10ZXh0LWFuYWx5c2lzXCIsXG5cdFx0XHRcdC8qIFRyYW5zbGF0b3JzOiBUaGUgcHJlY2VkaW5nIHNlbnRlbmNlIGlzIFwiVGhlIHRleHQgY29udGFpbnMgeCB3b3Jkcy5cIiwgJTIkcyBleHBhbmRzIHRvIHRoZSByZWNvbW1lbmRlZCBtaW5pbXVtIG9mIHdvcmRzLiAqL1xuXHRcdFx0XHRcIlRoaXMgaXMgbW9yZSB0aGFuIG9yIGVxdWFsIHRvIHRoZSByZWNvbW1lbmRlZCBtaW5pbXVtIG9mICUyJGQgd29yZC5cIixcblx0XHRcdFx0XCJUaGlzIGlzIG1vcmUgdGhhbiBvciBlcXVhbCB0byB0aGUgcmVjb21tZW5kZWQgbWluaW11bSBvZiAlMiRkIHdvcmRzLlwiLFxuXHRcdFx0XHRyZWNvbW1lbmRlZE1pbmltdW1cblx0XHRcdCksXG5cdFx0fTtcblx0fVxuXG5cdGlmICggaW5SYW5nZSggd29yZENvdW50LCAxMjUsIDE1MCApICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzY29yZTogNyxcblx0XHRcdHRleHQ6IGkxOG4uZG5nZXR0ZXh0KFxuXHRcdFx0XHRcImpzLXRleHQtYW5hbHlzaXNcIixcblx0XHRcdFx0LyogVHJhbnNsYXRvcnM6ICUxJGQgZXhwYW5kcyB0byB0aGUgbnVtYmVyIG9mIHdvcmRzIGluIHRoZSB0ZXh0LiAqL1xuXHRcdFx0XHRcIlRoZSB0ZXh0IGNvbnRhaW5zICUxJGQgd29yZC5cIixcblx0XHRcdFx0XCJUaGUgdGV4dCBjb250YWlucyAlMSRkIHdvcmRzLlwiLFxuXHRcdFx0XHR3b3JkQ291bnRcblx0XHRcdCkgKyBcIiBcIiArIGkxOG4uZG5nZXR0ZXh0KFxuXHRcdFx0XHRcImpzLXRleHQtYW5hbHlzaXNcIixcblx0XHRcdFx0LyogVHJhbnNsYXRvcnM6IFRoZSBwcmVjZWRpbmcgc2VudGVuY2UgaXMgXCJUaGUgdGV4dCBjb250YWlucyB4IHdvcmRzLlwiLCAlMiRzIGV4cGFuZHMgdG8gdGhlIHJlY29tbWVuZGVkIG1pbmltdW0gb2Ygd29yZHMuICovXG5cdFx0XHRcdFwiVGhpcyBpcyBzbGlnaHRseSBiZWxvdyB0aGUgcmVjb21tZW5kZWQgbWluaW11bSBvZiAlMiRkIHdvcmQuIEFkZCBhIGJpdCBtb3JlIGNvcHkuXCIsXG5cdFx0XHRcdFwiVGhpcyBpcyBzbGlnaHRseSBiZWxvdyB0aGUgcmVjb21tZW5kZWQgbWluaW11bSBvZiAlMiRkIHdvcmRzLiBBZGQgYSBiaXQgbW9yZSBjb3B5LlwiLFxuXHRcdFx0XHRyZWNvbW1lbmRlZE1pbmltdW1cblx0XHRcdCksXG5cdFx0fTtcblx0fVxuXG5cdGlmICggaW5SYW5nZSggd29yZENvdW50LCAxMDAsIDEyNSApICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzY29yZTogNSxcblx0XHRcdHRleHQ6IGkxOG4uZG5nZXR0ZXh0KFxuXHRcdFx0XHRcImpzLXRleHQtYW5hbHlzaXNcIixcblx0XHRcdFx0LyogVHJhbnNsYXRvcnM6ICUxJGQgZXhwYW5kcyB0byB0aGUgbnVtYmVyIG9mIHdvcmRzIGluIHRoZSB0ZXh0LiAqL1xuXHRcdFx0XHRcIlRoZSB0ZXh0IGNvbnRhaW5zICUxJGQgd29yZC5cIixcblx0XHRcdFx0XCJUaGUgdGV4dCBjb250YWlucyAlMSRkIHdvcmRzLlwiLFxuXHRcdFx0XHR3b3JkQ291bnRcblx0XHRcdCkgKyBcIiBcIiArIGkxOG4uZG5nZXR0ZXh0KFxuXHRcdFx0XHRcImpzLXRleHQtYW5hbHlzaXNcIixcblx0XHRcdFx0LyogVHJhbnNsYXRvcnM6IFRoZSBwcmVjZWRpbmcgc2VudGVuY2UgaXMgXCJUaGUgdGV4dCBjb250YWlucyB4IHdvcmRzLlwiLCAlMiRzIGV4cGFuZHMgdG8gdGhlIHJlY29tbWVuZGVkIG1pbmltdW0gb2Ygd29yZHMuICovXG5cdFx0XHRcdFwiVGhpcyBpcyBiZWxvdyB0aGUgcmVjb21tZW5kZWQgbWluaW11bSBvZiAlMiRkIHdvcmQuIEFkZCBtb3JlIGNvbnRlbnQgdGhhdCBpcyByZWxldmFudCBmb3IgdGhlIHRvcGljLlwiLFxuXHRcdFx0XHRcIlRoaXMgaXMgYmVsb3cgdGhlIHJlY29tbWVuZGVkIG1pbmltdW0gb2YgJTIkZCB3b3Jkcy4gQWRkIG1vcmUgY29udGVudCB0aGF0IGlzIHJlbGV2YW50IGZvciB0aGUgdG9waWMuXCIsXG5cdFx0XHRcdHJlY29tbWVuZGVkTWluaW11bVxuXHRcdFx0KSxcblx0XHR9O1xuXHR9XG5cblx0aWYgKCBpblJhbmdlKCB3b3JkQ291bnQsIDUwLCAxMDAgKSApIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2NvcmU6IC0xMCxcblx0XHRcdHRleHQ6IGkxOG4uZG5nZXR0ZXh0KFxuXHRcdFx0XHRcImpzLXRleHQtYW5hbHlzaXNcIixcblx0XHRcdFx0LyogVHJhbnNsYXRvcnM6ICUxJGQgZXhwYW5kcyB0byB0aGUgbnVtYmVyIG9mIHdvcmRzIGluIHRoZSB0ZXh0LiAqL1xuXHRcdFx0XHRcIlRoZSB0ZXh0IGNvbnRhaW5zICUxJGQgd29yZC5cIixcblx0XHRcdFx0XCJUaGUgdGV4dCBjb250YWlucyAlMSRkIHdvcmRzLlwiLFxuXHRcdFx0XHR3b3JkQ291bnRcblx0XHRcdCkgKyBcIiBcIiArIGkxOG4uZG5nZXR0ZXh0KFxuXHRcdFx0XHRcImpzLXRleHQtYW5hbHlzaXNcIixcblx0XHRcdFx0LyogVHJhbnNsYXRvcnM6IFRoZSBwcmVjZWRpbmcgc2VudGVuY2UgaXMgXCJUaGUgdGV4dCBjb250YWlucyB4IHdvcmRzLlwiLCAlMiRzIGV4cGFuZHMgdG8gdGhlIHJlY29tbWVuZGVkIG1pbmltdW0gb2Ygd29yZHMuICovXG5cdFx0XHRcdFwiVGhpcyBpcyBiZWxvdyB0aGUgcmVjb21tZW5kZWQgbWluaW11bSBvZiAlMiRkIHdvcmQuIEFkZCBtb3JlIGNvbnRlbnQgdGhhdCBpcyByZWxldmFudCBmb3IgdGhlIHRvcGljLlwiLFxuXHRcdFx0XHRcIlRoaXMgaXMgYmVsb3cgdGhlIHJlY29tbWVuZGVkIG1pbmltdW0gb2YgJTIkZCB3b3Jkcy4gQWRkIG1vcmUgY29udGVudCB0aGF0IGlzIHJlbGV2YW50IGZvciB0aGUgdG9waWMuXCIsXG5cdFx0XHRcdHJlY29tbWVuZGVkTWluaW11bVxuXHRcdFx0KSxcblx0XHR9O1xuXHR9XG5cblx0aWYgKCBpblJhbmdlKCB3b3JkQ291bnQsIDAsIDUwICkgKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNjb3JlOiAtMjAsXG5cdFx0XHR0ZXh0OiBpMThuLmRuZ2V0dGV4dChcblx0XHRcdFx0XCJqcy10ZXh0LWFuYWx5c2lzXCIsXG5cdFx0XHRcdC8qIFRyYW5zbGF0b3JzOiAlMSRkIGV4cGFuZHMgdG8gdGhlIG51bWJlciBvZiB3b3JkcyBpbiB0aGUgdGV4dC4gKi9cblx0XHRcdFx0XCJUaGUgdGV4dCBjb250YWlucyAlMSRkIHdvcmQuXCIsXG5cdFx0XHRcdFwiVGhlIHRleHQgY29udGFpbnMgJTEkZCB3b3Jkcy5cIixcblx0XHRcdFx0d29yZENvdW50XG5cdFx0XHQpICsgXCIgXCIgKyBpMThuLmRuZ2V0dGV4dChcblx0XHRcdFx0XCJqcy10ZXh0LWFuYWx5c2lzXCIsXG5cdFx0XHRcdC8qIFRyYW5zbGF0b3JzOiBUaGUgcHJlY2VkaW5nIHNlbnRlbmNlIGlzIFwiVGhlIHRleHQgY29udGFpbnMgeCB3b3Jkcy5cIiwgJTIkcyBleHBhbmRzIHRvIHRoZSByZWNvbW1lbmRlZCBtaW5pbXVtIG9mIHdvcmRzLiAqL1xuXHRcdFx0XHRcIlRoaXMgaXMgZmFyIGJlbG93IHRoZSByZWNvbW1lbmRlZCBtaW5pbXVtIG9mICUyJGQgd29yZC4gQWRkIG1vcmUgY29udGVudCB0aGF0IGlzIHJlbGV2YW50IGZvciB0aGUgdG9waWMuXCIsXG5cdFx0XHRcdFwiVGhpcyBpcyBmYXIgYmVsb3cgdGhlIHJlY29tbWVuZGVkIG1pbmltdW0gb2YgJTIkZCB3b3Jkcy4gQWRkIG1vcmUgY29udGVudCB0aGF0IGlzIHJlbGV2YW50IGZvciB0aGUgdG9waWMuXCIsXG5cdFx0XHRcdHJlY29tbWVuZGVkTWluaW11bVxuXHRcdFx0KSxcblx0XHR9O1xuXHR9XG59O1xuXG4vKipcbiAqIEV4ZWN1dGUgdGhlIEFzc2Vzc21lbnQgYW5kIHJldHVybiBhIHJlc3VsdC5cbiAqIEBwYXJhbSB7UGFwZXJ9IHBhcGVyIFRoZSBQYXBlciBvYmplY3QgdG8gYXNzZXNzLlxuICogQHBhcmFtIHtSZXNlYXJjaGVyfSByZXNlYXJjaGVyIFRoZSBSZXNlYXJjaGVyIG9iamVjdCBjb250YWluaW5nIGFsbCBhdmFpbGFibGUgcmVzZWFyY2hlcy5cbiAqIEBwYXJhbSB7b2JqZWN0fSBpMThuIFRoZSBsb2NhbGUgb2JqZWN0LlxuICogQHJldHVybnMge0Fzc2Vzc21lbnRSZXN1bHR9IFRoZSByZXN1bHQgb2YgdGhlIGFzc2Vzc21lbnQsIGNvbnRhaW5pbmcgYm90aCBhIHNjb3JlIGFuZCBhIGRlc2NyaXB0aXZlIHRleHQuXG4gKi9cbnZhciB0YXhvbm9teVRleHRMZW5ndGhBc3Nlc3NtZW50ID0gZnVuY3Rpb24oIHBhcGVyLCByZXNlYXJjaGVyLCBpMThuICkge1xuXHR2YXIgd29yZENvdW50ID0gcmVzZWFyY2hlci5nZXRSZXNlYXJjaCggXCJ3b3JkQ291bnRJblRleHRcIiApO1xuXHR2YXIgd29yZENvdW50UmVzdWx0ID0gY2FsY3VsYXRlV29yZENvdW50UmVzdWx0KCB3b3JkQ291bnQsIGkxOG4gKTtcblx0dmFyIGFzc2Vzc21lbnRSZXN1bHQgPSBuZXcgQXNzZXNzbWVudFJlc3VsdCgpO1xuXG5cdGFzc2Vzc21lbnRSZXN1bHQuc2V0U2NvcmUoIHdvcmRDb3VudFJlc3VsdC5zY29yZSApO1xuXHRhc3Nlc3NtZW50UmVzdWx0LnNldFRleHQoIGkxOG4uc3ByaW50Ziggd29yZENvdW50UmVzdWx0LnRleHQsIHdvcmRDb3VudCwgcmVjb21tZW5kZWRNaW5pbXVtICkgKTtcblxuXHRyZXR1cm4gYXNzZXNzbWVudFJlc3VsdDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRpZGVudGlmaWVyOiBcInRheG9ub215VGV4dExlbmd0aFwiLFxuXHRnZXRSZXN1bHQ6IHRheG9ub215VGV4dExlbmd0aEFzc2Vzc21lbnQsXG59O1xuIiwidmFyIEFzc2Vzc21lbnRSZXN1bHQgPSByZXF1aXJlKCBcIi4uL3ZhbHVlcy9Bc3Nlc3NtZW50UmVzdWx0LmpzXCIgKTtcblxudmFyIE1hcmsgPSByZXF1aXJlKCBcIi4uL3ZhbHVlcy9NYXJrLmpzXCIgKTtcbnZhciBhZGRNYXJrID0gcmVxdWlyZSggXCIuLi9tYXJrZXJzL2FkZE1hcmsuanNcIiApO1xuXG52YXIgbWFwID0gcmVxdWlyZSggXCJsb2Rhc2gvbWFwXCIgKTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgc2NvcmUgYW5kIHRleHQgYmFzZWQgb24gdGhlIG51bWJlciBvZiBsaW5rcy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gbGlua1N0YXRpc3RpY3MgVGhlIG9iamVjdCB3aXRoIGFsbCBsaW5rc3RhdGlzdGljcy5cbiAqIEBwYXJhbSB7b2JqZWN0fSBpMThuIFRoZSBvYmplY3QgdXNlZCBmb3IgdHJhbnNsYXRpb25zXG4gKiBAcmV0dXJucyB7b2JqZWN0fSByZXN1bHRPYmplY3Qgd2l0aCBzY29yZSBhbmQgdGV4dFxuICovXG52YXIgY2FsY3VsYXRlTGlua0NvdW50UmVzdWx0ID0gZnVuY3Rpb24oIGxpbmtTdGF0aXN0aWNzLCBpMThuICkge1xuXHRpZiAoIGxpbmtTdGF0aXN0aWNzLmtleXdvcmQudG90YWxLZXl3b3JkID4gMCApIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2NvcmU6IDIsXG5cdFx0XHRoYXNNYXJrczogdHJ1ZSxcblx0XHRcdHRleHQ6IGkxOG4uZGdldHRleHQoIFwianMtdGV4dC1hbmFseXNpc1wiLCBcIllvdVxcJ3JlIGxpbmtpbmcgdG8gYW5vdGhlciBwYWdlIHdpdGggdGhlIGZvY3VzIGtleXdvcmQgeW91IHdhbnQgdGhpcyBwYWdlIHRvIHJhbmsgZm9yLiBcIiArXG5cdFx0XHRcdFwiQ29uc2lkZXIgY2hhbmdpbmcgdGhhdCBpZiB5b3UgdHJ1bHkgd2FudCB0aGlzIHBhZ2UgdG8gcmFuay5cIiApLFxuXHRcdH07XG5cdH1cblx0cmV0dXJuIHt9O1xufTtcblxuLyoqXG4gKiBSdW5zIHRoZSBsaW5rQ291bnQgbW9kdWxlLCBiYXNlZCBvbiB0aGlzIHJldHVybnMgYW4gYXNzZXNzbWVudCByZXN1bHQgd2l0aCBzY29yZS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gcGFwZXIgVGhlIHBhcGVyIHRvIHVzZSBmb3IgdGhlIGFzc2Vzc21lbnQuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzZWFyY2hlciBUaGUgcmVzZWFyY2hlciB1c2VkIGZvciBjYWxsaW5nIHJlc2VhcmNoLlxuICogQHBhcmFtIHtvYmplY3R9IGkxOG4gVGhlIG9iamVjdCB1c2VkIGZvciB0cmFuc2xhdGlvbnNcbiAqIEByZXR1cm5zIHtvYmplY3R9IHRoZSBBc3Nlc3NtZW50cmVzdWx0XG4gKi9cbnZhciB0ZXh0SGFzQ29tcGV0aW5nTGlua3NBc3Nlc3NtZW50ID0gZnVuY3Rpb24oIHBhcGVyLCByZXNlYXJjaGVyLCBpMThuICkge1xuXHR2YXIgbGlua0NvdW50ID0gcmVzZWFyY2hlci5nZXRSZXNlYXJjaCggXCJnZXRMaW5rU3RhdGlzdGljc1wiICk7XG5cblx0dmFyIGxpbmtDb3VudFJlc3VsdCA9IGNhbGN1bGF0ZUxpbmtDb3VudFJlc3VsdCggbGlua0NvdW50LCBpMThuICk7XG5cdHZhciBhc3Nlc3NtZW50UmVzdWx0ID0gbmV3IEFzc2Vzc21lbnRSZXN1bHQoKTtcblxuXHRhc3Nlc3NtZW50UmVzdWx0LnNldFNjb3JlKCBsaW5rQ291bnRSZXN1bHQuc2NvcmUgKTtcblx0YXNzZXNzbWVudFJlc3VsdC5zZXRUZXh0KCBsaW5rQ291bnRSZXN1bHQudGV4dCApO1xuXHRhc3Nlc3NtZW50UmVzdWx0LnNldEhhc01hcmtzKCBsaW5rQ291bnRSZXN1bHQuaGFzTWFya3MgKTtcblxuXHRyZXR1cm4gYXNzZXNzbWVudFJlc3VsdDtcbn07XG5cbi8qKlxuICogTWFyayB0aGUgYW5jaG9ycy5cbiAqXG4gKiBAcGFyYW0ge1BhcGVyfSBwYXBlciBUaGUgcGFwZXIgdG8gdXNlIGZvciB0aGUgbWFya2luZy5cbiAqIEBwYXJhbSB7UmVzZWFyY2hlcn0gcmVzZWFyY2hlciBUaGUgcmVzZWFyY2hlciB0byB1c2UuXG4gKiBAcmV0dXJucyB7QXJyYXl9IEFycmF5IHdpdGggYWxsIHRoZSBtYXJrZWQgYW5jaG9ycy5cbiAqL1xudmFyIGNvbXBldGluZ0xpbmtNYXJrZXIgPSBmdW5jdGlvbiggcGFwZXIsIHJlc2VhcmNoZXIgKSB7XG5cdHZhciBjb21wZXRpbmdMaW5rcyA9IHJlc2VhcmNoZXIuZ2V0UmVzZWFyY2goIFwiZ2V0TGlua1N0YXRpc3RpY3NcIiApO1xuXG5cdHJldHVybiBtYXAoIGNvbXBldGluZ0xpbmtzLmtleXdvcmQubWF0Y2hlZEFuY2hvcnMsIGZ1bmN0aW9uKCBtYXRjaGVkQW5jaG9yICkge1xuXHRcdHJldHVybiBuZXcgTWFyaygge1xuXHRcdFx0b3JpZ2luYWw6IG1hdGNoZWRBbmNob3IsXG5cdFx0XHRtYXJrZWQ6IGFkZE1hcmsoIG1hdGNoZWRBbmNob3IgKSxcblx0XHR9ICk7XG5cdH0gKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRpZGVudGlmaWVyOiBcInRleHRDb21wZXRpbmdMaW5rc1wiLFxuXHRnZXRSZXN1bHQ6IHRleHRIYXNDb21wZXRpbmdMaW5rc0Fzc2Vzc21lbnQsXG5cdGlzQXBwbGljYWJsZTogZnVuY3Rpb24oIHBhcGVyICkge1xuXHRcdHJldHVybiBwYXBlci5oYXNUZXh0KCkgJiYgcGFwZXIuaGFzS2V5d29yZCgpO1xuXHR9LFxuXHRnZXRNYXJrczogY29tcGV0aW5nTGlua01hcmtlcixcbn07XG4iLCJ2YXIgQXNzZXNzbWVudFJlc3VsdCA9IHJlcXVpcmUoIFwiLi4vdmFsdWVzL0Fzc2Vzc21lbnRSZXN1bHQuanNcIiApO1xudmFyIGlzRW1wdHkgPSByZXF1aXJlKCBcImxvZGFzaC9pc0VtcHR5XCIgKTtcblxuLyoqXG4gKiBDYWxjdWxhdGUgdGhlIHNjb3JlIGJhc2VkIG9uIHRoZSBjdXJyZW50IGltYWdlIGNvdW50LlxuICogQHBhcmFtIHtudW1iZXJ9IGltYWdlQ291bnQgVGhlIGFtb3VudCBvZiBpbWFnZXMgdG8gYmUgY2hlY2tlZCBhZ2FpbnN0LlxuICogQHBhcmFtIHtvYmplY3R9IGkxOG4gVGhlIGxvY2FsZSBvYmplY3QuXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBUaGUgcmVzdWx0aW5nIHNjb3JlIG9iamVjdC5cbiAqL1xudmFyIGNhbGN1bGF0ZUltYWdlQ291bnRSZXN1bHQgPSBmdW5jdGlvbiggaW1hZ2VDb3VudCwgaTE4biApIHtcblx0aWYgKCBpbWFnZUNvdW50ID09PSAwICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzY29yZTogMyxcblx0XHRcdHRleHQ6IGkxOG4uZGdldHRleHQoIFwianMtdGV4dC1hbmFseXNpc1wiLCBcIk5vIGltYWdlcyBhcHBlYXIgaW4gdGhpcyBwYWdlLCBjb25zaWRlciBhZGRpbmcgc29tZSBhcyBhcHByb3ByaWF0ZS5cIiApLFxuXHRcdH07XG5cdH1cblxuXHRyZXR1cm4ge307XG59O1xuXG4vKipcbiAqIENhbGN1bGF0ZSB0aGUgc2NvcmUgYmFzZWQgb24gdGhlIGN1cnJlbnQgaW1hZ2UgYWx0LXRhZyBjb3VudC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBhbHRQcm9wZXJ0aWVzIEFuIG9iamVjdCBjb250YWluaW5nIHRoZSB2YXJpb3VzIGFsdC10YWdzLlxuICogQHBhcmFtIHtvYmplY3R9IGkxOG4gVGhlIGxvY2FsZSBvYmplY3QuXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBUaGUgcmVzdWx0aW5nIHNjb3JlIG9iamVjdC5cbiAqL1xudmFyIGFzc2Vzc0ltYWdlcyA9IGZ1bmN0aW9uKCBhbHRQcm9wZXJ0aWVzLCBpMThuICkge1xuXHQvLyBIYXMgYWx0LXRhZyBhbmQga2V5d29yZHNcblx0aWYgKCBhbHRQcm9wZXJ0aWVzLndpdGhBbHRLZXl3b3JkID4gMCApIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2NvcmU6IDksXG5cdFx0XHR0ZXh0OiBpMThuLmRnZXR0ZXh0KCBcImpzLXRleHQtYW5hbHlzaXNcIiwgXCJUaGUgaW1hZ2VzIG9uIHRoaXMgcGFnZSBjb250YWluIGFsdCBhdHRyaWJ1dGVzIHdpdGggdGhlIGZvY3VzIGtleXdvcmQuXCIgKSxcblx0XHR9O1xuXHR9XG5cblx0Ly8gSGFzIGFsdC10YWcsIGJ1dCBubyBrZXl3b3JkcyBhbmQgaXQncyBub3Qgb2theVxuXHRpZiAoIGFsdFByb3BlcnRpZXMud2l0aEFsdE5vbktleXdvcmQgPiAwICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzY29yZTogNSxcblx0XHRcdHRleHQ6IGkxOG4uZGdldHRleHQoIFwianMtdGV4dC1hbmFseXNpc1wiLCBcIlRoZSBpbWFnZXMgb24gdGhpcyBwYWdlIGRvIG5vdCBoYXZlIGFsdCBhdHRyaWJ1dGVzIGNvbnRhaW5pbmcgdGhlIGZvY3VzIGtleXdvcmQuXCIgKSxcblx0XHR9O1xuXHR9XG5cblx0Ly8gSGFzIGFsdC10YWcsIGJ1dCBubyBrZXl3b3JkIGlzIHNldFxuXHRpZiAoIGFsdFByb3BlcnRpZXMud2l0aEFsdCA+IDAgKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNjb3JlOiA1LFxuXHRcdFx0dGV4dDogaTE4bi5kZ2V0dGV4dCggXCJqcy10ZXh0LWFuYWx5c2lzXCIsIFwiVGhlIGltYWdlcyBvbiB0aGlzIHBhZ2UgY29udGFpbiBhbHQgYXR0cmlidXRlcy5cIiApLFxuXHRcdH07XG5cdH1cblxuXHQvLyBIYXMgbm8gYWx0LXRhZ1xuXHRpZiAoIGFsdFByb3BlcnRpZXMubm9BbHQgPiAwICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzY29yZTogNSxcblx0XHRcdHRleHQ6IGkxOG4uZGdldHRleHQoIFwianMtdGV4dC1hbmFseXNpc1wiLCBcIlRoZSBpbWFnZXMgb24gdGhpcyBwYWdlIGFyZSBtaXNzaW5nIGFsdCBhdHRyaWJ1dGVzLlwiICksXG5cdFx0fTtcblx0fVxuXG5cdHJldHVybiB7fTtcbn07XG5cbi8qKlxuICogRXhlY3V0ZSB0aGUgQXNzZXNzbWVudCBhbmQgcmV0dXJuIGEgcmVzdWx0LlxuICogQHBhcmFtIHtQYXBlcn0gcGFwZXIgVGhlIFBhcGVyIG9iamVjdCB0byBhc3Nlc3MuXG4gKiBAcGFyYW0ge1Jlc2VhcmNoZXJ9IHJlc2VhcmNoZXIgVGhlIFJlc2VhcmNoZXIgb2JqZWN0IGNvbnRhaW5pbmcgYWxsIGF2YWlsYWJsZSByZXNlYXJjaGVzLlxuICogQHBhcmFtIHtvYmplY3R9IGkxOG4gVGhlIGxvY2FsZSBvYmplY3QuXG4gKiBAcmV0dXJucyB7QXNzZXNzbWVudFJlc3VsdH0gVGhlIHJlc3VsdCBvZiB0aGUgYXNzZXNzbWVudCwgY29udGFpbmluZyBib3RoIGEgc2NvcmUgYW5kIGEgZGVzY3JpcHRpdmUgdGV4dC5cbiAqL1xudmFyIHRleHRIYXNJbWFnZXNBc3Nlc3NtZW50ID0gZnVuY3Rpb24oIHBhcGVyLCByZXNlYXJjaGVyLCBpMThuICkge1xuXHR2YXIgYXNzZXNzbWVudFJlc3VsdCA9IG5ldyBBc3Nlc3NtZW50UmVzdWx0KCk7XG5cblx0dmFyIGltYWdlQ291bnQgPSByZXNlYXJjaGVyLmdldFJlc2VhcmNoKCBcImltYWdlQ291bnRcIiApO1xuXHR2YXIgaW1hZ2VDb3VudFJlc3VsdCA9IGNhbGN1bGF0ZUltYWdlQ291bnRSZXN1bHQoIGltYWdlQ291bnQsIGkxOG4gKTtcblxuXHRpZiAoIGlzRW1wdHkoIGltYWdlQ291bnRSZXN1bHQgKSApIHtcblx0XHR2YXIgYWx0VGFnQ291bnQgPSByZXNlYXJjaGVyLmdldFJlc2VhcmNoKCBcImFsdFRhZ0NvdW50XCIgKTtcblx0XHR2YXIgYWx0VGFnQ291bnRSZXN1bHQgPSBhc3Nlc3NJbWFnZXMoIGFsdFRhZ0NvdW50LCBpMThuICk7XG5cblx0XHRhc3Nlc3NtZW50UmVzdWx0LnNldFNjb3JlKCBhbHRUYWdDb3VudFJlc3VsdC5zY29yZSApO1xuXHRcdGFzc2Vzc21lbnRSZXN1bHQuc2V0VGV4dCggYWx0VGFnQ291bnRSZXN1bHQudGV4dCApO1xuXG5cdFx0cmV0dXJuIGFzc2Vzc21lbnRSZXN1bHQ7XG5cdH1cblxuXHRhc3Nlc3NtZW50UmVzdWx0LnNldFNjb3JlKCBpbWFnZUNvdW50UmVzdWx0LnNjb3JlICk7XG5cdGFzc2Vzc21lbnRSZXN1bHQuc2V0VGV4dCggaW1hZ2VDb3VudFJlc3VsdC50ZXh0ICk7XG5cblx0cmV0dXJuIGFzc2Vzc21lbnRSZXN1bHQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0aWRlbnRpZmllcjogXCJ0ZXh0SW1hZ2VzXCIsXG5cdGdldFJlc3VsdDogdGV4dEhhc0ltYWdlc0Fzc2Vzc21lbnQsXG5cdGlzQXBwbGljYWJsZTogZnVuY3Rpb24oIHBhcGVyICkge1xuXHRcdHJldHVybiBwYXBlci5oYXNUZXh0KCk7XG5cdH0sXG59O1xuIiwidmFyIEFzc2Vzc21lbnRSZXN1bHQgPSByZXF1aXJlKCBcIi4uL3ZhbHVlcy9Bc3Nlc3NtZW50UmVzdWx0LmpzXCIgKTtcbnZhciBpblJhbmdlID0gcmVxdWlyZSggXCJsb2Rhc2gvaW5SYW5nZVwiICk7XG5cbnZhciByZWNvbW1lbmRlZE1pbmltdW0gPSAzMDA7XG4vKipcbiAqIENhbGN1bGF0ZSB0aGUgc2NvcmUgYmFzZWQgb24gdGhlIGN1cnJlbnQgd29yZCBjb3VudC5cbiAqIEBwYXJhbSB7bnVtYmVyfSB3b3JkQ291bnQgVGhlIGFtb3VudCBvZiB3b3JkcyB0byBiZSBjaGVja2VkIGFnYWluc3QuXG4gKiBAcGFyYW0ge29iamVjdH0gaTE4biBUaGUgbG9jYWxlIG9iamVjdC5cbiAqIEByZXR1cm5zIHtvYmplY3R9IFRoZSByZXN1bHRpbmcgc2NvcmUgb2JqZWN0LlxuICovXG52YXIgY2FsY3VsYXRlV29yZENvdW50UmVzdWx0ID0gZnVuY3Rpb24oIHdvcmRDb3VudCwgaTE4biApIHtcblx0aWYgKCB3b3JkQ291bnQgPj0gMzAwICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzY29yZTogOSxcblx0XHRcdHRleHQ6IGkxOG4uZG5nZXR0ZXh0KFxuXHRcdFx0XHRcImpzLXRleHQtYW5hbHlzaXNcIixcblx0XHRcdFx0LyogVHJhbnNsYXRvcnM6ICUxJGQgZXhwYW5kcyB0byB0aGUgbnVtYmVyIG9mIHdvcmRzIGluIHRoZSB0ZXh0ICovXG5cdFx0XHRcdFwiVGhlIHRleHQgY29udGFpbnMgJTEkZCB3b3JkLlwiLFxuXHRcdFx0XHRcIlRoZSB0ZXh0IGNvbnRhaW5zICUxJGQgd29yZHMuXCIsXG5cdFx0XHRcdHdvcmRDb3VudFxuXHRcdFx0KSArIFwiIFwiICsgaTE4bi5kbmdldHRleHQoXG5cdFx0XHRcdFwianMtdGV4dC1hbmFseXNpc1wiLFxuXHRcdFx0XHQvKiBUcmFuc2xhdG9yczogVGhlIHByZWNlZGluZyBzZW50ZW5jZSBpcyBcIlRoZSB0ZXh0IGNvbnRhaW5zIHggd29yZHMuXCIsICUyJHMgZXhwYW5kcyB0byB0aGUgcmVjb21tZW5kZWQgbWluaW11bSBvZiB3b3Jkcy4gKi9cblx0XHRcdFx0XCJUaGlzIGlzIG1vcmUgdGhhbiBvciBlcXVhbCB0byB0aGUgcmVjb21tZW5kZWQgbWluaW11bSBvZiAlMiRkIHdvcmQuXCIsXG5cdFx0XHRcdFwiVGhpcyBpcyBtb3JlIHRoYW4gb3IgZXF1YWwgdG8gdGhlIHJlY29tbWVuZGVkIG1pbmltdW0gb2YgJTIkZCB3b3Jkcy5cIixcblx0XHRcdFx0cmVjb21tZW5kZWRNaW5pbXVtXG5cdFx0XHQpLFxuXHRcdH07XG5cdH1cblxuXHRpZiAoIGluUmFuZ2UoIHdvcmRDb3VudCwgMjUwLCAzMDAgKSApIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2NvcmU6IDcsXG5cdFx0XHR0ZXh0OiBpMThuLmRuZ2V0dGV4dChcblx0XHRcdFx0XCJqcy10ZXh0LWFuYWx5c2lzXCIsXG5cdFx0XHRcdC8qIFRyYW5zbGF0b3JzOiAlMSRkIGV4cGFuZHMgdG8gdGhlIG51bWJlciBvZiB3b3JkcyBpbiB0aGUgdGV4dCAqL1xuXHRcdFx0XHRcIlRoZSB0ZXh0IGNvbnRhaW5zICUxJGQgd29yZC5cIixcblx0XHRcdFx0XCJUaGUgdGV4dCBjb250YWlucyAlMSRkIHdvcmRzLlwiLFxuXHRcdFx0XHR3b3JkQ291bnRcblx0XHRcdCkgKyBcIiBcIiArIGkxOG4uZG5nZXR0ZXh0KFxuXHRcdFx0XHRcImpzLXRleHQtYW5hbHlzaXNcIixcblx0XHRcdFx0LyogVHJhbnNsYXRvcnM6IFRoZSBwcmVjZWRpbmcgc2VudGVuY2UgaXMgXCJUaGUgdGV4dCBjb250YWlucyB4IHdvcmRzLlwiLCAlMiRzIGV4cGFuZHMgdG8gdGhlIHJlY29tbWVuZGVkIG1pbmltdW0gb2Ygd29yZHMgKi9cblx0XHRcdFx0XCJUaGlzIGlzIHNsaWdodGx5IGJlbG93IHRoZSByZWNvbW1lbmRlZCBtaW5pbXVtIG9mICUyJGQgd29yZC4gQWRkIGEgYml0IG1vcmUgY29weS5cIixcblx0XHRcdFx0XCJUaGlzIGlzIHNsaWdodGx5IGJlbG93IHRoZSByZWNvbW1lbmRlZCBtaW5pbXVtIG9mICUyJGQgd29yZHMuIEFkZCBhIGJpdCBtb3JlIGNvcHkuXCIsXG5cdFx0XHRcdHJlY29tbWVuZGVkTWluaW11bVxuXHRcdFx0KSxcblx0XHR9O1xuXHR9XG5cblx0aWYgKCBpblJhbmdlKCB3b3JkQ291bnQsIDIwMCwgMjUwICkgKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNjb3JlOiA1LFxuXHRcdFx0dGV4dDogaTE4bi5kbmdldHRleHQoXG5cdFx0XHRcdFwianMtdGV4dC1hbmFseXNpc1wiLFxuXHRcdFx0XHQvKiBUcmFuc2xhdG9yczogJTEkZCBleHBhbmRzIHRvIHRoZSBudW1iZXIgb2Ygd29yZHMgaW4gdGhlIHRleHQgKi9cblx0XHRcdFx0XCJUaGUgdGV4dCBjb250YWlucyAlMSRkIHdvcmQuXCIsXG5cdFx0XHRcdFwiVGhlIHRleHQgY29udGFpbnMgJTEkZCB3b3Jkcy5cIixcblx0XHRcdFx0d29yZENvdW50XG5cdFx0XHQpICsgXCIgXCIgKyBpMThuLmRuZ2V0dGV4dChcblx0XHRcdFx0XCJqcy10ZXh0LWFuYWx5c2lzXCIsXG5cdFx0XHRcdC8qIFRyYW5zbGF0b3JzOiBUaGUgcHJlY2VkaW5nIHNlbnRlbmNlIGlzIFwiVGhlIHRleHQgY29udGFpbnMgeCB3b3Jkcy5cIiwgJTIkcyBleHBhbmRzIHRvIHRoZSByZWNvbW1lbmRlZCBtaW5pbXVtIG9mIHdvcmRzICovXG5cdFx0XHRcdFwiVGhpcyBpcyBiZWxvdyB0aGUgcmVjb21tZW5kZWQgbWluaW11bSBvZiAlMiRkIHdvcmQuIEFkZCBtb3JlIGNvbnRlbnQgdGhhdCBpcyByZWxldmFudCBmb3IgdGhlIHRvcGljLlwiLFxuXHRcdFx0XHRcIlRoaXMgaXMgYmVsb3cgdGhlIHJlY29tbWVuZGVkIG1pbmltdW0gb2YgJTIkZCB3b3Jkcy4gQWRkIG1vcmUgY29udGVudCB0aGF0IGlzIHJlbGV2YW50IGZvciB0aGUgdG9waWMuXCIsXG5cdFx0XHRcdHJlY29tbWVuZGVkTWluaW11bVxuXHRcdFx0KSxcblx0XHR9O1xuXHR9XG5cblx0aWYgKCBpblJhbmdlKCB3b3JkQ291bnQsIDEwMCwgMjAwICkgKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNjb3JlOiAtMTAsXG5cdFx0XHR0ZXh0OiBpMThuLmRuZ2V0dGV4dChcblx0XHRcdFx0XCJqcy10ZXh0LWFuYWx5c2lzXCIsXG5cdFx0XHRcdC8qIFRyYW5zbGF0b3JzOiAlMSRkIGV4cGFuZHMgdG8gdGhlIG51bWJlciBvZiB3b3JkcyBpbiB0aGUgdGV4dCAqL1xuXHRcdFx0XHRcIlRoZSB0ZXh0IGNvbnRhaW5zICUxJGQgd29yZC5cIixcblx0XHRcdFx0XCJUaGUgdGV4dCBjb250YWlucyAlMSRkIHdvcmRzLlwiLFxuXHRcdFx0XHR3b3JkQ291bnRcblx0XHRcdCkgKyBcIiBcIiArIGkxOG4uZG5nZXR0ZXh0KFxuXHRcdFx0XHRcImpzLXRleHQtYW5hbHlzaXNcIixcblx0XHRcdFx0LyogVHJhbnNsYXRvcnM6IFRoZSBwcmVjZWRpbmcgc2VudGVuY2UgaXMgXCJUaGUgdGV4dCBjb250YWlucyB4IHdvcmRzLlwiLCAlMiRzIGV4cGFuZHMgdG8gdGhlIHJlY29tbWVuZGVkIG1pbmltdW0gb2Ygd29yZHMgKi9cblx0XHRcdFx0XCJUaGlzIGlzIGJlbG93IHRoZSByZWNvbW1lbmRlZCBtaW5pbXVtIG9mICUyJGQgd29yZC4gQWRkIG1vcmUgY29udGVudCB0aGF0IGlzIHJlbGV2YW50IGZvciB0aGUgdG9waWMuXCIsXG5cdFx0XHRcdFwiVGhpcyBpcyBiZWxvdyB0aGUgcmVjb21tZW5kZWQgbWluaW11bSBvZiAlMiRkIHdvcmRzLiBBZGQgbW9yZSBjb250ZW50IHRoYXQgaXMgcmVsZXZhbnQgZm9yIHRoZSB0b3BpYy5cIixcblx0XHRcdFx0cmVjb21tZW5kZWRNaW5pbXVtXG5cdFx0XHQpLFxuXHRcdH07XG5cdH1cblxuXHRpZiAoIGluUmFuZ2UoIHdvcmRDb3VudCwgMCwgMTAwICkgKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNjb3JlOiAtMjAsXG5cdFx0XHR0ZXh0OiBpMThuLmRuZ2V0dGV4dChcblx0XHRcdFx0XCJqcy10ZXh0LWFuYWx5c2lzXCIsXG5cdFx0XHRcdC8qIFRyYW5zbGF0b3JzOiAlMSRkIGV4cGFuZHMgdG8gdGhlIG51bWJlciBvZiB3b3JkcyBpbiB0aGUgdGV4dCAqL1xuXHRcdFx0XHRcIlRoZSB0ZXh0IGNvbnRhaW5zICUxJGQgd29yZC5cIixcblx0XHRcdFx0XCJUaGUgdGV4dCBjb250YWlucyAlMSRkIHdvcmRzLlwiLFxuXHRcdFx0XHR3b3JkQ291bnRcblx0XHRcdCkgKyBcIiBcIiArIGkxOG4uZG5nZXR0ZXh0KFxuXHRcdFx0XHRcImpzLXRleHQtYW5hbHlzaXNcIixcblx0XHRcdFx0LyogVHJhbnNsYXRvcnM6IFRoZSBwcmVjZWRpbmcgc2VudGVuY2UgaXMgXCJUaGUgdGV4dCBjb250YWlucyB4IHdvcmRzLlwiLCAlMiRzIGV4cGFuZHMgdG8gdGhlIHJlY29tbWVuZGVkIG1pbmltdW0gb2Ygd29yZHMgKi9cblx0XHRcdFx0XCJUaGlzIGlzIGZhciBiZWxvdyB0aGUgcmVjb21tZW5kZWQgbWluaW11bSBvZiAlMiRkIHdvcmQuIEFkZCBtb3JlIGNvbnRlbnQgdGhhdCBpcyByZWxldmFudCBmb3IgdGhlIHRvcGljLlwiLFxuXHRcdFx0XHRcIlRoaXMgaXMgZmFyIGJlbG93IHRoZSByZWNvbW1lbmRlZCBtaW5pbXVtIG9mICUyJGQgd29yZHMuIEFkZCBtb3JlIGNvbnRlbnQgdGhhdCBpcyByZWxldmFudCBmb3IgdGhlIHRvcGljLlwiLFxuXHRcdFx0XHRyZWNvbW1lbmRlZE1pbmltdW1cblx0XHRcdCksXG5cdFx0fTtcblx0fVxufTtcblxuLyoqXG4gKiBFeGVjdXRlIHRoZSBBc3Nlc3NtZW50IGFuZCByZXR1cm4gYSByZXN1bHQuXG4gKiBAcGFyYW0ge1BhcGVyfSBwYXBlciBUaGUgUGFwZXIgb2JqZWN0IHRvIGFzc2Vzcy5cbiAqIEBwYXJhbSB7UmVzZWFyY2hlcn0gcmVzZWFyY2hlciBUaGUgUmVzZWFyY2hlciBvYmplY3QgY29udGFpbmluZyBhbGwgYXZhaWxhYmxlIHJlc2VhcmNoZXMuXG4gKiBAcGFyYW0ge29iamVjdH0gaTE4biBUaGUgbG9jYWxlIG9iamVjdC5cbiAqIEByZXR1cm5zIHtBc3Nlc3NtZW50UmVzdWx0fSBUaGUgcmVzdWx0IG9mIHRoZSBhc3Nlc3NtZW50LCBjb250YWluaW5nIGJvdGggYSBzY29yZSBhbmQgYSBkZXNjcmlwdGl2ZSB0ZXh0LlxuICovXG52YXIgdGV4dExlbmd0aEFzc2Vzc21lbnQgPSBmdW5jdGlvbiggcGFwZXIsIHJlc2VhcmNoZXIsIGkxOG4gKSB7XG5cdHZhciB3b3JkQ291bnQgPSByZXNlYXJjaGVyLmdldFJlc2VhcmNoKCBcIndvcmRDb3VudEluVGV4dFwiICk7XG5cdHZhciB3b3JkQ291bnRSZXN1bHQgPSBjYWxjdWxhdGVXb3JkQ291bnRSZXN1bHQoIHdvcmRDb3VudCwgaTE4biApO1xuXHR2YXIgYXNzZXNzbWVudFJlc3VsdCA9IG5ldyBBc3Nlc3NtZW50UmVzdWx0KCk7XG5cblx0YXNzZXNzbWVudFJlc3VsdC5zZXRTY29yZSggd29yZENvdW50UmVzdWx0LnNjb3JlICk7XG5cdGFzc2Vzc21lbnRSZXN1bHQuc2V0VGV4dCggaTE4bi5zcHJpbnRmKCB3b3JkQ291bnRSZXN1bHQudGV4dCwgd29yZENvdW50LCByZWNvbW1lbmRlZE1pbmltdW0gKSApO1xuXG5cdHJldHVybiBhc3Nlc3NtZW50UmVzdWx0O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdGlkZW50aWZpZXI6IFwidGV4dExlbmd0aFwiLFxuXHRnZXRSZXN1bHQ6IHRleHRMZW5ndGhBc3Nlc3NtZW50LFxufTtcbiIsInZhciBBc3Nlc3NtZW50UmVzdWx0ID0gcmVxdWlyZSggXCIuLi92YWx1ZXMvQXNzZXNzbWVudFJlc3VsdC5qc1wiICk7XG52YXIgaXNFbXB0eSA9IHJlcXVpcmUoIFwibG9kYXNoL2lzRW1wdHlcIiApO1xuXG4vKipcbiAqIFJldHVybnMgYSBzY29yZSBhbmQgdGV4dCBiYXNlZCBvbiB0aGUgbGlua1N0YXRpc3RpY3Mgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBsaW5rU3RhdGlzdGljcyBUaGUgb2JqZWN0IHdpdGggYWxsIGxpbmtzdGF0aXN0aWNzLlxuICogQHBhcmFtIHtvYmplY3R9IGkxOG4gVGhlIG9iamVjdCB1c2VkIGZvciB0cmFuc2xhdGlvbnNcbiAqIEByZXR1cm5zIHtvYmplY3R9IHJlc3VsdE9iamVjdCB3aXRoIHNjb3JlIGFuZCB0ZXh0XG4gKi9cbnZhciBjYWxjdWxhdGVMaW5rU3RhdGlzdGljc1Jlc3VsdCA9IGZ1bmN0aW9uKCBsaW5rU3RhdGlzdGljcywgaTE4biApIHtcblx0aWYgKCBsaW5rU3RhdGlzdGljcy50b3RhbCA9PT0gMCApIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2NvcmU6IDYsXG5cdFx0XHR0ZXh0OiBpMThuLmRnZXR0ZXh0KCBcImpzLXRleHQtYW5hbHlzaXNcIiwgXCJObyBsaW5rcyBhcHBlYXIgaW4gdGhpcyBwYWdlLCBjb25zaWRlciBhZGRpbmcgc29tZSBhcyBhcHByb3ByaWF0ZS5cIiApLFxuXHRcdH07XG5cdH1cblxuXHRpZiAoIGxpbmtTdGF0aXN0aWNzLmV4dGVybmFsTm9mb2xsb3cgPT09IGxpbmtTdGF0aXN0aWNzLnRvdGFsICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzY29yZTogNyxcblx0XHRcdC8qIFRyYW5zbGF0b3JzOiAlMSRzIGV4cGFuZHMgdGhlIG51bWJlciBvZiBvdXRib3VuZCBsaW5rcyAqL1xuXHRcdFx0dGV4dDogaTE4bi5zcHJpbnRmKCBpMThuLmRnZXR0ZXh0KCBcImpzLXRleHQtYW5hbHlzaXNcIiwgXCJUaGlzIHBhZ2UgaGFzICUxJHMgb3V0Ym91bmQgbGluayhzKSwgYWxsIG5vZm9sbG93ZWQuXCIgKSxcblx0XHRcdFx0bGlua1N0YXRpc3RpY3MuZXh0ZXJuYWxOb2ZvbGxvdyApLFxuXHRcdH07XG5cdH1cblxuXHRpZiAoIGxpbmtTdGF0aXN0aWNzLmV4dGVybmFsTm9mb2xsb3cgPCBsaW5rU3RhdGlzdGljcy5leHRlcm5hbFRvdGFsICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzY29yZTogOCxcblx0XHRcdC8qIFRyYW5zbGF0b3JzOiAlMSRzIGV4cGFuZHMgdG8gdGhlIG51bWJlciBvZiBub2ZvbGxvdyBsaW5rcywgJTIkcyB0byB0aGUgbnVtYmVyIG9mIG91dGJvdW5kIGxpbmtzICovXG5cdFx0XHR0ZXh0OiBpMThuLnNwcmludGYoIGkxOG4uZGdldHRleHQoIFwianMtdGV4dC1hbmFseXNpc1wiLCBcIlRoaXMgcGFnZSBoYXMgJTEkcyBub2ZvbGxvd2VkIGxpbmsocykgYW5kICUyJHMgbm9ybWFsIG91dGJvdW5kIGxpbmsocykuXCIgKSxcblx0XHRcdFx0bGlua1N0YXRpc3RpY3MuZXh0ZXJuYWxOb2ZvbGxvdywgbGlua1N0YXRpc3RpY3MuZXh0ZXJuYWxEb2ZvbGxvdyApLFxuXHRcdH07XG5cdH1cblxuXHRpZiAoIGxpbmtTdGF0aXN0aWNzLmV4dGVybmFsRG9mb2xsb3cgPT09IGxpbmtTdGF0aXN0aWNzLnRvdGFsICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzY29yZTogOSxcblx0XHRcdC8qIFRyYW5zbGF0b3JzOiAlMSRzIGV4cGFuZHMgdG8gdGhlIG51bWJlciBvZiBvdXRib3VuZCBsaW5rcyAqL1xuXHRcdFx0dGV4dDogaTE4bi5zcHJpbnRmKCBpMThuLmRnZXR0ZXh0KCBcImpzLXRleHQtYW5hbHlzaXNcIiwgXCJUaGlzIHBhZ2UgaGFzICUxJHMgb3V0Ym91bmQgbGluayhzKS5cIiApLCBsaW5rU3RhdGlzdGljcy5leHRlcm5hbFRvdGFsICksXG5cdFx0fTtcblx0fVxuXG5cdHJldHVybiB7fTtcbn07XG5cbi8qKlxuICogUnVucyB0aGUgZ2V0TGlua1N0YXRpc3RpY3MgbW9kdWxlLCBiYXNlZCBvbiB0aGlzIHJldHVybnMgYW4gYXNzZXNzbWVudCByZXN1bHQgd2l0aCBzY29yZS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gcGFwZXIgVGhlIHBhcGVyIHRvIHVzZSBmb3IgdGhlIGFzc2Vzc21lbnQuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzZWFyY2hlciBUaGUgcmVzZWFyY2hlciB1c2VkIGZvciBjYWxsaW5nIHJlc2VhcmNoLlxuICogQHBhcmFtIHtvYmplY3R9IGkxOG4gVGhlIG9iamVjdCB1c2VkIGZvciB0cmFuc2xhdGlvbnNcbiAqIEByZXR1cm5zIHtvYmplY3R9IHRoZSBBc3Nlc3NtZW50cmVzdWx0XG4gKi9cbnZhciB0ZXh0SGFzTGlua3NBc3Nlc3NtZW50ID0gZnVuY3Rpb24oIHBhcGVyLCByZXNlYXJjaGVyLCBpMThuICkge1xuXHR2YXIgbGlua1N0YXRpc3RpY3MgPSByZXNlYXJjaGVyLmdldFJlc2VhcmNoKCBcImdldExpbmtTdGF0aXN0aWNzXCIgKTtcblx0dmFyIGFzc2Vzc21lbnRSZXN1bHQgPSBuZXcgQXNzZXNzbWVudFJlc3VsdCgpO1xuXHRpZiAoICEgaXNFbXB0eSggbGlua1N0YXRpc3RpY3MgKSApIHtcblx0XHR2YXIgbGlua1N0YXRpc3RpY3NSZXN1bHQgPSBjYWxjdWxhdGVMaW5rU3RhdGlzdGljc1Jlc3VsdCggbGlua1N0YXRpc3RpY3MsIGkxOG4gKTtcblx0XHRhc3Nlc3NtZW50UmVzdWx0LnNldFNjb3JlKCBsaW5rU3RhdGlzdGljc1Jlc3VsdC5zY29yZSApO1xuXHRcdGFzc2Vzc21lbnRSZXN1bHQuc2V0VGV4dCggbGlua1N0YXRpc3RpY3NSZXN1bHQudGV4dCApO1xuXHR9XG5cdHJldHVybiBhc3Nlc3NtZW50UmVzdWx0O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdGlkZW50aWZpZXI6IFwidGV4dExpbmtzXCIsXG5cdGdldFJlc3VsdDogdGV4dEhhc0xpbmtzQXNzZXNzbWVudCxcblx0aXNBcHBsaWNhYmxlOiBmdW5jdGlvbiggcGFwZXIgKSB7XG5cdFx0cmV0dXJuIHBhcGVyLmhhc1RleHQoKTtcblx0fSxcbn07XG4iLCJ2YXIgQXNzZXNzbWVudFJlc3VsdCA9IHJlcXVpcmUoIFwiLi4vdmFsdWVzL0Fzc2Vzc21lbnRSZXN1bHQuanNcIiApO1xudmFyIGVzY2FwZSA9IHJlcXVpcmUoIFwibG9kYXNoL2VzY2FwZVwiICk7XG5cbi8qKlxuICogRXhlY3V0ZXMgdGhlIHBhZ2V0aXRsZSBrZXl3b3JkIGFzc2Vzc21lbnQgYW5kIHJldHVybnMgYW4gYXNzZXNzbWVudCByZXN1bHQuXG4gKiBAcGFyYW0ge1BhcGVyfSBwYXBlciBUaGUgUGFwZXIgb2JqZWN0IHRvIGFzc2Vzcy5cbiAqIEBwYXJhbSB7UmVzZWFyY2hlcn0gcmVzZWFyY2hlciBUaGUgUmVzZWFyY2hlciBvYmplY3QgY29udGFpbmluZyBhbGwgYXZhaWxhYmxlIHJlc2VhcmNoZXMuXG4gKiBAcGFyYW0ge29iamVjdH0gaTE4biBUaGUgbG9jYWxlIG9iamVjdC5cbiAqIEByZXR1cm5zIHtBc3Nlc3NtZW50UmVzdWx0fSBUaGUgcmVzdWx0IG9mIHRoZSBhc3Nlc3NtZW50IHdpdGggdGV4dCBhbmQgc2NvcmVcbiAqL1xudmFyIHRpdGxlSGFzS2V5d29yZEFzc2Vzc21lbnQgPSBmdW5jdGlvbiggcGFwZXIsIHJlc2VhcmNoZXIsIGkxOG4gKSB7XG5cdHZhciBrZXl3b3JkTWF0Y2hlcyA9IHJlc2VhcmNoZXIuZ2V0UmVzZWFyY2goIFwiZmluZEtleXdvcmRJblBhZ2VUaXRsZVwiICk7XG5cdHZhciBzY29yZSwgdGV4dDtcblxuXHRpZiAoIGtleXdvcmRNYXRjaGVzLm1hdGNoZXMgPT09IDAgKSB7XG5cdFx0c2NvcmUgPSAyO1xuXHRcdHRleHQgPSBpMThuLnNwcmludGYoIGkxOG4uZGdldHRleHQoIFwianMtdGV4dC1hbmFseXNpc1wiLCBcIlRoZSBmb2N1cyBrZXl3b3JkICclMSRzJyBkb2VzIFwiICtcblx0XHRcdFwibm90IGFwcGVhciBpbiB0aGUgU0VPIHRpdGxlLlwiICksIGVzY2FwZSggcGFwZXIuZ2V0S2V5d29yZCgpICkgKTtcblx0fVxuXG5cdGlmICgga2V5d29yZE1hdGNoZXMubWF0Y2hlcyA+IDAgJiYga2V5d29yZE1hdGNoZXMucG9zaXRpb24gPT09IDAgKSB7XG5cdFx0c2NvcmUgPSA5O1xuXHRcdHRleHQgPSBpMThuLmRnZXR0ZXh0KCBcImpzLXRleHQtYW5hbHlzaXNcIiwgXCJUaGUgU0VPIHRpdGxlIGNvbnRhaW5zIHRoZSBmb2N1cyBrZXl3b3JkLCBhdCB0aGUgYmVnaW5uaW5nIHdoaWNoIGlzIGNvbnNpZGVyZWQgXCIgK1xuXHRcdFx0XCJ0byBpbXByb3ZlIHJhbmtpbmdzLlwiICk7XG5cdH1cblxuXHRpZiAoIGtleXdvcmRNYXRjaGVzLm1hdGNoZXMgPiAwICYmIGtleXdvcmRNYXRjaGVzLnBvc2l0aW9uID4gMCApIHtcblx0XHRzY29yZSA9IDY7XG5cdFx0dGV4dCA9IGkxOG4uZGdldHRleHQoIFwianMtdGV4dC1hbmFseXNpc1wiLCBcIlRoZSBTRU8gdGl0bGUgY29udGFpbnMgdGhlIGZvY3VzIGtleXdvcmQsIGJ1dCBpdCBkb2VzIG5vdCBhcHBlYXIgYXQgdGhlIGJlZ2lubmluZztcIiArXG5cdFx0XHRcIiB0cnkgYW5kIG1vdmUgaXQgdG8gdGhlIGJlZ2lubmluZy5cIiApO1xuXHR9XG5cdHZhciBhc3Nlc3NtZW50UmVzdWx0ID0gbmV3IEFzc2Vzc21lbnRSZXN1bHQoKTtcblxuXHRhc3Nlc3NtZW50UmVzdWx0LnNldFNjb3JlKCBzY29yZSApO1xuXHRhc3Nlc3NtZW50UmVzdWx0LnNldFRleHQoIHRleHQgKTtcblxuXHRyZXR1cm4gYXNzZXNzbWVudFJlc3VsdDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRpZGVudGlmaWVyOiBcInRpdGxlS2V5d29yZFwiLFxuXHRnZXRSZXN1bHQ6IHRpdGxlSGFzS2V5d29yZEFzc2Vzc21lbnQsXG5cdGlzQXBwbGljYWJsZTogZnVuY3Rpb24oIHBhcGVyICkge1xuXHRcdHJldHVybiBwYXBlci5oYXNLZXl3b3JkKCk7XG5cdH0sXG59O1xuIiwidmFyIEFzc2Vzc21lbnRSZXN1bHQgPSByZXF1aXJlKCBcIi4uL3ZhbHVlcy9Bc3Nlc3NtZW50UmVzdWx0LmpzXCIgKTtcblxuLyoqXG4gKiBDYWxjdWxhdGUgdGhlIHNjb3JlIGJhc2VkIG9uIHdoZXRoZXIgb3Igbm90IHRoZXJlJ3MgYSBrZXl3b3JkIGluIHRoZSB1cmwuXG4gKiBAcGFyYW0ge251bWJlcn0ga2V5d29yZHNSZXN1bHQgVGhlIGFtb3VudCBvZiBrZXl3b3JkcyB0byBiZSBjaGVja2VkIGFnYWluc3QuXG4gKiBAcGFyYW0ge29iamVjdH0gaTE4biBUaGUgbG9jYWxlIG9iamVjdC5cbiAqIEByZXR1cm5zIHtvYmplY3R9IFRoZSByZXN1bHRpbmcgc2NvcmUgb2JqZWN0LlxuICovXG52YXIgY2FsY3VsYXRlVXJsS2V5d29yZENvdW50UmVzdWx0ID0gZnVuY3Rpb24oIGtleXdvcmRzUmVzdWx0LCBpMThuICkge1xuXHRpZiAoIGtleXdvcmRzUmVzdWx0ID4gMCApIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2NvcmU6IDksXG5cdFx0XHR0ZXh0OiBpMThuLmRnZXR0ZXh0KCBcImpzLXRleHQtYW5hbHlzaXNcIiwgXCJUaGUgZm9jdXMga2V5d29yZCBhcHBlYXJzIGluIHRoZSBVUkwgZm9yIHRoaXMgcGFnZS5cIiApLFxuXHRcdH07XG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdHNjb3JlOiA2LFxuXHRcdHRleHQ6IGkxOG4uZGdldHRleHQoIFwianMtdGV4dC1hbmFseXNpc1wiLCBcIlRoZSBmb2N1cyBrZXl3b3JkIGRvZXMgbm90IGFwcGVhciBpbiB0aGUgVVJMIGZvciB0aGlzIHBhZ2UuIFwiICtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiSWYgeW91IGRlY2lkZSB0byByZW5hbWUgdGhlIFVSTCBiZSBzdXJlIHRvIGNoZWNrIHRoZSBvbGQgVVJMIDMwMSByZWRpcmVjdHMgdG8gdGhlIG5ldyBvbmUhXCIgKSxcblx0fTtcbn07XG5cbi8qKlxuICogRXhlY3V0ZSB0aGUgQXNzZXNzbWVudCBhbmQgcmV0dXJuIGEgcmVzdWx0LlxuICogQHBhcmFtIHtQYXBlcn0gcGFwZXIgVGhlIFBhcGVyIG9iamVjdCB0byBhc3Nlc3MuXG4gKiBAcGFyYW0ge1Jlc2VhcmNoZXJ9IHJlc2VhcmNoZXIgVGhlIFJlc2VhcmNoZXIgb2JqZWN0IGNvbnRhaW5pbmcgYWxsIGF2YWlsYWJsZSByZXNlYXJjaGVzLlxuICogQHBhcmFtIHtvYmplY3R9IGkxOG4gVGhlIGxvY2FsZSBvYmplY3QuXG4gKiBAcmV0dXJucyB7QXNzZXNzbWVudFJlc3VsdH0gVGhlIHJlc3VsdCBvZiB0aGUgYXNzZXNzbWVudCwgY29udGFpbmluZyBib3RoIGEgc2NvcmUgYW5kIGEgZGVzY3JpcHRpdmUgdGV4dC5cbiAqL1xudmFyIHVybEhhc0tleXdvcmRBc3Nlc3NtZW50ID0gZnVuY3Rpb24oIHBhcGVyLCByZXNlYXJjaGVyLCBpMThuICkge1xuXHR2YXIga2V5d29yZHMgPSByZXNlYXJjaGVyLmdldFJlc2VhcmNoKCBcImtleXdvcmRDb3VudEluVXJsXCIgKTtcblx0dmFyIGtleXdvcmRzUmVzdWx0ID0gY2FsY3VsYXRlVXJsS2V5d29yZENvdW50UmVzdWx0KCBrZXl3b3JkcywgaTE4biApO1xuXG5cdHZhciBhc3Nlc3NtZW50UmVzdWx0ID0gbmV3IEFzc2Vzc21lbnRSZXN1bHQoKTtcblx0YXNzZXNzbWVudFJlc3VsdC5zZXRTY29yZSgga2V5d29yZHNSZXN1bHQuc2NvcmUgKTtcblx0YXNzZXNzbWVudFJlc3VsdC5zZXRUZXh0KCBrZXl3b3Jkc1Jlc3VsdC50ZXh0ICk7XG5cblx0cmV0dXJuIGFzc2Vzc21lbnRSZXN1bHQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0aWRlbnRpZmllcjogXCJ1cmxLZXl3b3JkXCIsXG5cdGdldFJlc3VsdDogdXJsSGFzS2V5d29yZEFzc2Vzc21lbnQsXG5cdGlzQXBwbGljYWJsZTogZnVuY3Rpb24oIHBhcGVyICkge1xuXHRcdHJldHVybiBwYXBlci5oYXNLZXl3b3JkKCkgJiYgcGFwZXIuaGFzVXJsKCk7XG5cdH0sXG59O1xuIiwidmFyIEFzc2Vzc21lbnRSZXN1bHQgPSByZXF1aXJlKCBcIi4uL3ZhbHVlcy9Bc3Nlc3NtZW50UmVzdWx0LmpzXCIgKTtcblxuLyoqXG4gKiBUaGUgYXNzZXNzbWVudCB0aGF0IGNoZWNrcyB0aGUgdXJsIGxlbmd0aFxuICpcbiAqIEBwYXJhbSB7UGFwZXJ9IHBhcGVyIFRoZSBwYXBlciB0byBydW4gdGhpcyBhc3Nlc3NtZW50IG9uLlxuICogQHBhcmFtIHtvYmplY3R9IHJlc2VhcmNoZXIgVGhlIHJlc2VhcmNoZXIgdXNlZCBmb3IgdGhlIGFzc2Vzc21lbnQuXG4gKiBAcGFyYW0ge29iamVjdH0gaTE4biBUaGUgaTE4bi1vYmplY3QgdXNlZCBmb3IgcGFyc2luZyB0cmFuc2xhdGlvbnMuXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBhbiBBc3Nlc3NtZW50UmVzdWx0IHdpdGggdGhlIHNjb3JlIGFuZCB0aGUgZm9ybWF0dGVkIHRleHQuXG4gKi9cbnZhciB1cmxMZW5ndGhBc3Nlc3NtZW50ID0gZnVuY3Rpb24oIHBhcGVyLCByZXNlYXJjaGVyLCBpMThuICkge1xuXHR2YXIgdXJsSXNUb29Mb25nID0gcmVzZWFyY2hlci5nZXRSZXNlYXJjaCggXCJ1cmxMZW5ndGhcIiApO1xuXHR2YXIgYXNzZXNzbWVudFJlc3VsdCA9IG5ldyBBc3Nlc3NtZW50UmVzdWx0KCk7XG5cdGlmICggdXJsSXNUb29Mb25nICkge1xuXHRcdHZhciBzY29yZSA9IDU7XG5cdFx0dmFyIHRleHQgPSBpMThuLmRnZXR0ZXh0KCBcImpzLXRleHQtYW5hbHlzaXNcIiwgXCJUaGUgc2x1ZyBmb3IgdGhpcyBwYWdlIGlzIGEgYml0IGxvbmcsIGNvbnNpZGVyIHNob3J0ZW5pbmcgaXQuXCIgKTtcblx0XHRhc3Nlc3NtZW50UmVzdWx0LnNldFNjb3JlKCBzY29yZSApO1xuXHRcdGFzc2Vzc21lbnRSZXN1bHQuc2V0VGV4dCggdGV4dCApO1xuXHR9XG5cdHJldHVybiBhc3Nlc3NtZW50UmVzdWx0O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdGlkZW50aWZpZXI6IFwidXJsTGVuZ3RoXCIsXG5cdGdldFJlc3VsdDogdXJsTGVuZ3RoQXNzZXNzbWVudCxcblx0aXNBcHBsaWNhYmxlOiBmdW5jdGlvbiggcGFwZXIgKSB7XG5cdFx0cmV0dXJuIHBhcGVyLmhhc1VybCgpO1xuXHR9LFxufTtcbiIsInZhciBBc3Nlc3NtZW50UmVzdWx0ID0gcmVxdWlyZSggXCIuLi92YWx1ZXMvQXNzZXNzbWVudFJlc3VsdC5qc1wiICk7XG5cbi8qKlxuICogQ2FsY3VsYXRlIHRoZSBzY29yZSBiYXNlZCBvbiB0aGUgYW1vdW50IG9mIHN0b3Agd29yZHMgaW4gdGhlIHVybC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBzdG9wV29yZENvdW50IFRoZSBhbW91bnQgb2Ygc3RvcCB3b3JkcyB0byBiZSBjaGVja2VkIGFnYWluc3QuXG4gKiBAcGFyYW0ge29iamVjdH0gaTE4biBUaGUgbG9jYWxlIG9iamVjdC5cbiAqIEByZXR1cm5zIHtvYmplY3R9IFRoZSByZXN1bHRpbmcgc2NvcmUgb2JqZWN0LlxuICovXG52YXIgY2FsY3VsYXRlVXJsU3RvcFdvcmRzQ291bnRSZXN1bHQgPSBmdW5jdGlvbiggc3RvcFdvcmRDb3VudCwgaTE4biApIHtcblx0aWYgKCBzdG9wV29yZENvdW50ID4gMCApIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2NvcmU6IDUsXG5cdFx0XHR0ZXh0OiBpMThuLmRuZ2V0dGV4dChcblx0XHRcdFx0XCJqcy10ZXh0LWFuYWx5c2lzXCIsXG5cdFx0XHRcdC8qIFRyYW5zbGF0b3JzOiAlMSRzIG9wZW5zIGEgbGluayB0byBhIHdpa2lwZWRpYSBhcnRpY2xlIGFib3V0IHN0b3Agd29yZHMsICUyJHMgY2xvc2VzIHRoZSBsaW5rICovXG5cdFx0XHRcdFwiVGhlIHNsdWcgZm9yIHRoaXMgcGFnZSBjb250YWlucyBhICUxJHNzdG9wIHdvcmQlMiRzLCBjb25zaWRlciByZW1vdmluZyBpdC5cIixcblx0XHRcdFx0XCJUaGUgc2x1ZyBmb3IgdGhpcyBwYWdlIGNvbnRhaW5zICUxJHNzdG9wIHdvcmRzJTIkcywgY29uc2lkZXIgcmVtb3ZpbmcgdGhlbS5cIixcblx0XHRcdFx0c3RvcFdvcmRDb3VudFxuXHRcdFx0KSxcblx0XHR9O1xuXHR9XG5cblx0cmV0dXJuIHt9O1xufTtcblxuLyoqXG4gKiBFeGVjdXRlIHRoZSBBc3Nlc3NtZW50IGFuZCByZXR1cm4gYSByZXN1bHQuXG4gKiBAcGFyYW0ge1BhcGVyfSBwYXBlciBUaGUgUGFwZXIgb2JqZWN0IHRvIGFzc2Vzcy5cbiAqIEBwYXJhbSB7UmVzZWFyY2hlcn0gcmVzZWFyY2hlciBUaGUgUmVzZWFyY2hlciBvYmplY3QgY29udGFpbmluZyBhbGwgYXZhaWxhYmxlIHJlc2VhcmNoZXMuXG4gKiBAcGFyYW0ge29iamVjdH0gaTE4biBUaGUgbG9jYWxlIG9iamVjdC5cbiAqIEByZXR1cm5zIHtBc3Nlc3NtZW50UmVzdWx0fSBUaGUgcmVzdWx0IG9mIHRoZSBhc3Nlc3NtZW50LCBjb250YWluaW5nIGJvdGggYSBzY29yZSBhbmQgYSBkZXNjcmlwdGl2ZSB0ZXh0LlxuICovXG52YXIgdXJsSGFzU3RvcFdvcmRzQXNzZXNzbWVudCA9IGZ1bmN0aW9uKCBwYXBlciwgcmVzZWFyY2hlciwgaTE4biApIHtcblx0dmFyIHN0b3BXb3JkcyA9IHJlc2VhcmNoZXIuZ2V0UmVzZWFyY2goIFwic3RvcFdvcmRzSW5VcmxcIiApO1xuXHR2YXIgc3RvcFdvcmRzUmVzdWx0ID0gY2FsY3VsYXRlVXJsU3RvcFdvcmRzQ291bnRSZXN1bHQoIHN0b3BXb3Jkcy5sZW5ndGgsIGkxOG4gKTtcblxuXHR2YXIgYXNzZXNzbWVudFJlc3VsdCA9IG5ldyBBc3Nlc3NtZW50UmVzdWx0KCk7XG5cdGFzc2Vzc21lbnRSZXN1bHQuc2V0U2NvcmUoIHN0b3BXb3Jkc1Jlc3VsdC5zY29yZSApO1xuXHRhc3Nlc3NtZW50UmVzdWx0LnNldFRleHQoIGkxOG4uc3ByaW50Zihcblx0XHRzdG9wV29yZHNSZXN1bHQudGV4dCxcblx0XHQvKiBUcmFuc2xhdG9yczogdGhpcyBsaW5rIGlzIHJlZmVycmVkIHRvIGluIHRoZSBjb250ZW50IGFuYWx5c2lzIHdoZW4gYSBzbHVnIGNvbnRhaW5zIG9uZSBvciBtb3JlIHN0b3Agd29yZHMgKi9cblx0XHRcIjxhIGhyZWY9J1wiICsgaTE4bi5kZ2V0dGV4dCggXCJqcy10ZXh0LWFuYWx5c2lzXCIsIFwiaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TdG9wX3dvcmRzXCIgKSArIFwiJyB0YXJnZXQ9J25ldyc+XCIsXG5cdFx0XCI8L2E+XCJcblx0KSApO1xuXG5cdHJldHVybiBhc3Nlc3NtZW50UmVzdWx0O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdGlkZW50aWZpZXI6IFwidXJsU3RvcFdvcmRzXCIsXG5cdGdldFJlc3VsdDogdXJsSGFzU3RvcFdvcmRzQXNzZXNzbWVudCxcbn07XG4iLCJ2YXIgUmVzZWFyY2hlciA9IHJlcXVpcmUoIFwiLi9yZXNlYXJjaGVyLmpzXCIgKTtcbnZhciBNaXNzaW5nQXJndW1lbnQgPSByZXF1aXJlKCBcIi4vZXJyb3JzL21pc3NpbmdBcmd1bWVudFwiICk7XG52YXIgcmVtb3ZlRHVwbGljYXRlTWFya3MgPSByZXF1aXJlKCBcIi4vbWFya2Vycy9yZW1vdmVEdXBsaWNhdGVNYXJrc1wiICk7XG52YXIgQXNzZXNzbWVudFJlc3VsdCA9IHJlcXVpcmUoIFwiLi92YWx1ZXMvQXNzZXNzbWVudFJlc3VsdC5qc1wiICk7XG52YXIgc2hvd1RyYWNlID0gcmVxdWlyZSggXCIuL2hlbHBlcnMvZXJyb3JzLmpzXCIgKS5zaG93VHJhY2U7XG5cbnZhciBpc1VuZGVmaW5lZCA9IHJlcXVpcmUoIFwibG9kYXNoL2lzVW5kZWZpbmVkXCIgKTtcbnZhciBpc0Z1bmN0aW9uID0gcmVxdWlyZSggXCJsb2Rhc2gvaXNGdW5jdGlvblwiICk7XG52YXIgZm9yRWFjaCA9IHJlcXVpcmUoIFwibG9kYXNoL2ZvckVhY2hcIiApO1xudmFyIGZpbHRlciA9IHJlcXVpcmUoIFwibG9kYXNoL2ZpbHRlclwiICk7XG52YXIgbWFwID0gcmVxdWlyZSggXCJsb2Rhc2gvbWFwXCIgKTtcbnZhciBmaW5kSW5kZXggPSByZXF1aXJlKCBcImxvZGFzaC9maW5kSW5kZXhcIiApO1xudmFyIGZpbmQgPSByZXF1aXJlKCBcImxvZGFzaC9maW5kXCIgKTtcblxudmFyIFNjb3JlUmF0aW5nID0gOTtcblxuLyoqXG4gKiBDcmVhdGVzIHRoZSBBc3Nlc3NvclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpMThuIFRoZSBpMThuIG9iamVjdCB1c2VkIGZvciB0cmFuc2xhdGlvbnMuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBUaGUgb3B0aW9ucyBmb3IgdGhpcyBhc3Nlc3Nvci5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zLm1hcmtlciBUaGUgbWFya2VyIHRvIHBhc3MgdGhlIGxpc3Qgb2YgbWFya3MgdG8uXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnZhciBBc3Nlc3NvciA9IGZ1bmN0aW9uKCBpMThuLCBvcHRpb25zICkge1xuXHR0aGlzLnNldEkxOG4oIGkxOG4gKTtcblx0dGhpcy5fYXNzZXNzbWVudHMgPSBbXTtcblxuXHR0aGlzLl9vcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbn07XG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBpMThuIG9iamVjdCBpcyBkZWZpbmVkIGFuZCBzZXRzIGl0LlxuICogQHBhcmFtIHtPYmplY3R9IGkxOG4gVGhlIGkxOG4gb2JqZWN0IHVzZWQgZm9yIHRyYW5zbGF0aW9ucy5cbiAqIEB0aHJvd3Mge01pc3NpbmdBcmd1bWVudH0gUGFyYW1ldGVyIG5lZWRzIHRvIGJlIGEgdmFsaWQgaTE4biBvYmplY3QuXG4gKi9cbkFzc2Vzc29yLnByb3RvdHlwZS5zZXRJMThuID0gZnVuY3Rpb24oIGkxOG4gKSB7XG5cdGlmICggaXNVbmRlZmluZWQoIGkxOG4gKSApIHtcblx0XHR0aHJvdyBuZXcgTWlzc2luZ0FyZ3VtZW50KCBcIlRoZSBhc3Nlc3NvciByZXF1aXJlcyBhbiBpMThuIG9iamVjdC5cIiApO1xuXHR9XG5cdHRoaXMuaTE4biA9IGkxOG47XG59O1xuXG4vKipcbiAqIEdldHMgYWxsIGF2YWlsYWJsZSBhc3Nlc3NtZW50cy5cbiAqIEByZXR1cm5zIHtvYmplY3R9IGFzc2Vzc21lbnRcbiAqL1xuQXNzZXNzb3IucHJvdG90eXBlLmdldEF2YWlsYWJsZUFzc2Vzc21lbnRzID0gZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzLl9hc3Nlc3NtZW50cztcbn07XG5cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgb3Igbm90IHRoZSBBc3Nlc3NtZW50IGlzIGFwcGxpY2FibGUuXG4gKiBAcGFyYW0ge09iamVjdH0gYXNzZXNzbWVudCBUaGUgQXNzZXNzbWVudCBvYmplY3QgdGhhdCBuZWVkcyB0byBiZSBjaGVja2VkLlxuICogQHBhcmFtIHtQYXBlcn0gcGFwZXIgVGhlIFBhcGVyIG9iamVjdCB0byBjaGVjayBhZ2FpbnN0LlxuICogQHBhcmFtIHtSZXNlYXJjaGVyfSBbcmVzZWFyY2hlcl0gVGhlIFJlc2VhcmNoZXIgb2JqZWN0IGNvbnRhaW5pbmcgYWRkaXRpb25hbCBpbmZvcm1hdGlvbi5cbiAqIEByZXR1cm5zIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgQXNzZXNzbWVudCBpcyBhcHBsaWNhYmxlLlxuICovXG5Bc3Nlc3Nvci5wcm90b3R5cGUuaXNBcHBsaWNhYmxlID0gZnVuY3Rpb24oIGFzc2Vzc21lbnQsIHBhcGVyLCByZXNlYXJjaGVyICkge1xuXHRpZiAoIGFzc2Vzc21lbnQuaGFzT3duUHJvcGVydHkoIFwiaXNBcHBsaWNhYmxlXCIgKSApIHtcblx0XHRyZXR1cm4gYXNzZXNzbWVudC5pc0FwcGxpY2FibGUoIHBhcGVyLCByZXNlYXJjaGVyICk7XG5cdH1cblxuXHRyZXR1cm4gdHJ1ZTtcbn07XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIG9yIG5vdCBhbiBhc3Nlc3NtZW50IGhhcyBhIG1hcmtlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhc3Nlc3NtZW50IFRoZSBhc3Nlc3NtZW50IHRvIGNoZWNrIGZvci5cbiAqIEByZXR1cm5zIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgYXNzZXNzbWVudCBoYXMgYSBtYXJrZXIuXG4gKi9cbkFzc2Vzc29yLnByb3RvdHlwZS5oYXNNYXJrZXIgPSBmdW5jdGlvbiggYXNzZXNzbWVudCApIHtcblx0aWYgKCAhIGlzVW5kZWZpbmVkKCB3aW5kb3cgKSAmJiAhIGlzVW5kZWZpbmVkKCB3aW5kb3cueW9hc3RIaWRlTWFya2VycyApICYmIHdpbmRvdy55b2FzdEhpZGVNYXJrZXJzICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiBpc0Z1bmN0aW9uKCB0aGlzLl9vcHRpb25zLm1hcmtlciApICYmIGFzc2Vzc21lbnQuaGFzT3duUHJvcGVydHkoIFwiZ2V0TWFya3NcIiApO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBzcGVjaWZpYyBtYXJrZXIgZm9yIHRoaXMgYXNzZXNzb3JcbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFRoZSBzcGVjaWZpYyBtYXJrZXIgZm9yIHRoaXMgYXNzZXNzb3IuXG4gKi9cbkFzc2Vzc29yLnByb3RvdHlwZS5nZXRTcGVjaWZpY01hcmtlciA9IGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcy5fb3B0aW9ucy5tYXJrZXI7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIHBhcGVyIHRoYXQgd2FzIG1vc3QgcmVjZW50bHkgYXNzZXNzZWRcbiAqXG4gKiBAcmV0dXJucyB7UGFwZXJ9IFRoZSBwYXBlciB0aGF0IHdhcyBtb3N0IHJlY2VudGx5IGFzc2Vzc2VkLlxuICovXG5Bc3Nlc3Nvci5wcm90b3R5cGUuZ2V0UGFwZXIgPSBmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXMuX2xhc3RQYXBlcjtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgbWFya2VyIGZvciBhIGdpdmVuIGFzc2Vzc21lbnQsIGNvbXBvc2VzIHRoZSBzcGVjaWZpYyBtYXJrZXIgd2l0aCB0aGUgYXNzZXNzbWVudCBnZXRNYXJrcyBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYXNzZXNzbWVudCBUaGUgYXNzZXNzbWVudCBmb3Igd2hpY2ggd2UgYXJlIHJldHJpZXZpbmcgdGhlIGNvbXBvc2VkIG1hcmtlci5cbiAqIEBwYXJhbSB7UGFwZXJ9IHBhcGVyIFRoZSBwYXBlciB0byByZXRyaWV2ZSB0aGUgbWFya2VyIGZvci5cbiAqIEBwYXJhbSB7UmVzZWFyY2hlcn0gcmVzZWFyY2hlciBUaGUgcmVzZWFyY2hlciBmb3IgdGhlIHBhcGVyLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIHRoYXQgY2FuIG1hcmsgdGhlIGdpdmVuIHBhcGVyIGFjY29yZGluZyB0byB0aGUgZ2l2ZW4gYXNzZXNzbWVudC5cbiAqL1xuQXNzZXNzb3IucHJvdG90eXBlLmdldE1hcmtlciA9IGZ1bmN0aW9uKCBhc3Nlc3NtZW50LCBwYXBlciwgcmVzZWFyY2hlciApIHtcblx0dmFyIHNwZWNpZmljTWFya2VyID0gdGhpcy5fb3B0aW9ucy5tYXJrZXI7XG5cblx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtYXJrcyA9IGFzc2Vzc21lbnQuZ2V0TWFya3MoIHBhcGVyLCByZXNlYXJjaGVyICk7XG5cblx0XHRtYXJrcyA9IHJlbW92ZUR1cGxpY2F0ZU1hcmtzKCBtYXJrcyApO1xuXG5cdFx0c3BlY2lmaWNNYXJrZXIoIHBhcGVyLCBtYXJrcyApO1xuXHR9O1xufTtcblxuLyoqXG4gKiBSdW5zIHRoZSByZXNlYXJjaGVzIGRlZmluZWQgaW4gdGhlIHRhc2tsaXN0IG9yIHRoZSBkZWZhdWx0IHJlc2VhcmNoZXMuXG4gKiBAcGFyYW0ge1BhcGVyfSBwYXBlciBUaGUgcGFwZXIgdG8gcnVuIGFzc2Vzc21lbnRzIG9uLlxuICovXG5Bc3Nlc3Nvci5wcm90b3R5cGUuYXNzZXNzID0gZnVuY3Rpb24oIHBhcGVyICkge1xuXHR2YXIgcmVzZWFyY2hlciA9IG5ldyBSZXNlYXJjaGVyKCBwYXBlciApO1xuXHR2YXIgYXNzZXNzbWVudHMgPSB0aGlzLmdldEF2YWlsYWJsZUFzc2Vzc21lbnRzKCk7XG5cdHRoaXMucmVzdWx0cyA9IFtdO1xuXG5cdGFzc2Vzc21lbnRzID0gZmlsdGVyKCBhc3Nlc3NtZW50cywgZnVuY3Rpb24oIGFzc2Vzc21lbnQgKSB7XG5cdFx0cmV0dXJuIHRoaXMuaXNBcHBsaWNhYmxlKCBhc3Nlc3NtZW50LCBwYXBlciwgcmVzZWFyY2hlciApO1xuXHR9LmJpbmQoIHRoaXMgKSApO1xuXG5cdHRoaXMuc2V0SGFzTWFya2VycyggZmFsc2UgKTtcblx0dGhpcy5yZXN1bHRzID0gbWFwKCBhc3Nlc3NtZW50cywgdGhpcy5leGVjdXRlQXNzZXNzbWVudC5iaW5kKCB0aGlzLCBwYXBlciwgcmVzZWFyY2hlciApICk7XG5cblx0dGhpcy5fbGFzdFBhcGVyID0gcGFwZXI7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIHZhbHVlIG9mIGhhcyBtYXJrZXJzIHdpdGggYSBib29sZWFuIHRvIGRldGVybWluZSBpZiB0aGVyZSBhcmUgbWFya2Vycy5cbiAqXG4gKiBAcGFyYW0ge2Jvb2x9IGhhc01hcmtlcnMgVHJ1ZSB3aGVuIHRoZXJlIGFyZSBtYXJrZXJzLCBvdGhlcndpc2UgaXQgaXMgZmFsc2UuXG4gKi9cbkFzc2Vzc29yLnByb3RvdHlwZS5zZXRIYXNNYXJrZXJzID0gZnVuY3Rpb24oIGhhc01hcmtlcnMgKSB7XG5cdHRoaXMuX2hhc01hcmtlcnMgPSBoYXNNYXJrZXJzO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgd2hlbiB0aGVyZSBhcmUgbWFya2Vycy5cbiAqXG4gKiBAcmV0dXJucyB7Ym9vbH0gQXJlIHRoZXJlIG1hcmtlcnNcbiAqL1xuQXNzZXNzb3IucHJvdG90eXBlLmhhc01hcmtlcnMgPSBmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXMuX2hhc01hcmtlcnM7XG59O1xuXG4vKipcbiAqIEV4ZWN1dGVzIGFuIGFzc2Vzc21lbnQgYW5kIHJldHVybnMgdGhlIEFzc2Vzc21lbnRSZXN1bHRcbiAqXG4gKiBAcGFyYW0ge1BhcGVyfSBwYXBlciBUaGUgcGFwZXIgdG8gcGFzcyB0byB0aGUgYXNzZXNzbWVudC5cbiAqIEBwYXJhbSB7UmVzZWFyY2hlcn0gcmVzZWFyY2hlciBUaGUgcmVzZWFyY2hlciB0byBwYXNzIHRvIHRoZSBhc3Nlc3NtZW50LlxuICogQHBhcmFtIHtPYmplY3R9IGFzc2Vzc21lbnQgVGhlIGFzc2Vzc21lbnQgdG8gZXhlY3V0ZS5cbiAqIEByZXR1cm5zIHtBc3Nlc3NtZW50UmVzdWx0fSBUaGUgcmVzdWx0IG9mIHRoZSBhc3Nlc3NtZW50LlxuICovXG5Bc3Nlc3Nvci5wcm90b3R5cGUuZXhlY3V0ZUFzc2Vzc21lbnQgPSBmdW5jdGlvbiggcGFwZXIsIHJlc2VhcmNoZXIsIGFzc2Vzc21lbnQgKSB7XG5cdHZhciByZXN1bHQ7XG5cblx0dHJ5IHtcblx0XHRyZXN1bHQgPSBhc3Nlc3NtZW50LmdldFJlc3VsdCggcGFwZXIsIHJlc2VhcmNoZXIsIHRoaXMuaTE4biApO1xuXHRcdHJlc3VsdC5zZXRJZGVudGlmaWVyKCBhc3Nlc3NtZW50LmlkZW50aWZpZXIgKTtcblxuXHRcdGlmICggcmVzdWx0Lmhhc01hcmtzKCkgJiYgdGhpcy5oYXNNYXJrZXIoIGFzc2Vzc21lbnQgKSApIHtcblx0XHRcdHRoaXMuc2V0SGFzTWFya2VycyggdHJ1ZSApO1xuXG5cdFx0XHRyZXN1bHQuc2V0TWFya2VyKCB0aGlzLmdldE1hcmtlciggYXNzZXNzbWVudCwgcGFwZXIsIHJlc2VhcmNoZXIgKSApO1xuXHRcdH1cblx0fSBjYXRjaCAoIGFzc2Vzc21lbnRFcnJvciApIHtcblx0XHRzaG93VHJhY2UoIGFzc2Vzc21lbnRFcnJvciApO1xuXG5cdFx0cmVzdWx0ID0gbmV3IEFzc2Vzc21lbnRSZXN1bHQoKTtcblxuXHRcdHJlc3VsdC5zZXRTY29yZSggMCApO1xuXHRcdHJlc3VsdC5zZXRUZXh0KCB0aGlzLmkxOG4uc3ByaW50Zihcblx0XHRcdC8qIFRyYW5zbGF0b3JzOiAlMSRzIGV4cGFuZHMgdG8gdGhlIG5hbWUgb2YgdGhlIGFzc2Vzc21lbnQuICovXG5cdFx0XHR0aGlzLmkxOG4uZGdldHRleHQoIFwianMtdGV4dC1hbmFseXNpc1wiLCBcIkFuIGVycm9yIG9jY3VycmVkIGluIHRoZSAnJTEkcycgYXNzZXNzbWVudFwiICksXG5cdFx0XHRhc3Nlc3NtZW50LmlkZW50aWZpZXIsXG5cdFx0XHRhc3Nlc3NtZW50RXJyb3Jcblx0XHQpICk7XG5cdH1cblx0cmV0dXJuIHJlc3VsdDtcbn07XG5cbi8qKlxuICogRmlsdGVycyBvdXQgYWxsIGFzc2Vzc21lbnRyZXN1bHRzIHRoYXQgaGF2ZSBubyBzY29yZSBhbmQgbm8gdGV4dC5cbiAqIEByZXR1cm5zIHtBcnJheTxBc3Nlc3NtZW50UmVzdWx0Pn0gVGhlIGFycmF5IHdpdGggYWxsIHRoZSB2YWxpZCBhc3Nlc3NtZW50cy5cbiAqL1xuQXNzZXNzb3IucHJvdG90eXBlLmdldFZhbGlkUmVzdWx0cyA9IGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gZmlsdGVyKCB0aGlzLnJlc3VsdHMsIGZ1bmN0aW9uKCByZXN1bHQgKSB7XG5cdFx0cmV0dXJuIHRoaXMuaXNWYWxpZFJlc3VsdCggcmVzdWx0ICk7XG5cdH0uYmluZCggdGhpcyApICk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgaWYgYW4gYXNzZXNzbWVudFJlc3VsdCBpcyB2YWxpZC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBhc3Nlc3NtZW50UmVzdWx0IFRoZSBhc3Nlc3NtZW50UmVzdWx0IHRvIHZhbGlkYXRlLlxuICogQHJldHVybnMge2Jvb2xlYW59IHdoZXRoZXIgb3Igbm90IHRoZSByZXN1bHQgaXMgdmFsaWQuXG4gKi9cbkFzc2Vzc29yLnByb3RvdHlwZS5pc1ZhbGlkUmVzdWx0ID0gZnVuY3Rpb24oIGFzc2Vzc21lbnRSZXN1bHQgKSB7XG5cdHJldHVybiBhc3Nlc3NtZW50UmVzdWx0Lmhhc1Njb3JlKCkgJiYgYXNzZXNzbWVudFJlc3VsdC5oYXNUZXh0KCk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIG92ZXJhbGxzY29yZS4gQ2FsY3VsYXRlcyB0aGUgdG90YWxzY29yZSBieSBhZGRpbmcgYWxsIHNjb3JlcyBhbmQgZGl2aWRpbmcgdGhlc2VcbiAqIGJ5IHRoZSBudW1iZXIgb2YgcmVzdWx0cyB0aW1lcyB0aGUgU2NvcmVSYXRpbmcuXG4gKlxuICogQHJldHVybnMge251bWJlcn0gVGhlIG92ZXJhbGxzY29yZVxuICovXG5Bc3Nlc3Nvci5wcm90b3R5cGUuY2FsY3VsYXRlT3ZlcmFsbFNjb3JlICA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgcmVzdWx0cyA9IHRoaXMuZ2V0VmFsaWRSZXN1bHRzKCk7XG5cdHZhciB0b3RhbFNjb3JlID0gMDtcblxuXHRmb3JFYWNoKCByZXN1bHRzLCBmdW5jdGlvbiggYXNzZXNzbWVudFJlc3VsdCApIHtcblx0XHR0b3RhbFNjb3JlICs9IGFzc2Vzc21lbnRSZXN1bHQuZ2V0U2NvcmUoKTtcblx0fSApO1xuXG5cdHJldHVybiBNYXRoLnJvdW5kKCB0b3RhbFNjb3JlIC8gKCByZXN1bHRzLmxlbmd0aCAqIFNjb3JlUmF0aW5nICkgKiAxMDAgKSB8fCAwO1xufTtcblxuLyoqXG4gKiBSZWdpc3RlciBhbiBhc3Nlc3NtZW50IHRvIGFkZCBpdCB0byB0aGUgaW50ZXJuYWwgYXNzZXNzbWVudHMgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBhc3Nlc3NtZW50LlxuICogQHBhcmFtIHtvYmplY3R9IGFzc2Vzc21lbnQgVGhlIG9iamVjdCBjb250YWluaW5nIGZ1bmN0aW9uIHRvIHJ1biBhcyBhbiBhc3Nlc3NtZW50IGFuZCBpdCdzIHJlcXVpcmVtZW50cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBXaGV0aGVyIHJlZ2lzdGVyaW5nIHRoZSBhc3Nlc3NtZW50IHdhcyBzdWNjZXNzZnVsLlxuICogQHByaXZhdGVcbiAqL1xuQXNzZXNzb3IucHJvdG90eXBlLmFkZEFzc2Vzc21lbnQgPSBmdW5jdGlvbiggbmFtZSwgYXNzZXNzbWVudCApIHtcblx0aWYgKCAhIGFzc2Vzc21lbnQuaGFzT3duUHJvcGVydHkoIFwiaWRlbnRpZmllclwiICkgKSB7XG5cdFx0YXNzZXNzbWVudC5pZGVudGlmaWVyID0gbmFtZTtcblx0fVxuXG5cdHRoaXMuX2Fzc2Vzc21lbnRzLnB1c2goIGFzc2Vzc21lbnQgKTtcblx0cmV0dXJuIHRydWU7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhIHNwZWNpZmljIEFzc2Vzc21lbnQgZnJvbSB0aGUgbGlzdCBvZiBBc3Nlc3NtZW50cy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBBc3Nlc3NtZW50IHRvIHJlbW92ZSBmcm9tIHRoZSBsaXN0IG9mIGFzc2Vzc21lbnRzLlxuICovXG5Bc3Nlc3Nvci5wcm90b3R5cGUucmVtb3ZlQXNzZXNzbWVudCA9IGZ1bmN0aW9uKCBuYW1lICkge1xuXHR2YXIgdG9EZWxldGUgPSBmaW5kSW5kZXgoIHRoaXMuX2Fzc2Vzc21lbnRzLCBmdW5jdGlvbiggYXNzZXNzbWVudCApIHtcblx0XHRyZXR1cm4gYXNzZXNzbWVudC5oYXNPd25Qcm9wZXJ0eSggXCJpZGVudGlmaWVyXCIgKSAmJiBuYW1lID09PSBhc3Nlc3NtZW50LmlkZW50aWZpZXI7XG5cdH0gKTtcblxuXHRpZiAoIC0xICE9PSB0b0RlbGV0ZSApIHtcblx0XHR0aGlzLl9hc3Nlc3NtZW50cy5zcGxpY2UoIHRvRGVsZXRlLCAxICk7XG5cdH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBhc3Nlc3NtZW50IGJ5IGlkZW50aWZpZXJcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gaWRlbnRpZmllciBUaGUgaWRlbnRpZmllciBvZiB0aGUgYXNzZXNzbWVudC5cbiAqIEByZXR1cm5zIHt1bmRlZmluZWR8T2JqZWN0fSBUaGUgb2JqZWN0IGlmIGZvdW5kLCBvdGhlcndpc2UgdW5kZWZpbmVkLlxuICovXG5Bc3Nlc3Nvci5wcm90b3R5cGUuZ2V0QXNzZXNzbWVudCA9IGZ1bmN0aW9uKCBpZGVudGlmaWVyICkge1xuXHRyZXR1cm4gZmluZCggdGhpcy5fYXNzZXNzbWVudHMsIGZ1bmN0aW9uKCBhc3Nlc3NtZW50ICkge1xuXHRcdHJldHVybiBhc3Nlc3NtZW50Lmhhc093blByb3BlcnR5KCBcImlkZW50aWZpZXJcIiApICYmIGlkZW50aWZpZXIgPT09IGFzc2Vzc21lbnQuaWRlbnRpZmllcjtcblx0fSApO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBc3Nlc3NvcjtcbiIsIi8qKiBAbW9kdWxlIGNvbmZpZy9kaWFjcml0aWNzICovXG5cbi8qKlxuICogUmV0dXJucyB0aGUgZGlhY3JpdGljcyBtYXBcbiAqXG4gKiBAcmV0dXJucyB7YXJyYXl9IGRpYWNyaXRpY3MgbWFwXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG5cdHJldHVybiBbXG5cdFx0e1xuXHRcdFx0YmFzZTogXCJhXCIsXG5cdFx0XHRsZXR0ZXJzOiAvW1xcdTAwNjFcXHUyNEQwXFx1RkY0MVxcdTFFOUFcXHUwMEUwXFx1MDBFMVxcdTAwRTJcXHUxRUE3XFx1MUVBNVxcdTFFQUJcXHUxRUE5XFx1MDBFM1xcdTAxMDFcXHUwMTAzXFx1MUVCMVxcdTFFQUZcXHUxRUI1XFx1MUVCM1xcdTAyMjdcXHUwMUUxXFx1MDBFNFxcdTAxREZcXHUxRUEzXFx1MDBFNVxcdTAxRkJcXHUwMUNFXFx1MDIwMVxcdTAyMDNcXHUxRUExXFx1MUVBRFxcdTFFQjdcXHUxRTAxXFx1MDEwNVxcdTJDNjVcXHUwMjUwXS9nXG5cdFx0fSxcblx0XHR7IGJhc2U6IFwiYWFcIiwgbGV0dGVyczogL1tcXHVBNzMzXS9nIH0sXG5cdFx0eyBiYXNlOiBcImFlXCIsIGxldHRlcnM6IC9bXFx1MDBFNlxcdTAxRkRcXHUwMUUzXS9nIH0sXG5cdFx0eyBiYXNlOiBcImFvXCIsIGxldHRlcnM6IC9bXFx1QTczNV0vZyB9LFxuXHRcdHsgYmFzZTogXCJhdVwiLCBsZXR0ZXJzOiAvW1xcdUE3MzddL2cgfSxcblx0XHR7IGJhc2U6IFwiYXZcIiwgbGV0dGVyczogL1tcXHVBNzM5XFx1QTczQl0vZyB9LFxuXHRcdHsgYmFzZTogXCJheVwiLCBsZXR0ZXJzOiAvW1xcdUE3M0RdL2cgfSxcblx0XHR7IGJhc2U6IFwiYlwiLCBsZXR0ZXJzOiAvW1xcdTAwNjJcXHUyNEQxXFx1RkY0MlxcdTFFMDNcXHUxRTA1XFx1MUUwN1xcdTAxODBcXHUwMTgzXFx1MDI1M10vZyB9LFxuXHRcdHtcblx0XHRcdGJhc2U6IFwiY1wiLFxuXHRcdFx0bGV0dGVyczogL1tcXHUwMDYzXFx1MjREMlxcdUZGNDNcXHUwMTA3XFx1MDEwOVxcdTAxMEJcXHUwMTBEXFx1MDBFN1xcdTFFMDlcXHUwMTg4XFx1MDIzQ1xcdUE3M0ZcXHUyMTg0XS9nXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRiYXNlOiBcImRcIixcblx0XHRcdGxldHRlcnM6IC9bXFx1MDA2NFxcdTI0RDNcXHVGRjQ0XFx1MUUwQlxcdTAxMEZcXHUxRTBEXFx1MUUxMVxcdTFFMTNcXHUxRTBGXFx1MDExMVxcdTAxOENcXHUwMjU2XFx1MDI1N1xcdUE3N0FdL2dcblx0XHR9LFxuXHRcdHsgYmFzZTogXCJkelwiLCBsZXR0ZXJzOiAvW1xcdTAxRjNcXHUwMUM2XS9nIH0sXG5cdFx0e1xuXHRcdFx0YmFzZTogXCJlXCIsXG5cdFx0XHRsZXR0ZXJzOiAvW1xcdTAwNjVcXHUyNEQ0XFx1RkY0NVxcdTAwRThcXHUwMEU5XFx1MDBFQVxcdTFFQzFcXHUxRUJGXFx1MUVDNVxcdTFFQzNcXHUxRUJEXFx1MDExM1xcdTFFMTVcXHUxRTE3XFx1MDExNVxcdTAxMTdcXHUwMEVCXFx1MUVCQlxcdTAxMUJcXHUwMjA1XFx1MDIwN1xcdTFFQjlcXHUxRUM3XFx1MDIyOVxcdTFFMURcXHUwMTE5XFx1MUUxOVxcdTFFMUJcXHUwMjQ3XFx1MDI1QlxcdTAxRERdL2dcblx0XHR9LFxuXHRcdHsgYmFzZTogXCJmXCIsIGxldHRlcnM6IC9bXFx1MDA2NlxcdTI0RDVcXHVGRjQ2XFx1MUUxRlxcdTAxOTJcXHVBNzdDXS9nIH0sXG5cdFx0e1xuXHRcdFx0YmFzZTogXCJnXCIsXG5cdFx0XHRsZXR0ZXJzOiAvW1xcdTAwNjdcXHUyNEQ2XFx1RkY0N1xcdTAxRjVcXHUwMTFEXFx1MUUyMVxcdTAxMUZcXHUwMTIxXFx1MDFFN1xcdTAxMjNcXHUwMUU1XFx1MDI2MFxcdUE3QTFcXHUxRDc5XFx1QTc3Rl0vZ1xuXHRcdH0sXG5cdFx0e1xuXHRcdFx0YmFzZTogXCJoXCIsXG5cdFx0XHRsZXR0ZXJzOiAvW1xcdTAwNjhcXHUyNEQ3XFx1RkY0OFxcdTAxMjVcXHUxRTIzXFx1MUUyN1xcdTAyMUZcXHUxRTI1XFx1MUUyOVxcdTFFMkJcXHUxRTk2XFx1MDEyN1xcdTJDNjhcXHUyQzc2XFx1MDI2NV0vZ1xuXHRcdH0sXG5cdFx0eyBiYXNlOiBcImh2XCIsIGxldHRlcnM6IC9bXFx1MDE5NV0vZyB9LFxuXHRcdHtcblx0XHRcdGJhc2U6IFwiaVwiLFxuXHRcdFx0bGV0dGVyczogL1tcXHUwMDY5XFx1MjREOFxcdUZGNDlcXHUwMEVDXFx1MDBFRFxcdTAwRUVcXHUwMTI5XFx1MDEyQlxcdTAxMkRcXHUwMEVGXFx1MUUyRlxcdTFFQzlcXHUwMUQwXFx1MDIwOVxcdTAyMEJcXHUxRUNCXFx1MDEyRlxcdTFFMkRcXHUwMjY4XFx1MDEzMV0vZ1xuXHRcdH0sXG5cdFx0eyBiYXNlOiBcImpcIiwgbGV0dGVyczogL1tcXHUwMDZBXFx1MjREOVxcdUZGNEFcXHUwMTM1XFx1MDFGMFxcdTAyNDldL2cgfSxcblx0XHR7XG5cdFx0XHRiYXNlOiBcImtcIixcblx0XHRcdGxldHRlcnM6IC9bXFx1MDA2QlxcdTI0REFcXHVGRjRCXFx1MUUzMVxcdTAxRTlcXHUxRTMzXFx1MDEzN1xcdTFFMzVcXHUwMTk5XFx1MkM2QVxcdUE3NDFcXHVBNzQzXFx1QTc0NVxcdUE3QTNdL2dcblx0XHR9LFxuXHRcdHtcblx0XHRcdGJhc2U6IFwibFwiLFxuXHRcdFx0bGV0dGVyczogL1tcXHUwMDZDXFx1MjREQlxcdUZGNENcXHUwMTQwXFx1MDEzQVxcdTAxM0VcXHUxRTM3XFx1MUUzOVxcdTAxM0NcXHUxRTNEXFx1MUUzQlxcdTAxN0ZcXHUwMTQyXFx1MDE5QVxcdTAyNkJcXHUyQzYxXFx1QTc0OVxcdUE3ODFcXHVBNzQ3XS9nXG5cdFx0fSxcblx0XHR7IGJhc2U6IFwibGpcIiwgbGV0dGVyczogL1tcXHUwMUM5XS9nIH0sXG5cdFx0eyBiYXNlOiBcIm1cIiwgbGV0dGVyczogL1tcXHUwMDZEXFx1MjREQ1xcdUZGNERcXHUxRTNGXFx1MUU0MVxcdTFFNDNcXHUwMjcxXFx1MDI2Rl0vZyB9LFxuXHRcdHtcblx0XHRcdGJhc2U6IFwiblwiLFxuXHRcdFx0bGV0dGVyczogL1tcXHUwMDZFXFx1MjRERFxcdUZGNEVcXHUwMUY5XFx1MDE0NFxcdTAwRjFcXHUxRTQ1XFx1MDE0OFxcdTFFNDdcXHUwMTQ2XFx1MUU0QlxcdTFFNDlcXHUwMTlFXFx1MDI3MlxcdTAxNDlcXHVBNzkxXFx1QTdBNV0vZ1xuXHRcdH0sXG5cdFx0eyBiYXNlOiBcIm5qXCIsIGxldHRlcnM6IC9bXFx1MDFDQ10vZyB9LFxuXHRcdHtcblx0XHRcdGJhc2U6IFwib1wiLFxuXHRcdFx0bGV0dGVyczogL1tcXHUwMDZGXFx1MjRERVxcdUZGNEZcXHUwMEYyXFx1MDBGM1xcdTAwRjRcXHUxRUQzXFx1MUVEMVxcdTFFRDdcXHUxRUQ1XFx1MDBGNVxcdTFFNERcXHUwMjJEXFx1MUU0RlxcdTAxNERcXHUxRTUxXFx1MUU1M1xcdTAxNEZcXHUwMjJGXFx1MDIzMVxcdTAwRjZcXHUwMjJCXFx1MUVDRlxcdTAxNTFcXHUwMUQyXFx1MDIwRFxcdTAyMEZcXHUwMUExXFx1MUVERFxcdTFFREJcXHUxRUUxXFx1MUVERlxcdTFFRTNcXHUxRUNEXFx1MUVEOVxcdTAxRUJcXHUwMUVEXFx1MDBGOFxcdTAxRkZcXHUwMjU0XFx1QTc0QlxcdUE3NERcXHUwMjc1XS9nXG5cdFx0fSxcblx0XHR7IGJhc2U6IFwib2lcIiwgbGV0dGVyczogL1tcXHUwMUEzXS9nIH0sXG5cdFx0eyBiYXNlOiBcIm91XCIsIGxldHRlcnM6IC9bXFx1MDIyM10vZyB9LFxuXHRcdHsgYmFzZTogXCJvb1wiLCBsZXR0ZXJzOiAvW1xcdUE3NEZdL2cgfSxcblx0XHR7IGJhc2U6IFwicFwiLCBsZXR0ZXJzOiAvW1xcdTAwNzBcXHUyNERGXFx1RkY1MFxcdTFFNTVcXHUxRTU3XFx1MDFBNVxcdTFEN0RcXHVBNzUxXFx1QTc1M1xcdUE3NTVdL2cgfSxcblx0XHR7IGJhc2U6IFwicVwiLCBsZXR0ZXJzOiAvW1xcdTAwNzFcXHUyNEUwXFx1RkY1MVxcdTAyNEJcXHVBNzU3XFx1QTc1OV0vZyB9LFxuXHRcdHtcblx0XHRcdGJhc2U6IFwiclwiLFxuXHRcdFx0bGV0dGVyczogL1tcXHUwMDcyXFx1MjRFMVxcdUZGNTJcXHUwMTU1XFx1MUU1OVxcdTAxNTlcXHUwMjExXFx1MDIxM1xcdTFFNUJcXHUxRTVEXFx1MDE1N1xcdTFFNUZcXHUwMjREXFx1MDI3RFxcdUE3NUJcXHVBN0E3XFx1QTc4M10vZ1xuXHRcdH0sXG5cdFx0e1xuXHRcdFx0YmFzZTogXCJzXCIsXG5cdFx0XHRsZXR0ZXJzOiAvW1xcdTAwNzNcXHUyNEUyXFx1RkY1M1xcdTAwREZcXHUwMTVCXFx1MUU2NVxcdTAxNURcXHUxRTYxXFx1MDE2MVxcdTFFNjdcXHUxRTYzXFx1MUU2OVxcdTAyMTlcXHUwMTVGXFx1MDIzRlxcdUE3QTlcXHVBNzg1XFx1MUU5Ql0vZ1xuXHRcdH0sXG5cdFx0e1xuXHRcdFx0YmFzZTogXCJ0XCIsXG5cdFx0XHRsZXR0ZXJzOiAvW1xcdTAwNzRcXHUyNEUzXFx1RkY1NFxcdTFFNkJcXHUxRTk3XFx1MDE2NVxcdTFFNkRcXHUwMjFCXFx1MDE2M1xcdTFFNzFcXHUxRTZGXFx1MDE2N1xcdTAxQURcXHUwMjg4XFx1MkM2NlxcdUE3ODddL2dcblx0XHR9LFxuXHRcdHsgYmFzZTogXCJ0elwiLCBsZXR0ZXJzOiAvW1xcdUE3MjldL2cgfSxcblx0XHR7XG5cdFx0XHRiYXNlOiBcInVcIixcblx0XHRcdGxldHRlcnM6IC9bXFx1MDA3NVxcdTI0RTRcXHVGRjU1XFx1MDBGOVxcdTAwRkFcXHUwMEZCXFx1MDE2OVxcdTFFNzlcXHUwMTZCXFx1MUU3QlxcdTAxNkRcXHUwMEZDXFx1MDFEQ1xcdTAxRDhcXHUwMUQ2XFx1MDFEQVxcdTFFRTdcXHUwMTZGXFx1MDE3MVxcdTAxRDRcXHUwMjE1XFx1MDIxN1xcdTAxQjBcXHUxRUVCXFx1MUVFOVxcdTFFRUZcXHUxRUVEXFx1MUVGMVxcdTFFRTVcXHUxRTczXFx1MDE3M1xcdTFFNzdcXHUxRTc1XFx1MDI4OV0vZ1xuXHRcdH0sXG5cdFx0eyBiYXNlOiBcInZcIiwgbGV0dGVyczogL1tcXHUwMDc2XFx1MjRFNVxcdUZGNTZcXHUxRTdEXFx1MUU3RlxcdTAyOEJcXHVBNzVGXFx1MDI4Q10vZyB9LFxuXHRcdHsgYmFzZTogXCJ2eVwiLCBsZXR0ZXJzOiAvW1xcdUE3NjFdL2cgfSxcblx0XHR7XG5cdFx0XHRiYXNlOiBcIndcIixcblx0XHRcdGxldHRlcnM6IC9bXFx1MDA3N1xcdTI0RTZcXHVGRjU3XFx1MUU4MVxcdTFFODNcXHUwMTc1XFx1MUU4N1xcdTFFODVcXHUxRTk4XFx1MUU4OVxcdTJDNzNdL2dcblx0XHR9LFxuXHRcdHsgYmFzZTogXCJ4XCIsIGxldHRlcnM6IC9bXFx1MDA3OFxcdTI0RTdcXHVGRjU4XFx1MUU4QlxcdTFFOERdL2cgfSxcblx0XHR7XG5cdFx0XHRiYXNlOiBcInlcIixcblx0XHRcdGxldHRlcnM6IC9bXFx1MDA3OVxcdTI0RThcXHVGRjU5XFx1MUVGM1xcdTAwRkRcXHUwMTc3XFx1MUVGOVxcdTAyMzNcXHUxRThGXFx1MDBGRlxcdTFFRjdcXHUxRTk5XFx1MUVGNVxcdTAxQjRcXHUwMjRGXFx1MUVGRl0vZ1xuXHRcdH0sXG5cdFx0e1xuXHRcdFx0YmFzZTogXCJ6XCIsXG5cdFx0XHRsZXR0ZXJzOiAvW1xcdTAwN0FcXHUyNEU5XFx1RkY1QVxcdTAxN0FcXHUxRTkxXFx1MDE3Q1xcdTAxN0VcXHUxRTkzXFx1MUU5NVxcdTAxQjZcXHUwMjI1XFx1MDI0MFxcdTJDNkNcXHVBNzYzXS9nXG5cdFx0fVxuXHRdO1xufTtcbiIsIi8qKiBAbW9kdWxlIGNvbmZpZy9yZW1vdmFsV29yZHMgKi9cblxuLyoqXG4gKiBSZXR1cm5zIGFuIGFycmF5IHdpdGggd29yZHMgdGhhdCBuZWVkIHRvIGJlIHJlbW92ZWRcbiAqXG4gKiBAcmV0dXJucyB7YXJyYXl9IHJlbW92YWxXb3JkcyBSZXR1cm5zIGFuIGFycmF5IHdpdGggd29yZHMuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG5cdHJldHVybiBbIFwiIGFcIiwgXCIgaW5cIiwgXCIgYW5cIiwgXCIgb25cIiwgXCIgZm9yXCIsIFwiIHRoZVwiLCBcIiBhbmRcIiBdO1xufTtcbiIsIi8qKiBAbW9kdWxlIGNvbmZpZy9zdG9wd29yZHMgKi9cblxuLyoqXG4gKiBSZXR1cm5zIGFuIGFycmF5IHdpdGggc3RvcHdvcmRzIHRvIGJlIHVzZWQgYnkgdGhlIGFuYWx5emVyLlxuICpcbiAqIEByZXR1cm5zIHtBcnJheX0gc3RvcHdvcmRzIFRoZSBhcnJheSBmaWxsZWQgd2l0aCBzdG9wd29yZHMuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG5cdHJldHVybiBbIFwiYVwiLCBcImFib3V0XCIsIFwiYWJvdmVcIiwgXCJhZnRlclwiLCBcImFnYWluXCIsIFwiYWdhaW5zdFwiLCBcImFsbFwiLCBcImFtXCIsIFwiYW5cIiwgXCJhbmRcIiwgXCJhbnlcIiwgXCJhcmVcIiwgXCJhc1wiLCBcImF0XCIsIFwiYmVcIiwgXCJiZWNhdXNlXCIsIFwiYmVlblwiLCBcImJlZm9yZVwiLCBcImJlaW5nXCIsIFwiYmVsb3dcIiwgXCJiZXR3ZWVuXCIsIFwiYm90aFwiLCBcImJ1dFwiLCBcImJ5XCIsIFwiY291bGRcIiwgXCJkaWRcIiwgXCJkb1wiLCBcImRvZXNcIiwgXCJkb2luZ1wiLCBcImRvd25cIiwgXCJkdXJpbmdcIiwgXCJlYWNoXCIsIFwiZmV3XCIsIFwiZm9yXCIsIFwiZnJvbVwiLCBcImZ1cnRoZXJcIiwgXCJoYWRcIiwgXCJoYXNcIiwgXCJoYXZlXCIsIFwiaGF2aW5nXCIsIFwiaGVcIiwgXCJoZSdkXCIsIFwiaGUnbGxcIiwgXCJoZSdzXCIsIFwiaGVyXCIsIFwiaGVyZVwiLCBcImhlcmUnc1wiLCBcImhlcnNcIiwgXCJoZXJzZWxmXCIsIFwiaGltXCIsIFwiaGltc2VsZlwiLCBcImhpc1wiLCBcImhvd1wiLCBcImhvdydzXCIsIFwiaVwiLCBcImknZFwiLCBcImknbGxcIiwgXCJpJ21cIiwgXCJpJ3ZlXCIsIFwiaWZcIiwgXCJpblwiLCBcImludG9cIiwgXCJpc1wiLCBcIml0XCIsIFwiaXQnc1wiLCBcIml0c1wiLCBcIml0c2VsZlwiLCBcImxldCdzXCIsIFwibWVcIiwgXCJtb3JlXCIsIFwibW9zdFwiLCBcIm15XCIsIFwibXlzZWxmXCIsIFwibm9yXCIsIFwib2ZcIiwgXCJvblwiLCBcIm9uY2VcIiwgXCJvbmx5XCIsIFwib3JcIiwgXCJvdGhlclwiLCBcIm91Z2h0XCIsIFwib3VyXCIsIFwib3Vyc1wiLCBcIm91cnNlbHZlc1wiLCBcIm91dFwiLCBcIm92ZXJcIiwgXCJvd25cIiwgXCJzYW1lXCIsIFwic2hlXCIsIFwic2hlJ2RcIiwgXCJzaGUnbGxcIiwgXCJzaGUnc1wiLCBcInNob3VsZFwiLCBcInNvXCIsIFwic29tZVwiLCBcInN1Y2hcIiwgXCJ0aGFuXCIsIFwidGhhdFwiLCBcInRoYXQnc1wiLCBcInRoZVwiLCBcInRoZWlyXCIsIFwidGhlaXJzXCIsIFwidGhlbVwiLCBcInRoZW1zZWx2ZXNcIiwgXCJ0aGVuXCIsIFwidGhlcmVcIiwgXCJ0aGVyZSdzXCIsIFwidGhlc2VcIiwgXCJ0aGV5XCIsIFwidGhleSdkXCIsIFwidGhleSdsbFwiLCBcInRoZXkncmVcIiwgXCJ0aGV5J3ZlXCIsIFwidGhpc1wiLCBcInRob3NlXCIsIFwidGhyb3VnaFwiLCBcInRvXCIsIFwidG9vXCIsIFwidW5kZXJcIiwgXCJ1bnRpbFwiLCBcInVwXCIsIFwidmVyeVwiLCBcIndhc1wiLCBcIndlXCIsIFwid2UnZFwiLCBcIndlJ2xsXCIsIFwid2UncmVcIiwgXCJ3ZSd2ZVwiLCBcIndlcmVcIiwgXCJ3aGF0XCIsIFwid2hhdCdzXCIsIFwid2hlblwiLCBcIndoZW4nc1wiLCBcIndoZXJlXCIsIFwid2hlcmUnc1wiLCBcIndoaWNoXCIsIFwid2hpbGVcIiwgXCJ3aG9cIiwgXCJ3aG8nc1wiLCBcIndob21cIiwgXCJ3aHlcIiwgXCJ3aHknc1wiLCBcIndpdGhcIiwgXCJ3b3VsZFwiLCBcInlvdVwiLCBcInlvdSdkXCIsIFwieW91J2xsXCIsIFwieW91J3JlXCIsIFwieW91J3ZlXCIsIFwieW91clwiLCBcInlvdXJzXCIsIFwieW91cnNlbGZcIiwgXCJ5b3Vyc2VsdmVzXCIgXTtcbn07XG4iLCIvKiogQG1vZHVsZSBjb25maWcvc3lsbGFibGVzICovXG5cbnZhciBnZXRMYW5ndWFnZSA9IHJlcXVpcmUoIFwiLi4vaGVscGVycy9nZXRMYW5ndWFnZS5qc1wiICk7XG52YXIgaXNVbmRlZmluZWQgPSByZXF1aXJlKCBcImxvZGFzaC9pc1VuZGVmaW5lZFwiICk7XG5cbnZhciBkZSA9IHJlcXVpcmUoIFwiLi9zeWxsYWJsZXMvZGUuanNvblwiICk7XG52YXIgZW4gPSByZXF1aXJlKCAnLi9zeWxsYWJsZXMvZW4uanNvbicgKTtcbnZhciBubCA9IHJlcXVpcmUoICcuL3N5bGxhYmxlcy9ubC5qc29uJyApO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCBsb2NhbGUgKSB7XG5cdGlmICggaXNVbmRlZmluZWQoIGxvY2FsZSApICkge1xuXHRcdGxvY2FsZSA9IFwiZW5fVVNcIlxuXHR9XG5cblx0c3dpdGNoKCBnZXRMYW5ndWFnZSggbG9jYWxlICkgKSB7XG5cdFx0Y2FzZSBcImRlXCI6XG5cdFx0XHRyZXR1cm4gZGU7XG5cdFx0Y2FzZSBcIm5sXCI6XG5cdFx0XHRyZXR1cm4gbmw7XG5cdFx0Y2FzZSBcImVuXCI6XG5cdFx0ZGVmYXVsdDpcblx0XHRcdHJldHVybiBlbjtcblx0fVxufTtcbiIsIm1vZHVsZS5leHBvcnRzPXtcbiAgXCJ2b3dlbHNcIjogXCJhZWlvdXnDpMO2w7zDocOpw6LDoMOow67DqsOiw7vDtMWTXCIsXG4gIFwiZGV2aWF0aW9uc1wiOiB7XG4gICAgXCJ2b3dlbHNcIjogW1xuICAgICAge1xuICAgICAgICBcImZyYWdtZW50c1wiOiBbXCJvdWlsXCIsIFwiZGVhdXhcIiwgXCJkZWF1JFwiLCBcIm9hcmRcIiwgXCLDpHRoaW9wXCIsIFwiZXVpbFwiLCBcInZlYXVcIiwgXCJlYXUkXCIsIFwidWV1ZVwiLCBcImxpZW5pc2NoXCIsIFwiYW5jZSRcIiwgXCJlbmNlJFwiLCBcInRpbWUkXCIsXG4gICAgICAgICAgXCJvbmNlJFwiLCBcInppYXRcIiwgXCJndWV0dGVcIiwgXCLDqnRlJFwiLCBcIsO0dGUkXCIsIFwiW2htcF1vbW1lJFwiLCBcIltxZHNjbl11ZSRcIiwgXCJjaGFpc2VcIiwgXCJhaXJlJFwiLCBcInR1cmUkXCIsIFwiw6pwZSRcIiwgXCJbXnFddWkkXCIsIFwidGljaGUkXCIsXG4gICAgICAgICAgXCJvdXJjZSRcIiwgXCJ2aWNlJFwiLCBcIm9pbGUkXCIsIFwiemlhbFwiLCBcImNydWlzXCIsIFwibGVhc1wiLCBcImJsdWVcIiwgXCJsZWFkXCIsIFwiY29hW2N0XVwiLCBcIl5kZWFsXCIsIFwiW15pXWRlYWxcIiwgXCJbZnddZWF0XCIsIFwiY2FjaGVbXnRdXCIsIFwiW2xzeF1zZWQkXCJdLFxuICAgICAgICBcImNvdW50TW9kaWZpZXJcIjogLTFcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwiZnJhZ21lbnRzXCI6IFtcImFhdVwiLCBcImFbw6TDtsO8b11cIiwgXCLDpHVlXCIsIFwiw6RldVwiLCBcImFlaVwiLCBcImF1ZVwiLCBcImFldVwiLCBcImFlbFwiLCBcImF5b1wiLCBcImFpW2Flb11cIiwgXCJzYWlrXCIsIFwiYWlzbXVzXCIsIFwiw6RbYWVvaV1cIiwgXCJhdcOkXCIsIFwiw6lhXCIsXG4gICAgICAgICAgXCJlW8OkYW/Dtl1cIiwgXCJlaVtlb11cIiwgXCJlZVtlaXVvYV1cIiwgXCJldVthw6RlXVwiLCBcImV1bSRcIiwgXCJlw7xcIiwgXCJvW2HDpMO2w7xdXCIsIFwicG9ldFwiLCBcIm9vW2VvXVwiLCBcIm9pZVwiLCBcIm9laVtebF1cIiwgXCJvZXVbXmZdXCIsIFwiw7ZhXCIsIFwiW2ZncnpdaWV1XCIsXG4gICAgICAgICAgXCJtaWV1blwiLCBcInRpZXVyXCIsIFwiaWV1bVwiLCBcImlbYWl1w7xdXCIsIFwiW15sXWnDpFwiLCBcIltec11jaGllblwiLCBcImlvW3dxdHBkZmhqa3hjdmJtdV1cIiwgXCJbYnJwZGh2bV1pb25cIiwgXCJbbHJdaW9yXCIsIFwiW15nXWlvc1wiLFxuICAgICAgICAgIFwiW15nXWlvZ1wiLCBcIltyZF1pb3pcIiwgXCJlbGlvelwiLCBcInppb25pXCIsIFwiYmlvW2xuenJdXCIsIFwiacO2W15zXVwiLCBcImllW2VpXVwiLCBcInJpZXIkXCIsIFwiw7ZpW2dlXVwiLCBcIltecl1vw69zY2hcIixcbiAgICAgICAgICBcIltecWd2XXVbYWXDqWlvw7Z1w7xdXCIsIFwicXVpZSRcIiwgXCJxdWllW15zXVwiLCBcInXDpHVcIiwgXCJedXMtXCIsIFwiXml0LVwiLCBcIsO8ZVwiLCBcIm5haXZcIiwgXCJhaXNjaCRcIiwgXCJhaXNjaGUkXCIsIFwiW2xzdF1pZW5cIiwgXCJkaWVuJFwiLCBcImdvaXNcIiwgXCJbXmddcmllbnRcIixcbiAgICAgICAgICBcIlthZWlvdV15W2FlaW91XVwiLCBcImJ5aVwiLCBcInnDpFwiLCBcIlthLXpdeW9cIiwgXCJbYS16XXlhXCIsIFwieWF1XCIsIFwieWllXCIsIFwia29vclwiLCBcInNjaWVudFwiLCBcImVyaWVsXCIsIFwiW2JkZ11vaW5nXCJdLFxuICAgICAgICBcImNvdW50TW9kaWZpZXJcIjogMVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJmcmFnbWVudHNcIjogW1wiaW9pXCIsIFwiaW9vXCIsIFwiaW9hXCIsIFwiZWlvXCIsIFwiaWlpXCIsIFwib2FpXCIsIFwiZXVldVwiXSxcbiAgICAgICAgXCJjb3VudE1vZGlmaWVyXCI6IDFcbiAgICAgIH1cbiAgICBdLFxuICAgIFwid29yZHNcIjoge1xuICAgICAgXCJmdWxsXCI6IFtcbiAgICAgICAge1wid29yZFwiOiBcImJlYWNoXCIsIFwic3lsbGFibGVzXCI6IDF9LFxuICAgICAgICB7XCJ3b3JkXCI6IFwiYmVhdFwiLCBcInN5bGxhYmxlc1wiOiAxfSxcbiAgICAgICAge1wid29yZFwiOiBcImJlYXVcIiwgXCJzeWxsYWJsZXNcIjogMX0sXG4gICAgICAgIHtcIndvcmRcIjogXCJiZWF1bmVcIiwgXCJzeWxsYWJsZXNcIjogMX0sXG4gICAgICAgIHtcIndvcmRcIjogXCJiZWxsZVwiLCBcInN5bGxhYmxlc1wiOiAxfSxcbiAgICAgICAge1wid29yZFwiOiBcImJvdWNoZVwiLCBcInN5bGxhYmxlc1wiOiAxfSxcbiAgICAgICAge1wid29yZFwiOiBcImJyYWtlXCIsIFwic3lsbGFibGVzXCI6IDF9LFxuICAgICAgICB7XCJ3b3JkXCI6IFwiY2FjaGVcIiwgXCJzeWxsYWJsZXNcIjogMX0sXG4gICAgICAgIHtcIndvcmRcIjogXCJjYWNoZVwiLCBcInN5bGxhYmxlc1wiOiAxfSxcbiAgICAgICAge1wid29yZFwiOiBcImNoYWlzZWxvbmd1ZVwiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAge1wid29yZFwiOiBcImNob2tlXCIsIFwic3lsbGFibGVzXCI6IDF9LFxuICAgICAgICB7XCJ3b3JkXCI6IFwiY29yZGlhbGVcIiwgXCJzeWxsYWJsZXNcIjogM30sXG4gICAgICAgIHtcIndvcmRcIjogXCJjb3JlXCIsIFwic3lsbGFibGVzXCI6IDF9LFxuICAgICAgICB7XCJ3b3JkXCI6IFwiZG9wZVwiLCBcInN5bGxhYmxlc1wiOiAxfSxcbiAgICAgICAge1wid29yZFwiOiBcImVhdFwiLCBcInN5bGxhYmxlc1wiOiAxfSxcbiAgICAgICAge1wid29yZFwiOiBcImV5ZVwiLCBcInN5bGxhYmxlc1wiOiAxfSxcbiAgICAgICAge1wid29yZFwiOiBcImZha2VcIiwgXCJzeWxsYWJsZXNcIjogMX0sXG4gICAgICAgIHtcIndvcmRcIjogXCJmYW1lXCIsIFwic3lsbGFibGVzXCI6IDF9LFxuICAgICAgICB7XCJ3b3JkXCI6IFwiZmF0aWd1ZVwiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAge1wid29yZFwiOiBcImZlbW1lXCIsIFwic3lsbGFibGVzXCI6IDF9LFxuICAgICAgICB7XCJ3b3JkXCI6IFwiZm9yY2VcIiwgXCJzeWxsYWJsZXNcIjogMX0sXG4gICAgICAgIHtcIndvcmRcIjogXCJnYW1lXCIsIFwic3lsbGFibGVzXCI6IDF9LFxuICAgICAgICB7XCJ3b3JkXCI6IFwiZ2FtZXNcIiwgXCJzeWxsYWJsZXNcIjogMX0sXG4gICAgICAgIHtcIndvcmRcIjogXCJnYXRlXCIsIFwic3lsbGFibGVzXCI6IDF9LFxuICAgICAgICB7XCJ3b3JkXCI6IFwiZ3JhbmRlXCIsIFwic3lsbGFibGVzXCI6IDF9LFxuICAgICAgICB7XCJ3b3JkXCI6IFwiaWNlXCIsIFwic3lsbGFibGVzXCI6IDF9LFxuICAgICAgICB7XCJ3b3JkXCI6IFwiaW9uXCIsIFwic3lsbGFibGVzXCI6IDJ9LFxuICAgICAgICB7XCJ3b3JkXCI6IFwiam9rZVwiLCBcInN5bGxhYmxlc1wiOiAxfSxcbiAgICAgICAge1wid29yZFwiOiBcImp1cGVcIiwgXCJzeWxsYWJsZXNcIjogMX0sXG4gICAgICAgIHtcIndvcmRcIjogXCJtYWlzY2hcIiwgXCJzeWxsYWJsZXNcIjogMX0sXG4gICAgICAgIHtcIndvcmRcIjogXCJtYWlzY2hlXCIsIFwic3lsbGFibGVzXCI6IDJ9LFxuICAgICAgICB7XCJ3b3JkXCI6IFwibW92ZVwiLCBcInN5bGxhYmxlc1wiOiAxfSxcbiAgICAgICAge1wid29yZFwiOiBcIm5hdGl2ZVwiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAge1wid29yZFwiOiBcIm5pY2VcIiwgXCJzeWxsYWJsZXNcIjogMX0sXG4gICAgICAgIHtcIndvcmRcIjogXCJvbmVcIiwgXCJzeWxsYWJsZXNcIjogMX0sXG4gICAgICAgIHtcIndvcmRcIjogXCJwaXBlXCIsIFwic3lsbGFibGVzXCI6IDF9LFxuICAgICAgICB7XCJ3b3JkXCI6IFwicHJpbWVcIiwgXCJzeWxsYWJsZXNcIjogMX0sXG4gICAgICAgIHtcIndvcmRcIjogXCJyYXRlXCIsIFwic3lsbGFibGVzXCI6IDF9LFxuICAgICAgICB7XCJ3b3JkXCI6IFwicmh5dGhtXCIsIFwic3lsbGFibGVzXCI6IDJ9LFxuICAgICAgICB7XCJ3b3JkXCI6IFwicmlkZVwiLCBcInN5bGxhYmxlc1wiOiAxfSxcbiAgICAgICAge1wid29yZFwiOiBcInJpZGVzXCIsIFwic3lsbGFibGVzXCI6IDF9LFxuICAgICAgICB7XCJ3b3JkXCI6IFwicmllblwiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAge1wid29yZFwiOiBcInNhdmVcIiwgXCJzeWxsYWJsZXNcIjogMX0sXG4gICAgICAgIHtcIndvcmRcIjogXCJzY2llbmNlXCIsIFwic3lsbGFibGVzXCI6IDJ9LFxuICAgICAgICB7XCJ3b3JkXCI6IFwic2nDqGNsZVwiLCBcInN5bGxhYmxlc1wiOiAxfSxcbiAgICAgICAge1wid29yZFwiOiBcInNpdGVcIiwgXCJzeWxsYWJsZXNcIjogMX0sXG4gICAgICAgIHtcIndvcmRcIjogXCJzdWl0ZVwiLCBcInN5bGxhYmxlc1wiOiAxfSxcbiAgICAgICAge1wid29yZFwiOiBcInRha2VcIiwgXCJzeWxsYWJsZXNcIjogMX0sXG4gICAgICAgIHtcIndvcmRcIjogXCJ0YXVwZVwiLCBcInN5bGxhYmxlc1wiOiAxfSxcbiAgICAgICAge1wid29yZFwiOiBcInVuaXZlcnNlXCIsIFwic3lsbGFibGVzXCI6IDN9LFxuICAgICAgICB7XCJ3b3JkXCI6IFwidm9ndWVcIiwgXCJzeWxsYWJsZXNcIjogMX0sXG4gICAgICAgIHtcIndvcmRcIjogXCJ3YXZlXCIsIFwic3lsbGFibGVzXCI6IDF9LFxuICAgICAgICB7XCJ3b3JkXCI6IFwiemlvblwiLCBcInN5bGxhYmxlc1wiOiAyfVxuICAgICAgXSxcbiAgICAgIFwiZnJhZ21lbnRzXCI6IHtcbiAgICAgICAgXCJnbG9iYWxcIjogW1xuICAgICAgICAgIHtcIndvcmRcIjogXCJhYnJlYWt0aW9uXCIsIFwic3lsbGFibGVzXCI6IDR9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJhZHdhcmVcIiwgXCJzeWxsYWJsZXNcIjogMn0sXG4gICAgICAgICAge1wid29yZFwiOiBcImFmZmFpcmVcIiwgXCJzeWxsYWJsZXNcIjogM30sXG4gICAgICAgICAge1wid29yZFwiOiBcImFpZ3Vpw6hyZVwiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwiYW5pc2V0dGVcIiwgXCJzeWxsYWJsZXNcIjogM30sXG4gICAgICAgICAge1wid29yZFwiOiBcImFwcGVhbFwiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwiYmFja3N0YWdlXCIsIFwic3lsbGFibGVzXCI6IDJ9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJiYW5rcmF0ZVwiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwiYmFzZWJhbGxcIiwgXCJzeWxsYWJsZXNcIjogMn0sXG4gICAgICAgICAge1wid29yZFwiOiBcImJhc2VqdW1wXCIsIFwic3lsbGFibGVzXCI6IDJ9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJiZWFjaGNvbWJlclwiLCBcInN5bGxhYmxlc1wiOiAzfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwiYmVhY2h2b2xsZXliYWxsXCIsIFwic3lsbGFibGVzXCI6IDR9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJiZWFnbGVcIiwgXCJzeWxsYWJsZXNcIjogMn0sXG4gICAgICAgICAge1wid29yZFwiOiBcImJlYW1lclwiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwiYmVhbWVyXCIsIFwic3lsbGFibGVzXCI6IDJ9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJiw6lhcm5haXNlXCIsIFwic3lsbGFibGVzXCI6IDN9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJiZWF1Zm9ydFwiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwiYmVhdWpvbGFpc1wiLCBcInN5bGxhYmxlc1wiOiAzfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwiYmVhdXTDqVwiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwiYmVhdXR5XCIsIFwic3lsbGFibGVzXCI6IDJ9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJiZWxnaWVyXCIsIFwic3lsbGFibGVzXCI6IDN9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJiZXN0aWVuXCIsIFwic3lsbGFibGVzXCI6IDJ9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJiaXNrdWl0XCIsIFwic3lsbGFibGVzXCI6IDJ9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJibGVhY2hcIiwgXCJzeWxsYWJsZXNcIjogMX0sXG4gICAgICAgICAge1wid29yZFwiOiBcImJvYXJkXCIsIFwic3lsbGFibGVzXCI6IDF9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJib2F0XCIsIFwic3lsbGFibGVzXCI6IDF9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJib2R5c3VpdFwiLCBcInN5bGxhYmxlc1wiOiAzfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwiYm9yZGVsYWlzZVwiLCBcInN5bGxhYmxlc1wiOiAzfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwiYnJlYWtcIiwgXCJzeWxsYWJsZXNcIjogMX0sXG4gICAgICAgICAge1wid29yZFwiOiBcImJ1aWxkXCIsIFwic3lsbGFibGVzXCI6IDF9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJidXJlYXVcIiwgXCJzeWxsYWJsZXNcIjogMn0sXG4gICAgICAgICAge1wid29yZFwiOiBcImJ1c2luZXNzXCIsIFwic3lsbGFibGVzXCI6IDJ9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJjYWJyaW9cIiwgXCJzeWxsYWJsZXNcIjogM30sXG4gICAgICAgICAge1wid29yZFwiOiBcImNhYnJpb2xldFwiLCBcInN5bGxhYmxlc1wiOiA0fSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwiY2FjaGVzZXhlXCIsIFwic3lsbGFibGVzXCI6IDJ9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJjYW1haWV1XCIsIFwic3lsbGFibGVzXCI6IDN9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJjYW55b25cIiwgXCJzeWxsYWJsZXNcIjogMn0sXG4gICAgICAgICAge1wid29yZFwiOiBcImNhc2VcIiwgXCJzeWxsYWJsZXNcIjogMX0sXG4gICAgICAgICAge1wid29yZFwiOiBcImNhdHN1aXRcIiwgXCJzeWxsYWJsZXNcIjogMn0sXG4gICAgICAgICAge1wid29yZFwiOiBcImNlbnRpbWVcIiwgXCJzeWxsYWJsZXNcIjogM30sXG4gICAgICAgICAge1wid29yZFwiOiBcImNoYW1waW9uXCIsIFwic3lsbGFibGVzXCI6IDJ9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJjaGFtcGlvbmF0XCIsIFwic3lsbGFibGVzXCI6IDN9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJjaGFwaXRlYXVcIiwgXCJzeWxsYWJsZXNcIjogM30sXG4gICAgICAgICAge1wid29yZFwiOiBcImNoYXRlYXVcIiwgXCJzeWxsYWJsZXNcIjogMn0sXG4gICAgICAgICAge1wid29yZFwiOiBcImNow6J0ZWF1XCIsIFwic3lsbGFibGVzXCI6IDJ9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJjaGVhdFwiLCBcInN5bGxhYmxlc1wiOiAxfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwiY2hlZXNlXCIsIFwic3lsbGFibGVzXCI6IDF9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJjaGlodWFodWFcIiwgXCJzeWxsYWJsZXNcIjogM30sXG4gICAgICAgICAge1wid29yZFwiOiBcImNob2ljZVwiLCBcInN5bGxhYmxlc1wiOiAxfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwiY2lyY29uZmxleGVcIiwgXCJzeWxsYWJsZXNcIjogM30sXG4gICAgICAgICAge1wid29yZFwiOiBcImNsZWFuXCIsIFwic3lsbGFibGVzXCI6IDF9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJjbG9jaGVcIiwgXCJzeWxsYWJsZXNcIjogMX0sXG4gICAgICAgICAge1wid29yZFwiOiBcImNsb3NlXCIsIFwic3lsbGFibGVzXCI6IDF9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJjbG90aGVzXCIsIFwic3lsbGFibGVzXCI6IDF9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJjb21tZXJjZVwiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwiY3JpbWVcIiwgXCJzeWxsYWJsZXNcIjogMX0sXG4gICAgICAgICAge1wid29yZFwiOiBcImNyb3NzcmF0ZVwiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwiY3Vpc2luZVwiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwiY3Vsb3R0ZVwiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwiZGVhdGhcIiwgXCJzeWxsYWJsZXNcIjogMX0sXG4gICAgICAgICAge1wid29yZFwiOiBcImRlZmVuc2VcIiwgXCJzeWxsYWJsZXNcIjogMn0sXG4gICAgICAgICAge1wid29yZFwiOiBcImTDqXRlbnRlXCIsIFwic3lsbGFibGVzXCI6IDJ9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJkcmVhZFwiLCBcInN5bGxhYmxlc1wiOiAxfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwiZHJlYW1cIiwgXCJzeWxsYWJsZXNcIjogMX0sXG4gICAgICAgICAge1wid29yZFwiOiBcImRyZXNzY29kZVwiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwiZHVuZ2VvblwiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwiZWFzeVwiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwiZW5nYWdlbWVudFwiLCBcInN5bGxhYmxlc1wiOiAzfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwiZW50ZW50ZVwiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwiZXllLWNhdGNoZXJcIiwgXCJzeWxsYWJsZXNcIjogM30sXG4gICAgICAgICAge1wid29yZFwiOiBcImV5ZWNhdGNoZXJcIiwgXCJzeWxsYWJsZXNcIjogM30sXG4gICAgICAgICAge1wid29yZFwiOiBcImV5ZWxpbmVyXCIsIFwic3lsbGFibGVzXCI6IDN9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJleWV3b3JkXCIsIFwic3lsbGFibGVzXCI6IDJ9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJmYXNoaW9uXCIsIFwic3lsbGFibGVzXCI6IDJ9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJmZXJpZW5cIiwgXCJzeWxsYWJsZXNcIjogM30sXG4gICAgICAgICAge1wid29yZFwiOiBcImZpbmVsaW5lclwiLCBcInN5bGxhYmxlc1wiOiAzfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwiZmlzaGV5ZVwiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwiZmxha2VcIiwgXCJzeWxsYWJsZXNcIjogMX0sXG4gICAgICAgICAge1wid29yZFwiOiBcImZsYW1iZWF1XCIsIFwic3lsbGFibGVzXCI6IDJ9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJmbGF0cmF0ZVwiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwiZmxlZWNlXCIsIFwic3lsbGFibGVzXCI6IDF9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJmcmHDrmNoZVwiLCBcInN5bGxhYmxlc1wiOiAxfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwiZnJlYWtcIiwgXCJzeWxsYWJsZXNcIjogMX0sXG4gICAgICAgICAge1wid29yZFwiOiBcImZyaXRlc1wiLCBcInN5bGxhYmxlc1wiOiAxfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwiZnV0dXJlXCIsIFwic3lsbGFibGVzXCI6IDJ9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJnYWVsaWNcIiwgXCJzeWxsYWJsZXNcIjogMn0sXG4gICAgICAgICAge1wid29yZFwiOiBcImdhbWUtc2hvd1wiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwiZ2FtZWJveVwiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwiZ2FtZXBhZFwiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwiZ2FtZXBsYXlcIiwgXCJzeWxsYWJsZXNcIjogMn0sXG4gICAgICAgICAge1wid29yZFwiOiBcImdhbWVwb3J0XCIsIFwic3lsbGFibGVzXCI6IDJ9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJnYW1lc2hvd1wiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwiZ2FyaWd1ZVwiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwiZ2FycmlndWVcIiwgXCJzeWxsYWJsZXNcIjogMn0sXG4gICAgICAgICAge1wid29yZFwiOiBcImdhdGVmb2xkXCIsIFwic3lsbGFibGVzXCI6IDJ9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJnYXRld2F5XCIsIFwic3lsbGFibGVzXCI6IDJ9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJnZWZsYXNoZWRcIiwgXCJzeWxsYWJsZXNcIjogMn0sXG4gICAgICAgICAge1wid29yZFwiOiBcImdlb3JnaWVyXCIsIFwic3lsbGFibGVzXCI6IDR9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJnb2FsXCIsIFwic3lsbGFibGVzXCI6IDF9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJncmFwZWZydWl0XCIsIFwic3lsbGFibGVzXCI6IDJ9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJncmVhdFwiLCBcInN5bGxhYmxlc1wiOiAxfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwiZ3JvdXB3YXJlXCIsIFwic3lsbGFibGVzXCI6IDJ9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJndWV1bGVcIiwgXCJzeWxsYWJsZXNcIjogMX0sXG4gICAgICAgICAge1wid29yZFwiOiBcImd1aWRlXCIsIFwic3lsbGFibGVzXCI6IDF9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJndWlsbG9jaGVcIiwgXCJzeWxsYWJsZXNcIjogMn0sXG4gICAgICAgICAge1wid29yZFwiOiBcImd5bsOkemVlblwiLCBcInN5bGxhYmxlc1wiOiA0fSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwiZ3luw7Z6ZWVuXCIsIFwic3lsbGFibGVzXCI6IDR9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJoYWlyY2FyZVwiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwiaGFyZGNvcmVcIiwgXCJzeWxsYWJsZXNcIjogMn0sXG4gICAgICAgICAge1wid29yZFwiOiBcImhhcmR3YXJlXCIsIFwic3lsbGFibGVzXCI6IDJ9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJoZWFkXCIsIFwic3lsbGFibGVzXCI6IDF9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJoZWFyaW5nXCIsIFwic3lsbGFibGVzXCI6IDJ9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJoZWFydFwiLCBcInN5bGxhYmxlc1wiOiAxfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwiaGVhdnlcIiwgXCJzeWxsYWJsZXNcIjogMn0sXG4gICAgICAgICAge1wid29yZFwiOiBcImhlZGdlXCIsIFwic3lsbGFibGVzXCI6IDF9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJoZXJvaW5cIiwgXCJzeWxsYWJsZXNcIjogM30sXG4gICAgICAgICAge1wid29yZFwiOiBcImluY2x1c2l2ZVwiLCBcInN5bGxhYmxlc1wiOiAzfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwiaW5pdGlhdGl2ZVwiLCBcInN5bGxhYmxlc1wiOiA0fSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwiaW5zaWRlXCIsIFwic3lsbGFibGVzXCI6IDJ9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJqYWd1YXJcIiwgXCJzeWxsYWJsZXNcIjogM30sXG4gICAgICAgICAge1wid29yZFwiOiBcImphbG91c2V0dGVcIiwgXCJzeWxsYWJsZXNcIjogM30sXG4gICAgICAgICAge1wid29yZFwiOiBcImplYW5zXCIsIFwic3lsbGFibGVzXCI6IDF9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJqZXVuZXNzZVwiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwianVpY2VcIiwgXCJzeWxsYWJsZXNcIjogMX0sXG4gICAgICAgICAge1wid29yZFwiOiBcImp1a2Vib3hcIiwgXCJzeWxsYWJsZXNcIjogMn0sXG4gICAgICAgICAge1wid29yZFwiOiBcImp1bXBzdWl0XCIsIFwic3lsbGFibGVzXCI6IDJ9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJrYW5hcmllblwiLCBcInN5bGxhYmxlc1wiOiA0fSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwia2FwcmlvbGVcIiwgXCJzeWxsYWJsZXNcIjogNH0sXG4gICAgICAgICAge1wid29yZFwiOiBcImthcm9zc2VyaWVsaW5pZVwiLCBcInN5bGxhYmxlc1wiOiA2fSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwia29ub3BlZW5cIiwgXCJzeWxsYWJsZXNcIjogNH0sXG4gICAgICAgICAge1wid29yZFwiOiBcImxhY3Jvc3NlXCIsIFwic3lsbGFibGVzXCI6IDJ9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJsYXBsYWNlXCIsIFwic3lsbGFibGVzXCI6IDJ9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJsYXRlLVwiLCBcInN5bGxhYmxlc1wiOiAxfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwibGVhZ3VlXCIsIFwic3lsbGFibGVzXCI6IDF9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJsZWFyblwiLCBcInN5bGxhYmxlc1wiOiAxfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwibMOpZ2nDqHJlXCIsIFwic3lsbGFibGVzXCI6IDJ9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJsaXplbnppYXRcIiwgXCJzeWxsYWJsZXNcIjogNH0sXG4gICAgICAgICAge1wid29yZFwiOiBcImxvYWRcIiwgXCJzeWxsYWJsZXNcIjogMX0sXG4gICAgICAgICAge1wid29yZFwiOiBcImxvdHRlcmllbG9zXCIsIFwic3lsbGFibGVzXCI6IDR9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJsb3VuZ2VcIiwgXCJzeWxsYWJsZXNcIjogMX0sXG4gICAgICAgICAge1wid29yZFwiOiBcImx5emVlblwiLCBcInN5bGxhYmxlc1wiOiAzfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwibWFkYW1lXCIsIFwic3lsbGFibGVzXCI6IDJ9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJtYWRlbW9pc2VsbGVcIiwgXCJzeWxsYWJsZXNcIjogM30sXG4gICAgICAgICAge1wid29yZFwiOiBcIm1hZ2llclwiLCBcInN5bGxhYmxlc1wiOiAzfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwibWFrZS11cFwiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwibWFsd2FyZVwiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwibWFuYWdlbWVudFwiLCBcInN5bGxhYmxlc1wiOiAzfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwibWFudGVhdVwiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwibWF1c29sZWVuXCIsIFwic3lsbGFibGVzXCI6IDR9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJtYXV2ZVwiLCBcInN5bGxhYmxlc1wiOiAxfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwibWVkaWVuXCIsIFwic3lsbGFibGVzXCI6IDN9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJtZXNkYW1lc1wiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwibWVzb3BvdGFtaWVuXCIsIFwic3lsbGFibGVzXCI6IDZ9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJtaWxsaWFyZGVcIiwgXCJzeWxsYWJsZXNcIjogM30sXG4gICAgICAgICAge1wid29yZFwiOiBcIm1pc3NpbGVcIiwgXCJzeWxsYWJsZXNcIjogMn0sXG4gICAgICAgICAge1wid29yZFwiOiBcIm1pc3plbGxhbmVlblwiLCBcInN5bGxhYmxlc1wiOiA1fSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwibW91c3NlXCIsIFwic3lsbGFibGVzXCI6IDF9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJtb3Vzc2VsaW5lXCIsIFwic3lsbGFibGVzXCI6IDN9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJtdXNlZW5cIiwgXCJzeWxsYWJsZXNcIjogM30sXG4gICAgICAgICAge1wid29yZFwiOiBcIm11c2V0dGVcIiwgXCJzeWxsYWJsZXNcIjogMn0sXG4gICAgICAgICAge1wid29yZFwiOiBcIm5haHVhdGxcIiwgXCJzeWxsYWJsZXNcIjogMn0sXG4gICAgICAgICAge1wid29yZFwiOiBcIm5vaXNldHRlXCIsIFwic3lsbGFibGVzXCI6IDJ9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJub3RlYm9va1wiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwibnVhbmNlXCIsIFwic3lsbGFibGVzXCI6IDN9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJudWtsZWFzZVwiLCBcInN5bGxhYmxlc1wiOiA0fSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwib2RlZW5cIiwgXCJzeWxsYWJsZXNcIjogM30sXG4gICAgICAgICAge1wid29yZFwiOiBcIm9mZmxpbmVcIiwgXCJzeWxsYWJsZXNcIjogMn0sXG4gICAgICAgICAge1wid29yZFwiOiBcIm9mZnNpZGVcIiwgXCJzeWxsYWJsZXNcIjogMn0sXG4gICAgICAgICAge1wid29yZFwiOiBcIm9sZWFzdGVyXCIsIFwic3lsbGFibGVzXCI6IDR9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJvbi1zdGFnZVwiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwib25saW5lXCIsIFwic3lsbGFibGVzXCI6IDJ9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJvcnBoZWVuXCIsIFwic3lsbGFibGVzXCI6IDN9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJwYXJmb3JjZXJpdHRcIiwgXCJzeWxsYWJsZXNcIjogM30sXG4gICAgICAgICAge1wid29yZFwiOiBcInBhdGllbnNcIiwgXCJzeWxsYWJsZXNcIjogMn0sXG4gICAgICAgICAge1wid29yZFwiOiBcInBhdGllbnRcIiwgXCJzeWxsYWJsZXNcIjogMn0sXG4gICAgICAgICAge1wid29yZFwiOiBcInBlYWNlXCIsIFwic3lsbGFibGVzXCI6IDF9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJwZWFjZVwiLCBcInN5bGxhYmxlc1wiOiAxfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwicGVhbnV0c1wiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwicGVvcGxlXCIsIFwic3lsbGFibGVzXCI6IDJ9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJwZXJpbmVlblwiLCBcInN5bGxhYmxlc1wiOiA0fSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwicGVyaXRvbmVlblwiLCBcInN5bGxhYmxlc1wiOiA1fSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwicGljdHVyZVwiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwicGllY2VcIiwgXCJzeWxsYWJsZXNcIjogMX0sXG4gICAgICAgICAge1wid29yZFwiOiBcInBpcGVsaW5lXCIsIFwic3lsbGFibGVzXCI6IDJ9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJwbGF0ZWF1XCIsIFwic3lsbGFibGVzXCI6IDJ9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJwb2VzaWVcIiwgXCJzeWxsYWJsZXNcIjogM30sXG4gICAgICAgICAge1wid29yZFwiOiBcInBvbGVwb3NpdGlvblwiLCBcInN5bGxhYmxlc1wiOiA0fSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwicG9ydGVtYW50ZWF1XCIsIFwic3lsbGFibGVzXCI6IDN9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJwb3J0ZW1vbm5haWVcIiwgXCJzeWxsYWJsZXNcIjogM30sXG4gICAgICAgICAge1wid29yZFwiOiBcInByaW1lcmF0ZVwiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwicHJpbWVyYXRlXCIsIFwic3lsbGFibGVzXCI6IDJ9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJwcmltZXRpbWVcIiwgXCJzeWxsYWJsZXNcIjogMn0sXG4gICAgICAgICAge1wid29yZFwiOiBcInByb3RlYXNlXCIsIFwic3lsbGFibGVzXCI6IDR9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJwcm90ZWluXCIsIFwic3lsbGFibGVzXCI6IDN9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJwcnl0YW5lZW5cIiwgXCJzeWxsYWJsZXNcIjogNH0sXG4gICAgICAgICAge1wid29yZFwiOiBcInF1b3RpZW50XCIsIFwic3lsbGFibGVzXCI6IDJ9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJyYWRpb1wiLCBcInN5bGxhYmxlc1wiOiAzfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwicmVhZGVyXCIsIFwic3lsbGFibGVzXCI6IDJ9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJyZWFkeVwiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwicmVhbGxpZmVcIiwgXCJzeWxsYWJsZXNcIjogMn0sXG4gICAgICAgICAge1wid29yZFwiOiBcInJlcGVhdFwiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwicmV0YWtlXCIsIFwic3lsbGFibGVzXCI6IDJ9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJyaWdvbGVcIiwgXCJzeWxsYWJsZXNcIjogMn0sXG4gICAgICAgICAge1wid29yZFwiOiBcInJpc29sbGVcIiwgXCJzeWxsYWJsZXNcIjogMn0sXG4gICAgICAgICAge1wid29yZFwiOiBcInJvYWRcIiwgXCJzeWxsYWJsZXNcIjogMX0sXG4gICAgICAgICAge1wid29yZFwiOiBcInJvYW1pbmdcIiwgXCJzeWxsYWJsZXNcIjogMn0sXG4gICAgICAgICAge1wid29yZFwiOiBcInJvcXVlZm9ydFwiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwic2FmZVwiLCBcInN5bGxhYmxlc1wiOiAxfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwic2F2b25ldHRlXCIsIFwic3lsbGFibGVzXCI6IDN9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJzY2llbmNlZmljdGlvblwiLCBcInN5bGxhYmxlc1wiOiAzfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwic2VhcmNoXCIsIFwic3lsbGFibGVzXCI6IDF9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJzZWxmbWFkZVwiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwic2VwdGltZVwiLCBcInN5bGxhYmxlc1wiOiAzfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwic2VyYXBlZW5cIiwgXCJzeWxsYWJsZXNcIjogNH0sXG4gICAgICAgICAge1wid29yZFwiOiBcInNlcnZpY2VcIiwgXCJzeWxsYWJsZXNcIjogMn0sXG4gICAgICAgICAge1wid29yZFwiOiBcInNlcnZpZXR0ZVwiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwic2hhcmVcIiwgXCJzeWxsYWJsZXNcIjogMX0sXG4gICAgICAgICAge1wid29yZFwiOiBcInNoYXZlXCIsIFwic3lsbGFibGVzXCI6IDF9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJzaG9yZVwiLCBcInN5bGxhYmxlc1wiOiAxfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwic2lkZWJhclwiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwic2lkZWJvYXJkXCIsIFwic3lsbGFibGVzXCI6IDJ9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJzaWRla2lja1wiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwic2lsaG91ZXR0ZVwiLCBcInN5bGxhYmxlc1wiOiAzfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwic2l0ZW1hcFwiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwic2xpZGVcIiwgXCJzeWxsYWJsZXNcIjogMX0sXG4gICAgICAgICAge1wid29yZFwiOiBcInNuZWFrXCIsIFwic3lsbGFibGVzXCI6IDF9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJzb2FwXCIsIFwic3lsbGFibGVzXCI6IDF9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJzb2Z0Y29yZVwiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwic29mdHdhcmVcIiwgXCJzeWxsYWJsZXNcIjogMn0sXG4gICAgICAgICAge1wid29yZFwiOiBcInNvdXRhbmVsbGVcIiwgXCJzeWxsYWJsZXNcIjogM30sXG4gICAgICAgICAge1wid29yZFwiOiBcInNwZWFrXCIsIFwic3lsbGFibGVzXCI6IDF9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJzcGVjaWFsXCIsIFwic3lsbGFibGVzXCI6IDJ9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJzcHJhY2hlaW5zdGVsbHVuZ1wiLCBcInN5bGxhYmxlc1wiOiA1fSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwic3B5d2FyZVwiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwic3F1YXJlXCIsIFwic3lsbGFibGVzXCI6IDF9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJzdGFnZWRpdmluZ1wiLCBcInN5bGxhYmxlc1wiOiAzfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwic3Rha2Vob2xkZXJcIiwgXCJzeWxsYWJsZXNcIjogM30sXG4gICAgICAgICAge1wid29yZFwiOiBcInN0YXRlbWVudFwiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwic3RlYWR5XCIsIFwic3lsbGFibGVzXCI6IDJ9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJzdGVha1wiLCBcInN5bGxhYmxlc1wiOiAxfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwic3RlYWx0aFwiLCBcInN5bGxhYmxlc1wiOiAxfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwic3RlYW1cIiwgXCJzeWxsYWJsZXNcIjogMX0sXG4gICAgICAgICAge1wid29yZFwiOiBcInN0b25lZFwiLCBcInN5bGxhYmxlc1wiOiAxfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwic3RyYWNjaWF0ZWxsYVwiLCBcInN5bGxhYmxlc1wiOiA0fSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwic3RyZWFtXCIsIFwic3lsbGFibGVzXCI6IDF9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJzdHJpZGVcIiwgXCJzeWxsYWJsZXNcIjogMX0sXG4gICAgICAgICAge1wid29yZFwiOiBcInN0cmlrZVwiLCBcInN5bGxhYmxlc1wiOiAxfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwic3VpdGNhc2VcIiwgXCJzeWxsYWJsZXNcIjogMn0sXG4gICAgICAgICAge1wid29yZFwiOiBcInN3ZWVwc3Rha2VcIiwgXCJzeWxsYWJsZXNcIjogMn0sXG4gICAgICAgICAge1wid29yZFwiOiBcInQtYm9uZVwiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwidC1zaGlydFwiLCBcInN5bGxhYmxlc1wiOiAxfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwidGFpbGdhdGVcIiwgXCJzeWxsYWJsZXNcIjogMn0sXG4gICAgICAgICAge1wid29yZFwiOiBcInRha2Utb2ZmXCIsIFwic3lsbGFibGVzXCI6IDJ9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJ0YWtlLW92ZXJcIiwgXCJzeWxsYWJsZXNcIjogM30sXG4gICAgICAgICAge1wid29yZFwiOiBcInRha2Vhd2F5XCIsIFwic3lsbGFibGVzXCI6IDN9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJ0YWtlb2ZmXCIsIFwic3lsbGFibGVzXCI6IDJ9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJ0YWtlb3ZlclwiLCBcInN5bGxhYmxlc1wiOiAzfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwidGhyb2F0XCIsIFwic3lsbGFibGVzXCI6IDF9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJ0aW1lLW91dFwiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwidGltZWxhZ1wiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwidGltZWxpbmVcIiwgXCJzeWxsYWJsZXNcIjogMn0sXG4gICAgICAgICAge1wid29yZFwiOiBcInRpbWVzaGFyaW5nXCIsIFwic3lsbGFibGVzXCI6IDN9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJ0b2FzdFwiLCBcInN5bGxhYmxlc1wiOiAxfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwidHJhdWJlbm1haXNjaGVcIiwgXCJzeWxsYWJsZXNcIjogNH0sXG4gICAgICAgICAge1wid29yZFwiOiBcInRyaXN0ZXNzZVwiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwidXNlbmV0XCIsIFwic3lsbGFibGVzXCI6IDJ9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJ2YXJpZXTDpHRcIiwgXCJzeWxsYWJsZXNcIjogNH0sXG4gICAgICAgICAge1wid29yZFwiOiBcInZhcmlldMOpXCIsIFwic3lsbGFibGVzXCI6IDR9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJ2aW5haWdyZXR0ZVwiLCBcInN5bGxhYmxlc1wiOiAzfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwidmludGFnZVwiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwidmlvbGV0dFwiLCBcInN5bGxhYmxlc1wiOiAzfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwidm9pY2VcIiwgXCJzeWxsYWJsZXNcIjogMX0sXG4gICAgICAgICAge1wid29yZFwiOiBcIndha2Vib2FyZFwiLCBcInN5bGxhYmxlc1wiOiAyfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwid2FzaGVkXCIsIFwic3lsbGFibGVzXCI6IDF9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJ3YXZlYm9hcmRcIiwgXCJzeWxsYWJsZXNcIjogMn0sXG4gICAgICAgICAge1wid29yZFwiOiBcIndlYXJcIiwgXCJzeWxsYWJsZXNcIjogMX0sXG4gICAgICAgICAge1wid29yZFwiOiBcIndlYXJcIiwgXCJzeWxsYWJsZXNcIjogMX0sXG4gICAgICAgICAge1wid29yZFwiOiBcIndlYnNpdGVcIiwgXCJzeWxsYWJsZXNcIjogMn0sXG4gICAgICAgICAge1wid29yZFwiOiBcIndoaXRlXCIsIFwic3lsbGFibGVzXCI6IDF9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJ3aWRlc2NyZWVuXCIsIFwic3lsbGFibGVzXCI6IDJ9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJ3aXJlXCIsIFwic3lsbGFibGVzXCI6IDF9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJ5YWNodFwiLCBcInN5bGxhYmxlc1wiOiAxfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwieW9ya3NoaXJlXCIsIFwic3lsbGFibGVzXCI6IDJ9LFxuICAgICAgICAgIHtcIndvcmRcIjogXCLDqXByb3V2ZXR0ZVwiLCBcInN5bGxhYmxlc1wiOiAzLCBcIm5vdEZvbGxvd2VkQnlcIjogW1wiblwiXX0sXG4gICAgICAgICAge1wid29yZFwiOiBcImdhbGV0dGVcIiwgXCJzeWxsYWJsZXNcIjogMiwgXCJub3RGb2xsb3dlZEJ5XCI6IFtcIm5cIl19LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJnaWd1ZVwiLCBcInN5bGxhYmxlc1wiOiAxLCBcIm5vdEZvbGxvd2VkQnlcIjogW1wiblwiXX0sXG4gICAgICAgICAge1wid29yZFwiOiBcImdyb292ZVwiLCBcInN5bGxhYmxlc1wiOiAxLCBcIm5vdEZvbGxvd2VkQnlcIjogW1wiblwiXX0sXG4gICAgICAgICAge1wid29yZFwiOiBcIm1vcmd1ZVwiLCBcInN5bGxhYmxlc1wiOiAxLCBcIm5vdEZvbGxvd2VkQnlcIjogW1wiblwiXX0sXG4gICAgICAgICAge1wid29yZFwiOiBcInBhaWxsZXR0ZVwiLCBcInN5bGxhYmxlc1wiOiAyLCBcIm5vdEZvbGxvd2VkQnlcIjogW1wiblwiXX0sXG4gICAgICAgICAge1wid29yZFwiOiBcInJhY2xldHRlXCIsIFwic3lsbGFibGVzXCI6IDIsIFwibm90Rm9sbG93ZWRCeVwiOiBbXCJuXCJdfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwicm91bGV0dGVcIiwgXCJzeWxsYWJsZXNcIjogMiwgXCJub3RGb2xsb3dlZEJ5XCI6IFtcIm5cIl19LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJzcGlrZVwiLCBcInN5bGxhYmxlc1wiOiAxLCBcIm5vdEZvbGxvd2VkQnlcIjogW1wiblwiXX0sXG4gICAgICAgICAge1wid29yZFwiOiBcInN0eWxlXCIsIFwic3lsbGFibGVzXCI6IDEsIFwibm90Rm9sbG93ZWRCeVwiOiBbXCJuXCJdfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwidGFibGV0dGVcIiwgXCJzeWxsYWJsZXNcIjogMiwgXCJub3RGb2xsb3dlZEJ5XCI6IFtcIm5cIl19LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJncnVuZ2VcIiwgXCJzeWxsYWJsZXNcIjogMSwgXCJub3RGb2xsb3dlZEJ5XCI6IFtcInJcIl19LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJzaXplXCIsIFwic3lsbGFibGVzXCI6IDEsIFwibm90Rm9sbG93ZWRCeVwiOiBbXCJyXCJdfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwidmFsdWVcIiwgXCJzeWxsYWJsZXNcIjogMSwgXCJub3RGb2xsb3dlZEJ5XCI6IFtcInJcIl19LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJxdWljaGVcIiwgXCJzeWxsYWJsZXNcIjogMSwgXCJub3RGb2xsb3dlZEJ5XCI6IFtcInNcIl19LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJob3VzZVwiLCBcInN5bGxhYmxlc1wiOiAxLCBcIm5vdEZvbGxvd2VkQnlcIjogW1wiblwiLCBcInNcIl19LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJzYXVjZVwiLCBcInN5bGxhYmxlc1wiOiAxLCBcIm5vdEZvbGxvd2VkQnlcIjogW1wiblwiLCBcInNcIl19LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJzcGFjZVwiLCBcInN5bGxhYmxlc1wiOiAxLCBcIm5vdEZvbGxvd2VkQnlcIjogW1wiblwiLCBcInNcIl19LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJhaXJsaW5lXCIsIFwic3lsbGFibGVzXCI6IDIsIFwibm90Rm9sbG93ZWRCeVwiOiBbXCJuXCIsIFwiclwiXX0sXG4gICAgICAgICAge1wid29yZFwiOiBcImF1dG9zYXZlXCIsIFwic3lsbGFibGVzXCI6IDMsIFwibm90Rm9sbG93ZWRCeVwiOiBbXCJuXCIsIFwiclwiXX0sXG4gICAgICAgICAge1wid29yZFwiOiBcImJhZ3BpcGVcIiwgXCJzeWxsYWJsZXNcIjogMiwgXCJub3RGb2xsb3dlZEJ5XCI6IFtcIm5cIiwgXCJyXCJdfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwiYmlrZVwiLCBcInN5bGxhYmxlc1wiOiAxLCBcIm5vdEZvbGxvd2VkQnlcIjogW1wiblwiLCBcInJcIl19LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJkYW5jZVwiLCBcInN5bGxhYmxlc1wiOiAxLCBcIm5vdEZvbGxvd2VkQnlcIjogW1wiblwiLCBcInJcIl19LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJkZWFkbGluZVwiLCBcInN5bGxhYmxlc1wiOiAyLCBcIm5vdEZvbGxvd2VkQnlcIjogW1wiblwiLCBcInJcIl19LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJoYWxmcGlwZVwiLCBcInN5bGxhYmxlc1wiOiAyLCBcIm5vdEZvbGxvd2VkQnlcIjogW1wiblwiLCBcInJcIl19LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJoZWFkbGluZVwiLCBcInN5bGxhYmxlc1wiOiAyLCBcIm5vdEZvbGxvd2VkQnlcIjogW1wiblwiLCBcInJcIl19LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJob21lXCIsIFwic3lsbGFibGVzXCI6IDEsIFwibm90Rm9sbG93ZWRCeVwiOiBbXCJuXCIsIFwiclwiXX0sXG4gICAgICAgICAge1wid29yZFwiOiBcImhvcm5waXBlXCIsIFwic3lsbGFibGVzXCI6IDIsIFwibm90Rm9sbG93ZWRCeVwiOiBbXCJuXCIsIFwiclwiXX0sXG4gICAgICAgICAge1wid29yZFwiOiBcImhvdGxpbmVcIiwgXCJzeWxsYWJsZXNcIjogMiwgXCJub3RGb2xsb3dlZEJ5XCI6IFtcIm5cIiwgXCJyXCJdfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwiaW5mb2xpbmVcIiwgXCJzeWxsYWJsZXNcIjogMywgXCJub3RGb2xsb3dlZEJ5XCI6IFtcIm5cIiwgXCJyXCJdfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwiaW5saW5lXCIsIFwic3lsbGFibGVzXCI6IDIsIFwibm90Rm9sbG93ZWRCeVwiOiBbXCJuXCIsIFwiclwiXX0sXG4gICAgICAgICAge1wid29yZFwiOiBcImtpdGVcIiwgXCJzeWxsYWJsZXNcIjogMSwgXCJub3RGb2xsb3dlZEJ5XCI6IFtcIm5cIiwgXCJyXCJdfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwicm9sbGVyYmxhZGVcIiwgXCJzeWxsYWJsZXNcIjogMSwgXCJub3RGb2xsb3dlZEJ5XCI6IFtcIm5cIiwgXCJyXCJdfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwic2NvcmVcIiwgXCJzeWxsYWJsZXNcIjogMSwgXCJub3RGb2xsb3dlZEJ5XCI6IFtcIm5cIiwgXCJyXCJdfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwic2t5bGluZVwiLCBcInN5bGxhYmxlc1wiOiAyLCBcIm5vdEZvbGxvd2VkQnlcIjogW1wiblwiLCBcInJcIl19LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJzbGFja2xpbmVcIiwgXCJzeWxsYWJsZXNcIjogMiwgXCJub3RGb2xsb3dlZEJ5XCI6IFtcIm5cIiwgXCJyXCJdfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwic2xpY2VcIiwgXCJzeWxsYWJsZXNcIjogMSwgXCJub3RGb2xsb3dlZEJ5XCI6IFtcIm5cIiwgXCJyXCJdfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwic25vb3plXCIsIFwic3lsbGFibGVzXCI6IDEsIFwibm90Rm9sbG93ZWRCeVwiOiBbXCJuXCIsIFwiclwiXX0sXG4gICAgICAgICAge1wid29yZFwiOiBcInN0b3J5bGluZVwiLCBcInN5bGxhYmxlc1wiOiAzLCBcIm5vdEZvbGxvd2VkQnlcIjogW1wiblwiLCBcInJcIl19LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJvZmZpY2VcIiwgXCJzeWxsYWJsZXNcIjogMiwgXCJub3RGb2xsb3dlZEJ5XCI6IFtcInNcIiwgXCJyXCJdfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwic3BhY2VcIiwgXCJzeWxsYWJsZXNcIjogMSwgXCJub3RGb2xsb3dlZEJ5XCI6IFtcIm5cIiwgXCJzXCIsIFwiclwiXX0sXG4gICAgICAgICAge1wid29yZFwiOiBcInRlYXNlXCIsIFwic3lsbGFibGVzXCI6IDEsIFwibm90Rm9sbG93ZWRCeVwiOiBbXCJuXCIsIFwic1wiLCBcInJcIl19XG4gICAgICAgIF0sXG4gICAgICAgIFwiYXRCZWdpbm5pbmdPckVuZFwiOiBbXG4gICAgICAgICAge1wid29yZFwiOiBcImNhc2VcIiwgXCJzeWxsYWJsZXNcIjogMX0sXG4gICAgICAgICAge1wid29yZFwiOiBcImxpZmVcIiwgXCJzeWxsYWJsZXNcIjogMX0sXG4gICAgICAgICAge1wid29yZFwiOiBcInRlYWtcIiwgXCJzeWxsYWJsZXNcIjogMX0sXG4gICAgICAgICAge1wid29yZFwiOiBcInRlYW1cIiwgXCJzeWxsYWJsZXNcIjogMX0sXG4gICAgICAgICAge1wid29yZFwiOiBcImNyZW1lXCIsIFwic3lsbGFibGVzXCI6IDEsIFwibm90Rm9sbG93ZWRCeVwiOiBbXCJuXCIsIFwiclwiXX0sXG4gICAgICAgICAge1wid29yZFwiOiBcImNyw6htZVwiLCBcInN5bGxhYmxlc1wiOiAxLCBcIm5vdEZvbGxvd2VkQnlcIjogW1wiblwiLCBcInJcIl19LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJkcml2ZVwiLCBcInN5bGxhYmxlc1wiOiAxLCBcIm5vdEZvbGxvd2VkQnlcIjogW1wiblwiLCBcInJcIl19LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJza2F0ZVwiLCBcInN5bGxhYmxlc1wiOiAxLCBcIm5vdEZvbGxvd2VkQnlcIjogW1wiblwiLCBcInJcIl19LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJ1cGRhdGVcIiwgXCJzeWxsYWJsZXNcIjogMiwgXCJub3RGb2xsb3dlZEJ5XCI6IFtcIm5cIiwgXCJyXCJdfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwidXBncmFkZVwiLCBcInN5bGxhYmxlc1wiOiAyLCBcIm5vdEZvbGxvd2VkQnlcIjogW1wiblwiLCBcInJcIl19XG4gICAgICAgIF0sXG4gICAgICAgIFwiYXRCZWdpbm5pbmdcIjogW1xuICAgICAgICAgIHtcIndvcmRcIjogXCJhbmlvblwiLCBcInN5bGxhYmxlc1wiOiAzfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwiZmFjZWxpZnRcIiwgXCJzeWxsYWJsZXNcIjogMn0sXG4gICAgICAgICAge1wid29yZFwiOiBcImppdVwiLCBcInN5bGxhYmxlc1wiOiAxfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwicGFjZVwiLCBcInN5bGxhYmxlc1wiOiAxfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwic2hha2VcIiwgXCJzeWxsYWJsZXNcIjogMX0sXG4gICAgICAgICAge1wid29yZFwiOiBcInRlYVwiLCBcInN5bGxhYmxlc1wiOiAxfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwidHJhZGVcIiwgXCJzeWxsYWJsZXNcIjogMX1cbiAgICAgICAgXSxcbiAgICAgICAgXCJhdEVuZFwiOiBbXG4gICAgICAgICAge1wid29yZFwiOiBcImZhY2VcIiwgXCJzeWxsYWJsZXNcIjogMX0sXG4gICAgICAgICAge1wid29yZFwiOiBcImZpbGVcIiwgXCJzeWxsYWJsZXNcIjogMX0sXG4gICAgICAgICAge1wid29yZFwiOiBcIm1vdXNzZVwiLCBcInN5bGxhYmxlc1wiOiAxfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwicGxhdGVcIiwgXCJzeWxsYWJsZXNcIjogMX0sXG4gICAgICAgICAge1wid29yZFwiOiBcInRhcGVcIiwgXCJzeWxsYWJsZXNcIjogMX0sXG4gICAgICAgICAge1wid29yZFwiOiBcImJ5dGVcIiwgXCJzeWxsYWJsZXNcIjogMSwgXCJhbHNvRm9sbG93ZWRCeVwiOiBbXCJzXCJdfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwiY2FwZVwiLCBcInN5bGxhYmxlc1wiOiAxLCBcImFsc29Gb2xsb3dlZEJ5XCI6IFtcInNcIl19LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJmaXZlXCIsIFwic3lsbGFibGVzXCI6IDEsIFwiYWxzb0ZvbGxvd2VkQnlcIjogW1wic1wiXX0sXG4gICAgICAgICAge1wid29yZFwiOiBcImh5cGVcIiwgXCJzeWxsYWJsZXNcIjogMSwgXCJhbHNvRm9sbG93ZWRCeVwiOiBbXCJzXCJdfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwibGVha1wiLCBcInN5bGxhYmxlc1wiOiAxLCBcImFsc29Gb2xsb3dlZEJ5XCI6IFtcInNcIl19LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJsaWtlXCIsIFwic3lsbGFibGVzXCI6IDEsIFwiYWxzb0ZvbGxvd2VkQnlcIjogW1wic1wiXX0sXG4gICAgICAgICAge1wid29yZFwiOiBcIm1ha2VcIiwgXCJzeWxsYWJsZXNcIjogMSwgXCJhbHNvRm9sbG93ZWRCeVwiOiBbXCJzXCJdfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwicGhvbmVcIiwgXCJzeWxsYWJsZXNcIjogMSwgXCJhbHNvRm9sbG93ZWRCeVwiOiBbXCJzXCJdfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwicmF2ZVwiLCBcInN5bGxhYmxlc1wiOiAxLCBcImFsc29Gb2xsb3dlZEJ5XCI6IFtcInNcIl19LFxuICAgICAgICAgIHtcIndvcmRcIjogXCJyZWdpbWVcIiwgXCJzeWxsYWJsZXNcIjogMiwgXCJhbHNvRm9sbG93ZWRCeVwiOiBbXCJzXCJdfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwic3RhdHVlXCIsIFwic3lsbGFibGVzXCI6IDIsIFwiYWxzb0ZvbGxvd2VkQnlcIjogW1wic1wiXX0sXG4gICAgICAgICAge1wid29yZFwiOiBcInN0b3JlXCIsIFwic3lsbGFibGVzXCI6IDEsIFwiYWxzb0ZvbGxvd2VkQnlcIjogW1wic1wiXX0sXG4gICAgICAgICAge1wid29yZFwiOiBcIndhdmVcIiwgXCJzeWxsYWJsZXNcIjogMSwgXCJhbHNvRm9sbG93ZWRCeVwiOiBbXCJzXCJdfSxcbiAgICAgICAgICB7XCJ3b3JkXCI6IFwiZGF0ZVwiLCBcInN5bGxhYmxlc1wiOiAxLCBcIm5vdEZvbGxvd2VkQnlcIjogW1wiblwiXX0sXG4gICAgICAgICAge1wid29yZFwiOiBcImltYWdlXCIsIFwic3lsbGFibGVzXCI6IDIsIFwibm90Rm9sbG93ZWRCeVwiOiBbXCJzXCJdfVxuICAgICAgICBdXG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCJtb2R1bGUuZXhwb3J0cz17XG5cdFwidm93ZWxzXCI6IFwiYWVpb3V5XCIsXG5cdFwiZGV2aWF0aW9uc1wiOiB7XG5cdFx0XCJ2b3dlbHNcIjogW1xuXHRcdFx0e1xuXHRcdFx0XHRcImZyYWdtZW50c1wiOiBbIFwiY2lhbFwiLCBcInRpYVwiLCBcImNpdXNcIiwgXCJjaW91c1wiLCBcImdpdVwiLCBcImlvblwiLFxuXHRcdFx0XHRcdFwiaW91XCIsIFwic2lhJFwiLCBcIlteYWVpdW95dF17Mix9ZWQkXCIsXG5cdFx0XHRcdFx0XCJbYWVpb3V5XVteYWVpdW95dHNdezEsfWUkXCIsIFwiLmVseSRcIiwgXCJbY2ddaD9lW3NkXVwiLFxuXHRcdFx0XHRcdFwicnZlZCRcIiwgXCJydmVkXCIsIFwiW2FlaW91eV1bZHRdZXM/JFwiLFxuXHRcdFx0XHRcdFwiW2FlaW91eV1bXmFlaW91eWR0XWVbc2RdPyRcIiwgXCJeW2RyXWVbYWVpb3VdW15hZWlvdV0rJFwiLFxuXHRcdFx0XHRcdFwiW2FlaW91eV1yc2UkXCIgXSxcblx0XHRcdFx0XCJjb3VudE1vZGlmaWVyXCI6IC0xXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcImZyYWdtZW50c1wiOiBbIFwiaWFcIiwgXCJyaWV0XCIsIFwiZGllblwiLCBcIml1XCIsIFwiaW9cIiwgXCJpaVwiLFxuXHRcdFx0XHRcdFwiW2FlaW91eW1dW2JkcF1sZSRcIiwgXCJbYWVpb3VdezN9XCIsIFwiXm1jXCIsIFwiaXNtJFwiLFxuXHRcdFx0XHRcdFwiKFteYWVpb3V5XSlcXFxcMWwkXCIsIFwiW15sXWxpZW5cIiwgXCJeY29hW2RnbHhdLlwiLFxuXHRcdFx0XHRcdFwiW15ncV11YVteYXVpZW9dXCIsIFwiZG50JFwiLCBcInVpdHkkXCIsIFwiaWUocnxzdClcIixcblx0XHRcdFx0XHRcIlthZWlvdXldaW5nXCIsIFwiW2FlaW91d115W2FlaW91XVwiLCBcIlteYW9daXJlW2RzXVwiLCBcIlteYW9daXJlJFwiIF0sXG5cdFx0XHRcdFwiY291bnRNb2RpZmllclwiOiAxXG5cdFx0XHR9XG5cdFx0XSxcblx0XHRcIndvcmRzXCI6IHtcblx0XHRcdFwiZnVsbFwiOiBbXG5cdFx0XHRcdHsgXCJ3b3JkXCI6IFwiYnVzaW5lc3NcIiwgXCJzeWxsYWJsZXNcIjogMiB9LFxuXHRcdFx0XHR7IFwid29yZFwiOiBcImNvaGVpcmVzc1wiLCBcInN5bGxhYmxlc1wiOiAzIH0sXG5cdFx0XHRcdHsgXCJ3b3JkXCI6IFwiY29sb25lbFwiLCBcInN5bGxhYmxlc1wiOiAyIH0sXG5cdFx0XHRcdHsgXCJ3b3JkXCI6IFwiaGVpcmVzc1wiLCBcInN5bGxhYmxlc1wiOiAyIH0sXG5cdFx0XHRcdHsgXCJ3b3JkXCI6IFwiaS5lXCIsIFwic3lsbGFibGVzXCI6IDIgfSxcblx0XHRcdFx0eyBcIndvcmRcIjogXCJzaG9yZWxpbmVcIiwgXCJzeWxsYWJsZXNcIjogMiB9LFxuXHRcdFx0XHR7IFwid29yZFwiOiBcInNpbWlsZVwiLCBcInN5bGxhYmxlc1wiOiAzIH0sXG5cdFx0XHRcdHsgXCJ3b3JkXCI6IFwidW5oZWlyZWRcIiwgXCJzeWxsYWJsZXNcIjogMiB9LFxuXHRcdFx0XHR7IFwid29yZFwiOiBcIndlZG5lc2RheVwiLCBcInN5bGxhYmxlc1wiOiAyIH1cblx0XHRcdF1cblx0XHR9XG5cdH1cbn1cbiIsIm1vZHVsZS5leHBvcnRzPXtcblx0XCJ2b3dlbHNcIjogXCJhw6HDpMOiZcOpw6vDqmnDrcOvw65vw7PDtsO0dcO6w7zDu3lcIixcblx0XCJkZXZpYXRpb25zXCI6IHtcblx0XHRcInZvd2Vsc1wiOiBbXG5cdFx0XHR7XG5cdFx0XHRcdFwiZnJhZ21lbnRzXCI6IFsgXCJ1ZSskXCIsIFwidWUkXCIsIFwiZGdlKyRcIiwgXCJkZ2UkXCIsIFwiW3RjcF1pw6tudFwiLFxuXHRcdFx0XHRcdFwiYWNlJFwiLCBcImFjZSskXCIsIFwiW2JyXWVhY2hcIiwgXCJbYWlucHJddGlhYWxcIiwgXCJbaW9ddGlhYW5cIixcblx0XHRcdFx0XHRcImd1YVt5Y11cIiwgXCJbXmldZGVhbFwiLCBcIl5kZWFsXCIsIFwidGl2ZSRcIiwgXCJiYXNlW15lbnJdXCIsXG5cdFx0XHRcdFx0XCJiYXNlJFwiLCBcImxvYWRcIiwgXCJjbG9zZVtecnRdXCIsIFwiY2xvc2UkXCIsIFwiW15lXWNva2VcIixcblx0XHRcdFx0XHRcIl5jb2tlXCIsIFwiZHJpdmVbXnJdXCIsIFwiZHJpdmUkXCIsIFwiW15zXWNvcmUkXCIsIFwiXmNvcmUkXCIsXG5cdFx0XHRcdFx0XCJmYWNlW15udF1cIiwgXCJmYWNlJFwiLCBcImNhY2hlW15jbG50eF1cIiwgXCJjYWNoZSRcIixcblx0XHRcdFx0XHRcImdhbWVbXm5scl1cIiwgXCJnYW1lJFwiIF0sXG5cdFx0XHRcdFwiY291bnRNb2RpZmllclwiOiAtMVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJmcmFnbWVudHNcIjogWyBcImHDpFwiLCBcImFldVwiLCBcImFpZVwiLCBcImFvXCIsIFwiw6tcIiwgXCJlb1wiLFxuXHRcdFx0XHRcdFwiZcO6XCIsIFwiaWVhdVwiLCBcImVhJFwiLCBcImVhKyRcIiwgXCJlYVtedV1cIiwgXCJlaVtlal1cIixcblx0XHRcdFx0XHRcImV1W2l1XVwiLCBcIsOvXCIsIFwiaWVpXCIsIFwiaWVubmVcIiwgXCJbXmxdaWV1W153XVwiLFxuXHRcdFx0XHRcdFwiW15sXWlldSRcIiwgXCJbXmxdaWV1KyRcIiwgXCJpW2F1aXldXCIsIFwic3Rpb25cIixcblx0XHRcdFx0XHRcIlteY3N0eF1pb1wiLCBcIl5zaW9uXCIsIFwicmnDqFwiLCBcIm/DtlwiLCBcIm9hXCIsIFwib2VpbmdcIixcblx0XHRcdFx0XHRcIm9leW9cIiwgXCJvaWVcIiwgXCJbZXVdw7xcIiwgXCJbXnFddVtvYWXDqF1cIiwgXCJ1aWVcIixcblx0XHRcdFx0XHRcIlthZW9sdV15W2XDqcOoYW/Ds3VdXCIsIFwiW2JobnByXWllZWxcIiwgXCJbYmhucHJdacOrbFwiIF0sXG5cdFx0XHRcdFwiY291bnRNb2RpZmllclwiOiAxXG5cdFx0XHR9XG5cdFx0XSxcblx0XHRcIndvcmRzXCI6IHtcblx0XHRcdFwiZnVsbFwiOiBbXG5cdFx0XHRcdHsgXCJ3b3JkXCI6IFwiYnllXCIsIFwic3lsbGFibGVzXCI6IDEgfSxcblx0XHRcdFx0eyBcIndvcmRcIjogXCJjdXJlXCIsIFwic3lsbGFibGVzXCI6IDEgfSxcblx0XHRcdFx0eyBcIndvcmRcIjogXCJkZWlcIiwgXCJzeWxsYWJsZXNcIjogMiB9LFxuXHRcdFx0XHR7IFwid29yZFwiOiBcImRvcGVcIiwgXCJzeWxsYWJsZXNcIjogMSB9LFxuXHRcdFx0XHR7IFwid29yZFwiOiBcImR1ZGVcIiwgXCJzeWxsYWJsZXNcIjogMSB9LFxuXHRcdFx0XHR7IFwid29yZFwiOiBcImZha2VcIiwgXCJzeWxsYWJsZXNcIjogMSB9LFxuXHRcdFx0XHR7IFwid29yZFwiOiBcImZhbWVcIiwgXCJzeWxsYWJsZXNcIjogMSB9LFxuXHRcdFx0XHR7IFwid29yZFwiOiBcImZpdmVcIiwgXCJzeWxsYWJsZXNcIjogMSB9LFxuXHRcdFx0XHR7IFwid29yZFwiOiBcImhvbGVcIiwgXCJzeWxsYWJsZXNcIjogMSB9LFxuXHRcdFx0XHR7IFwid29yZFwiOiBcImxlYXN0XCIsIFwic3lsbGFibGVzXCI6IDEgfSxcblx0XHRcdFx0eyBcIndvcmRcIjogXCJsb25lXCIsIFwic3lsbGFibGVzXCI6IDEgfSxcblx0XHRcdFx0eyBcIndvcmRcIjogXCJtaW51dGVcIiwgXCJzeWxsYWJsZXNcIjogMiB9LFxuXHRcdFx0XHR7IFwid29yZFwiOiBcIm1vdmVcIiwgXCJzeWxsYWJsZXNcIjogMSB9LFxuXHRcdFx0XHR7IFwid29yZFwiOiBcIm5pY2VcIiwgXCJzeWxsYWJsZXNcIjogMSB9LFxuXHRcdFx0XHR7IFwid29yZFwiOiBcIm9uZVwiLCBcInN5bGxhYmxlc1wiOiAxIH0sXG5cdFx0XHRcdHsgXCJ3b3JkXCI6IFwic3RhdGVcIiwgXCJzeWxsYWJsZXNcIjogMSB9LFxuXHRcdFx0XHR7IFwid29yZFwiOiBcInN1cnBsYWNlXCIsIFwic3lsbGFibGVzXCI6IDIgfSxcblx0XHRcdFx0eyBcIndvcmRcIjogXCJ0YWtlXCIsIFwic3lsbGFibGVzXCI6IDEgfSxcblx0XHRcdFx0eyBcIndvcmRcIjogXCJ0cmFkZVwiLCBcInN5bGxhYmxlc1wiOiAxIH0sXG5cdFx0XHRcdHsgXCJ3b3JkXCI6IFwid2lkZVwiLCBcInN5bGxhYmxlc1wiOiAxIH1cblx0XHRcdF0sXG5cdFx0XHRcImZyYWdtZW50c1wiOiB7XG5cdFx0XHRcdFwiZ2xvYmFsXCI6IFtcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcImFkaWV1XCIsIFwic3lsbGFibGVzXCI6IDIgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcImFpcmxpbmVcIiwgXCJzeWxsYWJsZXNcIjogMiB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwiYWlybWlsZXNcIiwgXCJzeWxsYWJsZXNcIjogMiB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwiYWxpZW5cIiwgXCJzeWxsYWJsZXNcIjogMyB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwiYW1iaWVudFwiLCBcInN5bGxhYmxlc1wiOiAzIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJhbm5vdW5jZW1lbnRcIiwgXCJzeWxsYWJsZXNcIjogMyB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwiYXBwZWFyYW5jZVwiLCBcInN5bGxhYmxlc1wiOiAzIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJhcHBlYXNlbWVudFwiLCBcInN5bGxhYmxlc1wiOiAzIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJhdGhlbmV1bVwiLCBcInN5bGxhYmxlc1wiOiA0IH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJhd2Vzb21lXCIsIFwic3lsbGFibGVzXCI6IDIgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcImJhY2NhbGF1cmVpXCIsIFwic3lsbGFibGVzXCI6IDUgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcImJhY2NhbGF1cmV1c1wiLCBcInN5bGxhYmxlc1wiOiA1IH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJiYXNlYmFsbFwiLCBcInN5bGxhYmxlc1wiOiAzIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJiYXNlanVtcFwiLCBcInN5bGxhYmxlc1wiOiAyIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJiYW5saWV1ZVwiLCBcInN5bGxhYmxlc1wiOiAzIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJiYXBhb1wiLCBcInN5bGxhYmxlc1wiOiAyIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJiYXJiZWN1ZVwiLCBcInN5bGxhYmxlc1wiOiAzIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJiZWFtZXJcIiwgXCJzeWxsYWJsZXNcIjogMiB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwiYmVhbmllXCIsIFwic3lsbGFibGVzXCI6IDIgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcImJlYXRcIiwgXCJzeWxsYWJsZXNcIjogMSB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwiYmVsbGVcIiwgXCJzeWxsYWJsZXNcIjogMiB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwiYsOqdGVcIiwgXCJzeWxsYWJsZXNcIjogMSB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwiYmluZ2V3YXRjaFwiLCBcInN5bGxhYmxlc1wiOiAyIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJibG9jbm90ZVwiLCBcInN5bGxhYmxlc1wiOiAyIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJibHVlXCIsIFwic3lsbGFibGVzXCI6IDEgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcImJvYXJkXCIsIFwic3lsbGFibGVzXCI6IDEgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcImJyZWFrXCIsIFwic3lsbGFibGVzXCI6IDEgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcImJyb2FkXCIsIFwic3lsbGFibGVzXCI6IDEgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcImJ1bGxzLWV5ZVwiLCBcInN5bGxhYmxlc1wiOiAyIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJidXNpbmVzc1wiLCBcInN5bGxhYmxlc1wiOiAyIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJieWVieWVcIiwgXCJzeWxsYWJsZXNcIjogMiB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwiY2FjYW9cIiwgXCJzeWxsYWJsZXNcIjogMiB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwiY2Flc2FyXCIsIFwic3lsbGFibGVzXCI6IDIgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcImNhbWFpZXVcIiwgXCJzeWxsYWJsZXNcIjogMyB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwiY2FvdXRjaG91Y1wiLCBcInN5bGxhYmxlc1wiOiAyIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJjYXJib2xpbmV1bVwiLCBcInN5bGxhYmxlc1wiOiA1IH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJjYXRjaHBocmFzZVwiLCBcInN5bGxhYmxlc1wiOiAxIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJjYXJyaWVyXCIsIFwic3lsbGFibGVzXCI6IDMgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcImNoZWF0XCIsIFwic3lsbGFibGVzXCI6IDEgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcImNoZWVzZVwiLCBcInN5bGxhYmxlc1wiOiAxIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJjaXJjb25mbGV4ZVwiLCBcInN5bGxhYmxlc1wiOiAzIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJjbGVhblwiLCBcInN5bGxhYmxlc1wiOiAxIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJjbG9ha1wiLCBcInN5bGxhYmxlc1wiOiAxIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJjb2J1eWluZ1wiLCBcInN5bGxhYmxlc1wiOiAzIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJjb21lYmFja1wiLCBcInN5bGxhYmxlc1wiOiAyIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJjb21mb3J0em9uZVwiLCBcInN5bGxhYmxlc1wiOiAzIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJjb21tdW5pcXXDqVwiLCBcInN5bGxhYmxlc1wiOiA0IH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJjb25vcGV1bVwiLCBcInN5bGxhYmxlc1wiOiA0IH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJjb25zb2xlXCIsIFwic3lsbGFibGVzXCI6IDIgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcImNvcnBvcmF0ZVwiLCBcInN5bGxhYmxlc1wiOiAzIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJjb8O7dGVcIiwgXCJzeWxsYWJsZXNcIjogMSB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwiY3JlYW1lclwiLCBcInN5bGxhYmxlc1wiOiAyIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJjcmltZVwiLCBcInN5bGxhYmxlc1wiOiAxIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJjcnVlc2xpXCIsIFwic3lsbGFibGVzXCI6IDIgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcImRlYWRsaW5lXCIsIFwic3lsbGFibGVzXCI6IDIgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcImRlYXV0b3Jpc2VyZW5cIiwgXCJzeWxsYWJsZXNcIjogNiB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwiZGV1Y2VcIiwgXCJzeWxsYWJsZXNcIjogMSB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwiZGV1bVwiLCBcInN5bGxhYmxlc1wiOiAyIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJkaXJuZGxcIiwgXCJzeWxsYWJsZXNcIjogMiB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwiZHJlYWRcIiwgXCJzeWxsYWJsZXNcIjogMiB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwiZHJlYW10ZWFtXCIsIFwic3lsbGFibGVzXCI6IDIgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcImRyb25lXCIsIFwic3lsbGFibGVzXCI6IDEgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcImVucXXDqnRlXCIsIFwic3lsbGFibGVzXCI6IDMgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcImVzY2FwZVwiLCBcInN5bGxhYmxlc1wiOiAyIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJleHBvc3VyZVwiLCBcInN5bGxhYmxlc1wiOiAzIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJleHRyYW5laVwiLCBcInN5bGxhYmxlc1wiOiA0IH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJleHRyYW5ldXNcIiwgXCJzeWxsYWJsZXNcIjogNCB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwiZXllY2F0Y2hlclwiLCBcInN5bGxhYmxlc1wiOiAzIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJleWVsaW5lclwiLCBcInN5bGxhYmxlc1wiOiAzIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJleWVvcGVuZXJcIiwgXCJzeWxsYWJsZXNcIjogNCB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwiZXlldHJhY2tlclwiLCBcInN5bGxhYmxlc1wiOiAzIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJleWV0cmFja2luZ1wiLCBcInN5bGxhYmxlc1wiOiAzIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJmYWlydHJhZGVcIiwgXCJzeWxsYWJsZXNcIjogMiB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwiZmF1dGV1aWxcIiwgXCJzeWxsYWJsZXNcIjogMiB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwiZmVhdHVyZVwiLCBcInN5bGxhYmxlc1wiOiAyIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJmZXVpbGxldGVlXCIsIFwic3lsbGFibGVzXCI6IDMgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcImZldWlsbGV0b25cIiwgXCJzeWxsYWJsZXNcIjogMyB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwiZmlzaGV5ZVwiLCBcInN5bGxhYmxlc1wiOiAyIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJmaW5lbGluZXJcIiwgXCJzeWxsYWJsZXNcIjogMyB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwiZmluZXR1bmVuXCIsIFwic3lsbGFibGVzXCI6IDMgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcImZvcmVoYW5kXCIsIFwic3lsbGFibGVzXCI6IDIgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcImZyZWFrXCIsIFwic3lsbGFibGVzXCI6IDEgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcImZ1c2lvbmVyZW5cIiwgXCJzeWxsYWJsZXNcIjogNCB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwiZ2F5cGFyYWRlXCIsIFwic3lsbGFibGVzXCI6IDMgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcImdheXByaWRlXCIsIFwic3lsbGFibGVzXCI6IDIgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcImdvYWxcIiwgXCJzeWxsYWJsZXNcIjogMSB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwiZ3JhcGVmcnVpdFwiLCBcInN5bGxhYmxlc1wiOiAyIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJncnV5w6hyZVwiLCBcInN5bGxhYmxlc1wiOiAzIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJndWVsZVwiLCBcInN5bGxhYmxlc1wiOiAxIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJndWVycmlsbGFcIiwgXCJzeWxsYWJsZXNcIjogMyB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwiZ3Vlc3RcIiwgXCJzeWxsYWJsZXNcIjogMSB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwiaGFyZHdhcmVcIiwgXCJzeWxsYWJsZXNcIjogMiB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwiaGF1dGVcIiwgXCJzeWxsYWJsZXNcIjogMSB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwiaGVhbGluZ1wiLCBcInN5bGxhYmxlc1wiOiAyIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJoZWF0ZXJcIiwgXCJzeWxsYWJsZXNcIjogMiB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwiaGVhdnlcIiwgXCJzeWxsYWJsZXNcIjogMiB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwiaG9heFwiLCBcInN5bGxhYmxlc1wiOiAxIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJob3RsaW5lXCIsIFwic3lsbGFibGVzXCI6IDIgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcImlkZWUtZml4ZVwiLCBcInN5bGxhYmxlc1wiOiAzIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJpbmNsdXNpdmVcIiwgXCJzeWxsYWJsZXNcIjogMyB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwiaW5saW5lXCIsIFwic3lsbGFibGVzXCI6IDIgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcImludGFrZVwiLCBcInN5bGxhYmxlc1wiOiAyIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJpbnRlbnNpdmVcIiwgXCJzeWxsYWJsZXNcIjogMyB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwiamVhbnNcIiwgXCJzeWxsYWJsZXNcIjogMSB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwiSm9uZXNcIiwgXCJzeWxsYWJsZXNcIjogMSB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwianViaWxldW1cIiwgXCJzeWxsYWJsZXNcIjogNCB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwia2FsZnNyaWJleWVcIiwgXCJzeWxsYWJsZXNcIjogMyB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwia3JhYWllbm5lc3RcIiwgXCJzeWxsYWJsZXNcIjogMyB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwibGFzdG1pbnV0ZVwiLCBcInN5bGxhYmxlc1wiOiAzIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJsZWFybmluZ1wiLCBcInN5bGxhYmxlc1wiOiAyIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJsZWFndWVcIiwgXCJzeWxsYWJsZXNcIjogMSB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwibGluZS11cFwiLCBcInN5bGxhYmxlc1wiOiAyIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJsaW5vbGV1bVwiLCBcInN5bGxhYmxlc1wiOiA0IH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJsb2FkXCIsIFwic3lsbGFibGVzXCI6IDEgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcImxvYWZlclwiLCBcInN5bGxhYmxlc1wiOiAyIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJsb25ncmVhZFwiLCBcInN5bGxhYmxlc1wiOiAyIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJsb29rYWxpa2VcIiwgXCJzeWxsYWJsZXNcIjogMyB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwibG91aXNcIiwgXCJzeWxsYWJsZXNcIjogMyB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwibHljZXVtXCIsIFwic3lsbGFibGVzXCI6IDMgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcIm1hZ2F6aW5lXCIsIFwic3lsbGFibGVzXCI6IDMgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcIm1haW5zdHJlYW1cIiwgXCJzeWxsYWJsZXNcIjogMiB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwibWFrZS1vdmVyXCIsIFwic3lsbGFibGVzXCI6IDMgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcIm1ha2UtdXBcIiwgXCJzeWxsYWJsZXNcIjogMiB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwibWFsd2FyZVwiLCBcInN5bGxhYmxlc1wiOiAyIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJtYXJtb2xldW1cIiwgXCJzeWxsYWJsZXNcIjogNCB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwibWF1c29sZXVtXCIsIFwic3lsbGFibGVzXCI6IDQgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcIm1lZGVhdXRldXJcIiwgXCJzeWxsYWJsZXNcIjogNCB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwibWlkbGlmZWNyaXNpc1wiLCBcInN5bGxhYmxlc1wiOiA0IH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJtaWdyYWluZWF1cmFcIiwgXCJzeWxsYWJsZXNcIjogNSB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwibWlsa3NoYWtlXCIsIFwic3lsbGFibGVzXCI6IDIgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcIm1pbGxlZmV1aWxsZVwiLCBcInN5bGxhYmxlc1wiOiA0IH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJtaXhlZFwiLCBcInN5bGxhYmxlc1wiOiAxIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJtdWVzbGlcIiwgXCJzeWxsYWJsZXNcIjogMiB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwibXVzZXVtXCIsIFwic3lsbGFibGVzXCI6IDMgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcIm11c3QtaGF2ZVwiLCBcInN5bGxhYmxlc1wiOiAyIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJtdXN0LXJlYWRcIiwgXCJzeWxsYWJsZXNcIjogMiB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwibm90ZWJvb2tcIiwgXCJzeWxsYWJsZXNcIjogMiB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwibm9uc2Vuc2VcIiwgXCJzeWxsYWJsZXNcIjogMiB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwibm93aGVyZVwiLCBcInN5bGxhYmxlc1wiOiAyIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJudXJ0dXJlXCIsIFwic3lsbGFibGVzXCI6IDIgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcIm9mZmxpbmVcIiwgXCJzeWxsYWJsZXNcIjogMiB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwib25lbGluZXJcIiwgXCJzeWxsYWJsZXNcIjogMyB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwib25lc2llXCIsIFwic3lsbGFibGVzXCI6IDIgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcIm9ubGluZVwiLCBcInN5bGxhYmxlc1wiOiAyIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJvcGluaW9uXCIsIFwic3lsbGFibGVzXCI6IDMgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcInBhZWxsYVwiLCBcInN5bGxhYmxlc1wiOiAzIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJwYWNlbWFrZXJcIiwgXCJzeWxsYWJsZXNcIjogMyB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwicGFuYWNoZVwiLCBcInN5bGxhYmxlc1wiOiAyIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJwYXBlZ2FhaWVubmV1c1wiLCBcInN5bGxhYmxlc1wiOiA1IH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJwYXNzZS1wYXJ0b3V0XCIsIFwic3lsbGFibGVzXCI6IDMgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcInBlYW51dHNcIiwgXCJzeWxsYWJsZXNcIjogMiB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwicGVyaWdldW1cIiwgXCJzeWxsYWJsZXNcIjogNCB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwicGVyaW5ldW1cIiwgXCJzeWxsYWJsZXNcIjogNCB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwicGVycGV0dXVtXCIsIFwic3lsbGFibGVzXCI6IDQgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcInBldHJvbGV1bVwiLCBcInN5bGxhYmxlc1wiOiA0IH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJwaG9uZVwiLCBcInN5bGxhYmxlc1wiOiAzIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJwaWN0dXJlXCIsIFwic3lsbGFibGVzXCI6IDIgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcInBsYWNlbWF0XCIsIFwic3lsbGFibGVzXCI6IDIgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcInBvcnRlLW1hbnRlYXVcIiwgXCJzeWxsYWJsZXNcIjogMyB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwicG9ydGVmZXVpbGxlXCIsIFwic3lsbGFibGVzXCI6IDQgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcInByZXNzZS1wYXBpZXJcIiwgXCJzeWxsYWJsZXNcIjogMyB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwicHJpbWV0aW1lXCIsIFwic3lsbGFibGVzXCI6IDIgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcInF1ZWVuXCIsIFwic3lsbGFibGVzXCI6IDEgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcInF1ZXN0aW9ubmFpcmVcIiwgXCJzeWxsYWJsZXNcIjogMyB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwicXVldWVcIiwgXCJzeWxsYWJsZXNcIjogMSB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwicmVhZGVyXCIsIFwic3lsbGFibGVzXCI6IDIgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcInJlYWxpdHlcIiwgXCJzeWxsYWJsZXNcIjogMyB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwicmVhbGxpZmVcIiwgXCJzeWxsYWJsZXNcIjogMiB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwicmVtYWtlXCIsIFwic3lsbGFibGVzXCI6IDIgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcInJlcGVhdFwiLCBcInN5bGxhYmxlc1wiOiAyIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJyZXBlcnRvaXJlXCIsIFwic3lsbGFibGVzXCI6IDMgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcInJlc2VhcmNoXCIsIFwic3lsbGFibGVzXCI6IDIgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcInJldmVyZW5jZVwiLCBcInN5bGxhYmxlc1wiOiAzIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJyaWJleWVcIiwgXCJzeWxsYWJsZXNcIjogMiB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwicmluZ3RvbmVcIiwgXCJzeWxsYWJsZXNcIjogMyB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwicm9hZFwiLCBcInN5bGxhYmxlc1wiOiAxIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJyb2FtaW5nXCIsIFwic3lsbGFibGVzXCI6IDIgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcInNjaWVuY2VmaWN0aW9uXCIsIFwic3lsbGFibGVzXCI6IDQgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcInNlbGZtYWRlXCIsIFwic3lsbGFibGVzXCI6IDIgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcInNpZGVraWNrXCIsIFwic3lsbGFibGVzXCI6IDIgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcInNpZ2h0c2VlaW5nXCIsIFwic3lsbGFibGVzXCI6IDMgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcInNreWxpbmVcIiwgXCJzeWxsYWJsZXNcIjogMiB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwic21pbGVcIiwgXCJzeWxsYWJsZXNcIjogMSB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwic25lYWt5XCIsIFwic3lsbGFibGVzXCI6IDIgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcInNvZnR3YXJlXCIsIFwic3lsbGFibGVzXCI6IDIgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcInNwYXJlcmliXCIsIFwic3lsbGFibGVzXCI6IDIgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcInNwZWFrZXJcIiwgXCJzeWxsYWJsZXNcIjogMiB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwic3ByZWFkXCIsIFwic3lsbGFibGVzXCI6IDEgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcInN0YXRlbWVudFwiLCBcInN5bGxhYmxlc1wiOiAyIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJzdGVha1wiLCBcInN5bGxhYmxlc1wiOiAxIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJzdGVlcGxlY2hhc2VcIiwgXCJzeWxsYWJsZXNcIjogMyB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwic3RvbmV3YXNoXCIsIFwic3lsbGFibGVzXCI6IDIgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcInN0b3JlXCIsIFwic3lsbGFibGVzXCI6IDEgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcInN0cmVha2VuXCIsIFwic3lsbGFibGVzXCI6IDIgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcInN0cmVhbVwiLCBcInN5bGxhYmxlc1wiOiAxIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJzdHJlZXR3YXJlXCIsIFwic3lsbGFibGVzXCI6IDEgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcInN1cGVyc29ha2VyXCIsIFwic3lsbGFibGVzXCI6IDQgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcInN1cnByaXNlLXBhcnR5XCIsIFwic3lsbGFibGVzXCI6IDQgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcInN3ZWF0ZXJcIiwgXCJzeWxsYWJsZXNcIjogMiB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwidGVhc2VyXCIsIFwic3lsbGFibGVzXCI6IDIgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcInRlbnVlXCIsIFwic3lsbGFibGVzXCI6IDIgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcInRlbXBsYXRlXCIsIFwic3lsbGFibGVzXCI6IDIgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcInRpbWVsaW5lXCIsIFwic3lsbGFibGVzXCI6IDIgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcInRpc3N1ZVwiLCBcInN5bGxhYmxlc1wiOiAyIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJ0b2FzdFwiLCBcInN5bGxhYmxlc1wiOiAxIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJ0w6p0ZS3DoC10w6p0ZVwiLCBcInN5bGxhYmxlc1wiOiAzIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJ0eXBlY2FzdFwiLCBcInN5bGxhYmxlc1wiOiAyIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJ1bmlxdWVcIiwgXCJzeWxsYWJsZXNcIjogMiB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwidXJldW1cIiwgXCJzeWxsYWJsZXNcIjogMyB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwidmliZVwiLCBcInN5bGxhYmxlc1wiOiAxIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJ2aWV1eFwiLCBcInN5bGxhYmxlc1wiOiAxIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJ2aWxsZVwiLCBcInN5bGxhYmxlc1wiOiAxIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJ2aW50YWdlXCIsIFwic3lsbGFibGVzXCI6IDIgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcIndhbmRlbHl1cFwiLCBcInN5bGxhYmxlc1wiOiAzIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJ3aXNlZ3V5XCIsIFwic3lsbGFibGVzXCI6IDIgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcIndha2UtdXAtY2FsbFwiLCBcInN5bGxhYmxlc1wiOiAzIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJ3ZWJjYXJlXCIsIFwic3lsbGFibGVzXCI6IDIgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcIndpbmVndW1cIiwgXCJzeWxsYWJsZXNcIjogMiB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwic3R5bGVcIiwgXCJzeWxsYWJsZXNcIjogMSwgXCJub3RGb2xsb3dlZEJ5XCI6IFsgXCJuXCIsIFwic1wiIF0gfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcImRvdWNoZVwiLCBcInN5bGxhYmxlc1wiOiAxLCBcIm5vdEZvbGxvd2VkQnlcIjogWyBcIm5cIiwgXCJzXCIgXSB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwic3BhY2VcIiwgXCJzeWxsYWJsZXNcIjogMSwgXCJub3RGb2xsb3dlZEJ5XCI6IFsgXCJuXCIsIFwic1wiIF0gfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcInN0cmlwdGVhc2VcIiwgXCJzeWxsYWJsZXNcIjogMiwgXCJub3RGb2xsb3dlZEJ5XCI6IFsgXCJuXCIsIFwic1wiIF0gfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcIm9mZmljZVwiLCBcInN5bGxhYmxlc1wiOiAyLCBcIm5vdEZvbGxvd2VkQnlcIjogWyBcInJcIiwgXCJzXCIgXSB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwiaml2ZVwiLCBcInN5bGxhYmxlc1wiOiAxLCBcIm5vdEZvbGxvd2VkQnlcIjogWyBcIm5cIiwgXCJyXCIgXSB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwia2V5bm90ZVwiLCBcInN5bGxhYmxlc1wiOiAyLCBcIm5vdEZvbGxvd2VkQnlcIjogWyBcIm5cIiwgXCJyXCIgXSB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwibW91bnRhaW5iaWtlXCIsIFwic3lsbGFibGVzXCI6IDMsIFwibm90Rm9sbG93ZWRCeVwiOiBbIFwiblwiLCBcInJcIiBdIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJjaGFsbGVuZ2VcIiwgXCJzeWxsYWJsZXNcIjogMiwgXCJub3RGb2xsb3dlZEJ5XCI6IFsgXCJuXCIsIFwiclwiLCBcInNcIiBdIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJjcnVpc2VcIiwgXCJzeWxsYWJsZXNcIjogMSwgXCJub3RGb2xsb3dlZEJ5XCI6IFsgXCJuXCIsIFwiclwiLCBcInNcIiBdIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJob3VzZVwiLCBcInN5bGxhYmxlc1wiOiAxLCBcIm5vdEZvbGxvd2VkQnlcIjogWyBcIm5cIiwgXCJyXCIsIFwic1wiIF0gfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcImRhbmNlXCIsIFwic3lsbGFibGVzXCI6IDEsIFwibm90Rm9sbG93ZWRCeVwiOiBbIFwiblwiLCBcInJcIiwgXCJzXCIgXSB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwiZnJhbmNoaXNlXCIsIFwic3lsbGFibGVzXCI6IDIsIFwibm90Rm9sbG93ZWRCeVwiOiBbIFwiblwiLCBcInJcIiwgXCJzXCIgXSB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwiZnJlZWxhbmNlXCIsIFwic3lsbGFibGVzXCI6IDIsIFwibm90Rm9sbG93ZWRCeVwiOiBbIFwiblwiLCBcInJcIiwgXCJzXCIgXSB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwibGVhc2VcIiwgXCJzeWxsYWJsZXNcIjogMSwgXCJub3RGb2xsb3dlZEJ5XCI6IFsgXCJuXCIsIFwiclwiLCBcInNcIiBdIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJsb3VuZ2VcIiwgXCJzeWxsYWJsZXNcIjogMSwgXCJub3RGb2xsb3dlZEJ5XCI6IFsgXCJuXCIsIFwiclwiLCBcInNcIiBdIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJtZXJjaGFuZGlzZVwiLCBcInN5bGxhYmxlc1wiOiAzLCBcIm5vdEZvbGxvd2VkQnlcIjogWyBcIm5cIiwgXCJyXCIsIFwic1wiIF0gfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcInBlcmZvcm1hbmNlXCIsIFwic3lsbGFibGVzXCI6IDMsIFwibm90Rm9sbG93ZWRCeVwiOiBbIFwiblwiLCBcInJcIiwgXCJzXCIgXSB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwicmVsZWFzZVwiLCBcInN5bGxhYmxlc1wiOiAyLCBcIm5vdEZvbGxvd2VkQnlcIjogWyBcIm5cIiwgXCJyXCIsIFwic1wiIF0gfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcInJlc291cmNlXCIsIFwic3lsbGFibGVzXCI6IDIsIFwibm90Rm9sbG93ZWRCeVwiOiBbIFwiblwiLCBcInJcIiwgXCJzXCIgXSB9XG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiYXRCZWdpbm5pbmdPckVuZFwiOiBbXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJieXRlXCIsIFwic3lsbGFibGVzXCI6IDEgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcImNha2VcIiwgXCJzeWxsYWJsZXNcIjogMSB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwiY2FyZVwiLCBcInN5bGxhYmxlc1wiOiAxIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJjb2FjaFwiLCBcInN5bGxhYmxlc1wiOiAxIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJjb2F0XCIsIFwic3lsbGFibGVzXCI6IDEgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcImVhcmxcIiwgXCJzeWxsYWJsZXNcIjogMSB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwiZm9hbVwiLCBcInN5bGxhYmxlc1wiOiAxIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJnYXRlXCIsIFwic3lsbGFibGVzXCI6IDEgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcImhlYWRcIiwgXCJzeWxsYWJsZXNcIjogMSB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwiaG9tZVwiLCBcInN5bGxhYmxlc1wiOiAxIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJsaXZlXCIsIFwic3lsbGFibGVzXCI6IDEgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcInNhZmVcIiwgXCJzeWxsYWJsZXNcIjogMSB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwic2l0ZVwiLCBcInN5bGxhYmxlc1wiOiAxIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJzb2FwXCIsIFwic3lsbGFibGVzXCI6IDEgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcInRlYWtcIiwgXCJzeWxsYWJsZXNcIjogMSB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwidGVhbVwiLCBcInN5bGxhYmxlc1wiOiAxIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJ3YXZlXCIsIFwic3lsbGFibGVzXCI6IDEgfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcImJyYWNlXCIsIFwic3lsbGFibGVzXCI6IDEsIFwibm90Rm9sbG93ZWRCeVwiOiBbIFwic1wiIF0gfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcImNhc2VcIiwgXCJzeWxsYWJsZXNcIjogMSwgXCJub3RGb2xsb3dlZEJ5XCI6IFsgXCJzXCIgXSB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwiZmxlZWNlXCIsIFwic3lsbGFibGVzXCI6IDEsIFwibm90Rm9sbG93ZWRCeVwiOiBbIFwic1wiIF0gfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcInNlcnZpY2VcIiwgXCJzeWxsYWJsZXNcIjogMiwgXCJub3RGb2xsb3dlZEJ5XCI6IFsgXCJzXCIgXSB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwidm9pY2VcIiwgXCJzeWxsYWJsZXNcIjogMSwgXCJub3RGb2xsb3dlZEJ5XCI6IFsgXCJzXCIgXSB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwia2l0ZVwiLCBcInN5bGxhYmxlc1wiOiAxLCBcIm5vdEZvbGxvd2VkQnlcIjogWyBcIm5cIiwgXCJyXCIgXSB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwic2thdGVcIiwgXCJzeWxsYWJsZXNcIjogMSwgXCJub3RGb2xsb3dlZEJ5XCI6IFsgXCJuXCIsIFwiclwiIF0gfSxcblx0XHRcdFx0XHR7IFwid29yZFwiOiBcInJhY2VcIiwgXCJzeWxsYWJsZXNcIjogMSwgXCJub3RGb2xsb3dlZEJ5XCI6IFsgXCJuXCIsIFwiclwiLCBcInNcIiBdIH1cblx0XHRcdFx0XSxcblx0XHRcdFx0XCJhdEJlZ2lubmluZ1wiOiBbXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJpbWFnZVwiLCBcInN5bGxhYmxlc1wiOiAyLCBcIm5vdEZvbGxvd2VkQnlcIjogWyBcInNcIiBdIH1cblx0XHRcdFx0XSxcblx0XHRcdFx0XCJhdEVuZFwiOiBbXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJmb3JjZVwiLCBcInN5bGxhYmxlc1wiOiAxIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJ0ZWFcIiwgXCJzeWxsYWJsZXNcIjogMSB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwidGltZVwiLCBcInN5bGxhYmxlc1wiOiAxIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJkYXRlXCIsIFwic3lsbGFibGVzXCI6IDEsIFwiYWxzb0ZvbGxvd2VkQnlcIjogWyBcInNcIiBdIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJoeXBlXCIsIFwic3lsbGFibGVzXCI6IDEsIFwiYWxzb0ZvbGxvd2VkQnlcIjogWyBcInNcIiBdIH0sXG5cdFx0XHRcdFx0eyBcIndvcmRcIjogXCJxdW90ZVwiLCBcInN5bGxhYmxlc1wiOiAxLCBcImFsc29Gb2xsb3dlZEJ5XCI6IFsgXCJzXCIgXSB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwidGFwZVwiLCBcInN5bGxhYmxlc1wiOiAxLCBcImFsc29Gb2xsb3dlZEJ5XCI6IFsgXCJzXCIgXSB9LFxuXHRcdFx0XHRcdHsgXCJ3b3JkXCI6IFwidXBncmFkZVwiLCBcInN5bGxhYmxlc1wiOiAyLCBcImFsc29Gb2xsb3dlZEJ5XCI6IFsgXCJzXCIgXSB9XG5cdFx0XHRcdF1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cbiIsInZhciBnZXRMYW5ndWFnZSA9IHJlcXVpcmUoIFwiLi4vaGVscGVycy9nZXRMYW5ndWFnZS5qc1wiICk7XG52YXIgaXNVbmRlZmluZWQgPSByZXF1aXJlKCBcImxvZGFzaC9pc1VuZGVmaW5lZFwiICk7XG5cblxudmFyIHRyYW5zbGl0ZXJhdGlvbnMgPSB7XG5cblx0Ly8gTGFuZ3VhZ2U6IFNwYW5pc2guXG5cdC8vIFNvdXJjZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU3BhbmlzaF9vcnRob2dyYXBoeVxuXHRlczogW1xuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRjFdL2csIGFsdGVybmF0aXZlOiBcIm5cIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRDFdL2csIGFsdGVybmF0aXZlOiBcIk5cIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRTFdL2csIGFsdGVybmF0aXZlOiBcImFcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwQzFdL2csIGFsdGVybmF0aXZlOiBcIkFcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRTldL2csIGFsdGVybmF0aXZlOiBcImVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwQzldL2csIGFsdGVybmF0aXZlOiBcIkVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRURdL2csIGFsdGVybmF0aXZlOiBcImlcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwQ0RdL2csIGFsdGVybmF0aXZlOiBcIklcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRjNdL2csIGFsdGVybmF0aXZlOiBcIm9cIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRDNdL2csIGFsdGVybmF0aXZlOiBcIk9cIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRkFcXHUwMEZDXS9nLCBhbHRlcm5hdGl2ZTogXCJ1XCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMERBXFx1MDBEQ10vZywgYWx0ZXJuYXRpdmU6IFwiVVwiIH1cblx0XSxcblx0Ly8gTGFuZ3VhZ2U6IFBvbGlzaC5cblx0Ly8gU291cmNlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Qb2xpc2hfb3J0aG9ncmFwaHlcblx0cGw6IFtcblx0XHR7IGxldHRlcjogL1tcXHUwMTA1XS9nLCBhbHRlcm5hdGl2ZTogXCJhXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTA0XS9nLCBhbHRlcm5hdGl2ZTogXCJBXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTA3XS9nLCBhbHRlcm5hdGl2ZTogXCJjXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTA2XS9nLCBhbHRlcm5hdGl2ZTogXCJDXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTE5XS9nLCBhbHRlcm5hdGl2ZTogXCJlXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTE4XS9nLCBhbHRlcm5hdGl2ZTogXCJFXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTQyXS9nLCBhbHRlcm5hdGl2ZTogXCJsXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTQxXS9nLCBhbHRlcm5hdGl2ZTogXCJMXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTQ0XS9nLCBhbHRlcm5hdGl2ZTogXCJuXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTQzXS9nLCBhbHRlcm5hdGl2ZTogXCJOXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMEYzXS9nLCBhbHRlcm5hdGl2ZTogXCJvXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMEQzXS9nLCBhbHRlcm5hdGl2ZTogXCJPXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTVCXS9nLCBhbHRlcm5hdGl2ZTogXCJzXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTVBXS9nLCBhbHRlcm5hdGl2ZTogXCJTXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTdBXFx1MDE3Q10vZywgYWx0ZXJuYXRpdmU6IFwielwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE3OVxcdTAxN0JdL2csIGFsdGVybmF0aXZlOiBcIlpcIiB9XG5cdF0sXG5cdC8vIExhbmd1YWdlOiBHZXJtYW4uXG5cdC8vIFNvdXJjZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvR2VybWFuX29ydGhvZ3JhcGh5I1NwZWNpYWxfY2hhcmFjdGVyc1xuXHRkZTogW1xuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRTRdL2csIGFsdGVybmF0aXZlOiBcImFlXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMEM0XS9nLCBhbHRlcm5hdGl2ZTogXCJBZVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBGQ10vZywgYWx0ZXJuYXRpdmU6IFwidWVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRENdL2csIGFsdGVybmF0aXZlOiBcIlVlXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMEY2XS9nLCBhbHRlcm5hdGl2ZTogXCJvZVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBENl0vZywgYWx0ZXJuYXRpdmU6IFwiT2VcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwREZdL2csIGFsdGVybmF0aXZlOiBcInNzXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUxRTlFXS9nLCBhbHRlcm5hdGl2ZTogXCJTU1wiIH1cblx0XSxcblx0Ly8gTGFuZ3VhZ2UgQm9rbcOlbFxuXHQvLyBTb3VyY2U6IGh0dHA6Ly93d3cuZGFnYmxhZGV0Lm5vLzIwMTEvMTIvMzAvdGVtYS9yZWlzZS9yZWlzZWVrc3BlcnRlci9mb3JicnVrZXJyZXR0aWdoZXRlci8xOTQ5NDIyNy9cblx0Ly8gTGFuZ3VhZ2UgTnlub3Jrc1xuXHQvLyBTb3VyY2U6IGh0dHA6Ly93d3cuZGFnYmxhZGV0Lm5vLzIwMTEvMTIvMzAvdGVtYS9yZWlzZS9yZWlzZWVrc3BlcnRlci9mb3JicnVrZXJyZXR0aWdoZXRlci8xOTQ5NDIyNy9cblx0Ly8gQm9rbcOlbCBhbmQgTnlub3JrcyB1c2UgdGhlIHNhbWUgdHJhbnNsaXRlcmF0aW9uc1xuXHRuYm5uOiBbXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBFNlxcdTA0RDVdL2csIGFsdGVybmF0aXZlOiBcImFlXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMEM2XFx1MDRENF0vZywgYWx0ZXJuYXRpdmU6IFwiQWVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRTVdL2csIGFsdGVybmF0aXZlOiBcImFhXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMEM1XS9nLCBhbHRlcm5hdGl2ZTogXCJBYVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBGOF0vZywgYWx0ZXJuYXRpdmU6IFwib2VcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRDhdL2csIGFsdGVybmF0aXZlOiBcIk9lXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMEU5XFx1MDBFOFxcdTAwRUFdL2csIGFsdGVybmF0aXZlOiBcImVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwQzlcXHUwMEM4XFx1MDBDQV0vZywgYWx0ZXJuYXRpdmU6IFwiRVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBGM1xcdTAwRjJcXHUwMEY0XS9nLCBhbHRlcm5hdGl2ZTogXCJvXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMEQzXFx1MDBEMlxcdTAwRDRdL2csIGFsdGVybmF0aXZlOiBcIk9cIiB9XG5cdF0sXG5cdC8vIExhbmd1YWdlOiBTd2VkaXNoLlxuXHQvLyBTb3VyY2VzOiBodHRwczovL3N2Lndpa2lwZWRpYS5vcmcvd2lraS8lQzMlODUjSGlzdG9yaWFcblx0Ly8gaHR0cDovL2ZvcnVtLndvcmRyZWZlcmVuY2UuY29tL3RocmVhZHMvc3dlZGlzaC0lQzMlQTQtYWUtJUMzJUI2LW9lLWFjY2VwdGFibGUuMTQ1MTgzOS9cblx0c3Y6IFtcblx0XHR7IGxldHRlcjogL1tcXHUwMEU1XS9nLCBhbHRlcm5hdGl2ZTogXCJhYVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBDNV0vZywgYWx0ZXJuYXRpdmU6IFwiQWFcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRTRdL2csIGFsdGVybmF0aXZlOiBcImFlXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMEM0XS9nLCBhbHRlcm5hdGl2ZTogXCJBZVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBGNl0vZywgYWx0ZXJuYXRpdmU6IFwib2VcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRDZdL2csIGFsdGVybmF0aXZlOiBcIk9lXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMEU5XS9nLCBhbHRlcm5hdGl2ZTogXCJlXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMEM5XS9nLCBhbHRlcm5hdGl2ZTogXCJFXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMEUwXS9nLCBhbHRlcm5hdGl2ZTogXCJhXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMEMwXS9nLCBhbHRlcm5hdGl2ZTogXCJBXCIgfVxuXHRdLFxuXHQvLyBMYW5ndWFnZTogRmlubmlzaC5cblx0Ly8gU291cmNlczogaHR0cHM6Ly93d3cuY3MudHV0LmZpL35qa29ycGVsYS9sYW5nL2Zpbm5pc2gtbGV0dGVycy5odG1sXG5cdC8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Zpbm5pc2hfb3J0aG9ncmFwaHlcblx0Zmk6IFtcblx0XHR7IGxldHRlcjogL1tcXHUwMEU1XS9nLCBhbHRlcm5hdGl2ZTogXCJhYVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBDNV0vZywgYWx0ZXJuYXRpdmU6IFwiQWFcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRTRdL2csIGFsdGVybmF0aXZlOiBcImFcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwQzRdL2csIGFsdGVybmF0aXZlOiBcIkFcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRjZdL2csIGFsdGVybmF0aXZlOiBcIm9cIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRDZdL2csIGFsdGVybmF0aXZlOiBcIk9cIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxN0VdL2csIGFsdGVybmF0aXZlOiBcInpoXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTdEXS9nLCBhbHRlcm5hdGl2ZTogXCJaaFwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE2MV0vZywgYWx0ZXJuYXRpdmU6IFwic2hcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxNjBdL2csIGFsdGVybmF0aXZlOiBcIlNoXCIgfVxuXHRdLFxuXHQvLyBMYW5ndWFnZTogRGFuaXNoLlxuXHQvLyBTb3VyY2VzOiBodHRwczovL3N2Lndpa2lwZWRpYS5vcmcvd2lraS8lQzMlODUjSGlzdG9yaWFcblx0Ly8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRGFuaXNoX29ydGhvZ3JhcGh5XG5cdGRhOiBbXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBFNV0vZywgYWx0ZXJuYXRpdmU6IFwiYWFcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwQzVdL2csIGFsdGVybmF0aXZlOiBcIkFhXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMEU2XFx1MDRENV0vZywgYWx0ZXJuYXRpdmU6IFwiYWVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwQzZcXHUwNEQ0XS9nLCBhbHRlcm5hdGl2ZTogXCJBZVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBDNF0vZywgYWx0ZXJuYXRpdmU6IFwiQWVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRjhdL2csIGFsdGVybmF0aXZlOiBcIm9lXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMEQ4XS9nLCBhbHRlcm5hdGl2ZTogXCJPZVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBFOV0vZywgYWx0ZXJuYXRpdmU6IFwiZVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBDOV0vZywgYWx0ZXJuYXRpdmU6IFwiRVwiIH1cblx0XSxcblx0Ly8gTGFuZ3VhZ2U6IFR1cmtpc2guXG5cdC8vIFNvdXJjZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVHVya2lzaF9hbHBoYWJldFxuXHQvLyDigJjEsOKAmSBpcyB0aGUgY2FwaXRhbCBkb3R0ZWQg4oCYaeKAmS4gSXRzIGxvd2VyY2FzZSBjb3VudGVycGFydCBpcyB0aGUg4oCYcmVndWxhcuKAmSDigJhp4oCZLlxuXHR0cjogW1xuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRTddL2csIGFsdGVybmF0aXZlOiBcImNcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwQzddL2csIGFsdGVybmF0aXZlOiBcIkNcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxMUZdL2csIGFsdGVybmF0aXZlOiBcImdcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxMUVdL2csIGFsdGVybmF0aXZlOiBcIkdcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRjZdL2csIGFsdGVybmF0aXZlOiBcIm9cIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRDZdL2csIGFsdGVybmF0aXZlOiBcIk9cIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxNUZdL2csIGFsdGVybmF0aXZlOiBcInNcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxNUVdL2csIGFsdGVybmF0aXZlOiBcIlNcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRTJdL2csIGFsdGVybmF0aXZlOiBcImFcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwQzJdL2csIGFsdGVybmF0aXZlOiBcIkFcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxMzFcXHUwMEVFXS9nLCBhbHRlcm5hdGl2ZTogXCJpXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTMwXFx1MDBDRV0vZywgYWx0ZXJuYXRpdmU6IFwiSVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBGQ1xcdTAwRkJdL2csIGFsdGVybmF0aXZlOiBcInVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRENcXHUwMERCXS9nLCBhbHRlcm5hdGl2ZTogXCJVXCIgfVxuXHRdLFxuXHQvLyBMYW5ndWFnZTogTGF0dmlhbi5cblx0Ly8gU291cmNlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MYXR2aWFuX29ydGhvZ3JhcGh5XG5cdGx2OiBbXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDEwMV0vZywgYWx0ZXJuYXRpdmU6IFwiYVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDEwMF0vZywgYWx0ZXJuYXRpdmU6IFwiQVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDEwRF0vZywgYWx0ZXJuYXRpdmU6IFwiY1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDEwQ10vZywgYWx0ZXJuYXRpdmU6IFwiQ1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDExM10vZywgYWx0ZXJuYXRpdmU6IFwiZVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDExMl0vZywgYWx0ZXJuYXRpdmU6IFwiRVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDEyM10vZywgYWx0ZXJuYXRpdmU6IFwiZ1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDEyMl0vZywgYWx0ZXJuYXRpdmU6IFwiR1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDEyQl0vZywgYWx0ZXJuYXRpdmU6IFwiaVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDEyQV0vZywgYWx0ZXJuYXRpdmU6IFwiSVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDEzN10vZywgYWx0ZXJuYXRpdmU6IFwia1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDEzNl0vZywgYWx0ZXJuYXRpdmU6IFwiS1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDEzQ10vZywgYWx0ZXJuYXRpdmU6IFwibFwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDEzQl0vZywgYWx0ZXJuYXRpdmU6IFwiTFwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE0Nl0vZywgYWx0ZXJuYXRpdmU6IFwiblwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE0NV0vZywgYWx0ZXJuYXRpdmU6IFwiTlwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE2MV0vZywgYWx0ZXJuYXRpdmU6IFwic1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE2MF0vZywgYWx0ZXJuYXRpdmU6IFwiU1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE2Ql0vZywgYWx0ZXJuYXRpdmU6IFwidVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE2QV0vZywgYWx0ZXJuYXRpdmU6IFwiVVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE3RV0vZywgYWx0ZXJuYXRpdmU6IFwielwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE3RF0vZywgYWx0ZXJuYXRpdmU6IFwiWlwiIH1cblx0XSxcblx0Ly8gTGFuZ3VhZ2U6IEljZWxhbmRpYy5cblx0Ly8gU291cmNlczogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVGhvcm5fKGxldHRlciksXG5cdC8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0V0aCwgIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0ljZWxhbmRpY19vcnRob2dyYXBoeVxuXHRpczogW1xuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRTFdL2csIGFsdGVybmF0aXZlOiBcImFcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwQzFdL2csIGFsdGVybmF0aXZlOiBcIkFcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRjBdL2csIGFsdGVybmF0aXZlOiBcImRcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRDBdL2csIGFsdGVybmF0aXZlOiBcIkRcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRTldL2csIGFsdGVybmF0aXZlOiBcImVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwQzldL2csIGFsdGVybmF0aXZlOiBcIkVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRURdL2csIGFsdGVybmF0aXZlOiBcImlcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwQ0RdL2csIGFsdGVybmF0aXZlOiBcIklcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRjNcXHUwMEY2XS9nLCBhbHRlcm5hdGl2ZTogXCJvXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMEQzXFx1MDBENl0vZywgYWx0ZXJuYXRpdmU6IFwiT1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBGQV0vZywgYWx0ZXJuYXRpdmU6IFwidVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBEQV0vZywgYWx0ZXJuYXRpdmU6IFwiVVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBGRF0vZywgYWx0ZXJuYXRpdmU6IFwieVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBERF0vZywgYWx0ZXJuYXRpdmU6IFwiWVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBGRV0vZywgYWx0ZXJuYXRpdmU6IFwidGhcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwREVdL2csIGFsdGVybmF0aXZlOiBcIlRoXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMEU2XFx1MDRENV0vZywgYWx0ZXJuYXRpdmU6IFwiYWVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwQzZcXHUwNEQ0XS9nLCBhbHRlcm5hdGl2ZTogXCJBZVwiIH1cblx0XSxcblx0Ly8gTGFuZ3VhZ2U6IEZhcm9lc2UuXG5cdC8vIFNvdXJjZTogaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL2dyb3Vwcy8xNTU3OTY1NzU3NzU4MjM0L3Blcm1hbGluay8xNzQ5ODQ3MTY1MjM2NzU4LyAoY29udmVyc2F0aW9uIGluIHByaXZhdGUgRmFjZWJvb2sgR3JvdXAg4oCYRmFyb2VzZSBMYW5ndWFnZSBMZWFybmluZyBFbnRodXNpYXN0c+KAmSlcblx0Ly8gZGVwZW5kaW5nIG9uIHRoZSB3b3JkLCDDsCBjYW4gYmUgZCwgZywgaiwgdiwgbmcgb3Igbm90aGluZy4gSG93ZXZlciwg4oCYZOKAmSBpcyBtb3N0IGZyZXF1ZW50LlxuXHQvLyB3aGVuIHdyaXRpbmcgdGV4dCBtZXNzYWdlcyBvciB1c2luZyBhIGZvcmVpZ24ga2V5Ym9hcmQsIMOtIGlzIHNvbWV0aW1lcyB3cml0dGVuIGFzIGlqLCDDvSBhcyB5aiwgw7ogYXMgdXYsIMOzIGFzIG92LCDDuCBhcyBvZSwgYW5kIMOhIGFzIGFhIG9yIG9hLlxuXHQvLyBIb3dldmVyLCBpbiB3ZWJzaXRlIFVSTHMgdGhlIGFsdGVybmF0aXZlcyBtZW50aW9uZWQgYmVsb3cgYXJlIGJ5IGZhciB0aGUgbW9zdCBjb21tb24uXG5cdGZhOiBbXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBFMV0vZywgYWx0ZXJuYXRpdmU6IFwiYVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBDMV0vZywgYWx0ZXJuYXRpdmU6IFwiQVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBGMF0vZywgYWx0ZXJuYXRpdmU6IFwiZFwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBEMF0vZywgYWx0ZXJuYXRpdmU6IFwiRFwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBFRF0vZywgYWx0ZXJuYXRpdmU6IFwiaVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBDRF0vZywgYWx0ZXJuYXRpdmU6IFwiSVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBGRF0vZywgYWx0ZXJuYXRpdmU6IFwieVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBERF0vZywgYWx0ZXJuYXRpdmU6IFwiWVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBGQV0vZywgYWx0ZXJuYXRpdmU6IFwidVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBEQV0vZywgYWx0ZXJuYXRpdmU6IFwiVVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBGM1xcdTAwRjhdL2csIGFsdGVybmF0aXZlOiBcIm9cIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRDNcXHUwMEQ4XS9nLCBhbHRlcm5hdGl2ZTogXCJPXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMEU2XFx1MDRENV0vZywgYWx0ZXJuYXRpdmU6IFwiYWVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwQzZcXHUwNEQ0XS9nLCBhbHRlcm5hdGl2ZTogXCJBZVwiIH1cblx0XSxcblx0Ly8gTGFuZ3VhZ2U6IEN6ZWNoLlxuXHQvLyBTb3VyY2U6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0N6ZWNoX29ydGhvZ3JhcGh5XG5cdGNzOiBbXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBFMV0vZywgYWx0ZXJuYXRpdmU6IFwiYVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBDMV0vZywgYWx0ZXJuYXRpdmU6IFwiQVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDEwRF0vZywgYWx0ZXJuYXRpdmU6IFwiY1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDEwQ10vZywgYWx0ZXJuYXRpdmU6IFwiQ1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDEwRl0vZywgYWx0ZXJuYXRpdmU6IFwiZFwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDEwRV0vZywgYWx0ZXJuYXRpdmU6IFwiRFwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBFRF0vZywgYWx0ZXJuYXRpdmU6IFwiaVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBDRF0vZywgYWx0ZXJuYXRpdmU6IFwiSVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE0OF0vZywgYWx0ZXJuYXRpdmU6IFwiblwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE0N10vZywgYWx0ZXJuYXRpdmU6IFwiTlwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBGM10vZywgYWx0ZXJuYXRpdmU6IFwib1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBEM10vZywgYWx0ZXJuYXRpdmU6IFwiT1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE1OV0vZywgYWx0ZXJuYXRpdmU6IFwiclwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE1OF0vZywgYWx0ZXJuYXRpdmU6IFwiUlwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE2MV0vZywgYWx0ZXJuYXRpdmU6IFwic1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE2MF0vZywgYWx0ZXJuYXRpdmU6IFwiU1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE2NV0vZywgYWx0ZXJuYXRpdmU6IFwidFwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE2NF0vZywgYWx0ZXJuYXRpdmU6IFwiVFwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBGRF0vZywgYWx0ZXJuYXRpdmU6IFwieVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBERF0vZywgYWx0ZXJuYXRpdmU6IFwiWVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE3RV0vZywgYWx0ZXJuYXRpdmU6IFwielwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE3RF0vZywgYWx0ZXJuYXRpdmU6IFwiWlwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBFOVxcdTAxMUJdL2csIGFsdGVybmF0aXZlOiBcImVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwQzlcXHUwMTFBXS9nLCBhbHRlcm5hdGl2ZTogXCJFXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMEZBXFx1MDE2Rl0vZywgYWx0ZXJuYXRpdmU6IFwidVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBEQVxcdTAxNkVdL2csIGFsdGVybmF0aXZlOiBcIlVcIiB9XG5cdF0sXG5cdC8vIExhbmd1YWdlOiBSdXNzaWFuLlxuXHQvLyBTb3VyY2U6ICBNYWNoaW5lIFJlYWRhYmxlIFRyYXZlbCBEb2N1bWVudHMsIERvYyA5MzAzLCBQYXJ0IDEsIFZvbHVtZSAxIChQREYpIChTaXh0aCBlZC4pLlxuXHQvLyBJQ0FPLiAyMDA2LiBwLiBJVi01MOKAlElWLTUyLiBodHRwOi8vd3d3LmljYW8uaW50L3B1YmxpY2F0aW9ucy9Eb2N1bWVudHMvOTMwM19wM19jb25zX2VuLnBkZlxuXHQvLyDigJjRjOKAmSBpcyB0aGUgc28tY2FsbGVkIHNvZnQgc2lnbiwgaW5kaWNhdGluZyBhIHNvdW5kIGNoYW5nZSAocGFsYXRhbGl6YXRpb24pIG9mIHRoZSBwcmVjZWRpbmcgY29uc29uYW50LlxuXHQvLyBJbiB0ZXh0IGl0IGlzIHRyYW5zbGl0ZXJhdGVkIHRvIGEgY2hhcmFjdGVyIHNpbWlsYXIgdG8gYW4gYXBvc3Ryb3BoOiDigLIuXG5cdC8vIEkgcmVjb21tZW5kIG9taXR0YW5jZSBpbiBzbHVncy4gKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1JvbWFuaXphdGlvbl9vZl9SdXNzaWFuKVxuXHRydTogW1xuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MzBdL2csIGFsdGVybmF0aXZlOiBcImFcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MTBdL2csIGFsdGVybmF0aXZlOiBcIkFcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MzFdL2csIGFsdGVybmF0aXZlOiBcImJcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MTFdL2csIGFsdGVybmF0aXZlOiBcIkJcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MzJdL2csIGFsdGVybmF0aXZlOiBcInZcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MTJdL2csIGFsdGVybmF0aXZlOiBcIlZcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MzNdL2csIGFsdGVybmF0aXZlOiBcImdcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MTNdL2csIGFsdGVybmF0aXZlOiBcIkdcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MzRdL2csIGFsdGVybmF0aXZlOiBcImRcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MTRdL2csIGFsdGVybmF0aXZlOiBcIkRcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MzVdL2csIGFsdGVybmF0aXZlOiBcImVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MTVdL2csIGFsdGVybmF0aXZlOiBcIkVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MzZdL2csIGFsdGVybmF0aXZlOiBcInpoXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDE2XS9nLCBhbHRlcm5hdGl2ZTogXCJaaFwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDQzN10vZywgYWx0ZXJuYXRpdmU6IFwielwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDQxN10vZywgYWx0ZXJuYXRpdmU6IFwiWlwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDQ1NlxcdTA0MzhcXHUwNDM5XS9nLCBhbHRlcm5hdGl2ZTogXCJpXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDA2XFx1MDQxOFxcdTA0MTldL2csIGFsdGVybmF0aXZlOiBcIklcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0M0FdL2csIGFsdGVybmF0aXZlOiBcImtcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MUFdL2csIGFsdGVybmF0aXZlOiBcIktcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0M0JdL2csIGFsdGVybmF0aXZlOiBcImxcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MUJdL2csIGFsdGVybmF0aXZlOiBcIkxcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0M0NdL2csIGFsdGVybmF0aXZlOiBcIm1cIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MUNdL2csIGFsdGVybmF0aXZlOiBcIk1cIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0M0RdL2csIGFsdGVybmF0aXZlOiBcIm5cIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MURdL2csIGFsdGVybmF0aXZlOiBcIk5cIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0NDBdL2csIGFsdGVybmF0aXZlOiBcInJcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MjBdL2csIGFsdGVybmF0aXZlOiBcIlJcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0M0VdL2csIGFsdGVybmF0aXZlOiBcIm9cIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MUVdL2csIGFsdGVybmF0aXZlOiBcIk9cIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0M0ZdL2csIGFsdGVybmF0aXZlOiBcInBcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MUZdL2csIGFsdGVybmF0aXZlOiBcIlBcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0NDFdL2csIGFsdGVybmF0aXZlOiBcInNcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MjFdL2csIGFsdGVybmF0aXZlOiBcIlNcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0NDJdL2csIGFsdGVybmF0aXZlOiBcInRcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MjJdL2csIGFsdGVybmF0aXZlOiBcIlRcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0NDNdL2csIGFsdGVybmF0aXZlOiBcInVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MjNdL2csIGFsdGVybmF0aXZlOiBcIlVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0NDRdL2csIGFsdGVybmF0aXZlOiBcImZcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MjRdL2csIGFsdGVybmF0aXZlOiBcIkZcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0NDVdL2csIGFsdGVybmF0aXZlOiBcImtoXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDI1XS9nLCBhbHRlcm5hdGl2ZTogXCJLaFwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDQ0Nl0vZywgYWx0ZXJuYXRpdmU6IFwidHNcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MjZdL2csIGFsdGVybmF0aXZlOiBcIlRzXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDQ3XS9nLCBhbHRlcm5hdGl2ZTogXCJjaFwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDQyN10vZywgYWx0ZXJuYXRpdmU6IFwiQ2hcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0NDhdL2csIGFsdGVybmF0aXZlOiBcInNoXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDI4XS9nLCBhbHRlcm5hdGl2ZTogXCJTaFwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDQ0OV0vZywgYWx0ZXJuYXRpdmU6IFwic2hjaFwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDQyOV0vZywgYWx0ZXJuYXRpdmU6IFwiU2hjaFwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDQ0QV0vZywgYWx0ZXJuYXRpdmU6IFwiaWVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MkFdL2csIGFsdGVybmF0aXZlOiBcIkllXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDRCXS9nLCBhbHRlcm5hdGl2ZTogXCJ5XCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDJCXS9nLCBhbHRlcm5hdGl2ZTogXCJZXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDRDXS9nLCBhbHRlcm5hdGl2ZTogXCJcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MkNdL2csIGFsdGVybmF0aXZlOiBcIlwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDQ1MVxcdTA0NERdL2csIGFsdGVybmF0aXZlOiBcImVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MDFcXHUwNDJEXS9nLCBhbHRlcm5hdGl2ZTogXCJFXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDRFXS9nLCBhbHRlcm5hdGl2ZTogXCJpdVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDQyRV0vZywgYWx0ZXJuYXRpdmU6IFwiSXVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0NEZdL2csIGFsdGVybmF0aXZlOiBcImlhXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDJGXS9nLCBhbHRlcm5hdGl2ZTogXCJJYVwiIH1cblx0XSxcblx0Ly8gTGFuZ3VhZ2U6IEVzcGVyYW50by5cblx0Ly8gU291cmNlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Fc3BlcmFudG8jV3JpdGluZ19kaWFjcml0aWNzXG5cdGVvOiBbXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDEwOV0vZywgYWx0ZXJuYXRpdmU6IFwiY2hcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxMDhdL2csIGFsdGVybmF0aXZlOiBcIkNoXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTFkXS9nLCBhbHRlcm5hdGl2ZTogXCJnaFwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDExY10vZywgYWx0ZXJuYXRpdmU6IFwiR2hcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxMjVdL2csIGFsdGVybmF0aXZlOiBcImh4XCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTI0XS9nLCBhbHRlcm5hdGl2ZTogXCJIeFwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDEzNV0vZywgYWx0ZXJuYXRpdmU6IFwianhcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxMzRdL2csIGFsdGVybmF0aXZlOiBcIkp4XCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTVkXS9nLCBhbHRlcm5hdGl2ZTogXCJzeFwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE1Y10vZywgYWx0ZXJuYXRpdmU6IFwiU3hcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxNmRdL2csIGFsdGVybmF0aXZlOiBcInV4XCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTZjXS9nLCBhbHRlcm5hdGl2ZTogXCJVeFwiIH1cblx0XSxcblx0Ly8gTGFuZ3VhZ2U6IEFmcmlrYWFucy5cblx0Ly8gU291cmNlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9BZnJpa2FhbnMjT3J0aG9ncmFwaHlcblx0YWY6IFtcblx0XHR7IGxldHRlcjogL1tcXHUwMEU4XFx1MDBFQVxcdTAwRUJdL2csIGFsdGVybmF0aXZlOiBcImVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwQ0JcXHUwMEM4XFx1MDBDQV0vZywgYWx0ZXJuYXRpdmU6IFwiRVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBFRVxcdTAwRUZdL2csIGFsdGVybmF0aXZlOiBcImlcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwQ0VcXHUwMENGXS9nLCBhbHRlcm5hdGl2ZTogXCJJXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMEY0XFx1MDBGNl0vZywgYWx0ZXJuYXRpdmU6IFwib1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBENFxcdTAwRDZdL2csIGFsdGVybmF0aXZlOiBcIk9cIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRkJcXHUwMEZDXS9nLCBhbHRlcm5hdGl2ZTogXCJ1XCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMERCXFx1MDBEQ10vZywgYWx0ZXJuYXRpdmU6IFwiVVwiIH1cblx0XSxcblx0Ly8gTGFuZ3VhZ2U6IENhdGFsYW4uXG5cdC8vIFNvdXJjZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ2F0YWxhbl9vcnRob2dyYXBoeVxuXHRjYTogW1xuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRTBdL2csIGFsdGVybmF0aXZlOiBcImFcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwQzBdL2csIGFsdGVybmF0aXZlOiBcIkFcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRTl8XFx1MDBFOF0vZywgYWx0ZXJuYXRpdmU6IFwiZVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBDOXxcXHUwMEM4XS9nLCBhbHRlcm5hdGl2ZTogXCJFXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMEVEfFxcdTAwRUZdL2csIGFsdGVybmF0aXZlOiBcImlcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwQ0R8XFx1MDBDRl0vZywgYWx0ZXJuYXRpdmU6IFwiSVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBGM3xcXHUwMEYyXS9nLCBhbHRlcm5hdGl2ZTogXCJvXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMEQzfFxcdTAwRDJdL2csIGFsdGVybmF0aXZlOiBcIk9cIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRkF8XFx1MDBGQ10vZywgYWx0ZXJuYXRpdmU6IFwidVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBEQXxcXHUwMERDXS9nLCBhbHRlcm5hdGl2ZTogXCJVXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMEU3XS9nLCBhbHRlcm5hdGl2ZTogXCJjXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMEM3XS9nLCBhbHRlcm5hdGl2ZTogXCJDXCIgfVxuXHRdLFxuXHQvLyBMYW5ndWFnZTogQXN0dXJpYW4uXG5cdC8vIFNvdXJjZTogaHR0cDovL3d3dy5vcmJpbGF0LmNvbS9MYW5ndWFnZXMvQXN0dXJpYW4vR3JhbW1hci9Bc3R1cmlhbi1BbHBoYWJldC5odG1sXG5cdGFzdDogW1xuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRjFdL2csIGFsdGVybmF0aXZlOiBcIm5cIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRDFdL2csIGFsdGVybmF0aXZlOiBcIk5cIiB9XG5cdF0sXG5cdC8vIExhbmd1YWdlOiBBcmFnb25lc2UuXG5cdC8vIFNvdXJjZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQXJhZ29uZXNlX2xhbmd1YWdlI09ydGhvZ3JhcGh5XG5cdGFuOiBbXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBGQ10vZywgYWx0ZXJuYXRpdmU6IFwidVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBGMV0vZywgYWx0ZXJuYXRpdmU6IFwibnlcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRTddL2csIGFsdGVybmF0aXZlOiBcImNcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRURdL2csIGFsdGVybmF0aXZlOiBcImlcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRjNdL2csIGFsdGVybmF0aXZlOiBcIm9cIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRTFdL2csIGFsdGVybmF0aXZlOiBcImFcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRENdL2csIGFsdGVybmF0aXZlOiBcIlVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRDFdL2csIGFsdGVybmF0aXZlOiBcIk55XCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMEM3XS9nLCBhbHRlcm5hdGl2ZTogXCJDXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMENEXS9nLCBhbHRlcm5hdGl2ZTogXCJJXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMEQzXS9nLCBhbHRlcm5hdGl2ZTogXCJPXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMEMxXS9nLCBhbHRlcm5hdGl2ZTogXCJBXCIgfVxuXHRdLFxuXHQvLyBMYW5ndWFnZTogQXltYXJhLlxuXHQvLyBTb3VyY2U6IGh0dHA6Ly93d3cub21uaWdsb3QuY29tL3dyaXRpbmcvYXltYXJhLmh0bVxuXHRheTogW1xuXHRcdHsgbGV0dGVyOiAvKChbXFx1MDBFRl0pfChbXFx1MDBFRF0pKS9nLCBhbHRlcm5hdGl2ZTogXCJpXCIgfSxcblx0XHR7IGxldHRlcjogLygoW1xcdTAwQ0ZdKXwoW1xcdTAwQ0RdKSkvZywgYWx0ZXJuYXRpdmU6IFwiSVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBFNF0vZywgYWx0ZXJuYXRpdmU6IFwiYVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBDNF0vZywgYWx0ZXJuYXRpdmU6IFwiQVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBGQ10vZywgYWx0ZXJuYXRpdmU6IFwidVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBEQ10vZywgYWx0ZXJuYXRpdmU6IFwiVVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDAyN10vZywgYWx0ZXJuYXRpdmU6IFwiXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMEYxXS9nLCBhbHRlcm5hdGl2ZTogXCJuXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMEQxXS9nLCBhbHRlcm5hdGl2ZTogXCJOXCIgfVxuXHRdLFxuXHQvLyBMYW5ndWFnZTogRW5nbGlzaC5cblx0Ly8gU291cmNlczogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRW5nbGlzaF90ZXJtc193aXRoX2RpYWNyaXRpY2FsX21hcmtzIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0VuZ2xpc2hfb3J0aG9ncmFwaHlcblx0ZW46IFtcblx0XHR7IGxldHRlcjogL1tcXHUwMEU2XFx1MDRENV0vZywgYWx0ZXJuYXRpdmU6IFwiYWVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwQzZcXHUwNEQ0XS9nLCBhbHRlcm5hdGl2ZTogXCJBZVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE1M10vZywgYWx0ZXJuYXRpdmU6IFwib2VcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxNTJdL2csIGFsdGVybmF0aXZlOiBcIk9lXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMEVCXFx1MDBFOV0vZywgYWx0ZXJuYXRpdmU6IFwiZVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBDOVxcdTAwQ0JdL2csIGFsdGVybmF0aXZlOiBcIkVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRjRcXHUwMEY2XS9nLCBhbHRlcm5hdGl2ZTogXCJvXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMEQ0XFx1MDBENl0vZywgYWx0ZXJuYXRpdmU6IFwiT1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBFRl0vZywgYWx0ZXJuYXRpdmU6IFwiaVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBDRl0vZywgYWx0ZXJuYXRpdmU6IFwiSVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBFN10vZywgYWx0ZXJuYXRpdmU6IFwiY1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBDN10vZywgYWx0ZXJuYXRpdmU6IFwiQ1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBGMV0vZywgYWx0ZXJuYXRpdmU6IFwiblwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBEMV0vZywgYWx0ZXJuYXRpdmU6IFwiTlwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBGQ10vZywgYWx0ZXJuYXRpdmU6IFwidVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBEQ10vZywgYWx0ZXJuYXRpdmU6IFwiVVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBFNF0vZywgYWx0ZXJuYXRpdmU6IFwiYVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBDNF0vZywgYWx0ZXJuYXRpdmU6IFwiQVwiIH1cblx0XSxcblx0Ly8gTGFuZ3VhZ2U6IEZyZW5jaC5cblx0Ly8gU291cmNlczogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRnJlbmNoX29ydGhvZ3JhcGh5I0xpZ2F0dXJlcyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9GcmVuY2hfb3J0aG9ncmFwaHkjRGlhY3JpdGljc1xuXHRmcjogW1xuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRTZcXHUwNEQ1XS9nLCBhbHRlcm5hdGl2ZTogXCJhZVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBDNlxcdTA0RDRdL2csIGFsdGVybmF0aXZlOiBcIkFlXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTUzXS9nLCBhbHRlcm5hdGl2ZTogXCJvZVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE1Ml0vZywgYWx0ZXJuYXRpdmU6IFwiT2VcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRTlcXHUwMEU4XFx1MDBFQlxcdTAwRUFdL2csIGFsdGVybmF0aXZlOiBcImVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwQzlcXHUwMEM4XFx1MDBDQlxcdTAwQ0FdL2csIGFsdGVybmF0aXZlOiBcIkVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRTBcXHUwMEUyXS9nLCBhbHRlcm5hdGl2ZTogXCJhXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMEMwXFx1MDBDMl0vZywgYWx0ZXJuYXRpdmU6IFwiQVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBFRlxcdTAwRUVdL2csIGFsdGVybmF0aXZlOiBcImlcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwQ0ZcXHUwMENFXS9nLCBhbHRlcm5hdGl2ZTogXCJJXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMEY5XFx1MDBGQlxcdTAwRkNdL2csIGFsdGVybmF0aXZlOiBcInVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRDlcXHUwMERCXFx1MDBEQ10vZywgYWx0ZXJuYXRpdmU6IFwiVVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBGNF0vZywgYWx0ZXJuYXRpdmU6IFwib1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBENF0vZywgYWx0ZXJuYXRpdmU6IFwiT1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBGRl0vZywgYWx0ZXJuYXRpdmU6IFwieVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE3OF0vZywgYWx0ZXJuYXRpdmU6IFwiWVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBFN10vZywgYWx0ZXJuYXRpdmU6IFwiY1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBDN10vZywgYWx0ZXJuYXRpdmU6IFwiQ1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBGMV0vZywgYWx0ZXJuYXRpdmU6IFwiblwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBEMV0vZywgYWx0ZXJuYXRpdmU6IFwiTlwiIH1cblx0XSxcblx0Ly8gTGFuZ3VhZ2U6IEl0YWxpYW4uXG5cdC8vIFNvdXJjZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSXRhbGlhbl9vcnRob2dyYXBoeVxuXHRpdDogW1xuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRTBdL2csIGFsdGVybmF0aXZlOiBcImFcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwQzBdL2csIGFsdGVybmF0aXZlOiBcIkFcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRTlcXHUwMEU4XS9nLCBhbHRlcm5hdGl2ZTogXCJlXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMEM5XFx1MDBDOF0vZywgYWx0ZXJuYXRpdmU6IFwiRVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBFQ1xcdTAwRURcXHUwMEVFXS9nLCBhbHRlcm5hdGl2ZTogXCJpXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMENDXFx1MDBDRFxcdTAwQ0VdL2csIGFsdGVybmF0aXZlOiBcIklcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRjNcXHUwMEYyXS9nLCBhbHRlcm5hdGl2ZTogXCJvXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMEQzXFx1MDBEMl0vZywgYWx0ZXJuYXRpdmU6IFwiT1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBGOVxcdTAwRkFdL2csIGFsdGVybmF0aXZlOiBcInVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRDlcXHUwMERBXS9nLCBhbHRlcm5hdGl2ZTogXCJVXCIgfVxuXHRdLFxuXHQvLyBMYW5ndWFnZTogRHV0Y2guXG5cdC8vIFNvdXJjZXM6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0R1dGNoX29ydGhvZ3JhcGh5IGh0dHBzOi8vbmwud2lraXBlZGlhLm9yZy93aWtpL1RyZW1hX2luX2RlX05lZGVybGFuZHNlX3NwZWxsaW5nXG5cdG5sOiBbXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBFN10vZywgYWx0ZXJuYXRpdmU6IFwiY1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBDN10vZywgYWx0ZXJuYXRpdmU6IFwiQ1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBGMV0vZywgYWx0ZXJuYXRpdmU6IFwiblwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBEMV0vZywgYWx0ZXJuYXRpdmU6IFwiTlwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBFOVxcdTAwRThcXHUwMEVBXFx1MDBFQl0vZywgYWx0ZXJuYXRpdmU6IFwiZVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBDOVxcdTAwQzhcXHUwMENBXFx1MDBDQl0vZywgYWx0ZXJuYXRpdmU6IFwiRVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBGNFxcdTAwRjZdL2csIGFsdGVybmF0aXZlOiBcIm9cIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRDRcXHUwMEQ2XS9nLCBhbHRlcm5hdGl2ZTogXCJPXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMEVGXS9nLCBhbHRlcm5hdGl2ZTogXCJpXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMENGXS9nLCBhbHRlcm5hdGl2ZTogXCJJXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMEZDXS9nLCBhbHRlcm5hdGl2ZTogXCJ1XCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMERDXS9nLCBhbHRlcm5hdGl2ZTogXCJVXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMEU0XS9nLCBhbHRlcm5hdGl2ZTogXCJhXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMEM0XS9nLCBhbHRlcm5hdGl2ZTogXCJBXCIgfVxuXHRdLFxuXHQvLyBMYW5ndWFnZTogQmFtYmFyYS5cblx0Ly8gU291cmNlczogaHR0cDovL3d3dy5vbW5pZ2xvdC5jb20vd3JpdGluZy9iYW1iYXJhLmh0bSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CYW1iYXJhX2xhbmd1YWdlXG5cdGJtOiBbXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDI1Ql0vZywgYWx0ZXJuYXRpdmU6IFwiZVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE5MF0vZywgYWx0ZXJuYXRpdmU6IFwiRVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDI3Ml0vZywgYWx0ZXJuYXRpdmU6IFwibnlcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxOURdL2csIGFsdGVybmF0aXZlOiBcIk55XCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTRCXS9nLCBhbHRlcm5hdGl2ZTogXCJuZ1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE0QV0vZywgYWx0ZXJuYXRpdmU6IFwiTmdcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAyNTRdL2csIGFsdGVybmF0aXZlOiBcIm9cIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxODZdL2csIGFsdGVybmF0aXZlOiBcIk9cIiB9XG5cdF0sXG5cdC8vIExhbmd1YWdlOiBVa3JhaW5pYW4uXG5cdC8vIFNvdXJjZTogUmVzb2x1dGlvbiBuby4gNTUgb2YgdGhlIENhYmluZXQgb2YgTWluaXN0ZXJzIG9mIFVrcmFpbmUsIEphbnVhcnkgMjcsIDIwMTAgaHR0cDovL3pha29uMi5yYWRhLmdvdi51YS9sYXdzL3Nob3cvNTUtMjAxMC0lRDAlQkZcblx0Ly8g4oCY0YzigJkgaXMgdGhlIHNvLWNhbGxlZCBzb2Z0IHNpZ24sIGluZGljYXRpbmcgYSBzb3VuZCBjaGFuZ2UgKHBhbGF0YWxpemF0aW9uKSBvZiB0aGUgcHJlY2VkaW5nIGNvbnNvbmFudC4gSW4gdGV4dCBpdCBpcyBzb21ldGltZXMgdHJhbnNsaXRlcmF0ZWRcblx0Ly8gdG8gYSBjaGFyYWN0ZXIgc2ltaWxhciB0byBhbiBhcG9zdHJvcGg6IOKAsi4gT21pdHRhbmNlIGlzIHJlY29tbWVuZGVkIGluIHNsdWdzIChodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Sb21hbml6YXRpb25fb2ZfVWtyYWluaWFuKS5cblx0dWs6IFtcblx0XHR7IGxldHRlcjogL1tcXHUwNDMxXS9nLCBhbHRlcm5hdGl2ZTogXCJiXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDExXS9nLCBhbHRlcm5hdGl2ZTogXCJCXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDMyXS9nLCBhbHRlcm5hdGl2ZTogXCJ2XCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDEyXS9nLCBhbHRlcm5hdGl2ZTogXCJWXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDMzXS9nLCBhbHRlcm5hdGl2ZTogXCJoXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDEzXS9nLCBhbHRlcm5hdGl2ZTogXCJIXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDkxXS9nLCBhbHRlcm5hdGl2ZTogXCJnXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDkwXS9nLCBhbHRlcm5hdGl2ZTogXCJHXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDM0XS9nLCBhbHRlcm5hdGl2ZTogXCJkXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDE0XS9nLCBhbHRlcm5hdGl2ZTogXCJEXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDNBXS9nLCBhbHRlcm5hdGl2ZTogXCJrXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDFBXS9nLCBhbHRlcm5hdGl2ZTogXCJLXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDNCXS9nLCBhbHRlcm5hdGl2ZTogXCJsXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDFCXS9nLCBhbHRlcm5hdGl2ZTogXCJMXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDNDXS9nLCBhbHRlcm5hdGl2ZTogXCJtXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDFDXS9nLCBhbHRlcm5hdGl2ZTogXCJNXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMDcwXS9nLCBhbHRlcm5hdGl2ZTogXCJyXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMDUwXS9nLCBhbHRlcm5hdGl2ZTogXCJSXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDNGXS9nLCBhbHRlcm5hdGl2ZTogXCJwXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDFGXS9nLCBhbHRlcm5hdGl2ZTogXCJQXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDQxXS9nLCBhbHRlcm5hdGl2ZTogXCJzXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDIxXS9nLCBhbHRlcm5hdGl2ZTogXCJTXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDQyXS9nLCBhbHRlcm5hdGl2ZTogXCJ0XCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDIyXS9nLCBhbHRlcm5hdGl2ZTogXCJUXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDQzXS9nLCBhbHRlcm5hdGl2ZTogXCJ1XCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDIzXS9nLCBhbHRlcm5hdGl2ZTogXCJVXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDQ0XS9nLCBhbHRlcm5hdGl2ZTogXCJmXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDI0XS9nLCBhbHRlcm5hdGl2ZTogXCJGXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDQ1XS9nLCBhbHRlcm5hdGl2ZTogXCJraFwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDQyNV0vZywgYWx0ZXJuYXRpdmU6IFwiS2hcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0NDZdL2csIGFsdGVybmF0aXZlOiBcInRzXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDI2XS9nLCBhbHRlcm5hdGl2ZTogXCJUc1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDQ0N10vZywgYWx0ZXJuYXRpdmU6IFwiY2hcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MjddL2csIGFsdGVybmF0aXZlOiBcIkNoXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDQ4XS9nLCBhbHRlcm5hdGl2ZTogXCJzaFwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDQyOF0vZywgYWx0ZXJuYXRpdmU6IFwiU2hcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0NDldL2csIGFsdGVybmF0aXZlOiBcInNoY2hcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MjldL2csIGFsdGVybmF0aXZlOiBcIlNoY2hcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0NENcXHUwNDJDXS9nLCBhbHRlcm5hdGl2ZTogXCJcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MzZdL2csIGFsdGVybmF0aXZlOiBcInpoXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDE2XS9nLCBhbHRlcm5hdGl2ZTogXCJaaFwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDQzN10vZywgYWx0ZXJuYXRpdmU6IFwielwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDQxN10vZywgYWx0ZXJuYXRpdmU6IFwiWlwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDQzOF0vZywgYWx0ZXJuYXRpdmU6IFwieVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDQxOF0vZywgYWx0ZXJuYXRpdmU6IFwiWVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9eW1xcdTA0NTRdL2csIGFsdGVybmF0aXZlOiBcInllXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHNdW1xcdTA0NTRdL2csIGFsdGVybmF0aXZlOiBcIiB5ZVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDQ1NF0vZywgYWx0ZXJuYXRpdmU6IFwiaWVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvXltcXHUwNDA0XS9nLCBhbHRlcm5hdGl2ZTogXCJZZVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFxzXVtcXHUwNDA0XS9nLCBhbHRlcm5hdGl2ZTogXCIgWWVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MDRdL2csIGFsdGVybmF0aXZlOiBcIklFXCIgfSxcblx0XHR7IGxldHRlcjogL15bXFx1MDQ1N10vZywgYWx0ZXJuYXRpdmU6IFwieWlcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcc11bXFx1MDQ1N10vZywgYWx0ZXJuYXRpdmU6IFwiIHlpXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDU3XS9nLCBhbHRlcm5hdGl2ZTogXCJpXCIgfSxcblx0XHR7IGxldHRlcjogL15bXFx1MDQwN10vZywgYWx0ZXJuYXRpdmU6IFwiWWlcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcc11bXFx1MDQwN10vZywgYWx0ZXJuYXRpdmU6IFwiIFlpXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDA3XS9nLCBhbHRlcm5hdGl2ZTogXCJJXCIgfSxcblx0XHR7IGxldHRlcjogL15bXFx1MDQzOV0vZywgYWx0ZXJuYXRpdmU6IFwieVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFxzXVtcXHUwNDM5XS9nLCBhbHRlcm5hdGl2ZTogXCIgeVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDQzOV0vZywgYWx0ZXJuYXRpdmU6IFwiaVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9eW1xcdTA0MTldL2csIGFsdGVybmF0aXZlOiBcIllcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcc11bXFx1MDQxOV0vZywgYWx0ZXJuYXRpdmU6IFwiIFlcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MTldL2csIGFsdGVybmF0aXZlOiBcIklcIiB9LFxuXHRcdHsgbGV0dGVyOiAvXltcXHUwNDRFXS9nLCBhbHRlcm5hdGl2ZTogXCJ5dVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFxzXVtcXHUwNDRFXS9nLCBhbHRlcm5hdGl2ZTogXCIgeXVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0NEVdL2csIGFsdGVybmF0aXZlOiBcIml1XCIgfSxcblx0XHR7IGxldHRlcjogL15bXFx1MDQyRV0vZywgYWx0ZXJuYXRpdmU6IFwiWXVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcc11bXFx1MDQyRV0vZywgYWx0ZXJuYXRpdmU6IFwiIFl1XCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDJFXS9nLCBhbHRlcm5hdGl2ZTogXCJJVVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9eW1xcdTA0NEZdL2csIGFsdGVybmF0aXZlOiBcInlhXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHNdW1xcdTA0NEZdL2csIGFsdGVybmF0aXZlOiBcIiB5YVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDQ0Rl0vZywgYWx0ZXJuYXRpdmU6IFwiaWFcIiB9LFxuXHRcdHsgbGV0dGVyOiAvXltcXHUwNDJGXS9nLCBhbHRlcm5hdGl2ZTogXCJZYVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFxzXVtcXHUwNDJGXS9nLCBhbHRlcm5hdGl2ZTogXCIgWWFcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MkZdL2csIGFsdGVybmF0aXZlOiBcIklBXCIgfVxuXHRdLFxuXHQvLyBMYW5ndWFnZTogQnJldG9uXG5cdC8vIFNvdXJjZTogaHR0cDovL3d3dy5vbW5pZ2xvdC5jb20vd3JpdGluZy9icmV0b24uaHRtXG5cdGJyOiBbXG5cdFx0eyBsZXR0ZXI6IC9cXHUwMDYzXFx1MDAyN1xcdTAwNjgvZywgYWx0ZXJuYXRpdmU6IFwiY2hcIiB9LFxuXHRcdHsgbGV0dGVyOiAvXFx1MDA0M1xcdTAwMjdcXHUwMDQ4L2csIGFsdGVybmF0aXZlOiBcIkNIXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGUyXS9nLCBhbHRlcm5hdGl2ZTogXCJhXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGMyXS9nLCBhbHRlcm5hdGl2ZTogXCJBXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGVhXS9nLCBhbHRlcm5hdGl2ZTogXCJlXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGNhXS9nLCBhbHRlcm5hdGl2ZTogXCJFXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGVlXS9nLCBhbHRlcm5hdGl2ZTogXCJpXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGNlXS9nLCBhbHRlcm5hdGl2ZTogXCJJXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGY0XS9nLCBhbHRlcm5hdGl2ZTogXCJvXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGQ0XS9nLCBhbHRlcm5hdGl2ZTogXCJPXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGZiXFx1MDBmOVxcdTAwZmNdL2csIGFsdGVybmF0aXZlOiBcInVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZGJcXHUwMGQ5XFx1MDBkY10vZywgYWx0ZXJuYXRpdmU6IFwiVVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBmMV0vZywgYWx0ZXJuYXRpdmU6IFwiblwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBkMV0vZywgYWx0ZXJuYXRpdmU6IFwiTlwiIH1cblx0XSxcblx0Ly8gTGFuZ3VhZ2U6IENoYW1vcnJvXG5cdC8vIFNvdXJjZTogaHR0cDovL3d3dy5vbW5pZ2xvdC5jb20vd3JpdGluZy9jaGFtb3Jyby5odG1cblx0Y2g6IFtcblx0XHR7IGxldHRlcjogL1tcXHUwMDI3XS9nLCBhbHRlcm5hdGl2ZTogXCJcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZTVdL2csIGFsdGVybmF0aXZlOiBcImFcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwYzVdL2csIGFsdGVybmF0aXZlOiBcIkFcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZjFdL2csIGFsdGVybmF0aXZlOiBcIm5cIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZDFdL2csIGFsdGVybmF0aXZlOiBcIk5cIiB9XG5cdF0sXG5cdC8vIExhbmd1YWdlOiBDb3JzaWNhblxuXHQvLyBTb3VyY2VzOiBodHRwOi8vd3d3Lm9tbmlnbG90LmNvbS93cml0aW5nL2NvcnNpY2FuLmh0bSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db3JzaWNhbl9hbHBoYWJldFxuXHRjbzogW1xuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZTJcXHUwMGUwXS9nLCBhbHRlcm5hdGl2ZTogXCJhXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGMyXFx1MDBjMF0vZywgYWx0ZXJuYXRpdmU6IFwiQVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBlNlxcdTA0ZDVdL2csIGFsdGVybmF0aXZlOiBcImFlXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGM2XFx1MDRkNF0vZywgYWx0ZXJuYXRpdmU6IFwiQWVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZTddL2csIGFsdGVybmF0aXZlOiBcImNcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwYzddL2csIGFsdGVybmF0aXZlOiBcIkNcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZTlcXHUwMGVhXFx1MDBlOFxcdTAwZWJdL2csIGFsdGVybmF0aXZlOiBcImVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwYzlcXHUwMGNhXFx1MDBjOFxcdTAwY2JdL2csIGFsdGVybmF0aXZlOiBcIkVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZWNcXHUwMGVlXFx1MDBlZl0vZywgYWx0ZXJuYXRpdmU6IFwiaVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBjY1xcdTAwY2VcXHUwMGNmXS9nLCBhbHRlcm5hdGl2ZTogXCJJXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGYxXS9nLCBhbHRlcm5hdGl2ZTogXCJuXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGQxXS9nLCBhbHRlcm5hdGl2ZTogXCJOXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGY0XFx1MDBmMl0vZywgYWx0ZXJuYXRpdmU6IFwib1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBkNFxcdTAwZDJdL2csIGFsdGVybmF0aXZlOiBcIk9cIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxNTNdL2csIGFsdGVybmF0aXZlOiBcIm9lXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTUyXV0vZywgYWx0ZXJuYXRpdmU6IFwiT2VcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZjlcXHUwMGZjXS9nLCBhbHRlcm5hdGl2ZTogXCJ1XCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGQ5XFx1MDBkY10vZywgYWx0ZXJuYXRpdmU6IFwiVVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBmZl0vZywgYWx0ZXJuYXRpdmU6IFwieVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE3OF0vZywgYWx0ZXJuYXRpdmU6IFwiWVwiIH1cblx0XSxcblx0Ly8gTGFuZ3VhZ2U6IEthc2h1YmlhblxuXHQvLyBTb3VyY2VzOiBodHRwOi8vd3d3Lm9tbmlnbG90LmNvbS93cml0aW5nL2thc2h1Ymlhbi5odG0gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvS2FzaHViaWFuX2xhbmd1YWdlXG5cdGNzYjogW1xuXHRcdHsgbGV0dGVyOiAvW1xcdTAxMDVcXHUwMGUzXS9nLCBhbHRlcm5hdGl2ZTogXCJhXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTA0XFx1MDBjM10vZywgYWx0ZXJuYXRpdmU6IFwiQVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBlOVxcdTAwZWJdL2csIGFsdGVybmF0aXZlOiBcImVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwYzlcXHUwMGNiXS9nLCBhbHRlcm5hdGl2ZTogXCJFXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTQyXS9nLCBhbHRlcm5hdGl2ZTogXCJsXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTQxXS9nLCBhbHRlcm5hdGl2ZTogXCJMXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTQ0XS9nLCBhbHRlcm5hdGl2ZTogXCJuXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTQzXS9nLCBhbHRlcm5hdGl2ZTogXCJOXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGYyXFx1MDBmM1xcdTAwZjRdL2csIGFsdGVybmF0aXZlOiBcIm9cIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZDJcXHUwMGQzXFx1MDBkNF0vZywgYWx0ZXJuYXRpdmU6IFwiT1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBmOV0vZywgYWx0ZXJuYXRpdmU6IFwidVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBkOV0vZywgYWx0ZXJuYXRpdmU6IFwiVVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE3Y10vZywgYWx0ZXJuYXRpdmU6IFwielwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE3Yl0vZywgYWx0ZXJuYXRpdmU6IFwiWlwiIH1cblx0XSxcblx0Ly8gTGFuZ3VhZ2U6IFdlbHNoXG5cdC8vIFNvdXJjZXM6IGh0dHA6Ly93d3cub21uaWdsb3QuY29tL3dyaXRpbmcvd2Vsc2guaHRtIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1dlbHNoX29ydGhvZ3JhcGh5I0RpYWNyaXRpY3Ncblx0Y3k6IFtcblx0XHR7IGxldHRlcjogL1tcXHUwMGUyXS9nLCBhbHRlcm5hdGl2ZTogXCJhXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGMyXS9nLCBhbHRlcm5hdGl2ZTogXCJBXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGVhXS9nLCBhbHRlcm5hdGl2ZTogXCJlXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGNhXS9nLCBhbHRlcm5hdGl2ZTogXCJFXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGVlXS9nLCBhbHRlcm5hdGl2ZTogXCJpXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGNlXS9nLCBhbHRlcm5hdGl2ZTogXCJJXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGY0XS9nLCBhbHRlcm5hdGl2ZTogXCJvXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGQ0XS9nLCBhbHRlcm5hdGl2ZTogXCJPXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGZiXS9nLCBhbHRlcm5hdGl2ZTogXCJ1XCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGRiXS9nLCBhbHRlcm5hdGl2ZTogXCJVXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTc1XS9nLCBhbHRlcm5hdGl2ZTogXCJ3XCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTc0XS9nLCBhbHRlcm5hdGl2ZTogXCJXXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTc3XS9nLCBhbHRlcm5hdGl2ZTogXCJ5XCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTc2XS9nLCBhbHRlcm5hdGl2ZTogXCJZXCIgfVxuXHRdLFxuXHQvLyBMYW5ndWFnZTogRXdlXG5cdC8vIFNvdXJjZXM6IGh0dHA6Ly93d3cub21uaWdsb3QuY29tL3dyaXRpbmcvZXdlLmh0bSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Fd2VfbGFuZ3VhZ2UjV3JpdGluZ19zeXN0ZW1cblx0ZWU6IFtcblx0XHR7IGxldHRlcjogL1tcXHUwMjU2XS9nLCBhbHRlcm5hdGl2ZTogXCJkXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTg5XS9nLCBhbHRlcm5hdGl2ZTogXCJEXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMjViXS9nLCBhbHRlcm5hdGl2ZTogXCJlXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTkwXS9nLCBhbHRlcm5hdGl2ZTogXCJFXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTkyXS9nLCBhbHRlcm5hdGl2ZTogXCJmXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTkxXS9nLCBhbHRlcm5hdGl2ZTogXCJGXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMjYzXS9nLCBhbHRlcm5hdGl2ZTogXCJnXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTk0XS9nLCBhbHRlcm5hdGl2ZTogXCJHXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTRiXS9nLCBhbHRlcm5hdGl2ZTogXCJuZ1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE0YV0vZywgYWx0ZXJuYXRpdmU6IFwiTmdcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAyNTRdL2csIGFsdGVybmF0aXZlOiBcIm9cIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxODZdL2csIGFsdGVybmF0aXZlOiBcIk9cIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAyOGJdL2csIGFsdGVybmF0aXZlOiBcIndcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxYjJdL2csIGFsdGVybmF0aXZlOiBcIldcIiB9LFxuXHRcdHsgbGV0dGVyOiAvXFx1MDA2MVxcdTAzMDMvZywgYWx0ZXJuYXRpdmU6IFwiYVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBlMVxcdTAwZTBcXHUwMWNlXFx1MDBlMlxcdTAwZTNdL2csIGFsdGVybmF0aXZlOiBcImFcIiB9LFxuXHRcdHsgbGV0dGVyOiAvXFx1MDA0MVxcdTAzMDMvZywgYWx0ZXJuYXRpdmU6IFwiQVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBjMVxcdTAwYzBcXHUwMWNkXFx1MDBjMlxcdTAwYzNdL2csIGFsdGVybmF0aXZlOiBcIkFcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZTlcXHUwMGU4XFx1MDExYlxcdTAwZWFdL2csIGFsdGVybmF0aXZlOiBcImVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwYzlcXHUwMGM4XFx1MDExYVxcdTAwY2FdL2csIGFsdGVybmF0aXZlOiBcIkVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZjNcXHUwMGYyXFx1MDFkMlxcdTAwZjRdL2csIGFsdGVybmF0aXZlOiBcIm9cIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZDNcXHUwMGQyXFx1MDFkMVxcdTAwZDRdL2csIGFsdGVybmF0aXZlOiBcIk9cIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZmFcXHUwMGY5XFx1MDFkNFxcdTAwZmJdL2csIGFsdGVybmF0aXZlOiBcInVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZGFcXHUwMGQ5XFx1MDFkM1xcdTAwZGJdL2csIGFsdGVybmF0aXZlOiBcIlVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZWRcXHUwMGVjXFx1MDFkMFxcdTAwZWVdL2csIGFsdGVybmF0aXZlOiBcImlcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwY2RcXHUwMGNjXFx1MDFjZlxcdTAwY2VdL2csIGFsdGVybmF0aXZlOiBcIklcIiB9XG5cdF0sXG5cdC8vIExhbmd1YWdlOiBFc3RvbmlhblxuXHQvLyBTb3VyY2VzOiBodHRwOi8vd3d3Lm9tbmlnbG90LmNvbS93cml0aW5nL2VzdG9uaWFuLmh0bSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Fc3Rvbmlhbl9vcnRob2dyYXBoeSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS8lQzUlQkQgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvJUM1JUEwXG5cdGV0OiBbXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE2MV0vZywgYWx0ZXJuYXRpdmU6IFwic2hcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxNjBdL2csIGFsdGVybmF0aXZlOiBcIlNoXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTdlXS9nLCBhbHRlcm5hdGl2ZTogXCJ6aFwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE3ZF0vZywgYWx0ZXJuYXRpdmU6IFwiWmhcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZjVcXHUwMGY2XS9nLCBhbHRlcm5hdGl2ZTogXCJvXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGQ2XFx1MDBkNV0vZywgYWx0ZXJuYXRpdmU6IFwiT1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBlNF0vZywgYWx0ZXJuYXRpdmU6IFwiYVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBjNF0vZywgYWx0ZXJuYXRpdmU6IFwiQVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBmY10vZywgYWx0ZXJuYXRpdmU6IFwidVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBkY10vZywgYWx0ZXJuYXRpdmU6IFwiVVwiIH1cblx0XHRdLFxuXHQvLyBMYW5ndWFnZTogQmFzcXVlXG5cdC8vIFNvdXJjZXM6IGh0dHA6Ly93d3cub21uaWdsb3QuY29tL3dyaXRpbmcvYmFzcXVlLmh0bSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CYXNxdWVfbGFuZ3VhZ2UjV3JpdGluZ19zeXN0ZW0gaHR0cHM6Ly9lblx0Lndpa2lwZWRpYS5vcmcvd2lraS9CYXNxdWVfYWxwaGFiZXRcblx0ZXU6IFtcblx0XHR7IGxldHRlcjogL1tcXHUwMGYxXS9nLCBhbHRlcm5hdGl2ZTogXCJuXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGQxXS9nLCBhbHRlcm5hdGl2ZTogXCJOXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGU3XS9nLCBhbHRlcm5hdGl2ZTogXCJjXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGM3XS9nLCBhbHRlcm5hdGl2ZTogXCJDXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGZjXS9nLCBhbHRlcm5hdGl2ZTogXCJ1XCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGRjXS9nLCBhbHRlcm5hdGl2ZTogXCJVXCIgfVxuXHRdLFxuXHQvLyBMYW5ndWFnZTogRnVsYWhcblx0Ly8gU291cmNlczogaHR0cDovL3d3dy5vbW5pZ2xvdC5jb20vd3JpdGluZy9mdWxhLmh0bSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9GdWxhX2xhbmd1YWdlI1dyaXRpbmdfc3lzdGVtc1xuXHRmdWM6IFtcblx0XHR7IGxldHRlcjogL1tcXHUwMjUzXS9nLCBhbHRlcm5hdGl2ZTogXCJiXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTgxXS9nLCBhbHRlcm5hdGl2ZTogXCJCXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMjU3XS9nLCBhbHRlcm5hdGl2ZTogXCJkXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMThhXS9nLCBhbHRlcm5hdGl2ZTogXCJEXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTRiXS9nLCBhbHRlcm5hdGl2ZTogXCJuZ1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE0YV0vZywgYWx0ZXJuYXRpdmU6IFwiTmdcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAyNzJcXHUwMGYxXS9nLCBhbHRlcm5hdGl2ZTogXCJueVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE5ZFxcdTAwZDFdL2csIGFsdGVybmF0aXZlOiBcIk55XCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMWI0XS9nLCBhbHRlcm5hdGl2ZTogXCJ5XCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMWIzXS9nLCBhbHRlcm5hdGl2ZTogXCJZXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMjYwXS9nLCBhbHRlcm5hdGl2ZTogXCJnXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTkzXS9nLCBhbHRlcm5hdGl2ZTogXCJHXCIgfVxuXHRdLFxuXHQvLyBMYW5ndWFnZTogRmlqaWFuXG5cdC8vIFNvdXJjZTogaHR0cDovL3d3dy5vbW5pZ2xvdC5jb20vd3JpdGluZy9maWppYW4uaHRtXG5cdGZqOiBbXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDEwMV0vZywgYWx0ZXJuYXRpdmU6IFwiYVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDEwMF0vZywgYWx0ZXJuYXRpdmU6IFwiQVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDExM10vZywgYWx0ZXJuYXRpdmU6IFwiZVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDExMl0vZywgYWx0ZXJuYXRpdmU6IFwiRVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDEyYl0vZywgYWx0ZXJuYXRpdmU6IFwiaVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDEyYV0vZywgYWx0ZXJuYXRpdmU6IFwiSVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE2Yl0vZywgYWx0ZXJuYXRpdmU6IFwidVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE2YV0vZywgYWx0ZXJuYXRpdmU6IFwiVVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE0ZF0vZywgYWx0ZXJuYXRpdmU6IFwib1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE0Y10vZywgYWx0ZXJuYXRpdmU6IFwiT1wiIH1cblx0XSxcblx0Ly8gTGFuZ3VhZ2U6IEFycGl0YW4gKEZyYW5jby1Qcm92ZW7Dp2FsIGxhbmd1YWdlKVxuXHQvLyBTb3VyY2U6IGh0dHA6Ly93d3cub21uaWdsb3QuY29tL3dyaXRpbmcvZnJhbmNvcHJvdmVuY2FsLmh0bVxuXHRmcnA6IFtcblx0XHR7IGxldHRlcjogL1tcXHUwMGUyXS9nLCBhbHRlcm5hdGl2ZTogXCJhXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGMyXS9nLCBhbHRlcm5hdGl2ZTogXCJBXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGVhXFx1MDBlOFxcdTAwZTldL2csIGFsdGVybmF0aXZlOiBcImVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwY2FcXHUwMGM4XFx1MDBjOV0vZywgYWx0ZXJuYXRpdmU6IFwiRVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBlZV0vZywgYWx0ZXJuYXRpdmU6IFwiaVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBjZV0vZywgYWx0ZXJuYXRpdmU6IFwiSVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBmYlxcdTAwZmNdL2csIGFsdGVybmF0aXZlOiBcInVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZGJcXHUwMGRjXS9nLCBhbHRlcm5hdGl2ZTogXCJVXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGY0XS9nLCBhbHRlcm5hdGl2ZTogXCJvXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGQ0XS9nLCBhbHRlcm5hdGl2ZTogXCJPXCIgfVxuXHRdLFxuXHQvLyBMYW5ndWFnZTogRnJpdWxpYW5cblx0Ly8gU291cmNlczogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRnJpdWxpYW5fbGFuZ3VhZ2UgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRmFnZ2luLU5henppX2FscGhhYmV0XG5cdC8vIGh0dHA6Ly93d3cub21uaWdsb3QuY29tL3dyaXRpbmcvZnJpdWxpYW4uaHRtXG5cdGZ1cjogW1xuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRTddL2csIGFsdGVybmF0aXZlOiBcImNcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwQzddL2csIGFsdGVybmF0aXZlOiBcIkNcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZTBcXHUwMGUyXS9nLCBhbHRlcm5hdGl2ZTogXCJhXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGMwXFx1MDBjMl0vZywgYWx0ZXJuYXRpdmU6IFwiQVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBlOFxcdTAwZWFdL2csIGFsdGVybmF0aXZlOiBcImVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwYzhcXHUwMGNhXS9nLCBhbHRlcm5hdGl2ZTogXCJFXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGVjXFx1MDBlZV0vZywgYWx0ZXJuYXRpdmU6IFwiaVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBjY1xcdTAwY2VdL2csIGFsdGVybmF0aXZlOiBcIklcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZjJcXHUwMGY0XS9nLCBhbHRlcm5hdGl2ZTogXCJvXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGQyXFx1MDBkNF0vZywgYWx0ZXJuYXRpdmU6IFwiT1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBmOVxcdTAwZmJdL2csIGFsdGVybmF0aXZlOiBcInVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZDlcXHUwMGRiXS9nLCBhbHRlcm5hdGl2ZTogXCJVXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTBkXS9nLCBhbHRlcm5hdGl2ZTogXCJjXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTBjXS9nLCBhbHRlcm5hdGl2ZTogXCJDXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTFmXS9nLCBhbHRlcm5hdGl2ZTogXCJnXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTFlXS9nLCBhbHRlcm5hdGl2ZTogXCJHXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTYxXS9nLCBhbHRlcm5hdGl2ZTogXCJzXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTYwXS9nLCBhbHRlcm5hdGl2ZTogXCJTXCIgfVxuXHRdLFxuXHQvLyBMYW5ndWFnZTogRnJpc2lhblxuXHQvLyBTb3VyY2VzOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9XZXN0X0ZyaXNpYW5fYWxwaGFiZXQgaHR0cDovL3d3dy5vbW5pZ2xvdC5jb20vd3JpdGluZy9mcmlzaWFuLmh0bVxuXHRmeTogW1xuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZTJcXHUwMTAxXFx1MDBlNFxcdTAwZTVdL2csIGFsdGVybmF0aXZlOiBcImFcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwYzJcXHUwMTAwXFx1MDBjNFxcdTAwYzVdL2csIGFsdGVybmF0aXZlOiBcIkFcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZWFcXHUwMGU5XFx1MDExM10vZywgYWx0ZXJuYXRpdmU6IFwiZVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBjYVxcdTAwYzlcXHUwMTEyXS9nLCBhbHRlcm5hdGl2ZTogXCJFXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGY0XFx1MDBmNl0vZywgYWx0ZXJuYXRpdmU6IFwib1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBkNFxcdTAwZDZdL2csIGFsdGVybmF0aXZlOiBcIk9cIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZmFcXHUwMGZiXFx1MDBmY10vZywgYWx0ZXJuYXRpdmU6IFwidVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBkYVxcdTAwZGJcXHUwMGRjXS9nLCBhbHRlcm5hdGl2ZTogXCJVXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGVkXS9nLCBhbHRlcm5hdGl2ZTogXCJpXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGNkXS9nLCBhbHRlcm5hdGl2ZTogXCJJXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTExXFx1MDBmMF0vZywgYWx0ZXJuYXRpdmU6IFwiZFwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDExMFxcdTAwZDBdL2csIGFsdGVybmF0aXZlOiBcIkRcIiB9XG5cdF0sXG5cdC8vIExhbmd1YWdlOiBJcmlzaFxuXHQvLyBTb3VyY2U6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lyaXNoX29ydGhvZ3JhcGh5XG5cdGdhOiBbXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBlMV0vZywgYWx0ZXJuYXRpdmU6IFwiYVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBjMV0vZywgYWx0ZXJuYXRpdmU6IFwiQVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBlOV0vZywgYWx0ZXJuYXRpdmU6IFwiZVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBjOV0vZywgYWx0ZXJuYXRpdmU6IFwiRVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBmM10vZywgYWx0ZXJuYXRpdmU6IFwib1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBkM10vZywgYWx0ZXJuYXRpdmU6IFwiT1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBmYV0vZywgYWx0ZXJuYXRpdmU6IFwidVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBkYV0vZywgYWx0ZXJuYXRpdmU6IFwiVVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBlZF0vZywgYWx0ZXJuYXRpdmU6IFwiaVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBjZF0vZywgYWx0ZXJuYXRpdmU6IFwiSVwiIH1cblx0XSxcblx0Ly8gTGFuZ3VhZ2U6IFNjb3R0aXNoIEdhZWxpY1xuXHQvLyBTb3VyY2VzOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TY290dGlzaF9HYWVsaWNfb3J0aG9ncmFwaHkgaHR0cDovL3d3dy5vbW5pZ2xvdC5jb20vd3JpdGluZy9nYWVsaWMuaHRtXG5cdGdkOiBbXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBlMF0vZywgYWx0ZXJuYXRpdmU6IFwiYVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBjMF0vZywgYWx0ZXJuYXRpdmU6IFwiQVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBlOF0vZywgYWx0ZXJuYXRpdmU6IFwiZVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBjOF0vZywgYWx0ZXJuYXRpdmU6IFwiRVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBmMl0vZywgYWx0ZXJuYXRpdmU6IFwib1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBkMl0vZywgYWx0ZXJuYXRpdmU6IFwiT1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBmOV0vZywgYWx0ZXJuYXRpdmU6IFwidVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBkOV0vZywgYWx0ZXJuYXRpdmU6IFwiVVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBlY10vZywgYWx0ZXJuYXRpdmU6IFwiaVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBjY10vZywgYWx0ZXJuYXRpdmU6IFwiSVwiIH1cblx0XSxcblx0Ly8gTGFuZ3VhZ2U6IEdhbGljaWFuXG5cdC8vIFNvdXJjZXM6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0RpYWNyaXRpYyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9HYWxpY2lhbl9BbHBoYWJldFxuXHRnbDogW1xuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZTFcXHUwMGUwXS9nLCBhbHRlcm5hdGl2ZTogXCJhXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGMxXFx1MDBjMF0vZywgYWx0ZXJuYXRpdmU6IFwiQVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBlOVxcdTAwZWFdL2csIGFsdGVybmF0aXZlOiBcImVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwYzlcXHUwMGNhXS9nLCBhbHRlcm5hdGl2ZTogXCJFXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGVkXFx1MDBlZl0vZywgYWx0ZXJuYXRpdmU6IFwiaVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBjZFxcdTAwY2ZdL2csIGFsdGVybmF0aXZlOiBcIklcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZjNdL2csIGFsdGVybmF0aXZlOiBcIm9cIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZDNdL2csIGFsdGVybmF0aXZlOiBcIk9cIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZmFcXHUwMGZjXS9nLCBhbHRlcm5hdGl2ZTogXCJ1XCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGRhXFx1MDBkY10vZywgYWx0ZXJuYXRpdmU6IFwiVVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBlN10vZywgYWx0ZXJuYXRpdmU6IFwiY1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBjN10vZywgYWx0ZXJuYXRpdmU6IFwiQ1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBmMV0vZywgYWx0ZXJuYXRpdmU6IFwiblwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBkMV0vZywgYWx0ZXJuYXRpdmU6IFwiTlwiIH1cblx0XSxcblx0Ly8gTGFuZ3VhZ2U6IEd1YXJhbmlcblx0Ly8gU291cmNlczogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvR3VhcmFuaV9hbHBoYWJldCBodHRwOi8vd3d3Lm9tbmlnbG90LmNvbS93cml0aW5nL2d1YXJhbmkuaHRtXG5cdGduOiBbXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MjAxOV0vZywgYWx0ZXJuYXRpdmU6IFwiXCIgfSxcblx0XHR7IGxldHRlcjogL1xcdTAwNjdcXHUwMzAzL2csIGFsdGVybmF0aXZlOiBcImdcIiB9LFxuXHRcdHsgbGV0dGVyOiAvXFx1MDA0N1xcdTAzMDMvZywgYWx0ZXJuYXRpdmU6IFwiR1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBlM10vZywgYWx0ZXJuYXRpdmU6IFwiYVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBjM10vZywgYWx0ZXJuYXRpdmU6IFwiQVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MWViZF0vZywgYWx0ZXJuYXRpdmU6IFwiZVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MWViY10vZywgYWx0ZXJuYXRpdmU6IFwiRVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDEyOV0vZywgYWx0ZXJuYXRpdmU6IFwiaVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDEyOF0vZywgYWx0ZXJuYXRpdmU6IFwiSVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBmNV0vZywgYWx0ZXJuYXRpdmU6IFwib1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBkNV0vZywgYWx0ZXJuYXRpdmU6IFwiT1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBmMV0vZywgYWx0ZXJuYXRpdmU6IFwiblwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBkMV0vZywgYWx0ZXJuYXRpdmU6IFwiTlwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE2OV0vZywgYWx0ZXJuYXRpdmU6IFwidVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE2OF0vZywgYWx0ZXJuYXRpdmU6IFwiVVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MWVmOV0vZywgYWx0ZXJuYXRpdmU6IFwieVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MWVmOF0vZywgYWx0ZXJuYXRpdmU6IFwiWVwiIH1cblx0XSxcblx0Ly8gTGFuZ3VhZ2U6IFN3aXNzIEdlcm1hblxuXHQvLyBTb3VyY2U6IGh0dHA6Ly93d3cub21uaWdsb3QuY29tL3dyaXRpbmcvc3dpc3NnZXJtYW4uaHRtXG5cdGdzdzogW1xuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZTRdL2csIGFsdGVybmF0aXZlOiBcImFcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwYzRdL2csIGFsdGVybmF0aXZlOiBcIkFcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZjZdL2csIGFsdGVybmF0aXZlOiBcIm9cIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZDZdL2csIGFsdGVybmF0aXZlOiBcIk9cIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZmNdL2csIGFsdGVybmF0aXZlOiBcInVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZGNdL2csIGFsdGVybmF0aXZlOiBcIlVcIiB9XG5cdF0sXG5cdC8vIExhbmd1YWdlOiBIYWl0aWFuIENyZW9sZVxuXHQvLyBTb3VyY2VzOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9IYWl0aWFuX0NyZW9sZSBodHRwOi8vd3d3Lm9tbmlnbG90LmNvbS93cml0aW5nL2hhaXRpYW5jcmVvbGUuaHRtXG5cdGhhdDogW1xuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZThdL2csIGFsdGVybmF0aXZlOiBcImVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwYzhdL2csIGFsdGVybmF0aXZlOiBcIkVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZjJdL2csIGFsdGVybmF0aXZlOiBcIm9cIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZDJdL2csIGFsdGVybmF0aXZlOiBcIk9cIiB9XG5cdF0sXG5cdC8vIExhbmd1YWdlOiBIYXdhaWlhblxuXHQvLyBTb3VyY2VzOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9IYXdhaWlhbl9sYW5ndWFnZSNNYWNyb24gaHR0cDovL3d3dy5vbW5pZ2xvdC5jb20vd3JpdGluZy9oYXdhaWlhbi5odG1cblx0aGF3OiBbXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDJiYlxcdTAwMjdcXHUyMDE5XS9nLCBhbHRlcm5hdGl2ZTogXCJcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxMDFdL2csIGFsdGVybmF0aXZlOiBcImFcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxMTNdL2csIGFsdGVybmF0aXZlOiBcImVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxMmJdL2csIGFsdGVybmF0aXZlOiBcImlcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxNGRdL2csIGFsdGVybmF0aXZlOiBcIm9cIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxNmJdL2csIGFsdGVybmF0aXZlOiBcInVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxMDBdL2csIGFsdGVybmF0aXZlOiBcIkFcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxMTJdL2csIGFsdGVybmF0aXZlOiBcIkVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxMmFdL2csIGFsdGVybmF0aXZlOiBcIklcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxNGNdL2csIGFsdGVybmF0aXZlOiBcIk9cIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxNmFdL2csIGFsdGVybmF0aXZlOiBcIlVcIiB9XG5cdF0sXG5cdC8vIExhbmd1YWdlOiBDcm9hdGlhblxuXHQvLyBTb3VyY2VzOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9HYWolMjdzX0xhdGluX2FscGhhYmV0IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Rfd2l0aF9zdHJva2Vcblx0Ly8gaHR0cDovL3d3dy5vbW5pZ2xvdC5jb20vd3JpdGluZy9jcm9hdGlhbi5odG1cblx0aHI6IFtcblx0XHR7IGxldHRlcjogL1tcXHUwMTBkXFx1MDEwN10vZywgYWx0ZXJuYXRpdmU6IFwiY1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDEwY1xcdTAxMDZdL2csIGFsdGVybmF0aXZlOiBcIkNcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxMTFdL2csIGFsdGVybmF0aXZlOiBcImRqXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTEwXS9nLCBhbHRlcm5hdGl2ZTogXCJEalwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE2MV0vZywgYWx0ZXJuYXRpdmU6IFwic1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE2MF0vZywgYWx0ZXJuYXRpdmU6IFwiU1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE3ZV0vZywgYWx0ZXJuYXRpdmU6IFwielwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE3ZF0vZywgYWx0ZXJuYXRpdmU6IFwiWlwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDFjNF0vZywgYWx0ZXJuYXRpdmU6IFwiRFpcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxYzVdL2csIGFsdGVybmF0aXZlOiBcIkR6XCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMWM2XS9nLCBhbHRlcm5hdGl2ZTogXCJkelwiIH1cblx0XSxcblx0Ly8gTGFuZ3VhZ2U6IEdlb3JnaWFuXG5cdC8vIFRoZSBHZW9yZ2lhbiBsYW5ndWFnZSBkb2VzIG5vdCB1c2UgY2FwaXRhbCBsZXR0ZXJzLlxuXHQvLyBTb3VyY2VzOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Sb21hbml6YXRpb25fb2ZfR2VvcmdpYW4gKG5hdGlvbmFsIHN5c3RlbSlcblx0a2E6IFtcblx0XHR7IGxldHRlcjogL1tcXHUxMGQwXS9nLCBhbHRlcm5hdGl2ZTogXCJhXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUxMGQxXS9nLCBhbHRlcm5hdGl2ZTogXCJiXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUxMGQyXS9nLCBhbHRlcm5hdGl2ZTogXCJnXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUxMGQzXS9nLCBhbHRlcm5hdGl2ZTogXCJkXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUxMGQ0XS9nLCBhbHRlcm5hdGl2ZTogXCJlXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUxMGQ1XS9nLCBhbHRlcm5hdGl2ZTogXCJ2XCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUxMGQ2XS9nLCBhbHRlcm5hdGl2ZTogXCJ6XCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUxMGQ3XS9nLCBhbHRlcm5hdGl2ZTogXCJ0XCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUxMGQ4XS9nLCBhbHRlcm5hdGl2ZTogXCJpXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUxMGQ5XS9nLCBhbHRlcm5hdGl2ZTogXCJrXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUxMGRhXS9nLCBhbHRlcm5hdGl2ZTogXCJsXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUxMGRiXS9nLCBhbHRlcm5hdGl2ZTogXCJtXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUxMGRjXS9nLCBhbHRlcm5hdGl2ZTogXCJuXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUxMGRkXS9nLCBhbHRlcm5hdGl2ZTogXCJvXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUxMGRlXS9nLCBhbHRlcm5hdGl2ZTogXCJwXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUxMGRmXS9nLCBhbHRlcm5hdGl2ZTogXCJ6aFwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MTBlMF0vZywgYWx0ZXJuYXRpdmU6IFwiclwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MTBlMV0vZywgYWx0ZXJuYXRpdmU6IFwic1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MTBlMl0vZywgYWx0ZXJuYXRpdmU6IFwidFwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MTBlM10vZywgYWx0ZXJuYXRpdmU6IFwidVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MTBlNF0vZywgYWx0ZXJuYXRpdmU6IFwicFwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MTBlNV0vZywgYWx0ZXJuYXRpdmU6IFwia1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MTBlNl0vZywgYWx0ZXJuYXRpdmU6IFwiZ2hcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTEwZTddL2csIGFsdGVybmF0aXZlOiBcInFcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTEwZThdL2csIGFsdGVybmF0aXZlOiBcInNoXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUxMGU5XS9nLCBhbHRlcm5hdGl2ZTogXCJjaFwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MTBlYV0vZywgYWx0ZXJuYXRpdmU6IFwidHNcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTEwZWJdL2csIGFsdGVybmF0aXZlOiBcImR6XCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUxMGVjXS9nLCBhbHRlcm5hdGl2ZTogXCJ0c1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MTBlZF0vZywgYWx0ZXJuYXRpdmU6IFwiY2hcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTEwZWVdL2csIGFsdGVybmF0aXZlOiBcImtoXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUxMGVmXS9nLCBhbHRlcm5hdGl2ZTogXCJqXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUxMGYwXS9nLCBhbHRlcm5hdGl2ZTogXCJoXCIgfVxuXHRdLFxuXHQvLyBMYW5ndWFnZTogR3JlZW5sYW5kaWMuXG5cdC8vIFNvdXJjZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvR3JlZW5sYW5kaWNfbGFuZ3VhZ2UjT3J0aG9ncmFwaHlcblx0a2FsOiBbXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBFNV0vZywgYWx0ZXJuYXRpdmU6IFwiYWFcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwQzVdL2csIGFsdGVybmF0aXZlOiBcIkFhXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMEU2XFx1MDRENV0vZywgYWx0ZXJuYXRpdmU6IFwiYWVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwQzZcXHUwNEQ0XS9nLCBhbHRlcm5hdGl2ZTogXCJBZVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBDNF0vZywgYWx0ZXJuYXRpdmU6IFwiQWVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwRjhdL2csIGFsdGVybmF0aXZlOiBcIm9lXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMEQ4XS9nLCBhbHRlcm5hdGl2ZTogXCJPZVwiIH1cblx0XHRdLFxuXHQvLyBMYW5ndWFnZTogS2lueWFyd2FuZGEuXG5cdC8vIFNvdXJjZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvS2lueWFyd2FuZGFcblx0a2luOiBbXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MjAxOVxcdTAwMjddL2csIGFsdGVybmF0aXZlOiBcIlwiIH1cblx0XSxcblx0Ly8gTGFuZ3VhZ2U6IEx1eGVtYm91cmdpc2guXG5cdC8vIFNvdXJjZTogaHR0cDovL3d3dy5vbW5pZ2xvdC5jb20vd3JpdGluZy9sdXhlbWJvdXJnaXNoLmh0bVxuXHRsYjogW1xuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZTRdL2csIGFsdGVybmF0aXZlOiBcImFcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwYzRdL2csIGFsdGVybmF0aXZlOiBcIkFcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZWJcXHUwMGU5XS9nLCBhbHRlcm5hdGl2ZTogXCJlXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGNiXFx1MDBjOV0vZywgYWx0ZXJuYXRpdmU6IFwiRVwiIH1cblx0XSxcblx0Ly8gTGFuZ3VhZ2U6IExpbWJ1cmdpc2guXG5cdC8vIFNvdXJjZTogaHR0cDovL3d3dy5vbW5pZ2xvdC5jb20vd3JpdGluZy9saW1idXJnaXNoLmh0bVxuXHRsaTogW1xuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZTFcXHUwMGUyXFx1MDBlMFxcdTAwZTRdL2csIGFsdGVybmF0aXZlOiBcImFcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwYzFcXHUwMGMyXFx1MDBjMFxcdTAwYzRdL2csIGFsdGVybmF0aXZlOiBcIkFcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZWJcXHUwMGU4XFx1MDBlYV0vZywgYWx0ZXJuYXRpdmU6IFwiZVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBjYlxcdTAwYzhcXHUwMGNhXS9nLCBhbHRlcm5hdGl2ZTogXCJFXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGY2XFx1MDBmM10vZywgYWx0ZXJuYXRpdmU6IFwib1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBkNlxcdTAwZDNdL2csIGFsdGVybmF0aXZlOiBcIk9cIiB9XG5cdF0sXG5cdC8vIExhbmd1YWdlOiBMaW5nYWxhLlxuXHQvLyBTb3VyY2VzOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MaW5nYWxhI1dyaXRpbmdfc3lzdGVtIGh0dHA6Ly93d3cub21uaWdsb3QuY29tL3dyaXRpbmcvbGluZ2FsYS5odG1cblx0bGluOiBbXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBlMVxcdTAwZTJcXHUwMWNlXS9nLCBhbHRlcm5hdGl2ZTogXCJhXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGMxXFx1MDBjMlxcdTAxY2RdL2csIGFsdGVybmF0aXZlOiBcIkFcIiB9LFxuXHRcdHsgbGV0dGVyOiAvXFx1MDI1YlxcdTAzMDEvZywgYWx0ZXJuYXRpdmU6IFwiZVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9cXHUwMjViXFx1MDMwMi9nLCBhbHRlcm5hdGl2ZTogXCJlXCIgfSxcblx0XHR7IGxldHRlcjogL1xcdTAyNWJcXHUwMzBjL2csIGFsdGVybmF0aXZlOiBcImVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZTlcXHUwMGVhXFx1MDExYlxcdTAyNWJdL2csIGFsdGVybmF0aXZlOiBcImVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvXFx1MDE5MFxcdTAzMDEvZywgYWx0ZXJuYXRpdmU6IFwiRVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9cXHUwMTkwXFx1MDMwMi9nLCBhbHRlcm5hdGl2ZTogXCJFXCIgfSxcblx0XHR7IGxldHRlcjogL1xcdTAxOTBcXHUwMzBjL2csIGFsdGVybmF0aXZlOiBcIkVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwYzlcXHUwMGNhXFx1MDExYVxcdTAxOTBdL2csIGFsdGVybmF0aXZlOiBcIkVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZWRcXHUwMGVlXFx1MDFkMF0vZywgYWx0ZXJuYXRpdmU6IFwiaVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBjZFxcdTAwY2VcXHUwMWNmXS9nLCBhbHRlcm5hdGl2ZTogXCJJXCIgfSxcblx0XHR7IGxldHRlcjogL1xcdTAyNTRcXHUwMzAxL2csIGFsdGVybmF0aXZlOiBcIm9cIiB9LFxuXHRcdHsgbGV0dGVyOiAvXFx1MDI1NFxcdTAzMDIvZywgYWx0ZXJuYXRpdmU6IFwib1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9cXHUwMjU0XFx1MDMwYy9nLCBhbHRlcm5hdGl2ZTogXCJvXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGYzXFx1MDBmNFxcdTAxZDJcXHUwMjU0XS9nLCBhbHRlcm5hdGl2ZTogXCJvXCIgfSxcblx0XHR7IGxldHRlcjogL1xcdTAxODZcXHUwMzAxL2csIGFsdGVybmF0aXZlOiBcIk9cIiB9LFxuXHRcdHsgbGV0dGVyOiAvXFx1MDE4NlxcdTAzMDIvZywgYWx0ZXJuYXRpdmU6IFwiT1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9cXHUwMTg2XFx1MDMwYy9nLCBhbHRlcm5hdGl2ZTogXCJPXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGQzXFx1MDBkNFxcdTAxZDFcXHUwMTg2XS9nLCBhbHRlcm5hdGl2ZTogXCJPXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGZhXS9nLCBhbHRlcm5hdGl2ZTogXCJ1XCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGRhXS9nLCBhbHRlcm5hdGl2ZTogXCJVXCIgfVxuXHRdLFxuXHQvLyBMYW5ndWFnZTogTGl0aHVhbmlhbi5cblx0Ly8gU291cmNlczogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGl0aHVhbmlhbl9vcnRob2dyYXBoeSBodHRwOi8vd3d3Lm9tbmlnbG90LmNvbS93cml0aW5nL2xpdGh1YW5pYW4uaHRtXG5cdGx0OiBbXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDEwNV0vZywgYWx0ZXJuYXRpdmU6IFwiYVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDEwNF0vZywgYWx0ZXJuYXRpdmU6IFwiQVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDEwZF0vZywgYWx0ZXJuYXRpdmU6IFwiY1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDEwY10vZywgYWx0ZXJuYXRpdmU6IFwiQ1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDExOVxcdTAxMTddL2csIGFsdGVybmF0aXZlOiBcImVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxMThcXHUwMTE2XS9nLCBhbHRlcm5hdGl2ZTogXCJFXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTJmXS9nLCBhbHRlcm5hdGl2ZTogXCJpXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTJlXS9nLCBhbHRlcm5hdGl2ZTogXCJJXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTYxXS9nLCBhbHRlcm5hdGl2ZTogXCJzXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTYwXS9nLCBhbHRlcm5hdGl2ZTogXCJTXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTczXFx1MDE2Yl0vZywgYWx0ZXJuYXRpdmU6IFwidVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE3MlxcdTAxNmFdL2csIGFsdGVybmF0aXZlOiBcIlVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxN2VdL2csIGFsdGVybmF0aXZlOiBcInpcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxN2RdL2csIGFsdGVybmF0aXZlOiBcIlpcIiB9XG5cdF0sXG5cdC8vIExhbmd1YWdlOiBNYWxhZ2FzeS5cblx0Ly8gU291cmNlOiBodHRwOi8vd3d3Lm9tbmlnbG90LmNvbS93cml0aW5nL21hbGFnYXN5Lmh0bVxuXHRtZzogW1xuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZjRdL2csIGFsdGVybmF0aXZlOiBcImFvXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGQ0XS9nLCBhbHRlcm5hdGl2ZTogXCJBb1wiIH1cblx0XSxcblx0Ly8gTGFuZ3VhZ2U6IE1hY2Vkb25pYW4uXG5cdC8vIFNvdXJjZTogaHR0cDovL3d3dy5vbW5pZ2xvdC5jb20vd3JpdGluZy9tYWNlZG9uaWFuLmh0bVxuXHRtazogW1xuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MzBdL2csIGFsdGVybmF0aXZlOiBcImFcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MTBdL2csIGFsdGVybmF0aXZlOiBcIkFcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MzFdL2csIGFsdGVybmF0aXZlOiBcImJcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MTFdL2csIGFsdGVybmF0aXZlOiBcIkJcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MzJdL2csIGFsdGVybmF0aXZlOiBcInZcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MTJdL2csIGFsdGVybmF0aXZlOiBcIlZcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MzNdL2csIGFsdGVybmF0aXZlOiBcImdcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MTNdL2csIGFsdGVybmF0aXZlOiBcIkdcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MzRdL2csIGFsdGVybmF0aXZlOiBcImRcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MTRdL2csIGFsdGVybmF0aXZlOiBcIkRcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0NTNdL2csIGFsdGVybmF0aXZlOiBcImdqXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDAzXS9nLCBhbHRlcm5hdGl2ZTogXCJHalwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDQzNV0vZywgYWx0ZXJuYXRpdmU6IFwiZVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDQxNV0vZywgYWx0ZXJuYXRpdmU6IFwiRVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDQzNl0vZywgYWx0ZXJuYXRpdmU6IFwiemhcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MTZdL2csIGFsdGVybmF0aXZlOiBcIlpoXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDM3XS9nLCBhbHRlcm5hdGl2ZTogXCJ6XCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDE3XS9nLCBhbHRlcm5hdGl2ZTogXCJaXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDU1XS9nLCBhbHRlcm5hdGl2ZTogXCJkelwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDQwNV0vZywgYWx0ZXJuYXRpdmU6IFwiRHpcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MzhdL2csIGFsdGVybmF0aXZlOiBcImlcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MThdL2csIGFsdGVybmF0aXZlOiBcIklcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0NThdL2csIGFsdGVybmF0aXZlOiBcImpcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MDhdL2csIGFsdGVybmF0aXZlOiBcIkpcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0M0FdL2csIGFsdGVybmF0aXZlOiBcImtcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MUFdL2csIGFsdGVybmF0aXZlOiBcIktcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0M0JdL2csIGFsdGVybmF0aXZlOiBcImxcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MUJdL2csIGFsdGVybmF0aXZlOiBcIkxcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0NTldL2csIGFsdGVybmF0aXZlOiBcImxqXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDA5XS9nLCBhbHRlcm5hdGl2ZTogXCJMalwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDQzQ10vZywgYWx0ZXJuYXRpdmU6IFwibVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDQxQ10vZywgYWx0ZXJuYXRpdmU6IFwiTVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDQzRF0vZywgYWx0ZXJuYXRpdmU6IFwiblwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDQxRF0vZywgYWx0ZXJuYXRpdmU6IFwiTlwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDQ1QV0vZywgYWx0ZXJuYXRpdmU6IFwibmpcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MEFdL2csIGFsdGVybmF0aXZlOiBcIk5qXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDNFXS9nLCBhbHRlcm5hdGl2ZTogXCJvXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDFFXS9nLCBhbHRlcm5hdGl2ZTogXCJPXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDQwXS9nLCBhbHRlcm5hdGl2ZTogXCJyXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDIwXS9nLCBhbHRlcm5hdGl2ZTogXCJSXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDNGXS9nLCBhbHRlcm5hdGl2ZTogXCJwXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDFGXS9nLCBhbHRlcm5hdGl2ZTogXCJQXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDQxXS9nLCBhbHRlcm5hdGl2ZTogXCJzXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDIxXS9nLCBhbHRlcm5hdGl2ZTogXCJTXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDQyXS9nLCBhbHRlcm5hdGl2ZTogXCJ0XCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDIyXS9nLCBhbHRlcm5hdGl2ZTogXCJUXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDVDXS9nLCBhbHRlcm5hdGl2ZTogXCJralwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDQwQ10vZywgYWx0ZXJuYXRpdmU6IFwiS2pcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0NDNdL2csIGFsdGVybmF0aXZlOiBcInVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MjNdL2csIGFsdGVybmF0aXZlOiBcIlVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0NDRdL2csIGFsdGVybmF0aXZlOiBcImZcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MjRdL2csIGFsdGVybmF0aXZlOiBcIkZcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0NDVdL2csIGFsdGVybmF0aXZlOiBcImhcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MjVdL2csIGFsdGVybmF0aXZlOiBcIkhcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0NDZdL2csIGFsdGVybmF0aXZlOiBcImNcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MjZdL2csIGFsdGVybmF0aXZlOiBcIkNcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0NDddL2csIGFsdGVybmF0aXZlOiBcImNoXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDI3XS9nLCBhbHRlcm5hdGl2ZTogXCJDaFwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDQ1Rl0vZywgYWx0ZXJuYXRpdmU6IFwiZGpcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTA0MEZdL2csIGFsdGVybmF0aXZlOiBcIkRqXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwNDQ4XS9nLCBhbHRlcm5hdGl2ZTogXCJzaFwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDQyOF0vZywgYWx0ZXJuYXRpdmU6IFwiU2hcIiB9XG5cdF0sXG5cdC8vIExhbmd1YWdlOiBNYW9yaS5cblx0Ly8gU291cmNlOiBodHRwOi8vd3d3Lm9tbmlnbG90LmNvbS93cml0aW5nL21hb3JpLmh0bVxuXHRtcmk6IFtcblx0XHR7IGxldHRlcjogL1tcXHUwMTAxXS9nLCBhbHRlcm5hdGl2ZTogXCJhYVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDEwMF0vZywgYWx0ZXJuYXRpdmU6IFwiQWFcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxMTNdL2csIGFsdGVybmF0aXZlOiBcImVlXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTEyXS9nLCBhbHRlcm5hdGl2ZTogXCJFZVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDEyYl0vZywgYWx0ZXJuYXRpdmU6IFwiaWlcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxMmFdL2csIGFsdGVybmF0aXZlOiBcIklpXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTRkXS9nLCBhbHRlcm5hdGl2ZTogXCJvb1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE0Y10vZywgYWx0ZXJuYXRpdmU6IFwiT29cIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxNmJdL2csIGFsdGVybmF0aXZlOiBcInV1XCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTZhXS9nLCBhbHRlcm5hdGl2ZTogXCJVdVwiIH1cblx0XSxcblx0Ly8gTGFuZ3VhZ2U6IE1pcmFuZGVzZS5cblx0Ly8gU291cmNlOiBodHRwOi8vd3d3Lm9tbmlnbG90LmNvbS93cml0aW5nL21pcmFuZGVzZS5odG1cblx0bXdsOiBbXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBlN10vZywgYWx0ZXJuYXRpdmU6IFwiY1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBjN10vZywgYWx0ZXJuYXRpdmU6IFwiQ1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBlMV0vZywgYWx0ZXJuYXRpdmU6IFwiYVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBjMV0vZywgYWx0ZXJuYXRpdmU6IFwiQVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBlOVxcdTAwZWFdL2csIGFsdGVybmF0aXZlOiBcImVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwYzlcXHUwMGNhXS9nLCBhbHRlcm5hdGl2ZTogXCJFXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGVkXS9nLCBhbHRlcm5hdGl2ZTogXCJpXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGNkXS9nLCBhbHRlcm5hdGl2ZTogXCJJXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGYzXFx1MDBmNF0vZywgYWx0ZXJuYXRpdmU6IFwib1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBkM1xcdTAwZDRdL2csIGFsdGVybmF0aXZlOiBcIk9cIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZmFcXHUwMTY5XS9nLCBhbHRlcm5hdGl2ZTogXCJ1XCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGRhXFx1MDE2OF0vZywgYWx0ZXJuYXRpdmU6IFwiVVwiIH1cblx0XSxcblx0Ly8gTGFuZ3VhZ2U6IE9jY2l0YW4uXG5cdC8vIFNvdXJjZXM6IGh0dHA6Ly93d3cub21uaWdsb3QuY29tL3dyaXRpbmcvb3JvbW8uaHRtIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL09jY2l0YW5fYWxwaGFiZXRcblx0b2NpOiBbXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBlN10vZywgYWx0ZXJuYXRpdmU6IFwiY1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBjN10vZywgYWx0ZXJuYXRpdmU6IFwiQ1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBlMFxcdTAwZTFdL2csIGFsdGVybmF0aXZlOiBcImFcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwYzBcXHUwMGMxXS9nLCBhbHRlcm5hdGl2ZTogXCJBXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGU4XFx1MDBlOV0vZywgYWx0ZXJuYXRpdmU6IFwiZVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBjOFxcdTAwYzldL2csIGFsdGVybmF0aXZlOiBcIkVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZWRcXHUwMGVmXS9nLCBhbHRlcm5hdGl2ZTogXCJpXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGNkXFx1MDBjZl0vZywgYWx0ZXJuYXRpdmU6IFwiSVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBmMlxcdTAwZjNdL2csIGFsdGVybmF0aXZlOiBcIm9cIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZDJcXHUwMGQzXS9nLCBhbHRlcm5hdGl2ZTogXCJPXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGZhXFx1MDBmY10vZywgYWx0ZXJuYXRpdmU6IFwidVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBkYVxcdTAwZGNdL2csIGFsdGVybmF0aXZlOiBcIlVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwYjddL2csIGFsdGVybmF0aXZlOiBcIlwiIH1cblx0XSxcblx0Ly8gTGFuZ3VhZ2U6IE9yb21vLlxuXHQvLyBTb3VyY2U6IGh0dHA6Ly93d3cub21uaWdsb3QuY29tL3dyaXRpbmcvb2NjaXRhbi5odG1cblx0b3JtOiBbXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDAyN10vZywgYWx0ZXJuYXRpdmU6IFwiXCIgfVxuXHRdLFxuXHQvLyBMYW5ndWFnZTogUG9ydHVndWVzZS5cblx0Ly8gU291cmNlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Qb3J0dWd1ZXNlX29ydGhvZ3JhcGh5IGh0dHA6Ly93d3cub21uaWdsb3QuY29tL3dyaXRpbmcvcG9ydHVndWVzZS5odG1cblx0cHQ6IFtcblx0XHR7IGxldHRlcjogL1tcXHUwMGU3XS9nLCBhbHRlcm5hdGl2ZTogXCJjXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGM3XS9nLCBhbHRlcm5hdGl2ZTogXCJDXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGUxXFx1MDBlMlxcdTAwZTNcXHUwMGUwXS9nLCBhbHRlcm5hdGl2ZTogXCJhXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGMxXFx1MDBjMlxcdTAwYzNcXHUwMGMwXS9nLCBhbHRlcm5hdGl2ZTogXCJBXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGU5XFx1MDBlYV0vZywgYWx0ZXJuYXRpdmU6IFwiZVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBjOVxcdTAwY2FdL2csIGFsdGVybmF0aXZlOiBcIkVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZWRdL2csIGFsdGVybmF0aXZlOiBcImlcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwY2RdL2csIGFsdGVybmF0aXZlOiBcIklcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZjNcXHUwMGY0XFx1MDBmNV0vZywgYWx0ZXJuYXRpdmU6IFwib1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBkM1xcdTAwZDRcXHUwMGQ1XS9nLCBhbHRlcm5hdGl2ZTogXCJPXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGZhXS9nLCBhbHRlcm5hdGl2ZTogXCJ1XCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGRhXS9nLCBhbHRlcm5hdGl2ZTogXCJVXCIgfVxuXHRdLFxuXHQvLyBMYW5ndWFnZTogUm9tYW5zaCBWYWxsYWRlci5cblx0Ly8gU291cmNlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Sb21hbnNoX2xhbmd1YWdlI09ydGhvZ3JhcGh5IGh0dHA6Ly93d3cub21uaWdsb3QuY29tL3dyaXRpbmcvcm9tYW5zaC5odG1cblx0cm9oOiBbXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBlOVxcdTAwZThcXHUwMGVhXS9nLCBhbHRlcm5hdGl2ZTogXCJlXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGM5XFx1MDBjOFxcdTAwY2FdL2csIGFsdGVybmF0aXZlOiBcIkVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZWZdL2csIGFsdGVybmF0aXZlOiBcImlcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwY2ZdL2csIGFsdGVybmF0aXZlOiBcIklcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZjZdL2csIGFsdGVybmF0aXZlOiBcIm9lXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGQ2XS9nLCBhbHRlcm5hdGl2ZTogXCJPZVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBmY10vZywgYWx0ZXJuYXRpdmU6IFwidWVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZGNdL2csIGFsdGVybmF0aXZlOiBcIlVlXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGU0XS9nLCBhbHRlcm5hdGl2ZTogXCJhZVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBjNF0vZywgYWx0ZXJuYXRpdmU6IFwiQWVcIiB9XG5cdF0sXG5cdC8vIExhbmd1YWdlOiBBcm9tYW5pYW4uXG5cdC8vIFNvdXJjZXM6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Fyb21hbmlhbl9hbHBoYWJldCBodHRwOi8vd3d3Lm9tbmlnbG90LmNvbS93cml0aW5nL2Fyb21hbmlhbi5odG1cblx0cnVwOiBbXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBlM10vZywgYWx0ZXJuYXRpdmU6IFwiYVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBjM10vZywgYWx0ZXJuYXRpdmU6IFwiQVwiIH1cblx0XSxcblx0Ly8gTGFuZ3VhZ2U6IFJvbWFuaWFuLlxuXHQvLyBTb3VyY2VzOiBodHRwOi8vZm9ydW0ud29yZHJlZmVyZW5jZS5jb20vdGhyZWFkcy9yb21hbmlhbi10cmFuc2xpdGVyYXRpb24uMzE5MzU0NC8jcG9zdC0xNjE2MTI1MVxuXHQvLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Sb21hbmlhbl9hbHBoYWJldCBodHRwOi8vd3d3Lm9tbmlnbG90LmNvbS93cml0aW5nL3JvbWFuaWFuLmh0bVxuXHRybzogW1xuXHRcdHsgbGV0dGVyOiAvW1xcdTAxMDNcXHUwMGUyXS9nLCBhbHRlcm5hdGl2ZTogXCJhXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTAyXFx1MDBjMl0vZywgYWx0ZXJuYXRpdmU6IFwiQVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBlZV0vZywgYWx0ZXJuYXRpdmU6IFwiaVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBjZV0vZywgYWx0ZXJuYXRpdmU6IFwiSVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDIxOVxcdTAxNWZdL2csIGFsdGVybmF0aXZlOiBcInNcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAyMThcXHUwMTVlXS9nLCBhbHRlcm5hdGl2ZTogXCJTXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMjFiXFx1MDE2M10vZywgYWx0ZXJuYXRpdmU6IFwidFwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDIxYVxcdTAxNjJdL2csIGFsdGVybmF0aXZlOiBcIlRcIiB9XG5cdF0sXG5cdC8vIExhbmd1YWdlOiBLbGluZ29uLlxuXHQvLyBTb3VyY2VzOiBodHRwOi8vd3d3Lm9tbmlnbG90LmNvbS9jb25zY3JpcHRzL2tsaW5nb24uaHRtIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0tsaW5nb25fbGFuZ3VhZ2UjV3JpdGluZ19zeXN0ZW1zXG5cdC8vIFRoaXMgdHJhbnNsYXRpb24gbW9kdWxlIG9ubHkgd29ya3MgZm9yIEtsaW5nb24gd3JpdHRlbiBpbiBMYXRpbiBjaGFyYWN0ZXJzLiBLTEkgUGxxYUQgc2NyaXB0IGlzIG5vdCBzdXBwb3J0ZWQgeWV0LlxuXHR0bGg6IFtcblx0XHR7IGxldHRlcjogL1tcXHUyMDE5XFx1MDAyN10vZywgYWx0ZXJuYXRpdmU6IFwiXCIgfVxuXHRdLFxuXHQvLyBMYW5ndWFnZTogU2xvdmFrLlxuXHQvLyBTb3VyY2VzOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Eel8oZGlncmFwaCkgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2xvdmFrX29ydGhvZ3JhcGh5XG5cdC8vIGh0dHA6Ly93d3cub21uaWdsb3QuY29tL3dyaXRpbmcvc2xvdmFrLmh0bVxuXHRzazogW1xuXHRcdHsgbGV0dGVyOiAvW1xcdTAxYzRdL2csIGFsdGVybmF0aXZlOiBcIkRaXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMWM1XS9nLCBhbHRlcm5hdGl2ZTogXCJEelwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDFjNl0vZywgYWx0ZXJuYXRpdmU6IFwiZHpcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZTFcXHUwMGU0XS9nLCBhbHRlcm5hdGl2ZTogXCJhXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGMxXFx1MDBjNF0vZywgYWx0ZXJuYXRpdmU6IFwiQVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDEwZF0vZywgYWx0ZXJuYXRpdmU6IFwiY1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDEwY10vZywgYWx0ZXJuYXRpdmU6IFwiQ1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDEwZl0vZywgYWx0ZXJuYXRpdmU6IFwiZFwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDEwZV0vZywgYWx0ZXJuYXRpdmU6IFwiRFwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBlOV0vZywgYWx0ZXJuYXRpdmU6IFwiZVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBjOV0vZywgYWx0ZXJuYXRpdmU6IFwiRVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBlZF0vZywgYWx0ZXJuYXRpdmU6IFwiaVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBjZF0vZywgYWx0ZXJuYXRpdmU6IFwiSVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDEzZVxcdTAxM2FdL2csIGFsdGVybmF0aXZlOiBcImxcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxM2RcXHUwMTM5XS9nLCBhbHRlcm5hdGl2ZTogXCJMXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTQ4XS9nLCBhbHRlcm5hdGl2ZTogXCJuXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTQ3XS9nLCBhbHRlcm5hdGl2ZTogXCJOXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGYzXFx1MDBmNF0vZywgYWx0ZXJuYXRpdmU6IFwib1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBkM1xcdTAwZDRdL2csIGFsdGVybmF0aXZlOiBcIk9cIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxNTVdL2csIGFsdGVybmF0aXZlOiBcInJcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxNTRdL2csIGFsdGVybmF0aXZlOiBcIlJcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxNjFdL2csIGFsdGVybmF0aXZlOiBcInNcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxNjBdL2csIGFsdGVybmF0aXZlOiBcIlNcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxNjVdL2csIGFsdGVybmF0aXZlOiBcInRcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxNjRdL2csIGFsdGVybmF0aXZlOiBcIlRcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZmFdL2csIGFsdGVybmF0aXZlOiBcInVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZGFdL2csIGFsdGVybmF0aXZlOiBcIlVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZmRdL2csIGFsdGVybmF0aXZlOiBcInlcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZGRdL2csIGFsdGVybmF0aXZlOiBcIllcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxN2VdL2csIGFsdGVybmF0aXZlOiBcInpcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxN2RdL2csIGFsdGVybmF0aXZlOiBcIlpcIiB9XG5cdF0sXG5cdC8vIExhbmd1YWdlOiBTbG92ZW5pYW4uXG5cdC8vIFNvdXJjZXM6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1Nsb3ZlbmVfYWxwaGFiZXQgaHR0cDovL3d3dy5vbW5pZ2xvdC5jb20vd3JpdGluZy9zbG92ZW5lLmh0bVxuXHRzbDogW1xuXHRcdHsgbGV0dGVyOiAvW1xcdTAxMGRcXHUwMTA3XS9nLCBhbHRlcm5hdGl2ZTogXCJjXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTBjXFx1MDEwNl0vZywgYWx0ZXJuYXRpdmU6IFwiQ1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDExMV0vZywgYWx0ZXJuYXRpdmU6IFwiZFwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDExMF0vZywgYWx0ZXJuYXRpdmU6IFwiRFwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE2MV0vZywgYWx0ZXJuYXRpdmU6IFwic1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE2MF0vZywgYWx0ZXJuYXRpdmU6IFwiU1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE3ZV0vZywgYWx0ZXJuYXRpdmU6IFwielwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE3ZF0vZywgYWx0ZXJuYXRpdmU6IFwiWlwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBlMFxcdTAwZTFcXHUwMjAzXFx1MDIwMV0vZywgYWx0ZXJuYXRpdmU6IFwiYVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBjMFxcdTAwYzFcXHUwMjAyXFx1MDIwMF0vZywgYWx0ZXJuYXRpdmU6IFwiQVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBlOFxcdTAwZTlcXHUwMjA3XFx1MDIwNV0vZywgYWx0ZXJuYXRpdmU6IFwiZVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9cXHUwMWRkXFx1MDMwMC9nLCBhbHRlcm5hdGl2ZTogXCJlXCIgfSxcblx0XHR7IGxldHRlcjogL1xcdTAxZGRcXHUwMzBmL2csIGFsdGVybmF0aXZlOiBcImVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvXFx1MWViOVxcdTAzMDEvZywgYWx0ZXJuYXRpdmU6IFwiZVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9cXHUxZWI5XFx1MDMxMS9nLCBhbHRlcm5hdGl2ZTogXCJlXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGM4XFx1MDBjOVxcdTAyMDZcXHUwMjA0XS9nLCBhbHRlcm5hdGl2ZTogXCJFXCIgfSxcblx0XHR7IGxldHRlcjogL1xcdTAxOGVcXHUwMzBmL2csIGFsdGVybmF0aXZlOiBcIkVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvXFx1MDE4ZVxcdTAzMDAvZywgYWx0ZXJuYXRpdmU6IFwiRVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9cXHUxZWI4XFx1MDMxMS9nLCBhbHRlcm5hdGl2ZTogXCJFXCIgfSxcblx0XHR7IGxldHRlcjogL1xcdTFlYjhcXHUwMzAxL2csIGFsdGVybmF0aXZlOiBcIkVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZWNcXHUwMGVkXFx1MDIwYlxcdTAyMDldL2csIGFsdGVybmF0aXZlOiBcImlcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwY2NcXHUwMGNkXFx1MDIwYVxcdTAyMDhdL2csIGFsdGVybmF0aXZlOiBcIklcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZjJcXHUwMGYzXFx1MDIwZlxcdTAyMGRdL2csIGFsdGVybmF0aXZlOiBcIm9cIiB9LFxuXHRcdHsgbGV0dGVyOiAvXFx1MWVjZFxcdTAzMTEvZywgYWx0ZXJuYXRpdmU6IFwib1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9cXHUxZWNkXFx1MDMwMS9nLCBhbHRlcm5hdGl2ZTogXCJvXCIgfSxcblx0XHR7IGxldHRlcjogL1xcdTFlY2NcXHUwMzExL2csIGFsdGVybmF0aXZlOiBcIk9cIiB9LFxuXHRcdHsgbGV0dGVyOiAvXFx1MWVjY1xcdTAzMDEvZywgYWx0ZXJuYXRpdmU6IFwiT1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBkMlxcdTAwZDNcXHUwMjBlXFx1MDIwY10vZywgYWx0ZXJuYXRpdmU6IFwiT1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBmOVxcdTAwZmFcXHUwMjE3XFx1MDIxNV0vZywgYWx0ZXJuYXRpdmU6IFwidVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBkOVxcdTAwZGFcXHUwMjE2XFx1MDIxNF0vZywgYWx0ZXJuYXRpdmU6IFwiVVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE1NVxcdTAyMTNdL2csIGFsdGVybmF0aXZlOiBcInJcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxNTRcXHUwMjEyXS9nLCBhbHRlcm5hdGl2ZTogXCJSXCIgfVxuXHRdLFxuXHQvLyBMYW5ndWFnZTogQWxiYW5pYW4uXG5cdC8vIFNvdXJjZXM6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0FsYmFuaWFuX2FscGhhYmV0IGh0dHA6Ly93d3cub21uaWdsb3QuY29tL3dyaXRpbmcvYWxiYW5pYW4uaHRtXG5cdHNxOiBbXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBlN10vZywgYWx0ZXJuYXRpdmU6IFwiY1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBjN10vZywgYWx0ZXJuYXRpdmU6IFwiQ1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBlYl0vZywgYWx0ZXJuYXRpdmU6IFwiZVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBjYl0vZywgYWx0ZXJuYXRpdmU6IFwiRVwiIH1cblx0XSxcblx0Ly8gTGFuZ3VhZ2U6IEh1bmdhcmlhbi5cblx0Ly8gU291cmNlczogaHR0cDovL2ZvcnVtLndvcmRyZWZlcmVuY2UuY29tL3RocmVhZHMvaHVuZ2FyaWFuLXRyYW5zbGl0ZXJhdGlvbi4zMTkzMDIyLyNwb3N0LTE2MTY2OTAxXG5cdC8vIGh0dHA6Ly93d3cub21uaWdsb3QuY29tL3dyaXRpbmcvaHVuZ2FyaWFuLmh0bVxuXHRodTogW1xuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZTFdL2csIGFsdGVybmF0aXZlOiBcImFcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwYzFdL2csIGFsdGVybmF0aXZlOiBcIkFcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZTldL2csIGFsdGVybmF0aXZlOiBcImVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwYzldL2csIGFsdGVybmF0aXZlOiBcIkVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZWRdL2csIGFsdGVybmF0aXZlOiBcImlcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwY2RdL2csIGFsdGVybmF0aXZlOiBcIklcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZjNcXHUwMGY2XFx1MDE1MV0vZywgYWx0ZXJuYXRpdmU6IFwib1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBkM1xcdTAwZDZcXHUwMTUwXS9nLCBhbHRlcm5hdGl2ZTogXCJPXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGZhXFx1MDBmY1xcdTAxNzFdL2csIGFsdGVybmF0aXZlOiBcInVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZGFcXHUwMGRjXFx1MDE3MF0vZywgYWx0ZXJuYXRpdmU6IFwiVVwiIH1cblx0XSxcblx0Ly8gTGFuZ3VhZ2U6IFNhcmRpbmlhbi5cblx0Ly8gU291cmNlczogaHR0cDovL3d3dy5vbW5pZ2xvdC5jb20vd3JpdGluZy9zYXJkaW5pYW4uaHRtIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1NhcmRpbmlhbl9sYW5ndWFnZVxuXHRzcmQ6IFtcblx0XHR7IGxldHRlcjogL1tcXHUwMGU3XS9nLCBhbHRlcm5hdGl2ZTogXCJjXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGM3XS9nLCBhbHRlcm5hdGl2ZTogXCJDXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGUwXFx1MDBlMV0vZywgYWx0ZXJuYXRpdmU6IFwiYVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBjMFxcdTAwYzFdL2csIGFsdGVybmF0aXZlOiBcIkFcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZThcXHUwMGU5XS9nLCBhbHRlcm5hdGl2ZTogXCJlXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGM4XFx1MDBjOV0vZywgYWx0ZXJuYXRpdmU6IFwiRVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBlZFxcdTAwZWZdL2csIGFsdGVybmF0aXZlOiBcImlcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwY2RcXHUwMGNmXS9nLCBhbHRlcm5hdGl2ZTogXCJJXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGYyXFx1MDBmM10vZywgYWx0ZXJuYXRpdmU6IFwib1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBkMlxcdTAwZDNdL2csIGFsdGVybmF0aXZlOiBcIk9cIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZmFcXHUwMGY5XS9nLCBhbHRlcm5hdGl2ZTogXCJ1XCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGRhXFx1MDBkOV0vZywgYWx0ZXJuYXRpdmU6IFwiVVwiIH1cblx0XSxcblx0Ly8gTGFuZ3VhZ2U6IFNpbGVzaWFuLlxuXHQvLyBTb3VyY2U6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1NpbGVzaWFuX2xhbmd1YWdlI1dyaXRpbmdfc3lzdGVtXG5cdHN6bDogW1xuXHRcdHsgbGV0dGVyOiAvW1xcdTAxMDddL2csIGFsdGVybmF0aXZlOiBcImNcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxMDZdL2csIGFsdGVybmF0aXZlOiBcIkNcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZTNdL2csIGFsdGVybmF0aXZlOiBcImFcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwYzNdL2csIGFsdGVybmF0aXZlOiBcIkFcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxNDJdL2csIGFsdGVybmF0aXZlOiBcInVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxNDFdL2csIGFsdGVybmF0aXZlOiBcIlVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwNmVdL2csIGFsdGVybmF0aXZlOiBcIm5cIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwNGVdL2csIGFsdGVybmF0aXZlOiBcIk5cIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxNGZcXHUwMTRkXFx1MDBmNFxcdTAwZjVdL2csIGFsdGVybmF0aXZlOiBcIm9cIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxNGVcXHUwMTRjXFx1MDBkNFxcdTAwZDVdL2csIGFsdGVybmF0aXZlOiBcIk9cIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxNWJdL2csIGFsdGVybmF0aXZlOiBcInNcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxNWFdL2csIGFsdGVybmF0aXZlOiBcIlNcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxN2FcXHUwMTdjXFx1MDE3ZV0vZywgYWx0ZXJuYXRpdmU6IFwielwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE3OVxcdTAxN2JcXHUwMTdkXS9nLCBhbHRlcm5hdGl2ZTogXCJaXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTZmXS9nLCBhbHRlcm5hdGl2ZTogXCJ1XCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTZlXS9nLCBhbHRlcm5hdGl2ZTogXCJVXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTBkXS9nLCBhbHRlcm5hdGl2ZTogXCJjelwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDEwY10vZywgYWx0ZXJuYXRpdmU6IFwiQ3pcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxNTldL2csIGFsdGVybmF0aXZlOiBcInJ6XCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTU4XS9nLCBhbHRlcm5hdGl2ZTogXCJSelwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE2MV0vZywgYWx0ZXJuYXRpdmU6IFwic3pcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxNjBdL2csIGFsdGVybmF0aXZlOiBcIlN6XCIgfVxuXHRdLFxuXHQvLyBMYW5ndWFnZTogVGFoaXRpYW4uXG5cdC8vIFNvdXJjZXM6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1RhaGl0aWFuX2xhbmd1YWdlI1Bob25vbG9neSBodHRwOi8vd3d3Lm9tbmlnbG90LmNvbS93cml0aW5nL3RhaGl0aWFuLmh0bVxuXHR0YWg6IFtcblx0XHR7IGxldHRlcjogL1tcXHUwMTAxXFx1MDBlMlxcdTAwZTBdL2csIGFsdGVybmF0aXZlOiBcImFcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxMDBcXHUwMGMyXFx1MDBjMF0vZywgYWx0ZXJuYXRpdmU6IFwiQVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBlZlxcdTAwZWVcXHUwMGVjXS9nLCBhbHRlcm5hdGl2ZTogXCJpXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGNmXFx1MDBjZVxcdTAwY2NdL2csIGFsdGVybmF0aXZlOiBcIklcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxMTNcXHUwMGVhXFx1MDBlOV0vZywgYWx0ZXJuYXRpdmU6IFwiZVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDExMlxcdTAwY2FcXHUwMGM5XS9nLCBhbHRlcm5hdGl2ZTogXCJFXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMTZiXFx1MDBmYlxcdTAwZmFdL2csIGFsdGVybmF0aXZlOiBcInVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxNmFcXHUwMGRiXFx1MDBkYV0vZywgYWx0ZXJuYXRpdmU6IFwiVVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBlN10vZywgYWx0ZXJuYXRpdmU6IFwiY1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBjN10vZywgYWx0ZXJuYXRpdmU6IFwiQ1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBmMlxcdTAwZjRcXHUwMTRkXS9nLCBhbHRlcm5hdGl2ZTogXCJvXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGQyXFx1MDBkNFxcdTAxNGNdL2csIGFsdGVybmF0aXZlOiBcIk9cIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTIwMTlcXHUwMDI3XFx1MjAxOF0vZywgYWx0ZXJuYXRpdmU6IFwiXCIgfVxuXHRdLFxuXHQvLyBMYW5ndWFnZTogVmVuZXRpYW4uXG5cdC8vIFNvdXJjZXM6IGh0dHA6Ly93d3cub21uaWdsb3QuY29tL3dyaXRpbmcvdmVuZXRpYW4uaHRtIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1ZlbmV0aWFuX2xhbmd1YWdlI1NwZWxsaW5nX3N5c3RlbXNcblx0Ly8gaHR0cDovL3d3dy52ZW5pcGVkaWEub3JnL3dpa2kvaW5kZXgucGhwP3RpdGxlPVZlbmV0aWFuX0xhbmd1YWdlXG5cdHZlYzogW1xuXHRcdHsgbGV0dGVyOiAvXFx1MDA3M1xcdTAwMmRcXHUwMDYzL2csIGFsdGVybmF0aXZlOiBcInNjXCIgfSxcblx0XHR7IGxldHRlcjogL1xcdTAwNTNcXHUwMDJkXFx1MDA0My9nLCBhbHRlcm5hdGl2ZTogXCJTQ1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9cXHUwMDczXFx1MDAyN1xcdTAwNjMvZywgYWx0ZXJuYXRpdmU6IFwic2NcIiB9LFxuXHRcdHsgbGV0dGVyOiAvXFx1MDA1M1xcdTAwMjdcXHUwMDQzL2csIGFsdGVybmF0aXZlOiBcIlNDXCIgfSxcblx0XHR7IGxldHRlcjogL1xcdTAwNzNcXHUyMDE5XFx1MDA2My9nLCBhbHRlcm5hdGl2ZTogXCJzY1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9cXHUwMDUzXFx1MjAxOVxcdTAwNDMvZywgYWx0ZXJuYXRpdmU6IFwiU0NcIiB9LFxuXHRcdHsgbGV0dGVyOiAvXFx1MDA3M1xcdTIwMThcXHUwMDYzL2csIGFsdGVybmF0aXZlOiBcInNjXCIgfSxcblx0XHR7IGxldHRlcjogL1xcdTAwNTNcXHUyMDE4XFx1MDA0My9nLCBhbHRlcm5hdGl2ZTogXCJTQ1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9cXHUwMDUzXFx1MDAyZFxcdTAwNjMvZywgYWx0ZXJuYXRpdmU6IFwiU2NcIiB9LFxuXHRcdHsgbGV0dGVyOiAvXFx1MDA1M1xcdTAwMjdcXHUwMDYzL2csIGFsdGVybmF0aXZlOiBcIlNjXCIgfSxcblx0XHR7IGxldHRlcjogL1xcdTAwNTNcXHUyMDE5XFx1MDA2My9nLCBhbHRlcm5hdGl2ZTogXCJTY1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9cXHUwMDUzXFx1MjAxOFxcdTAwNjMvZywgYWx0ZXJuYXRpdmU6IFwiU2NcIiB9LFxuXHRcdHsgbGV0dGVyOiAvXFx1MDA2M1xcdTIwMTkvZywgYWx0ZXJuYXRpdmU6IFwiY1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9cXHUwMDQzXFx1MjAxOS9nLCBhbHRlcm5hdGl2ZTogXCJDXCIgfSxcblx0XHR7IGxldHRlcjogL1xcdTAwNjNcXHUyMDE4L2csIGFsdGVybmF0aXZlOiBcImNcIiB9LFxuXHRcdHsgbGV0dGVyOiAvXFx1MDA0M1xcdTIwMTgvZywgYWx0ZXJuYXRpdmU6IFwiQ1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9cXHUwMDYzXFx1MDAyNy9nLCBhbHRlcm5hdGl2ZTogXCJjXCIgfSxcblx0XHR7IGxldHRlcjogL1xcdTAwNDNcXHUwMDI3L2csIGFsdGVybmF0aXZlOiBcIkNcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZTBcXHUwMGUxXFx1MDBlMl0vZywgYWx0ZXJuYXRpdmU6IFwiYVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBjMFxcdTAwYzFcXHUwMGMyXS9nLCBhbHRlcm5hdGl2ZTogXCJBXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGU4XFx1MDBlOV0vZywgYWx0ZXJuYXRpdmU6IFwiZVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBjOFxcdTAwYzldL2csIGFsdGVybmF0aXZlOiBcIkVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZjJcXHUwMGYzXS9nLCBhbHRlcm5hdGl2ZTogXCJvXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGQyXFx1MDBkM10vZywgYWx0ZXJuYXRpdmU6IFwiT1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBmOVxcdTAwZmFdL2csIGFsdGVybmF0aXZlOiBcInVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZDlcXHUwMGRhXS9nLCBhbHRlcm5hdGl2ZTogXCJVXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGU3XFx1MDEwZFxcdTAxMGJdL2csIGFsdGVybmF0aXZlOiBcImNcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwYzdcXHUwMTBjXFx1MDEwYV0vZywgYWx0ZXJuYXRpdmU6IFwiQ1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDE0Ml0vZywgYWx0ZXJuYXRpdmU6IFwibFwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBhM1xcdTAxNDFdL2csIGFsdGVybmF0aXZlOiBcIkxcIiB9LFxuXHRcdHsgbGV0dGVyOiAvXFx1ZDgzNVxcdWRlZmYvZywgYWx0ZXJuYXRpdmU6IFwiZGhcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAxMTFcXHUwM2I0XS9nLCBhbHRlcm5hdGl2ZTogXCJkaFwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDExMFxcdTAzOTRdL2csIGFsdGVybmF0aXZlOiBcIkRoXCIgfVxuXHRdLFxuXHQvLyBMYW5ndWFnZTogV2FsbG9vbi5cblx0Ly8gU291cmNlczogaHR0cDovL3d3dy5vbW5pZ2xvdC5jb20vd3JpdGluZy93YWxsb29uLmh0bSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9XYWxsb29uX2FscGhhYmV0XG5cdHdhOiBbXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBlMlxcdTAwZTVdL2csIGFsdGVybmF0aXZlOiBcImFcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwYzJcXHUwMGM1XS9nLCBhbHRlcm5hdGl2ZTogXCJBXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGU3XS9nLCBhbHRlcm5hdGl2ZTogXCJjXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGM3XS9nLCBhbHRlcm5hdGl2ZTogXCJDXCIgfSxcblx0XHR7IGxldHRlcjogL1xcdTAwNjVcXHUwMzBhL2csIGFsdGVybmF0aXZlOiBcImVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvXFx1MDA0NVxcdTAzMGEvZywgYWx0ZXJuYXRpdmU6IFwiRVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBlYlxcdTAwZWFcXHUwMGU4XFx1MDBlOV0vZywgYWx0ZXJuYXRpdmU6IFwiZVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBjOVxcdTAwYzhcXHUwMGNhXFx1MDBjYl0vZywgYWx0ZXJuYXRpdmU6IFwiRVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBlZV0vZywgYWx0ZXJuYXRpdmU6IFwiaVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBjZV0vZywgYWx0ZXJuYXRpdmU6IFwiSVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBmNFxcdTAwZjZdL2csIGFsdGVybmF0aXZlOiBcIm9cIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZDZcXHUwMGQ0XS9nLCBhbHRlcm5hdGl2ZTogXCJPXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGZiXS9nLCBhbHRlcm5hdGl2ZTogXCJ1XCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGRiXS9nLCBhbHRlcm5hdGl2ZTogXCJVXCIgfVxuXHRdLFxuXHQvLyBMYW5ndWFnZTogWW9ydWJhLlxuXHQvLyBTb3VyY2VzOiBodHRwOi8vd3d3Lm9tbmlnbG90LmNvbS93cml0aW5nL3lvcnViYS5odG0gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvWW9ydWJhX2xhbmd1YWdlXG5cdHlvcjogW1xuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZTFcXHUwMGUwXS9nLCBhbHRlcm5hdGl2ZTogXCJhXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGMxXFx1MDBjMF0vZywgYWx0ZXJuYXRpdmU6IFwiQVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBlY1xcdTAwZWRdL2csIGFsdGVybmF0aXZlOiBcImlcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwY2NcXHUwMGNkXS9nLCBhbHRlcm5hdGl2ZTogXCJJXCIgfSxcblx0XHR7IGxldHRlcjogL1xcdTFlY2RcXHUwMzAxL2csIGFsdGVybmF0aXZlOiBcIm9cIiB9LFxuXHRcdHsgbGV0dGVyOiAvXFx1MWVjY1xcdTAzMDEvZywgYWx0ZXJuYXRpdmU6IFwiT1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9cXHUxZWNkXFx1MDMwMC9nLCBhbHRlcm5hdGl2ZTogXCJvXCIgfSxcblx0XHR7IGxldHRlcjogL1xcdTFlY2NcXHUwMzAwL2csIGFsdGVybmF0aXZlOiBcIk9cIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTAwZjNcXHUwMGYyXFx1MWVjZF0vZywgYWx0ZXJuYXRpdmU6IFwib1wiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBkM1xcdTAwZDJcXHUxZWNjXS9nLCBhbHRlcm5hdGl2ZTogXCJPXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGZhXFx1MDBmOV0vZywgYWx0ZXJuYXRpdmU6IFwidVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBkYVxcdTAwZDldL2csIGFsdGVybmF0aXZlOiBcIlVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvXFx1MWViOVxcdTAzMDEvZywgYWx0ZXJuYXRpdmU6IFwiZVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9cXHUxZWI4XFx1MDMwMS9nLCBhbHRlcm5hdGl2ZTogXCJFXCIgfSxcblx0XHR7IGxldHRlcjogL1xcdTFlYjlcXHUwMzAwL2csIGFsdGVybmF0aXZlOiBcImVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvXFx1MWViOFxcdTAzMDAvZywgYWx0ZXJuYXRpdmU6IFwiRVwiIH0sXG5cdFx0eyBsZXR0ZXI6IC9bXFx1MDBlOVxcdTAwZThcXHUxZWI5XS9nLCBhbHRlcm5hdGl2ZTogXCJlXCIgfSxcblx0XHR7IGxldHRlcjogL1tcXHUwMGM5XFx1MDBjOFxcdTFlYjhdL2csIGFsdGVybmF0aXZlOiBcIkVcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTFlNjNdL2csIGFsdGVybmF0aXZlOiBcInNcIiB9LFxuXHRcdHsgbGV0dGVyOiAvW1xcdTFlNjJdL2csIGFsdGVybmF0aXZlOiBcIlNcIiB9XG5cdF1cbn07XG5cbi8qKlxuICogVGhlIGZ1bmN0aW9uIHJldHVybmluZyBhbiBhcnJheSBjb250YWluaW5nIHRyYW5zbGl0ZXJhdGlvbiBvYmplY3RzLCBiYXNlZCBvbiB0aGUgZ2l2ZW4gbG9jYWxlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBsb2NhbGUgVGhlIGxvY2FsZS5cbiAqIEByZXR1cm5zIHtBcnJheX0gQW4gYXJyYXkgY29udGFpbmluZyB0cmFuc2xpdGVyYXRpb24gb2JqZWN0cy5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiggbG9jYWxlICkge1xuXHRpZiAoIGlzVW5kZWZpbmVkKCBsb2NhbGUgKSApIHtcblx0XHRyZXR1cm4gW107XG5cdH1cblx0c3dpdGNoKCBnZXRMYW5ndWFnZSggbG9jYWxlICkgKSB7XG5cdFx0Y2FzZSBcImVzXCI6XG5cdFx0XHRyZXR1cm4gdHJhbnNsaXRlcmF0aW9ucy5lcztcblx0XHRjYXNlIFwicGxcIjpcblx0XHRcdHJldHVybiB0cmFuc2xpdGVyYXRpb25zLnBsO1xuXHRcdGNhc2UgXCJkZVwiOlxuXHRcdFx0cmV0dXJuIHRyYW5zbGl0ZXJhdGlvbnMuZGU7XG5cdFx0Y2FzZSBcIm5iXCI6XG5cdFx0Y2FzZSBcIm5uXCI6XG5cdFx0XHRyZXR1cm4gdHJhbnNsaXRlcmF0aW9ucy5uYm5uO1xuXHRcdGNhc2UgXCJzdlwiOlxuXHRcdFx0cmV0dXJuIHRyYW5zbGl0ZXJhdGlvbnMuc3Y7XG5cdFx0Y2FzZSBcImZpXCI6XG5cdFx0XHRyZXR1cm4gdHJhbnNsaXRlcmF0aW9ucy5maTtcblx0XHRjYXNlIFwiZGFcIjpcblx0XHRcdHJldHVybiB0cmFuc2xpdGVyYXRpb25zLmRhO1xuXHRcdGNhc2UgXCJ0clwiOlxuXHRcdFx0cmV0dXJuIHRyYW5zbGl0ZXJhdGlvbnMudHI7XG5cdFx0Y2FzZSBcImx2XCI6XG5cdFx0XHRyZXR1cm4gdHJhbnNsaXRlcmF0aW9ucy5sdjtcblx0XHRjYXNlIFwiaXNcIjpcblx0XHRcdHJldHVybiB0cmFuc2xpdGVyYXRpb25zLmlzO1xuXHRcdGNhc2UgXCJmYVwiOlxuXHRcdFx0cmV0dXJuIHRyYW5zbGl0ZXJhdGlvbnMuZmE7XG5cdFx0Y2FzZSBcImNzXCI6XG5cdFx0XHRyZXR1cm4gdHJhbnNsaXRlcmF0aW9ucy5jcztcblx0XHRjYXNlIFwicnVcIjpcblx0XHRcdHJldHVybiB0cmFuc2xpdGVyYXRpb25zLnJ1O1xuXHRcdGNhc2UgXCJlb1wiOlxuXHRcdFx0cmV0dXJuIHRyYW5zbGl0ZXJhdGlvbnMuZW87XG5cdFx0Y2FzZSBcImFmXCI6XG5cdFx0XHRyZXR1cm4gdHJhbnNsaXRlcmF0aW9ucy5hZjtcblx0XHRjYXNlIFwiYmFsXCI6XG5cdFx0Y2FzZSBcImNhXCI6XG5cdFx0XHRyZXR1cm4gdHJhbnNsaXRlcmF0aW9ucy5jYTtcblx0XHRjYXNlIFwiYXN0XCI6XG5cdFx0XHRyZXR1cm4gdHJhbnNsaXRlcmF0aW9ucy5hc3Q7XG5cdFx0Y2FzZSBcImFuXCI6XG5cdFx0XHRyZXR1cm4gdHJhbnNsaXRlcmF0aW9ucy5hbjtcblx0XHRjYXNlIFwiYXlcIjpcblx0XHRcdHJldHVybiB0cmFuc2xpdGVyYXRpb25zLmF5O1xuXHRcdGNhc2UgXCJlblwiOlxuXHRcdFx0cmV0dXJuIHRyYW5zbGl0ZXJhdGlvbnMuZW47XG5cdFx0Y2FzZSBcImZyXCI6XG5cdFx0XHRyZXR1cm4gdHJhbnNsaXRlcmF0aW9ucy5mcjtcblx0XHRjYXNlIFwiaXRcIjpcblx0XHRcdHJldHVybiB0cmFuc2xpdGVyYXRpb25zLml0O1xuXHRcdGNhc2UgXCJubFwiOlxuXHRcdFx0cmV0dXJuIHRyYW5zbGl0ZXJhdGlvbnMubmw7XG5cdFx0Y2FzZSBcImJtXCI6XG5cdFx0XHRyZXR1cm4gdHJhbnNsaXRlcmF0aW9ucy5ibTtcblx0XHRjYXNlIFwidWtcIjpcblx0XHRcdHJldHVybiB0cmFuc2xpdGVyYXRpb25zLnVrO1xuXHRcdGNhc2UgXCJiclwiOlxuXHRcdFx0cmV0dXJuIHRyYW5zbGl0ZXJhdGlvbnMuYnI7XG5cdFx0Y2FzZSBcImNoXCI6XG5cdFx0XHRyZXR1cm4gdHJhbnNsaXRlcmF0aW9ucy5jaDtcblx0XHRjYXNlIFwiY3NiXCI6XG5cdFx0XHRyZXR1cm4gdHJhbnNsaXRlcmF0aW9ucy5jc2I7XG5cdFx0Y2FzZSBcImN5XCI6XG5cdFx0XHRyZXR1cm4gdHJhbnNsaXRlcmF0aW9ucy5jeTtcblx0XHRjYXNlIFwiZWVcIjpcblx0XHRcdHJldHVybiB0cmFuc2xpdGVyYXRpb25zLmVlO1xuXHRcdGNhc2UgXCJldFwiOlxuXHRcdFx0cmV0dXJuIHRyYW5zbGl0ZXJhdGlvbnMuZXQ7XG5cdFx0Y2FzZSBcImV1XCI6XG5cdFx0XHRyZXR1cm4gdHJhbnNsaXRlcmF0aW9ucy5ldTtcblx0XHRjYXNlIFwiZnVjXCI6XG5cdFx0XHRyZXR1cm4gdHJhbnNsaXRlcmF0aW9ucy5mdWM7XG5cdFx0Y2FzZSBcImZqXCI6XG5cdFx0XHRyZXR1cm4gdHJhbnNsaXRlcmF0aW9ucy5majtcblx0XHRjYXNlIFwiZnJwXCI6XG5cdFx0XHRyZXR1cm4gdHJhbnNsaXRlcmF0aW9ucy5mcnA7XG5cdFx0Y2FzZSBcImZ1clwiOlxuXHRcdFx0cmV0dXJuIHRyYW5zbGl0ZXJhdGlvbnMuZnVyO1xuXHRcdGNhc2UgXCJmeVwiOlxuXHRcdFx0cmV0dXJuIHRyYW5zbGl0ZXJhdGlvbnMuZnk7XG5cdFx0Y2FzZSBcImdhXCI6XG5cdFx0XHRyZXR1cm4gdHJhbnNsaXRlcmF0aW9ucy5nYTtcblx0XHRjYXNlIFwiZ2RcIjpcblx0XHRcdHJldHVybiB0cmFuc2xpdGVyYXRpb25zLmdkO1xuXHRcdGNhc2UgXCJnbFwiOlxuXHRcdFx0cmV0dXJuIHRyYW5zbGl0ZXJhdGlvbnMuZ2w7XG5cdFx0Y2FzZSBcImduXCI6XG5cdFx0XHRyZXR1cm4gdHJhbnNsaXRlcmF0aW9ucy5nbjtcblx0XHRjYXNlIFwiZ3N3XCI6XG5cdFx0XHRyZXR1cm4gdHJhbnNsaXRlcmF0aW9ucy5nc3c7XG5cdFx0Y2FzZSBcImhhdFwiOlxuXHRcdFx0cmV0dXJuIHRyYW5zbGl0ZXJhdGlvbnMuaGF0O1xuXHRcdGNhc2UgXCJoYXdcIjpcblx0XHRcdHJldHVybiB0cmFuc2xpdGVyYXRpb25zLmhhdztcblx0XHRjYXNlIFwiaHJcIjpcblx0XHRcdHJldHVybiB0cmFuc2xpdGVyYXRpb25zLmhyO1xuXHRcdGNhc2UgXCJrYVwiOlxuXHRcdFx0cmV0dXJuIHRyYW5zbGl0ZXJhdGlvbnMua2E7XG5cdFx0Y2FzZSBcImthbFwiOlxuXHRcdFx0cmV0dXJuIHRyYW5zbGl0ZXJhdGlvbnMua2FsO1xuXHRcdGNhc2UgXCJraW5cIjpcblx0XHRcdHJldHVybiB0cmFuc2xpdGVyYXRpb25zLmtpbjtcblx0XHRjYXNlIFwibGJcIjpcblx0XHRcdHJldHVybiB0cmFuc2xpdGVyYXRpb25zLmxiO1xuXHRcdGNhc2UgXCJsaVwiOlxuXHRcdFx0cmV0dXJuIHRyYW5zbGl0ZXJhdGlvbnMubGk7XG5cdFx0Y2FzZSBcImxpblwiOlxuXHRcdFx0cmV0dXJuIHRyYW5zbGl0ZXJhdGlvbnMubGluO1xuXHRcdGNhc2UgXCJsdFwiOlxuXHRcdFx0cmV0dXJuIHRyYW5zbGl0ZXJhdGlvbnMubHQ7XG5cdFx0Y2FzZSBcIm1nXCI6XG5cdFx0XHRyZXR1cm4gdHJhbnNsaXRlcmF0aW9ucy5tZztcblx0XHRjYXNlIFwibWtcIjpcblx0XHRcdHJldHVybiB0cmFuc2xpdGVyYXRpb25zLm1rO1xuXHRcdGNhc2UgXCJtcmlcIjpcblx0XHRcdHJldHVybiB0cmFuc2xpdGVyYXRpb25zLm1yaTtcblx0XHRjYXNlIFwibXdsXCI6XG5cdFx0XHRyZXR1cm4gdHJhbnNsaXRlcmF0aW9ucy5td2w7XG5cdFx0Y2FzZSBcIm9jaVwiOlxuXHRcdFx0cmV0dXJuIHRyYW5zbGl0ZXJhdGlvbnMub2NpO1xuXHRcdGNhc2UgXCJvcm1cIjpcblx0XHRcdHJldHVybiB0cmFuc2xpdGVyYXRpb25zLm9ybTtcblx0XHRjYXNlIFwicHRcIjpcblx0XHRcdHJldHVybiB0cmFuc2xpdGVyYXRpb25zLnB0O1xuXHRcdGNhc2UgXCJyb2hcIjpcblx0XHRcdHJldHVybiB0cmFuc2xpdGVyYXRpb25zLnJvaDtcblx0XHRjYXNlIFwicnVwXCI6XG5cdFx0XHRyZXR1cm4gdHJhbnNsaXRlcmF0aW9ucy5ydXA7XG5cdFx0Y2FzZSBcInJvXCI6XG5cdFx0XHRyZXR1cm4gdHJhbnNsaXRlcmF0aW9ucy5ybztcblx0XHRjYXNlIFwidGxoXCI6XG5cdFx0XHRyZXR1cm4gdHJhbnNsaXRlcmF0aW9ucy50bGg7XG5cdFx0Y2FzZSBcInNrXCI6XG5cdFx0XHRyZXR1cm4gdHJhbnNsaXRlcmF0aW9ucy5zaztcblx0XHRjYXNlIFwic2xcIjpcblx0XHRcdHJldHVybiB0cmFuc2xpdGVyYXRpb25zLnNsO1xuXHRcdGNhc2UgXCJzcVwiOlxuXHRcdFx0cmV0dXJuIHRyYW5zbGl0ZXJhdGlvbnMuc3E7XG5cdFx0Y2FzZSBcImh1XCI6XG5cdFx0XHRyZXR1cm4gdHJhbnNsaXRlcmF0aW9ucy5odTtcblx0XHRjYXNlIFwic3JkXCI6XG5cdFx0XHRyZXR1cm4gdHJhbnNsaXRlcmF0aW9ucy5zcmQ7XG5cdFx0Y2FzZSBcInN6bFwiOlxuXHRcdFx0cmV0dXJuIHRyYW5zbGl0ZXJhdGlvbnMuc3psO1xuXHRcdGNhc2UgXCJ0YWhcIjpcblx0XHRcdHJldHVybiB0cmFuc2xpdGVyYXRpb25zLnRhaDtcblx0XHRjYXNlIFwidmVjXCI6XG5cdFx0XHRyZXR1cm4gdHJhbnNsaXRlcmF0aW9ucy52ZWM7XG5cdFx0Y2FzZSBcIndhXCI6XG5cdFx0XHRyZXR1cm4gdHJhbnNsaXRlcmF0aW9ucy53YTtcblx0XHRjYXNlIFwieW9yXCI6XG5cdFx0XHRyZXR1cm4gdHJhbnNsaXRlcmF0aW9ucy55b3I7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdHJldHVybiBbXTtcblx0fVxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG5cdHJldHVybiBbXG5cdFx0Ly8gV2hpdGVzcGFjZSBpcyBhbHdheXMgYSB3b3JkIGJvdW5kYXJ5LlxuXHRcdFwiIFwiLCBcIlxcXFxuXCIsIFwiXFxcXHJcIiwgXCJcXFxcdFwiLFxuXHRcdC8vIE5PLUJSRUFLIFNQQUNFLlxuXHRcdFwiXFx1MDBhMFwiLFxuXHRcdFwiwqBcIixcblxuXHRcdFwiLlwiLCBcIixcIiwgXCInXCIsIFwiKFwiLCBcIilcIiwgXCJcXFwiXCIsIFwiK1wiLCBcIi1cIiwgXCI7XCIsIFwiIVwiLCBcIj9cIiwgXCI6XCIsIFwiL1wiLCBcIsK7XCIsIFwiwqtcIiwgXCLigLlcIiwgXCLigLpcIiwgXCI8XCIsIFwiPlwiIF07XG59O1xuIiwiLyoqXG4gKiBUaHJvd3MgYW4gaW52YWxpZCB0eXBlIGVycm9yXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBzaG93IHdoZW4gdGhlIGVycm9yIGlzIHRocm93blxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gSW52YWxpZFR5cGVFcnJvciggbWVzc2FnZSApIHtcblx0RXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UoIHRoaXMsIHRoaXMuY29uc3RydWN0b3IgKTtcblx0dGhpcy5uYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lO1xuXHR0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xufTtcblxucmVxdWlyZSggXCJ1dGlsXCIgKS5pbmhlcml0cyggbW9kdWxlLmV4cG9ydHMsIEVycm9yICk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIE1pc3NpbmdBcmd1bWVudEVycm9yKCBtZXNzYWdlICkge1xuXHRFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSggdGhpcywgdGhpcy5jb25zdHJ1Y3RvciApO1xuXHR0aGlzLm5hbWUgPSB0aGlzLmNvbnN0cnVjdG9yLm5hbWU7XG5cdHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG59O1xuXG5yZXF1aXJlKCBcInV0aWxcIiApLmluaGVyaXRzKCBtb2R1bGUuZXhwb3J0cywgRXJyb3IgKTtcbiIsInZhciBpc1VuZGVmaW5lZCA9IHJlcXVpcmUoIFwibG9kYXNoL2lzVW5kZWZpbmVkXCIgKTtcblxuLyoqXG4gKiBTaG93cyBhbmQgZXJyb3IgdHJhY2Ugb2YgdGhlIGVycm9yIG1lc3NhZ2UgaW4gdGhlIGNvbnNvbGUgaWYgdGhlIGNvbnNvbGUgaXMgYXZhaWxhYmxlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBbZXJyb3JNZXNzYWdlPVwiXCJdIFRoZSBlcnJvciBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiBzaG93VHJhY2UoIGVycm9yTWVzc2FnZSApIHtcblx0aWYgKCBpc1VuZGVmaW5lZCggZXJyb3JNZXNzYWdlICkgKSB7XG5cdFx0ZXJyb3JNZXNzYWdlID0gXCJcIjtcblx0fVxuXG5cdGlmIChcblx0XHQhIGlzVW5kZWZpbmVkKCBjb25zb2xlICkgJiZcblx0XHQhIGlzVW5kZWZpbmVkKCBjb25zb2xlLnRyYWNlIClcblx0KSB7XG5cdFx0Y29uc29sZS50cmFjZSggZXJyb3JNZXNzYWdlICk7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdHNob3dUcmFjZTogc2hvd1RyYWNlLFxufTtcbiIsIi8qKlxuICogUmV0dXJucyByb3VuZGVkIG51bWJlciB0byBmaXggZmxvYXRpbmcgcG9pbnQgYnVnIGh0dHA6Ly9mbG9hdGluZy1wb2ludC1ndWkuZGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIHVucm91bmRlZCBudW1iZXJcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJvdW5kZWQgbnVtYmVyXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oIG51bWJlciApIHtcblx0aWYgKCBNYXRoLnJvdW5kKCBudW1iZXIgKSA9PT0gbnVtYmVyICkge1xuXHRcdHJldHVybiBNYXRoLnJvdW5kKCBudW1iZXIgKTtcblx0fVxuXG5cdHJldHVybiBNYXRoLnJvdW5kKCBudW1iZXIgKiAxMCApIC8gMTA7XG59O1xuIiwidmFyIGZpcnN0V29yZEV4Y2VwdGlvbnNFbmdsaXNoID0gcmVxdWlyZSggXCIuLi9yZXNlYXJjaGVzL2VuZ2xpc2gvZmlyc3RXb3JkRXhjZXB0aW9ucy5qc1wiICk7XG52YXIgZmlyc3RXb3JkRXhjZXB0aW9uc0dlcm1hbiA9IHJlcXVpcmUoIFwiLi4vcmVzZWFyY2hlcy9nZXJtYW4vZmlyc3RXb3JkRXhjZXB0aW9ucy5qc1wiICk7XG52YXIgZmlyc3RXb3JkRXhjZXB0aW9uc1NwYW5pc2ggPSByZXF1aXJlKCBcIi4uL3Jlc2VhcmNoZXMvc3BhbmlzaC9maXJzdFdvcmRFeGNlcHRpb25zLmpzXCIgKTtcbnZhciBmaXJzdFdvcmRFeGNlcHRpb25zRnJlbmNoID0gcmVxdWlyZSggXCIuLi9yZXNlYXJjaGVzL2ZyZW5jaC9maXJzdFdvcmRFeGNlcHRpb25zLmpzXCIgKTtcblxudmFyIGdldExhbmd1YWdlID0gcmVxdWlyZSggXCIuL2dldExhbmd1YWdlLmpzXCIgKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiggbG9jYWxlICkge1xuXHRzd2l0Y2goIGdldExhbmd1YWdlKCBsb2NhbGUgKSApIHtcblx0XHRjYXNlIFwiZGVcIjpcblx0XHRcdHJldHVybiBmaXJzdFdvcmRFeGNlcHRpb25zR2VybWFuO1xuXHRcdGNhc2UgXCJmclwiOlxuXHRcdFx0cmV0dXJuIGZpcnN0V29yZEV4Y2VwdGlvbnNGcmVuY2g7XG5cdFx0Y2FzZSBcImVzXCI6XG5cdFx0XHRyZXR1cm4gZmlyc3RXb3JkRXhjZXB0aW9uc1NwYW5pc2g7XG5cdFx0ZGVmYXVsdDpcblx0XHRjYXNlIFwiZW5cIjpcblx0XHRcdHJldHVybiBmaXJzdFdvcmRFeGNlcHRpb25zRW5nbGlzaDtcblx0fVxufTtcbiIsIi8qKlxuICogVGhlIGZ1bmN0aW9uIGdldHRpbmcgdGhlIGxhbmd1YWdlIHBhcnQgb2YgdGhlIGxvY2FsZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbG9jYWxlIFRoZSBsb2NhbGUuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgbGFuZ3VhZ2UgcGFydCBvZiB0aGUgbG9jYWxlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCBsb2NhbGUgKSB7XG5cdHJldHVybiBsb2NhbGUuc3BsaXQoIFwiX1wiIClbIDAgXTtcbn07XG4iLCJ2YXIgdHJhbnNpdGlvbldvcmRzRW5nbGlzaCA9IHJlcXVpcmUoIFwiLi4vcmVzZWFyY2hlcy9lbmdsaXNoL3RyYW5zaXRpb25Xb3Jkcy5qc1wiICk7XG52YXIgdHdvUGFydFRyYW5zaXRpb25Xb3Jkc0VuZ2xpc2ggPSByZXF1aXJlKCBcIi4uL3Jlc2VhcmNoZXMvZW5nbGlzaC90d29QYXJ0VHJhbnNpdGlvbldvcmRzLmpzXCIgKTtcbnZhciB0cmFuc2l0aW9uV29yZHNHZXJtYW4gPSByZXF1aXJlKCBcIi4uL3Jlc2VhcmNoZXMvZ2VybWFuL3RyYW5zaXRpb25Xb3Jkcy5qc1wiICk7XG52YXIgdHdvUGFydFRyYW5zaXRpb25Xb3Jkc0dlcm1hbiA9IHJlcXVpcmUoIFwiLi4vcmVzZWFyY2hlcy9nZXJtYW4vdHdvUGFydFRyYW5zaXRpb25Xb3Jkcy5qc1wiICk7XG52YXIgdHJhbnNpdGlvbldvcmRzRnJlbmNoID0gcmVxdWlyZSggXCIuLi9yZXNlYXJjaGVzL2ZyZW5jaC90cmFuc2l0aW9uV29yZHMuanNcIiApO1xudmFyIHR3b1BhcnRUcmFuc2l0aW9uV29yZHNGcmVuY2ggPSByZXF1aXJlKCBcIi4uL3Jlc2VhcmNoZXMvZnJlbmNoL3R3b1BhcnRUcmFuc2l0aW9uV29yZHMuanNcIiApO1xudmFyIHRyYW5zaXRpb25Xb3Jkc1NwYW5pc2ggPSByZXF1aXJlKCBcIi4uL3Jlc2VhcmNoZXMvc3BhbmlzaC90cmFuc2l0aW9uV29yZHMuanNcIiApO1xudmFyIHR3b1BhcnRUcmFuc2l0aW9uV29yZHNTcGFuaXNoID0gcmVxdWlyZSggXCIuLi9yZXNlYXJjaGVzL3NwYW5pc2gvdHdvUGFydFRyYW5zaXRpb25Xb3Jkcy5qc1wiICk7XG5cbnZhciBnZXRMYW5ndWFnZSA9IHJlcXVpcmUoIFwiLi9nZXRMYW5ndWFnZS5qc1wiICk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oIGxvY2FsZSApIHtcblx0c3dpdGNoKCBnZXRMYW5ndWFnZSggbG9jYWxlICkgKSB7XG5cdFx0Y2FzZSBcImRlXCI6XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHR0cmFuc2l0aW9uV29yZHM6IHRyYW5zaXRpb25Xb3Jkc0dlcm1hbixcblx0XHRcdFx0dHdvUGFydFRyYW5zaXRpb25Xb3JkczogdHdvUGFydFRyYW5zaXRpb25Xb3Jkc0dlcm1hbixcblx0XHRcdH07XG5cdFx0Y2FzZSBcImVzXCI6XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHR0cmFuc2l0aW9uV29yZHM6IHRyYW5zaXRpb25Xb3Jkc1NwYW5pc2gsXG5cdFx0XHRcdHR3b1BhcnRUcmFuc2l0aW9uV29yZHM6IHR3b1BhcnRUcmFuc2l0aW9uV29yZHNTcGFuaXNoLFxuXHRcdFx0fTtcblx0XHRjYXNlIFwiZnJcIjpcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHRyYW5zaXRpb25Xb3JkczogdHJhbnNpdGlvbldvcmRzRnJlbmNoLFxuXHRcdFx0XHR0d29QYXJ0VHJhbnNpdGlvbldvcmRzOiB0d29QYXJ0VHJhbnNpdGlvbldvcmRzRnJlbmNoLFxuXHRcdFx0fTtcblx0XHRkZWZhdWx0OlxuXHRcdGNhc2UgXCJlblwiOlxuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0dHJhbnNpdGlvbldvcmRzOiB0cmFuc2l0aW9uV29yZHNFbmdsaXNoLFxuXHRcdFx0XHR0d29QYXJ0VHJhbnNpdGlvbldvcmRzOiB0d29QYXJ0VHJhbnNpdGlvbldvcmRzRW5nbGlzaCxcblx0XHRcdH07XG5cdH1cbn07XG4iLCJ2YXIgYmxvY2tFbGVtZW50cyA9IFsgXCJhZGRyZXNzXCIsIFwiYXJ0aWNsZVwiLCBcImFzaWRlXCIsIFwiYmxvY2txdW90ZVwiLCBcImNhbnZhc1wiLCBcImRkXCIsIFwiZGl2XCIsIFwiZGxcIiwgXCJmaWVsZHNldFwiLCBcImZpZ2NhcHRpb25cIixcblx0XCJmaWd1cmVcIiwgXCJmb290ZXJcIiwgXCJmb3JtXCIsIFwiaDFcIiwgXCJoMlwiLCBcImgzXCIsIFwiaDRcIiwgXCJoNVwiLCBcImg2XCIsIFwiaGVhZGVyXCIsIFwiaGdyb3VwXCIsIFwiaHJcIiwgXCJsaVwiLCBcIm1haW5cIiwgXCJuYXZcIixcblx0XCJub3NjcmlwdFwiLCBcIm9sXCIsIFwib3V0cHV0XCIsIFwicFwiLCBcInByZVwiLCBcInNlY3Rpb25cIiwgXCJ0YWJsZVwiLCBcInRmb290XCIsIFwidWxcIiwgXCJ2aWRlb1wiIF07XG52YXIgaW5saW5lRWxlbWVudHMgPSBbIFwiYlwiLCBcImJpZ1wiLCBcImlcIiwgXCJzbWFsbFwiLCBcInR0XCIsIFwiYWJiclwiLCBcImFjcm9ueW1cIiwgXCJjaXRlXCIsIFwiY29kZVwiLCBcImRmblwiLCBcImVtXCIsIFwia2JkXCIsIFwic3Ryb25nXCIsXG5cdFwic2FtcFwiLCBcInRpbWVcIiwgXCJ2YXJcIiwgXCJhXCIsIFwiYmRvXCIsIFwiYnJcIiwgXCJpbWdcIiwgXCJtYXBcIiwgXCJvYmplY3RcIiwgXCJxXCIsIFwic2NyaXB0XCIsIFwic3BhblwiLCBcInN1YlwiLCBcInN1cFwiLCBcImJ1dHRvblwiLFxuXHRcImlucHV0XCIsIFwibGFiZWxcIiwgXCJzZWxlY3RcIiwgXCJ0ZXh0YXJlYVwiIF07XG5cbnZhciBibG9ja0VsZW1lbnRzUmVnZXggPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBibG9ja0VsZW1lbnRzLmpvaW4oIFwifFwiICkgKyBcIikkXCIsIFwiaVwiICk7XG52YXIgaW5saW5lRWxlbWVudHNSZWdleCA9IG5ldyBSZWdFeHAoIFwiXihcIiArIGlubGluZUVsZW1lbnRzLmpvaW4oIFwifFwiICkgKyBcIikkXCIsIFwiaVwiICk7XG5cbnZhciBibG9ja0VsZW1lbnRTdGFydFJlZ2V4ID0gbmV3IFJlZ0V4cCggXCJePChcIiArIGJsb2NrRWxlbWVudHMuam9pbiggXCJ8XCIgKSArIFwiKVtePl0qPz4kXCIsIFwiaVwiICk7XG52YXIgYmxvY2tFbGVtZW50RW5kUmVnZXggPSBuZXcgUmVnRXhwKCBcIl48LyhcIiArIGJsb2NrRWxlbWVudHMuam9pbiggXCJ8XCIgKSArIFwiKVtePl0qPz4kXCIsIFwiaVwiICk7XG5cbnZhciBpbmxpbmVFbGVtZW50U3RhcnRSZWdleCA9IG5ldyBSZWdFeHAoIFwiXjwoXCIgKyBpbmxpbmVFbGVtZW50cy5qb2luKCBcInxcIiApICsgXCIpW14+XSo+JFwiLCBcImlcIiApO1xudmFyIGlubGluZUVsZW1lbnRFbmRSZWdleCA9IG5ldyBSZWdFeHAoIFwiXjwvKFwiICsgaW5saW5lRWxlbWVudHMuam9pbiggXCJ8XCIgKSArIFwiKVtePl0qPiRcIiwgXCJpXCIgKTtcblxudmFyIG90aGVyRWxlbWVudFN0YXJ0UmVnZXggPSAvXjwoW14+XFxzXFwvXSspW14+XSo+JC87XG52YXIgb3RoZXJFbGVtZW50RW5kUmVnZXggPSAvXjxcXC8oW14+XFxzXSspW14+XSo+JC87XG5cbnZhciBjb250ZW50UmVnZXggPSAvXltePF0rJC87XG52YXIgZ3JlYXRlclRoYW5Db250ZW50UmVnZXggPSAvXjxbXj48XSokLztcblxudmFyIGNvbW1lbnRSZWdleCA9IC88IS0tKC58W1xcclxcbl0pKj8tLT4vZztcblxudmFyIGNvcmUgPSByZXF1aXJlKCBcInRva2VuaXplcjIvY29yZVwiICk7XG52YXIgZm9yRWFjaCA9IHJlcXVpcmUoIFwibG9kYXNoL2ZvckVhY2hcIiApO1xudmFyIG1lbW9pemUgPSByZXF1aXJlKCBcImxvZGFzaC9tZW1vaXplXCIgKTtcblxudmFyIHRva2VucyA9IFtdO1xudmFyIGh0bWxCbG9ja1Rva2VuaXplcjtcblxuLyoqXG4gKiBDcmVhdGVzIGEgdG9rZW5pemVyIHRvIHRva2VuaXplIEhUTUwgaW50byBibG9ja3MuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVRva2VuaXplcigpIHtcblx0dG9rZW5zID0gW107XG5cblx0aHRtbEJsb2NrVG9rZW5pemVyID0gY29yZSggZnVuY3Rpb24oIHRva2VuICkge1xuXHRcdHRva2Vucy5wdXNoKCB0b2tlbiApO1xuXHR9ICk7XG5cblx0aHRtbEJsb2NrVG9rZW5pemVyLmFkZFJ1bGUoIGNvbnRlbnRSZWdleCwgXCJjb250ZW50XCIgKTtcblx0aHRtbEJsb2NrVG9rZW5pemVyLmFkZFJ1bGUoIGdyZWF0ZXJUaGFuQ29udGVudFJlZ2V4LCBcImdyZWF0ZXItdGhhbi1zaWduLWNvbnRlbnRcIiApO1xuXG5cdGh0bWxCbG9ja1Rva2VuaXplci5hZGRSdWxlKCBibG9ja0VsZW1lbnRTdGFydFJlZ2V4LCBcImJsb2NrLXN0YXJ0XCIgKTtcblx0aHRtbEJsb2NrVG9rZW5pemVyLmFkZFJ1bGUoIGJsb2NrRWxlbWVudEVuZFJlZ2V4LCBcImJsb2NrLWVuZFwiICk7XG5cdGh0bWxCbG9ja1Rva2VuaXplci5hZGRSdWxlKCBpbmxpbmVFbGVtZW50U3RhcnRSZWdleCwgXCJpbmxpbmUtc3RhcnRcIiApO1xuXHRodG1sQmxvY2tUb2tlbml6ZXIuYWRkUnVsZSggaW5saW5lRWxlbWVudEVuZFJlZ2V4LCBcImlubGluZS1lbmRcIiApO1xuXG5cdGh0bWxCbG9ja1Rva2VuaXplci5hZGRSdWxlKCBvdGhlckVsZW1lbnRTdGFydFJlZ2V4LCBcIm90aGVyLWVsZW1lbnQtc3RhcnRcIiApO1xuXHRodG1sQmxvY2tUb2tlbml6ZXIuYWRkUnVsZSggb3RoZXJFbGVtZW50RW5kUmVnZXgsIFwib3RoZXItZWxlbWVudC1lbmRcIiApO1xufVxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIGdpdmVuIGVsZW1lbnQgbmFtZSBpcyBhIGJsb2NrIGVsZW1lbnQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGh0bWxFbGVtZW50TmFtZSBUaGUgbmFtZSBvZiB0aGUgSFRNTCBlbGVtZW50LlxuICogQHJldHVybnMge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IGl0IGlzIGEgYmxvY2sgZWxlbWVudC5cbiAqL1xuZnVuY3Rpb24gaXNCbG9ja0VsZW1lbnQoIGh0bWxFbGVtZW50TmFtZSApIHtcblx0cmV0dXJuIGJsb2NrRWxlbWVudHNSZWdleC50ZXN0KCBodG1sRWxlbWVudE5hbWUgKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBnaXZlbiBlbGVtZW50IG5hbWUgaXMgYW4gaW5saW5lIGVsZW1lbnQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGh0bWxFbGVtZW50TmFtZSBUaGUgbmFtZSBvZiB0aGUgSFRNTCBlbGVtZW50LlxuICogQHJldHVybnMge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IGl0IGlzIGFuIGlubGluZSBlbGVtZW50LlxuICovXG5mdW5jdGlvbiBpc0lubGluZUVsZW1lbnQoIGh0bWxFbGVtZW50TmFtZSApIHtcblx0cmV0dXJuIGlubGluZUVsZW1lbnRzUmVnZXgudGVzdCggaHRtbEVsZW1lbnROYW1lICk7XG59XG5cbi8qKlxuICogU3BsaXRzIGEgdGV4dCBpbnRvIGJsb2NrcyBiYXNlZCBvbiBIVE1MIGJsb2NrIGVsZW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IFRoZSB0ZXh0IHRvIHNwbGl0LlxuICogQHJldHVybnMge0FycmF5fSBBIGxpc3Qgb2YgYmxvY2tzIGJhc2VkIG9uIEhUTUwgYmxvY2sgZWxlbWVudHMuXG4gKi9cbmZ1bmN0aW9uIGdldEJsb2NrcyggdGV4dCApIHtcblx0dmFyIGJsb2NrcyA9IFtdLCBkZXB0aCA9IDAsXG5cdFx0YmxvY2tTdGFydFRhZyA9IFwiXCIsXG5cdFx0Y3VycmVudEJsb2NrID0gXCJcIixcblx0XHRibG9ja0VuZFRhZyA9IFwiXCI7XG5cblx0Ly8gUmVtb3ZlIGFsbCBjb21tZW50cyBiZWNhdXNlIGl0IGlzIHZlcnkgaGFyZCB0byB0b2tlbml6ZSB0aGVtLlxuXHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCBjb21tZW50UmVnZXgsIFwiXCIgKTtcblxuXHRjcmVhdGVUb2tlbml6ZXIoKTtcblx0aHRtbEJsb2NrVG9rZW5pemVyLm9uVGV4dCggdGV4dCApO1xuXG5cdGh0bWxCbG9ja1Rva2VuaXplci5lbmQoKTtcblxuXHRmb3JFYWNoKCB0b2tlbnMsIGZ1bmN0aW9uKCB0b2tlbiwgaSApIHtcblx0XHR2YXIgbmV4dFRva2VuID0gdG9rZW5zWyBpICsgMSBdO1xuXG5cdFx0c3dpdGNoICggdG9rZW4udHlwZSApIHtcblxuXHRcdFx0Y2FzZSBcImNvbnRlbnRcIjpcblx0XHRcdGNhc2UgXCJncmVhdGVyLXRoYW4tc2lnbi1jb250ZW50XCI6XG5cdFx0XHRjYXNlIFwiaW5saW5lLXN0YXJ0XCI6XG5cdFx0XHRjYXNlIFwiaW5saW5lLWVuZFwiOlxuXHRcdFx0Y2FzZSBcIm90aGVyLXRhZ1wiOlxuXHRcdFx0Y2FzZSBcIm90aGVyLWVsZW1lbnQtc3RhcnRcIjpcblx0XHRcdGNhc2UgXCJvdGhlci1lbGVtZW50LWVuZFwiOlxuXHRcdFx0Y2FzZSBcImdyZWF0ZXIgdGhhbiBzaWduXCI6XG5cdFx0XHRcdGlmICggISBuZXh0VG9rZW4gfHwgKCBkZXB0aCA9PT0gMCAmJiAoIG5leHRUb2tlbi50eXBlID09PSBcImJsb2NrLXN0YXJ0XCIgfHwgbmV4dFRva2VuLnR5cGUgPT09IFwiYmxvY2stZW5kXCIgKSApICkge1xuXHRcdFx0XHRcdGN1cnJlbnRCbG9jayArPSB0b2tlbi5zcmM7XG5cblx0XHRcdFx0XHRibG9ja3MucHVzaCggY3VycmVudEJsb2NrICk7XG5cdFx0XHRcdFx0YmxvY2tTdGFydFRhZyA9IFwiXCI7XG5cdFx0XHRcdFx0Y3VycmVudEJsb2NrID0gXCJcIjtcblx0XHRcdFx0XHRibG9ja0VuZFRhZyA9IFwiXCI7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y3VycmVudEJsb2NrICs9IHRva2VuLnNyYztcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBcImJsb2NrLXN0YXJ0XCI6XG5cdFx0XHRcdGlmICggZGVwdGggIT09IDAgKSB7XG5cdFx0XHRcdFx0aWYgKCBjdXJyZW50QmxvY2sudHJpbSgpICE9PSBcIlwiICkge1xuXHRcdFx0XHRcdFx0YmxvY2tzLnB1c2goIGN1cnJlbnRCbG9jayApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjdXJyZW50QmxvY2sgPSBcIlwiO1xuXHRcdFx0XHRcdGJsb2NrRW5kVGFnID0gXCJcIjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlcHRoKys7XG5cdFx0XHRcdGJsb2NrU3RhcnRUYWcgPSB0b2tlbi5zcmM7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIFwiYmxvY2stZW5kXCI6XG5cdFx0XHRcdGRlcHRoLS07XG5cdFx0XHRcdGJsb2NrRW5kVGFnID0gdG9rZW4uc3JjO1xuXG5cdFx0XHRcdC8qXG5cdFx0XHRcdCAqIFdlIHRyeSB0byBtYXRjaCB0aGUgbW9zdCBkZWVwIGJsb2NrcyBzbyBkaXNjYXJkIGFueSBvdGhlciBibG9ja3MgdGhhdCBoYXZlIGJlZW4gc3RhcnRlZCBidXQgbm90XG5cdFx0XHRcdCAqIGZpbmlzaGVkLlxuXHRcdFx0XHQgKi9cblx0XHRcdFx0aWYgKCBcIlwiICE9PSBibG9ja1N0YXJ0VGFnICYmIFwiXCIgIT09IGJsb2NrRW5kVGFnICkge1xuXHRcdFx0XHRcdGJsb2Nrcy5wdXNoKCBibG9ja1N0YXJ0VGFnICsgY3VycmVudEJsb2NrICsgYmxvY2tFbmRUYWcgKTtcblx0XHRcdFx0fSBlbHNlIGlmICggXCJcIiAhPT0gY3VycmVudEJsb2NrLnRyaW0oKSApIHtcblx0XHRcdFx0XHRibG9ja3MucHVzaCggY3VycmVudEJsb2NrICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0YmxvY2tTdGFydFRhZyA9IFwiXCI7XG5cdFx0XHRcdGN1cnJlbnRCbG9jayA9IFwiXCI7XG5cdFx0XHRcdGJsb2NrRW5kVGFnID0gXCJcIjtcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlcyBIVE1MIHdpdGggdG9vIG1hbnkgY2xvc2luZyB0YWdzLlxuXHRcdGlmICggZGVwdGggPCAwICkge1xuXHRcdFx0ZGVwdGggPSAwO1xuXHRcdH1cblx0fSApO1xuXG5cdHJldHVybiBibG9ja3M7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRibG9ja0VsZW1lbnRzOiBibG9ja0VsZW1lbnRzLFxuXHRpbmxpbmVFbGVtZW50czogaW5saW5lRWxlbWVudHMsXG5cdGlzQmxvY2tFbGVtZW50OiBpc0Jsb2NrRWxlbWVudCxcblx0aXNJbmxpbmVFbGVtZW50OiBpc0lubGluZUVsZW1lbnQsXG5cdGdldEJsb2NrczogbWVtb2l6ZSggZ2V0QmxvY2tzICksXG59O1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYG5gIGlzIGJldHdlZW4gYHN0YXJ0YCBhbmQgdXAgdG8sIGJ1dCBub3QgaW5jbHVkaW5nLCBgc3RhcnRgLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjaGVjay5cbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgbnVtYmVyYCBpcyBpbiB0aGUgcmFuZ2UsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaW5SYW5nZUVuZEluY2x1c2l2ZSggbnVtYmVyLCBzdGFydCwgZW5kICkge1xuXHRyZXR1cm4gbnVtYmVyID4gc3RhcnQgJiYgbnVtYmVyIDw9IGVuZDtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYG5gIGlzIGJldHdlZW4gYHN0YXJ0YCBhbmQgdXAgdG8sIGJ1dCBub3QgaW5jbHVkaW5nLCBgZW5kYC5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2hlY2suXG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG51bWJlcmAgaXMgaW4gdGhlIHJhbmdlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGluUmFuZ2VTdGFydEluY2x1c2l2ZSggbnVtYmVyLCBzdGFydCwgZW5kICkge1xuXHRyZXR1cm4gbnVtYmVyID49IHN0YXJ0ICYmIG51bWJlciA8IGVuZDtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYG5gIGlzIGJldHdlZW4gYHN0YXJ0YCBhbmQgdXAgdG8sIGJ1dCBub3QgaW5jbHVkaW5nLCBgc3RhcnRgLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjaGVjay5cbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgbnVtYmVyYCBpcyBpbiB0aGUgcmFuZ2UsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaW5SYW5nZSggbnVtYmVyLCBzdGFydCwgZW5kICkge1xuXHRyZXR1cm4gaW5SYW5nZUVuZEluY2x1c2l2ZSggbnVtYmVyLCBzdGFydCwgZW5kICk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRpblJhbmdlOiBpblJhbmdlLFxuXHRpblJhbmdlU3RhcnRJbmNsdXNpdmU6IGluUmFuZ2VTdGFydEluY2x1c2l2ZSxcblx0aW5SYW5nZUVuZEluY2x1c2l2ZTogaW5SYW5nZUVuZEluY2x1c2l2ZSxcbn07XG4iLCJ2YXIgU3lsbGFibGVDb3VudFN0ZXAgPSByZXF1aXJlKCBcIi4vc3lsbGFibGVDb3VudFN0ZXAuanNcIiApO1xuXG52YXIgaXNVbmRlZmluZWQgPSByZXF1aXJlKCBcImxvZGFzaC9pc1VuZGVmaW5lZFwiICk7XG52YXIgZm9yRWFjaCA9IHJlcXVpcmUoIFwibG9kYXNoL2ZvckVhY2hcIiApO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBzeWxsYWJsZSBjb3VudCBpdGVyYXRvci5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIFRoZSBjb25maWcgb2JqZWN0IGNvbnRhaW5pbmcgYW4gYXJyYXkgd2l0aCBzeWxsYWJsZSBleGNsdXNpb25zLlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnZhciBTeWxsYWJsZUNvdW50SXRlcmF0b3IgPSBmdW5jdGlvbiggY29uZmlnICkge1xuXHR0aGlzLmNvdW50U3RlcHMgPSBbXTtcblx0aWYgKCAhIGlzVW5kZWZpbmVkKCBjb25maWcgKSApIHtcblx0XHR0aGlzLmNyZWF0ZVN5bGxhYmxlQ291bnRTdGVwcyggY29uZmlnLmRldmlhdGlvbnMudm93ZWxzICk7XG5cdH1cbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN5bGxhYmxlIGNvdW50IHN0ZXAgb2JqZWN0IGZvciBlYWNoIGV4Y2x1c2lvbi5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gc3lsbGFibGVDb3VudHMgVGhlIG9iamVjdCBjb250YWluaW5nIGFsbCBleGNsdXNpb24gc3lsbGFibGVzIGluY2x1ZGluZyB0aGUgbXVsdGlwbGllcnMuXG4gKi9cblN5bGxhYmxlQ291bnRJdGVyYXRvci5wcm90b3R5cGUuY3JlYXRlU3lsbGFibGVDb3VudFN0ZXBzID0gZnVuY3Rpb24oIHN5bGxhYmxlQ291bnRzICkge1xuXHRmb3JFYWNoKCBzeWxsYWJsZUNvdW50cywgZnVuY3Rpb24oIHN5bGxhYmxlQ291bnRTdGVwICkge1xuXHRcdHRoaXMuY291bnRTdGVwcy5wdXNoKCBuZXcgU3lsbGFibGVDb3VudFN0ZXAoIHN5bGxhYmxlQ291bnRTdGVwICkgKTtcblx0fS5iaW5kKCB0aGlzICkgKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBhbGwgYXZhaWxhYmxlIGNvdW50IHN0ZXBzLlxuICpcbiAqIEByZXR1cm5zIHtBcnJheX0gQWxsIGF2YWlsYWJsZSBjb3VudCBzdGVwcy5cbiAqL1xuU3lsbGFibGVDb3VudEl0ZXJhdG9yLnByb3RvdHlwZS5nZXRBdmFpbGFibGVTeWxsYWJsZUNvdW50U3RlcHMgPSBmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXMuY291bnRTdGVwcztcbn07XG5cbi8qKlxuICogQ291bnRzIHRoZSBzeWxsYWJsZXMgZm9yIGFsbCB0aGUgc3RlcHMgYW5kIHJldHVybnMgdGhlIHRvdGFsIHN5bGxhYmxlIGNvdW50LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB3b3JkIFRoZSB3b3JkIHRvIGNvdW50IHN5bGxhYmxlcyBpbi5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBudW1iZXIgb2Ygc3lsbGFibGVzIGZvdW5kIGJhc2VkIG9uIGV4Y2x1c2lvbnMuXG4gKi9cblN5bGxhYmxlQ291bnRJdGVyYXRvci5wcm90b3R5cGUuY291bnRTeWxsYWJsZXMgPSBmdW5jdGlvbiggd29yZCApIHtcblx0dmFyIHN5bGxhYmxlQ291bnQgPSAwO1xuXHRmb3JFYWNoKCB0aGlzLmNvdW50U3RlcHMsIGZ1bmN0aW9uKCBzdGVwICkge1xuXHRcdHN5bGxhYmxlQ291bnQgKz0gc3RlcC5jb3VudFN5bGxhYmxlcyggd29yZCApO1xuXHR9ICk7XG5cdHJldHVybiBzeWxsYWJsZUNvdW50O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTeWxsYWJsZUNvdW50SXRlcmF0b3I7XG4iLCJ2YXIgaXNVbmRlZmluZWQgPSByZXF1aXJlKCBcImxvZGFzaC9pc1VuZGVmaW5lZFwiICk7XG5cbnZhciBhcnJheVRvUmVnZXggPSByZXF1aXJlKCBcIi4uL3N0cmluZ1Byb2Nlc3NpbmcvY3JlYXRlUmVnZXhGcm9tQXJyYXkuanNcIiApO1xuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBsYW5ndWFnZSBzeWxsYWJsZSByZWdleCB0aGF0IGNvbnRhaW5zIGEgcmVnZXggZm9yIG1hdGNoaW5nIHN5bGxhYmxlIGV4Y2x1c2lvbi5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gc3lsbGFibGVSZWdleCBUaGUgb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHN5bGxhYmxlIGV4Y2x1c2lvbnMuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xudmFyIFN5bGxhYmxlQ291bnRTdGVwID0gZnVuY3Rpb24oIHN5bGxhYmxlUmVnZXggKSB7XG5cdHRoaXMuX2hhc1JlZ2V4ID0gZmFsc2U7XG5cdHRoaXMuX3JlZ2V4ID0gXCJcIjtcblx0dGhpcy5fbXVsdGlwbGllciA9IFwiXCI7XG5cdHRoaXMuY3JlYXRlUmVnZXgoIHN5bGxhYmxlUmVnZXggKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBpZiBhIHZhbGlkIHJlZ2V4IGhhcyBiZWVuIHNldC5cbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBhIHJlZ2V4IGhhcyBiZWVuIHNldCwgZmFsc2UgaWYgbm90LlxuICovXG5TeWxsYWJsZUNvdW50U3RlcC5wcm90b3R5cGUuaGFzUmVnZXggPSBmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXMuX2hhc1JlZ2V4O1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgcmVnZXggYmFzZWQgb24gdGhlIGdpdmVuIHN5bGxhYmxlIGV4Y2x1c2lvbnMsIGFuZCBzZXRzIHRoZSBtdWx0aXBsaWVyIHRvIHVzZS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gc3lsbGFibGVSZWdleCBUaGUgb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHN5bGxhYmxlIGV4Y2x1c2lvbnMgYW5kIG11bHRpcGxpZXIuXG4gKi9cblN5bGxhYmxlQ291bnRTdGVwLnByb3RvdHlwZS5jcmVhdGVSZWdleCA9IGZ1bmN0aW9uKCBzeWxsYWJsZVJlZ2V4ICkge1xuXHRpZiAoICEgaXNVbmRlZmluZWQoIHN5bGxhYmxlUmVnZXggKSAmJiAhIGlzVW5kZWZpbmVkKCBzeWxsYWJsZVJlZ2V4LmZyYWdtZW50cyApICkge1xuXHRcdHRoaXMuX2hhc1JlZ2V4ID0gdHJ1ZTtcblx0XHR0aGlzLl9yZWdleCA9IGFycmF5VG9SZWdleCggc3lsbGFibGVSZWdleC5mcmFnbWVudHMsIHRydWUgKTtcblx0XHR0aGlzLl9tdWx0aXBsaWVyID0gc3lsbGFibGVSZWdleC5jb3VudE1vZGlmaWVyO1xuXHR9XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIHN0b3JlZCByZWd1bGFyIGV4cHJlc3Npb24uXG4gKlxuICogQHJldHVybnMge1JlZ0V4cH0gVGhlIHN0b3JlZCByZWd1bGFyIGV4cHJlc3Npb24uXG4gKi9cblN5bGxhYmxlQ291bnRTdGVwLnByb3RvdHlwZS5nZXRSZWdleCA9IGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcy5fcmVnZXg7XG59O1xuXG4vKipcbiAqIE1hdGNoZXMgc3lsbGFibGUgZXhjbHVzaW9ucyBpbiBhIGdpdmVuIHdvcmQgYW5kIHRoZSByZXR1cm5zIHRoZSBudW1iZXIgZm91bmQgbXVsdGlwbGllZCB3aXRoIHRoZVxuICogZ2l2ZW4gbXVsdGlwbGllci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gd29yZCBUaGUgd29yZCB0byBtYXRjaCBmb3Igc3lsbGFibGUgZXhjbHVzaW9ucy5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBhbW91bnQgb2Ygc3lsbGFibGVzIGZvdW5kLlxuICovXG5TeWxsYWJsZUNvdW50U3RlcC5wcm90b3R5cGUuY291bnRTeWxsYWJsZXMgPSBmdW5jdGlvbiggd29yZCApIHtcblx0aWYgKCB0aGlzLl9oYXNSZWdleCApIHtcblx0XHR2YXIgbWF0Y2ggPSB3b3JkLm1hdGNoKCB0aGlzLl9yZWdleCApIHx8IFtdO1xuXHRcdHJldHVybiBtYXRjaC5sZW5ndGggKiB0aGlzLl9tdWx0aXBsaWVyO1xuXHR9XG5cdHJldHVybiAwO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTeWxsYWJsZUNvdW50U3RlcDtcbiIsIi8qKlxuICogTWFya3MgYSB0ZXh0IHdpdGggSFRNTCB0YWdzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQgVGhlIHVubWFya2VkIHRleHQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgbWFya2VkIHRleHQuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oIHRleHQgKSB7XG5cdHJldHVybiBcIjx5b2FzdG1hcmsgY2xhc3M9J3lvYXN0LXRleHQtbWFyayc+XCIgKyB0ZXh0ICsgXCI8L3lvYXN0bWFyaz5cIjtcbn07XG4iLCJ2YXIgdW5pcUJ5ID0gcmVxdWlyZSggXCJsb2Rhc2gvdW5pcUJ5XCIgKTtcblxuLyoqXG4gKiBSZW1vdmVzIGR1cGxpY2F0ZSBtYXJrcyBmcm9tIGFuIGFycmF5XG4gKlxuICogQHBhcmFtIHtBcnJheX0gbWFya3MgVGhlIG1hcmtzIHRvIHJlbW92ZSBkdXBsaWNhdGlvbnMgZnJvbVxuICogQHJldHVybnMge0FycmF5fSBBIGxpc3Qgb2YgZGUtZHVwbGljYXRlZCBtYXJrcy5cbiAqL1xuZnVuY3Rpb24gcmVtb3ZlRHVwbGljYXRlTWFya3MoIG1hcmtzICkge1xuXHRyZXR1cm4gdW5pcUJ5KCBtYXJrcywgZnVuY3Rpb24oIG1hcmsgKSB7XG5cdFx0cmV0dXJuIG1hcmsuZ2V0T3JpZ2luYWwoKTtcblx0fSApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlbW92ZUR1cGxpY2F0ZU1hcmtzO1xuIiwidmFyIG1lcmdlID0gcmVxdWlyZSggXCJsb2Rhc2gvbWVyZ2VcIiApO1xudmFyIEludmFsaWRUeXBlRXJyb3IgPSByZXF1aXJlKCBcIi4vZXJyb3JzL2ludmFsaWRUeXBlXCIgKTtcbnZhciBNaXNzaW5nQXJndW1lbnQgPSByZXF1aXJlKCBcIi4vZXJyb3JzL21pc3NpbmdBcmd1bWVudFwiICk7XG52YXIgaXNVbmRlZmluZWQgPSByZXF1aXJlKCBcImxvZGFzaC9pc1VuZGVmaW5lZFwiICk7XG52YXIgaXNFbXB0eSA9IHJlcXVpcmUoIFwibG9kYXNoL2lzRW1wdHlcIiApO1xuXG4vLyBSZXNlYXJjaGVzXG52YXIgd29yZENvdW50SW5UZXh0ID0gcmVxdWlyZSggXCIuL3Jlc2VhcmNoZXMvd29yZENvdW50SW5UZXh0LmpzXCIgKTtcbnZhciBnZXRMaW5rU3RhdGlzdGljcyA9IHJlcXVpcmUoIFwiLi9yZXNlYXJjaGVzL2dldExpbmtTdGF0aXN0aWNzLmpzXCIgKTtcbnZhciBsaW5rQ291bnQgPSByZXF1aXJlKCBcIi4vcmVzZWFyY2hlcy9jb3VudExpbmtzLmpzXCIgKTtcbnZhciB1cmxMZW5ndGggPSByZXF1aXJlKCBcIi4vcmVzZWFyY2hlcy91cmxJc1Rvb0xvbmcuanNcIiApO1xudmFyIGZpbmRLZXl3b3JkSW5QYWdlVGl0bGUgPSByZXF1aXJlKCBcIi4vcmVzZWFyY2hlcy9maW5kS2V5d29yZEluUGFnZVRpdGxlLmpzXCIgKTtcbnZhciBtYXRjaEtleXdvcmRJblN1YmhlYWRpbmdzID0gcmVxdWlyZSggXCIuL3Jlc2VhcmNoZXMvbWF0Y2hLZXl3b3JkSW5TdWJoZWFkaW5ncy5qc1wiICk7XG52YXIgZ2V0S2V5d29yZERlbnNpdHkgPSByZXF1aXJlKCBcIi4vcmVzZWFyY2hlcy9nZXRLZXl3b3JkRGVuc2l0eS5qc1wiICk7XG52YXIgc3RvcFdvcmRzSW5LZXl3b3JkID0gcmVxdWlyZSggXCIuL3Jlc2VhcmNoZXMvc3RvcFdvcmRzSW5LZXl3b3JkXCIgKTtcbnZhciBzdG9wV29yZHNJblVybCA9IHJlcXVpcmUoIFwiLi9yZXNlYXJjaGVzL3N0b3BXb3Jkc0luVXJsXCIgKTtcbnZhciBjYWxjdWxhdGVGbGVzY2hSZWFkaW5nID0gcmVxdWlyZSggXCIuL3Jlc2VhcmNoZXMvY2FsY3VsYXRlRmxlc2NoUmVhZGluZy5qc1wiICk7XG52YXIgbWV0YURlc2NyaXB0aW9uTGVuZ3RoID0gcmVxdWlyZSggXCIuL3Jlc2VhcmNoZXMvbWV0YURlc2NyaXB0aW9uTGVuZ3RoLmpzXCIgKTtcbnZhciBpbWFnZUNvdW50ID0gcmVxdWlyZSggXCIuL3Jlc2VhcmNoZXMvaW1hZ2VDb3VudEluVGV4dC5qc1wiICk7XG52YXIgYWx0VGFnQ291bnQgPSByZXF1aXJlKCBcIi4vcmVzZWFyY2hlcy9pbWFnZUFsdFRhZ3MuanNcIiApO1xudmFyIGtleXBocmFzZUxlbmd0aCA9IHJlcXVpcmUoIFwiLi9yZXNlYXJjaGVzL2tleXBocmFzZUxlbmd0aFwiICk7XG52YXIgbWV0YURlc2NyaXB0aW9uS2V5d29yZCA9IHJlcXVpcmUoIFwiLi9yZXNlYXJjaGVzL21ldGFEZXNjcmlwdGlvbktleXdvcmQuanNcIiApO1xudmFyIGtleXdvcmRDb3VudEluVXJsID0gcmVxdWlyZSggXCIuL3Jlc2VhcmNoZXMva2V5d29yZENvdW50SW5VcmxcIiApO1xudmFyIGZpbmRLZXl3b3JkSW5GaXJzdFBhcmFncmFwaCA9IHJlcXVpcmUoIFwiLi9yZXNlYXJjaGVzL2ZpbmRLZXl3b3JkSW5GaXJzdFBhcmFncmFwaC5qc1wiICk7XG52YXIgcGFnZVRpdGxlV2lkdGggPSByZXF1aXJlKCBcIi4vcmVzZWFyY2hlcy9wYWdlVGl0bGVXaWR0aC5qc1wiICk7XG52YXIgd29yZENvbXBsZXhpdHkgPSByZXF1aXJlKCBcIi4vcmVzZWFyY2hlcy9nZXRXb3JkQ29tcGxleGl0eS5qc1wiICk7XG52YXIgZ2V0UGFyYWdyYXBoTGVuZ3RoID0gcmVxdWlyZSggXCIuL3Jlc2VhcmNoZXMvZ2V0UGFyYWdyYXBoTGVuZ3RoLmpzXCIgKTtcbnZhciBjb3VudFNlbnRlbmNlc0Zyb21UZXh0ID0gcmVxdWlyZSggXCIuL3Jlc2VhcmNoZXMvY291bnRTZW50ZW5jZXNGcm9tVGV4dC5qc1wiICk7XG52YXIgY291bnRTZW50ZW5jZXNGcm9tRGVzY3JpcHRpb24gPSByZXF1aXJlKCBcIi4vcmVzZWFyY2hlcy9jb3VudFNlbnRlbmNlc0Zyb21EZXNjcmlwdGlvbi5qc1wiICk7XG52YXIgZ2V0U3ViaGVhZGluZ0xlbmd0aCA9IHJlcXVpcmUoIFwiLi9yZXNlYXJjaGVzL2dldFN1YmhlYWRpbmdMZW5ndGguanNcIiApO1xudmFyIGdldFN1YmhlYWRpbmdUZXh0TGVuZ3RocyA9IHJlcXVpcmUoIFwiLi9yZXNlYXJjaGVzL2dldFN1YmhlYWRpbmdUZXh0TGVuZ3Rocy5qc1wiICk7XG52YXIgZ2V0U3ViaGVhZGluZ1ByZXNlbmNlID0gcmVxdWlyZSggXCIuL3Jlc2VhcmNoZXMvZ2V0U3ViaGVhZGluZ1ByZXNlbmNlLmpzXCIgKTtcbnZhciBmaW5kVHJhbnNpdGlvbldvcmRzID0gcmVxdWlyZSggXCIuL3Jlc2VhcmNoZXMvZmluZFRyYW5zaXRpb25Xb3Jkcy5qc1wiICk7XG52YXIgcGFzc2l2ZVZvaWNlID0gcmVxdWlyZSggXCIuL3Jlc2VhcmNoZXMvZ2V0UGFzc2l2ZVZvaWNlLmpzXCIgKTtcbnZhciBnZXRTZW50ZW5jZUJlZ2lubmluZ3MgPSByZXF1aXJlKCBcIi4vcmVzZWFyY2hlcy9nZXRTZW50ZW5jZUJlZ2lubmluZ3MuanNcIiApO1xuXG4vKipcbiAqIFRoaXMgY29udGFpbnMgYWxsIHBvc3NpYmxlLCBkZWZhdWx0IHJlc2VhcmNoZXMuXG4gKiBAcGFyYW0ge1BhcGVyfSBwYXBlciBUaGUgUGFwZXIgb2JqZWN0IHRoYXQgaXMgbmVlZGVkIHdpdGhpbiB0aGUgcmVzZWFyY2hlcy5cbiAqIEBjb25zdHJ1Y3RvclxuICogQHRocm93cyB7SW52YWxpZFR5cGVFcnJvcn0gUGFyYW1ldGVyIG5lZWRzIHRvIGJlIGFuIGluc3RhbmNlIG9mIHRoZSBQYXBlciBvYmplY3QuXG4gKi9cbnZhciBSZXNlYXJjaGVyID0gZnVuY3Rpb24oIHBhcGVyICkge1xuXHR0aGlzLnNldFBhcGVyKCBwYXBlciApO1xuXG5cdHRoaXMuZGVmYXVsdFJlc2VhcmNoZXMgPSB7XG5cdFx0dXJsTGVuZ3RoOiB1cmxMZW5ndGgsXG5cdFx0d29yZENvdW50SW5UZXh0OiB3b3JkQ291bnRJblRleHQsXG5cdFx0ZmluZEtleXdvcmRJblBhZ2VUaXRsZTogZmluZEtleXdvcmRJblBhZ2VUaXRsZSxcblx0XHRjYWxjdWxhdGVGbGVzY2hSZWFkaW5nOiBjYWxjdWxhdGVGbGVzY2hSZWFkaW5nLFxuXHRcdGdldExpbmtTdGF0aXN0aWNzOiBnZXRMaW5rU3RhdGlzdGljcyxcblx0XHRsaW5rQ291bnQ6IGxpbmtDb3VudCxcblx0XHRpbWFnZUNvdW50OiBpbWFnZUNvdW50LFxuXHRcdGFsdFRhZ0NvdW50OiBhbHRUYWdDb3VudCxcblx0XHRtYXRjaEtleXdvcmRJblN1YmhlYWRpbmdzOiBtYXRjaEtleXdvcmRJblN1YmhlYWRpbmdzLFxuXHRcdGdldEtleXdvcmREZW5zaXR5OiBnZXRLZXl3b3JkRGVuc2l0eSxcblx0XHRzdG9wV29yZHNJbktleXdvcmQ6IHN0b3BXb3Jkc0luS2V5d29yZCxcblx0XHRzdG9wV29yZHNJblVybDogc3RvcFdvcmRzSW5VcmwsXG5cdFx0bWV0YURlc2NyaXB0aW9uTGVuZ3RoOiBtZXRhRGVzY3JpcHRpb25MZW5ndGgsXG5cdFx0a2V5cGhyYXNlTGVuZ3RoOiBrZXlwaHJhc2VMZW5ndGgsXG5cdFx0a2V5d29yZENvdW50SW5Vcmw6IGtleXdvcmRDb3VudEluVXJsLFxuXHRcdGZpcnN0UGFyYWdyYXBoOiBmaW5kS2V5d29yZEluRmlyc3RQYXJhZ3JhcGgsXG5cdFx0bWV0YURlc2NyaXB0aW9uS2V5d29yZDogbWV0YURlc2NyaXB0aW9uS2V5d29yZCxcblx0XHRwYWdlVGl0bGVXaWR0aDogcGFnZVRpdGxlV2lkdGgsXG5cdFx0d29yZENvbXBsZXhpdHk6IHdvcmRDb21wbGV4aXR5LFxuXHRcdGdldFBhcmFncmFwaExlbmd0aDogZ2V0UGFyYWdyYXBoTGVuZ3RoLFxuXHRcdGNvdW50U2VudGVuY2VzRnJvbVRleHQ6IGNvdW50U2VudGVuY2VzRnJvbVRleHQsXG5cdFx0Y291bnRTZW50ZW5jZXNGcm9tRGVzY3JpcHRpb246IGNvdW50U2VudGVuY2VzRnJvbURlc2NyaXB0aW9uLFxuXHRcdGdldFN1YmhlYWRpbmdMZW5ndGg6IGdldFN1YmhlYWRpbmdMZW5ndGgsXG5cdFx0Z2V0U3ViaGVhZGluZ1RleHRMZW5ndGhzOiBnZXRTdWJoZWFkaW5nVGV4dExlbmd0aHMsXG5cdFx0Z2V0U3ViaGVhZGluZ1ByZXNlbmNlOiBnZXRTdWJoZWFkaW5nUHJlc2VuY2UsXG5cdFx0ZmluZFRyYW5zaXRpb25Xb3JkczogZmluZFRyYW5zaXRpb25Xb3Jkcyxcblx0XHRwYXNzaXZlVm9pY2U6IHBhc3NpdmVWb2ljZSxcblx0XHRnZXRTZW50ZW5jZUJlZ2lubmluZ3M6IGdldFNlbnRlbmNlQmVnaW5uaW5ncyxcblx0fTtcblxuXHR0aGlzLmN1c3RvbVJlc2VhcmNoZXMgPSB7fTtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBQYXBlciBhc3NvY2lhdGVkIHdpdGggdGhlIFJlc2VhcmNoZXIuXG4gKiBAcGFyYW0ge1BhcGVyfSBwYXBlciBUaGUgUGFwZXIgdG8gdXNlIHdpdGhpbiB0aGUgUmVzZWFyY2hlclxuICogQHRocm93cyB7SW52YWxpZFR5cGVFcnJvcn0gUGFyYW1ldGVyIG5lZWRzIHRvIGJlIGFuIGluc3RhbmNlIG9mIHRoZSBQYXBlciBvYmplY3QuXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuUmVzZWFyY2hlci5wcm90b3R5cGUuc2V0UGFwZXIgPSBmdW5jdGlvbiggcGFwZXIgKSB7XG5cdHRoaXMucGFwZXIgPSBwYXBlcjtcbn07XG5cbi8qKlxuICogQWRkIGEgY3VzdG9tIHJlc2VhcmNoIHRoYXQgd2lsbCBiZSBhdmFpbGFibGUgd2l0aGluIHRoZSBSZXNlYXJjaGVyLlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgQSBuYW1lIHRvIHJlZmVyZW5jZSB0aGUgcmVzZWFyY2ggYnkuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSByZXNlYXJjaCBUaGUgZnVuY3Rpb24gdG8gYmUgYWRkZWQgdG8gdGhlIFJlc2VhcmNoZXIuXG4gKiBAdGhyb3dzIHtNaXNzaW5nQXJndW1lbnR9IFJlc2VhcmNoIG5hbWUgY2Fubm90IGJlIGVtcHR5LlxuICogQHRocm93cyB7SW52YWxpZFR5cGVFcnJvcn0gVGhlIHJlc2VhcmNoIHJlcXVpcmVzIGEgdmFsaWQgRnVuY3Rpb24gY2FsbGJhY2suXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuUmVzZWFyY2hlci5wcm90b3R5cGUuYWRkUmVzZWFyY2ggPSBmdW5jdGlvbiggbmFtZSwgcmVzZWFyY2ggKSB7XG5cdGlmICggaXNVbmRlZmluZWQoIG5hbWUgKSB8fCBpc0VtcHR5KCBuYW1lICkgKSB7XG5cdFx0dGhyb3cgbmV3IE1pc3NpbmdBcmd1bWVudCggXCJSZXNlYXJjaCBuYW1lIGNhbm5vdCBiZSBlbXB0eVwiICk7XG5cdH1cblxuXHRpZiAoICEgKCByZXNlYXJjaCBpbnN0YW5jZW9mIEZ1bmN0aW9uICkgKSB7XG5cdFx0dGhyb3cgbmV3IEludmFsaWRUeXBlRXJyb3IoIFwiVGhlIHJlc2VhcmNoIHJlcXVpcmVzIGEgRnVuY3Rpb24gY2FsbGJhY2suXCIgKTtcblx0fVxuXG5cdHRoaXMuY3VzdG9tUmVzZWFyY2hlc1sgbmFtZSBdID0gcmVzZWFyY2g7XG59O1xuXG4vKipcbiAqIENoZWNrIHdoZXRlciBvciBub3QgdGhlIHJlc2VhcmNoIGlzIGtub3duIGJ5IHRoZSBSZXNlYXJjaGVyLlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgdG8gcmVmZXJlbmNlIHRoZSByZXNlYXJjaCBieS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgcmVzZWFyY2ggaXMga25vd24gYnkgdGhlIFJlc2VhcmNoZXJcbiAqL1xuUmVzZWFyY2hlci5wcm90b3R5cGUuaGFzUmVzZWFyY2ggPSBmdW5jdGlvbiggbmFtZSApIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKCB0aGlzLmdldEF2YWlsYWJsZVJlc2VhcmNoZXMoKSApLmZpbHRlcihcblx0ZnVuY3Rpb24oIHJlc2VhcmNoICkge1xuXHRcdHJldHVybiByZXNlYXJjaCA9PT0gbmFtZTtcblx0fSApLmxlbmd0aCA+IDA7XG59O1xuXG4vKipcbiAqIFJldHVybiBhbGwgYXZhaWxhYmxlIHJlc2VhcmNoZXMuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBBbiBvYmplY3QgY29udGFpbmluZyBhbGwgYXZhaWxhYmxlIHJlc2VhcmNoZXMuXG4gKi9cblJlc2VhcmNoZXIucHJvdG90eXBlLmdldEF2YWlsYWJsZVJlc2VhcmNoZXMgPSBmdW5jdGlvbigpIHtcblx0cmV0dXJuIG1lcmdlKCB0aGlzLmRlZmF1bHRSZXNlYXJjaGVzLCB0aGlzLmN1c3RvbVJlc2VhcmNoZXMgKTtcbn07XG5cbi8qKlxuICogUmV0dXJuIHRoZSBSZXNlYXJjaCBieSBuYW1lLlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgdG8gcmVmZXJlbmNlIHRoZSByZXNlYXJjaCBieS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgdGhlIHJlc2VhcmNoIG9yIGZhbHNlIGlmIHJlc2VhcmNoIGRvZXMgbm90IGV4aXN0LlxuICogQHRocm93cyB7TWlzc2luZ0FyZ3VtZW50fSBSZXNlYXJjaCBuYW1lIGNhbm5vdCBiZSBlbXB0eS5cbiAqL1xuUmVzZWFyY2hlci5wcm90b3R5cGUuZ2V0UmVzZWFyY2ggPSBmdW5jdGlvbiggbmFtZSApIHtcblx0aWYgKCBpc1VuZGVmaW5lZCggbmFtZSApIHx8IGlzRW1wdHkoIG5hbWUgKSApIHtcblx0XHR0aHJvdyBuZXcgTWlzc2luZ0FyZ3VtZW50KCBcIlJlc2VhcmNoIG5hbWUgY2Fubm90IGJlIGVtcHR5XCIgKTtcblx0fVxuXG5cdGlmICggISB0aGlzLmhhc1Jlc2VhcmNoKCBuYW1lICkgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIHRoaXMuZ2V0QXZhaWxhYmxlUmVzZWFyY2hlcygpWyBuYW1lIF0oIHRoaXMucGFwZXIgKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVzZWFyY2hlcjtcbiIsIi8qKiBAbW9kdWxlIGFuYWx5c2VzL2NhbGN1bGF0ZUZsZXNjaFJlYWRpbmcgKi9cblxudmFyIHN0cmlwTnVtYmVycyA9IHJlcXVpcmUoIFwiLi4vc3RyaW5nUHJvY2Vzc2luZy9zdHJpcE51bWJlcnMuanNcIiApO1xudmFyIGNvdW50U2VudGVuY2VzID0gcmVxdWlyZSggXCIuLi9zdHJpbmdQcm9jZXNzaW5nL2NvdW50U2VudGVuY2VzLmpzXCIgKTtcbnZhciBjb3VudFdvcmRzID0gcmVxdWlyZSggXCIuLi9zdHJpbmdQcm9jZXNzaW5nL2NvdW50V29yZHMuanNcIiApO1xudmFyIGNvdW50U3lsbGFibGVzID0gcmVxdWlyZSggXCIuLi9zdHJpbmdQcm9jZXNzaW5nL3N5bGxhYmxlcy9jb3VudC5qc1wiICk7XG52YXIgZm9ybWF0TnVtYmVyID0gcmVxdWlyZSggXCIuLi9oZWxwZXJzL2Zvcm1hdE51bWJlci5qc1wiICk7XG5cbnZhciBnZXRMYW5ndWFnZSA9IHJlcXVpcmUoIFwiLi4vaGVscGVycy9nZXRMYW5ndWFnZS5qc1wiICk7XG5cbi8qKlxuICogQ2FsY3VsYXRlcyBhbiBhdmVyYWdlIGZyb20gYSB0b3RhbCBhbmQgYW4gYW1vdW50XG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHRvdGFsIFRoZSB0b3RhbC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBhbW91bnQgVGhlIGFtb3VudC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBhdmVyYWdlIGZyb20gdGhlIHRvdGFsIGFuZCB0aGUgYW1vdW50LlxuICovXG52YXIgZ2V0QXZlcmFnZSA9IGZ1bmN0aW9uKCB0b3RhbCwgYW1vdW50ICkge1xuXHRyZXR1cm4gdG90YWwgLyBhbW91bnQ7XG59O1xuXG4vKipcbiAqIFRoaXMgY2FsY3VsYXRlcyB0aGUgZmxlc2NocmVhZGluZ3Njb3JlIGZvciBhIGdpdmVuIHRleHRcbiAqIFRoZSBmb3JtdWxhIHVzZWQ6XG4gKiAyMDYuODM1IC0gMS4wMTUgKHRvdGFsIHdvcmRzIC8gdG90YWwgc2VudGVuY2VzKSAtIDg0LjYgKCB0b3RhbCBzeWxsYWJsZXMgLyB0b3RhbCB3b3Jkcyk7XG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHBhcGVyIFRoZSBwYXBlciBjb250YWluaW5nIHRoZSB0ZXh0XG4gKiBAcmV0dXJucyB7bnVtYmVyfSB0aGUgc2NvcmUgb2YgdGhlIGZsZXNjaHJlYWRpbmcgdGVzdFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCBwYXBlciApIHtcblx0dmFyIHNjb3JlO1xuXHR2YXIgdGV4dCA9IHBhcGVyLmdldFRleHQoKTtcblx0dmFyIGxvY2FsZSA9IHBhcGVyLmdldExvY2FsZSgpO1xuXHR2YXIgbGFuZ3VhZ2UgPSBnZXRMYW5ndWFnZSggbG9jYWxlICk7XG5cdGlmICggdGV4dCA9PT0gXCJcIiApIHtcblx0XHRyZXR1cm4gMDtcblx0fVxuXG5cdHRleHQgPSBzdHJpcE51bWJlcnMoIHRleHQgKTtcblxuXHR2YXIgbnVtYmVyT2ZTZW50ZW5jZXMgPSBjb3VudFNlbnRlbmNlcyggdGV4dCApO1xuXG5cdHZhciBudW1iZXJPZldvcmRzID0gY291bnRXb3JkcyggdGV4dCApO1xuXG5cdC8vIFByZXZlbnQgZGl2aXNpb24gYnkgemVybyBlcnJvcnMuXG5cdGlmICggbnVtYmVyT2ZTZW50ZW5jZXMgPT09IDAgfHwgbnVtYmVyT2ZXb3JkcyA9PT0gMCApIHtcblx0XHRyZXR1cm4gMDtcblx0fVxuXG5cdHZhciBudW1iZXJPZlN5bGxhYmxlcyA9IGNvdW50U3lsbGFibGVzKCB0ZXh0LCBsb2NhbGUgKTtcblx0dmFyIGF2ZXJhZ2VXb3Jkc1BlclNlbnRlbmNlID0gZ2V0QXZlcmFnZSggbnVtYmVyT2ZXb3JkcywgbnVtYmVyT2ZTZW50ZW5jZXMgKTtcblx0c3dpdGNoKCBsYW5ndWFnZSApIHtcblx0XHRjYXNlIFwibmxcIjpcblx0XHRcdHZhciBzeWxsYWJsZXNQZXIxMDBXb3JkcyA9IG51bWJlck9mU3lsbGFibGVzICogKCAxMDAgLyBudW1iZXJPZldvcmRzICk7XG5cdFx0XHRzY29yZSA9IDIwNi44NCAtICggMC43NyAqIHN5bGxhYmxlc1BlcjEwMFdvcmRzICkgLSAoIDAuOTMgKiAoIGF2ZXJhZ2VXb3Jkc1BlclNlbnRlbmNlICApICk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIFwiZGVcIjpcblx0XHRcdHNjb3JlID0gMTgwIC0gYXZlcmFnZVdvcmRzUGVyU2VudGVuY2UgLSAoIDU4LjUgKiBudW1iZXJPZlN5bGxhYmxlcyAvIG51bWJlck9mV29yZHMgKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgXCJlblwiOlxuXHRcdGRlZmF1bHQ6XG5cdFx0XHRzY29yZSA9IDIwNi44MzUgLSAoIDEuMDE1ICogKCBhdmVyYWdlV29yZHNQZXJTZW50ZW5jZSApICkgLSAoIDg0LjYgKiAoIG51bWJlck9mU3lsbGFibGVzIC8gbnVtYmVyT2ZXb3JkcyApICk7XG5cdFx0XHRicmVhaztcblx0fVxuXG5cblx0cmV0dXJuIGZvcm1hdE51bWJlciggc2NvcmUgKTtcbn07XG4iLCIvKiogQG1vZHVsZSBhbmFseXNlcy9nZXRMaW5rU3RhdGlzdGljcyAqL1xuXG52YXIgZ2V0TGlua3MgPSByZXF1aXJlKCBcIi4vZ2V0TGlua3NcIiApO1xuXG4vKipcbiAqIENoZWNrcyBhIHRleHQgZm9yIGFuY2hvcnMgYW5kIHJldHVybnMgdGhlIG51bWJlciBmb3VuZC5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gcGFwZXIgVGhlIHBhcGVyIG9iamVjdCBjb250YWluaW5nIHRleHQsIGtleXdvcmQgYW5kIHVybC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBudW1iZXIgb2YgbGlua3MgZm91bmQgaW4gdGhlIHRleHQuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oIHBhcGVyICkge1xuXHR2YXIgdGV4dCA9IHBhcGVyLmdldFRleHQoKTtcblx0dmFyIGFuY2hvcnMgPSBnZXRMaW5rcyggdGV4dCApO1xuXG5cdHJldHVybiBhbmNob3JzLmxlbmd0aDtcbn07XG4iLCJ2YXIgZ2V0U2VudGVuY2VzID0gcmVxdWlyZSggXCIuLi9zdHJpbmdQcm9jZXNzaW5nL2dldFNlbnRlbmNlc1wiICk7XG52YXIgc2VudGVuY2VzTGVuZ3RoID0gcmVxdWlyZSggXCIuLy4uL3N0cmluZ1Byb2Nlc3Npbmcvc2VudGVuY2VzTGVuZ3RoLmpzXCIgKTtcblxuLyoqXG4gKiBDb3VudHMgc2VudGVuY2VzIGluIHRoZSBkZXNjcmlwdGlvbi4uXG4gKiBAcGFyYW0ge1BhcGVyfSBwYXBlciBUaGUgUGFwZXIgb2JqZWN0IHRvIGdldCBkZXNjcmlwdGlvbiBmcm9tLlxuICogQHJldHVybnMge0FycmF5fSBUaGUgc2VudGVuY2VzIGZyb20gdGhlIHRleHQuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oIHBhcGVyICkge1xuXHR2YXIgc2VudGVuY2VzID0gZ2V0U2VudGVuY2VzKCBwYXBlci5nZXREZXNjcmlwdGlvbigpICk7XG5cdHJldHVybiBzZW50ZW5jZXNMZW5ndGgoIHNlbnRlbmNlcyApO1xufTtcbiIsInZhciBnZXRTZW50ZW5jZXMgPSByZXF1aXJlKCBcIi4uL3N0cmluZ1Byb2Nlc3NpbmcvZ2V0U2VudGVuY2VzXCIgKTtcbnZhciBzZW50ZW5jZXNMZW5ndGggPSByZXF1aXJlKCBcIi4vLi4vc3RyaW5nUHJvY2Vzc2luZy9zZW50ZW5jZXNMZW5ndGguanNcIiApO1xuXG4vKipcbiAqIENvdW50IHNlbnRlbmNlcyBpbiB0aGUgdGV4dC5cbiAqIEBwYXJhbSB7UGFwZXJ9IHBhcGVyIFRoZSBQYXBlciBvYmplY3QgdG8gZ2V0IHRleHQgZnJvbS5cbiAqIEByZXR1cm5zIHtBcnJheX0gVGhlIHNlbnRlbmNlcyBmcm9tIHRoZSB0ZXh0LlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCBwYXBlciApIHtcblx0dmFyIHNlbnRlbmNlcyA9IGdldFNlbnRlbmNlcyggcGFwZXIuZ2V0VGV4dCgpICk7XG5cdHJldHVybiBzZW50ZW5jZXNMZW5ndGgoIHNlbnRlbmNlcyApO1xufTtcbiIsIi8qKlxuICogUmV0dXJucyBhbiBhcnJheSB3aXRoIGV4Y2VwdGlvbnMgZm9yIHRoZSBzZW50ZW5jZSBiZWdpbm5pbmcgcmVzZWFyY2hlci5cbiAqIEByZXR1cm5zIHtBcnJheX0gVGhlIGFycmF5IGZpbGxlZCB3aXRoIGV4Y2VwdGlvbnMuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG5cdHJldHVybiBbXG5cdFx0Ly8gRGVmaW5pdGUgYXJ0aWNsZXM6XG5cdFx0XCJ0aGVcIixcblx0XHQvLyBJbmRlZmluaXRlIGFydGljbGVzOlxuXHRcdFwiYVwiLCBcImFuXCIsXG5cdFx0Ly8gTnVtYmVycyAxLTEwOlxuXHRcdFwib25lXCIsIFwidHdvXCIsIFwidGhyZWVcIiwgXCJmb3VyXCIsIFwiZml2ZVwiLCBcInNpeFwiLCBcInNldmVuXCIsIFwiZWlnaHRcIiwgXCJuaW5lXCIsIFwidGVuXCIsXG5cdFx0Ly8gRGVtb25zdHJhdGl2ZSBwcm9ub3Vuczpcblx0XHRcInRoaXNcIiwgXCJ0aGF0XCIsIFwidGhlc2VcIiwgXCJ0aG9zZVwiLFxuXHRdO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG5cdHJldHVybiBbXG5cdFx0XCJhbVwiLFxuXHRcdFwiaXNcIixcblx0XHRcImFyZVwiLFxuXHRcdFwid2FzXCIsXG5cdFx0XCJ3ZXJlXCIsXG5cdFx0XCJiZWVuXCIsXG5cdFx0XCJiZWluZ1wiLFxuXHRcdFwiZ2V0XCIsXG5cdFx0XCJnZXRzXCIsXG5cdFx0XCJnZXR0aW5nXCIsXG5cdFx0XCJnb3RcIixcblx0XHRcImdvdHRlblwiLFxuXHRcdFwiaGF2aW5nXCIsXG5cdFx0XCJiZVwiLFxuXHRcdFwic2hlJ3NcIixcblx0XHRcImhlJ3NcIixcblx0XHRcIml0J3NcIixcblx0XHRcImknbVwiLFxuXHRcdFwid2UncmVcIixcblx0XHRcInRoZXkncmVcIixcblx0XHRcInlvdSdyZVwiLFxuXHRcdFwid2hhdCdzXCIsXG5cdFx0XCJpc24ndFwiLFxuXHRcdFwid2VyZW4ndFwiLFxuXHRcdFwid2Fzbid0XCIsXG5cdFx0XCJ0aGF0J3NcIixcblx0XHRcImFyZW4ndFwiLFxuXHRdO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG5cdHJldHVybiBbXG5cdFx0XCJhXCIsXG5cdFx0XCJhblwiLFxuXHRcdFwidGhlXCIsXG5cdFx0XCJteVwiLFxuXHRcdFwiaGVyXCIsXG5cdFx0XCJoaXNcIixcblx0XHRcInRoZWlyXCIsXG5cdFx0XCJpdHNcIixcblx0XHRcIm91clwiLFxuXHRcdFwieW91clwiLFxuXHRcdFwiYW1cIixcblx0XHRcImlzXCIsXG5cdFx0XCJhcmVcIixcblx0XHRcIndhc1wiLFxuXHRcdFwid2VyZVwiLFxuXHRcdFwiYmVlblwiLFxuXHRcdFwiYmVpbmdcIixcblx0XHRcImdldFwiLFxuXHRcdFwiZ2V0c1wiLFxuXHRcdFwiZ2V0dGluZ1wiLFxuXHRcdFwiZ290XCIsXG5cdFx0XCJnb3R0ZW5cIixcblx0XHRcImhhdmluZ1wiLFxuXHRcdFwiYmVcIixcblx0XHRcInNoZSdzXCIsXG5cdFx0XCJoZSdzXCIsXG5cdFx0XCJpdCdzXCIsXG5cdFx0XCJpJ21cIixcblx0XHRcIndlJ3JlXCIsXG5cdFx0XCJ0aGV5J3JlXCIsXG5cdFx0XCJ5b3UncmVcIixcblx0XHRcIndoYXQnc1wiLFxuXHRcdFwiaXNuJ3RcIixcblx0XHRcIndlcmVuJ3RcIixcblx0XHRcIndhc24ndFwiLFxuXHRcdFwidGhhdCdzXCIsXG5cdFx0XCJhcmVuJ3RcIixcblx0XTtcbn07XG5cbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG5cdHJldHVybiBbXG5cdFx0XCJhcmlzZW5cIixcblx0XHRcImF3b2tlblwiLFxuXHRcdFwicmVhd29rZW5cIixcblx0XHRcImJhYnlzYXRcIixcblx0XHRcImJhY2tzbGlkXCIsXG5cdFx0XCJiYWNrc2xpZGRlblwiLFxuXHRcdFwiYmVhdFwiLFxuXHRcdFwiYmVhdGVuXCIsXG5cdFx0XCJiZWNvbWVcIixcblx0XHRcImJlZ3VuXCIsXG5cdFx0XCJiZW50XCIsXG5cdFx0XCJ1bmJlbnRcIixcblx0XHRcImJldFwiLFxuXHRcdFwiYmlkXCIsXG5cdFx0XCJvdXRiaWRcIixcblx0XHRcInJlYmlkXCIsXG5cdFx0XCJ1bmRlcmJpZFwiLFxuXHRcdFwib3ZlcmJpZFwiLFxuXHRcdFwiYmlkZGVuXCIsXG5cdFx0XCJiaXR0ZW5cIixcblx0XHRcImJsb3duXCIsXG5cdFx0XCJib3VnaHRcIixcblx0XHRcIm92ZXJib3VnaHRcIixcblx0XHRcImJvdW5kXCIsXG5cdFx0XCJ1bmJvdW5kXCIsXG5cdFx0XCJyZWJvdW5kXCIsXG5cdFx0XCJicm9hZGNhc3RcIixcblx0XHRcInJlYnJvYWRjYXN0XCIsXG5cdFx0XCJicm9rZW5cIixcblx0XHRcImJyb3VnaHRcIixcblx0XHRcImJyb3diZWF0XCIsXG5cdFx0XCJicm93YmVhdGVuXCIsXG5cdFx0XCJidWlsdFwiLFxuXHRcdFwicHJlYnVpbHRcIixcblx0XHRcInJlYnVpbHRcIixcblx0XHRcIm92ZXJidWlsdFwiLFxuXHRcdFwiYnVybnRcIixcblx0XHRcImJ1cnN0XCIsXG5cdFx0XCJidXN0XCIsXG5cdFx0XCJjYXN0XCIsXG5cdFx0XCJtaXNjYXN0XCIsXG5cdFx0XCJyZWNhc3RcIixcblx0XHRcImNhdWdodFwiLFxuXHRcdFwiY2hvc2VuXCIsXG5cdFx0XCJjbHVuZ1wiLFxuXHRcdFwiY29tZVwiLFxuXHRcdFwib3ZlcmNvbWVcIixcblx0XHRcImNvc3RcIixcblx0XHRcImNyZXB0XCIsXG5cdFx0XCJjdXRcIixcblx0XHRcInVuZGVyY3V0XCIsXG5cdFx0XCJyZWN1dFwiLFxuXHRcdFwiZGF5ZHJlYW10XCIsXG5cdFx0XCJkZWFsdFwiLFxuXHRcdFwibWlzZGVhbHRcIixcblx0XHRcInJlZGVhbHRcIixcblx0XHRcImRpc3Byb3ZlblwiLFxuXHRcdFwiZG9uZVwiLFxuXHRcdFwicHJlZG9uZVwiLFxuXHRcdFwib3V0ZG9uZVwiLFxuXHRcdFwibWlzZG9uZVwiLFxuXHRcdFwicmVkb25lXCIsXG5cdFx0XCJvdmVyZG9uZVwiLFxuXHRcdFwidW5kb25lXCIsXG5cdFx0XCJkcmF3blwiLFxuXHRcdFwib3V0ZHJhd25cIixcblx0XHRcInJlZHJhd25cIixcblx0XHRcIm92ZXJkcmF3blwiLFxuXHRcdFwiZHJlYW10XCIsXG5cdFx0XCJkcml2ZW5cIixcblx0XHRcIm91dGRyaXZlblwiLFxuXHRcdFwiZHJ1bmtcIixcblx0XHRcIm91dGRydW5rXCIsXG5cdFx0XCJvdmVyZHJ1bmtcIixcblx0XHRcImR1Z1wiLFxuXHRcdFwiZHdlbHRcIixcblx0XHRcImVhdGVuXCIsXG5cdFx0XCJvdmVyZWF0ZW5cIixcblx0XHRcImZhbGxlblwiLFxuXHRcdFwiZmVsdFwiLFxuXHRcdFwiZml0XCIsXG5cdFx0XCJyZWZpdFwiLFxuXHRcdFwicmV0cm9maXRcIixcblx0XHRcImZsb3duXCIsXG5cdFx0XCJvdXRmbG93blwiLFxuXHRcdFwiZmx1bmdcIixcblx0XHRcImZvcmJpZGRlblwiLFxuXHRcdFwiZm9yZWNhc3RcIixcblx0XHRcImZvcmVnb25lXCIsXG5cdFx0XCJmb3Jlc2VlblwiLFxuXHRcdFwiZm9yZXRvbGRcIixcblx0XHRcImZvcmdpdmVuXCIsXG5cdFx0XCJmb3Jnb3R0ZW5cIixcblx0XHRcImZvcnNha2VuXCIsXG5cdFx0XCJmb3VnaHRcIixcblx0XHRcIm91dGZvdWdodFwiLFxuXHRcdFwiZm91bmRcIixcblx0XHRcImZyb3N0Yml0dGVuXCIsXG5cdFx0XCJmcm96ZW5cIixcblx0XHRcInVuZnJvemVuXCIsXG5cdFx0XCJnaXZlblwiLFxuXHRcdFwiZ29uZVwiLFxuXHRcdFwidW5kZXJnb25lXCIsXG4vL1x0XHRcImdvdFwiLFxuXHRcdFwiZ290dGVuXCIsXG5cdFx0XCJncm91bmRcIixcblx0XHRcInJlZ3JvdW5kXCIsXG5cdFx0XCJncm93blwiLFxuXHRcdFwib3V0Z3Jvd25cIixcblx0XHRcInJlZ3Jvd25cIixcblx0XHRcImhhZFwiLFxuXHRcdFwiaGFuZHdyaXR0ZW5cIixcblx0XHRcImhlYXJkXCIsXG5cdFx0XCJyZWhlYXJkXCIsXG5cdFx0XCJtaXNoZWFyZFwiLFxuXHRcdFwib3ZlcmhlYXJkXCIsXG5cdFx0XCJoZWxkXCIsXG5cdFx0XCJoZXduXCIsXG5cdFx0XCJoaWRkZW5cIixcblx0XHRcInVuaGlkZGVuXCIsXG5cdFx0XCJoaXRcIixcblx0XHRcImh1bmdcIixcblx0XHRcInJlaHVuZ1wiLFxuXHRcdFwib3Zlcmh1bmdcIixcblx0XHRcInVuaHVuZ1wiLFxuXHRcdFwiaHVydFwiLFxuXHRcdFwiaW5sYWlkXCIsXG5cdFx0XCJpbnB1dFwiLFxuXHRcdFwiaW50ZXJ3b3VuZFwiLFxuXHRcdFwiaW50ZXJ3b3ZlblwiLFxuXHRcdFwiamVycnktYnVpbHRcIixcblx0XHRcImtlcHRcIixcblx0XHRcImtuZWx0XCIsXG5cdFx0XCJrbml0XCIsXG5cdFx0XCJyZWtuaXRcIixcblx0XHRcInVua25pdFwiLFxuXHRcdFwia25vd25cIixcblx0XHRcImxhaWRcIixcblx0XHRcIm1pc2xhaWRcIixcblx0XHRcInJlbGFpZFwiLFxuXHRcdFwib3ZlcmxhaWRcIixcblx0XHRcImxhaW5cIixcblx0XHRcInVuZGVybGFpblwiLFxuXHRcdFwibGVhbnRcIixcblx0XHRcImxlYXB0XCIsXG5cdFx0XCJvdXRsZWFwdFwiLFxuXHRcdFwibGVhcm50XCIsXG5cdFx0XCJ1bmxlYXJudFwiLFxuXHRcdFwicmVsZWFybnRcIixcblx0XHRcIm1pc2xlYXJudFwiLFxuXHRcdFwibGVmdFwiLFxuXHRcdFwibGVudFwiLFxuXHRcdFwibGV0XCIsXG5cdFx0XCJsaXAtcmVhZFwiLFxuXHRcdFwibGl0XCIsXG5cdFx0XCJyZWxpdFwiLFxuXHRcdFwibG9zdFwiLFxuXHRcdFwibWFkZVwiLFxuXHRcdFwicHJlbWFkZVwiLFxuXHRcdFwicmVtYWRlXCIsXG5cdFx0XCJtZWFudFwiLFxuXHRcdFwibWV0XCIsXG5cdFx0XCJtb3duXCIsXG5cdFx0XCJvZmZzZXRcIixcblx0XHRcInBhaWRcIixcblx0XHRcInByZXBhaWRcIixcblx0XHRcInJlcGFpZFwiLFxuXHRcdFwib3ZlcnBhaWRcIixcblx0XHRcInBhcnRha2VuXCIsXG5cdFx0XCJwcm9vZnJlYWRcIixcblx0XHRcInByb3ZlblwiLFxuXHRcdFwicHV0XCIsXG5cdFx0XCJxdWljay1mcm96ZW5cIixcblx0XHRcInF1aXRcIixcblx0XHRcInJlYWRcIixcblx0XHRcIm1pc3JlYWRcIixcblx0XHRcInJlcmVhZFwiLFxuXHRcdFwicmV0cmVhZFwiLFxuXHRcdFwicmV3YWtlblwiLFxuXHRcdFwicmlkXCIsXG5cdFx0XCJyaWRkZW5cIixcblx0XHRcIm91dHJpZGRlblwiLFxuXHRcdFwib3ZlcnJpZGRlblwiLFxuXHRcdFwicmlzZW5cIixcblx0XHRcInJvdWdoY2FzdFwiLFxuXHRcdFwicnVuXCIsXG5cdFx0XCJvdXRydW5cIixcblx0XHRcInJlcnVuXCIsXG5cdFx0XCJvdmVycnVuXCIsXG5cdFx0XCJydW5nXCIsXG5cdFx0XCJzYWlkXCIsXG5cdFx0XCJzYW5kLWNhc3RcIixcblx0XHRcInNhdFwiLFxuXHRcdFwib3V0c2F0XCIsXG5cdFx0XCJzYXduXCIsXG5cdFx0XCJzZWVuXCIsXG5cdFx0XCJvdmVyc2VlblwiLFxuXHRcdFwic2VudFwiLFxuXHRcdFwicmVzZW50XCIsXG5cdFx0XCJzZXRcIixcblx0XHRcInByZXNldFwiLFxuXHRcdFwicmVzZXRcIixcblx0XHRcIm1pc3NldFwiLFxuXHRcdFwic2V3blwiLFxuXHRcdFwicmVzZXduXCIsXG5cdFx0XCJvdmVyc2V3blwiLFxuXHRcdFwidW5zZXduXCIsXG5cdFx0XCJzaGFrZW5cIixcblx0XHRcInNoYXRcIixcblx0XHRcInNoYXZlblwiLFxuXHRcdFwic2hpdFwiLFxuXHRcdFwic2hvbmVcIixcblx0XHRcIm91dHNob25lXCIsXG5cdFx0XCJzaG9yblwiLFxuXHRcdFwic2hvdFwiLFxuXHRcdFwib3V0c2hvdFwiLFxuXHRcdFwib3ZlcnNob3RcIixcblx0XHRcInNob3duXCIsXG5cdFx0XCJzaHJ1bmtcIixcblx0XHRcInByZXNocnVua1wiLFxuXHRcdFwic2h1dFwiLFxuXHRcdFwic2lnaHQtcmVhZFwiLFxuXHRcdFwic2xhaW5cIixcblx0XHRcInNsZXB0XCIsXG5cdFx0XCJvdXRzbGVwdFwiLFxuXHRcdFwib3ZlcnNsZXB0XCIsXG5cdFx0XCJzbGlkXCIsXG5cdFx0XCJzbGl0XCIsXG5cdFx0XCJzbHVuZ1wiLFxuXHRcdFwidW5zbHVuZ1wiLFxuXHRcdFwic2x1bmtcIixcblx0XHRcInNtZWx0XCIsXG5cdFx0XCJvdXRzbWVsdFwiLFxuXHRcdFwic251Y2tcIixcblx0XHRcInNvbGRcIixcblx0XHRcInVuZGVyc29sZFwiLFxuXHRcdFwicHJlc29sZFwiLFxuXHRcdFwib3V0c29sZFwiLFxuXHRcdFwicmVzb2xkXCIsXG5cdFx0XCJvdmVyc29sZFwiLFxuXHRcdFwic291Z2h0XCIsXG5cdFx0XCJzb3duXCIsXG5cdFx0XCJzcGF0XCIsXG5cdFx0XCJzcGVsdFwiLFxuXHRcdFwibWlzc3BlbHRcIixcblx0XHRcInNwZW50XCIsXG5cdFx0XCJ1bmRlcnNwZW50XCIsXG5cdFx0XCJvdXRzcGVudFwiLFxuXHRcdFwibWlzc3BlbnRcIixcblx0XHRcIm92ZXJzcGVudFwiLFxuXHRcdFwic3BpbHRcIixcblx0XHRcIm92ZXJzcGlsdFwiLFxuXHRcdFwic3BpdFwiLFxuXHRcdFwic3BsaXRcIixcblx0XHRcInNwb2lsdFwiLFxuXHRcdFwic3Bva2VuXCIsXG5cdFx0XCJvdXRzcG9rZW5cIixcblx0XHRcIm1pc3Nwb2tlblwiLFxuXHRcdFwib3ZlcnNwb2tlblwiLFxuXHRcdFwic3ByZWFkXCIsXG5cdFx0XCJzcHJ1bmdcIixcblx0XHRcInNwdW5cIixcblx0XHRcInVuc3B1blwiLFxuXHRcdFwic3RvbGVuXCIsXG5cdFx0XCJzdG9vZFwiLFxuXHRcdFwidW5kZXJzdG9vZFwiLFxuXHRcdFwibWlzdW5kZXJzdG9vZFwiLFxuXHRcdFwic3RyZXduXCIsXG5cdFx0XCJzdHJpY2tlblwiLFxuXHRcdFwic3RyaWRkZW5cIixcblx0XHRcInN0cml2ZW5cIixcblx0XHRcInN0cnVja1wiLFxuXHRcdFwic3RydW5nXCIsXG5cdFx0XCJ1bnN0cnVuZ1wiLFxuXHRcdFwic3R1Y2tcIixcblx0XHRcInVuc3R1Y2tcIixcblx0XHRcInN0dW5nXCIsXG5cdFx0XCJzdHVua1wiLFxuXHRcdFwic3VibGV0XCIsXG5cdFx0XCJzdW5idXJudFwiLFxuXHRcdFwic3VuZ1wiLFxuXHRcdFwib3V0c3VuZ1wiLFxuXHRcdFwic3Vua1wiLFxuXHRcdFwic3dlYXRcIixcblx0XHRcInN3ZXB0XCIsXG5cdFx0XCJzd29sbGVuXCIsXG5cdFx0XCJzd29yblwiLFxuXHRcdFwib3V0c3dvcm5cIixcblx0XHRcInN3dW1cIixcblx0XHRcIm91dHN3dW1cIixcblx0XHRcInN3dW5nXCIsXG5cdFx0XCJ0YWtlblwiLFxuXHRcdFwidW5kZXJ0YWtlblwiLFxuXHRcdFwibWlzdGFrZW5cIixcblx0XHRcInJldGFrZW5cIixcblx0XHRcIm92ZXJ0YWtlblwiLFxuXHRcdFwidGF1Z2h0XCIsXG5cdFx0XCJtaXN0YXVnaHRcIixcblx0XHRcInJldGF1Z2h0XCIsXG5cdFx0XCJ0ZWxlY2FzdFwiLFxuXHRcdFwidGVzdC1kcml2ZW5cIixcblx0XHRcInRlc3QtZmxvd25cIixcblx0XHRcInRob3VnaHRcIixcblx0XHRcIm91dHRob3VnaHRcIixcblx0XHRcInJldGhvdWdodFwiLFxuXHRcdFwib3ZlcnRob3VnaHRcIixcblx0XHRcInRocm93blwiLFxuXHRcdFwib3V0dGhyb3duXCIsXG5cdFx0XCJvdmVydGhyb3duXCIsXG5cdFx0XCJ0aHJ1c3RcIixcblx0XHRcInRvbGRcIixcblx0XHRcInJldG9sZFwiLFxuXHRcdFwidG9yblwiLFxuXHRcdFwicmV0b3JuXCIsXG5cdFx0XCJ0cm9kXCIsXG5cdFx0XCJ0cm9kZGVuXCIsXG5cdFx0XCJ0eXBlY2FzdFwiLFxuXHRcdFwidHlwZXNldFwiLFxuXHRcdFwidXBoZWxkXCIsXG5cdFx0XCJ1cHNldFwiLFxuXHRcdFwid2F5bGFpZFwiLFxuXHRcdFwid2VwdFwiLFxuXHRcdFwid2V0XCIsXG5cdFx0XCJyZXdldFwiLFxuXHRcdFwid2l0aGRyYXduXCIsXG5cdFx0XCJ3aXRoaGVsZFwiLFxuXHRcdFwid2l0aHN0b29kXCIsXG5cdFx0XCJ3b2tlblwiLFxuXHRcdFwid29uXCIsXG5cdFx0XCJyZXdvblwiLFxuXHRcdFwid29yblwiLFxuXHRcdFwicmV3b3JuXCIsXG5cdFx0XCJ3b3VuZFwiLFxuXHRcdFwicmV3b3VuZFwiLFxuXHRcdFwib3ZlcndvdW5kXCIsXG5cdFx0XCJ1bndvdW5kXCIsXG5cdFx0XCJ3b3ZlblwiLFxuXHRcdFwicmV3b3ZlblwiLFxuXHRcdFwidW53b3ZlblwiLFxuXHRcdFwid3JpdHRlblwiLFxuXHRcdFwidHlwZXdyaXR0ZW5cIixcblx0XHRcInVuZGVyd3JpdHRlblwiLFxuXHRcdFwib3V0d3JpdHRlblwiLFxuXHRcdFwibWlzd3JpdHRlblwiLFxuXHRcdFwicmV3cml0dGVuXCIsXG5cdFx0XCJvdmVyd3JpdHRlblwiLFxuXHRcdFwid3J1bmdcIixcblx0XTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gW1xuXHRcdFwiYWJsZWJvZGllZFwiLFxuXHRcdFwiYWJvdmVtZW50aW9uZWRcIixcblx0XHRcImFic2VudG1pbmRlZFwiLFxuXHRcdFwiYWNjb2xhZGVkXCIsXG5cdFx0XCJhY2NvbXBhbmllZFwiLFxuXHRcdFwiYWNjdWx0dXJpemVkXCIsXG5cdFx0XCJhY2N1cnNlZFwiLFxuXHRcdFwiYWNlcmF0ZWRcIixcblx0XHRcImFjZXJiYXRlZFwiLFxuXHRcdFwiYWNldHlsaXplZFwiLFxuXHRcdFwiYWNocm9tYXRpc2VkXCIsXG5cdFx0XCJhY2hyb21hdGl6ZWRcIixcblx0XHRcImFjaWRpZmllZFwiLFxuXHRcdFwiYWNuZWRcIixcblx0XHRcImFjdHVhbGlzZWRcIixcblx0XHRcImFkcmVuYWxpc2VkXCIsXG5cdFx0XCJhZHVsYXRlZFwiLFxuXHRcdFwiYWR2ZXJzZWRcIixcblx0XHRcImFlc3RoZXRpY2lzZWRcIixcblx0XHRcImFmZmVjdGlvbmVkXCIsXG5cdFx0XCJhZmZpbmVkXCIsXG5cdFx0XCJhZmZyaWNhdGVkXCIsXG5cdFx0XCJhZm9yZW1lbnRpb25lZFwiLFxuXHRcdFwiYWdlcmVsYXRlZFwiLFxuXHRcdFwiYWdncmlldmVkXCIsXG5cdFx0XCJhaXJiZWRcIixcblx0XHRcImFpcmNvb2xlZFwiLFxuXHRcdFwiYWlyc3BlZWRcIixcblx0XHRcImFsY29ob2xpemVkXCIsXG5cdFx0XCJhbGNvdmVkXCIsXG5cdFx0XCJhbGthbGlzZWRcIixcblx0XHRcImFsbGlhbmNlZFwiLFxuXHRcdFwiYWx1bWluaXplZFwiLFxuXHRcdFwiYWx2ZW9sYXRlZFwiLFxuXHRcdFwiYW1iZXJlZFwiLFxuXHRcdFwiYW1tb25pZmllZFwiLFxuXHRcdFwiYW1wbGlmaWVkXCIsXG5cdFx0XCJhbmFncmFtbWF0aXNlZFwiLFxuXHRcdFwiYW5hZ3JhbW1hdGl6ZWRcIixcblx0XHRcImFuYXRoZW1hdGlzZWRcIixcblx0XHRcImFuaXNlZWRcIixcblx0XHRcImFua2xlZFwiLFxuXHRcdFwiYW5udWFsaXplZFwiLFxuXHRcdFwiYW5vbnltaXNlZFwiLFxuXHRcdFwiYW50aG9sb2dpemVkXCIsXG5cdFx0XCJhbnRsZXJlZFwiLFxuXHRcdFwiYW51Y2xlYXRlZFwiLFxuXHRcdFwiYW52aWxlZFwiLFxuXHRcdFwiYW52aWxzaGFwZWRcIixcblx0XHRcImFwb3N0cm9waGlzZWRcIixcblx0XHRcImFwb3N0cm9waGl6ZWRcIixcblx0XHRcImFwcGxpcXVlZFwiLFxuXHRcdFwiYXBwcml6ZWRcIixcblx0XHRcImFyYml0cmF0ZWRcIixcblx0XHRcImFybW9yZWRcIixcblx0XHRcImFydGljbGVkXCIsXG5cdFx0XCJhc2hhbWVkXCIsXG5cdFx0XCJhc3NlbnRlZFwiLFxuXHRcdFwiYXRvbWlzZWRcIixcblx0XHRcImF0cm9waGllZFwiLFxuXHRcdFwiYXVyaWNsZWRcIixcblx0XHRcImF1cmljdWxhdGVkXCIsXG5cdFx0XCJhdXJpZmllZFwiLFxuXHRcdFwiYXV0b3BzaWVkXCIsXG5cdFx0XCJheGxlZFwiLFxuXHRcdFwiYmFiaWVkXCIsXG5cdFx0XCJiYWNraG9lZFwiLFxuXHRcdFwiYmFkbWFubmVyZWRcIixcblx0XHRcImJhZHRlbXBlcmVkXCIsXG5cdFx0XCJiYWx1c3RlcmVkXCIsXG5cdFx0XCJiYW5lZFwiLFxuXHRcdFwiYmFyY29kZWRcIixcblx0XHRcImJhcmVib25lZFwiLFxuXHRcdFwiYmFyZWZvb3RlZFwiLFxuXHRcdFwiYmFyZWxlZ2dlZFwiLFxuXHRcdFwiYmFybmFjbGVkXCIsXG5cdFx0XCJiYXlvbmV0ZWRcIixcblx0XHRcImJlYWR5ZXllZFwiLFxuXHRcdFwiYmVha2VkXCIsXG5cdFx0XCJiZWFuZWRcIixcblx0XHRcImJlYXRpZmllZFwiLFxuXHRcdFwiYmVhdXRpZmllZFwiLFxuXHRcdFwiYmVhdmVyZWRcIixcblx0XHRcImJlZFwiLFxuXHRcdFwiYmVkYW1uZWRcIixcblx0XHRcImJlZGVja2VkXCIsXG5cdFx0XCJiZWhvdmVkXCIsXG5cdFx0XCJiZWxhdGVkXCIsXG5cdFx0XCJiZWxsYm90dG9tZWRcIixcblx0XHRcImJlbGxzaGFwZWRcIixcblx0XHRcImJlbmlnaHRlZFwiLFxuXHRcdFwiYmVxdWVhdGhlZFwiLFxuXHRcdFwiYmVycmllZFwiLFxuXHRcdFwiYmVzcGVjdGFjbGVkXCIsXG5cdFx0XCJiZXdoaXNrZXJlZFwiLFxuXHRcdFwiYmlnaGVhcnRlZFwiLFxuXHRcdFwiYmlnbW91dGhlZFwiLFxuXHRcdFwiYmlnb3RlZFwiLFxuXHRcdFwiYmluZHdlZWRcIixcblx0XHRcImJpbnVjbGVhdGVkXCIsXG5cdFx0XCJiaW9wc2llZFwiLFxuXHRcdFwiYmlvdHVyYmVkXCIsXG5cdFx0XCJiaXBlZFwiLFxuXHRcdFwiYmlwaW5uYXRlZFwiLFxuXHRcdFwiYmlyZGZlZWRcIixcblx0XHRcImJpcmRzZWVkXCIsXG5cdFx0XCJiaXNlZ21lbnRlZFwiLFxuXHRcdFwiYml0dGVyaGVhcnRlZFwiLFxuXHRcdFwiYmxhYmJlcm1vdXRoZWRcIixcblx0XHRcImJsYWNraGVhcnRlZFwiLFxuXHRcdFwiYmxhZGVkXCIsXG5cdFx0XCJibGFua21pbmRlZFwiLFxuXHRcdFwiYmxlYXJ5ZXllZFwiLFxuXHRcdFwiYmxlZWRcIixcblx0XHRcImJsaXNzZWRcIixcblx0XHRcImJsb2JiZWRcIixcblx0XHRcImJsb25kaGFpcmVkXCIsXG5cdFx0XCJibG9vZGllZFwiLFxuXHRcdFwiYmxvb2RyZWRcIixcblx0XHRcImJsb29kc2hlZFwiLFxuXHRcdFwiYmx1ZWJsb29kZWRcIixcblx0XHRcImJvYXRzaGFwZWRcIixcblx0XHRcImJvYnNsZWRcIixcblx0XHRcImJvZGllZFwiLFxuXHRcdFwiYm9sZGhlYXJ0ZWRcIixcblx0XHRcImJvb2dpZWRcIixcblx0XHRcImJvb3NlZFwiLFxuXHRcdFwiYm9zb21lZFwiLFxuXHRcdFwiYm90dGxlZmVkXCIsXG5cdFx0XCJib3R0bGVmZWVkXCIsXG5cdFx0XCJib3R0bGVuZWNrZWRcIixcblx0XHRcImJvdWxkZXJlZFwiLFxuXHRcdFwiYm93bGVnZ2VkXCIsXG5cdFx0XCJib3dsc2hhcGVkXCIsXG5cdFx0XCJicmFuZGllZFwiLFxuXHRcdFwiYnJhdmVoZWFydGVkXCIsXG5cdFx0XCJicmVhc3RmZWRcIixcblx0XHRcImJyZWFzdGZlZWRcIixcblx0XHRcImJyZWVkXCIsXG5cdFx0XCJicmlnaHRleWVkXCIsXG5cdFx0XCJicmluZGxlZFwiLFxuXHRcdFwiYnJvYWRoZWFydGVkXCIsXG5cdFx0XCJicm9hZGxlYXZlZFwiLFxuXHRcdFwiYnJvYWRtaW5kZWRcIixcblx0XHRcImJyb2tlbmhlYXJ0ZWRcIixcblx0XHRcImJyb29tZWRcIixcblx0XHRcImJyb29td2VlZFwiLFxuXHRcdFwiYnVjY2FuZWRcIixcblx0XHRcImJ1Y2tza2lubmVkXCIsXG5cdFx0XCJidWNrdG9vdGhlZFwiLFxuXHRcdFwiYnVkZGllZFwiLFxuXHRcdFwiYnVmZmFsb2VkXCIsXG5cdFx0XCJidWdleWVkXCIsXG5cdFx0XCJidWdsZXdlZWRcIixcblx0XHRcImJ1Z3dlZWRcIixcblx0XHRcImJ1bGxldGluZWRcIixcblx0XHRcImJ1bmtlZFwiLFxuXHRcdFwiYnVzaWVkXCIsXG5cdFx0XCJidXR0ZXJmaW5nZXJlZFwiLFxuXHRcdFwiY2FiYmVkXCIsXG5cdFx0XCJjYWRkaWVkXCIsXG5cdFx0XCJjYWlybmVkXCIsXG5cdFx0XCJjYWxjaWZpZWRcIixcblx0XHRcImNhbmFsaXplZFwiLFxuXHRcdFwiY2FuZGllZFwiLFxuXHRcdFwiY2FubnVsYXRlZFwiLFxuXHRcdFwiY2Fub2VkXCIsXG5cdFx0XCJjYW5vcGllZFwiLFxuXHRcdFwiY2FudmFzZWRcIixcblx0XHRcImNhcGVkXCIsXG5cdFx0XCJjYXBzdWxhdGVkXCIsXG5cdFx0XCJjYXNzb2NrZWRcIixcblx0XHRcImNhc3RlbGxhdGVkXCIsXG5cdFx0XCJjYXRhYm9saXNlZFwiLFxuXHRcdFwiY2F0aGV0ZXJpc2VkXCIsXG5cdFx0XCJjYXVkYXRlZFwiLFxuXHRcdFwiY2VsbG1lZGlhdGVkXCIsXG5cdFx0XCJjZWxsdWxvc2VkXCIsXG5cdFx0XCJjZXJ0aWZpZWRcIixcblx0XHRcImNoYWdyaW5lZFwiLFxuXHRcdFwiY2hhbWJlcmVkXCIsXG5cdFx0XCJjaGVzdGVkXCIsXG5cdFx0XCJjaGV2cm9uZWRcIixcblx0XHRcImNoaWNrZW5mZWVkXCIsXG5cdFx0XCJjaGlja2VuaGVhcnRlZFwiLFxuXHRcdFwiY2hpY2t3ZWVkXCIsXG5cdFx0XCJjaGlsYmxhaW5lZFwiLFxuXHRcdFwiY2hpbGRiZWRcIixcblx0XHRcImNoaW5uZWRcIixcblx0XHRcImNocm9tYXRvZ3JhcGhlZFwiLFxuXHRcdFwiY2lsaWF0ZWRcIixcblx0XHRcImNpbmRlcmVkXCIsXG5cdFx0XCJjaW5ndWxhdGVkXCIsXG5cdFx0XCJjaXJjdW1zdGFuY2VkXCIsXG5cdFx0XCJjaXNnZW5kZXJlZFwiLFxuXHRcdFwiY2l0cnVsbGluYXRlZFwiLFxuXHRcdFwiY2xhcHBlcmVkXCIsXG5cdFx0XCJjbGFyaWZpZWRcIixcblx0XHRcImNsYXNzaWZpZWRcIixcblx0XHRcImNsYXdzaGFwZWRcIixcblx0XHRcImNsYXlzaXplZFwiLFxuXHRcdFwiY2xlYW5oZWFydGVkXCIsXG5cdFx0XCJjbGVhcm1pbmRlZFwiLFxuXHRcdFwiY2xlYXJzaWdodGVkXCIsXG5cdFx0XCJjbGljaGVkXCIsXG5cdFx0XCJjbG9kZGVkXCIsXG5cdFx0XCJjbG9pc3RlcmVkXCIsXG5cdFx0XCJjbG9zZWZpc3RlZFwiLFxuXHRcdFwiY2xvc2VoZWFydGVkXCIsXG5cdFx0XCJjbG9zZWxpcHBlZFwiLFxuXHRcdFwiY2xvc2Vtb3V0aGVkXCIsXG5cdFx0XCJjbG9zZXRlZFwiLFxuXHRcdFwiY2xvdWRzZWVkXCIsXG5cdFx0XCJjbHViZm9vdGVkXCIsXG5cdFx0XCJjbHVic2hhcGVkXCIsXG5cdFx0XCJjbHVlZFwiLFxuXHRcdFwiY29ja2V5ZWRcIixcblx0XHRcImNvZGlmaWVkXCIsXG5cdFx0XCJjb2VkXCIsXG5cdFx0XCJjb2V2b2x2ZWRcIixcblx0XHRcImNvZmZpbmVkXCIsXG5cdFx0XCJjb2lmZmVkXCIsXG5cdFx0XCJjb2luZmVjdGVkXCIsXG5cdFx0XCJjb2xkYmxvb2RlZFwiLFxuXHRcdFwiY29sZGhlYXJ0ZWRcIixcblx0XHRcImNvbGxhdGVyYWxpc2VkXCIsXG5cdFx0XCJjb2xvbmlhbGlzZWRcIixcblx0XHRcImNvbG9yY29kZWRcIixcblx0XHRcImNvbG9yaXNlZFwiLFxuXHRcdFwiY29sb3VyaXNlZFwiLFxuXHRcdFwiY29sdW1uZWRcIixcblx0XHRcImNvbW1vZGl0aXplZFwiLFxuXHRcdFwiY29tcGFjdGlmaWVkXCIsXG5cdFx0XCJjb21wYW5pb25lZFwiLFxuXHRcdFwiY29tcGxleGlvbmVkXCIsXG5cdFx0XCJjb25jZWl0ZWRcIixcblx0XHRcImNvbmNlcm5lZFwiLFxuXHRcdFwiY29uY3Vzc2VkXCIsXG5cdFx0XCJjb25lc2hhcGVkXCIsXG5cdFx0XCJjb25nZXN0ZWRcIixcblx0XHRcImNvbnRlbnRlZFwiLFxuXHRcdFwiY29udmV4ZWRcIixcblx0XHRcImNvcmFsbGVkXCIsXG5cdFx0XCJjb3J5bWJlZFwiLFxuXHRcdFwiY290dG9uc2VlZFwiLFxuXHRcdFwiY291bnRyaWZpZWRcIixcblx0XHRcImNvdW50cnlicmVkXCIsXG5cdFx0XCJjb3VydG1hcnRpYWxsZWRcIixcblx0XHRcImNvdmVkXCIsXG5cdFx0XCJjb3ZlcmFsbGVkXCIsXG5cdFx0XCJjb3dzaGVkXCIsXG5cdFx0XCJjb3ppZWRcIixcblx0XHRcImNyYWdnZWRcIixcblx0XHRcImNyYXlvbmVkXCIsXG5cdFx0XCJjcmVkZW50aWFsZWRcIixcblx0XHRcImNyZWVkXCIsXG5cdFx0XCJjcmVudWxhdGVkXCIsXG5cdFx0XCJjcmVzY2VudHNoYXBlZFwiLFxuXHRcdFwiY3Jlc3N3ZWVkXCIsXG5cdFx0XCJjcmV3ZWRcIixcblx0XHRcImNyaWNrZWRcIixcblx0XHRcImNyaXNwYXRlZFwiLFxuXHRcdFwiY3Jvc3NiYXJyZWRcIixcblx0XHRcImNyb3NzYmVkXCIsXG5cdFx0XCJjcm9zc2JyZWRcIixcblx0XHRcImNyb3NzYnJlZWRcIixcblx0XHRcImNyb3NzY2xhc3NpZmllZFwiLFxuXHRcdFwiY3Jvc3NleWVkXCIsXG5cdFx0XCJjcm9zc2ZlcnRpbGlzZWRcIixcblx0XHRcImNyb3NzZmVydGlsaXplZFwiLFxuXHRcdFwiY3Jvc3NpbmRleGVkXCIsXG5cdFx0XCJjcm9zc2xlZ2dlZFwiLFxuXHRcdFwiY3Jvc3NzaGFwZWRcIixcblx0XHRcImNyb3Nzc3RyYXRpZmllZFwiLFxuXHRcdFwiY3Jvc3NzdHJpYXRlZFwiLFxuXHRcdFwiY3JvdGNoZWRcIixcblx0XHRcImNydWNpZmllZFwiLFxuXHRcdFwiY3J1ZWxoZWFydGVkXCIsXG5cdFx0XCJjcnV0Y2hlZFwiLFxuXHRcdFwiY3ViZXNoYXBlZFwiLFxuXHRcdFwiY3ViaWZpZWRcIixcblx0XHRcImN1Y2tvbGRlZFwiLFxuXHRcdFwiY3VjdW1iZXJzaGFwZWRcIixcblx0XHRcImN1bWJlcmVkXCIsXG5cdFx0XCJjdW1pbnNlZWRcIixcblx0XHRcImN1cHNoYXBlZFwiLFxuXHRcdFwiY3VyYXRlZFwiLFxuXHRcdFwiY3VyZGVkXCIsXG5cdFx0XCJjdXJmZXdlZFwiLFxuXHRcdFwiY3VybGljdWVkXCIsXG5cdFx0XCJjdXJseWN1ZWRcIixcblx0XHRcImN1cnJpZWRcIixcblx0XHRcImN1cnRzaWVkXCIsXG5cdFx0XCJjeWNsaXplZFwiLFxuXHRcdFwiY3lsaW5kZXJzaGFwZWRcIixcblx0XHRcImRhbWVkXCIsXG5cdFx0XCJkYW5kaWZpZWRcIixcblx0XHRcImRhbmdlcmVkXCIsXG5cdFx0XCJkYXJraGVhcnRlZFwiLFxuXHRcdFwiZGF5YmVkXCIsXG5cdFx0XCJkYXlsaWdodGVkXCIsXG5cdFx0XCJkZWFjaWRpZmllZFwiLFxuXHRcdFwiZGVhY3lsYXRlZFwiLFxuXHRcdFwiZGVhZGhlYXJ0ZWRcIixcblx0XHRcImRlYWRsaW5lZFwiLFxuXHRcdFwiZGVhbWluaXplZFwiLFxuXHRcdFwiZGVhdGhiZWRcIixcblx0XHRcImRlY2FsY2lmaWVkXCIsXG5cdFx0XCJkZWNlcnRpZmllZFwiLFxuXHRcdFwiZGVja2JlZFwiLFxuXHRcdFwiZGVjbGFzc2lmaWVkXCIsXG5cdFx0XCJkZWNsdXRjaGVkXCIsXG5cdFx0XCJkZWNvbG91cmF0ZWRcIixcblx0XHRcImRlY3JlZWRcIixcblx0XHRcImRlZWRcIixcblx0XHRcImRlZXByb290ZWRcIixcblx0XHRcImRlZXBzZWF0ZWRcIixcblx0XHRcImRlZmVuc2VkXCIsXG5cdFx0XCJkZWZpZWRcIixcblx0XHRcImRlZmxleGVkXCIsXG5cdFx0XCJkZWdsYW1vcmlzZWRcIixcblx0XHRcImRlZ3Vua2lmaWVkXCIsXG5cdFx0XCJkZWh1bWlkaWZpZWRcIixcblx0XHRcImRlaWZpZWRcIixcblx0XHRcImRlbGVkXCIsXG5cdFx0XCJkZWxlZ2l0aW1pc2VkXCIsXG5cdFx0XCJkZW1vZGVkXCIsXG5cdFx0XCJkZW15c3RpZmllZFwiLFxuXHRcdFwiZGVuYXNhbGl6ZWRcIixcblx0XHRcImRlbmF6aWZpZWRcIixcblx0XHRcImRlbmllZFwiLFxuXHRcdFwiZGVuaXRyaWZpZWRcIixcblx0XHRcImRlbnRpY3VsYXRlZFwiLFxuXHRcdFwiZGVzZWVkXCIsXG5cdFx0XCJkZXNleHVhbGlzZWRcIixcblx0XHRcImRlc3Bvc2l0ZWRcIixcblx0XHRcImRldG94aWZpZWRcIixcblx0XHRcImRldWNlZFwiLFxuXHRcdFwiZGV2aXRyaWZpZWRcIixcblx0XHRcImRld2xhcHBlZFwiLFxuXHRcdFwiZGV6aW5jaWZpZWRcIixcblx0XHRcImRpYWdvbmFsaXNlZFwiLFxuXHRcdFwiZGlhbG9ndWVkXCIsXG5cdFx0XCJkaWVkXCIsXG5cdFx0XCJkaWdpdGF0ZWRcIixcblx0XHRcImRpZ25pZmllZFwiLFxuXHRcdFwiZGlsbGVkXCIsXG5cdFx0XCJkaW13aXR0ZWRcIixcblx0XHRcImRpcGh0aG9uZ2VkXCIsXG5cdFx0XCJkaXNhZmZlY3RlZFwiLFxuXHRcdFwiZGlzYWdncmVnYXRlZFwiLFxuXHRcdFwiZGlzYXJyYXllZFwiLFxuXHRcdFwiZGlzY2FsY2VkXCIsXG5cdFx0XCJkaXNjb2xvcmF0ZWRcIixcblx0XHRcImRpc2NvbG91cmF0ZWRcIixcblx0XHRcImRpc2NzaGFwZWRcIixcblx0XHRcImRpc2Vhc2VkXCIsXG5cdFx0XCJkaXNlbWJvZGllZFwiLFxuXHRcdFwiZGlzZW5jdW1iZXJlZFwiLFxuXHRcdFwiZGlzZnJhbmNoaXNlZFwiLFxuXHRcdFwiZGlza3NoYXBlZFwiLFxuXHRcdFwiZGlzcHJvcG9ydGlvbmF0ZWRcIixcblx0XHRcImRpc3Byb3BvcnRpb25lZFwiLFxuXHRcdFwiZGlzcXVhbGlmaWVkXCIsXG5cdFx0XCJkaXN0ZW1wZXJlZFwiLFxuXHRcdFwiZGlzdHJpY3RlZFwiLFxuXHRcdFwiZGl2ZXJzaWZpZWRcIixcblx0XHRcImRpdmVydGljdWxhdGVkXCIsXG5cdFx0XCJkaXZlc3RlZFwiLFxuXHRcdFwiZGl2dmllZFwiLFxuXHRcdFwiZGl6emllZFwiLFxuXHRcdFwiZG9nZ2VkXCIsXG5cdFx0XCJkb2dzYm9kaWVkXCIsXG5cdFx0XCJkb2dzbGVkXCIsXG5cdFx0XCJkb21lc2hhcGVkXCIsXG5cdFx0XCJkb21pY2lsZWRcIixcblx0XHRcImRvcm1lcmVkXCIsXG5cdFx0XCJkb3VibGViYXJyZWxsZWRcIixcblx0XHRcImRvdWJsZXN0cmFuZGVkXCIsXG5cdFx0XCJkb3VibGV3YWxsZWRcIixcblx0XHRcImRvd25oZWFydGVkXCIsXG5cdFx0XCJkdWNrYmlsbGVkXCIsXG5cdFx0XCJlYXJlZFwiLFxuXHRcdFwiZWNoZWxvbmVkXCIsXG5cdFx0XCJlZGRpZWRcIixcblx0XHRcImVkaWZpZWRcIixcblx0XHRcImVnZ3NoYXBlZFwiLFxuXHRcdFwiZWxhc3RpY2F0ZWRcIixcblx0XHRcImVsZWN0cmlmaWVkXCIsXG5cdFx0XCJlbGVnaXplZFwiLFxuXHRcdFwiZW1iZWRcIixcblx0XHRcImVtYm9kaWVkXCIsXG5cdFx0XCJlbWNlZWRcIixcblx0XHRcImVtcGFuZWxlZFwiLFxuXHRcdFwiZW1wYW5lbGxlZFwiLFxuXHRcdFwiZW1wdHloZWFydGVkXCIsXG5cdFx0XCJlbXVsc2lmaWVkXCIsXG5cdFx0XCJlbmdpbmVkXCIsXG5cdFx0XCJlbm5vYmxlZFwiLFxuXHRcdFwiZW52aWVkXCIsXG5cdFx0XCJlbnp5bWVjYXRhbHlzZWRcIixcblx0XHRcImVuenltZWNhdGFseXplZFwiLFxuXHRcdFwiZXBpdG9taXNlZFwiLFxuXHRcdFwiZXBveGlkaXplZFwiLFxuXHRcdFwiZXBveGllZFwiLFxuXHRcdFwiZXRoZXJpc2VkXCIsXG5cdFx0XCJldGhlcml6ZWRcIixcblx0XHRcImV2aWxoZWFydGVkXCIsXG5cdFx0XCJldmlsbWluZGVkXCIsXG5cdFx0XCJleGNlZWRcIixcblx0XHRcImV4ZW1wbGlmaWVkXCIsXG5cdFx0XCJleHBvbmVudGlhdGVkXCIsXG5cdFx0XCJleHB1cmdhdGVkXCIsXG5cdFx0XCJleHRyYXZhc2F0ZWRcIixcblx0XHRcImV4dHJhdmVydGVkXCIsXG5cdFx0XCJleHRyb3ZlcnRlZFwiLFxuXHRcdFwiZmFibGVkXCIsXG5cdFx0XCJmYWNlbGlmdGVkXCIsXG5cdFx0XCJmYWNzaW1pbGVkXCIsXG5cdFx0XCJmYWludGhlYXJ0ZWRcIixcblx0XHRcImZhbGNhdGVkXCIsXG5cdFx0XCJmYWxzZWhlYXJ0ZWRcIixcblx0XHRcImZhbHNpZmllZFwiLFxuXHRcdFwiZmFtZWRcIixcblx0XHRcImZhbmNpZmllZFwiLFxuXHRcdFwiZmFuZ2VkXCIsXG5cdFx0XCJmYW5zaGFwZWRcIixcblx0XHRcImZhbnRhc2llZFwiLFxuXHRcdFwiZmFyc2lnaHRlZFwiLFxuXHRcdFwiZmF0ZWRcIixcblx0XHRcImZhdHRlZFwiLFxuXHRcdFwiZmF6ZWRcIixcblx0XHRcImZlYXRoZXJiZWRcIixcblx0XHRcImZlZFwiLFxuXHRcdFwiZmVkZXJhbGl6ZWRcIixcblx0XHRcImZlZWJsZWhlYXJ0ZWRcIixcblx0XHRcImZlZWJsZW1pbmRlZFwiLFxuXHRcdFwiZmVlYmxld2l0dGVkXCIsXG5cdFx0XCJmZWVkXCIsXG5cdFx0XCJmZW5kZXJlZFwiLFxuXHRcdFwiZmVuZXN0cmF0ZWRcIixcblx0XHRcImZlcnJpZWRcIixcblx0XHRcImZldmVyZWRcIixcblx0XHRcImZpYmVyZWRcIixcblx0XHRcImZpYnJlZFwiLFxuXHRcdFwiZmlja2xlaGVhcnRlZFwiLFxuXHRcdFwiZmllcmNlaGVhcnRlZFwiLFxuXHRcdFwiZmlnZ2VkXCIsXG5cdFx0XCJmaWxpZ3JlZWRcIixcblx0XHRcImZpbHRlcmZlZWRcIixcblx0XHRcImZpcmV3ZWVkXCIsXG5cdFx0XCJmaXJtaGVhcnRlZFwiLFxuXHRcdFwiZmlzc3VyZWRcIixcblx0XHRcImZsYW5nZWRcIixcblx0XHRcImZsYW5uZWxlZFwiLFxuXHRcdFwiZmxhbm5lbGxlZFwiLFxuXHRcdFwiZmxhdGJlZFwiLFxuXHRcdFwiZmxhdGZvb3RlZFwiLFxuXHRcdFwiZmxhdHRlZFwiLFxuXHRcdFwiZmxheGVuaGFpcmVkXCIsXG5cdFx0XCJmbGF4c2VlZFwiLFxuXHRcdFwiZmxheHdlZWRcIixcblx0XHRcImZsaWdodGVkXCIsXG5cdFx0XCJmbG9vZGdlbmVyYXRlZFwiLFxuXHRcdFwiZmxvd2VyYmVkXCIsXG5cdFx0XCJmbHVpZGlzZWRcIixcblx0XHRcImZsdWlkaXplZFwiLFxuXHRcdFwiZmx1cnJpZWRcIixcblx0XHRcImZvYmJlZFwiLFxuXHRcdFwiZm9uZGVkXCIsXG5cdFx0XCJmb3JjZWZlZWRcIixcblx0XHRcImZvcmVzaG9ydGVuZWRcIixcblx0XHRcImZvcmVzaWdodGVkXCIsXG5cdFx0XCJmb3Jrc2hhcGVkXCIsXG5cdFx0XCJmb3JtZmVlZFwiLFxuXHRcdFwiZm9ydGlmaWVkXCIsXG5cdFx0XCJmb3J0cmVzc2VkXCIsXG5cdFx0XCJmb3VsbW91dGhlZFwiLFxuXHRcdFwiZm91cmV5ZWRcIixcblx0XHRcImZveHRhaWxlZFwiLFxuXHRcdFwiZnJhY3Rpb25hbGlzZWRcIixcblx0XHRcImZyYWN0aW9uYWxpemVkXCIsXG5cdFx0XCJmcmFua2hlYXJ0ZWRcIixcblx0XHRcImZyZWVkXCIsXG5cdFx0XCJmcmVlaGVhcnRlZFwiLFxuXHRcdFwiZnJlZXNwaXJpdGVkXCIsXG5cdFx0XCJmcmVuemllZFwiLFxuXHRcdFwiZnJpZXplZFwiLFxuXHRcdFwiZnJvbnRpZXJlZFwiLFxuXHRcdFwiZnJ1Y3RpZmllZFwiLFxuXHRcdFwiZnJ1bXBlZFwiLFxuXHRcdFwiZnVsbGJsb29kZWRcIixcblx0XHRcImZ1bGxib2RpZWRcIixcblx0XHRcImZ1bGxmbGVkZ2VkXCIsXG5cdFx0XCJmdWxsaGVhcnRlZFwiLFxuXHRcdFwiZnVubmVsc2hhcGVkXCIsXG5cdFx0XCJmdXJuYWNlZFwiLFxuXHRcdFwiZ2FpdGVyZWRcIixcblx0XHRcImdhbGxlcmllZFwiLFxuXHRcdFwiZ2FuZ2xpYXRlZFwiLFxuXHRcdFwiZ2FuZ2xpb25hdGVkXCIsXG5cdFx0XCJnYW5ncmVuZWRcIixcblx0XHRcImdhcmdveWxlZFwiLFxuXHRcdFwiZ2FzaWZpZWRcIixcblx0XHRcImdhdW50ZWRcIixcblx0XHRcImdhdW50bGV0ZWRcIixcblx0XHRcImdhdXplZFwiLFxuXHRcdFwiZ2F2ZWxsZWRcIixcblx0XHRcImdlbGF0aW5pc2VkXCIsXG5cdFx0XCJnZW1tZWRcIixcblx0XHRcImdlbmRlcml6ZWRcIixcblx0XHRcImdlbnRsZWRcIixcblx0XHRcImdlbnRsZWhlYXJ0ZWRcIixcblx0XHRcImdlcnJ5bWFuZGVyZWRcIixcblx0XHRcImdsYWRoZWFydGVkXCIsXG5cdFx0XCJnbGFtb3JlZFwiLFxuXHRcdFwiZ2xvYmVkXCIsXG5cdFx0XCJnbG9yaWVkXCIsXG5cdFx0XCJnbG9yaWZpZWRcIixcblx0XHRcImdseWNvc3lsYXRlZFwiLFxuXHRcdFwiZ29hdGVlZFwiLFxuXHRcdFwiZ29ibGV0c2hhcGVkXCIsXG5cdFx0XCJnb2RzcGVlZFwiLFxuXHRcdFwiZ29vZGhlYXJ0ZWRcIixcblx0XHRcImdvb2RodW1vcmVkXCIsXG5cdFx0XCJnb29kaHVtb3VyZWRcIixcblx0XHRcImdvb2RuYXR1cmVkXCIsXG5cdFx0XCJnb29kdGVtcGVyZWRcIixcblx0XHRcImdvb3NlZFwiLFxuXHRcdFwiZ29vc2VuZWNrZWRcIixcblx0XHRcImdvdXR3ZWVkXCIsXG5cdFx0XCJncmFpbmZlZFwiLFxuXHRcdFwiZ3JhbW1hdGljYWxpemVkXCIsXG5cdFx0XCJncmFwZXNlZWRcIixcblx0XHRcImdyYXRpZmllZFwiLFxuXHRcdFwiZ3JhdmVkXCIsXG5cdFx0XCJncmF2ZWxiZWRcIixcblx0XHRcImdyYXloYWlyZWRcIixcblx0XHRcImdyZWF0aGVhcnRlZFwiLFxuXHRcdFwiZ3JlZWRcIixcblx0XHRcImdyZWVud2VlZFwiLFxuXHRcdFwiZ3JvbW1ldGVkXCIsXG5cdFx0XCJncm91bmRzcGVlZFwiLFxuXHRcdFwiZ3JvdmVkXCIsXG5cdFx0XCJncnVmZmVkXCIsXG5cdFx0XCJndWlsZWRcIixcblx0XHRcImd1bGxlZFwiLFxuXHRcdFwiZ3Vtc2hvZWRcIixcblx0XHRcImd1bmtob2xlZFwiLFxuXHRcdFwiZ3Vzc2llZFwiLFxuXHRcdFwiZ3V5ZWRcIixcblx0XHRcImd5cm9zdGFiaWxpemVkXCIsXG5cdFx0XCJoYWNrbmV5ZWRcIixcblx0XHRcImhhZ2dlZFwiLFxuXHRcdFwiaGFpcmVkXCIsXG5cdFx0XCJoYWxmY2l2aWxpemVkXCIsXG5cdFx0XCJoYWxmaGVhcnRlZFwiLFxuXHRcdFwiaGFsZndpdHRlZFwiLFxuXHRcdFwiaGFsb2VkXCIsXG5cdFx0XCJoYW5kYmFsbGVkXCIsXG5cdFx0XCJoYW5kZmVkXCIsXG5cdFx0XCJoYW5kZmVlZFwiLFxuXHRcdFwiaGFyZGNvZGVkXCIsXG5cdFx0XCJoYXJkaGVhcnRlZFwiLFxuXHRcdFwiaGFyZG5vc2VkXCIsXG5cdFx0XCJoYXJlZFwiLFxuXHRcdFwiaGFyZWxpcHBlZFwiLFxuXHRcdFwiaGFzdGVkXCIsXG5cdFx0XCJoYXRyZWRcIixcblx0XHRcImhhdW5jaGVkXCIsXG5cdFx0XCJoYXdrZXllZFwiLFxuXHRcdFwiaGF5c2VlZFwiLFxuXHRcdFwiaGF5d2VlZFwiLFxuXHRcdFwiaGVhcnNlZFwiLFxuXHRcdFwiaGVhcnRlZFwiLFxuXHRcdFwiaGVhcnRzaGFwZWRcIixcblx0XHRcImhlYXZlbmx5bWluZGVkXCIsXG5cdFx0XCJoZWF2eWZvb3RlZFwiLFxuXHRcdFwiaGVhdnloZWFydGVkXCIsXG5cdFx0XCJoZWVkXCIsXG5cdFx0XCJoZWlyZWRcIixcblx0XHRcImhlaXN0ZWRcIixcblx0XHRcImhlbGljb3B0ZXJlZFwiLFxuXHRcdFwiaGVsbWVkXCIsXG5cdFx0XCJoZWxtZXRlZFwiLFxuXHRcdFwiaGVtYWdnbHV0aW5hdGVkXCIsXG5cdFx0XCJoZW1vbHl6ZWRcIixcblx0XHRcImhlbXBzZWVkXCIsXG5cdFx0XCJoZW1wd2VlZFwiLFxuXHRcdFwiaGVwYXJpbmlzZWRcIixcblx0XHRcImhlcGFyaW5pemVkXCIsXG5cdFx0XCJoZXJiZWRcIixcblx0XHRcImhpZ2hoZWVsZWRcIixcblx0XHRcImhpZ2htaW5kZWRcIixcblx0XHRcImhpZ2hwcmljZWRcIixcblx0XHRcImhpZ2hzcGVlZFwiLFxuXHRcdFwiaGlnaHNwaXJpdGVkXCIsXG5cdFx0XCJoaWxsZWRcIixcblx0XHRcImhpcHBlZFwiLFxuXHRcdFwiaGlzcGFuaWNpc2VkXCIsXG5cdFx0XCJob2NrZWRcIixcblx0XHRcImhvZWRcIixcblx0XHRcImhvZ3dlZWRcIixcblx0XHRcImhvbHN0ZXJlZFwiLFxuXHRcdFwiaG9tYWdlZFwiLFxuXHRcdFwiaG9vZG9vZWRcIixcblx0XHRcImhvb2ZlZFwiLFxuXHRcdFwiaG9va25vc2VkXCIsXG5cdFx0XCJob292ZWRcIixcblx0XHRcImhvcm5lZFwiLFxuXHRcdFwiaG9ycmlmaWVkXCIsXG5cdFx0XCJob3JzZXNob2VkXCIsXG5cdFx0XCJob3JzZXdlZWRcIixcblx0XHRcImhvdGJlZFwiLFxuXHRcdFwiaG90Ymxvb2RlZFwiLFxuXHRcdFwiaG90aGVhcnRlZFwiLFxuXHRcdFwiaG90dGVkXCIsXG5cdFx0XCJob3R0ZW1wZXJlZFwiLFxuXHRcdFwiaHVlZFwiLFxuXHRcdFwiaHVtYW5zaXplZFwiLFxuXHRcdFwiaHVtaWRpZmllZFwiLFxuXHRcdFwiaHVtcGVkXCIsXG5cdFx0XCJodW5kcmVkXCIsXG5cdFx0XCJodXRjaGVkXCIsXG5cdFx0XCJoeXBlcmluZmxhdGVkXCIsXG5cdFx0XCJoeXBlcnBpZ21lbnRlZFwiLFxuXHRcdFwiaHlwZXJzdGltdWxhdGVkXCIsXG5cdFx0XCJoeXBlcnRyb3BoaWVkXCIsXG5cdFx0XCJoeXBoZW5lZFwiLFxuXHRcdFwiaHlwb3BoeXNlY3RvbWlzZWRcIixcblx0XHRcImh5cG9waHlzZWN0b21pemVkXCIsXG5cdFx0XCJoeXBvcGlnbWVudGVkXCIsXG5cdFx0XCJoeXBvc3RhdGlzZWRcIixcblx0XHRcImh5c3RlcmVjdG9taXplZFwiLFxuXHRcdFwiaWNvbmlmaWVkXCIsXG5cdFx0XCJpY29uaXNlZFwiLFxuXHRcdFwiaWNvbml6ZWRcIixcblx0XHRcImlkZW9sb2dpc2VkXCIsXG5cdFx0XCJpbGxicmVkXCIsXG5cdFx0XCJpbGxjb25jZWl2ZWRcIixcblx0XHRcImlsbGRlZmluZWRcIixcblx0XHRcImlsbGRpc3Bvc2VkXCIsXG5cdFx0XCJpbGxlcXVpcHBlZFwiLFxuXHRcdFwiaWxsZmF0ZWRcIixcblx0XHRcImlsbGZhdm9yZWRcIixcblx0XHRcImlsbGZhdm91cmVkXCIsXG5cdFx0XCJpbGxmbGF2b3JlZFwiLFxuXHRcdFwiaWxsZnVybmlzaGVkXCIsXG5cdFx0XCJpbGxodW1vcmVkXCIsXG5cdFx0XCJpbGxodW1vdXJlZFwiLFxuXHRcdFwiaWxsaW1pdGVkXCIsXG5cdFx0XCJpbGxtYW5uZXJlZFwiLFxuXHRcdFwiaWxsbmF0dXJlZFwiLFxuXHRcdFwiaWxsb21lbmVkXCIsXG5cdFx0XCJpbGxwcm9wb3J0aW9uZWRcIixcblx0XHRcImlsbHF1YWxpZmllZFwiLFxuXHRcdFwiaWxsc2NlbnRlZFwiLFxuXHRcdFwiaWxsdGVtcGVyZWRcIixcblx0XHRcImlsbHVtZWRcIixcblx0XHRcImlsbHVzaW9uZWRcIixcblx0XHRcImltYmVkXCIsXG5cdFx0XCJpbWJvc3NlZFwiLFxuXHRcdFwiaW1idWVkXCIsXG5cdFx0XCJpbW1hdHVyZWRcIixcblx0XHRcImltcGFzc2lvbmVkXCIsXG5cdFx0XCJpbXBlbmV0cmF0ZWRcIixcblx0XHRcImltcGVyZmVjdGVkXCIsXG5cdFx0XCJpbXBlcmlhbGlzZWRcIixcblx0XHRcImltcGVydHVyYmVkXCIsXG5cdFx0XCJpbXBvd2VyZWRcIixcblx0XHRcImltcHV0ZWRcIixcblx0XHRcImluYXJ0aWN1bGF0ZWRcIixcblx0XHRcImluYnJlZFwiLFxuXHRcdFwiaW5icmVlZFwiLFxuXHRcdFwiaW5jYXBzdWxhdGVkXCIsXG5cdFx0XCJpbmNhc2VkXCIsXG5cdFx0XCJpbmNydXN0YXRlZFwiLFxuXHRcdFwiaW5jcnVzdGVkXCIsXG5cdFx0XCJpbmRlYnRlZFwiLFxuXHRcdFwiaW5kZWVkXCIsXG5cdFx0XCJpbmRlbW5pZmllZFwiLFxuXHRcdFwiaW5kZW50dXJlZFwiLFxuXHRcdFwiaW5kaWdlc3RlZFwiLFxuXHRcdFwiaW5kaXNwb3NlZFwiLFxuXHRcdFwiaW5leHBlcmllbmNlZFwiLFxuXHRcdFwiaW5mcmFyZWRcIixcblx0XHRcImludGVuc2lmaWVkXCIsXG5cdFx0XCJpbnRlbnRpb25lZFwiLFxuXHRcdFwiaW50ZXJiZWRkZWRcIixcblx0XHRcImludGVyYnJlZFwiLFxuXHRcdFwiaW50ZXJicmVlZFwiLFxuXHRcdFwiaW50ZXJsdWRlZFwiLFxuXHRcdFwiaW50cm92ZXJ0ZWRcIixcblx0XHRcImludXJlZFwiLFxuXHRcdFwiaW52ZW50b3JpZWRcIixcblx0XHRcImlvZGluYXRlZFwiLFxuXHRcdFwiaW9kaXNlZFwiLFxuXHRcdFwiaXJrZWRcIixcblx0XHRcImlyb25maXN0ZWRcIixcblx0XHRcImlyb253ZWVkXCIsXG5cdFx0XCJpdGNod2VlZFwiLFxuXHRcdFwiaXZpZWRcIixcblx0XHRcIml2eXdlZWRcIixcblx0XHRcImphZ2dlZFwiLFxuXHRcdFwiamVsbGlmaWVkXCIsXG5cdFx0XCJqZXJzZXllZFwiLFxuXHRcdFwiamV0bGFnZ2VkXCIsXG5cdFx0XCJqZXRwcm9wZWxsZWRcIixcblx0XHRcImpld2VsZWRcIixcblx0XHRcImpld2VsbGVkXCIsXG5cdFx0XCJqZXdlbHdlZWRcIixcblx0XHRcImppZ2dlcmVkXCIsXG5cdFx0XCJqaW1teXdlZWRcIixcblx0XHRcImppbXNvbndlZWRcIixcblx0XHRcImpvaW50d2VlZFwiLFxuXHRcdFwiam95d2VlZFwiLFxuXHRcdFwianVuZ2xlZFwiLFxuXHRcdFwianVyaWVkXCIsXG5cdFx0XCJqdXN0aWNld2VlZFwiLFxuXHRcdFwianVzdGlmaWVkXCIsXG5cdFx0XCJrYXJzdGlmaWVkXCIsXG5cdFx0XCJrZXJjaGllZmVkXCIsXG5cdFx0XCJrZXR0bGVzaGFwZWRcIixcblx0XHRcImtpYmJsZWRcIixcblx0XHRcImtpZG5leXNoYXBlZFwiLFxuXHRcdFwia2ltb25vZWRcIixcblx0XHRcImtpbmRoZWFydGVkXCIsXG5cdFx0XCJraW5kcmVkXCIsXG5cdFx0XCJraW5nc2l6ZWRcIixcblx0XHRcImtpcnRsZWRcIixcblx0XHRcImtuYWNrZWRcIixcblx0XHRcImtuYXB3ZWVkXCIsXG5cdFx0XCJrbmVlZFwiLFxuXHRcdFwia25vYmJlZFwiLFxuXHRcdFwia25vYndlZWRcIixcblx0XHRcImtub3B3ZWVkXCIsXG5cdFx0XCJrbm90d2VlZFwiLFxuXHRcdFwibGFrZWJlZFwiLFxuXHRcdFwibGFrZXdlZWRcIixcblx0XHRcImxhbWVkXCIsXG5cdFx0XCJsYW1lbGxhdGVkXCIsXG5cdFx0XCJsYW5jZXNoYXBlZFwiLFxuXHRcdFwibGFuY2V0ZWRcIixcblx0XHRcImxhbmRiYXNlZFwiLFxuXHRcdFwibGFwZWxlZFwiLFxuXHRcdFwibGFwZWxsZWRcIixcblx0XHRcImxhcmdlaGVhcnRlZFwiLFxuXHRcdFwibGFyaWF0ZWRcIixcblx0XHRcImxhc2VkXCIsXG5cdFx0XCJsYXR0aWNlZFwiLFxuXHRcdFwibGF1ZGVkXCIsXG5cdFx0XCJsYXZhZ2VkXCIsXG5cdFx0XCJsYXZlbmRlcmVkXCIsXG5cdFx0XCJsYXduZWRcIixcblx0XHRcImxlZFwiLFxuXHRcdFwibGVmdGV5ZWRcIixcblx0XHRcImxlZ2l0aW1hdGlzZWRcIixcblx0XHRcImxlZ2l0aW1hdGl6ZWRcIixcblx0XHRcImxlaXN1cmVkXCIsXG5cdFx0XCJsZW5zc2hhcGVkXCIsXG5cdFx0XCJsZXZlZWRcIixcblx0XHRcImxldmllZFwiLFxuXHRcdFwibGljaGVuZWRcIixcblx0XHRcImxpY2hlbml6ZWRcIixcblx0XHRcImxpZGRlZFwiLFxuXHRcdFwibGlmZXNpemVkXCIsXG5cdFx0XCJsaWdodGZpbmdlcmVkXCIsXG5cdFx0XCJsaWdodGZvb3RlZFwiLFxuXHRcdFwibGlnaHRoZWFydGVkXCIsXG5cdFx0XCJsaWdodG1pbmRlZFwiLFxuXHRcdFwibGlnaHRzcGVlZFwiLFxuXHRcdFwibGlnbmlmaWVkXCIsXG5cdFx0XCJsaWtlbWluZGVkXCIsXG5cdFx0XCJsaWx5bGl2ZXJlZFwiLFxuXHRcdFwibGltYmVkXCIsXG5cdFx0XCJsaW5lYXJpc2VkXCIsXG5cdFx0XCJsaW5lYXJpemVkXCIsXG5cdFx0XCJsaW5lZmVlZFwiLFxuXHRcdFwibGluc2VlZFwiLFxuXHRcdFwibGlvbmhlYXJ0ZWRcIixcblx0XHRcImxpcXVlZmllZFwiLFxuXHRcdFwibGlxdWlmaWVkXCIsXG5cdFx0XCJsaXRoaWZpZWRcIixcblx0XHRcImxpdmVyaWVkXCIsXG5cdFx0XCJsb2JiaWVkXCIsXG5cdFx0XCJsb2Nvd2VlZFwiLFxuXHRcdFwibG9uZ2FybWVkXCIsXG5cdFx0XCJsb25naGFpcmVkXCIsXG5cdFx0XCJsb25naG9ybmVkXCIsXG5cdFx0XCJsb25nbGVnZ2VkXCIsXG5cdFx0XCJsb25nbmVja2VkXCIsXG5cdFx0XCJsb25nc2lnaHRlZFwiLFxuXHRcdFwibG9uZ3dpbmRlZFwiLFxuXHRcdFwibG9wc2lkZWRcIixcblx0XHRcImxvdWRtb3V0aGVkXCIsXG5cdFx0XCJsb3V2ZXJlZFwiLFxuXHRcdFwibG91dnJlZFwiLFxuXHRcdFwibG93YnJlZFwiLFxuXHRcdFwibG93cHJpY2VkXCIsXG5cdFx0XCJsb3dzcGlyaXRlZFwiLFxuXHRcdFwibG96ZW5nZWRcIixcblx0XHRcImx1bmF0ZWRcIixcblx0XHRcImx5cmF0ZWRcIixcblx0XHRcImx5c2luYXRlZFwiLFxuXHRcdFwibWFjZWRcIixcblx0XHRcIm1hY3JvYWdncmVnYXRlZFwiLFxuXHRcdFwibWFjcm9kaXNzZWN0ZWRcIixcblx0XHRcIm1hY3VsYXRlZFwiLFxuXHRcdFwibWFkd2VlZFwiLFxuXHRcdFwibWFnbmlmaWVkXCIsXG5cdFx0XCJtYWlkZW53ZWVkXCIsXG5cdFx0XCJtYWxhZGFwdGVkXCIsXG5cdFx0XCJtYWxhZGp1c3RlZFwiLFxuXHRcdFwibWFsbm91cmlzaGVkXCIsXG5cdFx0XCJtYWxyb3RhdGVkXCIsXG5cdFx0XCJtYW5lZFwiLFxuXHRcdFwibWFubmVyZWRcIixcblx0XHRcIm1hbnVldmVyZWRcIixcblx0XHRcIm1hbnlodWVkXCIsXG5cdFx0XCJtYW55c2hhcGVkXCIsXG5cdFx0XCJtYW55c2lkZWRcIixcblx0XHRcIm1hc3RlZFwiLFxuXHRcdFwibWVhbHltb3V0aGVkXCIsXG5cdFx0XCJtZWFuc3Bpcml0ZWRcIixcblx0XHRcIm1lbWJlcmVkXCIsXG5cdFx0XCJtZW1icmFuZWRcIixcblx0XHRcIm1ldGFsZWRcIixcblx0XHRcIm1ldGFsaXplZFwiLFxuXHRcdFwibWV0YWxsaXNlZFwiLFxuXHRcdFwibWV0YWxsaXplZFwiLFxuXHRcdFwibWV0YW1lcml6ZWRcIixcblx0XHRcIm1ldGF0aGVzaXplZFwiLFxuXHRcdFwibWV0ZWRcIixcblx0XHRcIm1ldGh5bGF0ZWRcIixcblx0XHRcIm1ldHRsZWRcIixcblx0XHRcIm1pY3JvYnJlY2NpYXRlZFwiLFxuXHRcdFwibWljcm9taW5pYXR1cml6ZWRcIixcblx0XHRcIm1pY3Jvc3RyYXRpZmllZFwiLFxuXHRcdFwibWlkZGxlYWdlZFwiLFxuXHRcdFwibWlkc2l6ZWRcIixcblx0XHRcIm1pZmZlZFwiLFxuXHRcdFwibWlsZGhlYXJ0ZWRcIixcblx0XHRcIm1pbGt3ZWVkXCIsXG5cdFx0XCJtaW5pc2tpcnRlZFwiLFxuXHRcdFwibWlzYWN0aXZhdGVkXCIsXG5cdFx0XCJtaXNhbGlnbmVkXCIsXG5cdFx0XCJtaXNjaGllZmVkXCIsXG5cdFx0XCJtaXNjbGFzc2lmaWVkXCIsXG5cdFx0XCJtaXNkZWVkXCIsXG5cdFx0XCJtaXNkZW1lYW5lZFwiLFxuXHRcdFwibWlzbWFubmVyZWRcIixcblx0XHRcIm1pc25vbWVyZWRcIixcblx0XHRcIm1pc3Byb3BvcnRpb25lZFwiLFxuXHRcdFwibWlzd2lyZWRcIixcblx0XHRcIm1pdHJlZFwiLFxuXHRcdFwibWl0dGVkXCIsXG5cdFx0XCJtaXR0ZW5lZFwiLFxuXHRcdFwibW9uZXllZFwiLFxuXHRcdFwibW9ub2NsZWRcIixcblx0XHRcIm1vbm9udWNsZWF0ZWRcIixcblx0XHRcIm1vbm9zcGFjZWRcIixcblx0XHRcIm1vbm90b25lZFwiLFxuXHRcdFwibW9ub3Vuc2F0dXJhdGVkXCIsXG5cdFx0XCJtb3J0aWZpZWRcIixcblx0XHRcIm1vc2V5ZWRcIixcblx0XHRcIm1vdG9yaXNlZFwiLFxuXHRcdFwibW90b3JpemVkXCIsXG5cdFx0XCJtb3Vzc2VkXCIsXG5cdFx0XCJtb3VzdGFjaGVkXCIsXG5cdFx0XCJtdWRkaWVkXCIsXG5cdFx0XCJtdWd3ZWVkXCIsXG5cdFx0XCJtdWx0aWFybWVkXCIsXG5cdFx0XCJtdWx0aWJhcnJlbGVkXCIsXG5cdFx0XCJtdWx0aWJsYWRlZFwiLFxuXHRcdFwibXVsdGljZWxsZWRcIixcblx0XHRcIm11bHRpY2hhbWJlcmVkXCIsXG5cdFx0XCJtdWx0aWNoYW5uZWxlZFwiLFxuXHRcdFwibXVsdGljaGFubmVsbGVkXCIsXG5cdFx0XCJtdWx0aWNvYXRlZFwiLFxuXHRcdFwibXVsdGlkaXJlY3RlZFwiLFxuXHRcdFwibXVsdGllbmdpbmVkXCIsXG5cdFx0XCJtdWx0aWZhY2V0ZWRcIixcblx0XHRcIm11bHRpbGFtaW5hdGVkXCIsXG5cdFx0XCJtdWx0aWxhbmVkXCIsXG5cdFx0XCJtdWx0aWxheWVyZWRcIixcblx0XHRcIm11bHRpbG9iZWRcIixcblx0XHRcIm11bHRpbG9idWxhdGVkXCIsXG5cdFx0XCJtdWx0aW51Y2xlYXRlZFwiLFxuXHRcdFwibXVsdGlwcm9uZ2VkXCIsXG5cdFx0XCJtdWx0aXNlZ21lbnRlZFwiLFxuXHRcdFwibXVsdGlzaWRlZFwiLFxuXHRcdFwibXVsdGlzcGVlZFwiLFxuXHRcdFwibXVsdGlzdGVtbWVkXCIsXG5cdFx0XCJtdWx0aXN0b3JpZWRcIixcblx0XHRcIm11bHRpdGFsZW50ZWRcIixcblx0XHRcIm11bHRpdG9uZWRcIixcblx0XHRcIm11bHRpdG93ZXJlZFwiLFxuXHRcdFwibXVsdGl2YWx1ZWRcIixcblx0XHRcIm11bW1pZWRcIixcblx0XHRcIm11bW1pZmllZFwiLFxuXHRcdFwibXVzdGFjaGVkXCIsXG5cdFx0XCJtdXN0YWNoaW9lZFwiLFxuXHRcdFwibXV0aW5pZWRcIixcblx0XHRcIm15ZWxpbmF0ZWRcIixcblx0XHRcIm15c3RpZmllZFwiLFxuXHRcdFwibXl0aGljaXNlZFwiLFxuXHRcdFwibmFrZWRcIixcblx0XHRcIm5hcmNvdGlzZWRcIixcblx0XHRcIm5hcnJvd21pbmRlZFwiLFxuXHRcdFwibmF0dXJlZFwiLFxuXHRcdFwibmVhcGVkXCIsXG5cdFx0XCJuZWFyc2lnaHRlZFwiLFxuXHRcdFwibmVjcm9zZWRcIixcblx0XHRcIm5lY3RhcmVkXCIsXG5cdFx0XCJuZWVkXCIsXG5cdFx0XCJuZWVkbGVzaGFwZWRcIixcblx0XHRcIm5ld2ZhbmdsZWRcIixcblx0XHRcIm5ld2x5d2VkXCIsXG5cdFx0XCJuaWJiZWRcIixcblx0XHRcIm5pbWJsZXdpdHRlZFwiLFxuXHRcdFwibmlwcGxlZFwiLFxuXHRcdFwibml4ZWRcIixcblx0XHRcIm5vYmxlZFwiLFxuXHRcdFwibm9kdWxlZFwiLFxuXHRcdFwibm9pc2VkXCIsXG5cdFx0XCJub25hY2NlbnRlZFwiLFxuXHRcdFwibm9uYWN0aXZhdGVkXCIsXG5cdFx0XCJub25hZHNvcmJlZFwiLFxuXHRcdFwibm9uYWR1bHRlcmF0ZWRcIixcblx0XHRcIm5vbmFlcmF0ZWRcIixcblx0XHRcIm5vbmFmZmlsaWF0ZWRcIixcblx0XHRcIm5vbmFsaWFzZWRcIixcblx0XHRcIm5vbmFsaWVuYXRlZFwiLFxuXHRcdFwibm9uYWxpZ25lZFwiLFxuXHRcdFwibm9uYXJjaGl2ZWRcIixcblx0XHRcIm5vbmFybW9yZWRcIixcblx0XHRcIm5vbmFzc29jaWF0ZWRcIixcblx0XHRcIm5vbmF0dGVudWF0ZWRcIixcblx0XHRcIm5vbmJsYWNrZW5lZFwiLFxuXHRcdFwibm9uYnJlYXN0ZmVkXCIsXG5cdFx0XCJub25icmVjY2lhdGVkXCIsXG5cdFx0XCJub25idWZmZXJlZFwiLFxuXHRcdFwibm9uYnV0dGVyZWRcIixcblx0XHRcIm5vbmNhcmJvbmF0ZWRcIixcblx0XHRcIm5vbmNhcmJvbml6ZWRcIixcblx0XHRcIm5vbmNhdGFsb2d1ZWRcIixcblx0XHRcIm5vbmNhdGFseXplZFwiLFxuXHRcdFwibm9uY2F0ZWdvcml6ZWRcIixcblx0XHRcIm5vbmNlcnRpZmllZFwiLFxuXHRcdFwibm9uY2hsb3JpbmF0ZWRcIixcblx0XHRcIm5vbmNpbGlhdGVkXCIsXG5cdFx0XCJub25jaXJjdW1jaXNlZFwiLFxuXHRcdFwibm9uY2l2aWxpemVkXCIsXG5cdFx0XCJub25jbGFzc2lmaWVkXCIsXG5cdFx0XCJub25jb2F0ZWRcIixcblx0XHRcIm5vbmNvZGlmaWVkXCIsXG5cdFx0XCJub25jb2VyY2VkXCIsXG5cdFx0XCJub25jb21tZXJjaWFsaXplZFwiLFxuXHRcdFwibm9uY29tbWlzc2lvbmVkXCIsXG5cdFx0XCJub25jb21wYWN0ZWRcIixcblx0XHRcIm5vbmNvbXBpbGVkXCIsXG5cdFx0XCJub25jb21wbGljYXRlZFwiLFxuXHRcdFwibm9uY29tcG9zZWRcIixcblx0XHRcIm5vbmNvbXB1dGVkXCIsXG5cdFx0XCJub25jb21wdXRlcml6ZWRcIixcblx0XHRcIm5vbmNvbmNlcnRlZFwiLFxuXHRcdFwibm9uY29uZGl0aW9uZWRcIixcblx0XHRcIm5vbmNvbmZpcm1lZFwiLFxuXHRcdFwibm9uY29uZ2VzdGVkXCIsXG5cdFx0XCJub25jb25qdWdhdGVkXCIsXG5cdFx0XCJub25jb29sZWRcIixcblx0XHRcIm5vbmNvcnJ1Z2F0ZWRcIixcblx0XHRcIm5vbmNvdXBsZWRcIixcblx0XHRcIm5vbmNyZWF0ZWRcIixcblx0XHRcIm5vbmNyb3dkZWRcIixcblx0XHRcIm5vbmN1bHR1cmVkXCIsXG5cdFx0XCJub25jdXJhdGVkXCIsXG5cdFx0XCJub25jdXNoaW9uZWRcIixcblx0XHRcIm5vbmRlY29kZWRcIixcblx0XHRcIm5vbmRlY29tcG9zZWRcIixcblx0XHRcIm5vbmRlZGljYXRlZFwiLFxuXHRcdFwibm9uZGVmZXJyZWRcIixcblx0XHRcIm5vbmRlZmxhdGVkXCIsXG5cdFx0XCJub25kZWdlbmVyYXRlZFwiLFxuXHRcdFwibm9uZGVncmFkZWRcIixcblx0XHRcIm5vbmRlbGVnYXRlZFwiLFxuXHRcdFwibm9uZGVsaW1pdGVkXCIsXG5cdFx0XCJub25kZWxpbmVhdGVkXCIsXG5cdFx0XCJub25kZW1hcmNhdGVkXCIsXG5cdFx0XCJub25kZW9kb3JpemVkXCIsXG5cdFx0XCJub25kZXBsb3llZFwiLFxuXHRcdFwibm9uZGVyaXZhdGl6ZWRcIixcblx0XHRcIm5vbmRlcml2ZWRcIixcblx0XHRcIm5vbmRldGFjaGVkXCIsXG5cdFx0XCJub25kZXRhaWxlZFwiLFxuXHRcdFwibm9uZGlmZmVyZW50aWF0ZWRcIixcblx0XHRcIm5vbmRpZ2VzdGVkXCIsXG5cdFx0XCJub25kaWdpdGl6ZWRcIixcblx0XHRcIm5vbmRpbGFwaWRhdGVkXCIsXG5cdFx0XCJub25kaWxhdGVkXCIsXG5cdFx0XCJub25kaW1lbnNpb25hbGlzZWRcIixcblx0XHRcIm5vbmRpbWVuc2lvbmFsaXplZFwiLFxuXHRcdFwibm9uZGlyZWN0ZWRcIixcblx0XHRcIm5vbmRpc2FibGVkXCIsXG5cdFx0XCJub25kaXNjaXBsaW5lZFwiLFxuXHRcdFwibm9uZGlzcGVyc2VkXCIsXG5cdFx0XCJub25kaXNwdXRlZFwiLFxuXHRcdFwibm9uZGlzcXVhbGlmaWVkXCIsXG5cdFx0XCJub25kaXNydXB0ZWRcIixcblx0XHRcIm5vbmRpc3NlbWluYXRlZFwiLFxuXHRcdFwibm9uZGlzc2lwYXRlZFwiLFxuXHRcdFwibm9uZGlzc29sdmVkXCIsXG5cdFx0XCJub25kaXN0cmVzc2VkXCIsXG5cdFx0XCJub25kaXN0cmlidXRlZFwiLFxuXHRcdFwibm9uZGl2ZXJzaWZpZWRcIixcblx0XHRcIm5vbmRpdmVydGVkXCIsXG5cdFx0XCJub25kb2N1bWVudGVkXCIsXG5cdFx0XCJub25kb21lc3RpY2F0ZWRcIixcblx0XHRcIm5vbmRvcGVkXCIsXG5cdFx0XCJub25kcmFmdGVkXCIsXG5cdFx0XCJub25kcnVnZ2VkXCIsXG5cdFx0XCJub25kdWJiZWRcIixcblx0XHRcIm5vbmR1Y3RlZFwiLFxuXHRcdFwibm9uZWFydGhlZFwiLFxuXHRcdFwibm9uZWNsaXBzZWRcIixcblx0XHRcIm5vbmVkZ2VkXCIsXG5cdFx0XCJub25lZGl0ZWRcIixcblx0XHRcIm5vbmVsYXN0aWNpemVkXCIsXG5cdFx0XCJub25lbGVjdHJpZmllZFwiLFxuXHRcdFwibm9uZWxlY3Ryb3BsYXRlZFwiLFxuXHRcdFwibm9uZWxlY3Ryb3BvcmF0ZWRcIixcblx0XHRcIm5vbmVsZXZhdGVkXCIsXG5cdFx0XCJub25lbGltaW5hdGVkXCIsXG5cdFx0XCJub25lbG9uZ2F0ZWRcIixcblx0XHRcIm5vbmVtYmVkZGVkXCIsXG5cdFx0XCJub25lbWJvZGllZFwiLFxuXHRcdFwibm9uZW1waGFzaXplZFwiLFxuXHRcdFwibm9uZW5jYXBzdWxhdGVkXCIsXG5cdFx0XCJub25lbmNvZGVkXCIsXG5cdFx0XCJub25lbmNyeXB0ZWRcIixcblx0XHRcIm5vbmVuZGFuZ2VyZWRcIixcblx0XHRcIm5vbmVuZ3JhdmVkXCIsXG5cdFx0XCJub25lbmxhcmdlZFwiLFxuXHRcdFwibm9uZW5yaWNoZWRcIixcblx0XHRcIm5vbmVudGFuZ2xlZFwiLFxuXHRcdFwibm9uZW50cmVuY2hlZFwiLFxuXHRcdFwibm9uZXBpdGhlbGl6ZWRcIixcblx0XHRcIm5vbmVxdWlsaWJyYXRlZFwiLFxuXHRcdFwibm9uZXN0YWJsaXNoZWRcIixcblx0XHRcIm5vbmV0Y2hlZFwiLFxuXHRcdFwibm9uZXRob3h5bGF0ZWRcIixcblx0XHRcIm5vbmV0aHlsYXRlZFwiLFxuXHRcdFwibm9uZXRpb2xhdGVkXCIsXG5cdFx0XCJub25leGFnZ2VyYXRlZFwiLFxuXHRcdFwibm9uZXhjYXZhdGVkXCIsXG5cdFx0XCJub25leGhhdXN0ZWRcIixcblx0XHRcIm5vbmV4cGVyaWVuY2VkXCIsXG5cdFx0XCJub25leHBpcmVkXCIsXG5cdFx0XCJub25mYWJyaWNhdGVkXCIsXG5cdFx0XCJub25mYWxzaWZpZWRcIixcblx0XHRcIm5vbmZlYXRoZXJlZFwiLFxuXHRcdFwibm9uZmVhdHVyZWRcIixcblx0XHRcIm5vbmZlZFwiLFxuXHRcdFwibm9uZmVkZXJhdGVkXCIsXG5cdFx0XCJub25mZWVkXCIsXG5cdFx0XCJub25mZW5lc3RyYXRlZFwiLFxuXHRcdFwibm9uZmVydGlsaXplZFwiLFxuXHRcdFwibm9uZmlsYW1lbnRlZFwiLFxuXHRcdFwibm9uZmluYW5jZWRcIixcblx0XHRcIm5vbmZpbmlzaGVkXCIsXG5cdFx0XCJub25maW5uZWRcIixcblx0XHRcIm5vbmZpc3N1cmVkXCIsXG5cdFx0XCJub25mbGFnZWxsYXRlZFwiLFxuXHRcdFwibm9uZmxhZ2dlZFwiLFxuXHRcdFwibm9uZmxhcmVkXCIsXG5cdFx0XCJub25mbGF2b3JlZFwiLFxuXHRcdFwibm9uZmx1aWRpemVkXCIsXG5cdFx0XCJub25mbHVvcmluYXRlZFwiLFxuXHRcdFwibm9uZmx1dGVkXCIsXG5cdFx0XCJub25mb3Jlc3RlZFwiLFxuXHRcdFwibm9uZm9ybWFsaXplZFwiLFxuXHRcdFwibm9uZm9ybWF0dGVkXCIsXG5cdFx0XCJub25mcmFnbWVudGVkXCIsXG5cdFx0XCJub25mcmFncmFuY2VkXCIsXG5cdFx0XCJub25mcmFuY2hpc2VkXCIsXG5cdFx0XCJub25mcmVja2xlZFwiLFxuXHRcdFwibm9uZnVlbGVkXCIsXG5cdFx0XCJub25mdW1pZ2F0ZWRcIixcblx0XHRcIm5vbmZ1bmN0aW9uYWxpemVkXCIsXG5cdFx0XCJub25mdW5kZWRcIixcblx0XHRcIm5vbmdhbHZhbml6ZWRcIixcblx0XHRcIm5vbmdhdGVkXCIsXG5cdFx0XCJub25nZWxhdGluaXplZFwiLFxuXHRcdFwibm9uZ2VuZGVyZWRcIixcblx0XHRcIm5vbmdlbmVyYWxpemVkXCIsXG5cdFx0XCJub25nZW5lcmF0ZWRcIixcblx0XHRcIm5vbmdpZnRlZFwiLFxuXHRcdFwibm9uZ2xhemVkXCIsXG5cdFx0XCJub25nbHVjb3NhdGVkXCIsXG5cdFx0XCJub25nbHVjb3N5bGF0ZWRcIixcblx0XHRcIm5vbmdseWNlcmluYXRlZFwiLFxuXHRcdFwibm9uZ3JhZGVkXCIsXG5cdFx0XCJub25ncm91bmRlZFwiLFxuXHRcdFwibm9uaGFsb2dlbmF0ZWRcIixcblx0XHRcIm5vbmhhbmRpY2FwcGVkXCIsXG5cdFx0XCJub25ob3NwaXRhbGlzZWRcIixcblx0XHRcIm5vbmhvc3BpdGFsaXplZFwiLFxuXHRcdFwibm9uaHlkcmF0ZWRcIixcblx0XHRcIm5vbmluY29ycG9yYXRlZFwiLFxuXHRcdFwibm9uaW5kZXhlZFwiLFxuXHRcdFwibm9uaW5mZWN0ZWRcIixcblx0XHRcIm5vbmluZmVzdGVkXCIsXG5cdFx0XCJub25pbml0aWFsaXplZFwiLFxuXHRcdFwibm9uaW5pdGlhdGVkXCIsXG5cdFx0XCJub25pbm9jdWxhdGVkXCIsXG5cdFx0XCJub25pbnNlbWluYXRlZFwiLFxuXHRcdFwibm9uaW5zdGl0dXRpb25hbGl6ZWRcIixcblx0XHRcIm5vbmluc3VyZWRcIixcblx0XHRcIm5vbmludGVuc2lmaWVkXCIsXG5cdFx0XCJub25pbnRlcmxhY2VkXCIsXG5cdFx0XCJub25pbnRlcnByZXRlZFwiLFxuXHRcdFwibm9uaW50cm92ZXJ0ZWRcIixcblx0XHRcIm5vbmludmVzdGlnYXRlZFwiLFxuXHRcdFwibm9uaW52b2x2ZWRcIixcblx0XHRcIm5vbmlycmlnYXRlZFwiLFxuXHRcdFwibm9uaXNvbGF0ZWRcIixcblx0XHRcIm5vbmlzb21lcml6ZWRcIixcblx0XHRcIm5vbmlzc3VlZFwiLFxuXHRcdFwibm9uaXRhbGljaXplZFwiLFxuXHRcdFwibm9uaXRlbWl6ZWRcIixcblx0XHRcIm5vbml0ZXJhdGVkXCIsXG5cdFx0XCJub25qYWRlZFwiLFxuXHRcdFwibm9ubGFiZWxsZWRcIixcblx0XHRcIm5vbmxhbWluYXRlZFwiLFxuXHRcdFwibm9ubGF0ZXJhbGl6ZWRcIixcblx0XHRcIm5vbmxheWVyZWRcIixcblx0XHRcIm5vbmxlZ2FsaXplZFwiLFxuXHRcdFwibm9ubGVnaXNsYXRlZFwiLFxuXHRcdFwibm9ubGVzaW9uZWRcIixcblx0XHRcIm5vbmxleGljYWxpemVkXCIsXG5cdFx0XCJub25saWJlcmF0ZWRcIixcblx0XHRcIm5vbmxpY2hlbml6ZWRcIixcblx0XHRcIm5vbmxpZ2h0ZWRcIixcblx0XHRcIm5vbmxpZ25pZmllZFwiLFxuXHRcdFwibm9ubGltaXRlZFwiLFxuXHRcdFwibm9ubGluZWFyaXplZFwiLFxuXHRcdFwibm9ubGlua2VkXCIsXG5cdFx0XCJub25sb2JlZFwiLFxuXHRcdFwibm9ubG9ib3RvbWl6ZWRcIixcblx0XHRcIm5vbmxvY2FsaXplZFwiLFxuXHRcdFwibm9ubHlzZWRcIixcblx0XHRcIm5vbm1hY2hpbmVkXCIsXG5cdFx0XCJub25tYWxub3VyaXNoZWRcIixcblx0XHRcIm5vbm1hbmRhdGVkXCIsXG5cdFx0XCJub25tYXJnaW5hbGl6ZWRcIixcblx0XHRcIm5vbm1hc3NhZ2VkXCIsXG5cdFx0XCJub25tYXRyaWN1bGF0ZWRcIixcblx0XHRcIm5vbm1hdHRlZFwiLFxuXHRcdFwibm9ubWF0dXJlZFwiLFxuXHRcdFwibm9ubWVjaGFuaXplZFwiLFxuXHRcdFwibm9ubWVkaWNhdGVkXCIsXG5cdFx0XCJub25tZWR1bGxhdGVkXCIsXG5cdFx0XCJub25tZW50aW9uZWRcIixcblx0XHRcIm5vbm1ldGFib2xpemVkXCIsXG5cdFx0XCJub25tZXRhbGxpemVkXCIsXG5cdFx0XCJub25tZXRhc3Rhc2l6ZWRcIixcblx0XHRcIm5vbm1ldGVyZWRcIixcblx0XHRcIm5vbm1ldGhveHlsYXRlZFwiLFxuXHRcdFwibm9ubWlsbGVkXCIsXG5cdFx0XCJub25taW5lcmFsaXplZFwiLFxuXHRcdFwibm9ubWlycm9yZWRcIixcblx0XHRcIm5vbm1vZGVsZWRcIixcblx0XHRcIm5vbm1vZGVyYXRlZFwiLFxuXHRcdFwibm9ubW9kaWZpZWRcIixcblx0XHRcIm5vbm1vbmV0aXplZFwiLFxuXHRcdFwibm9ubW9uaXRvcmVkXCIsXG5cdFx0XCJub25tb3J0Z2FnZWRcIixcblx0XHRcIm5vbm1vdG9yaXplZFwiLFxuXHRcdFwibm9ubW90dGxlZFwiLFxuXHRcdFwibm9ubW91bnRlZFwiLFxuXHRcdFwibm9ubXVsdGl0aHJlYWRlZFwiLFxuXHRcdFwibm9ubXV0aWxhdGVkXCIsXG5cdFx0XCJub25teWVsaW5hdGVkXCIsXG5cdFx0XCJub25ub3JtYWxpemVkXCIsXG5cdFx0XCJub25udWNsZWF0ZWRcIixcblx0XHRcIm5vbm9iamVjdGlmaWVkXCIsXG5cdFx0XCJub25vYmxpZ2F0ZWRcIixcblx0XHRcIm5vbm9jY3VwaWVkXCIsXG5cdFx0XCJub25vaWxlZFwiLFxuXHRcdFwibm9ub3BpbmlvbmF0ZWRcIixcblx0XHRcIm5vbm94eWdlbmF0ZWRcIixcblx0XHRcIm5vbnBhZ2luYXRlZFwiLFxuXHRcdFwibm9ucGFpcmVkXCIsXG5cdFx0XCJub25wYXJhbHl6ZWRcIixcblx0XHRcIm5vbnBhcmFtZXRlcml6ZWRcIixcblx0XHRcIm5vbnBhcmFzaXRpemVkXCIsXG5cdFx0XCJub25wYXN0ZXVyaXplZFwiLFxuXHRcdFwibm9ucGF0dGVybmVkXCIsXG5cdFx0XCJub25waGFzZWRcIixcblx0XHRcIm5vbnBob3NwaGF0aXplZFwiLFxuXHRcdFwibm9ucGhvc3Bob3JpemVkXCIsXG5cdFx0XCJub25waWVyY2VkXCIsXG5cdFx0XCJub25waWdtZW50ZWRcIixcblx0XHRcIm5vbnBpbG90ZWRcIixcblx0XHRcIm5vbnBpcGVsaW5lZFwiLFxuXHRcdFwibm9ucGl0dGVkXCIsXG5cdFx0XCJub25wbHVzc2VkXCIsXG5cdFx0XCJub25wdWZmZWRcIixcblx0XHRcIm5vbnJhbmRvbWl6ZWRcIixcblx0XHRcIm5vbnJhdGVkXCIsXG5cdFx0XCJub25yZWZpbmVkXCIsXG5cdFx0XCJub25yZWdpc3RlcmVkXCIsXG5cdFx0XCJub25yZWd1bGF0ZWRcIixcblx0XHRcIm5vbnJlbGF0ZWRcIixcblx0XHRcIm5vbnJldGFyZGVkXCIsXG5cdFx0XCJub25zYWNyZWRcIixcblx0XHRcIm5vbnNhbGFyaWVkXCIsXG5cdFx0XCJub25zYW5jdGlvbmVkXCIsXG5cdFx0XCJub25zYXR1cmF0ZWRcIixcblx0XHRcIm5vbnNjZW50ZWRcIixcblx0XHRcIm5vbnNjaGVkdWxlZFwiLFxuXHRcdFwibm9uc2Vhc29uZWRcIixcblx0XHRcIm5vbnNlY2x1ZGVkXCIsXG5cdFx0XCJub25zZWdtZW50ZWRcIixcblx0XHRcIm5vbnNlZ3JlZ2F0ZWRcIixcblx0XHRcIm5vbnNlbGVjdGVkXCIsXG5cdFx0XCJub25zb2xpZGlmaWVkXCIsXG5cdFx0XCJub25zcGVjaWFsaXplZFwiLFxuXHRcdFwibm9uc3BvcmVkXCIsXG5cdFx0XCJub25zdGFuZGFyZGlzZWRcIixcblx0XHRcIm5vbnN0YW5kYXJkaXplZFwiLFxuXHRcdFwibm9uc3RyYXRpZmllZFwiLFxuXHRcdFwibm9uc3RyZXNzZWRcIixcblx0XHRcIm5vbnN0cmlhdGVkXCIsXG5cdFx0XCJub25zdHJpcGVkXCIsXG5cdFx0XCJub25zdHJ1Y3R1cmVkXCIsXG5cdFx0XCJub25zdHlsaXNlZFwiLFxuXHRcdFwibm9uc3R5bGl6ZWRcIixcblx0XHRcIm5vbnN1Ym1lcmdlZFwiLFxuXHRcdFwibm9uc3Vic2NyaXB0ZWRcIixcblx0XHRcIm5vbnN1YnNpZGlzZWRcIixcblx0XHRcIm5vbnN1YnNpZGl6ZWRcIixcblx0XHRcIm5vbnN1YnN0aXR1dGVkXCIsXG5cdFx0XCJub25zeW5kaWNhdGVkXCIsXG5cdFx0XCJub25zeW50aGVzaXNlZFwiLFxuXHRcdFwibm9udGFidWxhdGVkXCIsXG5cdFx0XCJub250YWxlbnRlZFwiLFxuXHRcdFwibm9udGhyZWFkZWRcIixcblx0XHRcIm5vbnRpbnRlZFwiLFxuXHRcdFwibm9udG9sZXJhdGVkXCIsXG5cdFx0XCJub250cmFuc2xhdGVkXCIsXG5cdFx0XCJub250dW5uZWxsZWRcIixcblx0XHRcIm5vbnVuaWZpZWRcIixcblx0XHRcIm5vbnVuaW9uaXNlZFwiLFxuXHRcdFwibm9udXBob2xzdGVyZWRcIixcblx0XHRcIm5vbnV0aWxpc2VkXCIsXG5cdFx0XCJub251dGlsaXplZFwiLFxuXHRcdFwibm9udmFsdWVkXCIsXG5cdFx0XCJub252YXJpZWRcIixcblx0XHRcIm5vbnZlcmJhbGl6ZWRcIixcblx0XHRcIm5vbnZpdHJpZmllZFwiLFxuXHRcdFwibm9udm9sYXRpbGlzZWRcIixcblx0XHRcIm5vbnZvbGF0aWxpemVkXCIsXG5cdFx0XCJub3JtZWRcIixcblx0XHRcIm5vc2VibGVlZFwiLFxuXHRcdFwibm90YXRlZFwiLFxuXHRcdFwibm90aWZpZWRcIixcblx0XHRcIm51YW5jZWRcIixcblx0XHRcIm51bGxpZmllZFwiLFxuXHRcdFwibnVtZXJhdGVkXCIsXG5cdFx0XCJvYXJ3ZWVkXCIsXG5cdFx0XCJvYmplY3RpZmllZFwiLFxuXHRcdFwib2JsaXF1ZWRcIixcblx0XHRcIm9idHVuZGVkXCIsXG5cdFx0XCJvY2N1cGllZFwiLFxuXHRcdFwib2N0dXBsZWRcIixcblx0XHRcIm9kb3JlZFwiLFxuXHRcdFwib2lsc2VlZFwiLFxuXHRcdFwib2lua2VkXCIsXG5cdFx0XCJvbGRmYXNoaW9uZWRcIixcblx0XHRcIm9uZXNpZGVkXCIsXG5cdFx0XCJvb3Bob3JlY3RvbWl6ZWRcIixcblx0XHRcIm9wYXF1ZWRcIixcblx0XHRcIm9wZW5oZWFydGVkXCIsXG5cdFx0XCJvcGVubWluZGVkXCIsXG5cdFx0XCJvcGVubW91dGhlZFwiLFxuXHRcdFwib3BpYXRlZFwiLFxuXHRcdFwib3BpbmlvbmF0ZWRcIixcblx0XHRcIm9yYWNsZWRcIixcblx0XHRcIm9yZXdlZWRcIixcblx0XHRcIm9zc2lmaWVkXCIsXG5cdFx0XCJvdXRicmVlZFwiLFxuXHRcdFwib3V0bW9kZWRcIixcblx0XHRcIm91dHJpZ2dlZFwiLFxuXHRcdFwib3V0cmlnZ2VyZWRcIixcblx0XHRcIm91dHNpemVkXCIsXG5cdFx0XCJvdXRza2F0ZWRcIixcblx0XHRcIm91dHNwZWVkXCIsXG5cdFx0XCJvdXR0b3BwZWRcIixcblx0XHRcIm91dHRydW1wZWRcIixcblx0XHRcIm91dHZvaWNlZFwiLFxuXHRcdFwib3V0d2VlZFwiLFxuXHRcdFwib3ZhdGVkXCIsXG5cdFx0XCJvdmVyYWRvcm5lZFwiLFxuXHRcdFwib3ZlcmFnZWRcIixcblx0XHRcIm92ZXJhbGxlZFwiLFxuXHRcdFwib3ZlcmFzc3VyZWRcIixcblx0XHRcIm92ZXJicmVkXCIsXG5cdFx0XCJvdmVyYnJlZWRcIixcblx0XHRcIm92ZXJjb21wbGljYXRlZFwiLFxuXHRcdFwib3ZlcmRhbXBlZFwiLFxuXHRcdFwib3ZlcmRldGFpbGVkXCIsXG5cdFx0XCJvdmVyZGl2ZXJzaWZpZWRcIixcblx0XHRcIm92ZXJkeWVkXCIsXG5cdFx0XCJvdmVyZXF1aXBwZWRcIixcblx0XHRcIm92ZXJmYXRpZ3VlZFwiLFxuXHRcdFwib3ZlcmZlZFwiLFxuXHRcdFwib3ZlcmZlZWRcIixcblx0XHRcIm92ZXJpbmRlYnRlZFwiLFxuXHRcdFwib3ZlcmludGVuc2lmaWVkXCIsXG5cdFx0XCJvdmVyaW52ZW50b3JpZWRcIixcblx0XHRcIm92ZXJtYWduaWZpZWRcIixcblx0XHRcIm92ZXJtb2RpZmllZFwiLFxuXHRcdFwib3ZlcnByZW9jY3VwaWVkXCIsXG5cdFx0XCJvdmVycHJpdmlsZWdlZFwiLFxuXHRcdFwib3ZlcnByb3BvcnRpb25hdGVkXCIsXG5cdFx0XCJvdmVycXVhbGlmaWVkXCIsXG5cdFx0XCJvdmVyc2VlZFwiLFxuXHRcdFwib3ZlcnNleGVkXCIsXG5cdFx0XCJvdmVyc2ltcGxpZmllZFwiLFxuXHRcdFwib3ZlcnNpemVkXCIsXG5cdFx0XCJvdmVyc29waGlzdGljYXRlZFwiLFxuXHRcdFwib3ZlcnN0dWRpZWRcIixcblx0XHRcIm92ZXJzdWxmYXRlZFwiLFxuXHRcdFwib3ZpY2VsbGVkXCIsXG5cdFx0XCJvdm9pZHNoYXBlZFwiLFxuXHRcdFwib3pvbmF0ZWRcIixcblx0XHRcInBhY2lmaWVkXCIsXG5cdFx0XCJwYWNrZXRlZFwiLFxuXHRcdFwicGFsYXRhbGl6ZWRcIixcblx0XHRcInBhbGVkXCIsXG5cdFx0XCJwYWxzaWVkXCIsXG5cdFx0XCJwYW5lZFwiLFxuXHRcdFwicGFuaWNsZWRcIixcblx0XHRcInBhcmFibGVkXCIsXG5cdFx0XCJwYXJhbGxlbGVwaXBlZFwiLFxuXHRcdFwicGFyYWxsZWxpemVkXCIsXG5cdFx0XCJwYXJhbGxlbG9waXBlZFwiLFxuXHRcdFwicGFyZW50aGVzaXNlZFwiLFxuXHRcdFwicGFyb2RpZWRcIixcblx0XHRcInBhcnF1ZXRlZFwiLFxuXHRcdFwicGFzc2lvbmVkXCIsXG5cdFx0XCJwYXVuY2hlZFwiLFxuXHRcdFwicGF1cGVyaXNlZFwiLFxuXHRcdFwicGVkaWdyZWVkXCIsXG5cdFx0XCJwZWRpbWVudGVkXCIsXG5cdFx0XCJwZWR1bmN1bGF0ZWRcIixcblx0XHRcInBlZ2dlZFwiLFxuXHRcdFwicGVnbGVnZ2VkXCIsXG5cdFx0XCJwZW5hbmNlZFwiLFxuXHRcdFwicGVuY2lsc2hhcGVkXCIsXG5cdFx0XCJwZXJtaW5lcmFsaXplZFwiLFxuXHRcdFwicGVyc29uaWZpZWRcIixcblx0XHRcInBldHJpZmllZFwiLFxuXHRcdFwicGhvdG9kaXNzb2NpYXRlZFwiLFxuXHRcdFwicGhvdG9kdXBsaWNhdGVkXCIsXG5cdFx0XCJwaG90b2VkXCIsXG5cdFx0XCJwaG90b2luZHVjZWRcIixcblx0XHRcInBob3RvbHlzZWRcIixcblx0XHRcInBob3RvbHl6ZWRcIixcblx0XHRcInBpZWRcIixcblx0XHRcInBpZ2VvbmVkXCIsXG5cdFx0XCJwaWd0YWlsZWRcIixcblx0XHRcInBpZ3dlZWRcIixcblx0XHRcInBpbGFzdGVyZWRcIixcblx0XHRcInBpbGxhcmVkXCIsXG5cdFx0XCJwaWxsb3JpZWRcIixcblx0XHRcInBpbXBsZWRcIixcblx0XHRcInBpbmVhbGVjdG9taXNlZFwiLFxuXHRcdFwicGluZWFsZWN0b21pemVkXCIsXG5cdFx0XCJwaW5mZWF0aGVyZWRcIixcblx0XHRcInBpbm5hY2xlZFwiLFxuXHRcdFwicGluc3RyaXBlZFwiLFxuXHRcdFwicGl4ZWxsYXRlZFwiLFxuXHRcdFwicGl4aWxhdGVkXCIsXG5cdFx0XCJwaXhpbGxhdGVkXCIsXG5cdFx0XCJwbGFpbmNsb3RoZWRcIixcblx0XHRcInBsYW50YXJmbGV4ZWRcIixcblx0XHRcInBsZWRcIixcblx0XHRcInBsdW1hZ2VkXCIsXG5cdFx0XCJwb2NrZWRcIixcblx0XHRcInBva2V3ZWVkXCIsXG5cdFx0XCJwb2x5Y2hsb3JpbmF0ZWRcIixcblx0XHRcInBvbHl1bnNhdHVyYXRlZFwiLFxuXHRcdFwicG9ueXRhaWxlZFwiLFxuXHRcdFwicG9vY2hlZFwiLFxuXHRcdFwicG9vcnNwaXJpdGVkXCIsXG5cdFx0XCJwb3BleWVkXCIsXG5cdFx0XCJwb3BweXNlZWRcIixcblx0XHRcInBvcmNlbGFpbml6ZWRcIixcblx0XHRcInBvcmNoZWRcIixcblx0XHRcInBvc2hlZFwiLFxuXHRcdFwicG90dGVyZWRcIixcblx0XHRcInBveGVkXCIsXG5cdFx0XCJwcmVhY2hpZmllZFwiLFxuXHRcdFwicHJlY2VydGlmaWVkXCIsXG5cdFx0XCJwcmVjbGFzc2lmaWVkXCIsXG5cdFx0XCJwcmVjb25pemVkXCIsXG5cdFx0XCJwcmVpbm9jdWxhdGVkXCIsXG5cdFx0XCJwcmVtZWRcIixcblx0XHRcInByZW5vdGlmaWVkXCIsXG5cdFx0XCJwcmVvY2N1cGllZFwiLFxuXHRcdFwicHJlcG9zZWRcIixcblx0XHRcInByZXF1YWxpZmllZFwiLFxuXHRcdFwicHJlc2hhcGVkXCIsXG5cdFx0XCJwcmVzaWduaWZpZWRcIixcblx0XHRcInByZXNwZWNpZmllZFwiLFxuXHRcdFwicHJldHRpZmllZFwiLFxuXHRcdFwicHJpZWRcIixcblx0XHRcInByaW5jaXBsZWRcIixcblx0XHRcInByb2NlZWRcIixcblx0XHRcInByb3BoZXNpZWRcIixcblx0XHRcInByb3BvdW5kZWRcIixcblx0XHRcInByb3NlZFwiLFxuXHRcdFwicHJvdG9uYXRlZFwiLFxuXHRcdFwicHJvdWRoZWFydGVkXCIsXG5cdFx0XCJwcm94aWVkXCIsXG5cdFx0XCJwdWxwaWZpZWRcIixcblx0XHRcInB1bXBraW5zZWVkXCIsXG5cdFx0XCJwdXBwaWVkXCIsXG5cdFx0XCJwdXJlYnJlZFwiLFxuXHRcdFwicHVyZWRcIixcblx0XHRcInB1cmVlZFwiLFxuXHRcdFwicHVyaWZpZWRcIixcblx0XHRcInB1c3R1bGVkXCIsXG5cdFx0XCJwdXRyZWZpZWRcIixcblx0XHRcInB5amFtYWVkXCIsXG5cdFx0XCJxdWFkcnVwZWRcIixcblx0XHRcInF1YWxpZmllZFwiLFxuXHRcdFwicXVhbnRpZmllZFwiLFxuXHRcdFwicXVhbnRpc2VkXCIsXG5cdFx0XCJxdWFudGl6ZWRcIixcblx0XHRcInF1YXJyaWVkXCIsXG5cdFx0XCJxdWVyaWVkXCIsXG5cdFx0XCJxdWVzdG9uZWRcIixcblx0XHRcInF1aWNrdGVtcGVyZWRcIixcblx0XHRcInF1aWNrd2l0dGVkXCIsXG5cdFx0XCJxdWllc2NlZFwiLFxuXHRcdFwicXVpZXRlbmVkXCIsXG5cdFx0XCJxdWl6emlmaWVkXCIsXG5cdFx0XCJyYWNlbWVkXCIsXG5cdFx0XCJyYWRpb3NlbnNpdGlzZWRcIixcblx0XHRcInJhZ3dlZWRcIixcblx0XHRcInJhaW5kcmVuY2hlZFwiLFxuXHRcdFwicmFtcGVkXCIsXG5cdFx0XCJyYXBlc2VlZFwiLFxuXHRcdFwicmFyZWZpZWRcIixcblx0XHRcInJhcmlmaWVkXCIsXG5cdFx0XCJyYXRpZmllZFwiLFxuXHRcdFwicmF6b3JlZGdlZFwiLFxuXHRcdFwicmVhY2NlbGVyYXRlZFwiLFxuXHRcdFwicmVhY2NvbXBhbmllZFwiLFxuXHRcdFwicmVhY2hpZXZlZFwiLFxuXHRcdFwicmVhY2tub3dsZWRnZWRcIixcblx0XHRcInJlYWRkaWN0ZWRcIixcblx0XHRcInJlYWRpZWRcIixcblx0XHRcInJlYW1wbGlmaWVkXCIsXG5cdFx0XCJyZWFubmVhbGVkXCIsXG5cdFx0XCJyZWFzc29jaWF0ZWRcIixcblx0XHRcInJlYmFkZ2VkXCIsXG5cdFx0XCJyZWJpb3BzaWVkXCIsXG5cdFx0XCJyZWNhYmxlZFwiLFxuXHRcdFwicmVjYXRlZ29yaXNlZFwiLFxuXHRcdFwicmVjZWlwdGVkXCIsXG5cdFx0XCJyZWNlbnRyZWRcIixcblx0XHRcInJlY2VydGlmaWVkXCIsXG5cdFx0XCJyZWNob3Jlb2dyYXBoZWRcIixcblx0XHRcInJlY2xhcmlmaWVkXCIsXG5cdFx0XCJyZWNsYXNzaWZpZWRcIixcblx0XHRcInJlY29uZmVycmVkXCIsXG5cdFx0XCJyZWNyeXN0YWxpemVkXCIsXG5cdFx0XCJyZWN0aWZpZWRcIixcblx0XHRcInJlY3Vyc2VkXCIsXG5cdFx0XCJyZWRibG9vZGVkXCIsXG5cdFx0XCJyZWRlZmllZFwiLFxuXHRcdFwicmVkZW5pZWRcIixcblx0XHRcInJlZG5lY2tlZFwiLFxuXHRcdFwicmVkc2hpZnRlZFwiLFxuXHRcdFwicmVkd2VlZFwiLFxuXHRcdFwicmVkeWVkXCIsXG5cdFx0XCJyZWVkXCIsXG5cdFx0XCJyZWVtYm9kaWVkXCIsXG5cdFx0XCJyZWVubGlnaHRlZFwiLFxuXHRcdFwicmVmZWVkXCIsXG5cdFx0XCJyZWZlcmVlZFwiLFxuXHRcdFwicmVmbGV4ZWRcIixcblx0XHRcInJlZm9ydGlmaWVkXCIsXG5cdFx0XCJyZWZyb250ZWRcIixcblx0XHRcInJlZnVnZWRcIixcblx0XHRcInJlZ2xvcmlmaWVkXCIsXG5cdFx0XCJyZWltcHJlZ25hdGVkXCIsXG5cdFx0XCJyZWluaXRpYWxpemVkXCIsXG5cdFx0XCJyZWp1c3RpZmllZFwiLFxuXHRcdFwicmVsaXF1ZWZpZWRcIixcblx0XHRcInJlbWVkaWVkXCIsXG5cdFx0XCJyZW1vZGlmaWVkXCIsXG5cdFx0XCJyZW1vbmV0aXplZFwiLFxuXHRcdFwicmVteXRob2xvZ2l6ZWRcIixcblx0XHRcInJlbm90aWZpZWRcIixcblx0XHRcInJlbnVsbGlmaWVkXCIsXG5cdFx0XCJyZW51bWVyYXRlZFwiLFxuXHRcdFwicmVvY2N1cGllZFwiLFxuXHRcdFwicmVwYWNpZmllZFwiLFxuXHRcdFwicmVwdXJpZmllZFwiLFxuXHRcdFwicmVwdXRlZFwiLFxuXHRcdFwicmVxdWFsaWZpZWRcIixcblx0XHRcInJlc2NpbmRlZFwiLFxuXHRcdFwicmVzZWVkXCIsXG5cdFx0XCJyZXNob2VkXCIsXG5cdFx0XCJyZXNvbGlkaWZpZWRcIixcblx0XHRcInJlc29yYmVkXCIsXG5cdFx0XCJyZXNwZWNpZmllZFwiLFxuXHRcdFwicmVzdHVkaWVkXCIsXG5cdFx0XCJyZXRhYnVsYXRlZFwiLFxuXHRcdFwicmV0aWN1bGF0ZWRcIixcblx0XHRcInJldGludGVkXCIsXG5cdFx0XCJyZXRyZWVkXCIsXG5cdFx0XCJyZXRyb2FjdGVkXCIsXG5cdFx0XCJyZXVuaWZpZWRcIixcblx0XHRcInJldmVyaWZpZWRcIixcblx0XHRcInJldmVzdGVkXCIsXG5cdFx0XCJyZXZpdmlmaWVkXCIsXG5cdFx0XCJyZXdlZFwiLFxuXHRcdFwicmlkZ2Vwb2xlZFwiLFxuXHRcdFwicmlmZmxlZFwiLFxuXHRcdFwicmlnaHRtaW5kZWRcIixcblx0XHRcInJpZ2lkaWZpZWRcIixcblx0XHRcInJpbmRlZFwiLFxuXHRcdFwicmlwZWRcIixcblx0XHRcInJpdGVkXCIsXG5cdFx0XCJyaXR1YWxpc2VkXCIsXG5cdFx0XCJyaXZlcmJlZFwiLFxuXHRcdFwicml2ZXJlZFwiLFxuXHRcdFwicm9hY2hlZFwiLFxuXHRcdFwicm9hZGJlZFwiLFxuXHRcdFwicm9ib3Rpc2VkXCIsXG5cdFx0XCJyb2JvdGl6ZWRcIixcblx0XHRcInJvbWFuaXplZFwiLFxuXHRcdFwicm9zZXR0ZWRcIixcblx0XHRcInJvc2luZWRcIixcblx0XHRcInJvdWdoaGVhcnRlZFwiLFxuXHRcdFwicnViaWVkXCIsXG5cdFx0XCJydWRkaWVkXCIsXG5cdFx0XCJydW5jaW5hdGVkXCIsXG5cdFx0XCJydXNzZXRlZFwiLFxuXHRcdFwic2FibGVkXCIsXG5cdFx0XCJzYWJyZWRcIixcblx0XHRcInNhYnJldG9vdGhlZFwiLFxuXHRcdFwic2FjaGV0ZWRcIixcblx0XHRcInNhY3JlZFwiLFxuXHRcdFwic2FkZGxlYnJlZFwiLFxuXHRcdFwic2FpbnRlZFwiLFxuXHRcdFwic2FsYXJpZWRcIixcblx0XHRcInNhbW95ZWRcIixcblx0XHRcInNhbmN0aWZpZWRcIixcblx0XHRcInNhdGVsbGl0ZWRcIixcblx0XHRcInNhdnZpZWRcIixcblx0XHRcInNhd3Rvb3RoZWRcIixcblx0XHRcInNjYW5kYWxsZWRcIixcblx0XHRcInNjYXJpZmllZFwiLFxuXHRcdFwic2NhcnBlZFwiLFxuXHRcdFwic2NlcHRyZWRcIixcblx0XHRcInNjaXNzb3JlZFwiLFxuXHRcdFwic2NyZWVkXCIsXG5cdFx0XCJzY3Jld3NoYXBlZFwiLFxuXHRcdFwic2NydXBsZWRcIixcblx0XHRcInNjdWxrZWRcIixcblx0XHRcInNjdXJyaWVkXCIsXG5cdFx0XCJzY3V0dGxlZFwiLFxuXHRcdFwic2VhYmVkXCIsXG5cdFx0XCJzZWF3ZWVkXCIsXG5cdFx0XCJzZWVkXCIsXG5cdFx0XCJzZWVkYmVkXCIsXG5cdFx0XCJzZWxmYXNzdXJlZFwiLFxuXHRcdFwic2VsZm9yZ2FuaXplZFwiLFxuXHRcdFwic2VtaWNpdmlsaXplZFwiLFxuXHRcdFwic2VtaWRldGFjaGVkXCIsXG5cdFx0XCJzZW1pZGlzYXNzZW1ibGVkXCIsXG5cdFx0XCJzZW1pZG9tZXN0aWNhdGVkXCIsXG5cdFx0XCJzZW1pcGV0cmlmaWVkXCIsXG5cdFx0XCJzZW1pcHJvbmF0ZWRcIixcblx0XHRcInNlbWlyZWZpbmVkXCIsXG5cdFx0XCJzZW1pdml0cmlmaWVkXCIsXG5cdFx0XCJzZW50aW5lbGVkXCIsXG5cdFx0XCJzZXBhbGVkXCIsXG5cdFx0XCJzZXBhbGxlZFwiLFxuXHRcdFwic2VxdWlubmVkXCIsXG5cdFx0XCJzZXhlZFwiLFxuXHRcdFwic2hhZ2dlZFwiLFxuXHRcdFwic2hhZ2d5Y29hdGVkXCIsXG5cdFx0XCJzaGFnZ3loYWlyZWRcIixcblx0XHRcInNoYWxlZFwiLFxuXHRcdFwic2hhbW1lZFwiLFxuXHRcdFwic2hhcnBhbmdsZWRcIixcblx0XHRcInNoYXJwY2xhd2VkXCIsXG5cdFx0XCJzaGFycGNvcm5lcmVkXCIsXG5cdFx0XCJzaGFycGVhcmVkXCIsXG5cdFx0XCJzaGFycGVkZ2VkXCIsXG5cdFx0XCJzaGFycGV5ZWRcIixcblx0XHRcInNoYXJwZmxhdm9yZWRcIixcblx0XHRcInNoYXJwbGltYmVkXCIsXG5cdFx0XCJzaGFycG5vc2VkXCIsXG5cdFx0XCJzaGFycHNpZ2h0ZWRcIixcblx0XHRcInNoYXJwdGFpbGVkXCIsXG5cdFx0XCJzaGFycHRvbmd1ZWRcIixcblx0XHRcInNoYXJwdG9vdGhlZFwiLFxuXHRcdFwic2hhcnB3aXR0ZWRcIixcblx0XHRcInNoYXJwd29yZGVkXCIsXG5cdFx0XCJzaGVkXCIsXG5cdFx0XCJzaGVsbGJlZFwiLFxuXHRcdFwic2hpZWxkc2hhcGVkXCIsXG5cdFx0XCJzaGltbWllZFwiLFxuXHRcdFwic2hpbm5lZFwiLFxuXHRcdFwic2hpcnRlZFwiLFxuXHRcdFwic2hpcnRzbGVldmVkXCIsXG5cdFx0XCJzaG9lZFwiLFxuXHRcdFwic2hvcnRiZWFrZWRcIixcblx0XHRcInNob3J0YmlsbGVkXCIsXG5cdFx0XCJzaG9ydGJvZGllZFwiLFxuXHRcdFwic2hvcnRoYWlyZWRcIixcblx0XHRcInNob3J0bGVnZ2VkXCIsXG5cdFx0XCJzaG9ydGxpbWJlZFwiLFxuXHRcdFwic2hvcnRuZWNrZWRcIixcblx0XHRcInNob3J0bm9zZWRcIixcblx0XHRcInNob3J0c2lnaHRlZFwiLFxuXHRcdFwic2hvcnRzbGVldmVkXCIsXG5cdFx0XCJzaG9ydHNub3V0ZWRcIixcblx0XHRcInNob3J0c3RhZmZlZFwiLFxuXHRcdFwic2hvcnR0YWlsZWRcIixcblx0XHRcInNob3J0dGVtcGVyZWRcIixcblx0XHRcInNob3J0dG9lZFwiLFxuXHRcdFwic2hvcnR0b25ndWVkXCIsXG5cdFx0XCJzaG9ydHdpbmRlZFwiLFxuXHRcdFwic2hvcnR3aW5nZWRcIixcblx0XHRcInNob3R0ZWRcIixcblx0XHRcInNocmVkXCIsXG5cdFx0XCJzaHJld3NpemVkXCIsXG5cdFx0XCJzaHJpbmVkXCIsXG5cdFx0XCJzaHJpbmtwcm9vZmVkXCIsXG5cdFx0XCJzaWNrYmVkXCIsXG5cdFx0XCJzaWNrbGVzaGFwZWRcIixcblx0XHRcInNpY2tsZXdlZWRcIixcblx0XHRcInNpZ25hbGlzZWRcIixcblx0XHRcInNpZ25pZmllZFwiLFxuXHRcdFwic2lsaWNpZmllZFwiLFxuXHRcdFwic2lsaWNvbml6ZWRcIixcblx0XHRcInNpbGt3ZWVkXCIsXG5cdFx0XCJzaWx0c2l6ZWRcIixcblx0XHRcInNpbHZlcnRvbmd1ZWRcIixcblx0XHRcInNpbXBsZW1pbmRlZFwiLFxuXHRcdFwic2ltcGxpZmllZFwiLFxuXHRcdFwic2luZ2xlYmFycmVsZWRcIixcblx0XHRcInNpbmdsZWJhcnJlbGxlZFwiLFxuXHRcdFwic2luZ2xlYmVkXCIsXG5cdFx0XCJzaW5nbGVibGFkZWRcIixcblx0XHRcInNpbmdsZWJyZWFzdGVkXCIsXG5cdFx0XCJzaW5nbGVjZWxsZWRcIixcblx0XHRcInNpbmdsZWZvb3RlZFwiLFxuXHRcdFwic2luZ2xlbGF5ZXJlZFwiLFxuXHRcdFwic2luZ2xlbWluZGVkXCIsXG5cdFx0XCJzaW5nbGVzZWVkZWRcIixcblx0XHRcInNpbmdsZXNoZWxsZWRcIixcblx0XHRcInNpbmdsZXN0cmFuZGVkXCIsXG5cdFx0XCJzaW5nbGV2YWx1ZWRcIixcblx0XHRcInNpc3NpZmllZFwiLFxuXHRcdFwic2lzdGVyZWRcIixcblx0XHRcInNpeGdpbGxlZFwiLFxuXHRcdFwic2l4bWVtYmVyZWRcIixcblx0XHRcInNpeHNpZGVkXCIsXG5cdFx0XCJzaXhzdG9yaWVkXCIsXG5cdFx0XCJza3VsbGVkXCIsXG5cdFx0XCJzbGlja2VyZWRcIixcblx0XHRcInNsaXBjYXNlZFwiLFxuXHRcdFwic2xvd3BhY2VkXCIsXG5cdFx0XCJzbG93d2l0dGVkXCIsXG5cdFx0XCJzbHVycmllZFwiLFxuXHRcdFwic21hbGxtaW5kZWRcIixcblx0XHRcInNtb290aGVuZWRcIixcblx0XHRcInNtb290aHRvbmd1ZWRcIixcblx0XHRcInNuYWdnbGV0b290aGVkXCIsXG5cdFx0XCJzbm91dGVkXCIsXG5cdFx0XCJzbm93YmFsbGVkXCIsXG5cdFx0XCJzbm93Y2FwcGVkXCIsXG5cdFx0XCJzbm93c2hlZFwiLFxuXHRcdFwic25vd3Nob2VkXCIsXG5cdFx0XCJzbnVibm9zZWRcIixcblx0XHRcInNvLWNhbGxlZFwiLFxuXHRcdFwic29mYWJlZFwiLFxuXHRcdFwic29mdGhlYXJ0ZWRcIixcblx0XHRcInNvZ2dlZFwiLFxuXHRcdFwic29sZWRcIixcblx0XHRcInNvbGlkaWZpZWRcIixcblx0XHRcInNvbGlwZWRcIixcblx0XHRcInNvcmJlZFwiLFxuXHRcdFwic291bGVkXCIsXG5cdFx0XCJzcGVhcnNoYXBlZFwiLFxuXHRcdFwic3BlY2lmaWVkXCIsXG5cdFx0XCJzcGVjdGFjbGVkXCIsXG5cdFx0XCJzcGVkXCIsXG5cdFx0XCJzcGVlY2hlZFwiLFxuXHRcdFwic3BlZWNoaWZpZWRcIixcblx0XHRcInNwZWVkXCIsXG5cdFx0XCJzcGllZFwiLFxuXHRcdFwic3BpZmZpZWRcIixcblx0XHRcInNwaW5kbGVzaGFwZWRcIixcblx0XHRcInNwaXJpdHVhbGlzZWRcIixcblx0XHRcInNwaXJ0ZWRcIixcblx0XHRcInNwbGF5Zm9vdGVkXCIsXG5cdFx0XCJzcG9vbmZlZFwiLFxuXHRcdFwic3Bvb25mZWVkXCIsXG5cdFx0XCJzcG9vbnNoYXBlZFwiLFxuXHRcdFwic3ByZWFkZWFnbGVkXCIsXG5cdFx0XCJzcXVhcmVqYXdlZFwiLFxuXHRcdFwic3F1YXJlc2hhcGVkXCIsXG5cdFx0XCJzcXVhcmVzaG91bGRlcmVkXCIsXG5cdFx0XCJzcXVhcmV0b2VkXCIsXG5cdFx0XCJzcXVlZWdlZWRcIixcblx0XHRcInN0YWxlZFwiLFxuXHRcdFwic3RhcnNoYXBlZFwiLFxuXHRcdFwic3RhcnNwYW5nbGVkXCIsXG5cdFx0XCJzdGFyc3R1ZGRlZFwiLFxuXHRcdFwic3RhdGVjaGFydGVyZWRcIixcblx0XHRcInN0YXRlc3BvbnNvcmVkXCIsXG5cdFx0XCJzdGF0dWVkXCIsXG5cdFx0XCJzdGVhZGllZFwiLFxuXHRcdFwic3RlYW1wb3dlcmVkXCIsXG5cdFx0XCJzdGVlZFwiLFxuXHRcdFwic3RlZWxoZWFydGVkXCIsXG5cdFx0XCJzdGVlcGxlZFwiLFxuXHRcdFwic3Rlcm5lZFwiLFxuXHRcdFwic3RpZmZuZWNrZWRcIixcblx0XHRcInN0aWxldHRvZWRcIixcblx0XHRcInN0aW1pZWRcIixcblx0XHRcInN0aW5rd2VlZFwiLFxuXHRcdFwic3RpcnJ1cHNoYXBlZFwiLFxuXHRcdFwic3RvY2tpbmdlZFwiLFxuXHRcdFwic3RvcmV5ZWRcIixcblx0XHRcInN0b3JpZWRcIixcblx0XHRcInN0b3V0aGVhcnRlZFwiLFxuXHRcdFwic3RyYWl0bGFjZWRcIixcblx0XHRcInN0cmF0aWZpZWRcIixcblx0XHRcInN0cmF3YmVycnlmbGF2b3JlZFwiLFxuXHRcdFwic3RyZWFtYmVkXCIsXG5cdFx0XCJzdHJlc3NpbmR1Y2VkXCIsXG5cdFx0XCJzdHJldGNoZXJlZFwiLFxuXHRcdFwic3RyaWN0dXJlZFwiLFxuXHRcdFwic3Ryb25nYm9kaWVkXCIsXG5cdFx0XCJzdHJvbmdib25lZFwiLFxuXHRcdFwic3Ryb25nZmxhdm9yZWRcIixcblx0XHRcInN0cm9uZ2hlYXJ0ZWRcIixcblx0XHRcInN0cm9uZ2xpbWJlZFwiLFxuXHRcdFwic3Ryb25nbWluZGVkXCIsXG5cdFx0XCJzdHJvbmdzY2VudGVkXCIsXG5cdFx0XCJzdHJvbmd3aWxsZWRcIixcblx0XHRcInN0dWJibGVkXCIsXG5cdFx0XCJzdHVkaWVkXCIsXG5cdFx0XCJzdHVsdGlmaWVkXCIsXG5cdFx0XCJzdHVwZWZpZWRcIixcblx0XHRcInN0eWVkXCIsXG5cdFx0XCJzdHltaWVkXCIsXG5cdFx0XCJzdWJjbGFzc2lmaWVkXCIsXG5cdFx0XCJzdWJjb21taXNzaW9uZWRcIixcblx0XHRcInN1Ym1pbmlhdHVyaXNlZFwiLFxuXHRcdFwic3Vic2F0dXJhdGVkXCIsXG5cdFx0XCJzdWJ1bGF0ZWRcIixcblx0XHRcInN1YnVyYmFuaXNlZFwiLFxuXHRcdFwic3VidXJiYW5pemVkXCIsXG5cdFx0XCJzdWJ1cmJlZFwiLFxuXHRcdFwic3VjY2VlZFwiLFxuXHRcdFwic3VlZGVkXCIsXG5cdFx0XCJzdWdhcnJlbGF0ZWRcIixcblx0XHRcInN1bGZ1cml6ZWRcIixcblx0XHRcInN1bmJlZFwiLFxuXHRcdFwic3VwZXJoYXJkZW5lZFwiLFxuXHRcdFwic3VwZXJpbmZlY3RlZFwiLFxuXHRcdFwic3VwZXJzaW1wbGlmaWVkXCIsXG5cdFx0XCJzdXJlZm9vdGVkXCIsXG5cdFx0XCJzd2VldHNjZW50ZWRcIixcblx0XHRcInN3aWZ0ZWRcIixcblx0XHRcInN3b3Jkc2hhcGVkXCIsXG5cdFx0XCJzeWxsYWJpZmllZFwiLFxuXHRcdFwic3lwaGlsaXplZFwiLFxuXHRcdFwidGFidWxhcml6ZWRcIixcblx0XHRcInRhbGVudGVkXCIsXG5cdFx0XCJ0YXJwYXBlcmVkXCIsXG5cdFx0XCJ0YXV0b21lcml6ZWRcIixcblx0XHRcInRlYXRlZFwiLFxuXHRcdFwidGVlZFwiLFxuXHRcdFwidGVlbmFnZWRcIixcblx0XHRcInRlZXRvdGFsZWRcIixcblx0XHRcInRlbmRlcmhlYXJ0ZWRcIixcblx0XHRcInRlbnRhY2xlZFwiLFxuXHRcdFwidGVudXJlZFwiLFxuXHRcdFwidGVybWVkXCIsXG5cdFx0XCJ0ZXJuYXRlZFwiLFxuXHRcdFwidGVzdGJlZFwiLFxuXHRcdFwidGVzdGlmaWVkXCIsXG5cdFx0XCJ0aGVhdHJpY2FsaXNlZFwiLFxuXHRcdFwidGhlYXRyaWNhbGl6ZWRcIixcblx0XHRcInRoZW1lZFwiLFxuXHRcdFwidGhpY2tldGVkXCIsXG5cdFx0XCJ0aGlja3NraW5uZWRcIixcblx0XHRcInRoaWNrd2FsbGVkXCIsXG5cdFx0XCJ0aGlnaGVkXCIsXG5cdFx0XCJ0aGltYmxlZFwiLFxuXHRcdFwidGhpbWJsZXdpdHRlZFwiLFxuXHRcdFwidGhvbmdlZFwiLFxuXHRcdFwidGhvcm91Z2hicmVkXCIsXG5cdFx0XCJ0aHJhbGxlZFwiLFxuXHRcdFwidGhyZWF0ZWRcIixcblx0XHRcInRocm9hdGVkXCIsXG5cdFx0XCJ0aHJvdWdoYnJlZFwiLFxuXHRcdFwidGh5cm9pZGVjdG9taXNlZFwiLFxuXHRcdFwidGh5cm9pZGVjdG9taXplZFwiLFxuXHRcdFwidGlhcmFlZFwiLFxuXHRcdFwidGlja3RvY2tlZFwiLFxuXHRcdFwidGlkaWVkXCIsXG5cdFx0XCJ0aWdodGFzc2VkXCIsXG5cdFx0XCJ0aWdodGZpc3RlZFwiLFxuXHRcdFwidGlnaHRsaXBwZWRcIixcblx0XHRcInRpbWVob25vdXJlZFwiLFxuXHRcdFwidGluZGVyZWRcIixcblx0XHRcInRpbmVkXCIsXG5cdFx0XCJ0aW5zZWxsZWRcIixcblx0XHRcInRpcHB5dG9lZFwiLFxuXHRcdFwidGlwdG9lZFwiLFxuXHRcdFwidGl0bGVkXCIsXG5cdFx0XCJ0b2VkXCIsXG5cdFx0XCJ0b21haGF3a2VkXCIsXG5cdFx0XCJ0b25nZWRcIixcblx0XHRcInRvb2xzaGVkXCIsXG5cdFx0XCJ0b290aHBsYXRlZFwiLFxuXHRcdFwidG9wbGlnaHRlZFwiLFxuXHRcdFwidG9yY2hsaWdodGVkXCIsXG5cdFx0XCJ0b3VnaGhlYXJ0ZWRcIixcblx0XHRcInRyYWRpdGlvbmFsaXplZFwiLFxuXHRcdFwidHJhamVjdGVkXCIsXG5cdFx0XCJ0cmFuY2VkXCIsXG5cdFx0XCJ0cmFuc2dlbmRlcmVkXCIsXG5cdFx0XCJ0cmFuc2xpdGVyYXRlZFwiLFxuXHRcdFwidHJhbnNsb2NhdGVkXCIsXG5cdFx0XCJ0cmFuc21vZ3JpZmllZFwiLFxuXHRcdFwidHJlYWRsZWRcIixcblx0XHRcInRyZWVkXCIsXG5cdFx0XCJ0cmVlbGluZWRcIixcblx0XHRcInRyZXNzZWRcIixcblx0XHRcInRyaWFsbGVkXCIsXG5cdFx0XCJ0cmlhbmdsZWRcIixcblx0XHRcInRyaWZvbGlhdGVkXCIsXG5cdFx0XCJ0cmlmb2xpb2xhdGVkXCIsXG5cdFx0XCJ0cmlsb2JlZFwiLFxuXHRcdFwidHJ1Y2tsZWJlZFwiLFxuXHRcdFwidHJ1ZWhlYXJ0ZWRcIixcblx0XHRcInRydW1wZXRzaGFwZWRcIixcblx0XHRcInRydW1wZXR3ZWVkXCIsXG5cdFx0XCJ0dWJlcmN1bGF0ZWRcIixcblx0XHRcInR1bWJsZXdlZWRcIixcblx0XHRcInR1bm5lbHNoYXBlZFwiLFxuXHRcdFwidHVyYmFuZWRcIixcblx0XHRcInR1cnJldGVkXCIsXG5cdFx0XCJ0dXJ0bGVuZWNrZWRcIixcblx0XHRcInR1c2tzaGFwZWRcIixcblx0XHRcInR3ZWVkXCIsXG5cdFx0XCJ0d2lnZ2VkXCIsXG5cdFx0XCJ0eXBpZmllZFwiLFxuXHRcdFwidWxjZXJlZFwiLFxuXHRcdFwidWx0cmFjaXZpbGlzZWRcIixcblx0XHRcInVsdHJhY2l2aWxpemVkXCIsXG5cdFx0XCJ1bHRyYWNvb2xlZFwiLFxuXHRcdFwidWx0cmFkaWduaWZpZWRcIixcblx0XHRcInVsdHJhZGlzcGVyc2VkXCIsXG5cdFx0XCJ1bHRyYWZpbHRlcmVkXCIsXG5cdFx0XCJ1bHRyYXJlZFwiLFxuXHRcdFwidWx0cmFzaW1wbGlmaWVkXCIsXG5cdFx0XCJ1bHRyYXNvcGhpc3RpY2F0ZWRcIixcblx0XHRcInVuYWJhbmRvbmVkXCIsXG5cdFx0XCJ1bmFiYXNoZWRcIixcblx0XHRcInVuYWJicmV2aWF0ZWRcIixcblx0XHRcInVuYWJldHRlZFwiLFxuXHRcdFwidW5hYm9saXNoZWRcIixcblx0XHRcInVuYWJvcnRlZFwiLFxuXHRcdFwidW5hYnJhZGVkXCIsXG5cdFx0XCJ1bmFicmlkZ2VkXCIsXG5cdFx0XCJ1bmFic29sdmVkXCIsXG5cdFx0XCJ1bmFic29yYmVkXCIsXG5cdFx0XCJ1bmFjY2VsZXJhdGVkXCIsXG5cdFx0XCJ1bmFjY2VudGVkXCIsXG5cdFx0XCJ1bmFjY2VudHVhdGVkXCIsXG5cdFx0XCJ1bmFjY2xpbWF0aXNlZFwiLFxuXHRcdFwidW5hY2NsaW1hdGl6ZWRcIixcblx0XHRcInVuYWNjb21wYW5pZWRcIixcblx0XHRcInVuYWNjb21wbGlzaGVkXCIsXG5cdFx0XCJ1bmFjY29zdGVkXCIsXG5cdFx0XCJ1bmFjY3JlZGl0ZWRcIixcblx0XHRcInVuYWNjcnVlZFwiLFxuXHRcdFwidW5hY2N1bXVsYXRlZFwiLFxuXHRcdFwidW5hY2N1c3RvbWVkXCIsXG5cdFx0XCJ1bmFjaWR1bGF0ZWRcIixcblx0XHRcInVuYWNxdWFpbnRlZFwiLFxuXHRcdFwidW5hY3F1aXR0ZWRcIixcblx0XHRcInVuYWN0aXZhdGVkXCIsXG5cdFx0XCJ1bmFjdHVhdGVkXCIsXG5cdFx0XCJ1bmFkYXB0ZWRcIixcblx0XHRcInVuYWRkaWN0ZWRcIixcblx0XHRcInVuYWRqb3VybmVkXCIsXG5cdFx0XCJ1bmFkanVkaWNhdGVkXCIsXG5cdFx0XCJ1bmFkanVzdGVkXCIsXG5cdFx0XCJ1bmFkbW9uaXNoZWRcIixcblx0XHRcInVuYWRvcHRlZFwiLFxuXHRcdFwidW5hZG9yZWRcIixcblx0XHRcInVuYWRvcm5lZFwiLFxuXHRcdFwidW5hZHNvcmJlZFwiLFxuXHRcdFwidW5hZHVsdGVyYXRlZFwiLFxuXHRcdFwidW5hZHZlcnRpc2VkXCIsXG5cdFx0XCJ1bmFlcmF0ZWRcIixcblx0XHRcInVuYWZmaWxpYXRlZFwiLFxuXHRcdFwidW5hZ2dyZWdhdGVkXCIsXG5cdFx0XCJ1bmFnaXRhdGVkXCIsXG5cdFx0XCJ1bmFpbWVkXCIsXG5cdFx0XCJ1bmFpcmVkXCIsXG5cdFx0XCJ1bmFsaWFzZWRcIixcblx0XHRcInVuYWxpZW5hdGVkXCIsXG5cdFx0XCJ1bmFsaWduZWRcIixcblx0XHRcInVuYWxsb2NhdGVkXCIsXG5cdFx0XCJ1bmFsbG95ZWRcIixcblx0XHRcInVuYWxwaGFiZXRpemVkXCIsXG5cdFx0XCJ1bmFtYXNzZWRcIixcblx0XHRcInVuYW1vcnRpemVkXCIsXG5cdFx0XCJ1bmFtcGxpZmllZFwiLFxuXHRcdFwidW5hbmFlc3RoZXRpc2VkXCIsXG5cdFx0XCJ1bmFuYWVzdGhldGl6ZWRcIixcblx0XHRcInVuYW5lbGVkXCIsXG5cdFx0XCJ1bmFuZXN0aGV0aXNlZFwiLFxuXHRcdFwidW5hbmVzdGhldGl6ZWRcIixcblx0XHRcInVuYW5nZXJlZFwiLFxuXHRcdFwidW5hbm5lYWxlZFwiLFxuXHRcdFwidW5hbm5leGVkXCIsXG5cdFx0XCJ1bmFubmloaWxhdGVkXCIsXG5cdFx0XCJ1bmFubm90YXRlZFwiLFxuXHRcdFwidW5hbm9pbnRlZFwiLFxuXHRcdFwidW5hbnRpY2lwYXRlZFwiLFxuXHRcdFwidW5hcHBhcmVsZWRcIixcblx0XHRcInVuYXBwZW5kYWdlZFwiLFxuXHRcdFwidW5hcHBvcnRpb25lZFwiLFxuXHRcdFwidW5hcHByZW50aWNlZFwiLFxuXHRcdFwidW5hcHByb2FjaGVkXCIsXG5cdFx0XCJ1bmFwcHJvcHJpYXRlZFwiLFxuXHRcdFwidW5hcmJpdHJhdGVkXCIsXG5cdFx0XCJ1bmFyY2hlZFwiLFxuXHRcdFwidW5hcmNoaXZlZFwiLFxuXHRcdFwidW5hcm1vcmVkXCIsXG5cdFx0XCJ1bmFybW91cmVkXCIsXG5cdFx0XCJ1bmFydGljdWxhdGVkXCIsXG5cdFx0XCJ1bmFzY2VydGFpbmVkXCIsXG5cdFx0XCJ1bmFzaGFtZWRcIixcblx0XHRcInVuYXNwaXJhdGVkXCIsXG5cdFx0XCJ1bmFzc2VtYmxlZFwiLFxuXHRcdFwidW5hc3NlcnRlZFwiLFxuXHRcdFwidW5hc3Nlc3NlZFwiLFxuXHRcdFwidW5hc3NvY2lhdGVkXCIsXG5cdFx0XCJ1bmFzc29ydGVkXCIsXG5cdFx0XCJ1bmFzc3VhZ2VkXCIsXG5cdFx0XCJ1bmFzdG9uaXNoZWRcIixcblx0XHRcInVuYXN0b3VuZGVkXCIsXG5cdFx0XCJ1bmF0b25lZFwiLFxuXHRcdFwidW5hdHRhaW5lZFwiLFxuXHRcdFwidW5hdHRhaW50ZWRcIixcblx0XHRcInVuYXR0ZW51YXRlZFwiLFxuXHRcdFwidW5hdHRyaWJ1dGVkXCIsXG5cdFx0XCJ1bmF1Y3Rpb25lZFwiLFxuXHRcdFwidW5hdWRpdGVkXCIsXG5cdFx0XCJ1bmF1dGhlbnRpY2F0ZWRcIixcblx0XHRcInVuYXV0b2dyYXBoZWRcIixcblx0XHRcInVuYXZlcnRlZFwiLFxuXHRcdFwidW5hd2FrZWRcIixcblx0XHRcInVuYXdha2VuZWRcIixcblx0XHRcInVuYXdhcmRlZFwiLFxuXHRcdFwidW5hd2VkXCIsXG5cdFx0XCJ1bmJhZmZsZWRcIixcblx0XHRcInVuYmFpdGVkXCIsXG5cdFx0XCJ1bmJhbGNvbmllZFwiLFxuXHRcdFwidW5iYW5kZWRcIixcblx0XHRcInVuYmFuaXNoZWRcIixcblx0XHRcInVuYmFwdGlzZWRcIixcblx0XHRcInVuYmFwdGl6ZWRcIixcblx0XHRcInVuYmFycmVsZWRcIixcblx0XHRcInVuYmFycmVsbGVkXCIsXG5cdFx0XCJ1bmJhdHRlcmVkXCIsXG5cdFx0XCJ1bmJlYWRlZFwiLFxuXHRcdFwidW5iZWFyZGVkXCIsXG5cdFx0XCJ1bmJlbmVmaWNlZFwiLFxuXHRcdFwidW5iZXNvdHRlZFwiLFxuXHRcdFwidW5iZXRyYXllZFwiLFxuXHRcdFwidW5iZXRyb3RoZWRcIixcblx0XHRcInVuYmlhc2VkXCIsXG5cdFx0XCJ1bmJpYXNzZWRcIixcblx0XHRcInVuYmlnb3RlZFwiLFxuXHRcdFwidW5iaWxsZWRcIixcblx0XHRcInVuYmxhY2tlbmVkXCIsXG5cdFx0XCJ1bmJsYW5rZXRlZFwiLFxuXHRcdFwidW5ibGFzcGhlbWVkXCIsXG5cdFx0XCJ1bmJsYXpvbmVkXCIsXG5cdFx0XCJ1bmJsaXN0ZXJlZFwiLFxuXHRcdFwidW5ibG9ja2FkZWRcIixcblx0XHRcInVuYmxvb2RpZWRcIixcblx0XHRcInVuYm9kaWVkXCIsXG5cdFx0XCJ1bmJvbmRlZFwiLFxuXHRcdFwidW5ib3RoZXJlZFwiLFxuXHRcdFwidW5ib3VuZGVkXCIsXG5cdFx0XCJ1bmJyYWNrZXRlZFwiLFxuXHRcdFwidW5icmFuZGVkXCIsXG5cdFx0XCJ1bmJyZWFkZWRcIixcblx0XHRcInVuYnJld2VkXCIsXG5cdFx0XCJ1bmJyaWRnZWRcIixcblx0XHRcInVuYnJpZGxlZFwiLFxuXHRcdFwidW5icm9hY2hlZFwiLFxuXHRcdFwidW5idWRnZXRlZFwiLFxuXHRcdFwidW5idWZmZWRcIixcblx0XHRcInVuYnVmZmVyZWRcIixcblx0XHRcInVuYnVybmlzaGVkXCIsXG5cdFx0XCJ1bmJ1dGNoZXJlZFwiLFxuXHRcdFwidW5idXR0ZXJlZFwiLFxuXHRcdFwidW5jYWNoZWRcIixcblx0XHRcInVuY2FrZWRcIixcblx0XHRcInVuY2FsY2lmaWVkXCIsXG5cdFx0XCJ1bmNhbGlicmF0ZWRcIixcblx0XHRcInVuY2Ftb3VmbGFnZWRcIixcblx0XHRcInVuY2FtcGhvcmF0ZWRcIixcblx0XHRcInVuY2FuY2VsZWRcIixcblx0XHRcInVuY2FuY2VsbGVkXCIsXG5cdFx0XCJ1bmNhcGl0YWxpemVkXCIsXG5cdFx0XCJ1bmNhcmJvbmF0ZWRcIixcblx0XHRcInVuY2FycGV0ZWRcIixcblx0XHRcInVuY2FzZWRcIixcblx0XHRcInVuY2FzaGVkXCIsXG5cdFx0XCJ1bmNhc3RyYXRlZFwiLFxuXHRcdFwidW5jYXRhbG9ndWVkXCIsXG5cdFx0XCJ1bmNhdGFseXNlZFwiLFxuXHRcdFwidW5jYXRhbHl6ZWRcIixcblx0XHRcInVuY2F0ZWdvcmlzZWRcIixcblx0XHRcInVuY2F0ZXJlZFwiLFxuXHRcdFwidW5jYXVsa2VkXCIsXG5cdFx0XCJ1bmNlbGVicmF0ZWRcIixcblx0XHRcInVuY2Vuc29yZWRcIixcblx0XHRcInVuY2Vuc3VyZWRcIixcblx0XHRcInVuY2VydGlmaWVkXCIsXG5cdFx0XCJ1bmNoYW1iZXJlZFwiLFxuXHRcdFwidW5jaGFubmVsZWRcIixcblx0XHRcInVuY2hhbm5lbGxlZFwiLFxuXHRcdFwidW5jaGFwZXJvbmVkXCIsXG5cdFx0XCJ1bmNoYXJhY3Rlcml6ZWRcIixcblx0XHRcInVuY2hhcnRlZFwiLFxuXHRcdFwidW5jaGFydGVyZWRcIixcblx0XHRcInVuY2hhc3RlbmVkXCIsXG5cdFx0XCJ1bmNoYXN0aXNlZFwiLFxuXHRcdFwidW5jaGVsYXRlZFwiLFxuXHRcdFwidW5jaGVyaXNoZWRcIixcblx0XHRcInVuY2hpbGxlZFwiLFxuXHRcdFwidW5jaHJpc3RlbmVkXCIsXG5cdFx0XCJ1bmNocm9uaWNsZWRcIixcblx0XHRcInVuY2lyY3VtY2lzZWRcIixcblx0XHRcInVuY2lyY3Vtc2NyaWJlZFwiLFxuXHRcdFwidW5jaXRlZFwiLFxuXHRcdFwidW5jaXZpbGlzZWRcIixcblx0XHRcInVuY2l2aWxpemVkXCIsXG5cdFx0XCJ1bmNsYXJpZmllZFwiLFxuXHRcdFwidW5jbGFzc2VkXCIsXG5cdFx0XCJ1bmNsYXNzaWZpZWRcIixcblx0XHRcInVuY2xlYXZlZFwiLFxuXHRcdFwidW5jbGltYmVkXCIsXG5cdFx0XCJ1bmNsdXN0ZXJlZFwiLFxuXHRcdFwidW5jbHV0dGVyZWRcIixcblx0XHRcInVuY29hZ3VsYXRlZFwiLFxuXHRcdFwidW5jb2RlZFwiLFxuXHRcdFwidW5jb2RpZmllZFwiLFxuXHRcdFwidW5jb2VyY2VkXCIsXG5cdFx0XCJ1bmNvaW5lZFwiLFxuXHRcdFwidW5jb2xsYXBzZWRcIixcblx0XHRcInVuY29sbGF0ZWRcIixcblx0XHRcInVuY29sb25pc2VkXCIsXG5cdFx0XCJ1bmNvbG9uaXplZFwiLFxuXHRcdFwidW5jb2x1bW5lZFwiLFxuXHRcdFwidW5jb21iaW5lZFwiLFxuXHRcdFwidW5jb21tZW50ZWRcIixcblx0XHRcInVuY29tbWVyY2lhbGlzZWRcIixcblx0XHRcInVuY29tbWVyY2lhbGl6ZWRcIixcblx0XHRcInVuY29tbWlzc2lvbmVkXCIsXG5cdFx0XCJ1bmNvbW1pdHRlZFwiLFxuXHRcdFwidW5jb21wYWN0ZWRcIixcblx0XHRcInVuY29tcGFydG1lbnRhbGl6ZWRcIixcblx0XHRcInVuY29tcGFydG1lbnRlZFwiLFxuXHRcdFwidW5jb21wZW5zYXRlZFwiLFxuXHRcdFwidW5jb21waWxlZFwiLFxuXHRcdFwidW5jb21wbGljYXRlZFwiLFxuXHRcdFwidW5jb21wb3VuZGVkXCIsXG5cdFx0XCJ1bmNvbXByZWhlbmVkXCIsXG5cdFx0XCJ1bmNvbXB1dGVkXCIsXG5cdFx0XCJ1bmNvbmNlYWxlZFwiLFxuXHRcdFwidW5jb25jZWRlZFwiLFxuXHRcdFwidW5jb25jbHVkZWRcIixcblx0XHRcInVuY29uZGVuc2VkXCIsXG5cdFx0XCJ1bmNvbmRpdGlvbmVkXCIsXG5cdFx0XCJ1bmNvbmZpbmVkXCIsXG5cdFx0XCJ1bmNvbmZpcm1lZFwiLFxuXHRcdFwidW5jb25nZXN0ZWRcIixcblx0XHRcInVuY29uZ2xvbWVyYXRlZFwiLFxuXHRcdFwidW5jb25ncmF0dWxhdGVkXCIsXG5cdFx0XCJ1bmNvbmp1Z2F0ZWRcIixcblx0XHRcInVuY29ucXVlcmVkXCIsXG5cdFx0XCJ1bmNvbnNlY3JhdGVkXCIsXG5cdFx0XCJ1bmNvbnNvbGVkXCIsXG5cdFx0XCJ1bmNvbnNvbGlkYXRlZFwiLFxuXHRcdFwidW5jb25zdGlwYXRlZFwiLFxuXHRcdFwidW5jb25zdHJpY3RlZFwiLFxuXHRcdFwidW5jb25zdHJ1Y3RlZFwiLFxuXHRcdFwidW5jb25zdW1lZFwiLFxuXHRcdFwidW5jb250YWN0ZWRcIixcblx0XHRcInVuY29udHJhY3RlZFwiLFxuXHRcdFwidW5jb250cmFkaWN0ZWRcIixcblx0XHRcInVuY29udHJpdmVkXCIsXG5cdFx0XCJ1bmNvbnZlcnRlZFwiLFxuXHRcdFwidW5jb252ZXllZFwiLFxuXHRcdFwidW5jb252aWN0ZWRcIixcblx0XHRcInVuY29va2VkXCIsXG5cdFx0XCJ1bmNvb2xlZFwiLFxuXHRcdFwidW5jb29yZGluYXRlZFwiLFxuXHRcdFwidW5jb3B5cmlnaHRlZFwiLFxuXHRcdFwidW5jb3JlZFwiLFxuXHRcdFwidW5jb3JyZWxhdGVkXCIsXG5cdFx0XCJ1bmNvcnJvYm9yYXRlZFwiLFxuXHRcdFwidW5jb3N0ZWRcIixcblx0XHRcInVuY291bnNlbGVkXCIsXG5cdFx0XCJ1bmNvdW5zZWxsZWRcIixcblx0XHRcInVuY291bnRlcmZlaXRlZFwiLFxuXHRcdFwidW5jb3ZldGVkXCIsXG5cdFx0XCJ1bmNyYWZ0ZWRcIixcblx0XHRcInVuY3JhbXBlZFwiLFxuXHRcdFwidW5jcmFubmllZFwiLFxuXHRcdFwidW5jcmF6ZWRcIixcblx0XHRcInVuY3JlYW1lZFwiLFxuXHRcdFwidW5jcmVhc2VkXCIsXG5cdFx0XCJ1bmNyZWF0ZWRcIixcblx0XHRcInVuY3JlZGVudGlhbGxlZFwiLFxuXHRcdFwidW5jcmVkaXRlZFwiLFxuXHRcdFwidW5jcmVzdGVkXCIsXG5cdFx0XCJ1bmNyZXZhc3NlZFwiLFxuXHRcdFwidW5jcmlwcGxlZFwiLFxuXHRcdFwidW5jcml0aWNpc2VkXCIsXG5cdFx0XCJ1bmNyaXRpY2l6ZWRcIixcblx0XHRcInVuY3JvcHBlZFwiLFxuXHRcdFwidW5jcm9zc2xpbmtlZFwiLFxuXHRcdFwidW5jcm93ZGVkXCIsXG5cdFx0XCJ1bmNydWNpZmllZFwiLFxuXHRcdFwidW5jcnVtYmxlZFwiLFxuXHRcdFwidW5jcnlzdGFsaXplZFwiLFxuXHRcdFwidW5jcnlzdGFsbGlzZWRcIixcblx0XHRcInVuY3J5c3RhbGxpemVkXCIsXG5cdFx0XCJ1bmN1YmVkXCIsXG5cdFx0XCJ1bmN1ZGRsZWRcIixcblx0XHRcInVuY3VlZFwiLFxuXHRcdFwidW5jdWxsZWRcIixcblx0XHRcInVuY3VsdGl2YXRlZFwiLFxuXHRcdFwidW5jdWx0dXJlZFwiLFxuXHRcdFwidW5jdXBwZWRcIixcblx0XHRcInVuY3VyYXRlZFwiLFxuXHRcdFwidW5jdXJiZWRcIixcblx0XHRcInVuY3VycmllZFwiLFxuXHRcdFwidW5jdXJ0YWluZWRcIixcblx0XHRcInVuY3VzaGlvbmVkXCIsXG5cdFx0XCJ1bmRhbXBlZFwiLFxuXHRcdFwidW5kYW1wZW5lZFwiLFxuXHRcdFwidW5kYXBwbGVkXCIsXG5cdFx0XCJ1bmRhcmtlbmVkXCIsXG5cdFx0XCJ1bmRhdGVkXCIsXG5cdFx0XCJ1bmRhdWJlZFwiLFxuXHRcdFwidW5kYXp6bGVkXCIsXG5cdFx0XCJ1bmRlYWRlbmVkXCIsXG5cdFx0XCJ1bmRlYWZlbmVkXCIsXG5cdFx0XCJ1bmRlYmF0ZWRcIixcblx0XHRcInVuZGVidW5rZWRcIixcblx0XHRcInVuZGVjZWFzZWRcIixcblx0XHRcInVuZGVjaW1hbGl6ZWRcIixcblx0XHRcInVuZGVjaXBoZXJlZFwiLFxuXHRcdFwidW5kZWNrZWRcIixcblx0XHRcInVuZGVjbGFyZWRcIixcblx0XHRcInVuZGVjb21wb3NlZFwiLFxuXHRcdFwidW5kZWNvbnN0cnVjdGVkXCIsXG5cdFx0XCJ1bmRlZGljYXRlZFwiLFxuXHRcdFwidW5kZWZlYXRlZFwiLFxuXHRcdFwidW5kZWZlcnJlZFwiLFxuXHRcdFwidW5kZWZpZWRcIixcblx0XHRcInVuZGVmaW5lZFwiLFxuXHRcdFwidW5kZWZsZWN0ZWRcIixcblx0XHRcInVuZGVmcmF1ZGVkXCIsXG5cdFx0XCJ1bmRlZnJheWVkXCIsXG5cdFx0XCJ1bmRlZ2Fzc2VkXCIsXG5cdFx0XCJ1bmRlamVjdGVkXCIsXG5cdFx0XCJ1bmRlbGVnYXRlZFwiLFxuXHRcdFwidW5kZWxldGVkXCIsXG5cdFx0XCJ1bmRlbGltaXRlZFwiLFxuXHRcdFwidW5kZWxpbmVhdGVkXCIsXG5cdFx0XCJ1bmRlbWVudGVkXCIsXG5cdFx0XCJ1bmRlbW9saXNoZWRcIixcblx0XHRcInVuZGVtb25zdHJhdGVkXCIsXG5cdFx0XCJ1bmRlbmF0dXJlZFwiLFxuXHRcdFwidW5kZW5pZWRcIixcblx0XHRcInVuZGVudGVkXCIsXG5cdFx0XCJ1bmRlb2Rvcml6ZWRcIixcblx0XHRcInVuZGVwaWN0ZWRcIixcblx0XHRcInVuZGVwdXRpemVkXCIsXG5cdFx0XCJ1bmRlcmFnZWRcIixcblx0XHRcInVuZGVyYXJtZWRcIixcblx0XHRcInVuZGVyYXNzZXNzZWRcIixcblx0XHRcInVuZGVyYnJlZFwiLFxuXHRcdFwidW5kZXJidWRnZXRlZFwiLFxuXHRcdFwidW5kZXJjYXBpdGFsaXNlZFwiLFxuXHRcdFwidW5kZXJjYXBpdGFsaXplZFwiLFxuXHRcdFwidW5kZXJkaWFnbm9zZWRcIixcblx0XHRcInVuZGVyZG9jdW1lbnRlZFwiLFxuXHRcdFwidW5kZXJlcXVpcHBlZFwiLFxuXHRcdFwidW5kZXJleHBsb2l0ZWRcIixcblx0XHRcInVuZGVyZXhwbG9yZWRcIixcblx0XHRcInVuZGVyZmVkXCIsXG5cdFx0XCJ1bmRlcmZlZWRcIixcblx0XHRcInVuZGVyZnVybmlzaGVkXCIsXG5cdFx0XCJ1bmRlcmdvdmVybmVkXCIsXG5cdFx0XCJ1bmRlcmdyYXplZFwiLFxuXHRcdFwidW5kZXJpbmZsYXRlZFwiLFxuXHRcdFwidW5kZXJpbnN1cmVkXCIsXG5cdFx0XCJ1bmRlcmludmVzdGVkXCIsXG5cdFx0XCJ1bmRlcml2ZWRcIixcblx0XHRcInVuZGVybWFpbnRhaW5lZFwiLFxuXHRcdFwidW5kZXJtZW50aW9uZWRcIixcblx0XHRcInVuZGVybW90aXZhdGVkXCIsXG5cdFx0XCJ1bmRlcnBlcmNlaXZlZFwiLFxuXHRcdFwidW5kZXJwb3dlcmVkXCIsXG5cdFx0XCJ1bmRlcnByaXZpbGVnZWRcIixcblx0XHRcInVuZGVycXVhbGlmaWVkXCIsXG5cdFx0XCJ1bmRlcnJlaGVhcnNlZFwiLFxuXHRcdFwidW5kZXJyZXNvdXJjZWRcIixcblx0XHRcInVuZGVycmlwZW5lZFwiLFxuXHRcdFwidW5kZXJzYXR1cmF0ZWRcIixcblx0XHRcInVuZGVyc2V4ZWRcIixcblx0XHRcInVuZGVyc2l6ZWRcIixcblx0XHRcInVuZGVyc3BlY2lmaWVkXCIsXG5cdFx0XCJ1bmRlcnN0YWZmZWRcIixcblx0XHRcInVuZGVyc3RvY2tlZFwiLFxuXHRcdFwidW5kZXJzdHJlc3NlZFwiLFxuXHRcdFwidW5kZXJzdHVkaWVkXCIsXG5cdFx0XCJ1bmRlcnV0aWxpc2VkXCIsXG5cdFx0XCJ1bmRlcnZlbnRpbGF0ZWRcIixcblx0XHRcInVuZGVzY2FsZWRcIixcblx0XHRcInVuZGVzaWduYXRlZFwiLFxuXHRcdFwidW5kZXRhY2hlZFwiLFxuXHRcdFwidW5kZXRhaWxlZFwiLFxuXHRcdFwidW5kZXRhaW5lZFwiLFxuXHRcdFwidW5kZXRlcmlvcmF0ZWRcIixcblx0XHRcInVuZGV0ZXJyZWRcIixcblx0XHRcInVuZGV0b25hdGVkXCIsXG5cdFx0XCJ1bmRldmlzZWRcIixcblx0XHRcInVuZGV2b3RlZFwiLFxuXHRcdFwidW5kZXZvdXJlZFwiLFxuXHRcdFwidW5kaWFnbm9zZWRcIixcblx0XHRcInVuZGlhbGVkXCIsXG5cdFx0XCJ1bmRpYWx5c2VkXCIsXG5cdFx0XCJ1bmRpYWx5emVkXCIsXG5cdFx0XCJ1bmRpYXBlcmVkXCIsXG5cdFx0XCJ1bmRpZmZyYWN0ZWRcIixcblx0XHRcInVuZGlnZXN0ZWRcIixcblx0XHRcInVuZGlnbmlmaWVkXCIsXG5cdFx0XCJ1bmRpbHV0ZWRcIixcblx0XHRcInVuZGltaW5pc2hlZFwiLFxuXHRcdFwidW5kaW1tZWRcIixcblx0XHRcInVuZGlwcGVkXCIsXG5cdFx0XCJ1bmRpcmVjdGVkXCIsXG5cdFx0XCJ1bmRpc2NpcGxpbmVkXCIsXG5cdFx0XCJ1bmRpc2NvdXJhZ2VkXCIsXG5cdFx0XCJ1bmRpc2N1c3NlZFwiLFxuXHRcdFwidW5kaXNmaWd1cmVkXCIsXG5cdFx0XCJ1bmRpc2d1aXNlZFwiLFxuXHRcdFwidW5kaXNpbmZlY3RlZFwiLFxuXHRcdFwidW5kaXNtYXllZFwiLFxuXHRcdFwidW5kaXNwb3NlZFwiLFxuXHRcdFwidW5kaXNwcm92ZWRcIixcblx0XHRcInVuZGlzcHV0ZWRcIixcblx0XHRcInVuZGlzcnVwdGVkXCIsXG5cdFx0XCJ1bmRpc3NlbWJsZWRcIixcblx0XHRcInVuZGlzc2lwYXRlZFwiLFxuXHRcdFwidW5kaXNzb2NpYXRlZFwiLFxuXHRcdFwidW5kaXNzb2x2ZWRcIixcblx0XHRcInVuZGlzdGlsbGVkXCIsXG5cdFx0XCJ1bmRpc3RvcnRlZFwiLFxuXHRcdFwidW5kaXN0cmFjdGVkXCIsXG5cdFx0XCJ1bmRpc3RyaWJ1dGVkXCIsXG5cdFx0XCJ1bmRpc3R1cmJlZFwiLFxuXHRcdFwidW5kaXZlcnNpZmllZFwiLFxuXHRcdFwidW5kaXZlcnRlZFwiLFxuXHRcdFwidW5kaXZ1bGdlZFwiLFxuXHRcdFwidW5kb2N0b3JlZFwiLFxuXHRcdFwidW5kb2N1bWVudGVkXCIsXG5cdFx0XCJ1bmRvbWVzdGljYXRlZFwiLFxuXHRcdFwidW5kb3NlZFwiLFxuXHRcdFwidW5kcmFtYXRpc2VkXCIsXG5cdFx0XCJ1bmRyaWxsZWRcIixcblx0XHRcInVuZHJ1Z2dlZFwiLFxuXHRcdFwidW5kdWJiZWRcIixcblx0XHRcInVuZHVwbGljYXRlZFwiLFxuXHRcdFwidW5lY2xpcHNlZFwiLFxuXHRcdFwidW5lZGdlZFwiLFxuXHRcdFwidW5lZGl0ZWRcIixcblx0XHRcInVuZWphY3VsYXRlZFwiLFxuXHRcdFwidW5lamVjdGVkXCIsXG5cdFx0XCJ1bmVsYWJvcmF0ZWRcIixcblx0XHRcInVuZWxhcHNlZFwiLFxuXHRcdFwidW5lbGVjdGVkXCIsXG5cdFx0XCJ1bmVsZWN0cmlmaWVkXCIsXG5cdFx0XCJ1bmVsZXZhdGVkXCIsXG5cdFx0XCJ1bmVsb25nYXRlZFwiLFxuXHRcdFwidW5lbHVjaWRhdGVkXCIsXG5cdFx0XCJ1bmVtYWNpYXRlZFwiLFxuXHRcdFwidW5lbWFuY2lwYXRlZFwiLFxuXHRcdFwidW5lbWFzY3VsYXRlZFwiLFxuXHRcdFwidW5lbWJhbG1lZFwiLFxuXHRcdFwidW5lbWJlZFwiLFxuXHRcdFwidW5lbWJlbGxpc2hlZFwiLFxuXHRcdFwidW5lbWJvZGllZFwiLFxuXHRcdFwidW5lbWJvbGRlbmVkXCIsXG5cdFx0XCJ1bmVtZXJnZWRcIixcblx0XHRcInVuZW5hY3RlZFwiLFxuXHRcdFwidW5lbmNvZGVkXCIsXG5cdFx0XCJ1bmVuY3J5cHRlZFwiLFxuXHRcdFwidW5lbmN1bWJlcmVkXCIsXG5cdFx0XCJ1bmVuZGFuZ2VyZWRcIixcblx0XHRcInVuZW5kb3JzZWRcIixcblx0XHRcInVuZW5lcmdpemVkXCIsXG5cdFx0XCJ1bmVuZnJhbmNoaXNlZFwiLFxuXHRcdFwidW5lbmdyYXZlZFwiLFxuXHRcdFwidW5lbmhhbmNlZFwiLFxuXHRcdFwidW5lbmxhcmdlZFwiLFxuXHRcdFwidW5lbmxpdmVuZWRcIixcblx0XHRcInVuZW5yYXB0dXJlZFwiLFxuXHRcdFwidW5lbnJpY2hlZFwiLFxuXHRcdFwidW5lbnRhbmdsZWRcIixcblx0XHRcInVuZW50aXRsZWRcIixcblx0XHRcInVuZW50b21iZWRcIixcblx0XHRcInVuZW50cmFuY2VkXCIsXG5cdFx0XCJ1bmVudHdpbmVkXCIsXG5cdFx0XCJ1bmVudW1lcmF0ZWRcIixcblx0XHRcInVuZW52ZWxvcGVkXCIsXG5cdFx0XCJ1bmVudmllZFwiLFxuXHRcdFwidW5lcXVhbGVkXCIsXG5cdFx0XCJ1bmVxdWFsaXNlZFwiLFxuXHRcdFwidW5lcXVhbGl6ZWRcIixcblx0XHRcInVuZXF1YWxsZWRcIixcblx0XHRcInVuZXF1aXBwZWRcIixcblx0XHRcInVuZXJhc2VkXCIsXG5cdFx0XCJ1bmVyZWN0ZWRcIixcblx0XHRcInVuZXJvZGVkXCIsXG5cdFx0XCJ1bmVydXB0ZWRcIixcblx0XHRcInVuZXNjb3J0ZWRcIixcblx0XHRcInVuZXN0YWJsaXNoZWRcIixcblx0XHRcInVuZXZhbHVhdGVkXCIsXG5cdFx0XCJ1bmV4YWdnZXJhdGVkXCIsXG5cdFx0XCJ1bmV4YW1wbGVkXCIsXG5cdFx0XCJ1bmV4Y2F2YXRlZFwiLFxuXHRcdFwidW5leGNlZWRlZFwiLFxuXHRcdFwidW5leGNlbGxlZFwiLFxuXHRcdFwidW5leGVjdXRlZFwiLFxuXHRcdFwidW5leGVydGVkXCIsXG5cdFx0XCJ1bmV4aGF1c3RlZFwiLFxuXHRcdFwidW5leHBlbnNlZFwiLFxuXHRcdFwidW5leHBlcmllbmNlZFwiLFxuXHRcdFwidW5leHBpcmVkXCIsXG5cdFx0XCJ1bmV4cGxvaXRlZFwiLFxuXHRcdFwidW5leHBsb3JlZFwiLFxuXHRcdFwidW5leHBvc2VkXCIsXG5cdFx0XCJ1bmV4cHVyZ2F0ZWRcIixcblx0XHRcInVuZXh0aW5ndWlzaGVkXCIsXG5cdFx0XCJ1bmZhYnJpY2F0ZWRcIixcblx0XHRcInVuZmFjZXRlZFwiLFxuXHRcdFwidW5mYW5uZWRcIixcblx0XHRcInVuZmFzaGlvbmVkXCIsXG5cdFx0XCJ1bmZhdGhlcmVkXCIsXG5cdFx0XCJ1bmZhdGhvbWVkXCIsXG5cdFx0XCJ1bmZhdHRlbmVkXCIsXG5cdFx0XCJ1bmZhdm9yZWRcIixcblx0XHRcInVuZmF2b3VyZWRcIixcblx0XHRcInVuZmF6ZWRcIixcblx0XHRcInVuZmVhdGhlcmVkXCIsXG5cdFx0XCJ1bmZlZFwiLFxuXHRcdFwidW5mZWlnbmVkXCIsXG5cdFx0XCJ1bmZlcm1lbnRlZFwiLFxuXHRcdFwidW5mZXJ0aWxpc2VkXCIsXG5cdFx0XCJ1bmZlcnRpbGl6ZWRcIixcblx0XHRcInVuZmlsbGV0ZWRcIixcblx0XHRcInVuZmlsdGVyZWRcIixcblx0XHRcInVuZmluaXNoZWRcIixcblx0XHRcInVuZmxhdm9yZWRcIixcblx0XHRcInVuZmxhdm91cmVkXCIsXG5cdFx0XCJ1bmZsYXdlZFwiLFxuXHRcdFwidW5mbGVkZ2VkXCIsXG5cdFx0XCJ1bmZsZXNoZWRcIixcblx0XHRcInVuZmx1cnJpZWRcIixcblx0XHRcInVuZmx1c2hlZFwiLFxuXHRcdFwidW5mbHVzdGVyZWRcIixcblx0XHRcInVuZmx1dGVkXCIsXG5cdFx0XCJ1bmZvY3Vzc2VkXCIsXG5cdFx0XCJ1bmZvcmVzdGVkXCIsXG5cdFx0XCJ1bmZvcm1hdHRlZFwiLFxuXHRcdFwidW5mb3JtdWxhdGVkXCIsXG5cdFx0XCJ1bmZvcnRpZmllZFwiLFxuXHRcdFwidW5mcmFjdGlvbmF0ZWRcIixcblx0XHRcInVuZnJhY3R1cmVkXCIsXG5cdFx0XCJ1bmZyYWdtZW50ZWRcIixcblx0XHRcInVuZnJlcXVlbnRlZFwiLFxuXHRcdFwidW5mcmV0dGVkXCIsXG5cdFx0XCJ1bmZyb3N0ZWRcIixcblx0XHRcInVuZnVlbGVkXCIsXG5cdFx0XCJ1bmZ1bmRlZFwiLFxuXHRcdFwidW5mdXJuaXNoZWRcIixcblx0XHRcInVuZ2FyYmVkXCIsXG5cdFx0XCJ1bmdhcm1lbnRlZFwiLFxuXHRcdFwidW5nYXJuaXNoZWRcIixcblx0XHRcInVuZ2VhcmVkXCIsXG5cdFx0XCJ1bmdlcm1pbmF0ZWRcIixcblx0XHRcInVuZ2lmdGVkXCIsXG5cdFx0XCJ1bmdsYXplZFwiLFxuXHRcdFwidW5nb3Zlcm5lZFwiLFxuXHRcdFwidW5ncmFkZWRcIixcblx0XHRcInVuZ3Jhc3BlZFwiLFxuXHRcdFwidW5ncmF0aWZpZWRcIixcblx0XHRcInVuZ3Jvb21lZFwiLFxuXHRcdFwidW5ncm91bmRlZFwiLFxuXHRcdFwidW5ncm91cGVkXCIsXG5cdFx0XCJ1bmd1bW1lZFwiLFxuXHRcdFwidW5ndXNzZXRlZFwiLFxuXHRcdFwidW5oYWJpdHVhdGVkXCIsXG5cdFx0XCJ1bmhhbXBlcmVkXCIsXG5cdFx0XCJ1bmhhbmRpY2FwcGVkXCIsXG5cdFx0XCJ1bmhhcmRlbmVkXCIsXG5cdFx0XCJ1bmhhcnZlc3RlZFwiLFxuXHRcdFwidW5oYXNwZWRcIixcblx0XHRcInVuaGF0Y2hlZFwiLFxuXHRcdFwidW5oZXJhbGRlZFwiLFxuXHRcdFwidW5oaW5kZXJlZFwiLFxuXHRcdFwidW5ob21vZ2VuaXNlZFwiLFxuXHRcdFwidW5ob21vZ2VuaXplZFwiLFxuXHRcdFwidW5ob25vcmVkXCIsXG5cdFx0XCJ1bmhvbm91cmVkXCIsXG5cdFx0XCJ1bmhvb2RlZFwiLFxuXHRcdFwidW5odXNrZWRcIixcblx0XHRcInVuaHlwaGVuYXRlZFwiLFxuXHRcdFwidW5pZmllZFwiLFxuXHRcdFwidW5pbGx1c3RyYXRlZFwiLFxuXHRcdFwidW5pbXBhY3RlZFwiLFxuXHRcdFwidW5pbXBhaXJlZFwiLFxuXHRcdFwidW5pbXBhc3Npb25lZFwiLFxuXHRcdFwidW5pbXBlYWNoZWRcIixcblx0XHRcInVuaW1wZWxsZWRcIixcblx0XHRcInVuaW1wbGVtZW50ZWRcIixcblx0XHRcInVuaW1wcmVnbmF0ZWRcIixcblx0XHRcInVuaW1wcmlzb25lZFwiLFxuXHRcdFwidW5pbXB1Z25lZFwiLFxuXHRcdFwidW5pbmNvcnBvcmF0ZWRcIixcblx0XHRcInVuaW5jdWJhdGVkXCIsXG5cdFx0XCJ1bmluY3VtYmVyZWRcIixcblx0XHRcInVuaW5kZW1uaWZpZWRcIixcblx0XHRcInVuaW5kZXhlZFwiLFxuXHRcdFwidW5pbmRpY3RlZFwiLFxuXHRcdFwidW5pbmRvcnNlZFwiLFxuXHRcdFwidW5pbmR1Y2VkXCIsXG5cdFx0XCJ1bmluZHVzdHJpYWxpc2VkXCIsXG5cdFx0XCJ1bmluZHVzdHJpYWxpemVkXCIsXG5cdFx0XCJ1bmluZWJyaWF0ZWRcIixcblx0XHRcInVuaW5mZWN0ZWRcIixcblx0XHRcInVuaW5mbGF0ZWRcIixcblx0XHRcInVuaW5mbGVjdGVkXCIsXG5cdFx0XCJ1bmluaGFiaXRlZFwiLFxuXHRcdFwidW5pbmhpYml0ZWRcIixcblx0XHRcInVuaW5pdGlhbGlzZWRcIixcblx0XHRcInVuaW5pdGlhbGl6ZWRcIixcblx0XHRcInVuaW5pdGlhdGVkXCIsXG5cdFx0XCJ1bmlub2N1bGF0ZWRcIixcblx0XHRcInVuaW5zZW1pbmF0ZWRcIixcblx0XHRcInVuaW5zdWxhdGVkXCIsXG5cdFx0XCJ1bmluc3VyZWRcIixcblx0XHRcInVuaW50ZXJwcmV0ZWRcIixcblx0XHRcInVuaW50aW1pZGF0ZWRcIixcblx0XHRcInVuaW50b3hpY2F0ZWRcIixcblx0XHRcInVuaW50cm92ZXJ0ZWRcIixcblx0XHRcInVuaW51Y2xlYXRlZFwiLFxuXHRcdFwidW5pbnZlcnRlZFwiLFxuXHRcdFwidW5pbnZlc3RlZFwiLFxuXHRcdFwidW5pbnZvbHZlZFwiLFxuXHRcdFwidW5pc3N1ZWRcIixcblx0XHRcInVuamF1bmRpY2VkXCIsXG5cdFx0XCJ1bmpvaW50ZWRcIixcblx0XHRcInVuanVzdGlmaWVkXCIsXG5cdFx0XCJ1bmtleWVkXCIsXG5cdFx0XCJ1bmtpbmRsZWRcIixcblx0XHRcInVubGFiZWxsZWRcIixcblx0XHRcInVubGFjcXVlcmVkXCIsXG5cdFx0XCJ1bmxhbWVudGVkXCIsXG5cdFx0XCJ1bmxhbWluYXRlZFwiLFxuXHRcdFwidW5sYXJkZWRcIixcblx0XHRcInVubGF1cmVsZWRcIixcblx0XHRcInVubGF1cmVsbGVkXCIsXG5cdFx0XCJ1bmxlYWRlZFwiLFxuXHRcdFwidW5sZWF2ZW5lZFwiLFxuXHRcdFwidW5sZWRcIixcblx0XHRcInVubGV0dGVyZWRcIixcblx0XHRcInVubGljZW5jZWRcIixcblx0XHRcInVubGlnaHRlZFwiLFxuXHRcdFwidW5saW1iZXJlZFwiLFxuXHRcdFwidW5saW1pdGVkXCIsXG5cdFx0XCJ1bmxpbmVkXCIsXG5cdFx0XCJ1bmxpcHBlZFwiLFxuXHRcdFwidW5saXF1aWRhdGVkXCIsXG5cdFx0XCJ1bmxpdGhpZmllZFwiLFxuXHRcdFwidW5saXR0ZXJlZFwiLFxuXHRcdFwidW5saXZlcmllZFwiLFxuXHRcdFwidW5sb2JlZFwiLFxuXHRcdFwidW5sb2NhbGlzZWRcIixcblx0XHRcInVubG9jYWxpemVkXCIsXG5cdFx0XCJ1bmxvY2F0ZWRcIixcblx0XHRcInVubG9nZ2VkXCIsXG5cdFx0XCJ1bmx1YnJpY2F0ZWRcIixcblx0XHRcInVubWFnbmlmaWVkXCIsXG5cdFx0XCJ1bm1haWxlZFwiLFxuXHRcdFwidW5tYWltZWRcIixcblx0XHRcInVubWFpbnRhaW5lZFwiLFxuXHRcdFwidW5tYWx0ZWRcIixcblx0XHRcInVubWFuZ2xlZFwiLFxuXHRcdFwidW5tYW5pZmVzdGVkXCIsXG5cdFx0XCJ1bm1hbmlwdWxhdGVkXCIsXG5cdFx0XCJ1bm1hbm5lcmVkXCIsXG5cdFx0XCJ1bm1hbnVmYWN0dXJlZFwiLFxuXHRcdFwidW5tYXBwZWRcIixcblx0XHRcInVubWFycmVkXCIsXG5cdFx0XCJ1bm1hc3RlcmVkXCIsXG5cdFx0XCJ1bm1hdHJpY3VsYXRlZFwiLFxuXHRcdFwidW5tZWNoYW5pc2VkXCIsXG5cdFx0XCJ1bm1lY2hhbml6ZWRcIixcblx0XHRcInVubWVkaWF0ZWRcIixcblx0XHRcInVubWVkaWNhdGVkXCIsXG5cdFx0XCJ1bm1lbnRpb25lZFwiLFxuXHRcdFwidW5tZXJnZWRcIixcblx0XHRcInVubWVyaXRlZFwiLFxuXHRcdFwidW5tZXRhYm9saXNlZFwiLFxuXHRcdFwidW5tZXRhYm9saXplZFwiLFxuXHRcdFwidW5tZXRhbW9ycGhvc2VkXCIsXG5cdFx0XCJ1bm1ldGh5bGF0ZWRcIixcblx0XHRcInVubWluZXJhbGl6ZWRcIixcblx0XHRcInVubWl0aWdhdGVkXCIsXG5cdFx0XCJ1bm1vZGVyYXRlZFwiLFxuXHRcdFwidW5tb2Rlcm5pc2VkXCIsXG5cdFx0XCJ1bm1vZGVybml6ZWRcIixcblx0XHRcInVubW9kaWZpZWRcIixcblx0XHRcInVubW9kdWxhdGVkXCIsXG5cdFx0XCJ1bm1vbGRlZFwiLFxuXHRcdFwidW5tb2xlc3RlZFwiLFxuXHRcdFwidW5tb25pdG9yZWRcIixcblx0XHRcInVubW9ydGdhZ2VkXCIsXG5cdFx0XCJ1bm1vdGl2YXRlZFwiLFxuXHRcdFwidW5tb3RvcmlzZWRcIixcblx0XHRcInVubW90b3JpemVkXCIsXG5cdFx0XCJ1bm1vdW50ZWRcIixcblx0XHRcInVubXV0YXRlZFwiLFxuXHRcdFwidW5tdXRpbGF0ZWRcIixcblx0XHRcInVubXllbGluYXRlZFwiLFxuXHRcdFwidW5uYXR1cmFsaXNlZFwiLFxuXHRcdFwidW5uYXR1cmFsaXplZFwiLFxuXHRcdFwidW5ub3RjaGVkXCIsXG5cdFx0XCJ1bm5vdXJpc2hlZFwiLFxuXHRcdFwidW5vYmxpZ2F0ZWRcIixcblx0XHRcInVub2JzdHJ1Y3RlZFwiLFxuXHRcdFwidW5vY2N1cGllZFwiLFxuXHRcdFwidW5vaWxlZFwiLFxuXHRcdFwidW5vcHBvc2VkXCIsXG5cdFx0XCJ1bm9wdGltaXNlZFwiLFxuXHRcdFwidW5vcmRhaW5lZFwiLFxuXHRcdFwidW5vcmdhbmlzZWRcIixcblx0XHRcInVub3JnYW5pemVkXCIsXG5cdFx0XCJ1bm9yaWVudGVkXCIsXG5cdFx0XCJ1bm9yaWdpbmF0ZWRcIixcblx0XHRcInVub3JuYW1lbnRlZFwiLFxuXHRcdFwidW5veGlkaXplZFwiLFxuXHRcdFwidW5veHlnZW5hdGVkXCIsXG5cdFx0XCJ1bnBhY2lmaWVkXCIsXG5cdFx0XCJ1bnBhY2thZ2VkXCIsXG5cdFx0XCJ1bnBhaXJlZFwiLFxuXHRcdFwidW5wYXJhbGxlbGVkXCIsXG5cdFx0XCJ1bnBhcmFsbGVsbGVkXCIsXG5cdFx0XCJ1bnBhcmFzaXRpemVkXCIsXG5cdFx0XCJ1bnBhcmRvbmVkXCIsXG5cdFx0XCJ1bnBhcm9kaWVkXCIsXG5cdFx0XCJ1bnBhcnRpdGlvbmVkXCIsXG5cdFx0XCJ1bnBhc3RldXJpc2VkXCIsXG5cdFx0XCJ1bnBhc3RldXJpemVkXCIsXG5cdFx0XCJ1bnBhdGVudGVkXCIsXG5cdFx0XCJ1bnBhdmVkXCIsXG5cdFx0XCJ1bnBlZGlncmVlZFwiLFxuXHRcdFwidW5wZW5ldHJhdGVkXCIsXG5cdFx0XCJ1bnBlbm5lZFwiLFxuXHRcdFwidW5wZXJmZWN0ZWRcIixcblx0XHRcInVucGVyanVyZWRcIixcblx0XHRcInVucGVyc29uYWxpc2VkXCIsXG5cdFx0XCJ1bnBlcnN1YWRlZFwiLFxuXHRcdFwidW5wZXJ0dXJiZWRcIixcblx0XHRcInVucGVydmVydGVkXCIsXG5cdFx0XCJ1bnBlc3RlcmVkXCIsXG5cdFx0XCJ1bnBob3NwaG9yeWxhdGVkXCIsXG5cdFx0XCJ1bnBob3RvZ3JhcGhlZFwiLFxuXHRcdFwidW5waWdtZW50ZWRcIixcblx0XHRcInVucGlsb3RlZFwiLFxuXHRcdFwidW5wbGVkZ2VkXCIsXG5cdFx0XCJ1bnBsb3VnaGVkXCIsXG5cdFx0XCJ1bnBsdW1iZWRcIixcblx0XHRcInVucG9pc2VkXCIsXG5cdFx0XCJ1bnBvbGFyaXplZFwiLFxuXHRcdFwidW5wb2xpY2VkXCIsXG5cdFx0XCJ1bnBvbGxlZFwiLFxuXHRcdFwidW5wb3B1bGF0ZWRcIixcblx0XHRcInVucG9zZWRcIixcblx0XHRcInVucG93ZXJlZFwiLFxuXHRcdFwidW5wcmVjZWRlbnRlZFwiLFxuXHRcdFwidW5wcmVkaWN0ZWRcIixcblx0XHRcInVucHJlanVkaWNlZFwiLFxuXHRcdFwidW5wcmVtZWRpdGF0ZWRcIixcblx0XHRcInVucHJlc2NyaWJlZFwiLFxuXHRcdFwidW5wcmVzc3VyaXNlZFwiLFxuXHRcdFwidW5wcmVzc3VyaXplZFwiLFxuXHRcdFwidW5wcmljZWRcIixcblx0XHRcInVucHJpbWVkXCIsXG5cdFx0XCJ1bnByaW5jaXBsZWRcIixcblx0XHRcInVucHJpdmlsZWdlZFwiLFxuXHRcdFwidW5wcml6ZWRcIixcblx0XHRcInVucHJvY2Vzc2VkXCIsXG5cdFx0XCJ1bnByb2ZhbmVkXCIsXG5cdFx0XCJ1bnByb2Zlc3NlZFwiLFxuXHRcdFwidW5wcm9oaWJpdGVkXCIsXG5cdFx0XCJ1bnByb21wdGVkXCIsXG5cdFx0XCJ1bnByb25vdW5jZWRcIixcblx0XHRcInVucHJvcG9zZWRcIixcblx0XHRcInVucHJvc3BlY3RlZFwiLFxuXHRcdFwidW5wcm92ZWRcIixcblx0XHRcInVucHJ1bmVkXCIsXG5cdFx0XCJ1bnB1YmxpY2lzZWRcIixcblx0XHRcInVucHVibGljaXplZFwiLFxuXHRcdFwidW5wdWJsaXNoZWRcIixcblx0XHRcInVucHVja2VyZWRcIixcblx0XHRcInVucHVuY3R1YXRlZFwiLFxuXHRcdFwidW5wdXJpZmllZFwiLFxuXHRcdFwidW5xdWFsaWZpZWRcIixcblx0XHRcInVucXVhbnRpZmllZFwiLFxuXHRcdFwidW5xdWVuY2hlZFwiLFxuXHRcdFwidW5xdW90ZWRcIixcblx0XHRcInVucmFua2VkXCIsXG5cdFx0XCJ1bnJhdGVkXCIsXG5cdFx0XCJ1bnJhdGlmaWVkXCIsXG5cdFx0XCJ1bnJlYnVrZWRcIixcblx0XHRcInVucmVja29uZWRcIixcblx0XHRcInVucmVjb21wZW5zZWRcIixcblx0XHRcInVucmVjb25jaWxlZFwiLFxuXHRcdFwidW5yZWNvbnN0cnVjdGVkXCIsXG5cdFx0XCJ1bnJlY3RpZmllZFwiLFxuXHRcdFwidW5yZWRlZW1lZFwiLFxuXHRcdFwidW5yZWZpbmVkXCIsXG5cdFx0XCJ1bnJlZnJlc2hlZFwiLFxuXHRcdFwidW5yZWZyaWdlcmF0ZWRcIixcblx0XHRcInVucmVnYXJkZWRcIixcblx0XHRcInVucmVnaW1lbnRlZFwiLFxuXHRcdFwidW5yZWdpc3RlcmVkXCIsXG5cdFx0XCJ1bnJlZ3VsYXRlZFwiLFxuXHRcdFwidW5yZWhlYXJzZWRcIixcblx0XHRcInVucmVsYXRlZFwiLFxuXHRcdFwidW5yZWxpZXZlZFwiLFxuXHRcdFwidW5yZWxpbnF1aXNoZWRcIixcblx0XHRcInVucmVuZXdlZFwiLFxuXHRcdFwidW5yZW50ZWRcIixcblx0XHRcInVucmVwZWFsZWRcIixcblx0XHRcInVucmVwbGljYXRlZFwiLFxuXHRcdFwidW5yZXByaW1hbmRlZFwiLFxuXHRcdFwidW5yZXF1aXRlZFwiLFxuXHRcdFwidW5yZXNwZWN0ZWRcIixcblx0XHRcInVucmVzdHJpY3RlZFwiLFxuXHRcdFwidW5yZXRhaW5lZFwiLFxuXHRcdFwidW5yZXRhcmRlZFwiLFxuXHRcdFwidW5yZXZpc2VkXCIsXG5cdFx0XCJ1bnJldml2ZWRcIixcblx0XHRcInVucmV2b2tlZFwiLFxuXHRcdFwidW5yaWZsZWRcIixcblx0XHRcInVucmlwZW5lZFwiLFxuXHRcdFwidW5yaXZhbGVkXCIsXG5cdFx0XCJ1bnJpdmFsbGVkXCIsXG5cdFx0XCJ1bnJvYXN0ZWRcIixcblx0XHRcInVucm9vZmVkXCIsXG5cdFx0XCJ1bnJvdW5kZWRcIixcblx0XHRcInVucnVmZmxlZFwiLFxuXHRcdFwidW5zYWxhcmllZFwiLFxuXHRcdFwidW5zYWx0ZWRcIixcblx0XHRcInVuc2FuY3RpZmllZFwiLFxuXHRcdFwidW5zYW5jdGlvbmVkXCIsXG5cdFx0XCJ1bnNhbmRlZFwiLFxuXHRcdFwidW5zYXBvbmlmaWVkXCIsXG5cdFx0XCJ1bnNhdGVkXCIsXG5cdFx0XCJ1bnNhdGlhdGVkXCIsXG5cdFx0XCJ1bnNhdGlzZmllZFwiLFxuXHRcdFwidW5zYXR1cmF0ZWRcIixcblx0XHRcInVuc2NhbGVkXCIsXG5cdFx0XCJ1bnNjYXJyZWRcIixcblx0XHRcInVuc2NhdGhlZFwiLFxuXHRcdFwidW5zY2VudGVkXCIsXG5cdFx0XCJ1bnNjaGVkdWxlZFwiLFxuXHRcdFwidW5zY2hvb2xlZFwiLFxuXHRcdFwidW5zY3JlZW5lZFwiLFxuXHRcdFwidW5zY3JpcHRlZFwiLFxuXHRcdFwidW5zZWFtZWRcIixcblx0XHRcInVuc2VhcmVkXCIsXG5cdFx0XCJ1bnNlYXNvbmVkXCIsXG5cdFx0XCJ1bnNlZWRlZFwiLFxuXHRcdFwidW5zZWdtZW50ZWRcIixcblx0XHRcInVuc2VncmVnYXRlZFwiLFxuXHRcdFwidW5zZWxlY3RlZFwiLFxuXHRcdFwidW5zZXJ2aWNlZFwiLFxuXHRcdFwidW5zZXhlZFwiLFxuXHRcdFwidW5zaGFtZWRcIixcblx0XHRcInVuc2hhcGVkXCIsXG5cdFx0XCJ1bnNoYXJwZW5lZFwiLFxuXHRcdFwidW5zaGVhcmVkXCIsXG5cdFx0XCJ1bnNoaWVsZGVkXCIsXG5cdFx0XCJ1bnNoaWZ0ZWRcIixcblx0XHRcInVuc2hpcnRlZFwiLFxuXHRcdFwidW5zaG9lZFwiLFxuXHRcdFwidW5zaHV0dGVyZWRcIixcblx0XHRcInVuc2lmdGVkXCIsXG5cdFx0XCJ1bnNpZ2h0ZWRcIixcblx0XHRcInVuc2lsZW5jZWRcIixcblx0XHRcInVuc2ltcGxpZmllZFwiLFxuXHRcdFwidW5zaXplZFwiLFxuXHRcdFwidW5za2V3ZWRcIixcblx0XHRcInVuc2tpbm5lZFwiLFxuXHRcdFwidW5zbGFrZWRcIixcblx0XHRcInVuc2xpY2VkXCIsXG5cdFx0XCJ1bnNsb3BlZFwiLFxuXHRcdFwidW5zbW9vdGhlZFwiLFxuXHRcdFwidW5zb2lsZWRcIixcblx0XHRcInVuc29sZGVyZWRcIixcblx0XHRcInVuc29saWNpdGVkXCIsXG5cdFx0XCJ1bnNvbHZlZFwiLFxuXHRcdFwidW5zb3BoaXN0aWNhdGVkXCIsXG5cdFx0XCJ1bnNvcnRlZFwiLFxuXHRcdFwidW5zb3VyY2VkXCIsXG5cdFx0XCJ1bnNvdXJlZFwiLFxuXHRcdFwidW5zcGFjZWRcIixcblx0XHRcInVuc3Bhbm5lZFwiLFxuXHRcdFwidW5zcGVjaWFsaXNlZFwiLFxuXHRcdFwidW5zcGVjaWFsaXplZFwiLFxuXHRcdFwidW5zcGVjaWZpZWRcIixcblx0XHRcInVuc3BpY2VkXCIsXG5cdFx0XCJ1bnN0YWdlZFwiLFxuXHRcdFwidW5zdGFuZGFyZGlzZWRcIixcblx0XHRcInVuc3RhbmRhcmRpemVkXCIsXG5cdFx0XCJ1bnN0YXBsZWRcIixcblx0XHRcInVuc3RhcmNoZWRcIixcblx0XHRcInVuc3RhcnJlZFwiLFxuXHRcdFwidW5zdGF0ZWRcIixcblx0XHRcInVuc3RlYWRpZWRcIixcblx0XHRcInVuc3RlbW1lZFwiLFxuXHRcdFwidW5zdGVyaWxpc2VkXCIsXG5cdFx0XCJ1bnN0ZXJpbGl6ZWRcIixcblx0XHRcInVuc3RpY2tlcmVkXCIsXG5cdFx0XCJ1bnN0aWZmZW5lZFwiLFxuXHRcdFwidW5zdGlmbGVkXCIsXG5cdFx0XCJ1bnN0aWdtYXRpc2VkXCIsXG5cdFx0XCJ1bnN0aWdtYXRpemVkXCIsXG5cdFx0XCJ1bnN0aWx0ZWRcIixcblx0XHRcInVuc3RpcHBsZWRcIixcblx0XHRcInVuc3RpcHVsYXRlZFwiLFxuXHRcdFwidW5zdGlycmVkXCIsXG5cdFx0XCJ1bnN0b2NrZWRcIixcblx0XHRcInVuc3Rva2VkXCIsXG5cdFx0XCJ1bnN0b3BwZXJlZFwiLFxuXHRcdFwidW5zdHJhdGlmaWVkXCIsXG5cdFx0XCJ1bnN0cmVzc2VkXCIsXG5cdFx0XCJ1bnN0cmlwZWRcIixcblx0XHRcInVuc3RydWN0dXJlZFwiLFxuXHRcdFwidW5zdHVkaWVkXCIsXG5cdFx0XCJ1bnN0dW1wZWRcIixcblx0XHRcInVuc3ViZHVlZFwiLFxuXHRcdFwidW5zdWJtaXR0ZWRcIixcblx0XHRcInVuc3Vic2lkaXNlZFwiLFxuXHRcdFwidW5zdWJzaWRpemVkXCIsXG5cdFx0XCJ1bnN1YnN0YW50aWF0ZWRcIixcblx0XHRcInVuc3Vic3RpdHV0ZWRcIixcblx0XHRcInVuc3VnYXJlZFwiLFxuXHRcdFwidW5zdW1tYXJpemVkXCIsXG5cdFx0XCJ1bnN1cGVydmlzZWRcIixcblx0XHRcInVuc3VwcmlzZWRcIixcblx0XHRcInVuc3VydmV5ZWRcIixcblx0XHRcInVuc3dheWVkXCIsXG5cdFx0XCJ1bnN3ZWV0ZW5lZFwiLFxuXHRcdFwidW5zeWxsYWJsZWRcIixcblx0XHRcInVuc3ltbWV0cml6ZWRcIixcblx0XHRcInVuc3luY2hyb25pc2VkXCIsXG5cdFx0XCJ1bnN5bmNocm9uaXplZFwiLFxuXHRcdFwidW5zeW5jb3BhdGVkXCIsXG5cdFx0XCJ1bnN5bmRpY2F0ZWRcIixcblx0XHRcInVuc3ludGhlc2l6ZWRcIixcblx0XHRcInVuc3lzdGVtYXRpemVkXCIsXG5cdFx0XCJ1bnRhZ2dlZFwiLFxuXHRcdFwidW50YWludGVkXCIsXG5cdFx0XCJ1bnRhbGVudGVkXCIsXG5cdFx0XCJ1bnRhbm5lZFwiLFxuXHRcdFwidW50YXBlZFwiLFxuXHRcdFwidW50YXBlcmVkXCIsXG5cdFx0XCJ1bnRhcmdldGVkXCIsXG5cdFx0XCJ1bnRhcm5pc2hlZFwiLFxuXHRcdFwidW50YXR0b29lZFwiLFxuXHRcdFwidW50ZWxldmlzZWRcIixcblx0XHRcInVudGVtcGVyZWRcIixcblx0XHRcInVudGVuYW50ZWRcIixcblx0XHRcInVudGVybWluYXRlZFwiLFxuXHRcdFwidW50ZXh0dXJlZFwiLFxuXHRcdFwidW50aGlja2VuZWRcIixcblx0XHRcInVudGhpbm5lZFwiLFxuXHRcdFwidW50aHJhc2hlZFwiLFxuXHRcdFwidW50aHJlYWRlZFwiLFxuXHRcdFwidW50aHJvdHRsZWRcIixcblx0XHRcInVudGlja2V0ZWRcIixcblx0XHRcInVudGlsZWRcIixcblx0XHRcInVudGlsbGVkXCIsXG5cdFx0XCJ1bnRpbHRlZFwiLFxuXHRcdFwidW50aW1iZXJlZFwiLFxuXHRcdFwidW50aW5nZWRcIixcblx0XHRcInVudGlubmVkXCIsXG5cdFx0XCJ1bnRpbnRlZFwiLFxuXHRcdFwidW50aXRsZWRcIixcblx0XHRcInVudG9hc3RlZFwiLFxuXHRcdFwidW50b2dnbGVkXCIsXG5cdFx0XCJ1bnRvb3RoZWRcIixcblx0XHRcInVudG9wcGVkXCIsXG5cdFx0XCJ1bnRvdWdoZW5lZFwiLFxuXHRcdFwidW50cmFja2VkXCIsXG5cdFx0XCJ1bnRyYW1tZWxlZFwiLFxuXHRcdFwidW50cmFtbWVsbGVkXCIsXG5cdFx0XCJ1bnRyYW5zY3JpYmVkXCIsXG5cdFx0XCJ1bnRyYW5zZHVjZWRcIixcblx0XHRcInVudHJhbnNmZXJyZWRcIixcblx0XHRcInVudHJhbnNsYXRlZFwiLFxuXHRcdFwidW50cmFuc21pdHRlZFwiLFxuXHRcdFwidW50cmF1bWF0aXplZFwiLFxuXHRcdFwidW50cmF2ZXJzZWRcIixcblx0XHRcInVudHVmdGVkXCIsXG5cdFx0XCJ1bnR1bmVkXCIsXG5cdFx0XCJ1bnR1dG9yZWRcIixcblx0XHRcInVudXBncmFkZWRcIixcblx0XHRcInVudXBob2xzdGVyZWRcIixcblx0XHRcInVudXRpbGlzZWRcIixcblx0XHRcInVudXRpbGl6ZWRcIixcblx0XHRcInVudXR0ZXJlZFwiLFxuXHRcdFwidW52YWNjaW5hdGVkXCIsXG5cdFx0XCJ1bnZhY3V1bWVkXCIsXG5cdFx0XCJ1bnZhbGlkYXRlZFwiLFxuXHRcdFwidW52YWx1ZWRcIixcblx0XHRcInVudmFuZGFsaXplZFwiLFxuXHRcdFwidW52YW5lZFwiLFxuXHRcdFwidW52YW5xdWlzaGVkXCIsXG5cdFx0XCJ1bnZhcG91cmlzZWRcIixcblx0XHRcInVudmFwb3VyaXplZFwiLFxuXHRcdFwidW52YXJpZWRcIixcblx0XHRcInVudmFyaWVnYXRlZFwiLFxuXHRcdFwidW52YXJuaXNoZWRcIixcblx0XHRcInVudmVudGVkXCIsXG5cdFx0XCJ1bnZlbnRpbGF0ZWRcIixcblx0XHRcInVudmVyYmFsaXNlZFwiLFxuXHRcdFwidW52ZXJiYWxpemVkXCIsXG5cdFx0XCJ1bnZlcmlmaWVkXCIsXG5cdFx0XCJ1bnZlcnNlZFwiLFxuXHRcdFwidW52ZXR0ZWRcIixcblx0XHRcInVudmljdGltaXplZFwiLFxuXHRcdFwidW52aW9sYXRlZFwiLFxuXHRcdFwidW52aXRyaWZpZWRcIixcblx0XHRcInVudm9jYWxpemVkXCIsXG5cdFx0XCJ1bnZvaWNlZFwiLFxuXHRcdFwidW53YWdlZFwiLFxuXHRcdFwidW53YXJwZWRcIixcblx0XHRcInVud2FycmFudGVkXCIsXG5cdFx0XCJ1bndheGVkXCIsXG5cdFx0XCJ1bndlYWtlbmVkXCIsXG5cdFx0XCJ1bndlYW5lZFwiLFxuXHRcdFwidW53ZWFyaWVkXCIsXG5cdFx0XCJ1bndlYXRoZXJlZFwiLFxuXHRcdFwidW53ZWJiZWRcIixcblx0XHRcInVud2VkXCIsXG5cdFx0XCJ1bndlZGRlZFwiLFxuXHRcdFwidW53ZWVkZWRcIixcblx0XHRcInVud2VpZ2h0ZWRcIixcblx0XHRcInVud2VsZGVkXCIsXG5cdFx0XCJ1bndpbnRlcml6ZWRcIixcblx0XHRcInVud2lyZWRcIixcblx0XHRcInVud2l0bmVzc2VkXCIsXG5cdFx0XCJ1bndvbnRlZFwiLFxuXHRcdFwidW53b29kZWRcIixcblx0XHRcInVud29yc2hpcHBlZFwiLFxuXHRcdFwidW53b3VuZGVkXCIsXG5cdFx0XCJ1bnpvbmVkXCIsXG5cdFx0XCJ1cHJhdGVkXCIsXG5cdFx0XCJ1cHJpZ2h0ZWRcIixcblx0XHRcInVwc2l6ZWRcIixcblx0XHRcInVwc3dlbGxlZFwiLFxuXHRcdFwidmFjdW9sYXRlZFwiLFxuXHRcdFwidmFsYW5jZWRcIixcblx0XHRcInZhbHVlb3JpZW50ZWRcIixcblx0XHRcInZhcmllZFwiLFxuXHRcdFwidmFzY3VsYXJpc2VkXCIsXG5cdFx0XCJ2YXNjdWxhcml6ZWRcIixcblx0XHRcInZhc2VjdG9taXNlZFwiLFxuXHRcdFwidmF1bnRlZFwiLFxuXHRcdFwidmVjdG9yaXNlZFwiLFxuXHRcdFwidmVjdG9yaXplZFwiLFxuXHRcdFwidmVnZ2VkXCIsXG5cdFx0XCJ2ZXJkdXJlZFwiLFxuXHRcdFwidmVyaWZpZWRcIixcblx0XHRcInZlcm1pY3VsYXRlZFwiLFxuXHRcdFwidmVybmFjdWxhcml6ZWRcIixcblx0XHRcInZlcnNpZmllZFwiLFxuXHRcdFwidmVydGljaWxsYXRlZFwiLFxuXHRcdFwidmVzaWN1bGF0ZWRcIixcblx0XHRcInZpZWRcIixcblx0XHRcInZpbGlmaWVkXCIsXG5cdFx0XCJ2aXJ0dWFsaXNlZFwiLFxuXHRcdFwidml0cmlmaWVkXCIsXG5cdFx0XCJ2aXZpZmllZFwiLFxuXHRcdFwidm9sdW1lZFwiLFxuXHRcdFwidnVsY2FuaXNlZFwiLFxuXHRcdFwid2FiYmxlZFwiLFxuXHRcdFwid2FmZXJlZFwiLFxuXHRcdFwid2Fpc3RlZFwiLFxuXHRcdFwid2FsbGV5ZWRcIixcblx0XHRcIndhcmVkXCIsXG5cdFx0XCJ3YXJtYmxvb2RlZFwiLFxuXHRcdFwid2FybWhlYXJ0ZWRcIixcblx0XHRcIndhcnRlZFwiLFxuXHRcdFwid2F0ZXJiYXNlZFwiLFxuXHRcdFwid2F0ZXJiZWRcIixcblx0XHRcIndhdGVyY29vbGVkXCIsXG5cdFx0XCJ3YXRlcnNhdHVyYXRlZFwiLFxuXHRcdFwid2F0ZXJzaGVkXCIsXG5cdFx0XCJ3YXZlZ2VuZXJhdGVkXCIsXG5cdFx0XCJ3YXh3ZWVkXCIsXG5cdFx0XCJ3ZWFraGVhcnRlZFwiLFxuXHRcdFwid2Vha2tuZWVkXCIsXG5cdFx0XCJ3ZWFrbWluZGVkXCIsXG5cdFx0XCJ3ZWFyaWVkXCIsXG5cdFx0XCJ3ZWF0aGVyaXNlZFwiLFxuXHRcdFwid2VhdGhlcnN0cmlwZWRcIixcblx0XHRcIndlYmZvb3RlZFwiLFxuXHRcdFwid2VkZ2VzaGFwZWRcIixcblx0XHRcIndlZWRcIixcblx0XHRcIndlZXZpbGVkXCIsXG5cdFx0XCJ3ZWxsYWRhcHRlZFwiLFxuXHRcdFwid2VsbGFkanVzdGVkXCIsXG5cdFx0XCJ3ZWxsYnJlZFwiLFxuXHRcdFwid2VsbGNvbmR1Y3RlZFwiLFxuXHRcdFwid2VsbGRlZmluZWRcIixcblx0XHRcIndlbGxkaXNwb3NlZFwiLFxuXHRcdFwid2VsbGRvY3VtZW50ZWRcIixcblx0XHRcIndlbGxlcXVpcHBlZFwiLFxuXHRcdFwid2VsbGVzdGFibGlzaGVkXCIsXG5cdFx0XCJ3ZWxsZmF2b3JlZFwiLFxuXHRcdFwid2VsbGZlZFwiLFxuXHRcdFwid2VsbGdyb3VuZGVkXCIsXG5cdFx0XCJ3ZWxsaW50ZW50aW9uZWRcIixcblx0XHRcIndlbGxtYW5uZXJlZFwiLFxuXHRcdFwid2VsbG1pbmRlZFwiLFxuXHRcdFwid2VsbG9yZ2FuaXNlZFwiLFxuXHRcdFwid2VsbHJvdW5kZWRcIixcblx0XHRcIndlbGxzaGFwZWRcIixcblx0XHRcIndlbGxzdHJ1Y3R1cmVkXCIsXG5cdFx0XCJ3aGluZ2VkXCIsXG5cdFx0XCJ3aGlubmllZFwiLFxuXHRcdFwid2hpcGxhc2hlZFwiLFxuXHRcdFwid2hpc2tlcmVkXCIsXG5cdFx0XCJ3aG9sZWhlYXJ0ZWRcIixcblx0XHRcIndob3JsZWRcIixcblx0XHRcIndpZGViYXNlZFwiLFxuXHRcdFwid2lkZWV5ZWRcIixcblx0XHRcIndpZGVtZXNoZWRcIixcblx0XHRcIndpZGVtb3V0aGVkXCIsXG5cdFx0XCJ3aWRlbmVja2VkXCIsXG5cdFx0XCJ3aWRlc3BhY2VkXCIsXG5cdFx0XCJ3aWxkZWRcIixcblx0XHRcIndpbGRlcmVkXCIsXG5cdFx0XCJ3aWxkZXllZFwiLFxuXHRcdFwid2lsbGluZ2hlYXJ0ZWRcIixcblx0XHRcIndpbmRzcGVlZFwiLFxuXHRcdFwid2ludGVyZmVkXCIsXG5cdFx0XCJ3aW50ZXJmZWVkXCIsXG5cdFx0XCJ3aW50ZXJpc2VkXCIsXG5cdFx0XCJ3aXJlaGFpcmVkXCIsXG5cdFx0XCJ3aXNlZFwiLFxuXHRcdFwid2l0Y2h3ZWVkXCIsXG5cdFx0XCJ3b2FkZWRcIixcblx0XHRcIndvbWJlZFwiLFxuXHRcdFwid29vZGVkXCIsXG5cdFx0XCJ3b29kc2hlZFwiLFxuXHRcdFwid29vbGVkXCIsXG5cdFx0XCJ3b29sbGVkXCIsXG5cdFx0XCJ3b29sbHloYWlyZWRcIixcblx0XHRcIndvb2xseXN0ZW1tZWRcIixcblx0XHRcIndvb2x5aGFpcmVkXCIsXG5cdFx0XCJ3b29seW1pbmRlZFwiLFxuXHRcdFwid29ybWhvbGVkXCIsXG5cdFx0XCJ3b3Jtc2hhcGVkXCIsXG5cdFx0XCJ3cmFwcGVyZWRcIixcblx0XHRcIndyZXRjaGVkXCIsXG5cdFx0XCJ3cm9uZ2hlYXJ0ZWRcIixcblx0XHRcInljbGVwZWRcIixcblx0XHRcInlvbGtlZFwiLFxuXHRcdFwiemluY2lmaWVkXCIsXG5cdFx0XCJ6aW5ja2lmaWVkXCIsXG5cdFx0XCJ6aW5raWZpZWRcIixcblx0XHRcInpvbWJpZmllZFwiLFxuXHRdO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG5cdHJldHVybiBbXG5cdFx0XCJ0b1wiLFxuXHRcdFwid2hpY2hcIixcblx0XHRcIndob1wiLFxuXHRcdFwid2hvbVwiLFxuXHRcdFwidGhhdFwiLFxuXHRcdFwid2hvc2VcIixcblx0XHRcImFmdGVyXCIsXG5cdFx0XCJhbHRob3VnaFwiLFxuXHRcdFwiYXNcIixcblx0XHRcImJlY2F1c2VcIixcblx0XHRcImJlZm9yZVwiLFxuXHRcdFwiZXZlbiBpZlwiLFxuXHRcdFwiZXZlbiB0aG91Z2hcIixcblx0XHRcImhvd1wiLFxuXHRcdFwiaWZcIixcblx0XHRcImluIG9yZGVyIHRoYXRcIixcblx0XHRcImluYXNtdWNoXCIsXG5cdFx0XCJsZXN0XCIsXG5cdFx0XCJvbmNlXCIsXG5cdFx0XCJwcm92aWRlZFwiLFxuXHRcdFwic2luY2VcIixcblx0XHRcInNvIHRoYXRcIixcblx0XHRcInRoYW5cIixcblx0XHRcInRob3VnaFwiLFxuXHRcdFwidGlsbFwiLFxuXHRcdFwidW5sZXNzXCIsXG5cdFx0XCJ1bnRpbFwiLFxuXHRcdFwid2hlblwiLFxuXHRcdFwid2hlbmV2ZXJcIixcblx0XHRcIndoZXJlXCIsXG5cdFx0XCJ3aGVyZWFzXCIsXG5cdFx0XCJ3aGVyZXZlclwiLFxuXHRcdFwid2hldGhlclwiLFxuXHRcdFwid2hpbGVcIixcblx0XHRcIndoeVwiLFxuXHRcdFwiYnkgdGhlIHRpbWVcIixcblx0XHRcInN1cHBvc2luZ1wiLFxuXHRcdFwibm8gbWF0dGVyXCIsXG5cdFx0XCJob3dcIixcblx0XHRcIndoYXRcIixcblx0XHRcIndvbid0XCIsXG5cdFx0XCJkb1wiLFxuXHRcdFwiZG9lc1wiLFxuXHRcdFwiJ2xsXCIsXG5cdFx0XCI6XCIsXG5cdF07XG59O1xuIiwiLyoqIEBtb2R1bGUgY29uZmlnL3RyYW5zaXRpb25Xb3JkcyAqL1xuXG4vKipcbiAqIFJldHVybnMgYW4gYXJyYXkgd2l0aCB0cmFuc2l0aW9uIHdvcmRzIHRvIGJlIHVzZWQgYnkgdGhlIGFzc2Vzc21lbnRzLlxuICogQHJldHVybnMge0FycmF5fSBUaGUgYXJyYXkgZmlsbGVkIHdpdGggdHJhbnNpdGlvbiB3b3Jkcy5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcblx0cmV0dXJuIFsgXCJhYm92ZSBhbGxcIiwgXCJhY2NvcmRpbmdseVwiLCBcImFkZGl0aW9uYWxseVwiLCBcImFmdGVyIGFsbFwiLCBcImFmdGVyIHRoYXRcIiwgXCJhZnRlcndhcmRcIiwgXCJhZnRlcndhcmRzXCIsIFwiYWxiZWl0XCIsXG5cdFx0XCJhbGwgaW4gYWxsXCIsIFwiYWxsIG9mIGEgc3VkZGVuXCIsIFwiYWxsIHRoaW5ncyBjb25zaWRlcmVkXCIsIFwiYWxzb1wiLCBcImFsdGhvdWdoXCIsIFwiYWx0aG91Z2ggdGhpcyBtYXkgYmUgdHJ1ZVwiLCBcImFsdG9nZXRoZXJcIixcblx0XHRcImFuYWxvZ291cyB0b1wiLCBcImFub3RoZXJcIiwgXCJhbm90aGVyIGtleSBwb2ludFwiLCBcImFzIGEgbWF0dGVyIG9mIGZhY3RcIiwgXCJhcyBhIHJlc3VsdFwiLCBcImFzIGFuIGlsbHVzdHJhdGlvblwiLFxuXHRcdFwiYXMgY2FuIGJlIHNlZW5cIiwgXCJhcyBoYXMgYmVlbiBub3RlZFwiLCBcImFzIEkgaGF2ZSBub3RlZFwiLCBcImFzIEkgaGF2ZSBzYWlkXCIsIFwiYXMgSSBoYXZlIHNob3duXCIsIFwiYXMgbG9uZyBhc1wiLFxuXHRcdFwiYXMgbXVjaCBhc1wiLCBcImFzIHNob3duIGFib3ZlXCIsIFwiYXMgc29vbiBhc1wiLCBcImFzIHdlbGwgYXNcIiwgXCJhdCBhbnkgcmF0ZVwiLCBcImF0IGZpcnN0XCIsIFwiYXQgbGFzdFwiLCBcImF0IGxlYXN0XCIsXG5cdFx0XCJhdCBsZW5ndGhcIiwgXCJhdCB0aGUgcHJlc2VudCB0aW1lXCIsIFwiYXQgdGhlIHNhbWUgdGltZVwiLCBcImF0IHRoaXMgaW5zdGFudFwiLCBcImF0IHRoaXMgcG9pbnRcIiwgXCJhdCB0aGlzIHRpbWVcIixcblx0XHRcImJhbGFuY2VkIGFnYWluc3RcIiwgXCJiYXNpY2FsbHlcIiwgXCJiZSB0aGF0IGFzIGl0IG1heVwiLCBcImJlY2F1c2VcIiwgXCJiZWZvcmVcIiwgXCJiZWluZyB0aGF0XCIsIFwiYmVzaWRlc1wiLCBcImJ1dFwiLFxuXHRcdFwiYnkgYWxsIG1lYW5zXCIsIFwiYnkgYW5kIGxhcmdlXCIsIFwiYnkgY29tcGFyaXNvblwiLCBcImJ5IHRoZSBzYW1lIHRva2VuXCIsIFwiYnkgdGhlIHRpbWVcIiwgXCJjZXJ0YWlubHlcIiwgXCJjaGllZmx5XCIsXG5cdFx0XCJjb21wYXJhdGl2ZWx5XCIsIFwiY29tcGFyZWQgdG9cIiwgXCJjb25jdXJyZW50bHlcIiwgXCJjb25zZXF1ZW50bHlcIiwgXCJjb250cmFyaWx5XCIsIFwiY29udmVyc2VseVwiLCBcImNvcnJlc3BvbmRpbmdseVwiLFxuXHRcdFwiY291cGxlZCB3aXRoXCIsIFwiZGVzcGl0ZVwiLCBcImRpZmZlcmVudCBmcm9tXCIsIFwiZG91YnRlZGx5XCIsIFwiZHVlIHRvXCIsIFwiZHVyaW5nXCIsIFwiZS5nLlwiLCBcImVhcmxpZXJcIiwgXCJlbXBoYXRpY2FsbHlcIixcblx0XHRcImVxdWFsbHlcIiwgXCJlcXVhbGx5IGltcG9ydGFudFwiLCBcImVzcGVjaWFsbHlcIiwgXCJldmVuIGlmXCIsIFwiZXZlbiBtb3JlXCIsIFwiZXZlbiBzb1wiLCBcImV2ZW4gdGhvdWdoXCIsIFwiZXZlbnR1YWxseVwiLFxuXHRcdFwiZXZpZGVudGx5XCIsIFwiZXhwbGljaXRseVwiLCBcImZpbmFsbHlcIiwgXCJmaXJzdCB0aGluZyB0byByZW1lbWJlclwiLCBcImZpcnN0bHlcIiwgXCJmb2xsb3dpbmdcIiwgXCJmb3IgZXhhbXBsZVwiLFxuXHRcdFwiZm9yIGZlYXIgdGhhdFwiLCBcImZvciBpbnN0YW5jZVwiLCBcImZvciBvbmUgdGhpbmdcIiwgXCJmb3IgdGhhdCByZWFzb25cIiwgXCJmb3IgdGhlIG1vc3QgcGFydFwiLCBcImZvciB0aGUgcHVycG9zZSBvZlwiLFxuXHRcdFwiZm9yIHRoZSBzYW1lIHJlYXNvblwiLCBcImZvciB0aGlzIHB1cnBvc2VcIiwgXCJmb3IgdGhpcyByZWFzb25cIiwgXCJmb3JtZXJseVwiLCBcImZvcnRod2l0aFwiLCBcImZvdXJ0aGx5XCIsXG5cdFx0XCJmcm9tIHRpbWUgdG8gdGltZVwiLCBcImZ1cnRoZXJcIiwgXCJmdXJ0aGVybW9yZVwiLCBcImdlbmVyYWxseVwiLCBcImdpdmVuIHRoYXRcIiwgXCJnaXZlbiB0aGVzZSBwb2ludHNcIixcblx0XHRcImhlbmNlXCIsIFwiaGVuY2Vmb3J0aFwiLCBcImhvd2V2ZXJcIiwgXCJpLmUuXCIsIFwiaWRlbnRpY2FsbHlcIiwgXCJpbXBvcnRhbnQgdG8gcmVhbGl6ZVwiLCBcImluIGEgd29yZFwiLCBcImluIGFkZGl0aW9uXCIsXG5cdFx0XCJpbiBhbm90aGVyIGNhc2VcIiwgXCJpbiBhbnkgY2FzZVwiLCBcImluIGFueSBldmVudFwiLCBcImluIGJyaWVmXCIsIFwiaW4gY2FzZVwiLCBcImluIGNvbmNsdXNpb25cIiwgXCJpbiBjb250cmFzdFwiLFxuXHRcdFwiaW4gZGV0YWlsXCIsIFwiaW4gZHVlIHRpbWVcIiwgXCJpbiBlZmZlY3RcIiwgXCJpbiBlaXRoZXIgY2FzZVwiLCBcImluIGVzc2VuY2VcIiwgXCJpbiBmYWN0XCIsIFwiaW4gZ2VuZXJhbFwiLCBcImluIGxpZ2h0IG9mXCIsXG5cdFx0XCJpbiBsaWtlIGZhc2hpb25cIiwgXCJpbiBsaWtlIG1hbm5lclwiLCBcImluIG9yZGVyIHRoYXRcIiwgXCJpbiBvcmRlciB0b1wiLCBcImluIG90aGVyIHdvcmRzXCIsIFwiaW4gcGFydGljdWxhclwiLCBcImluIHJlYWxpdHlcIixcblx0XHRcImluIHNob3J0XCIsIFwiaW4gc2ltaWxhciBmYXNoaW9uXCIsIFwiaW4gc3BpdGUgb2ZcIiwgXCJpbiBzdW1cIiwgXCJpbiBzdW1tYXJ5XCIsIFwiaW4gdGhhdCBjYXNlXCIsIFwiaW4gdGhlIGV2ZW50IHRoYXRcIixcblx0XHRcImluIHRoZSBmaW5hbCBhbmFseXNpc1wiLCBcImluIHRoZSBmaXJzdCBwbGFjZVwiLCBcImluIHRoZSBmb3VydGggcGxhY2VcIiwgXCJpbiB0aGUgaG9wZSB0aGF0XCIsIFwiaW4gdGhlIGxpZ2h0IG9mXCIsXG5cdFx0XCJpbiB0aGUgbG9uZyBydW5cIiwgXCJpbiB0aGUgbWVhbnRpbWVcIiwgXCJpbiB0aGUgc2FtZSBmYXNoaW9uXCIsIFwiaW4gdGhlIHNhbWUgd2F5XCIsIFwiaW4gdGhlIHNlY29uZCBwbGFjZVwiLFxuXHRcdFwiaW4gdGhlIHRoaXJkIHBsYWNlXCIsIFwiaW4gdGhpcyBjYXNlXCIsIFwiaW4gdGhpcyBzaXR1YXRpb25cIiwgXCJpbiB0aW1lXCIsIFwiaW4gdHJ1dGhcIiwgXCJpbiB2aWV3IG9mXCIsIFwiaW5hc211Y2ggYXNcIixcblx0XHRcImluZGVlZFwiLCBcImluc3RlYWRcIiwgXCJsYXN0XCIsIFwibGFzdGx5XCIsIFwibGF0ZXJcIiwgXCJsZXN0XCIsIFwibGlrZXdpc2VcIiwgXCJtYXJrZWRseVwiLCBcIm1lYW53aGlsZVwiLCBcIm1vcmVvdmVyXCIsXG5cdFx0XCJtb3N0IGNvbXBlbGxpbmcgZXZpZGVuY2VcIiwgXCJtb3N0IGltcG9ydGFudFwiLCBcIm11c3QgYmUgcmVtZW1iZXJlZFwiLCBcIm5ldmVydGhlbGVzc1wiLCBcIm5vbmV0aGVsZXNzXCIsIFwibm9yXCIsXG5cdFx0XCJub3QgdG8gbWVudGlvblwiLCAgXCJub3R3aXRoc3RhbmRpbmdcIiwgXCJub3cgdGhhdFwiLCBcIm9idmlvdXNseVwiLCBcIm9jY2FzaW9uYWxseVwiLCBcIm9mIGNvdXJzZVwiLCBcIm9uIGFjY291bnQgb2ZcIixcblx0XHRcIm9uIGJhbGFuY2VcIiwgXCJvbiBjb25kaXRpb24gdGhhdFwiLCBcIm9uIG9uZSBoYW5kXCIsIFwib24gdGhlIGNvbmRpdGlvbiB0aGF0XCIsIFwib24gdGhlIGNvbnRyYXJ5XCIsIFwib24gdGhlIG5lZ2F0aXZlIHNpZGVcIixcblx0XHRcIm9uIHRoZSBvdGhlciBoYW5kXCIsIFwib24gdGhlIHBvc2l0aXZlIHNpZGVcIiwgXCJvbiB0aGUgd2hvbGVcIiwgXCJvbiB0aGlzIG9jY2FzaW9uXCIsIFwib25jZVwiLCBcIm9uY2UgaW4gYSB3aGlsZVwiLFxuXHRcdFwib25seSBpZlwiLCBcIm90aGVyd2lzZVwiLCBcIm92ZXJhbGxcIiwgXCJvd2luZyB0b1wiLCBcInBhcnRpY3VsYXJseVwiLCBcInBvaW50IG9mdGVuIG92ZXJsb29rZWRcIiwgXCJwcmVzZW50bHlcIixcblx0XHRcInByZXZpb3VzbHlcIiwgXCJwcmlvciB0b1wiLCBcInByb3ZpZGVkIHRoYXRcIiwgXCJyYXRoZXJcIiwgXCJyZWdhcmRsZXNzXCIsIFwic2Vjb25kbHlcIiwgXCJzZWVpbmcgdGhhdFwiLFxuXHRcdFwic2hvcnRseVwiLCBcInNpZ25pZmljYW50bHlcIiwgXCJzaW1pbGFybHlcIiwgXCJzaW11bHRhbmVvdXNseVwiLCBcInNpbmNlXCIsIFwic29cIiwgXCJzbyBhcyB0b1wiLCBcInNvIGZhclwiLCBcInNvIGxvbmcgYXNcIixcblx0XHRcInNvIHRoYXRcIiwgXCJzb29uXCIsIFwic29vbmVyIG9yIGxhdGVyXCIsIFwic3BlY2lmaWNhbGx5XCIsIFwic3RpbGxcIiwgXCJzdHJhaWdodGF3YXlcIiwgXCJzdWJzZXF1ZW50bHlcIiwgXCJzdWNoIGFzXCIsXG5cdFx0XCJzdW1taW5nIHVwXCIsIFwic3VyZWx5XCIsIFwic3VycHJpc2luZ2x5XCIsIFwidGFrZSB0aGUgY2FzZSBvZlwiLCBcInRoYW5cIiwgXCJ0aGF0IGlzXCIsIFwidGhhdCBpcyB0byBzYXlcIiwgXCJ0aGVuXCIsXG5cdFx0XCJ0aGVuIGFnYWluXCIsIFwidGhlcmVhZnRlclwiLCBcInRoZXJlZm9yZVwiLCBcInRoZXJldXBvblwiLCBcInRoaXJkbHlcIiwgXCJ0aGlzIHRpbWVcIiwgXCJ0aG91Z2hcIiwgXCJ0aHVzXCIsXG5cdFx0XCJ0aWxsXCIsIFwidG8gYmUgc3VyZVwiLCBcInRvIGJlZ2luIHdpdGhcIiwgXCJ0byBjbGFyaWZ5XCIsIFwidG8gY29uY2x1ZGVcIiwgXCJ0byBkZW1vbnN0cmF0ZVwiLCBcInRvIGVtcGhhc2l6ZVwiLFxuXHRcdFwidG8gZW51bWVyYXRlXCIsIFwidG8gZXhwbGFpblwiLCBcInRvIGlsbHVzdHJhdGVcIiwgXCJ0b29cIiwgXCJ0byBsaXN0XCIsIFwidG8gcG9pbnQgb3V0XCIsIFwidG8gcHV0IGl0IGFub3RoZXIgd2F5XCIsXG5cdFx0XCJ0byBwdXQgaXQgZGlmZmVyZW50bHlcIiwgXCJ0byByZXBlYXRcIiwgXCJ0byByZXBocmFzZSBpdFwiLCBcInRvIHNheSBub3RoaW5nIG9mXCIsIFwidG8gc3VtIHVwXCIsIFwidG8gc3VtbWFyaXplXCIsXG5cdFx0XCJ0byB0aGF0IGVuZFwiLCBcInRvIHRoZSBlbmQgdGhhdFwiLCBcInRvIHRoaXMgZW5kXCIsIFwidG9nZXRoZXIgd2l0aFwiLCBcInVuZGVuaWFibHlcIiwgXCJ1bmRlciB0aG9zZSBjaXJjdW1zdGFuY2VzXCIsXG5cdFx0XCJ1bmRvdWJ0ZWRseVwiLCBcInVubGVzc1wiLCBcInVubGlrZVwiLCBcInVucXVlc3Rpb25hYmx5XCIsIFwidW50aWxcIiwgXCJ1bnRpbCBub3dcIiwgXCJ1cCBhZ2FpbnN0XCIsIFwidXAgdG8gdGhlIHByZXNlbnQgdGltZVwiLFxuXHRcdFwidmlzIGEgdmlzXCIsIFwid2hhdCdzIG1vcmVcIiwgXCJ3aGVuXCIsIFwid2hlbmV2ZXJcIiwgXCJ3aGVyZWFzXCIsIFwid2hpbGVcIiwgXCJ3aGlsZSBpdCBtYXkgYmUgdHJ1ZVwiLCBcIndoaWxlIHRoaXMgbWF5IGJlIHRydWVcIixcblx0XHRcIndpdGggYXR0ZW50aW9uIHRvXCIsIFwid2l0aCB0aGUgcmVzdWx0IHRoYXRcIiwgXCJ3aXRoIHRoaXMgaW4gbWluZFwiLCBcIndpdGggdGhpcyBpbnRlbnRpb25cIiwgXCJ3aXRoIHRoaXMgcHVycG9zZSBpbiBtaW5kXCIsXG5cdFx0XCJ3aXRob3V0IGEgZG91YnRcIiwgXCJ3aXRob3V0IGRlbGF5XCIsIFwid2l0aG91dCBkb3VidFwiLCBcIndpdGhvdXQgcmVzZXJ2YXRpb25cIiBdO1xufTtcblxuIiwiLyoqIEBtb2R1bGUgY29uZmlnL3R3b1BhcnRUcmFuc2l0aW9uV29yZHMgKi9cblxuLyoqXG4gKiBSZXR1cm5zIGFuIGFycmF5IHdpdGggdHdvLXBhcnQgdHJhbnNpdGlvbiB3b3JkcyB0byBiZSB1c2VkIGJ5IHRoZSBhc3Nlc3NtZW50cy5cbiAqIEByZXR1cm5zIHtBcnJheX0gVGhlIGFycmF5IGZpbGxlZCB3aXRoIHR3by1wYXJ0IHRyYW5zaXRpb24gd29yZHMuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG5cdHJldHVybiBbIFsgXCJib3RoXCIsIFwiYW5kXCIgXSwgWyBcImlmXCIsIFwidGhlblwiIF0sIFsgXCJub3Qgb25seVwiLCBcImJ1dCBhbHNvXCIgXSwgWyBcIm5laXRoZXJcIiwgXCJub3JcIiBdLCBbIFwiZWl0aGVyXCIsIFwib3JcIiBdLCBbIFwibm90XCIsIFwiYnV0XCIgXSxcblx0XHRbIFwid2hldGhlclwiLCBcIm9yXCIgXSwgWyBcIm5vIHNvb25lclwiLCBcInRoYW5cIiBdIF07XG59O1xuIiwiLyoqIEBtb2R1bGUgYW5hbHlzZXMvZmluZEtleXdvcmRJbkZpcnN0UGFyYWdyYXBoICovXG5cbnZhciBtYXRjaFBhcmFncmFwaHMgPSByZXF1aXJlKCBcIi4uL3N0cmluZ1Byb2Nlc3NpbmcvbWF0Y2hQYXJhZ3JhcGhzLmpzXCIgKTtcbnZhciB3b3JkTWF0Y2ggPSByZXF1aXJlKCBcIi4uL3N0cmluZ1Byb2Nlc3NpbmcvbWF0Y2hUZXh0V2l0aFdvcmQuanNcIiApO1xuXG4vKipcbiAqIENvdW50cyB0aGUgb2NjdXJyZW5jZXMgb2YgdGhlIGtleXdvcmQgaW4gdGhlIGZpcnN0IHBhcmFncmFwaCwgcmV0dXJucyAwIGlmIGl0IGlzIG5vdCBmb3VuZCxcbiAqIGlmIHRoZXJlIGlzIG5vIHBhcmFncmFwaCB0YWcgb3IgMCBoaXRzLCBpdCBjaGVja3MgZm9yIDIgbmV3bGluZXMsIG90aGVyd2lzZSByZXR1cm5zIHRoZSBrZXl3b3JkXG4gKiBjb3VudCBvZiB0aGUgY29tcGxldGUgdGV4dC5cbiAqXG4gKiBAcGFyYW0ge1BhcGVyfSBwYXBlciBUaGUgdGV4dCB0byBjaGVjayBmb3IgcGFyYWdyYXBocy5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBudW1iZXIgb2Ygb2NjdXJlbmNlcyBvZiB0aGUga2V5d29yZCBpbiB0aGUgZmlyc3QgcGFyYWdyYXBoLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCBwYXBlciApIHtcblx0dmFyIHBhcmFncmFwaCA9IG1hdGNoUGFyYWdyYXBocyggcGFwZXIuZ2V0VGV4dCgpICk7XG5cdHJldHVybiB3b3JkTWF0Y2goIHBhcmFncmFwaFsgMCBdLCBwYXBlci5nZXRLZXl3b3JkKCksIHBhcGVyLmdldExvY2FsZSgpICk7XG59O1xuIiwiLyoqIEBtb2R1bGUgYW5hbHlzZXMvZmluZEtleXdvcmRJblBhZ2VUaXRsZSAqL1xuXG52YXIgd29yZE1hdGNoID0gcmVxdWlyZSggXCIuLi9zdHJpbmdQcm9jZXNzaW5nL21hdGNoVGV4dFdpdGhXb3JkLmpzXCIgKTtcblxuLyoqXG4gKiBDb3VudHMgdGhlIG9jY3VycmVuY2VzIG9mIHRoZSBrZXl3b3JkIGluIHRoZSBwYWdldGl0bGUuIFJldHVybnMgdGhlIG51bWJlciBvZiBtYXRjaGVzXG4gKiBhbmQgdGhlIHBvc2l0aW9uIG9mIHRoZSBrZXl3b3JkLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBwYXBlciBUaGUgcGFwZXIgY29udGFpbmluZyB0aXRsZSBhbmQga2V5d29yZC5cbiAqIEByZXR1cm5zIHtvYmplY3R9IHJlc3VsdCB3aXRoIHRoZSBtYXRjaGVzIGFuZCBwb3NpdGlvbi5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCBwYXBlciApIHtcblx0dmFyIHRpdGxlID0gcGFwZXIuZ2V0VGl0bGUoKTtcblx0dmFyIGtleXdvcmQgPSBwYXBlci5nZXRLZXl3b3JkKCk7XG5cdHZhciBsb2NhbGUgPSBwYXBlci5nZXRMb2NhbGUoKTtcblx0dmFyIHJlc3VsdCA9IHsgbWF0Y2hlczogMCwgcG9zaXRpb246IC0xIH07XG5cdHJlc3VsdC5tYXRjaGVzID0gd29yZE1hdGNoKCB0aXRsZSwga2V5d29yZCwgbG9jYWxlICk7XG5cdHJlc3VsdC5wb3NpdGlvbiA9IHRpdGxlLnRvTG9jYWxlTG93ZXJDYXNlKCkuaW5kZXhPZigga2V5d29yZCApO1xuXG5cdHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGNyZWF0ZVJlZ2V4RnJvbURvdWJsZUFycmF5ID0gcmVxdWlyZSggXCIuLi9zdHJpbmdQcm9jZXNzaW5nL2NyZWF0ZVJlZ2V4RnJvbURvdWJsZUFycmF5LmpzXCIgKTtcbnZhciBnZXRTZW50ZW5jZXMgPSByZXF1aXJlKCBcIi4uL3N0cmluZ1Byb2Nlc3NpbmcvZ2V0U2VudGVuY2VzLmpzXCIgKTtcbnZhciBtYXRjaFdvcmRJblNlbnRlbmNlID0gcmVxdWlyZSggXCIuLi9zdHJpbmdQcm9jZXNzaW5nL21hdGNoV29yZEluU2VudGVuY2UuanNcIiApO1xudmFyIG5vcm1hbGl6ZVNpbmdsZVF1b3RlcyA9IHJlcXVpcmUoIFwiLi4vc3RyaW5nUHJvY2Vzc2luZy9xdW90ZXMuanNcIiApLm5vcm1hbGl6ZVNpbmdsZTtcbnZhciBnZXRUcmFuc2l0aW9uV29yZHMgPSByZXF1aXJlKCBcIi4uL2hlbHBlcnMvZ2V0VHJhbnNpdGlvbldvcmRzLmpzXCIgKTtcblxudmFyIGZvckVhY2ggPSByZXF1aXJlKCBcImxvZGFzaC9mb3JFYWNoXCIgKTtcbnZhciBmaWx0ZXIgPSByZXF1aXJlKCBcImxvZGFzaC9maWx0ZXJcIiApO1xudmFyIG1lbW9pemUgPSByZXF1aXJlKCBcImxvZGFzaC9tZW1vaXplXCIgKTtcblxudmFyIGNyZWF0ZVJlZ2V4RnJvbURvdWJsZUFycmF5Q2FjaGVkID0gbWVtb2l6ZSggY3JlYXRlUmVnZXhGcm9tRG91YmxlQXJyYXkgKTtcbi8qKlxuICogTWF0Y2hlcyB0aGUgc2VudGVuY2UgYWdhaW5zdCB0d28gcGFydCB0cmFuc2l0aW9uIHdvcmRzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzZW50ZW5jZSBUaGUgc2VudGVuY2UgdG8gbWF0Y2ggYWdhaW5zdC5cbiAqIEBwYXJhbSB7QXJyYXl9IHR3b1BhcnRUcmFuc2l0aW9uV29yZHMgVGhlIGFycmF5IGNvbnRhaW5pbmcgdHdvLXBhcnQgdHJhbnNpdGlvbiB3b3Jkcy5cbiAqIEByZXR1cm5zIHtBcnJheX0gVGhlIGZvdW5kIHRyYW5zaXRpb25hbCB3b3Jkcy5cbiAqL1xudmFyIG1hdGNoVHdvUGFydFRyYW5zaXRpb25Xb3JkcyA9IGZ1bmN0aW9uKCBzZW50ZW5jZSwgdHdvUGFydFRyYW5zaXRpb25Xb3JkcyApIHtcblx0c2VudGVuY2UgPSBub3JtYWxpemVTaW5nbGVRdW90ZXMoIHNlbnRlbmNlICk7XG5cdHZhciB0d29QYXJ0VHJhbnNpdGlvbldvcmRzUmVnZXggPSBjcmVhdGVSZWdleEZyb21Eb3VibGVBcnJheUNhY2hlZCggdHdvUGFydFRyYW5zaXRpb25Xb3JkcyApO1xuXHRyZXR1cm4gc2VudGVuY2UubWF0Y2goIHR3b1BhcnRUcmFuc2l0aW9uV29yZHNSZWdleCApO1xufTtcblxuLyoqXG4gKiBNYXRjaGVzIHRoZSBzZW50ZW5jZSBhZ2FpbnN0IHRyYW5zaXRpb24gd29yZHMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHNlbnRlbmNlIFRoZSBzZW50ZW5jZSB0byBtYXRjaCBhZ2FpbnN0LlxuICogQHBhcmFtIHtBcnJheX0gdHJhbnNpdGlvbldvcmRzIFRoZSBhcnJheSBjb250YWluaW5nIHRyYW5zaXRpb24gd29yZHMuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFRoZSBmb3VuZCB0cmFuc2l0aW9uYWwgd29yZHMuXG4gKi9cbnZhciBtYXRjaFRyYW5zaXRpb25Xb3JkcyA9IGZ1bmN0aW9uKCBzZW50ZW5jZSwgdHJhbnNpdGlvbldvcmRzICkge1xuXHRzZW50ZW5jZSA9IG5vcm1hbGl6ZVNpbmdsZVF1b3Rlcyggc2VudGVuY2UgKTtcblxuXHR2YXIgbWF0Y2hlZFRyYW5zaXRpb25Xb3JkcyA9IGZpbHRlciggdHJhbnNpdGlvbldvcmRzLCBmdW5jdGlvbiggd29yZCApIHtcblx0XHRyZXR1cm4gbWF0Y2hXb3JkSW5TZW50ZW5jZSggd29yZCwgc2VudGVuY2UgKTtcblx0fSApO1xuXG5cdHJldHVybiBtYXRjaGVkVHJhbnNpdGlvbldvcmRzO1xufTtcblxuLyoqXG4gKiBDaGVja3MgdGhlIHBhc3NlZCBzZW50ZW5jZXMgdG8gc2VlIGlmIHRoZXkgY29udGFpbiB0cmFuc2l0aW9uIHdvcmRzLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IHNlbnRlbmNlcyBUaGUgc2VudGVuY2VzIHRvIG1hdGNoIGFnYWluc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gdHJhbnNpdGlvbldvcmRzIFRoZSBvYmplY3QgY29udGFpbmluZyBib3RoIHRyYW5zaXRpb24gd29yZHMgYW5kIHR3byBwYXJ0IHRyYW5zaXRpb24gd29yZHMuXG4gKiBAcmV0dXJucyB7QXJyYXl9IEFycmF5IG9mIHNlbnRlbmNlIG9iamVjdHMgY29udGFpbmluZyB0aGUgY29tcGxldGUgc2VudGVuY2UgYW5kIHRoZSB0cmFuc2l0aW9uIHdvcmRzLlxuICovXG52YXIgY2hlY2tTZW50ZW5jZXNGb3JUcmFuc2l0aW9uV29yZHMgPSBmdW5jdGlvbiggc2VudGVuY2VzLCB0cmFuc2l0aW9uV29yZHMgKSB7XG5cdHZhciByZXN1bHRzID0gW107XG5cblx0Zm9yRWFjaCggc2VudGVuY2VzLCBmdW5jdGlvbiggc2VudGVuY2UgKSB7XG5cdFx0dmFyIHR3b1BhcnRNYXRjaGVzID0gbWF0Y2hUd29QYXJ0VHJhbnNpdGlvbldvcmRzKCBzZW50ZW5jZSwgdHJhbnNpdGlvbldvcmRzLnR3b1BhcnRUcmFuc2l0aW9uV29yZHMoKSApO1xuXG5cdFx0aWYgKCB0d29QYXJ0TWF0Y2hlcyAhPT0gbnVsbCApIHtcblx0XHRcdHJlc3VsdHMucHVzaCgge1xuXHRcdFx0XHRzZW50ZW5jZTogc2VudGVuY2UsXG5cdFx0XHRcdHRyYW5zaXRpb25Xb3JkczogdHdvUGFydE1hdGNoZXMsXG5cdFx0XHR9ICk7XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgdHJhbnNpdGlvbldvcmRNYXRjaGVzID0gbWF0Y2hUcmFuc2l0aW9uV29yZHMoIHNlbnRlbmNlLCB0cmFuc2l0aW9uV29yZHMudHJhbnNpdGlvbldvcmRzKCkgKTtcblxuXHRcdGlmICggdHJhbnNpdGlvbldvcmRNYXRjaGVzLmxlbmd0aCAhPT0gMCApIHtcblx0XHRcdHJlc3VsdHMucHVzaCgge1xuXHRcdFx0XHRzZW50ZW5jZTogc2VudGVuY2UsXG5cdFx0XHRcdHRyYW5zaXRpb25Xb3JkczogdHJhbnNpdGlvbldvcmRNYXRjaGVzLFxuXHRcdFx0fSApO1xuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHR9ICk7XG5cblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vKipcbiAqIENoZWNrcyBob3cgbWFueSBzZW50ZW5jZXMgZnJvbSBhIHRleHQgY29udGFpbiBhdCBsZWFzdCBvbmUgdHJhbnNpdGlvbiB3b3JkIG9yIHR3by1wYXJ0IHRyYW5zaXRpb24gd29yZFxuICogdGhhdCBhcmUgZGVmaW5lZCBpbiB0aGUgdHJhbnNpdGlvbiB3b3JkcyBjb25maWcgYW5kIHR3byBwYXJ0IHRyYW5zaXRpb24gd29yZHMgY29uZmlnLlxuICpcbiAqIEBwYXJhbSB7UGFwZXJ9IHBhcGVyIFRoZSBQYXBlciBvYmplY3QgdG8gZ2V0IHRleHQgZnJvbS5cbiAqIEByZXR1cm5zIHtvYmplY3R9IEFuIG9iamVjdCB3aXRoIHRoZSB0b3RhbCBudW1iZXIgb2Ygc2VudGVuY2VzIGluIHRoZSB0ZXh0XG4gKiBhbmQgdGhlIHRvdGFsIG51bWJlciBvZiBzZW50ZW5jZXMgY29udGFpbmluZyBvbmUgb3IgbW9yZSB0cmFuc2l0aW9uIHdvcmRzLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCBwYXBlciApIHtcblx0dmFyIGxvY2FsZSA9IHBhcGVyLmdldExvY2FsZSgpO1xuXHR2YXIgdHJhbnNpdGlvbldvcmRzID0gZ2V0VHJhbnNpdGlvbldvcmRzKCBsb2NhbGUgKTtcblx0dmFyIHNlbnRlbmNlcyA9IGdldFNlbnRlbmNlcyggcGFwZXIuZ2V0VGV4dCgpICk7XG5cdHZhciBzZW50ZW5jZVJlc3VsdHMgPSBjaGVja1NlbnRlbmNlc0ZvclRyYW5zaXRpb25Xb3Jkcyggc2VudGVuY2VzLCB0cmFuc2l0aW9uV29yZHMgKTtcblxuXHRyZXR1cm4ge1xuXHRcdHRvdGFsU2VudGVuY2VzOiBzZW50ZW5jZXMubGVuZ3RoLFxuXHRcdHNlbnRlbmNlUmVzdWx0czogc2VudGVuY2VSZXN1bHRzLFxuXHRcdHRyYW5zaXRpb25Xb3JkU2VudGVuY2VzOiBzZW50ZW5jZVJlc3VsdHMubGVuZ3RoLFxuXHR9O1xufTtcbiIsIi8qKlxuICogUmV0dXJucyBhbiBhcnJheSB3aXRoIGV4Y2VwdGlvbnMgZm9yIHRoZSBzZW50ZW5jZSBiZWdpbm5pbmcgcmVzZWFyY2hlci5cbiAqIEByZXR1cm5zIHtBcnJheX0gVGhlIGFycmF5IGZpbGxlZCB3aXRoIGV4Y2VwdGlvbnMuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG5cdHJldHVybiBbXG5cdFx0Ly8gRGVmaW5pdGUgYXJ0aWNsZXM6XG5cdFx0XCJsZVwiLCBcImxhXCIsIFwibGVzXCIsXG5cdFx0Ly8gSW5kZWZpbml0ZSBhcnRpY2xlczpcblx0XHRcInVuXCIsIFwidW5lXCIsXG5cdFx0Ly8gTnVtYmVycyAyLTEwICgndW5lJyBpcyBhbHJlYWR5IGluY2x1ZGVkIGluIHRoZSBpbmRlZmluaXRlIGFydGljbGVzKTpcblx0XHRcImRldXhcIiwgXCJ0cm9pc1wiLCBcInF1YXRyZVwiLCBcImNpbnFcIiwgXCJzaXhcIiwgXCJzZXB0XCIsIFwiaHVpdFwiLCBcIm5ldWZcIiwgXCJkaXhcIixcblx0XHQvLyBEZW1vbnN0cmF0aXZlIHByb25vdW5zOlxuXHRcdFwiY2VsdWlcIiwgXCJjZWxsZVwiLCBcImNldXhcIiwgXCJjZWxsZXNcIiwgXCJjZWx1aS1jaVwiLCBcImNlbGxlLWzDoFwiLCBcImNlbHVpLWzDoFwiLCBcImNlbGxlLWNpXCIsXG5cdF07XG59O1xuXG4iLCIvKiogQG1vZHVsZSBjb25maWcvdHJhbnNpdGlvbldvcmRzICovXG5cbi8qKlxuICogUmV0dXJucyBhbiBhcnJheSB3aXRoIHRyYW5zaXRpb24gd29yZHMgdG8gYmUgdXNlZCBieSB0aGUgYXNzZXNzbWVudHMuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFRoZSBhcnJheSBmaWxsZWQgd2l0aCB0cmFuc2l0aW9uIHdvcmRzLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gW1xuXHRcdFwiw6AgY2F1c2UgZGVcIiwgXCLDoCBjZSBwcm9wb3NcIiwgXCLDoCBjZSBzdWpldFwiLCBcIsOgIGNvbmRpdGlvbiBxdWVcIiwgXCLDoCBsJ2VuY29udHJlIGRlXCIsIFwiw6AgbCdpbWFnZSBkZVwiLCBcIsOgIGwnaW52ZXJzZVwiLFxuXHRcdFwiw6AgbCdpbnZlcnNlIGRlXCIsIFwiw6AgbWVzdXJlIHF1ZVwiLCBcIsOgIG1vaW5zIHF1ZVwiLCBcIsOgIHByZW1pw6hyZSB2dWVcIiwgXCLDoCBzYXZvaXJcIiwgXCLDoCBzZXVsZSBmaW4gcXVlXCIsIFwiw6Agc3VwcG9zZXIgcXVlXCIsXG5cdFx0XCLDoCB2cmFpIGRpcmVcIiwgXCJhZmluIHF1ZVwiLCBcImFpbnNpXCIsIFwiYWluc2kgZG9uY1wiLCBcImFpbnNpIHF1ZVwiLCBcImFsb3JzXCIsIFwiYWxvcnMgcXVlXCIsIFwiYXDDqHMgcsOpZmxleGlvblwiLCBcImFwcsOocyBjZWxhXCIsXG5cdFx0XCJhcHLDqHMgcXVlXCIsIFwiYXByw6hzIHLDqWZsZXhpb25cIiwgXCJhcHLDqHMgdG91dFwiLCBcImF0dGVuZHUgcXVlXCIsIFwiYXUgY2FzIG/DuVwiLCBcImF1IGNvbnRyYWlyZVwiLCBcImF1IGZ1ciBldCDDoCBtZXN1cmUgcXVlXCIsXG5cdFx0XCJhdSBsaWV1IGRlXCIsIFwiYXUgbcOqbWUgdGVtcHNcIiwgXCJhdSBtb21lbnQgb8O5XCIsIFwiYXUgcG9pbnQgcXVlXCIsIFwiYXVzc2lcIiwgXCJhdXNzaSBiaWVuIHF1ZVwiLCBcImF1c3NpdMO0dCBxdWVcIiwgXCJhdXRhbnQgcXVlXCIsXG5cdFx0XCJhdXRyZW1lbnQgZGl0XCIsIFwiYXZhbnQgcXVlXCIsIFwiYXZhbnQgdG91dFwiLCBcImF5YW50IGZpbmlcIiwgXCJiaWVuIHF1ZVwiLCBcImMnZXN0IMOgIGRpcmUgcXVlXCIsIFwiYydlc3QgYWluc2kgcXVlXCIsXG5cdFx0XCJjJ2VzdCBsZSBjYXMgZGVcIiwgXCJjJ2VzdCBwb3VycXVvaVwiLCBcImMnZXN0IHF1J2VuIGVmZmV0XCIsIFwiYydlc3Qtw6AtZGlyZVwiLCBcIsOnYSBjb25maXJtZSBxdWVcIiwgXCLDp2EgbW9udHJlIHF1ZVwiLFxuXHRcdFwiw6dhIHByb3V2ZSBxdWVcIiwgXCJjYXJcIiwgXCJjZWxhIGRpdFwiLCBcImNlbGEgw6l0YW50XCIsIFwiY2VwZW5kYW50XCIsIFwiY2VwZW5kYW50IHF1ZVwiLCBcImNvbW1lIGwnaWxsdXN0cmVcIiwgXCJjb21tZSBsZSBzb3VsaWduZVwiLFxuXHRcdFwiY29tbWUgcXVvaVwiLCBcImNvbW1lIHNpXCIsIFwiY29uc8OpcXVlbW1lbnRcIiwgXCJjb250cmFpcmVtZW50IMOgXCIsIFwiZCdhYm9yZFwiLCBcImQnYWlsbGV1cnNcIiwgXCJkJ2FwcsOoc1wiLCBcImQnYXV0YW50IHBsdXMgcXVlXCIsXG5cdFx0XCJkJ2F1dGFudCBxdWVcIiwgXCJkJ2F1dHJlIHBhcnRcIiwgXCJkJ2ljaSBsw6BcIiwgXCJkJ3VuIGF1dHJlIGPDtHTDqVwiLCBcImQndW4gY8O0dMOpXCIsIFwiZCd1bmUgZmFjb24gZ8OpbsOpcmFsZSAnJ1wiLCBcImRhbnMgY2UgY2FzXCIsXG5cdFx0XCJkYW5zIGNlcyBjb25kaXRpb25zXCIsIFwiZGFucyBsJ2Vuc2VtYmxlXCIsIFwiZGFucyBsJ2h5cG90aMOoc2Ugb8O5XCIsIFwiZGFucyBsYSBtZXN1cmUgb8O5XCIsIFwiZGFucyBsZSBjYWRyZSBkZVwiLFxuXHRcdFwiZGFucyBsZSBjYXMgb8O5XCIsIFwiZGFucyB1biBhdXRyZSBvcmRyZSBkJ2lkw6llXCIsIFwiZGUgY3JhaW50ZSBxdWVcIiwgXCJkZSBmYcOnb24gw6AgY2UgcXVlXCIsIFwiZGUgZmHDp29uIHF1ZVwiLCBcImRlIGZhaXRcIixcblx0XHRcImRlIGwnYXV0cmUgY8O0dMOpXCIsIFwiZGUgbGEgbcOqbWUgZmHDp29uIHF1ZVwiLCBcImRlIG1hbmnDqHJlIHF1ZVwiLCBcImRlIG3Dqm1lXCIsIFwiZGUgbcOqbWUgcXVhXCIsIFwiZGUgbcOqbWUgcXVlXCIsIFwiZGUgcGV1ciBxdWVcIixcblx0XHRcImRlIHByaW1lIGFib3JkXCIsIFwiZGUgc29ydGUgcXVlXCIsIFwiZGUgc3VyY3Jvw650XCIsIFwiZGUgdGVsbGUgbWFuacOocmUgcXVlXCIsIFwiZGUgdGVsbGUgc29ydGUgcXVlXCIsIFwiZGUgdG91dGUgZmHDp29uXCIsXG5cdFx0XCJkZXB1aXMgcXVlXCIsIFwiZMOocyBsb3JzIHF1ZVwiLCBcImTDqHMgcXVhXCIsIFwiZMOocyBxdWVcIiwgXCJkw6lzb3JtYWlzXCIsIFwiZGV1eGnDqG1lbWVudFwiLCBcImRvbmNcIiwgXCJkb3LDqW5hdmFudFwiLCBcImR1IGZhaXQgcXVlXCIsXG5cdFx0XCJkdSBtb21lbnQgcXVlXCIsIFwiZHUgcG9pbnQgZGUgdnVlIGRlXCIsIFwiZHUgcmVzdGVcIiwgXCJlZmZlY3RpdmVtZW50XCIsIFwiw6lnYWxlbWVudFwiLCBcImVuIGFkbWV0dGFudCBxdWVcIiwgXCJlbiBhdHRlbmRhbnQgcXVlXCIsXG5cdFx0XCJlbiBicmVmXCIsIFwiZW4gY2FzIHF1ZVwiLCBcImVuIGNlIGRvbWFpbmVcIiwgXCJlbiBjZWxhXCIsIFwiZW4gY29uY2VxdWVuY2VcIiwgXCJlbiBjb25jbHVzaW9uXCIsIFwiZW4gY29uc8OpcXVlbmNlXCIsXG5cdFx0XCJlbiBkJ2F1dHJlcyB0ZXJtZXNcIiwgXCJlbiBkw6lmaW5pdGl2ZVwiLCBcImVuIGTDqXBpdCBkZVwiLCBcImVuIGRlcm5pZXIgbGlldVwiLCBcImVuIGRldXhpw6htZSBsaWV1XCIsIFwiZW4gZWZmZXRcIiwgXCJlbiBmYWNlIGRlXCIsXG5cdFx0XCJlbiBmYWl0XCIsIFwiZW4gZmluIGRlIGNvbXB0ZVwiLCBcImVuIGfDqW7DqXJhbFwiLCBcImVuIGd1aXNlIGRlIGNvbmNsdXNpb25cIiwgXCJlbiBtw6ptZSB0ZW1wcyBxdWVcIiwgXCJlbiBvdXRyZVwiLCBcImVuIHBhcnRpY3VsaWVyXCIsXG5cdFx0XCJlbiBwbHVzXCIsIFwiZW4gcHJlbWllciBsaWV1XCIsIFwiZW4gcmFpc29uIGRlXCIsIFwiZW4gcsOpYWxpdMOpXCIsIFwiZW4gcsOoZ2xlIGfDqW7DqXJhbGVcIiwgXCJlbiByw6lzdW3DqVwiLCBcImVuIHJldmFuY2hlXCIsIFwiZW4gc2Vjb25kIGxpZXVcIixcblx0XHRcImVuIHNvbW1lXCIsIFwiZW4gc29ydGUgcXVlXCIsIFwiZW4gc3VwcG9zYW50IHF1ZVwiLCBcImVuIHRhbnQgcXVlXCIsIFwiZW4gdG91dCBjYXNcIiwgXCJlbiB0cm9pc2nDqG1lIGxpZXVcIiwgXCJlbiB1biBtb3RcIiwgXCJlbiB2dWUgcXVlXCIsXG5cdFx0XCJlbmNvcmUgcXVlXCIsIFwiZW5maW5cIiwgXCJlbnN1aXRlXCIsIFwiZW50cmUgYXV0cmVzXCIsIFwiZXQgcHVpc1wiLCBcIsOpdGFudCBkb25uw6kgcXVhXCIsIFwiw6l0YW50IGRvbm7DqSBxdWVcIiwgXCJmYWNlIMOgXCIsIFwiZmluYWxlbWVudFwiLFxuXHRcdFwiZ2xvYmFsZW1lbnRcIiwgXCJncsOiY2Ugw6BcIiwgXCJpbCBmYXV0IGRpcmUgYXVzc2kgcXVlXCIsIFwianVzcXUnw6AgY2UgcXVlXCIsIFwibGEgcHJldXZlIGMnZXN0IHF1ZVwiLCBcImxhLWRlc3N1c1wiLCBcImxvaW4gcXVlXCIsIFwibG9yc3F1ZVwiLFxuXHRcdFwibWFpc1wiLCBcIm1hbGdyw6lcIiwgXCJtYWxncsOpIGNlbGFcIiwgXCJtYWxncsOpIHRvdXRcIiwgXCJtw6ptZSBzaVwiLCBcIm1pcyDDoCBwYXJ0IGxlIGZhaXQgcXVlXCIsIFwibsOpYW5tb2luc1wiLCBcIm5vdGFtbWVudFwiLCBcIm51bCBkb3V0ZSBxdWVcIixcblx0XHRcIm91IGJpZW5cIiwgXCJvw7kgcXVlXCIsIFwicGFyIGFpbGxldXJzXCIsIFwicGFyIGNvbnPDqXF1ZW50XCIsIFwicGFyIGNvbnRyZVwiLCBcInBhciBleGFtcGxlXCIsIFwicGFyIGV4ZW1wbGVcIiwgXCJwYXIgbGEgc3VpdGVcIixcblx0XHRcInBhciByYXBwb3J0IMOgXCIsIFwicGFyIHN1aXRlXCIsIFwicGFyIHN1aXRlIGRlXCIsIFwicGFyY2UgcXVlXCIsIFwicGFyZWlsbGVtZW50XCIsIFwicGFydGFudFwiLCBcInBhcnRhbnQgZGUgY2UgZmFpdFwiLCBcInBhcyBkdSB0b3V0XCIsXG5cdFx0XCJwZW5kYW50IHF1ZVwiLCBcInBvdXIgYWluc2kgZGlyZVwiLCBcInBvdXIgY2VzIHJhaXNvbnNcIiwgXCJwb3VyIGNldHRlIHJhaXNvblwiLCBcInBvdXIgY29uY2x1cmVcIiwgXCJwb3VyIHBldSBxdWVcIiwgXCJwb3VyIHF1ZVwiLCBcInBvdXIgcsOpc3Vtw6lcIixcblx0XHRcInBvdXJ0YW50XCIsIFwicG91cnZ1IHF1ZVwiLCBcInByZW1pw6hyZW1lbnRcIiwgXCJwcm9iYWJsZW1lbnRcIiwgXCJwdWlzXCIsIFwicHVpc3F1ZVwiLCBcInB1ciB0b3V0ZXMgY2VzIHJhaXNvbnNcIiwgXCJxdWFuZCBiaWVuIG3Dqm1lIHF1ZVwiLFxuXHRcdFwicXVhbmQgbcOqbWVcIiwgXCJxdWFudCDDoFwiLCBcInF1YW50IG3Dqm1lXCIsIFwicXVlbCBxdWUgc29pdFwiLCBcInF1aSBxdWVcIiwgXCJxdW9pIHF1J2lsIGVuIHNvaXRcIiwgXCJxdW9pIHF1ZVwiLCBcInF1b2lxdSdpbCBlbiBzb2l0XCIsXG5cdFx0XCJxdW9pcXVlXCIsIFwic2FucyBkb3V0ZVwiLCBcInNlbG9uXCIsIFwic2Vsb24gcXVlXCIsIFwic2VtYmxhYmxlbWVudFwiLCBcInNpIGJpZW4gcXVlXCIsIFwic2kgY2Ugbidlc3QgcXVlXCIsIFwic2lub25cIiwgXCJzaXTDtHQgcXVlXCIsXG5cdFx0XCJzb21tZSB0b3V0ZVwiLCBcInNvdXMgcHLDqXRleHRlIHF1ZVwiLCBcInN1aXZhbnRcIiwgXCJzdWl2YW50IHF1ZVwiLCBcInN1cHBvc8OpIHF1ZVwiLCBcInRhbmRpcyBxdWVcIiwgXCJ0YW50IGV0IHNpIGJpZW4gcXVlXCIsIFwidGFudCBxdWVcIixcblx0XHRcInRlbGxlbWVudCBxdWVcIiwgXCJ0b3V0IGJpZW4gcGVzw6lcIiwgXCJ0b3V0IGNvbXB0ZSBmYWl0XCIsIFwidG91dCBkJ2Fib3JkXCIsIFwidG91dCBkZSBtw6ptZVwiLCBcInRvdXRlZm9pc1wiLCBcInRyb2lzacOobWVtZW50XCIsIFwidnUgcXVlXCIsXG5cdF07XG59O1xuIiwiLyoqIEBtb2R1bGUgY29uZmlnL3R3b1BhcnRUcmFuc2l0aW9uV29yZHMgKi9cblxuLyoqXG4gKiBSZXR1cm5zIGFuIGFycmF5IHdpdGggdHdvLXBhcnQgdHJhbnNpdGlvbiB3b3JkcyB0byBiZSB1c2VkIGJ5IHRoZSBhc3Nlc3NtZW50cy5cbiAqIEByZXR1cm5zIHtBcnJheX0gVGhlIGFycmF5IGZpbGxlZCB3aXRoIHR3by1wYXJ0IHRyYW5zaXRpb24gd29yZHMuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG5cdHJldHVybiBbXG5cdFx0WyBcIsOgIHByZW1pw6hyZSB2dWVcIiwgXCJtYWlzIMOgIGJpZW4gY29uc2lkw6lyZXIgbGVzIGNob3Nlc1wiIF0sIFsgXCLDoCBwcmVtacOocmUgdnVlXCIsIFwibWFpcyB0b3V0ZSByw6lmbGV4aW9uIGZhaXRlXCIgXSxcblx0XHRbIFwiYXVzc2lcIiwgXCJxdWVcIiBdLCBbIFwiY2VydGVzXCIsIFwibWFpc1wiIF0sIFsgXCJkJ3VuIGPDtHTDqVwiLCBcImRlIGwnYXV0cmUgY8O0dMOpXCIgXSwgWyBcImQndW4gY8O0dMOpXCIsIFwiZGUgbCdhdXRyZVwiIF0sXG5cdFx0WyBcImQndW5lIHBhcnRcIiwgXCJkJ2F1dHJlIHBhcnRcIiBdLCBbIFwiZCd1bmUgcGFydGVcIiwgXCJkZSBsJ2F1dHJlIHBhcnRlXCIgXSwgWyBcIm5vbiBzZXVsZW1lbnRcIiwgXCJtYWlzIGF1c3NpXCIgXSxcblx0XHRbIFwibm9uIHNldWxlbWVudFwiLCBcIm1haXMgZW4gb3V0cmVcIiBdLCBbIFwibm9uIHNldWxlbWVudFwiLCBcIm1haXMgZW5jb3JlXCIgXSwgWyBcInF1ZWxxdWVcIiwgXCJxdWVcIiBdLCBbIFwic2lcIiwgXCJxdWVcIiBdLFxuXHRcdFsgXCJzb2l0XCIsIFwic29pdFwiIF0sIFsgXCJ0YW50w7R0XCIsIFwidGFudMO0dFwiIF0sIFsgXCJ0b3V0IGQnYWJvcmRcIiwgXCJlbnN1aXRlXCIgXSwgWyBcInRvdXRcIiwgXCJxdWVcIiBdLFxuXHRdO1xufTtcbiIsIi8qKlxuICogUmV0dXJucyBhbiBhcnJheSB3aXRoIGV4Y2VwdGlvbnMgZm9yIHRoZSBzZW50ZW5jZSBiZWdpbm5pbmcgcmVzZWFyY2hlci5cbiAqIEByZXR1cm5zIHtBcnJheX0gVGhlIGFycmF5IGZpbGxlZCB3aXRoIGV4Y2VwdGlvbnMuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG5cdHJldHVybiBbXG5cdFx0Ly8gRGVmaW5pdGUgYXJ0aWNsZXM6XG5cdFx0XCJkYXNcIiwgXCJkZW1cIiwgXCJkZW5cIiwgXCJkZXJcIiwgXCJkZXNcIiwgXCJkaWVcIixcblx0XHQvLyBJbmRlZmluaXRlIGFydGljbGVzOlxuXHRcdFwiZWluXCIsIFwiZWluZVwiLCBcImVpbmVtXCIsIFwiZWluZW5cIiwgXCJlaW5lclwiLCBcImVpbmVzXCIsXG5cdFx0Ly8gTnVtYmVycyAxLTEwOlxuXHRcdFwiZWluc1wiLCBcInp3ZWlcIiwgXCJkcmVpXCIsIFwidmllclwiLCBcImbDvG5mXCIsIFwic2VjaHNcIiwgXCJzaWViZW5cIiwgXCJhY2h0XCIsIFwibmV1blwiLCBcInplaG5cIixcblx0XHQvLyBEZW1vbnN0cmF0aXZlIHByb25vdW5zOlxuXHRcdFwiZGVuZW5cIiwgXCJkZXJlblwiLCBcImRlcmVyXCIsIFwiZGVzc2VuXCIsIFwiZGllc2VcIiwgXCJkaWVzZW1cIiwgXCJkaWVzZW5cIiwgXCJkaWVzZXJcIiwgXCJkaWVzZXNcIiwgXCJqZW5lXCIsXG5cdFx0XCJqZW5lbVwiLCBcImplbmVuXCIsIFwiamVuZXJcIiwgXCJqZW5lc1wiLFxuXHRdO1xufTtcblxuXG4iLCIvKiogQG1vZHVsZSBjb25maWcvdHJhbnNpdGlvbldvcmRzICovXG5cbi8qKlxuICogUmV0dXJucyBhbiBhcnJheSB3aXRoIHRyYW5zaXRpb24gd29yZHMgdG8gYmUgdXNlZCBieSB0aGUgYXNzZXNzbWVudHMuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFRoZSBhcnJheSBmaWxsZWQgd2l0aCB0cmFuc2l0aW9uIHdvcmRzLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gWyBcImFiZXJcIiwgXCJhYmdlc2VoZW4gdm9uXCIsIFwiYWxsZGlld2VpbFwiLCBcImFsbGVyZGluZ3NcIiwgXCJhbHMgZGFzc1wiLCBcImFsc29cIiwgXCJhbmRlcmVudGVpbHNcIixcblx0XHRcImFuZGVyZXJzZWl0c1wiLCBcImFuZGVybnRlaWxzXCIsIFwiYW5kZXJzIGF1c2dlZHLDvGNrdFwiLCBcImFuZGVycyBhdXNnZWRydWVja3RcIiwgXCJhbmRlcnMgZm9ybXVsaWVydFwiLFxuXHRcdFwiYW5kZXJzIGdlZmFzc3RcIiwgXCJhbmRlcnMgZ2VmcmFndFwiLCBcImFuZGVycyBnZXNhZ3RcIiwgXCJhbmRlcnMgZ2VzcHJvY2hlblwiLCBcImFuZmFlbmdsaWNoXCIsIFwiYW5mw6RuZ2xpY2hcIixcblx0XHRcImFuZmFuZ3NcIiwgXCJhbmdlbm9tbWVuXCIsIFwiYW5zY2hsaWVzc2VuZFwiLCBcImFuc2NobGllw59lbmRcIiwgXCJhdWNoIHdlbm5cIiwgXCJhdWYgZ3J1bmRcIiwgXCJhdWYgamVkZW4gRmFsbFwiLCBcImF1ZmdydW5kXCIsXG5cdFx0XCJhdXNnZW5vbW1lblwiLCBcImF1cyBkaWVzZW0gR3J1bmRcIiwgXCJhdXNzZXJcIiwgXCJhdcOfZXJcIiwgXCJhdXNzZXIgZGFzc1wiLCBcImF1w59lciBkYXNzXCIsIFwiYXVzc2VyIHdlbm5cIiwgXCJhdcOfZXIgd2VublwiLFxuXHRcdFwiYXVzc2VyZGVtXCIsIFwiYXXDn2VyZGVtXCIsIFwiYmVpc3BpZWxzd2Vpc2VcIiwgXCJiZXNzZXIgYXVzZ2VkcsO8Y2t0XCIsIFwiYmVzc2VyIGF1c2dlZHJ1ZWNrdFwiLCBcImJlc3NlciBmb3JtdWxpZXJ0XCIsXG5cdFx0XCJiZXNzZXIgZ2VzYWd0XCIsIFwiYmVzc2VyIGdlc3Byb2NoZW5cIiwgXCJiZXZvclwiLCBcImJlemllaHVuZ3N3ZWlzZVwiLCBcImJsb3NzIGRhc3NcIiwgXCJibG/DnyBkYXNzXCIsXG5cdFx0XCJic3B3LlwiLCBcImJ6dy5cIiwgXCJkLmguXCIsIFwiZGFcIiwgXCJkYWJlaVwiLCBcImRhZHVyY2hcIiwgXCJkYWZ1ZXJcIiwgXCJkYWbDvHJcIiwgXCJkYWdlZ2VuXCIsIFwiZGFoZXJcIiwgXCJkYWhpbmdlZ2VuXCIsXG5cdFx0XCJkYW5hY2hcIiwgXCJkYW5uXCIsIFwiZGFyYXVmXCIsIFwiZGFydW1cIiwgXCJkYXMgaGVpc3N0XCIsIFwiZGFzIGhlacOfdFwiLCBcImRhc3NcIiwgXCJkYXZvclwiLCBcImRhenVcIiwgXCJkZW1lbnRnZWdlblwiLFxuXHRcdFwiZGVtZW50c3ByZWNoZW5kXCIsIFwiZGVtZ2VnZW7DvGJlclwiLCBcImRlbWdlZ2VudWViZXJcIiwgXCJkZW1nZW1hZXNzXCIsIFwiZGVtZ2Vtw6TDn1wiLCBcImRlbXp1Zm9sZ2VcIiwgXCJkZW5uXCIsIFwiZGVubm9jaFwiLFxuXHRcdFwiZGVzIFdlaXRlcmVuXCIsIFwiZGVzaGFsYlwiLCBcImRlc3NlbiB1bmdlYWNodGV0XCIsIFwiZGVzdW5nZWFjaHRldFwiLCBcImRlc3dlZ2VuXCIsIFwiZG9jaFwiLCBcImRvcnRcIiwgXCJkcml0dGVuc1wiLFxuXHRcdFwiZWJlbmZhbGxzXCIsIFwiZWJlbnNvIHdpZVwiLCBcImVoZVwiLCBcImVpbmVyc2VpdHNcIiwgXCJlaW5lc3RlaWxzXCIsIFwiZW50c3ByZWNoZW5kXCIsIFwiZXJzdGVuc1wiLCBcImZhbGxzXCIsIFwiZmVybmVyXCIsXG5cdFx0XCJmb2xnbGljaFwiLCBcImdlbmF1c29cIiwgXCJnZW5hdXNvIHdpZVwiLCBcImhpZXJkdXJjaFwiLCBcImhpZXJ6dVwiLCBcImhpbmdlZ2VuXCIsIFwiaW0gRm9sZ2VuZGVuXCIsIFwiaW0gR2VnZW5zYXR6IGRhenVcIixcblx0XHRcImltIEdydW5kZSBnZW5vbW1lblwiLCBcImltbWVyaGluXCIsIFwiaW5kZW1cIiwgXCJpbmZvbGdlXCIsIFwiaW5mb2xnZWRlc3NlblwiLCBcImluendpc2NoZW5cIiwgXCJqZSBuYWNoZGVtXCIsXG5cdFx0XCJqZWRlbmZhbGxzXCIsIFwiamVkb2NoXCIsIFwia3VyenVtXCIsIFwibS5hLlcuXCIsIFwibWl0IGFuZGVyZW4gV29ydGVuXCIsIFwibmFjaGRlbVwiLCBcIm5lYmVuaGVyXCIsXG5cdFx0XCJuaWNodHNkZXN0b3Ryb3R6XCIsIFwibmljaHRzZGVzdG93ZW5pZ2VyXCIsIFwib2JcIiwgXCJvYmVucmVpblwiLCBcIm9iZ2xlaWNoXCIsIFwib2JzY2hvblwiLCBcIm9id29obFwiLCBcIm9iendhclwiLFxuXHRcdFwic2NobGllc3NsaWNoXCIsIFwic2NobGllw59saWNoXCIsIFwic2VpdFwiLCBcInNlaXRkZW1cIiwgXCJzb2JhbGRcIiwgXCJzb2Rhc3NcIiwgXCJzb2Zlcm5cIiwgXCJzb2xhbmdlXCIsIFwic29taXRcIixcblx0XHRcInNvbmRlcm5cIiwgXCJzb29mdFwiLCBcInNvd2llXCIsIFwic3DDpHRlclwiLCBcInRyb3R6XCIsIFwidHJvdHpkZW1cIiwgXCLDvGJlcmRpZXNcIiwgXCLDvGJlcmlnZW5zXCIsIFwidWViZXJkaWVzXCIsIFwidWViZXJpZ2Vuc1wiLFxuXHRcdFwidW1zbyBtZWhyLCBhbHNcIiwgXCJ1bXNvIHdlbmlnZXIsIGFsc1wiLCBcInVuYmVzY2hhZGV0IGRlc3NlblwiLCBcInVuZCB6d2FyXCIsIFwidW50ZXIgZGVtIFN0cmljaFwiLCBcInZpZWxtZWhyXCIsXG5cdFx0XCJ2b3JhdXNnZXNldHp0XCIsIFwidm9yaGVyXCIsIFwid2FlaHJlbmRcIiwgXCJ3w6RocmVuZFwiLCBcIndlZ2VuXCIsIFwid2VpbFwiLCBcIndlaXRlclwiLCBcIndlaXRlcmhpblwiLCBcIndlbm5cIiwgXCJ3ZW5uZ2xlaWNoXCIsXG5cdFx0XCJ3ZW5uc2Nob25cIiwgXCJ3ZW5uendhclwiLCBcIndlc2hhbGJcIiwgXCJ3aWRyaWdlbmZhbGxzXCIsIFwid2lld29obFwiLCBcIndvaGluZ2VnZW5cIiwgXCJ6dWRlbVwiLCBcInp1ZXJzdFwiLFxuXHRcdFwienVmb2xnZVwiLCBcInp1bGV0enRcIiwgXCJ6dW0gYmVpc3BpZWxcIiwgXCJ6dW1hbFwiLCBcInp1dm9yXCIsIFwiendhclwiLCBcInp3ZWl0ZW5zXCIgXTtcbn07XG4iLCIvKiogQG1vZHVsZSBjb25maWcvdHdvUGFydFRyYW5zaXRpb25Xb3JkcyAqL1xuXG4vKipcbiAqIFJldHVybnMgYW4gYXJyYXkgd2l0aCB0d28tcGFydCB0cmFuc2l0aW9uIHdvcmRzIHRvIGJlIHVzZWQgYnkgdGhlIGFzc2Vzc21lbnRzLlxuICogQHJldHVybnMge0FycmF5fSBUaGUgYXJyYXkgZmlsbGVkIHdpdGggdHdvLXBhcnQgdHJhbnNpdGlvbiB3b3Jkcy5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcblx0cmV0dXJuIFsgWyBcImFuc3RhdHRcIiwgXCJkYXNzXCIgXSwgWyBcImJhbGRcIiwgXCJiYWxkXCIgXSwgWyBcImRhZHVyY2hcIiwgXCJkYXNzXCIgXSwgWyBcImRlc3NlbiB1bmdlYWNodGV0XCIsIFwiZGFzc1wiIF0sXG5cdFx0WyBcImVudHdlZGVyXCIsIFwib2RlclwiIF0sIFsgXCJlaW5lcnNlaXRzXCIsIFwiYW5kZXJlcnNlaXRzXCIgXSwgWyBcImVyc3RcIiwgXCJ3ZW5uXCIgXSwgWyBcImplXCIsIFwiZGVzdG9cIiBdLCBbIFwiamVcIiwgXCJ1bXN0b1wiIF0sXG5cdFx0WyBcIm5pY2h0IG51clwiLCBcInNvbmRlcm4gYXVjaFwiIF0sIFsgXCJvYlwiLCBcIm9kZXJcIiBdLCBbIFwib2huZVwiLCBcImRhc3NcIiBdLCBbIFwic29cIiwgXCJkYXNzXCIgXSwgWyBcInNvd29obFwiLCBcImFscyBhdWNoXCIgXSxcblx0XHRbIFwic293b2hsXCIsIFwid2llIGF1Y2hcIiBdLCBbIFwidW5iZXNjaGFkZXQgZGVzc2VuXCIsIFwiZGFzc1wiIF0sIFsgXCJ3ZWRlclwiLCBcIm5vY2hcIiBdLCBbIFwid2VublwiLCBcImF1Y2hcIiBdLFxuXHRcdFsgXCJ3ZW5uXCIsIFwic2Nob25cIiBdLCBbIFwibmljaHQgd2VpbFwiLCBcInNvbmRlcm5cIiBdICBdO1xufTtcbiIsIi8qKiBAbW9kdWxlIGFuYWx5c2VzL2dldEtleXdvcmREZW5zaXR5ICovXG5cbnZhciBjb3VudFdvcmRzID0gcmVxdWlyZSggXCIuLi9zdHJpbmdQcm9jZXNzaW5nL2NvdW50V29yZHMuanNcIiApO1xudmFyIGNvdW50V29yZE9jY3VycmVuY2VzID0gcmVxdWlyZSggXCIuLi9zdHJpbmdQcm9jZXNzaW5nL2NvdW50V29yZE9jY3VycmVuY2VzLmpzXCIgKTtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBrZXl3b3JkIGRlbnNpdHkgLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBwYXBlciBUaGUgcGFwZXIgY29udGFpbmluZyBrZXl3b3JkIGFuZCB0ZXh0LlxuICAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBrZXl3b3JkIGRlbnNpdHkuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oIHBhcGVyICkge1xuXHR2YXIga2V5d29yZCA9IHBhcGVyLmdldEtleXdvcmQoKTtcblx0dmFyIHRleHQgPSBwYXBlci5nZXRUZXh0KCk7XG5cdHZhciBsb2NhbGUgPSBwYXBlci5nZXRMb2NhbGUoKTtcblx0dmFyIHdvcmRDb3VudCA9IGNvdW50V29yZHMoIHRleHQgKTtcblx0aWYgKCB3b3JkQ291bnQgPT09IDAgKSB7XG5cdFx0cmV0dXJuIDA7XG5cdH1cblx0dmFyIGtleXdvcmRDb3VudCA9IGNvdW50V29yZE9jY3VycmVuY2VzKCB0ZXh0LCBrZXl3b3JkLCBsb2NhbGUgKTtcblx0cmV0dXJuICgga2V5d29yZENvdW50IC8gd29yZENvdW50ICkgKiAxMDA7XG59O1xuIiwiLyoqIEBtb2R1bGUgYW5hbHlzZXMvZ2V0TGlua1N0YXRpc3RpY3MgKi9cblxudmFyIGdldExpbmtzID0gcmVxdWlyZSggXCIuL2dldExpbmtzLmpzXCIgKTtcbnZhciBmaW5kS2V5d29yZEluVXJsID0gcmVxdWlyZSggXCIuLi9zdHJpbmdQcm9jZXNzaW5nL2ZpbmRLZXl3b3JkSW5VcmwuanNcIiApO1xudmFyIGdldExpbmtUeXBlID0gcmVxdWlyZSggXCIuLi9zdHJpbmdQcm9jZXNzaW5nL2dldExpbmtUeXBlLmpzXCIgKTtcbnZhciBjaGVja05vZm9sbG93ID0gcmVxdWlyZSggXCIuLi9zdHJpbmdQcm9jZXNzaW5nL2NoZWNrTm9mb2xsb3cuanNcIiApO1xudmFyIHVybEhlbHBlciA9IHJlcXVpcmUoIFwiLi4vc3RyaW5nUHJvY2Vzc2luZy91cmwuanNcIiApO1xuXG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIG9yIG5vdCBhbiBhbmNob3IgY29udGFpbnMgdGhlIHBhc3NlZCBrZXl3b3JkLlxuICogQHBhcmFtIHtzdHJpbmd9IGtleXdvcmQgVGhlIGtleXdvcmQgdG8gbG9vayBmb3IuXG4gKiBAcGFyYW0ge3N0cmluZ30gYW5jaG9yIFRoZSBhbmNob3IgdG8gY2hlY2sgYWdhaW5zdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBsb2NhbGUgVGhlIGxvY2FsZSB1c2VkIGZvciB0cmFuc2xpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIGtleXdvcmQgd2FzIGZvdW5kLlxuICovXG52YXIga2V5d29yZEluQW5jaG9yID0gZnVuY3Rpb24oIGtleXdvcmQsIGFuY2hvciwgbG9jYWxlICkge1xuXHRpZiAoIGtleXdvcmQgPT09IFwiXCIgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIGZpbmRLZXl3b3JkSW5VcmwoIGFuY2hvciwga2V5d29yZCwgbG9jYWxlICk7XG59O1xuXG4vKipcbiAqIENvdW50cyB0aGUgbGlua3MgZm91bmQgaW4gdGhlIHRleHQuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHBhcGVyIFRoZSBwYXBlciBvYmplY3QgY29udGFpbmluZyB0ZXh0LCBrZXl3b3JkIGFuZCB1cmwuXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBUaGUgb2JqZWN0IGNvbnRhaW5pbmcgYWxsIGxpbmt0eXBlcy5cbiAqIHRvdGFsOiB0aGUgdG90YWwgbnVtYmVyIG9mIGxpbmtzIGZvdW5kLlxuICogdG90YWxOYUtleXdvcmQ6IHRoZSB0b3RhbCBudW1iZXIgb2YgbGlua3MgaWYga2V5d29yZCBpcyBub3QgYXZhaWxhYmxlLlxuICoga2V5d29yZDogT2JqZWN0IGNvbnRhaW5pbmcgYWxsIHRoZSBrZXl3b3JkIHJlbGF0ZWQgY291bnRzIGFuZCBtYXRjaGVzLlxuICoga2V5d29yZC50b3RhbEtleXdvcmQ6IHRoZSB0b3RhbCBudW1iZXIgb2YgbGlua3Mgd2l0aCB0aGUga2V5d29yZC5cbiAqIGtleXdvcmQubWF0Y2hlZEFuY2hvcnM6IEFycmF5IHdpdGggdGhlIGFuY2hvcnMgdGhhdCBjb250YWluIHRoZSBrZXl3b3JkLlxuICogaW50ZXJuYWxUb3RhbDogdGhlIHRvdGFsIG51bWJlciBvZiBsaW5rcyB0aGF0IGFyZSBpbnRlcm5hbC5cbiAqIGludGVybmFsRG9mb2xsb3c6IHRoZSBpbnRlcm5hbCBsaW5rcyB3aXRob3V0IGEgbm9mb2xsb3cgYXR0cmlidXRlLlxuICogaW50ZXJuYWxOb2ZvbGxvdzogdGhlIGludGVybmFsIGxpbmtzIHdpdGggYSBub2ZvbGxvdyBhdHRyaWJ1dGUuXG4gKiBleHRlcm5hbFRvdGFsOiB0aGUgdG90YWwgbnVtYmVyIG9mIGxpbmtzIHRoYXQgYXJlIGV4dGVybmFsLlxuICogZXh0ZXJuYWxEb2ZvbGxvdzogdGhlIGV4dGVybmFsIGxpbmtzIHdpdGhvdXQgYSBub2ZvbGxvdyBhdHRyaWJ1dGUuXG4gKiBleHRlcm5hbE5vZm9sbG93OiB0aGUgaW50ZXJuYWwgbGlua3Mgd2l0aCBhIGRvZm9sbG93IGF0dHJpYnV0ZS5cbiAqIG90aGVyVG90YWw6IGFsbCBsaW5rcyB0aGF0IGFyZSBub3QgSFRUUCBvciBIVFRQUy5cbiAqIG90aGVyRG9mb2xsb3c6IG90aGVyIGxpbmtzIHdpdGhvdXQgYSBub2ZvbGxvdyBhdHRyaWJ1dGUuXG4gKiBvdGhlck5vZm9sbG93OiBvdGhlciBsaW5rcyB3aXRoIGEgbm9mb2xsb3cgYXR0cmlidXRlLlxuICovXG52YXIgY291bnRMaW5rVHlwZXMgPSBmdW5jdGlvbiggcGFwZXIgKSB7XG5cdHZhciBrZXl3b3JkID0gcGFwZXIuZ2V0S2V5d29yZCgpO1xuXHR2YXIgbG9jYWxlID0gcGFwZXIuZ2V0TG9jYWxlKCk7XG5cdHZhciBhbmNob3JzID0gZ2V0TGlua3MoIHBhcGVyLmdldFRleHQoKSApO1xuXHR2YXIgcGVybWFsaW5rID0gcGFwZXIuZ2V0UGVybWFsaW5rKCk7XG5cblx0dmFyIGxpbmtDb3VudCA9IHtcblx0XHR0b3RhbDogYW5jaG9ycy5sZW5ndGgsXG5cdFx0dG90YWxOYUtleXdvcmQ6IDAsXG5cdFx0a2V5d29yZDoge1xuXHRcdFx0dG90YWxLZXl3b3JkOiAwLFxuXHRcdFx0bWF0Y2hlZEFuY2hvcnM6IFtdLFxuXHRcdH0sXG5cdFx0aW50ZXJuYWxUb3RhbDogMCxcblx0XHRpbnRlcm5hbERvZm9sbG93OiAwLFxuXHRcdGludGVybmFsTm9mb2xsb3c6IDAsXG5cdFx0ZXh0ZXJuYWxUb3RhbDogMCxcblx0XHRleHRlcm5hbERvZm9sbG93OiAwLFxuXHRcdGV4dGVybmFsTm9mb2xsb3c6IDAsXG5cdFx0b3RoZXJUb3RhbDogMCxcblx0XHRvdGhlckRvZm9sbG93OiAwLFxuXHRcdG90aGVyTm9mb2xsb3c6IDAsXG5cdH07XG5cblx0Zm9yICggdmFyIGkgPSAwOyBpIDwgYW5jaG9ycy5sZW5ndGg7IGkrKyApIHtcblx0XHR2YXIgY3VycmVudEFuY2hvciA9IGFuY2hvcnNbIGkgXTtcblxuXHRcdHZhciBhbmNob3JMaW5rID0gdXJsSGVscGVyLmdldEZyb21BbmNob3JUYWcoIGN1cnJlbnRBbmNob3IgKTtcblx0XHR2YXIgbGlua1RvU2VsZiA9IHVybEhlbHBlci5hcmVFcXVhbCggYW5jaG9yTGluaywgcGVybWFsaW5rICk7XG5cblx0XHRpZiAoIGtleXdvcmRJbkFuY2hvcigga2V5d29yZCwgY3VycmVudEFuY2hvciwgbG9jYWxlICkgJiYgISBsaW5rVG9TZWxmICkge1xuXHRcdFx0bGlua0NvdW50LmtleXdvcmQudG90YWxLZXl3b3JkKys7XG5cdFx0XHRsaW5rQ291bnQua2V5d29yZC5tYXRjaGVkQW5jaG9ycy5wdXNoKCBjdXJyZW50QW5jaG9yICk7XG5cdFx0fVxuXG5cdFx0dmFyIGxpbmtUeXBlID0gZ2V0TGlua1R5cGUoIGN1cnJlbnRBbmNob3IsIHBlcm1hbGluayApO1xuXHRcdHZhciBsaW5rRm9sbG93ID0gY2hlY2tOb2ZvbGxvdyggY3VycmVudEFuY2hvciApO1xuXG5cdFx0bGlua0NvdW50WyBsaW5rVHlwZSArIFwiVG90YWxcIiBdKys7XG5cdFx0bGlua0NvdW50WyBsaW5rVHlwZSArIGxpbmtGb2xsb3cgXSsrO1xuXHR9XG5cblx0cmV0dXJuIGxpbmtDb3VudDtcbn07XG5cbi8qKlxuICogQ2hlY2tzIGEgdGV4dCBmb3IgYW5jaG9ycyBhbmQgcmV0dXJucyBhbiBvYmplY3Qgd2l0aCBhbGwgbGlua3R5cGVzIGZvdW5kLlxuICpcbiAqIEBwYXJhbSB7UGFwZXJ9IHBhcGVyIFRoZSBwYXBlciBvYmplY3QgY29udGFpbmluZyB0ZXh0LCBrZXl3b3JkIGFuZCB1cmwuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgb2JqZWN0IGNvbnRhaW5pbmcgYWxsIGxpbmt0eXBlcy5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiggcGFwZXIgKSB7XG5cdHJldHVybiBjb3VudExpbmtUeXBlcyggcGFwZXIgKTtcbn07XG4iLCIvKiogQG1vZHVsZSBhbmFseXNlcy9nZXRMaW5rU3RhdGlzdGljcyAqL1xuXG52YXIgZ2V0QW5jaG9ycyA9IHJlcXVpcmUoIFwiLi4vc3RyaW5nUHJvY2Vzc2luZy9nZXRBbmNob3JzRnJvbVRleHQuanNcIiApO1xuXG4vKipcbiAqIENoZWNrcyBhIHRleHQgZm9yIGFuY2hvcnMgYW5kIHJldHVybnMgdGhlIG51bWJlciBmb3VuZC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdGV4dCBUaGUgdGV4dFxuICogQHJldHVybnMge0FycmF5fSBBbiBhcnJheSB3aXRoIHRoZSBhbmNob3JzXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oIHRleHQgKSB7XG5cdHJldHVybiBnZXRBbmNob3JzKCB0ZXh0ICk7XG59O1xuIiwidmFyIGNvdW50V29yZHMgPSByZXF1aXJlKCBcIi4uL3N0cmluZ1Byb2Nlc3NpbmcvY291bnRXb3Jkcy5qc1wiICk7XG52YXIgbWF0Y2hQYXJhZ3JhcGhzID0gcmVxdWlyZSggXCIuLi9zdHJpbmdQcm9jZXNzaW5nL21hdGNoUGFyYWdyYXBocy5qc1wiICk7XG52YXIgZmlsdGVyID0gcmVxdWlyZSggXCJsb2Rhc2gvZmlsdGVyXCIgKTtcblxuLyoqXG4gKiBHZXRzIGFsbCBwYXJhZ3JhcGhzIGFuZCB0aGVpciB3b3JkIGNvdW50cyBmcm9tIHRoZSB0ZXh0LlxuICpcbiAqIEBwYXJhbSB7UGFwZXJ9IHBhcGVyIFRoZSBwYXBlciBvYmplY3QgdG8gZ2V0IHRoZSB0ZXh0IGZyb20uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFRoZSBhcnJheSBjb250YWluaW5nIGFuIG9iamVjdCB3aXRoIHRoZSBwYXJhZ3JhcGggd29yZCBjb3VudCBhbmQgcGFyYWdyYXBoIHRleHQuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oIHBhcGVyICkge1xuXHR2YXIgdGV4dCA9IHBhcGVyLmdldFRleHQoKTtcblx0dmFyIHBhcmFncmFwaHMgPSBtYXRjaFBhcmFncmFwaHMoIHRleHQgKTtcblx0dmFyIHBhcmFncmFwaHNMZW5ndGggPSBbXTtcblx0cGFyYWdyYXBocy5tYXAoIGZ1bmN0aW9uKCBwYXJhZ3JhcGggKSB7XG5cdFx0cGFyYWdyYXBoc0xlbmd0aC5wdXNoKCB7XG5cdFx0XHR3b3JkQ291bnQ6IGNvdW50V29yZHMoIHBhcmFncmFwaCApLFxuXHRcdFx0dGV4dDogcGFyYWdyYXBoLFxuXHRcdH0gKTtcblx0fSApO1xuXG5cdHJldHVybiBmaWx0ZXIoIHBhcmFncmFwaHNMZW5ndGgsIGZ1bmN0aW9uKCBwYXJhZ3JhcGhMZW5ndGggKSB7XG5cdFx0cmV0dXJuICggcGFyYWdyYXBoTGVuZ3RoLndvcmRDb3VudCA+IDAgKTtcblx0fSApO1xufTtcbiIsInZhciBnZXRTZW50ZW5jZXMgPSByZXF1aXJlKCBcIi4uL3N0cmluZ1Byb2Nlc3NpbmcvZ2V0U2VudGVuY2VzLmpzXCIgKTtcbnZhciBhcnJheVRvUmVnZXggPSByZXF1aXJlKCBcIi4uL3N0cmluZ1Byb2Nlc3NpbmcvY3JlYXRlUmVnZXhGcm9tQXJyYXkuanNcIiApO1xudmFyIHN0cmlwU3BhY2VzID0gcmVxdWlyZSggXCIuLi9zdHJpbmdQcm9jZXNzaW5nL3N0cmlwU3BhY2VzLmpzXCIgKTtcbnZhciBzdHJpcEhUTUxUYWdzID0gcmVxdWlyZSggXCIuLi9zdHJpbmdQcm9jZXNzaW5nL3N0cmlwSFRNTFRhZ3MuanNcIiApLnN0cmlwRnVsbFRhZ3M7XG52YXIgbWF0Y2hXb3JkSW5TZW50ZW5jZSA9IHJlcXVpcmUoIFwiLi4vc3RyaW5nUHJvY2Vzc2luZy9tYXRjaFdvcmRJblNlbnRlbmNlLmpzXCIgKTtcbnZhciBub3JtYWxpemVTaW5nbGVRdW90ZXMgPSByZXF1aXJlKCBcIi4uL3N0cmluZ1Byb2Nlc3NpbmcvcXVvdGVzLmpzXCIgKS5ub3JtYWxpemVTaW5nbGU7XG5cbnZhciBub252ZXJiRW5kaW5nRWQgPSByZXF1aXJlKCBcIi4vZW5nbGlzaC9wYXNzaXZldm9pY2UtZW5nbGlzaC9ub24tdmVyYi1lbmRpbmctZWQuanNcIiApKCk7XG52YXIgZGV0ZXJtaW5lcnMgPSByZXF1aXJlKCBcIi4vZW5nbGlzaC9wYXNzaXZldm9pY2UtZW5nbGlzaC9kZXRlcm1pbmVycy5qc1wiICkoKTtcblxudmFyIGF1eGlsaWFyaWVzID0gcmVxdWlyZSggXCIuL2VuZ2xpc2gvcGFzc2l2ZXZvaWNlLWVuZ2xpc2gvYXV4aWxpYXJpZXMuanNcIiApKCk7XG52YXIgaXJyZWd1bGFycyA9IHJlcXVpcmUoIFwiLi9lbmdsaXNoL3Bhc3NpdmV2b2ljZS1lbmdsaXNoL2lycmVndWxhcnMuanNcIiApKCk7XG52YXIgc3RvcHdvcmRzID0gcmVxdWlyZSggXCIuL2VuZ2xpc2gvcGFzc2l2ZXZvaWNlLWVuZ2xpc2gvc3RvcHdvcmRzLmpzXCIgKSgpO1xuXG52YXIgZmlsdGVyID0gcmVxdWlyZSggXCJsb2Rhc2gvZmlsdGVyXCIgKTtcbnZhciBpc1VuZGVmaW5lZCA9IHJlcXVpcmUoIFwibG9kYXNoL2lzVW5kZWZpbmVkXCIgKTtcbnZhciBmb3JFYWNoID0gcmVxdWlyZSggXCJsb2Rhc2gvZm9yRWFjaFwiICk7XG52YXIgaW5jbHVkZXMgPSByZXF1aXJlKCBcImxvZGFzaC9pbmNsdWRlc1wiICk7XG5cbnZhciBhdXhpbGlhcnlSZWdleCA9IGFycmF5VG9SZWdleCggYXV4aWxpYXJpZXMgKTtcbnZhciB2ZXJiRW5kaW5nSW5JbmdSZWdleCA9IC9cXHcraW5nKCR8WyBcXG5cXHJcXHRcXC4sJ1xcKFxcKVxcXCJcXCtcXC07IT86XFwvwrvCq+KAueKAujw+XSkvaWc7XG52YXIgcmVndWxhclZlcmJzUmVnZXggPSAvXFx3K2VkKCR8WyBcXG5cXHJcXHRcXC4sJ1xcKFxcKVxcXCJcXCtcXC07IT86XFwvwrvCq+KAueKAujw+XSkvaWc7XG5cbnZhciBpbmdFeGNsdXNpb25BcnJheSA9IFsgXCJraW5nXCIsIFwiY2xpbmdcIiwgXCJyaW5nXCIsIFwiYmVpbmdcIiBdO1xudmFyIGlycmVndWxhckV4Y2x1c2lvbkFycmF5ID0gWyBcImdldFwiLCBcImdldHNcIiwgXCJnZXR0aW5nXCIsIFwiZ290XCIsIFwiZ290dGVuXCIgXTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBpbmRpY2VzIG9mIGEgc3RyaW5nIGluIGEgc2VudGVuY2UuIElmIGl0IGlzIGZvdW5kIG11bHRpcGxlIHRpbWVzLCBpdCB3aWxsIHJldHVybiBtdWx0aXBsZSBpbmRpY2VzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXJ0IFRoZSBwYXJ0IHRvIGZpbmQgaW4gdGhlIHNlbnRlbmNlLlxuICogQHBhcmFtIHtzdHJpbmd9IHNlbnRlbmNlIFRoZSBzZW50ZW5jZSB0byBjaGVjayBmb3IgcGFydHMuXG4gKiBAcmV0dXJucyB7QXJyYXl9IEFsbCBpbmRpY2VzIGZvdW5kLlxuICovXG5mdW5jdGlvbiBnZXRJbmRpY2VzT2YoIHBhcnQsIHNlbnRlbmNlICkge1xuXHR2YXIgc3RhcnRJbmRleCA9IDA7XG5cdHZhciBzZWFyY2hTdHJpbmdMZW5ndGggPSBwYXJ0Lmxlbmd0aDtcblx0dmFyIGluZGV4LCBpbmRpY2VzID0gW107XG5cdHdoaWxlICggKCBpbmRleCA9IHNlbnRlbmNlLmluZGV4T2YoIHBhcnQsIHN0YXJ0SW5kZXggKSApID4gLTEgKSB7XG5cdFx0aW5kaWNlcy5wdXNoKFxuXHRcdFx0e1xuXHRcdFx0XHRpbmRleDogaW5kZXgsXG5cdFx0XHRcdG1hdGNoOiBwYXJ0LFxuXHRcdFx0fVxuXHRcdCk7XG5cdFx0c3RhcnRJbmRleCA9IGluZGV4ICsgc2VhcmNoU3RyaW5nTGVuZ3RoO1xuXHR9XG5cdHJldHVybiBpbmRpY2VzO1xufVxuXG4vKipcbiAqIE1hdGNoZXMgc3RyaW5nIHdpdGggYW4gYXJyYXksIHJldHVybnMgdGhlIHdvcmQgYW5kIHRoZSBpbmRleCBpdCB3YXMgZm91bmQgb24uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHNlbnRlbmNlIFRoZSBzZW50ZW5jZSB0byBtYXRjaCB0aGUgc3RyaW5ncyBmcm9tIHRoZSBhcnJheSB0by5cbiAqIEBwYXJhbSB7QXJyYXl9IG1hdGNoZXMgVGhlIGFycmF5IHdpdGggc3RyaW5ncyB0byBtYXRjaC5cbiAqIEByZXR1cm5zIHtBcnJheX0gVGhlIGFycmF5IHdpdGggbWF0Y2hlcywgY29udGFpbmluZyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoIGFuZCB0aGUgbWF0Y2hlZCBzdHJpbmcuXG4gKiBSZXR1cm5zIGFuIGVtcHR5IGFycmF5IGlmIG5vbmUgYXJlIGZvdW5kLlxuICovXG52YXIgbWF0Y2hBcnJheSA9IGZ1bmN0aW9uKCBzZW50ZW5jZSwgbWF0Y2hlcyApIHtcblx0dmFyIG1hdGNoZWRQYXJ0cyA9IFtdO1xuXG5cdGZvckVhY2goIG1hdGNoZXMsIGZ1bmN0aW9uKCBwYXJ0ICkge1xuXHRcdHBhcnQgPSBzdHJpcFNwYWNlcyggcGFydCApO1xuXHRcdGlmICggISBtYXRjaFdvcmRJblNlbnRlbmNlKCBwYXJ0LCBzZW50ZW5jZSApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRtYXRjaGVkUGFydHMgPSBtYXRjaGVkUGFydHMuY29uY2F0KCBnZXRJbmRpY2VzT2YoIHBhcnQsIHNlbnRlbmNlICkgKTtcblx0fSApO1xuXG5cdHJldHVybiBtYXRjaGVkUGFydHM7XG59O1xuXG4vKipcbiAqIFNvcnRzIHRoZSBhcnJheSBvbiB0aGUgaW5kZXggcHJvcGVydHkgb2YgZWFjaCBlbnRyeS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBpbmRpY2VzIFRoZSBhcnJheSB3aXRoIGluZGljZXMuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFRoZSBzb3J0ZWQgYXJyYXkgd2l0aCBpbmRpY2VzLlxuICovXG52YXIgc29ydEluZGljZXMgPSBmdW5jdGlvbiggaW5kaWNlcyApIHtcblx0cmV0dXJuIGluZGljZXMuc29ydCggZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0cmV0dXJuICggYS5pbmRleCA+IGIuaW5kZXggKTtcblx0fSApO1xufTtcblxuLyoqXG4gKiBGaWx0ZXJzIGR1cGxpY2F0ZSBlbnRyaWVzIGlmIHRoZSBpbmRpY2VzIG92ZXJsYXAuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gaW5kaWNlcyBUaGUgYXJyYXkgd2l0aCBpbmRpY2VzIHRvIGJlIGZpbHRlcmVkLlxuICogQHJldHVybnMge0FycmF5fSBUaGUgZmlsdGVyZWQgYXJyYXkuXG4gKi9cbnZhciBmaWx0ZXJJbmRpY2VzID0gZnVuY3Rpb24oIGluZGljZXMgKSB7XG5cdGluZGljZXMgPSBzb3J0SW5kaWNlcyggaW5kaWNlcyApO1xuXHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBpbmRpY2VzLmxlbmd0aDsgaSsrICkge1xuXHRcdC8vIElmIHRoZSBuZXh0IGluZGV4IGlzIHdpdGhpbiB0aGUgcmFuZ2Ugb2YgdGhlIGN1cnJlbnQgaW5kZXggYW5kIHRoZSBsZW5ndGggb2YgdGhlIHdvcmQsIHJlbW92ZSBpdFxuXHRcdC8vIFRoaXMgbWFrZXMgc3VyZSB3ZSBkb24ndCBtYXRjaCBjb21iaW5hdGlvbnMgdHdpY2UsIGxpa2UgXCJldmVuIHRob3VnaFwiIGFuZCBcInRob3VnaFwiLlxuXHRcdGlmICggISBpc1VuZGVmaW5lZCggaW5kaWNlc1sgaSArIDEgXSApICYmIGluZGljZXNbIGkgKyAxIF0uaW5kZXggPCBpbmRpY2VzWyBpIF0uaW5kZXggKyBpbmRpY2VzWyBpIF0ubWF0Y2gubGVuZ3RoICkge1xuXHRcdFx0aW5kaWNlcy5wb3AoIGkgKyAxICk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBpbmRpY2VzO1xufTtcblxuLyoqXG4gKiBHZXRzIGFjdGl2ZSB2ZXJicyAoZW5kaW5nIGluIGluZykgdG8gZGV0ZXJtaW5lIHNlbnRlbmNlIGJyZWFrZXJzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzZW50ZW5jZSBUaGUgc2VudGVuY2UgdG8gZ2V0IHRoZSBhY3RpdmUgdmVyYnMgZnJvbS5cbiAqIEByZXR1cm5zIHtBcnJheX0gVGhlIGFycmF5IHdpdGggdmFsaWQgbWF0Y2hlcy5cbiAqL1xudmFyIGdldFZlcmJzRW5kaW5nSW5JbmcgPSBmdW5jdGlvbiggc2VudGVuY2UgKSB7XG5cdC8vIE1hdGNoZXMgdGhlIHNlbnRlbmNlcyB3aXRoIHdvcmRzIGVuZGluZyBpbiBpbmdcblx0dmFyIG1hdGNoZXMgPSBzZW50ZW5jZS5tYXRjaCggdmVyYkVuZGluZ0luSW5nUmVnZXggKSB8fCBbXTtcblxuXHQvLyBGaWx0ZXJzIG91dCB3b3JkcyBlbmRpbmcgaW4gLWluZyB0aGF0IGFyZW4ndCB2ZXJicy5cblx0cmV0dXJuIGZpbHRlciggbWF0Y2hlcywgZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdHJldHVybiAhIGluY2x1ZGVzKCBpbmdFeGNsdXNpb25BcnJheSwgc3RyaXBTcGFjZXMoIG1hdGNoICkgKTtcblx0fSApO1xufTtcblxuLyoqXG4gKiBHZXRzIHRoZSBpbmRleGVzIG9mIHNlbnRlbmNlIGJyZWFrZXJzIChhdXhpbGlhcmllcywgc3RvcHdvcmRzIGFuZCBhY3RpdmUgdmVyYnMpIHRvIGRldGVybWluZSBzdWJzZW50ZW5jZXMuXG4gKiBTdG9wd29yZHMgYXJlIGZpbHRlcmVkIGJlY2F1c2UgdGhleSBjYW4gY29udGFpbiBkdXBsaWNhdGUgbWF0Y2hlcywgbGlrZSBcImV2ZW4gdGhvdWdoXCIgYW5kIFwidGhvdWdoXCIuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHNlbnRlbmNlIFRoZSBzZW50ZW5jZSB0byBjaGVjayBmb3IgaW5kaWNlcyBvZiBhdXhpbGlhcmllcywgc3RvcHdvcmRzIGFuZCBhY3RpdmUgdmVyYnMuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFRoZSBhcnJheSB3aXRoIHZhbGlkIGluZGljZXMgdG8gdXNlIGZvciBkZXRlcm1pbmluZyBzdWJzZW50ZW5jZXMuXG4gKi9cbnZhciBnZXRTZW50ZW5jZUJyZWFrZXJzID0gZnVuY3Rpb24oIHNlbnRlbmNlICkge1xuXHRzZW50ZW5jZSA9IHNlbnRlbmNlLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG5cdHZhciBhdXhpbGlhcnlJbmRpY2VzID0gbWF0Y2hBcnJheSggc2VudGVuY2UsIGF1eGlsaWFyaWVzICk7XG5cblx0dmFyIHN0b3B3b3JkSW5kaWNlcyA9IG1hdGNoQXJyYXkoIHNlbnRlbmNlLCBzdG9wd29yZHMgKTtcblx0c3RvcHdvcmRJbmRpY2VzID0gZmlsdGVySW5kaWNlcyggc3RvcHdvcmRJbmRpY2VzICk7XG5cblx0dmFyIGluZ1ZlcmJzID0gZ2V0VmVyYnNFbmRpbmdJbkluZyggc2VudGVuY2UgKTtcblx0dmFyIGluZ1ZlcmJzSW5kaWNlcyA9IG1hdGNoQXJyYXkoIHNlbnRlbmNlLCBpbmdWZXJicyApO1xuXG5cdC8vIENvbmNhdCBhbGwgaW5kaWNlcyBhcnJheXMgYW5kIHNvcnQgdGhlbS5cblx0dmFyIGluZGljZXMgPSBbXS5jb25jYXQoIGF1eGlsaWFyeUluZGljZXMsIHN0b3B3b3JkSW5kaWNlcywgaW5nVmVyYnNJbmRpY2VzICk7XG5cdHJldHVybiBzb3J0SW5kaWNlcyggaW5kaWNlcyApO1xufTtcblxuLyoqXG4gKiBHZXRzIHRoZSBzdWJzZW50ZW5jZXMgZnJvbSBhIHNlbnRlbmNlIGJ5IGRldGVybWluaW5nIHNlbnRlbmNlIGJyZWFrZXJzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzZW50ZW5jZSBUaGUgc2VudGVuY2UgdG8gc3BsaXQgdXAgaW4gc3Vic2VudGVuY2VzLlxuICogQHJldHVybnMge0FycmF5fSBUaGUgYXJyYXkgd2l0aCBhbGwgc3Vic2VudGVuY2VzIG9mIGEgc2VudGVuY2UgdGhhdCBoYXZlIGFuIGF1eGlsaWFyeS5cbiAqL1xudmFyIGdldFN1YnNlbnRlbmNlcyA9IGZ1bmN0aW9uKCBzZW50ZW5jZSApIHtcblx0dmFyIHN1YlNlbnRlbmNlcyA9IFtdO1xuXG5cdHNlbnRlbmNlID0gbm9ybWFsaXplU2luZ2xlUXVvdGVzKCBzZW50ZW5jZSApO1xuXG5cdC8vIEZpcnN0IGNoZWNrIGlmIHRoZXJlIGlzIGFuIGF1eGlsaWFyeSB3b3JkIGluIHRoZSBzZW50ZW5jZVxuXHRpZiggc2VudGVuY2UubWF0Y2goIGF1eGlsaWFyeVJlZ2V4ICkgIT09IG51bGwgKSB7XG5cdFx0dmFyIGluZGljZXMgPSBnZXRTZW50ZW5jZUJyZWFrZXJzKCBzZW50ZW5jZSApO1xuXG5cdFx0Ly8gR2V0IHRoZSB3b3JkcyBhZnRlciB0aGUgZm91bmQgYXV4aWxpYXJ5XG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgaW5kaWNlcy5sZW5ndGg7IGkrKyApIHtcblx0XHRcdHZhciBlbmRJbmRleCA9IHNlbnRlbmNlLmxlbmd0aDtcblx0XHRcdGlmICggISBpc1VuZGVmaW5lZCggaW5kaWNlc1sgaSArIDEgXSApICkge1xuXHRcdFx0XHRlbmRJbmRleCA9IGluZGljZXNbIGkgKyAxIF0uaW5kZXg7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEN1dCB0aGUgc2VudGVuY2UgZnJvbSB0aGUgY3VycmVudCBpbmRleCB0byB0aGUgZW5kSW5kZXggKHN0YXJ0IG9mIG5leHQgYnJlYWtlciwgb2YgZW5kIG9mIHNlbnRlbmNlKS5cblx0XHRcdHZhciBzdWJTZW50ZW5jZSA9IHN0cmlwU3BhY2VzKCBzZW50ZW5jZS5zdWJzdHIoIGluZGljZXNbIGkgXS5pbmRleCwgZW5kSW5kZXggLSBpbmRpY2VzWyBpIF0uaW5kZXggKSApO1xuXHRcdFx0c3ViU2VudGVuY2VzLnB1c2goIHN1YlNlbnRlbmNlICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gSWYgYSBzdWJzZW50ZW5jZSBkb2Vzbid0IGhhdmUgYW4gYXV4aWxpYXJ5LCB3ZSBkb24ndCBuZWVkIGl0LCBzbyBpdCBjYW4gYmUgZmlsdGVyZWQgb3V0LlxuXHRzdWJTZW50ZW5jZXMgPSBmaWx0ZXIoIHN1YlNlbnRlbmNlcywgZnVuY3Rpb24oIHN1YlNlbnRlbmNlICkge1xuXHRcdHJldHVybiBzdWJTZW50ZW5jZS5tYXRjaCggYXV4aWxpYXJ5UmVnZXggKSAhPT0gbnVsbDtcblx0fSApO1xuXG5cdHJldHVybiBzdWJTZW50ZW5jZXM7XG59O1xuXG4vKipcbiAqIEdldHMgcmVndWxhciBwYXNzaXZlIHZlcmJzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdWJTZW50ZW5jZSBUaGUgc3ViIHNlbnRlbmNlIHRvIGNoZWNrIGZvciBwYXNzaXZlIHZlcmJzLlxuICogQHJldHVybnMge0FycmF5fSBUaGUgYXJyYXkgd2l0aCBhbGwgbWF0Y2hlZCB2ZXJicy5cbiAqL1xudmFyIGdldFJlZ3VsYXJWZXJicyA9IGZ1bmN0aW9uKCBzdWJTZW50ZW5jZSApIHtcblx0Ly8gTWF0Y2hlcyB0aGUgc2VudGVuY2VzIHdpdGggd29yZHMgZW5kaW5nIGluIGVkXG5cdHZhciBtYXRjaGVzID0gc3ViU2VudGVuY2UubWF0Y2goIHJlZ3VsYXJWZXJic1JlZ2V4ICkgfHwgW107XG5cblx0Ly8gRmlsdGVycyBvdXQgd29yZHMgZW5kaW5nIGluIC1lZCB0aGF0IGFyZW4ndCB2ZXJicy5cblx0cmV0dXJuIGZpbHRlciggbWF0Y2hlcywgZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdHJldHVybiAhIGluY2x1ZGVzKCBub252ZXJiRW5kaW5nRWQsIHN0cmlwU3BhY2VzKCBtYXRjaCApICk7XG5cdH0gKTtcbn07XG5cbi8qKlxuICogTG9vcHMgdGhyb3VnaCBhIGxpc3Qgb2Ygd29yZHMgYW5kIGRldGVjdHMgaWYgdGhleSBhcmUgcHJlc2VudCBpbiB0aGUgc2VudGVuY2UuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gd29yZExpc3QgVGhlIGxpc3Qgb2Ygd29yZHMgdG8gZmlsdGVyIHRocm91Z2guXG4gKiBAcGFyYW0ge3N0cmluZ30gc2VudGVuY2UgVGhlIHNlbnRlbmNlIHRvIGNoZWNrIGZvciBtYXRjaGVzLlxuICogQHJldHVybnMge0FycmF5fSBBIGxpc3Qgb2YgZGV0ZWN0ZWQgd29yZHMuXG4gKi9cbnZhciBmaWx0ZXJXb3JkTGlzdEluU2VudGVuY2UgPSBmdW5jdGlvbiggd29yZExpc3QsIHNlbnRlbmNlICkge1xuXHRyZXR1cm4gZmlsdGVyKCB3b3JkTGlzdCwgZnVuY3Rpb24oIHdvcmQgKSB7XG5cdFx0cmV0dXJuIG1hdGNoV29yZEluU2VudGVuY2UoIHdvcmQsIHNlbnRlbmNlICk7XG5cdH0gKTtcbn07XG5cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgdGhlIHNlbnRlbmNlIGNvbnRhaW5zIGFuIGV4Y2x1ZGVkIHZlcmIuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHNlbnRlbmNlIFRoZSBzZW50ZW5jZSB0byBjaGVjayBmb3IgZXhjbHVkZWQgdmVyYnMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIHNlbnRlbmNlIGNvbnRhaW5zIGFuIGV4Y2x1ZGVkIHZlcmIuXG4gKi9cbnZhciBoYXNFeGNsdWRlZElycmVndWxhclZlcmIgPSBmdW5jdGlvbiggc2VudGVuY2UgKSB7XG5cdHJldHVybiBmaWx0ZXJXb3JkTGlzdEluU2VudGVuY2UoIGlycmVndWxhckV4Y2x1c2lvbkFycmF5LCBzZW50ZW5jZSApLmxlbmd0aCAhPT0gMDtcbn07XG5cbi8qKlxuICogR2V0cyBpcnJlZ3VsYXIgcGFzc2l2ZSB2ZXJicy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc2VudGVuY2UgVGhlIHNlbnRlbmNlIHRvIGNoZWNrIGZvciBwYXNzaXZlIHZlcmJzLlxuICogQHJldHVybnMge0FycmF5fSBUaGUgYXJyYXkgd2l0aCBhbGwgbWF0Y2hlZCB2ZXJicy5cbiAqL1xudmFyIGdldElycmVndWxhclZlcmJzID0gZnVuY3Rpb24oIHNlbnRlbmNlICkge1xuXHR2YXIgaXJyZWd1bGFyVmVyYnMgPSBmaWx0ZXJXb3JkTGlzdEluU2VudGVuY2UoIGlycmVndWxhcnMsIHNlbnRlbmNlICk7XG5cblx0cmV0dXJuIGZpbHRlciggaXJyZWd1bGFyVmVyYnMsIGZ1bmN0aW9uKCB2ZXJiICkge1xuXHRcdC8vIElmIHJpZCBpcyB1c2VkIHdpdGggZ2V0LCBnZXRzLCBnZXR0aW5nLCBnb3Qgb3IgZ290dGVuLCByZW1vdmUgaXQuXG5cdFx0aWYgKCB2ZXJiICE9PSBcInJpZFwiICkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuICEgaGFzRXhjbHVkZWRJcnJlZ3VsYXJWZXJiKCBzZW50ZW5jZSApO1xuXHR9ICk7XG59O1xuXG4vKipcbiAqIE1hdGNoZXMgJ2hhdmluZycgd2l0aCBhIHZlcmIgZGlyZWN0bHkgZm9sbG93aW5nIGl0LiBJZiBzbywgaXQgaXMgbm90IHBhc3NpdmUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN1YlNlbnRlbmNlIFRoZSBzdWJzZW50ZW5jZSB0byBjaGVjayBmb3IgdGhlIHdvcmQgJ2hhdmluZycgYW5kIGEgdmVyYlxuICogQHBhcmFtIHtBcnJheX0gdmVyYnMgVGhlIGFycmF5IHdpdGggdmVyYnMgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBpdCBpcyBhbiBleGNlcHRpb24sIGZhbHNlIGlmIGl0IGlzIG5vdC5cbiAqL1xudmFyIGlzSGF2aW5nRXhjZXB0aW9uID0gZnVuY3Rpb24oIHN1YlNlbnRlbmNlLCB2ZXJicyApIHtcblx0Ly8gTWF0Y2ggaGF2aW5nIHdpdGggYSB2ZXJiIGRpcmVjdGx5IGZvbGxvd2luZyBpdC4gSWYgc28gaXQgaXMgYWN0aXZlLlxuXHR2YXIgaW5kZXhPZkhhdmluZyA9IHN1YlNlbnRlbmNlLmluZGV4T2YoIFwiaGF2aW5nXCIgKTtcblxuXHRpZiAoIGluZGV4T2ZIYXZpbmcgPiAtMSApIHtcblx0XHR2YXIgdmVyYkluZGljZXMgPSBtYXRjaEFycmF5KCBzdWJTZW50ZW5jZSwgdmVyYnMgKTtcblxuXHRcdGlmICggISBpc1VuZGVmaW5lZCggdmVyYkluZGljZXNbIDAgXSApICYmICEgaXNVbmRlZmluZWQoIHZlcmJJbmRpY2VzWyAwIF0uaW5kZXggKSApIHtcblx0XHRcdC8vIDcgaXMgdGhlIG51bWJlciBvZiBjaGFyYWN0ZXJzIG9mIHRoZSB3b3JkICdoYXZpbmcnIGluY2x1ZGluZyBzcGFjZS5cblx0XHRcdHJldHVybiB2ZXJiSW5kaWNlc1sgMCBdLmluZGV4ICA8PSBzdWJTZW50ZW5jZS5pbmRleE9mKCBcImhhdmluZ1wiICkgKyA3O1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZmFsc2U7XG59O1xuXG4vKipcbiAqIE1hdGNoICdsZWZ0Jy4gSWYgbGVmdCBpcyBwcmVjZWVkZWQgYnkgYGFgIG9yIGB0aGVgLCBpdCBpc24ndCBhIHZlcmIuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN1YlNlbnRlbmNlIFRoZSBzdWJzZW50ZW5jZSB0byBjaGVjayBmb3IgdGhlIHdvcmQgJ2xlZnQnXG4gKiBAcGFyYW0ge0FycmF5fSB2ZXJicyBUaGUgYXJyYXkgd2l0aCB2ZXJicyB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGl0IGlzIGFuIGV4Y2VwdGlvbiwgZmFsc2UgaWYgaXQgaXMgbm90LlxuICovXG52YXIgaXNMZWZ0RXhjZXB0aW9uID0gZnVuY3Rpb24oIHN1YlNlbnRlbmNlLCB2ZXJicyApIHtcblx0Ly8gTWF0Y2hlcyBsZWZ0IHdpdGggdGhlIG9yIGEgcHJlY2VlZGluZy5cblx0dmFyIG1hdGNoTGVmdCA9IHN1YlNlbnRlbmNlLm1hdGNoKCAvKHRoZXxhKVxcc2xlZnQvaWcgKSB8fCBbXTtcblx0cmV0dXJuIG1hdGNoTGVmdC5sZW5ndGggPiAwICYmIHZlcmJzWyAwIF0ubWF0Y2ggPT09IFwibGVmdFwiO1xufTtcblxuLyoqXG4gKiBJZiB0aGUgd29yZCAnZml0JyBpcyBwcmVjZWVkZWQgYnkgYSBkZXRlcm1pbmVyLCBpdCBzaG91bGRuJ3QgYmUgbWFya2VkIGFzIGFjdGl2ZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3ViU2VudGVuY2UgVGhlIHN1YnNlbnRlbmNlIHRvIGNoZWNrIGZvciB0aGUgd29yZCAnZml0J1xuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgaXQgaXMgYW4gZXhjZXB0aW9uLCBmYWxzZSBpZiBpdCBpcyBub3QuXG4gKi9cbnZhciBpc0ZpdEV4Y2VwdGlvbiA9IGZ1bmN0aW9uKCBzdWJTZW50ZW5jZSApIHtcblx0dmFyIGluZGV4T2ZGaXQgPSBzdWJTZW50ZW5jZS5pbmRleE9mKCBcImZpdFwiICk7XG5cdGlmICggaW5kZXhPZkZpdCA+IC0xICkge1xuXHRcdHZhciBzdWJTdHJpbmcgPSBzdWJTZW50ZW5jZS5zdWJzdHIoIDAsIGluZGV4T2ZGaXQgKTtcblx0XHR2YXIgZGV0ZXJtaW5lckluZGljZXMgPSBmaWx0ZXJXb3JkTGlzdEluU2VudGVuY2UoIGRldGVybWluZXJzLCBzdWJTdHJpbmcgKTtcblx0XHRyZXR1cm4gZGV0ZXJtaW5lckluZGljZXMubGVuZ3RoID4gMTtcblx0fVxuXHRyZXR1cm4gZmFsc2U7XG59O1xuXG4vKipcbiAqIEdldHMgdGhlIGV4Y2VwdGlvbnMuIFNvbWUgY29tYmluYXRpb25zIHNob3VsZG4ndCBiZSBtYXJrZWQgYXMgcGFzc2l2ZSwgc28gd2UgbmVlZCB0byBmaWx0ZXIgdGhlbSBvdXQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN1YlNlbnRlbmNlIFRoZSBzdWJzZW50ZW5jZSB0byBjaGVjayBmb3IgZXhjZXB0aW9ucy5cbiAqIEBwYXJhbSB7YXJyYXl9IHZlcmJzIFRoZSBhcnJheSBvZiB2ZXJicywgdXNlZCB0byBkZXRlcm1pbmUgZXhjZXB0aW9ucy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBXZXRoZXIgdGhlcmUgaXMgYW4gZXhjZXB0aW9uIG9yIG5vdC5cbiAqL1xudmFyIGdldEV4Y2VwdGlvbnMgPSBmdW5jdGlvbiggc3ViU2VudGVuY2UsIHZlcmJzICkge1xuXHRpZiAoIGlzSGF2aW5nRXhjZXB0aW9uKCBzdWJTZW50ZW5jZSwgdmVyYnMgKSApIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGlmICggaXNMZWZ0RXhjZXB0aW9uKCBzdWJTZW50ZW5jZSwgdmVyYnMgKSApIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGlmICggaXNGaXRFeGNlcHRpb24oIHN1YlNlbnRlbmNlICkgKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRyZXR1cm4gZmFsc2U7XG59O1xuXG4vKipcbiAqIENoZWNrcyB0aGUgc3Vic2VudGVuY2UgZm9yIGFueSBwYXNzaXZlIHZlcmIuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN1YlNlbnRlbmNlIFRoZSBzdWJzZW50ZW5jZSB0byBjaGVjayBmb3IgcGFzc2l2ZXMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBwYXNzaXZlIGlzIGZvdW5kLCBmYWxzZSBpZiBubyBwYXNzaXZlIGlzIGZvdW5kLlxuICovXG52YXIgZGV0ZXJtaW5lUGFzc2l2ZXMgPSBmdW5jdGlvbiggc3ViU2VudGVuY2UgKSB7XG5cdHZhciByZWd1bGFyVmVyYnMgPSBnZXRSZWd1bGFyVmVyYnMoIHN1YlNlbnRlbmNlICk7XG5cdHZhciBpcnJlZ3VsYXJWZXJicyA9IGdldElycmVndWxhclZlcmJzKCBzdWJTZW50ZW5jZSApO1xuXHR2YXIgdmVyYnMgPSByZWd1bGFyVmVyYnMuY29uY2F0KCBpcnJlZ3VsYXJWZXJicyApO1xuXG5cdC8vIENoZWNrcyBmb3IgZXhjZXB0aW9ucyBpbiB0aGUgZm91bmQgdmVyYnMuXG5cdHZhciBleGNlcHRpb25zID0gZ2V0RXhjZXB0aW9ucyggc3ViU2VudGVuY2UsIHZlcmJzICk7XG5cblx0Ly8gSWYgdGhlcmUgaXMgYW55IGV4Y2VwdGlvbiwgdGhpcyBzdWJzZW50ZW5jZSBjYW5ub3QgYmUgcGFzc2l2ZS5cblx0cmV0dXJuIHZlcmJzLmxlbmd0aCA+IDAgJiYgZXhjZXB0aW9ucyA9PT0gZmFsc2U7XG59O1xuXG4vKipcbiAqIERldGVybWluZXMgdGhlIG51bWJlciBvZiBwYXNzaXZlIHNlbnRlbmNlcyBpbiB0aGUgdGV4dC5cbiAqXG4gKiBAcGFyYW0ge1BhcGVyfSBwYXBlciBUaGUgcGFwZXIgb2JqZWN0IHRvIGdldCB0aGUgdGV4dCBmcm9tLlxuICogQHJldHVybnMge29iamVjdH0gVGhlIG51bWJlciBvZiBwYXNzaXZlcyBmb3VuZCBpbiB0aGUgdGV4dCBhbmQgdGhlIHBhc3NpdmUgc2VudGVuY2VzLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCBwYXBlciApIHtcblx0dmFyIHRleHQgPSBwYXBlci5nZXRUZXh0KCk7XG5cdHZhciBzZW50ZW5jZXMgPSBnZXRTZW50ZW5jZXMoIHRleHQgKTtcblx0dmFyIHBhc3NpdmVTZW50ZW5jZXMgPSBbXTtcblxuXHQvLyBHZXQgc3Vic2VudGVuY2VzIGZvciBlYWNoIHNlbnRlbmNlLlxuXHRmb3JFYWNoKCBzZW50ZW5jZXMsIGZ1bmN0aW9uKCBzZW50ZW5jZSApIHtcblx0XHR2YXIgc3RyaXBwZWRTZW50ZW5jZSA9IHN0cmlwSFRNTFRhZ3MoIHNlbnRlbmNlICk7XG5cblx0XHR2YXIgc3ViU2VudGVuY2VzID0gZ2V0U3Vic2VudGVuY2VzKCBzdHJpcHBlZFNlbnRlbmNlICk7XG5cblx0XHR2YXIgcGFzc2l2ZSA9IGZhbHNlO1xuXHRcdGZvckVhY2goIHN1YlNlbnRlbmNlcywgZnVuY3Rpb24oIHN1YlNlbnRlbmNlICkge1xuXHRcdFx0cGFzc2l2ZSA9IHBhc3NpdmUgfHwgZGV0ZXJtaW5lUGFzc2l2ZXMoIHN1YlNlbnRlbmNlICk7XG5cdFx0fSApO1xuXG5cdFx0aWYgKCBwYXNzaXZlID09PSB0cnVlICkge1xuXHRcdFx0cGFzc2l2ZVNlbnRlbmNlcy5wdXNoKCBzZW50ZW5jZSApO1xuXHRcdH1cblx0fSApO1xuXG5cdHJldHVybiB7XG5cdFx0dG90YWw6IHNlbnRlbmNlcy5sZW5ndGgsXG5cdFx0cGFzc2l2ZXM6IHBhc3NpdmVTZW50ZW5jZXMsXG5cdH07XG59O1xuIiwidmFyIGdldFNlbnRlbmNlcyA9IHJlcXVpcmUoIFwiLi4vc3RyaW5nUHJvY2Vzc2luZy9nZXRTZW50ZW5jZXMuanNcIiApO1xudmFyIGdldFdvcmRzID0gcmVxdWlyZSggXCIuLi9zdHJpbmdQcm9jZXNzaW5nL2dldFdvcmRzLmpzXCIgKTtcbnZhciBzdHJpcFNwYWNlcyA9IHJlcXVpcmUoIFwiLi4vc3RyaW5nUHJvY2Vzc2luZy9zdHJpcFNwYWNlcy5qc1wiICk7XG52YXIgc3RyaXBUYWdzID0gcmVxdWlyZSggXCIuLi9zdHJpbmdQcm9jZXNzaW5nL3N0cmlwSFRNTFRhZ3MuanNcIiApLnN0cmlwRnVsbFRhZ3M7XG52YXIgZ2V0Rmlyc3RXb3JkRXhjZXB0aW9ucyA9IHJlcXVpcmUoIFwiLi4vaGVscGVycy9nZXRGaXJzdFdvcmRFeGNlcHRpb25zLmpzXCIgKTtcblxudmFyIGlzRW1wdHkgPSByZXF1aXJlKCBcImxvZGFzaC9pc0VtcHR5XCIgKTtcbnZhciBmb3JFYWNoID0gcmVxdWlyZSggXCJsb2Rhc2gvZm9yRWFjaFwiICk7XG5cbi8qKlxuICogQ29tcGFyZXMgdGhlIGZpcnN0IHdvcmQgb2YgZWFjaCBzZW50ZW5jZSB3aXRoIHRoZSBmaXJzdCB3b3JkIG9mIHRoZSBmb2xsb3dpbmcgc2VudGVuY2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGN1cnJlbnRTZW50ZW5jZUJlZ2lubmluZyBUaGUgZmlyc3Qgd29yZCBvZiB0aGUgY3VycmVudCBzZW50ZW5jZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBuZXh0U2VudGVuY2VCZWdpbm5pbmcgVGhlIGZpcnN0IHdvcmQgb2YgdGhlIG5leHQgc2VudGVuY2UuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIHNlbnRlbmNlIGJlZ2lubmluZ3MgbWF0Y2guXG4gKi9cbnZhciBzdGFydHNXaXRoU2FtZVdvcmQgPSBmdW5jdGlvbiggY3VycmVudFNlbnRlbmNlQmVnaW5uaW5nLCBuZXh0U2VudGVuY2VCZWdpbm5pbmcgKSB7XG5cdGlmICggISBpc0VtcHR5KCBjdXJyZW50U2VudGVuY2VCZWdpbm5pbmcgKSAmJiBjdXJyZW50U2VudGVuY2VCZWdpbm5pbmcgPT09IG5leHRTZW50ZW5jZUJlZ2lubmluZyApIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdHJldHVybiBmYWxzZTtcbn07XG5cbi8qKlxuICogQ291bnRzIHRoZSBudW1iZXIgb2Ygc2ltaWxhciBzZW50ZW5jZSBiZWdpbm5pbmdzLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IHNlbnRlbmNlQmVnaW5uaW5ncyBUaGUgYXJyYXkgY29udGFpbmluZyB0aGUgZmlyc3Qgd29yZCBvZiBlYWNoIHNlbnRlbmNlLlxuICogQHBhcmFtIHtBcnJheX0gc2VudGVuY2VzIFRoZSBhcnJheSBjb250YWluaW5nIGFsbCBzZW50ZW5jZXMuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFRoZSBhcnJheSBjb250YWluaW5nIHRoZSBvYmplY3RzIGNvbnRhaW5pbmcgdGhlIGZpcnN0IHdvcmRzIGFuZCB0aGUgY29ycmVzcG9uZGluZyBjb3VudHMuXG4gKi9cbnZhciBjb21wYXJlRmlyc3RXb3JkcyA9IGZ1bmN0aW9uKCBzZW50ZW5jZUJlZ2lubmluZ3MsIHNlbnRlbmNlcyApIHtcblx0dmFyIGNvbnNlY3V0aXZlRmlyc3RXb3JkcyA9IFtdO1xuXHR2YXIgZm91bmRTZW50ZW5jZXMgPSBbXTtcblx0dmFyIHNhbWVCZWdpbm5pbmdzID0gMTtcblxuXHRmb3JFYWNoKCBzZW50ZW5jZUJlZ2lubmluZ3MsIGZ1bmN0aW9uKCBiZWdpbm5pbmcsIGkgKSB7XG5cdFx0dmFyIGN1cnJlbnRTZW50ZW5jZUJlZ2lubmluZyA9IGJlZ2lubmluZztcblx0XHR2YXIgbmV4dFNlbnRlbmNlQmVnaW5uaW5nID0gc2VudGVuY2VCZWdpbm5pbmdzWyBpICsgMSBdO1xuXHRcdGZvdW5kU2VudGVuY2VzLnB1c2goIHNlbnRlbmNlc1sgaSBdICk7XG5cblx0XHRpZiAoIHN0YXJ0c1dpdGhTYW1lV29yZCggY3VycmVudFNlbnRlbmNlQmVnaW5uaW5nLCBuZXh0U2VudGVuY2VCZWdpbm5pbmcgKSApIHtcblx0XHRcdHNhbWVCZWdpbm5pbmdzKys7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnNlY3V0aXZlRmlyc3RXb3Jkcy5wdXNoKCB7IHdvcmQ6IGN1cnJlbnRTZW50ZW5jZUJlZ2lubmluZywgY291bnQ6IHNhbWVCZWdpbm5pbmdzLCBzZW50ZW5jZXM6IGZvdW5kU2VudGVuY2VzIH0gKTtcblx0XHRcdHNhbWVCZWdpbm5pbmdzID0gMTtcblx0XHRcdGZvdW5kU2VudGVuY2VzID0gW107XG5cdFx0fVxuXHR9ICk7XG5cblx0cmV0dXJuIGNvbnNlY3V0aXZlRmlyc3RXb3Jkcztcbn07XG5cbi8qKlxuICogU2FuaXRpemVzIHRoZSBzZW50ZW5jZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc2VudGVuY2UgVGhlIHNlbnRlbmNlIHRvIHNhbml0aXplLlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIHNhbml0aXplZCBzZW50ZW5jZS5cbiAqL1xuZnVuY3Rpb24gc2FuaXRpemVTZW50ZW5jZSggc2VudGVuY2UgKSB7XG5cdHNlbnRlbmNlID0gc3RyaXBUYWdzKCBzZW50ZW5jZSApO1xuXHRzZW50ZW5jZSA9IHNlbnRlbmNlLnJlcGxhY2UoIC9eW15BLVphLXowLTldLywgXCJcIiApO1xuXG5cdHJldHVybiBzZW50ZW5jZTtcbn1cblxuLyoqXG4gKiBSZXRyaWV2ZXMgdGhlIGZpcnN0IHdvcmQgZnJvbSB0aGUgc2VudGVuY2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHNlbnRlbmNlIFRoZSBzZW50ZW5jZSB0byByZXRyaWV2ZSB0aGUgZmlyc3Qgd29yZCBmcm9tLlxuICogQHBhcmFtIHtBcnJheX0gZmlyc3RXb3JkRXhjZXB0aW9ucyBFeGNlcHRpb25zIHRvIG1hdGNoIGFnYWluc3QuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZmlyc3Qgd29yZCBvZiB0aGUgc2VudGVuY2UuXG4gKi9cbmZ1bmN0aW9uIGdldFNlbnRlbmNlQmVnaW5uaW5nKCBzZW50ZW5jZSwgZmlyc3RXb3JkRXhjZXB0aW9ucyApIHtcblx0c2VudGVuY2UgPSBzYW5pdGl6ZVNlbnRlbmNlKCBzZW50ZW5jZSApO1xuXG5cdHZhciB3b3JkcyA9IGdldFdvcmRzKCBzdHJpcFNwYWNlcyggc2VudGVuY2UgKSApO1xuXG5cdHZhciBmaXJzdFdvcmQgPSB3b3Jkc1sgMCBdLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG5cblx0aWYgKCBmaXJzdFdvcmRFeGNlcHRpb25zLmluZGV4T2YoIGZpcnN0V29yZCApID4gLTEgJiYgd29yZHMubGVuZ3RoID4gMSApIHtcblx0XHRmaXJzdFdvcmQgKz0gXCIgXCIgKyB3b3Jkc1sgMSBdO1xuXHR9XG5cblx0cmV0dXJuIGZpcnN0V29yZDtcbn1cbi8qKlxuICogR2V0cyB0aGUgZmlyc3Qgd29yZCBvZiBlYWNoIHNlbnRlbmNlIGZyb20gdGhlIHRleHQsIGFuZCByZXR1cm5zIGFuIG9iamVjdCBjb250YWluaW5nIHRoZSBmaXJzdCB3b3JkIG9mIGVhY2ggc2VudGVuY2UgYW5kIHRoZSBjb3JyZXNwb25kaW5nIGNvdW50cy5cbiAqXG4gKiBAcGFyYW0ge1BhcGVyfSBwYXBlciBUaGUgUGFwZXIgb2JqZWN0IHRvIGdldCB0aGUgdGV4dCBmcm9tLlxuICogQHJldHVybnMge09iamVjdH0gVGhlIG9iamVjdCBjb250YWluaW5nIHRoZSBmaXJzdCB3b3JkIG9mIGVhY2ggc2VudGVuY2UgYW5kIHRoZSBjb3JyZXNwb25kaW5nIGNvdW50cy5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiggcGFwZXIgKSB7XG5cdHZhciBzZW50ZW5jZXMgPSBnZXRTZW50ZW5jZXMoIHBhcGVyLmdldFRleHQoKSApO1xuXHR2YXIgZmlyc3RXb3JkRXhjZXB0aW9ucyA9IGdldEZpcnN0V29yZEV4Y2VwdGlvbnMoIHBhcGVyLmdldExvY2FsZSgpICkoKTtcblxuXHR2YXIgc2VudGVuY2VCZWdpbm5pbmdzID0gc2VudGVuY2VzLm1hcCggZnVuY3Rpb24oIHNlbnRlbmNlICkge1xuXHRcdHJldHVybiBnZXRTZW50ZW5jZUJlZ2lubmluZyggc2VudGVuY2UsIGZpcnN0V29yZEV4Y2VwdGlvbnMgKTtcblx0fSApO1xuXG5cdHJldHVybiBjb21wYXJlRmlyc3RXb3Jkcyggc2VudGVuY2VCZWdpbm5pbmdzLCBzZW50ZW5jZXMgKTtcbn07XG5cblxuIiwidmFyIGdldFN1YmhlYWRpbmdDb250ZW50cyA9IHJlcXVpcmUoIFwiLi4vc3RyaW5nUHJvY2Vzc2luZy9nZXRTdWJoZWFkaW5ncy5qc1wiICkuZ2V0U3ViaGVhZGluZ0NvbnRlbnRzO1xudmFyIHN0cmlwVGFncyA9IHJlcXVpcmUoIFwiLi4vc3RyaW5nUHJvY2Vzc2luZy9zdHJpcEhUTUxUYWdzLmpzXCIgKS5zdHJpcEZ1bGxUYWdzO1xudmFyIGZvckVhY2ggPSByZXF1aXJlKCBcImxvZGFzaC9mb3JFYWNoXCIgKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBzdWJoZWFkaW5ncyBmcm9tIHRoZSB0ZXh0IGFuZCByZXR1cm5zIHRoZSBsZW5ndGggb2YgdGhlc2Ugc3ViaGVhZGluZyBpbiBhbiBhcnJheS5cbiAqIEBwYXJhbSB7UGFwZXJ9IHBhcGVyIFRoZSBQYXBlciBvYmplY3QgdG8gZ2V0IHRoZSB0ZXh0IGZyb20uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFRoZSBhcnJheSB3aXRoIHRoZSBsZW5ndGggb2YgZWFjaCBzdWJoZWFkaW5nLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCBwYXBlciApIHtcblx0dmFyIHRleHQgPSBwYXBlci5nZXRUZXh0KCk7XG5cdHZhciBtYXRjaGVzID0gZ2V0U3ViaGVhZGluZ0NvbnRlbnRzKCB0ZXh0ICk7XG5cblx0dmFyIHN1YkhlYWRpbmdzID0gW107XG5cdGZvckVhY2goIG1hdGNoZXMsIGZ1bmN0aW9uKCBzdWJIZWFkaW5nICkge1xuXHRcdHN1YkhlYWRpbmcgPSBzdHJpcFRhZ3MoIHN1YkhlYWRpbmcgKS5sZW5ndGg7XG5cdFx0aWYgKCBzdWJIZWFkaW5nID4gMCApIHtcblx0XHRcdHN1YkhlYWRpbmdzLnB1c2goIHN1YkhlYWRpbmcgKTtcblx0XHR9XG5cdH0gKTtcblxuXHRyZXR1cm4gc3ViSGVhZGluZ3M7XG59O1xuIiwidmFyIGdldFN1YmhlYWRpbmdzQ29udGVudHMgPSByZXF1aXJlKCBcIi4uL3N0cmluZ1Byb2Nlc3NpbmcvZ2V0U3ViaGVhZGluZ3MuanNcIiApLmdldFN1YmhlYWRpbmdDb250ZW50cztcblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlcmUgaXMgYSBzdWJoZWFkaW5nIHByZXNlbnQgaW4gdGhlIHRleHRcbiAqIEBwYXJhbSB7UGFwZXJ9IHBhcGVyIFRoZSBQYXBlciBvYmplY3QgdG8gZ2V0IHRoZSB0ZXh0IGZyb20uXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBOdW1iZXIgb2YgaGVhZGluZ3MgZm91bmQuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oIHBhcGVyICkge1xuXHR2YXIgdGV4dCA9IHBhcGVyLmdldFRleHQoKTtcblx0dmFyIGhlYWRpbmdzID0gZ2V0U3ViaGVhZGluZ3NDb250ZW50cyggdGV4dCApIHx8IFtdO1xuXHRyZXR1cm4gaGVhZGluZ3MubGVuZ3RoO1xufTtcbiIsInZhciBnZXRTdWJoZWFkaW5nVGV4dHMgPSByZXF1aXJlKCBcIi4uL3N0cmluZ1Byb2Nlc3NpbmcvZ2V0U3ViaGVhZGluZ1RleHRzLmpzXCIgKTtcbnZhciBjb3VudFdvcmRzID0gcmVxdWlyZSggXCIuLi9zdHJpbmdQcm9jZXNzaW5nL2NvdW50V29yZHMuanNcIiApO1xudmFyIGZvckVhY2ggPSByZXF1aXJlKCBcImxvZGFzaC9mb3JFYWNoXCIgKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBzdWJoZWFkaW5ncyBmcm9tIHRoZSB0ZXh0IGFuZCByZXR1cm5zIHRoZSBsZW5ndGggb2YgdGhlc2Ugc3ViaGVhZGluZyBpbiBhbiBhcnJheS5cbiAqIEBwYXJhbSB7UGFwZXJ9IHBhcGVyIFRoZSBQYXBlciBvYmplY3QgdG8gZ2V0IHRoZSB0ZXh0IGZyb20uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFRoZSBhcnJheSB3aXRoIHRoZSBsZW5ndGggb2YgZWFjaCBzdWJoZWFkaW5nLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCBwYXBlciApIHtcblx0dmFyIHRleHQgPSBwYXBlci5nZXRUZXh0KCk7XG5cblx0dmFyIG1hdGNoZXMgPSBnZXRTdWJoZWFkaW5nVGV4dHMoIHRleHQgKTtcblxuXHR2YXIgc3ViSGVhZGluZ1RleHRzID0gW107XG5cdGZvckVhY2goIG1hdGNoZXMsIGZ1bmN0aW9uKCBzdWJIZWFkaW5nICkge1xuXHRcdHN1YkhlYWRpbmdUZXh0cy5wdXNoKCB7XG5cdFx0XHR0ZXh0OiBzdWJIZWFkaW5nLFxuXHRcdFx0d29yZENvdW50OiBjb3VudFdvcmRzKCBzdWJIZWFkaW5nICksXG5cdFx0fSApO1xuXHR9ICk7XG5cdHJldHVybiBzdWJIZWFkaW5nVGV4dHM7XG59O1xuXG4iLCJ2YXIgZ2V0V29yZHMgPSByZXF1aXJlKCBcIi4uL3N0cmluZ1Byb2Nlc3NpbmcvZ2V0V29yZHMuanNcIiApO1xudmFyIGNvdW50U3lsbGFibGVzID0gcmVxdWlyZSggXCIuLi9zdHJpbmdQcm9jZXNzaW5nL3N5bGxhYmxlcy9jb3VudC5qc1wiICk7XG52YXIgZ2V0U2VudGVuY2VzID0gcmVxdWlyZSggXCIuLi9zdHJpbmdQcm9jZXNzaW5nL2dldFNlbnRlbmNlcy5qc1wiICk7XG5cbnZhciBtYXAgPSByZXF1aXJlKCBcImxvZGFzaC9tYXBcIiApO1xudmFyIGZvckVhY2ggPSByZXF1aXJlKCBcImxvZGFzaC9mb3JFYWNoXCIgKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBjb21wbGV4aXR5IHBlciB3b3JkLCBhbG9uZyB3aXRoIHRoZSBpbmRleCBmb3IgdGhlIHNlbnRlbmNlLlxuICogQHBhcmFtIHtzdHJpbmd9IHNlbnRlbmNlIFRoZSBzZW50ZW5jZSB0byBnZXQgd29yZENvbXBsZXhpdHkgZnJvbS5cbiAqIEByZXR1cm5zIHtBcnJheX0gQSBsaXN0IHdpdGggd29yZHMsIHRoZSBpbmRleCBhbmQgdGhlIGNvbXBsZXhpdHkgcGVyIHdvcmQuXG4gKi9cbnZhciBnZXRXb3JkQ29tcGxleGl0eUZvclNlbnRlbmNlID0gZnVuY3Rpb24oIHNlbnRlbmNlICkge1xuXHR2YXIgd29yZHMgPSBnZXRXb3Jkcyggc2VudGVuY2UgKTtcblx0dmFyIHJlc3VsdHMgPSBbXTtcblxuXHRmb3JFYWNoKCB3b3JkcywgZnVuY3Rpb24oIHdvcmQsIGkgKSB7XG5cdFx0cmVzdWx0cy5wdXNoKCB7XG5cdFx0XHR3b3JkOiB3b3JkLFxuXHRcdFx0d29yZEluZGV4OiBpLFxuXHRcdFx0Y29tcGxleGl0eTogY291bnRTeWxsYWJsZXMoIHdvcmQgKSxcblx0XHR9ICk7XG5cdH0gKTtcblxuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgY29tcGxleGl0eSBvZiB3b3JkcyBpbiBhIHRleHQsIHJldHVybnMgZWFjaCB3b3JkcyB3aXRoIHRoZWlyIGNvbXBsZXhpdHkuXG4gKiBAcGFyYW0ge1BhcGVyfSBwYXBlciBUaGUgUGFwZXIgb2JqZWN0IHRvIGdldCB0aGUgdGV4dCBmcm9tLlxuICogQHJldHVybnMge09iamVjdH0gVGhlIHdvcmRzIGZvdW5kIGluIHRoZSB0ZXh0IHdpdGggdGhlIG51bWJlciBvZiBzeWxsYWJsZXMuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oIHBhcGVyICkge1xuXHR2YXIgc2VudGVuY2VzID0gZ2V0U2VudGVuY2VzKCBwYXBlci5nZXRUZXh0KCkgKTtcblxuXHRyZXR1cm4gbWFwKCBzZW50ZW5jZXMsIGZ1bmN0aW9uKCBzZW50ZW5jZSApIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VudGVuY2U6IHNlbnRlbmNlLFxuXHRcdFx0d29yZHM6IGdldFdvcmRDb21wbGV4aXR5Rm9yU2VudGVuY2UoIHNlbnRlbmNlICksXG5cdFx0fTtcblx0fSApO1xufTtcblxuIiwiLyoqIEBtb2R1bGUgcmVzZWFyY2hlcy9pbWFnZUFsdFRhZ3MgKi9cblxudmFyIGltYWdlSW5UZXh0ID0gcmVxdWlyZSggXCIuLi9zdHJpbmdQcm9jZXNzaW5nL2ltYWdlSW5UZXh0XCIgKTtcbnZhciBpbWFnZUFsdHRhZyA9IHJlcXVpcmUoIFwiLi4vc3RyaW5nUHJvY2Vzc2luZy9nZXRBbHR0YWdDb250ZW50XCIgKTtcbnZhciB3b3JkTWF0Y2ggPSByZXF1aXJlKCBcIi4uL3N0cmluZ1Byb2Nlc3NpbmcvbWF0Y2hUZXh0V2l0aFdvcmRcIiApO1xuXG4vKipcbiAqIE1hdGNoZXMgdGhlIGFsdC10YWdzIGluIHRoZSBpbWFnZXMgZm91bmQgaW4gdGhlIHRleHQuXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB3aXRoIHRoZSB0b3RhbHMgYW5kIGRpZmZlcmVudCBhbHQtdGFncy5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBpbWFnZU1hdGNoZXMgQXJyYXkgd2l0aCBhbGwgdGhlIG1hdGNoZWQgaW1hZ2VzIGluIHRoZSB0ZXh0XG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5d29yZCB0aGUga2V5d29yZCB0byBjaGVjayBmb3IuXG4gKiBAcGFyYW0ge3N0cmluZ30gbG9jYWxlIFRoZSBsb2NhbGUgdXNlZCBmb3IgdHJhbnNsaXRlcmF0aW9uLlxuICogQHJldHVybnMge29iamVjdH0gYWx0UHJvcGVydGllcyBPYmplY3Qgd2l0aCBhbGwgYWx0LXRhZ3MgdGhhdCB3ZXJlIGZvdW5kLlxuICovXG52YXIgbWF0Y2hBbHRQcm9wZXJ0aWVzID0gZnVuY3Rpb24oIGltYWdlTWF0Y2hlcywga2V5d29yZCwgbG9jYWxlICkge1xuXHR2YXIgYWx0UHJvcGVydGllcyA9IHtcblx0XHRub0FsdDogMCxcblx0XHR3aXRoQWx0OiAwLFxuXHRcdHdpdGhBbHRLZXl3b3JkOiAwLFxuXHRcdHdpdGhBbHROb25LZXl3b3JkOiAwLFxuXHR9O1xuXG5cdGZvciAoIHZhciBpID0gMDsgaSA8IGltYWdlTWF0Y2hlcy5sZW5ndGg7IGkrKyApIHtcblx0XHR2YXIgYWx0dGFnID0gaW1hZ2VBbHR0YWcoIGltYWdlTWF0Y2hlc1sgaSBdICk7XG5cblx0XHQvLyBJZiBubyBhbHQtdGFnIGlzIHNldFxuXHRcdGlmICggYWx0dGFnID09PSBcIlwiICkge1xuXHRcdFx0YWx0UHJvcGVydGllcy5ub0FsdCsrO1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0Ly8gSWYgbm8ga2V5d29yZCBpcyBzZXQsIGJ1dCB0aGUgYWx0LXRhZyBpc1xuXHRcdGlmICgga2V5d29yZCA9PT0gXCJcIiAmJiBhbHR0YWcgIT09IFwiXCIgKSB7XG5cdFx0XHRhbHRQcm9wZXJ0aWVzLndpdGhBbHQrKztcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGlmICggd29yZE1hdGNoKCBhbHR0YWcsIGtleXdvcmQsIGxvY2FsZSApID09PSAwICYmIGFsdHRhZyAhPT0gXCJcIiApIHtcblx0XHRcdC8vIE1hdGNoIGZvciBrZXl3b3Jkcz9cblx0XHRcdGFsdFByb3BlcnRpZXMud2l0aEFsdE5vbktleXdvcmQrKztcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGlmICggd29yZE1hdGNoKCBhbHR0YWcsIGtleXdvcmQsIGxvY2FsZSApID4gMCApIHtcblx0XHRcdGFsdFByb3BlcnRpZXMud2l0aEFsdEtleXdvcmQrKztcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBhbHRQcm9wZXJ0aWVzO1xufTtcblxuLyoqXG4gKiBDaGVja3MgdGhlIHRleHQgZm9yIGltYWdlcywgY2hlY2tzIHRoZSB0eXBlIG9mIGVhY2ggaW1hZ2UgYW5kIGFsdHRhZ3MgZm9yIGNvbnRhaW5pbmcga2V5d29yZHNcbiAqXG4gKiBAcGFyYW0ge1BhcGVyfSBwYXBlciBUaGUgcGFwZXIgdG8gY2hlY2sgZm9yIGltYWdlc1xuICogQHJldHVybnMge29iamVjdH0gT2JqZWN0IGNvbnRhaW5pbmcgYWxsIHR5cGVzIG9mIGZvdW5kIGltYWdlc1xuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCBwYXBlciApIHtcblx0cmV0dXJuIG1hdGNoQWx0UHJvcGVydGllcyggaW1hZ2VJblRleHQoIHBhcGVyLmdldFRleHQoKSApLCBwYXBlci5nZXRLZXl3b3JkKCksIHBhcGVyLmdldExvY2FsZSgpICk7XG59O1xuIiwiLyoqIEBtb2R1bGUgcmVzZWFyY2hlcy9pbWFnZUluVGV4dCAqL1xuXG52YXIgaW1hZ2VJblRleHQgPSByZXF1aXJlKCBcIi4vLi4vc3RyaW5nUHJvY2Vzc2luZy9pbWFnZUluVGV4dFwiICk7XG5cbi8qKlxuICogQ2hlY2tzIHRoZSBhbW91bnQgb2YgaW1hZ2VzIGluIHRoZSB0ZXh0LlxuICpcbiAqIEBwYXJhbSB7UGFwZXJ9IHBhcGVyIFRoZSBwYXBlciB0byBjaGVjayBmb3IgaW1hZ2VzXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgYW1vdW50IG9mIGZvdW5kIGltYWdlc1xuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCBwYXBlciApIHtcblx0cmV0dXJuIGltYWdlSW5UZXh0KCBwYXBlci5nZXRUZXh0KCkgKS5sZW5ndGg7XG59O1xuIiwidmFyIGNvdW50V29yZHMgPSByZXF1aXJlKCBcIi4uL3N0cmluZ1Byb2Nlc3NpbmcvY291bnRXb3Jkc1wiICk7XG52YXIgc2FuaXRpemVTdHJpbmcgPSByZXF1aXJlKCBcIi4uL3N0cmluZ1Byb2Nlc3Npbmcvc2FuaXRpemVTdHJpbmdcIiApO1xuXG4vKipcbiAqIERldGVybWluZXMgdGhlIGxlbmd0aCBpbiB3b3JkcyBvZiBhIHRoZSBrZXlwaHJhc2UsIHRoZSBrZXl3b3JkIGlzIGEga2V5cGhyYXNlIGlmIGl0IGlzIG1vcmUgdGhhbiBvbmUgd29yZC5cbiAqXG4gKiBAcGFyYW0ge1BhcGVyfSBwYXBlciBUaGUgcGFwZXIgdG8gcmVzZWFyY2hcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBsZW5ndGggb2YgdGhlIGtleXBocmFzZVxuICovXG5mdW5jdGlvbiBrZXlwaHJhc2VMZW5ndGhSZXNlYXJjaCggcGFwZXIgKSB7XG5cdHZhciBrZXlwaHJhc2UgPSBzYW5pdGl6ZVN0cmluZyggcGFwZXIuZ2V0S2V5d29yZCgpICk7XG5cblx0cmV0dXJuIGNvdW50V29yZHMoIGtleXBocmFzZSApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGtleXBocmFzZUxlbmd0aFJlc2VhcmNoO1xuIiwiLyoqIEBtb2R1bGUgcmVzZWFyY2hlcy9jb3VudEtleXdvcmRJblVybCAqL1xuXG52YXIgd29yZE1hdGNoID0gcmVxdWlyZSggXCIuLi9zdHJpbmdQcm9jZXNzaW5nL21hdGNoVGV4dFdpdGhXb3JkLmpzXCIgKTtcbi8qKlxuICogTWF0Y2hlcyB0aGUga2V5d29yZCBpbiB0aGUgVVJMLiBSZXBsYWNlcyB3aGl0ZXNwYWNlcyB3aXRoIGRhc2hlcyBhbmQgdXNlcyBkYXNoIGFzIHdvcmRib3VuZGFyeS5cbiAqXG4gKiBAcGFyYW0ge1BhcGVyfSBwYXBlciB0aGUgUGFwZXIgb2JqZWN0IHRvIHVzZSBpbiB0aGlzIGNvdW50LlxuICogQHJldHVybnMge2ludH0gTnVtYmVyIG9mIHRpbWVzIHRoZSBrZXl3b3JkIGlzIGZvdW5kLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCBwYXBlciApIHtcblx0dmFyIGtleXdvcmQgPSBwYXBlci5nZXRLZXl3b3JkKCkucmVwbGFjZSggXCInXCIsIFwiXCIgKS5yZXBsYWNlKCAvXFxzL2lnLCBcIi1cIiApO1xuXG5cdHJldHVybiB3b3JkTWF0Y2goIHBhcGVyLmdldFVybCgpLCBrZXl3b3JkLCBwYXBlci5nZXRMb2NhbGUoKSApO1xufTtcbiIsIi8qIEBtb2R1bGUgYW5hbHlzZXMvbWF0Y2hLZXl3b3JkSW5TdWJoZWFkaW5ncyAqL1xuXG52YXIgc3RyaXBTb21lVGFncyA9IHJlcXVpcmUoIFwiLi4vc3RyaW5nUHJvY2Vzc2luZy9zdHJpcE5vblRleHRUYWdzLmpzXCIgKTtcbnZhciBzdWJoZWFkaW5nTWF0Y2ggPSByZXF1aXJlKCBcIi4uL3N0cmluZ1Byb2Nlc3Npbmcvc3ViaGVhZGluZ3NNYXRjaC5qc1wiICk7XG52YXIgZ2V0U3ViaGVhZGluZ0NvbnRlbnRzID0gcmVxdWlyZSggXCIuLi9zdHJpbmdQcm9jZXNzaW5nL2dldFN1YmhlYWRpbmdzLmpzXCIgKS5nZXRTdWJoZWFkaW5nQ29udGVudHM7XG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZXJlIGFyZSBhbnkgc3ViaGVhZGluZ3MgbGlrZSBoMiBpbiB0aGUgdGV4dFxuICogYW5kIGlmIHRoZXkgaGF2ZSB0aGUga2V5d29yZCBpbiB0aGVtLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBwYXBlciBUaGUgcGFwZXIgb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHRleHQgYW5kIGtleXdvcmQuXG4gKiBAcmV0dXJucyB7b2JqZWN0fSB0aGUgcmVzdWx0IG9iamVjdC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiggcGFwZXIgKSB7XG5cdHZhciB0ZXh0ID0gcGFwZXIuZ2V0VGV4dCgpO1xuXHR2YXIga2V5d29yZCA9IHBhcGVyLmdldEtleXdvcmQoKTtcblx0dmFyIGxvY2FsZSA9IHBhcGVyLmdldExvY2FsZSgpO1xuXHR2YXIgcmVzdWx0ID0geyBjb3VudDogMCB9O1xuXHR0ZXh0ID0gc3RyaXBTb21lVGFncyggdGV4dCApO1xuXHR2YXIgbWF0Y2hlcyA9IGdldFN1YmhlYWRpbmdDb250ZW50cyggdGV4dCApO1xuXG5cdGlmICggMCAhPT0gbWF0Y2hlcy5sZW5ndGggKSB7XG5cdFx0cmVzdWx0LmNvdW50ID0gbWF0Y2hlcy5sZW5ndGg7XG5cdFx0cmVzdWx0Lm1hdGNoZXMgPSBzdWJoZWFkaW5nTWF0Y2goIG1hdGNoZXMsIGtleXdvcmQsIGxvY2FsZSApO1xuXHR9XG5cblx0cmV0dXJuIHJlc3VsdDtcbn07XG5cbiIsInZhciBtYXRjaFRleHRXaXRoV29yZCA9IHJlcXVpcmUoIFwiLi4vc3RyaW5nUHJvY2Vzc2luZy9tYXRjaFRleHRXaXRoV29yZC5qc1wiICk7XG5cbi8qKlxuICogTWF0Y2hlcyB0aGUga2V5d29yZCBpbiB0aGUgZGVzY3JpcHRpb24gaWYgYSBkZXNjcmlwdGlvbiBhbmQga2V5d29yZCBhcmUgYXZhaWxhYmxlLlxuICogZGVmYXVsdCBpcyAtMSBpZiBubyBkZXNjcmlwdGlvbiBhbmQvb3Iga2V5d29yZCBpcyBzcGVjaWZpZWRcbiAqXG4gKiBAcGFyYW0ge1BhcGVyfSBwYXBlciBUaGUgcGFwZXIgb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGRlc2NyaXB0aW9uLlxuICogQHJldHVybnMge251bWJlcn0gVGhlIG51bWJlciBvZiBtYXRjaGVzIHdpdGggdGhlIGtleXdvcmRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiggcGFwZXIgKSB7XG5cdGlmICggcGFwZXIuZ2V0RGVzY3JpcHRpb24oKSA9PT0gXCJcIiApIHtcblx0XHRyZXR1cm4gLTE7XG5cdH1cblx0cmV0dXJuIG1hdGNoVGV4dFdpdGhXb3JkKCBwYXBlci5nZXREZXNjcmlwdGlvbigpLCBwYXBlci5nZXRLZXl3b3JkKCksIHBhcGVyLmdldExvY2FsZSgpICk7XG59O1xuXG4iLCIvKipcbiAqIENoZWNrIHRoZSBsZW5ndGggb2YgdGhlIGRlc2NyaXB0aW9uLlxuICogQHBhcmFtIHtQYXBlcn0gcGFwZXIgVGhlIHBhcGVyIG9iamVjdCBjb250YWluaW5nIHRoZSBkZXNjcmlwdGlvbi5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBsZW5ndGggb2YgdGhlIGRlc2NyaXB0aW9uLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCBwYXBlciApIHtcblx0cmV0dXJuIHBhcGVyLmdldERlc2NyaXB0aW9uKCkubGVuZ3RoO1xufTtcbiIsIi8qKlxuICogQ2hlY2sgdGhlIHdpZHRoIG9mIHRoZSB0aXRsZSBpbiBwaXhlbHNcbiAqIEBwYXJhbSB7UGFwZXJ9IHBhcGVyIFRoZSBwYXBlciBvYmplY3QgY29udGFpbmluZyB0aGUgdGl0bGUgd2lkdGggaW4gcGl4ZWxzLlxuICogQHJldHVybnMge251bWJlcn0gVGhlIHdpZHRoIG9mIHRoZSB0aXRsZSBpbiBwaXhlbHNcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiggcGFwZXIgKSB7XG5cdGlmKCBwYXBlci5oYXNUaXRsZSgpICkge1xuXHRcdHJldHVybiBwYXBlci5nZXRUaXRsZVdpZHRoKCk7XG5cdH1cblx0cmV0dXJuIDA7XG59O1xuIiwiLyoqXG4gKiBSZXR1cm5zIGFuIGFycmF5IHdpdGggZXhjZXB0aW9ucyBmb3IgdGhlIHNlbnRlbmNlIGJlZ2lubmluZyByZXNlYXJjaGVyLlxuICogQHJldHVybnMge0FycmF5fSBUaGUgYXJyYXkgZmlsbGVkIHdpdGggZXhjZXB0aW9ucy5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcblx0cmV0dXJuIFtcblx0XHQvLyBEZWZpbml0ZSBhcnRpY2xlczpcblx0XHRcImVsXCIsIFwibG9zXCIsIFwibGFcIiwgXCJsYXNcIixcblx0XHQvLyBJbmRlZmluaXRlIGFydGljbGVzOlxuXHRcdFwidW5cIiwgXCJ1bmFcIiwgXCJ1bmFzXCIsIFwidW5vc1wiLFxuXHRcdC8vIE51bWJlcnMgMS0xMDpcblx0XHRcInVub1wiLCBcImRvc1wiLCBcInRyZXNcIiwgXCJjdWF0cm9cIiwgXCJjaW5jb1wiLCBcInNlaXNcIiwgXCJzaWV0ZVwiLCBcIm9jaG9cIiwgXCJudWV2ZVwiLCBcImRpZXpcIixcblx0XHQvLyBEZW1vbnN0cmF0aXZlIHByb25vdW5zOlxuXHRcdFwiZXN0ZVwiLCBcImVzdG9zXCIsIFwiZXN0YVwiLCBcImVzdGFzXCIsIFwiZXNlXCIsIFwiZXNvc1wiLCBcImVzYVwiLCBcImVzYXNcIiwgXCJhcXVlbFwiLFxuXHRcdFwiYXF1ZWxsb3NcIiwgXCJhcXVlbGxhXCIsIFwiYXF1ZWxsYXNcIiwgXCJlc3RvXCIsIFwiZXNvXCIsIFwiYXF1ZWxsb1wiIF07XG59O1xuXG5cbiIsIi8qKiBAbW9kdWxlIGNvbmZpZy90cmFuc2l0aW9uV29yZHMgKi9cblxuLyoqXG4gKiBSZXR1cm5zIGFuIGFycmF5IHdpdGggdHJhbnNpdGlvbiB3b3JkcyB0byBiZSB1c2VkIGJ5IHRoZSBhc3Nlc3NtZW50cy5cbiAqIEByZXR1cm5zIHtBcnJheX0gVGhlIGFycmF5IGZpbGxlZCB3aXRoIHRyYW5zaXRpb24gd29yZHMuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG5cdHJldHVybiBbIFwiYSBjYXVzYSBkZVwiLCBcImEgY29udGludWFjacOzblwiLCBcImEgZGlmZXJlbmNpYSBkZVwiLCBcImEgbGEgaW52ZXJzYVwiLCBcImEgbGEgbWlzbWEgdmV6XCIsIFwiYSBtw6FzIGRlXCIsIFwiYSBtw6FzIGRlIGVzdG9cIixcblx0XHRcImEgbWVub3MgcXVlXCIsIFwiYSBwZXNhciBkZVwiLCBcImEgcGVzYXIgZGUgZXNvXCIsIFwiYSBwZXNhciBkZSB0b2RvXCIsIFwiYSBwZXNlciBkZVwiLCBcImEgcHJvcMOzc2l0b1wiLCBcImEgc2FiZXJcIiwgXCJhIHRvZG8gZXN0b1wiLFxuXHRcdFwiYWRlbcOhc1wiLCBcImFkaWNpb25hbFwiLCBcImFsIGNvbnRyYXJpb1wiLCBcImFsIGZpbiB5IGFsIGNhYm9cIiwgXCJhbCBmaW5hbFwiLCBcImFsIGluaWNpb1wiLCBcImFsIG1pc21vIHRpZW1wb1wiLCBcImFsIHByaW5jaXBpb1wiLFxuXHRcdFwiYW50ZSB0b2RvXCIsIFwiYW50ZXMgZGVcIiwgXCJhcGFydGUgZGVcIiwgXCJhcyBhc2nDrSBjb21vXCIsIFwiYXPDrVwiLCBcImFzw60gY29tb1wiLCBcImFzw60gbWlzbW9cIiwgXCJhc8OtIHF1ZVwiLCBcImFzaW1pc21vXCIsIFwiYcO6biBhc8OtXCIsXG5cdFx0XCJhdW5xdWVcIiwgXCJjaWVydGFtZW50ZVwiLCBcImNsYXJvIGVzdMOhIHF1ZVwiLCBcImNsYXJvIHF1ZVwiLCBcImNsYXJvIHF1ZSBzw61cIiwgXCJjb21vXCIsIFwiY29tbyBjYXNvIHTDrXBpY29cIiwgXCJjb21vIGVyYSBkZSBlc3BlcmFyc2VcIixcblx0XHRcImNvbW8gZXMgZGUgZXNwZXJhcnNlXCIsIFwiY29tbyBtdWVzdHJhXCIsIFwiY29tbyByZXN1bHRhZG9cIiwgXCJjb21vIHNlIGhhIG5vdGFkb1wiLCBcImNvbW8gc2lndWVcIiwgXCJjb21wYXJhZG8gY29uXCIsIFwiY29uIHF1ZVwiLFxuXHRcdFwiY29uIHJlbGFjacOzbiBhXCIsIFwiY29uIHRvZG9cIiwgXCJjb25xdWVcIiwgXCJjdWFuZG9cIiwgXCJkYWRvIHF1ZVwiLCBcImRlIGFow61cIiwgXCJkZSBjaWVydGEgbWFuZXJhXCIsIFwiZGUgY3VhbHF1aWVyIG1hbmVyYVwiLFxuXHRcdFwiZGUgY3VhbHF1aWVyIG1vZG9cIiwgXCJkZSBlc3RlIG1vZG9cIiwgXCJkZSBnb2xwZVwiLCBcImRlIGhlY2hvXCIsIFwiZGUgaWd1YWwgbWFuZXJhXCIsIFwiZGUgaWd1YWwgbW9kb1wiLCBcImRlIGlndWFsbWFuZXJhXCIsXG5cdFx0XCJkZSBsYSBtYW5lcmEgc2lndWVudGVcIiwgXCJkZSBsYSBtaXNtYSBmb3JtYVwiLCBcImRlIGxhIG1pc21hIG1hbmVyYVwiLCBcImRlIG1hbmVyYSBzZW1lamFudGVcIiwgXCJkZSBtaXNtbyBtb2RvXCIsIFwiZGUgbW9kbyBxdWVcIixcblx0XHRcImRlIG51ZXZvXCIsIFwiZGUgb3RyYSBtYW5lcmFcIiwgXCJkZSBvdHJvIG1vZG9cIiwgXCJkZSBxdWFscXVpZXIgbWFuZXJhXCIsIFwiZGUgcmVwZW50ZVwiLCBcImRlIHRvZGFzIGZvcm1hc1wiLCBcImRlIHRvZGFzIG1hbmVyYXNcIixcblx0XHRcImRlIHRvZG9zIG1vZG9zXCIsIFwiZGUgdmVyYXNcIiwgXCJkZWJpZG8gYVwiLCBcImRlYmlkbyBhIHF1ZVwiLCBcImRlY2lkaWRhbWVudGVcIiwgXCJkZWNpc2l2YW1lbnRlXCIsIFwiZGVsIG1pc21vIG1vZG9cIixcblx0XHRcImRlbnRybyBkZSBwb2NvXCIsIFwiZGVzZGUgZW50b25jZXNcIiwgXCJkZXNwdcOpc1wiLCBcImRlc3B1w6lzIGRlXCIsIFwiZGVzcHXDqXMgZGUgdG9kb1wiLCBcImRpZmVyZW50ZW1lbnRlXCIsIFwiZMO6Yml0YW1lbnRlXCIsXG5cdFx0XCJlZmVjdGl2YW1lbnRlXCIsIFwiZWplbXBsbyBkZSBlc3RvXCIsIFwiZW4gY2FtYmlvXCIsIFwiZW4gY2llcnRvIG1vZG9cIiwgXCJlbiBjb21wYXJhY2nDs24gY29uXCIsIFwiZW4gY29uY2x1c2nDs25cIiwgXCJlbiBjb25jcmV0b1wiLFxuXHRcdFwiZW4gY29uZm9ybWlkYWQgY29uXCIsIFwiZW4gY29uc2VjdWVuY2lhXCIsIFwiZW4gY29uc2lndWllbnRlXCIsIFwiZW4gY29udHJhc3RlIGNvblwiLCBcImVuIGN1YW50b1wiLCBcImVuIGN1YW50byBhXCIsIFwiZW4gZWZlY3RvXCIsXG5cdFx0XCJlbiBmaW5cIiwgXCJlbiBmaW4gZGUgY3VlbnRhc1wiLCBcImVuIGdlbmVyYWxcIiwgXCJlbiBsdWdhciBkZVwiLCBcImVuIG90cmFzIHBhbGFicmFzXCIsIFwiZW4gcGFydGljdWxhclwiLCBcImVuIHByaW1lciBsdWdhclwiLFxuXHRcdFwiZW4gcHJpbWVyIHTDqXJtaW5vXCIsIFwiZW4gcHJpbWVyYSBpbnN0YW5jaWFcIiwgXCJlbiByZWFsaWRhZFwiLCBcImVuIHJlbGFjacOzbiBhXCIsIFwiZW4gcmVsYWNpw7NuIGNvblwiLCBcImVuIHJlcHJlc2VudGFjacOzbiBkZVwiLFxuXHRcdFwiZW4gcmVzdW1lblwiLCBcImVuIHNlZ3VuZG8gbHVnYXJcIiwgXCJlbiBzw61udGVzaXNcIiwgXCJlbiBzdW1hXCIsIFwiZW4gdG9kbyBjYXNvXCIsIFwiZW4gw7psdGltbyB0w6lybWlub1wiLCBcImVuIHZlcmRhZFwiLCBcImVuIHZleiBkZVwiLFxuXHRcdFwiZW50b25jZXNcIiwgXCJlbnRyZSBlbGxhcyBmaWd1cmFcIiwgXCJlbnRyZSBlbGxvcyBmaWd1cmFcIiwgXCJlcyBkZWNpclwiLCBcImVzIG3DoXNcIiwgXCJlc3BlY2lhbG1lbnRlXCIsIFwiZXNwZWPDrWZpY2FtZW50ZVwiLFxuXHRcdFwiZXN0byBpbmRpY2FcIiwgXCJldmVudHVhbG1lbnRlXCIsIFwiZmluYWxtZW50ZVwiLCBcImZyZWN1ZW50ZW1lbnRlXCIsIFwiZ2VuZXJhbG1lbnRlXCIsIFwiZ2VuZXJhbG1lbnRlIHBvciBlamVtcGxvXCIsXG5cdFx0XCJoYXN0YSBjaWVydG8gcHVudG9cIiwgXCJoYXkgcXVlIGHDsWFkaXJcIiwgXCJpZ3VhbCBxdWVcIiwgXCJpZ3VhbG1lbnRlXCIsIFwibGEgbWF5b3IgcGFydGUgZGVsIHRpZW1wb1wiLCBcImxhIG1heW9yw61hIGRlbCB0aWVtcG9cIixcblx0XHRcImxvIHF1ZSBlcyBwZW9yXCIsIFwibMOzZ2ljYW1lbnRlXCIsIFwibHVlZ29cIiwgXCJtw6FzIHRhcmRlXCIsIFwibWllbnRyYXNcIiwgXCJtaWVudHJhcyB0YW50b1wiLCBcIm1pcsOhbmRvbG8gdG9kb1wiLCBcIm5vIGZhbHRhcsOtYSBtw6FzXCIsXG5cdFx0XCJubyBvYnN0YW50ZVwiLCBcIm8gc2VhXCIsIFwib3RyYSB2ZXpcIiwgXCJvdHJvIGFzcGVjdG9cIiwgXCJwYXIgaWx1c3RyYXJcIiwgXCJwYXIgdGVybWluYXJcIiwgXCJwYXJhIGNvbmNsdWlyXCIsIFwicGFyYSBjb25jbHVzacOzblwiLFxuXHRcdFwicGFyYSBjb250aW51YXJcIiwgXCJwYXJhIGVtcGV6YXJcIiwgXCJwYXJhIG1lbmNpb25hciB1bmEgY29zYVwiLCBcInBhcmEgcXVlXCIsIFwicGFyYSByZXN1bWlyXCIsIFwicGVyb1wiLCBcInBvclwiLCBcInBvciBhw7FhZGlkdXJhXCIsXG5cdFx0XCJwb3IgY29uc2lndWllbnRlXCIsIFwicG9yIGVqZW1wbG9cIiwgXCJwb3IgZWwgY29udHJhcmlvXCIsIFwicG9yIGVzb1wiLCBcInBvciBlc3RhIHJhesOzblwiLCBcInBvciBlc3RvXCIsIFwicG9yIGZpblwiLCBcInBvciBsYSBtYXlvciBwYXJ0ZVwiLFxuXHRcdFwicG9yIGxvIGdlbmVyYWxcIiwgXCJwb3IgbG8gdGFudG9cIiwgXCJwb3Igb3J0byBsYWRvXCIsIFwicG9yIG90cmEgcGFydGVcIiwgXCJwb3Igb3RybyBsYWRvXCIsIFwicG9yIHN1cHVlc3RvXCIsIFwicG9yIHRhbnRvXCIsXG5cdFx0XCJwb3Igw7psdGltb1wiLCBcInBvciB1biBsYWRvXCIsIFwicG9yIHVuYSBwYXJ0ZVwiLCBcInBvcnF1ZVwiLCBcInBvc3Rlcmlvcm1lbnRlXCIsIFwicHJpbWVyb1wiLCBcInByaW1lcm8gcXVlIG5hZGFcIiwgXCJwcmluY2lwYWxtZW50ZVwiLFxuXHRcdFwicHJvbnRvXCIsIFwicHLDs3hpbWFtZW50ZVwiLCBcInB1ZXMgYmllblwiLCBcInB1ZXN0byBxdWVcIiwgXCJyYXJhIHZlelwiLCBcInJhcmFtZW50ZVwiLCBcInJlYWxtZW50ZVwiLCBcInJlc3VsdGEgcXVlXCIsIFwic2VndWlkYW1lbnRlXCIsXG5cdFx0XCJzZWd1aWRhbWVudGUgZW50cmUgdGFudG9cIiwgXCJzZWd1bmRvXCIsIFwic2VtZWphbnRlbWVudGVcIiwgXCJzaWVtcHJlIHF1ZVwiLCBcInNpZ3VlIHF1ZVwiLCBcInNpZ3VpZW50ZVwiLCBcInNpbiBkdWRhXCIsIFwic2luIGVtYmFyZ29cIixcblx0XHRcInNpbm9cIiwgXCJzb2JyZSB0b2RvXCIsIFwic3Vwb25nYW1vc1wiLCBcInN1cHVlc3RvIHF1ZVwiLCBcInRhbCBjb21vXCIsIFwidGFtYmnDqW5cIiwgXCJ0YW4gcHJvbnRvIGNvbW9cIiwgXCJ0YW50byBjb21vXCIsIFwidGVyY2Vyb1wiLFxuXHRcdFwidW5hIHZlelwiLCBcInZlcmJpZ3JhY2lhXCIsIFwidmljZS12ZXJzYVwiLCBcInlhXCIsIFwieWEgcXVlXCIgXTtcbn07XG4iLCIvKiogQG1vZHVsZSBjb25maWcvdHdvUGFydFRyYW5zaXRpb25Xb3JkcyAqL1xuXG4vKipcbiAqIFJldHVybnMgYW4gYXJyYXkgd2l0aCB0d28tcGFydCB0cmFuc2l0aW9uIHdvcmRzIHRvIGJlIHVzZWQgYnkgdGhlIGFzc2Vzc21lbnRzLlxuICogQHJldHVybnMge0FycmF5fSBUaGUgYXJyYXkgZmlsbGVkIHdpdGggdHdvLXBhcnQgdHJhbnNpdGlvbiB3b3Jkcy5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcblx0cmV0dXJuIFsgWyBcImRlIHVuIGxhZG9cIiwgXCJkZSBvdHJhIHBhcnRlXCIgXSwgWyBcImRlIHVuIGxhZG9cIiwgXCJkZSBvdHJvXCIgXSwgWyBcIm5vXCIsIFwic2lubyBxdWVcIiBdLCBbIFwibm9cIiwgXCJzaW5vXCIgXSxcblx0XHRbIFwicG9yIHVuIGxhZG9cIiwgXCJwb3Igb3RybyBsYWRvXCIgXSwgWyBcInBvciB1bmEgcGFydGVcIiwgXCJwb3Igb3RyYSBwYXJ0ZVwiIF0sIFsgXCJwb3IgdW5hIHBhcnRlXCIsIFwicG9yIG90cmFcIiBdLCBbIFwidGFudG9cIiwgXCJjb21vXCIgXSBdO1xufTtcbiIsIi8qKiBAbW9kdWxlIHJlc2VhcmNoZXMvc3RvcFdvcmRzSW5LZXl3b3JkICovXG5cbnZhciBzdG9wV29yZHNJblRleHQgPSByZXF1aXJlKCBcIi4vc3RvcFdvcmRzSW5UZXh0LmpzXCIgKTtcblxuLyoqXG4gKiBDaGVja3MgZm9yIHRoZSBhbW91bnQgb2Ygc3RvcCB3b3JkcyBpbiB0aGUga2V5d29yZC5cbiAqIEBwYXJhbSB7UGFwZXJ9IHBhcGVyIFRoZSBQYXBlciBvYmplY3QgdG8gYmUgY2hlY2tlZCBhZ2FpbnN0LlxuICogQHJldHVybnMge0FycmF5fSBBbGwgdGhlIHN0b3B3b3JkcyB0aGF0IHdlcmUgZm91bmQgaW4gdGhlIGtleXdvcmQuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oIHBhcGVyICkge1xuXHRyZXR1cm4gc3RvcFdvcmRzSW5UZXh0KCBwYXBlci5nZXRLZXl3b3JkKCkgKTtcbn07XG4iLCJ2YXIgc3RvcHdvcmRzID0gcmVxdWlyZSggXCIuLi9jb25maWcvc3RvcHdvcmRzLmpzXCIgKSgpO1xudmFyIHRvUmVnZXggPSByZXF1aXJlKCBcIi4uL3N0cmluZ1Byb2Nlc3Npbmcvc3RyaW5nVG9SZWdleC5qc1wiICk7XG5cbi8qKlxuICogQ2hlY2tzIGEgdGV4dCB0byBzZWUgaWYgdGhlcmUgYXJlIGFueSBzdG9wd29yZHMsIHRoYXQgYXJlIGRlZmluZWQgaW4gdGhlIHN0b3B3b3JkcyBjb25maWcuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQgVGhlIGlucHV0IHRleHQgdG8gbWF0Y2ggc3RvcHdvcmRzLlxuICogQHJldHVybnMge0FycmF5fSBBbiBhcnJheSB3aXRoIGFsbCBzdG9wd29yZHMgZm91bmQgaW4gdGhlIHRleHQuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oIHRleHQgKSB7XG5cdHZhciBpLCBtYXRjaGVzID0gW107XG5cblx0Zm9yICggaSA9IDA7IGkgPCBzdG9wd29yZHMubGVuZ3RoOyBpKysgKSB7XG5cdFx0aWYgKCB0ZXh0Lm1hdGNoKCB0b1JlZ2V4KCBzdG9wd29yZHNbIGkgXSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRtYXRjaGVzLnB1c2goIHN0b3B3b3Jkc1sgaSBdICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG1hdGNoZXM7XG59O1xuIiwiLyoqIEBtb2R1bGUgcmVzZWFyY2hlcy9zdG9wV29yZHNJblVybCAqL1xuXG52YXIgc3RvcFdvcmRzSW5UZXh0ID0gcmVxdWlyZSggXCIuL3N0b3BXb3Jkc0luVGV4dC5qc1wiICk7XG5cbi8qKlxuICogTWF0Y2hlcyBzdG9wd29yZHMgaW4gdGhlIFVSTC4gUmVwbGFjZXMgLSBhbmQgXyB3aXRoIHdoaXRlc3BhY2UuXG4gKiBAcGFyYW0ge1BhcGVyfSBwYXBlciBUaGUgUGFwZXIgb2JqZWN0IHRvIGdldCB0aGUgdXJsIGZyb20uXG4gKiBAcmV0dXJucyB7QXJyYXl9IHN0b3B3b3JkcyBmb3VuZCBpbiBVUkxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiggcGFwZXIgKSB7XG5cdHJldHVybiBzdG9wV29yZHNJblRleHQoIHBhcGVyLmdldFVybCgpLnJlcGxhY2UoIC9bLV9dL2csIFwiIFwiICkgKTtcbn07XG4iLCIvKiogQG1vZHVsZSBhbmFseXNlcy9pc1VybFRvb0xvbmcgKi9cblxuLyoqXG4gKiBDaGVja3MgaWYgYW4gVVJMIGlzIHRvbyBsb25nLCBiYXNlZCBvbiBzbHVnIGFuZCByZWxhdGl2ZSB0byBrZXl3b3JkIGxlbmd0aC5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gcGFwZXIgdGhlIHBhcGVyIHRvIHJ1biB0aGlzIGFzc2Vzc21lbnQgb25cbiAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIHRoZSBVUkwgaXMgdG9vIGxvbmcsIGZhbHNlIGlmIGl0IGlzbid0XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oIHBhcGVyICkge1xuXHR2YXIgdXJsTGVuZ3RoID0gcGFwZXIuZ2V0VXJsKCkubGVuZ3RoO1xuXHR2YXIga2V5d29yZExlbmd0aCA9IHBhcGVyLmdldEtleXdvcmQoKS5sZW5ndGg7XG5cdHZhciBtYXhVcmxMZW5ndGggPSA0MDtcblx0dmFyIG1heFNsdWdMZW5ndGggPSAyMDtcblxuXHRpZiAoIHVybExlbmd0aCA+IG1heFVybExlbmd0aFx0JiYgdXJsTGVuZ3RoID4ga2V5d29yZExlbmd0aCArIG1heFNsdWdMZW5ndGggKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0cmV0dXJuIGZhbHNlO1xufTtcbiIsInZhciB3b3JkQ291bnQgPSByZXF1aXJlKCBcIi4uL3N0cmluZ1Byb2Nlc3NpbmcvY291bnRXb3Jkcy5qc1wiICk7XG5cbi8qKlxuICogQ291bnQgdGhlIHdvcmRzIGluIHRoZSB0ZXh0XG4gKiBAcGFyYW0ge1BhcGVyfSBwYXBlciBUaGUgUGFwZXIgb2JqZWN0IHdobydzXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgYW1vdW50IG9mIHdvcmRzIGZvdW5kIGluIHRoZSB0ZXh0LlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCBwYXBlciApIHtcblx0cmV0dXJuIHdvcmRDb3VudCggcGFwZXIuZ2V0VGV4dCgpICk7XG59O1xuIiwiLyoqIEBtb2R1bGUgc3RyaW5nUHJvY2Vzc2luZy9hZGRXb3JkYm91bmRhcnkgKi9cblxuLyoqXG4gKiBSZXR1cm5zIGEgc3RyaW5nIHRoYXQgY2FuIGJlIHVzZWQgaW4gYSByZWdleCB0byBtYXRjaCBhIG1hdGNoU3RyaW5nIHdpdGggd29yZCBib3VuZGFyaWVzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYXRjaFN0cmluZyBUaGUgc3RyaW5nIHRvIGdlbmVyYXRlIGEgcmVnZXggc3RyaW5nIGZvci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbZXh0cmFXb3JkQm91bmRhcnldIEV4dHJhIGNoYXJhY3RlcnMgdG8gbWF0Y2ggYSB3b3JkIGJvdW5kYXJ5IG9uLlxuICogQHJldHVybnMge3N0cmluZ30gQSByZWdleCBzdHJpbmcgdGhhdCBtYXRjaGVzIHRoZSBtYXRjaFN0cmluZyB3aXRoIHdvcmQgYm91bmRhcmllcy5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiggbWF0Y2hTdHJpbmcsIGV4dHJhV29yZEJvdW5kYXJ5ICkge1xuXHR2YXIgd29yZEJvdW5kYXJ5LCB3b3JkQm91bmRhcnlTdGFydCwgd29yZEJvdW5kYXJ5RW5kO1xuXHR2YXIgX2V4dHJhV29yZEJvdW5kYXJ5ID0gZXh0cmFXb3JkQm91bmRhcnkgfHwgXCJcIjtcblxuXHR3b3JkQm91bmRhcnkgPSBcIlsgXFxuXFxyXFx0XFwuLCdcXChcXClcXFwiXFwrXFwtOyE/OlxcL8K7wqvigLnigLpcIiArIF9leHRyYVdvcmRCb3VuZGFyeSArIFwiPD5dXCI7XG5cdHdvcmRCb3VuZGFyeVN0YXJ0ID0gXCIoXnxcIiArIHdvcmRCb3VuZGFyeSArIFwiKVwiO1xuXHR3b3JkQm91bmRhcnlFbmQgPSBcIigkfFwiICsgd29yZEJvdW5kYXJ5ICsgXCIpXCI7XG5cblx0cmV0dXJuIHdvcmRCb3VuZGFyeVN0YXJ0ICsgbWF0Y2hTdHJpbmcgKyB3b3JkQm91bmRhcnlFbmQ7XG59O1xuIiwiLyoqIEBtb2R1bGUgc3RyaW5nUHJvY2Vzc2luZy9jaGVja05vZm9sbG93ICovXG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbGlua3MgaGFzIGEgbm9mb2xsb3cgYXR0cmlidXRlLiBJZiBpdCBoYXMsIHJldHVybnMgTm9mb2xsb3csIG90aGVyd2lzZSBEb2ZvbGxvdy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dCBUaGUgdGV4dCB0byBjaGVjayBhZ2FpbnN0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyBEb2ZvbGxvdyBvciBOb2ZvbGxvdy5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiggdGV4dCApIHtcblx0dmFyIGxpbmtGb2xsb3cgPSBcIkRvZm9sbG93XCI7XG5cblx0Ly8gTWF0Y2hlcyBhbGwgbm9mb2xsb3cgbGlua3MsIGNhc2UgaW5zZW5zaXRpdmUgYW5kIGdsb2JhbFxuXHRpZiAoIHRleHQubWF0Y2goIC9yZWw9KFtcXCdcXFwiXSlub2ZvbGxvd1xcMS9pZyApICE9PSBudWxsICkge1xuXHRcdGxpbmtGb2xsb3cgPSBcIk5vZm9sbG93XCI7XG5cdH1cblx0cmV0dXJuIGxpbmtGb2xsb3c7XG59O1xuIiwiLyoqIEBtb2R1bGUgc3RyaW5nUHJvY2Vzc2luZy9jb3VudFNlbnRlbmNlcyAqL1xuXG52YXIgZ2V0U2VudGVuY2VzID0gcmVxdWlyZSggXCIuLi9zdHJpbmdQcm9jZXNzaW5nL2dldFNlbnRlbmNlcy5qc1wiICk7XG5cbi8qKlxuICogQ291bnRzIHRoZSBudW1iZXIgb2Ygc2VudGVuY2VzIGluIGEgZ2l2ZW4gc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IFRoZSB0ZXh0IHVzZWQgdG8gY291bnQgc2VudGVuY2VzLlxuICogQHJldHVybnMge251bWJlcn0gVGhlIG51bWJlciBvZiBzZW50ZW5jZXMgaW4gdGhlIHRleHQuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oIHRleHQgKSB7XG5cdHZhciBzZW50ZW5jZXMgPSBnZXRTZW50ZW5jZXMoIHRleHQgKTtcblx0dmFyIHNlbnRlbmNlQ291bnQgPSAwO1xuXHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBzZW50ZW5jZXMubGVuZ3RoOyBpKysgKSB7XG5cdFx0aWYgKCBzZW50ZW5jZXNbIGkgXSAhPT0gXCJcIiAmJiBzZW50ZW5jZXNbIGkgXSAhPT0gXCIgXCIgKSB7XG5cdFx0XHRzZW50ZW5jZUNvdW50Kys7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBzZW50ZW5jZUNvdW50O1xufTtcbiIsInZhciBmaWx0ZXIgPSByZXF1aXJlKCBcImxvZGFzaC9maWx0ZXJcIiApO1xuXG52YXIgdHJhbnNsaXRlcmF0ZSA9IHJlcXVpcmUoIFwiLi90cmFuc2xpdGVyYXRlLmpzXCIgKTtcbnZhciBnZXRXb3JkcyA9IHJlcXVpcmUoIFwiLi9nZXRXb3Jkcy5qc1wiICk7XG5cbi8qKlxuICogQ291bnRzIHRoZSBudW1iZXIgb2Ygb2NjdXJyZW5jZXMgb2YgYSB3b3JkIGluIGEgdGV4dC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdGV4dCBUaGUgdGV4dCB0byBjb3VudCB0aGUgd29yZCBpbi5cbiAqIEBwYXJhbSB7U3RyaW5nfSB3b3JkVG9NYXRjaCBUaGUgd29yZCB0byBjaGVjayBpbiB0aGUgdGV4dC5cbiAqIEBwYXJhbSB7U3RyaW5nfSBsb2NhbGUgVGhlIGxvY2FsZSB1c2VkIGZvciB0cmFuc2xpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgbnVtYmVyIG9mIG9jY3VycmVuY2VzLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCB0ZXh0LCB3b3JkVG9NYXRjaCwgbG9jYWxlICkge1xuXHR2YXIgd29yZHMgPSBnZXRXb3JkcyggdGV4dCApO1xuXHR2YXIgY291bnQgPSBmaWx0ZXIoIHdvcmRzLCBmdW5jdGlvbiggd29yZCApIHtcblx0XHRyZXR1cm4gKCB3b3JkVG9NYXRjaCA9PT0gd29yZCB8fCB0cmFuc2xpdGVyYXRlKCB3b3JkVG9NYXRjaCwgbG9jYWxlICkgPT09IHdvcmQgKTtcblx0fSApO1xuXHRyZXR1cm4gY291bnQubGVuZ3RoO1xufTtcbiIsIi8qKiBAbW9kdWxlIHN0cmluZ1Byb2Nlc3NpbmcvY291bnRXb3JkcyAqL1xuXG52YXIgZ2V0V29yZHMgPSByZXF1aXJlKCBcIi4uL3N0cmluZ1Byb2Nlc3NpbmcvZ2V0V29yZHMuanNcIiApO1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIHdvcmRjb3VudCBvZiBhIGNlcnRhaW4gdGV4dC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dCBUaGUgdGV4dCB0byBiZSBjb3VudGVkLlxuICogQHJldHVybnMge2ludH0gVGhlIHdvcmQgY291bnQgb2YgdGhlIGdpdmVuIHRleHQuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oIHRleHQgKSB7XG5cdHJldHVybiBnZXRXb3JkcyggdGV4dCApLmxlbmd0aDtcbn07XG4iLCIvKiogQG1vZHVsZSBzdHJpbmdQcm9jZXNzaW5nL2NyZWF0ZVJlZ2V4RnJvbUFycmF5ICovXG5cbnZhciBhZGRXb3JkQm91bmRhcnkgPSByZXF1aXJlKCBcIi4uL3N0cmluZ1Byb2Nlc3NpbmcvYWRkV29yZGJvdW5kYXJ5LmpzXCIgKTtcbnZhciBtYXAgPSByZXF1aXJlKCBcImxvZGFzaC9tYXBcIiApO1xuXG4vKipcbiAqIENyZWF0ZXMgYSByZWdleCBvZiBjb21iaW5lZCBzdHJpbmdzIGZyb20gdGhlIGlucHV0IGFycmF5LlxuICpcbiAqIEBwYXJhbSB7YXJyYXl9IGFycmF5IFRoZSBhcnJheSB3aXRoIHN0cmluZ3NcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Rpc2FibGVXb3JkQm91bmRhcnldIEJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIG9yIG5vdCB0byBkaXNhYmxlIHdvcmQgYm91bmRhcmllc1xuICogQHJldHVybnMge1JlZ0V4cH0gcmVnZXggVGhlIHJlZ2V4IGNyZWF0ZWQgZnJvbSB0aGUgYXJyYXkuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oIGFycmF5LCBkaXNhYmxlV29yZEJvdW5kYXJ5ICkge1xuXHR2YXIgcmVnZXhTdHJpbmc7XG5cdHZhciBfZGlzYWJsZVdvcmRCb3VuZGFyeSA9IGRpc2FibGVXb3JkQm91bmRhcnkgfHwgZmFsc2U7XG5cblx0dmFyIGJvdW5kZWRBcnJheSA9IG1hcCggYXJyYXksIGZ1bmN0aW9uKCBzdHJpbmcgKSB7XG5cdFx0aWYgKCBfZGlzYWJsZVdvcmRCb3VuZGFyeSApIHtcblx0XHRcdHJldHVybiBzdHJpbmc7XG5cdFx0fVxuXHRcdHJldHVybiBhZGRXb3JkQm91bmRhcnkoIHN0cmluZyApO1xuXHR9ICk7XG5cblx0cmVnZXhTdHJpbmcgPSBcIihcIiArIGJvdW5kZWRBcnJheS5qb2luKCBcIil8KFwiICkgKyBcIilcIjtcblxuXHRyZXR1cm4gbmV3IFJlZ0V4cCggcmVnZXhTdHJpbmcsIFwiaWdcIiApO1xufTtcbiIsIi8qKiBAbW9kdWxlIHN0cmluZ1Byb2Nlc3NpbmcvY3JlYXRlUmVnZXhGcm9tRG91YmxlQXJyYXkgKi9cblxudmFyIGFkZFdvcmRCb3VuZGFyeSA9IHJlcXVpcmUoIFwiLi4vc3RyaW5nUHJvY2Vzc2luZy9hZGRXb3JkYm91bmRhcnkuanNcIiApO1xuXG4vKipcbiAqIENyZWF0ZXMgYSByZWdleCBzdHJpbmcgb2YgY29tYmluZWQgc3RyaW5ncyBmcm9tIHRoZSBpbnB1dCBhcnJheS5cbiAqIEBwYXJhbSB7YXJyYXl9IGFycmF5IFRoZSBhcnJheSBjb250YWluaW5nIHRoZSB2YXJpb3VzIHBhcnRzIG9mIGEgdHJhbnNpdGlvbiB3b3JkIGNvbWJpbmF0aW9uLlxuICogQHJldHVybnMge2FycmF5fSBUaGUgYXJyYXkgd2l0aCByZXBsYWNlZCBlbnRyaWVzLlxuICovXG52YXIgd29yZENvbWJpbmF0aW9uVG9SZWdleFN0cmluZyA9IGZ1bmN0aW9uKCBhcnJheSApIHtcblx0YXJyYXkgPSBhcnJheS5tYXAoIGZ1bmN0aW9uKCB3b3JkICkge1xuXHRcdHJldHVybiBhZGRXb3JkQm91bmRhcnkoIHdvcmQgKTtcblx0fSApO1xuXHRyZXR1cm4gYXJyYXkuam9pbiggXCIoLio/KVwiICk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSByZWdleCBvZiBjb21iaW5lZCBzdHJpbmdzIGZyb20gdGhlIGlucHV0IGFycmF5LCBjb250YWluaW5nIGFycmF5cyB3aXRoIHR3byBlbnRyaWVzLlxuICogQHBhcmFtIHthcnJheX0gYXJyYXkgVGhlIGFycmF5IGNvbnRhaW5pbmcgYXJyYXlzLlxuICogQHJldHVybnMge1JlZ0V4cH0gVGhlIHJlZ2V4IGNyZWF0ZWQgZnJvbSB0aGUgYXJyYXkuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oIGFycmF5ICkge1xuXHRhcnJheSA9IGFycmF5Lm1hcCggZnVuY3Rpb24oIHdvcmRDb21iaW5hdGlvbiApIHtcblx0XHRyZXR1cm4gd29yZENvbWJpbmF0aW9uVG9SZWdleFN0cmluZyggd29yZENvbWJpbmF0aW9uICk7XG5cdH0gKTtcblx0dmFyIHJlZ2V4U3RyaW5nID0gXCIoXCIgKyBhcnJheS5qb2luKCBcIil8KFwiICkgKyBcIilcIjtcblx0cmV0dXJuIG5ldyBSZWdFeHAoIHJlZ2V4U3RyaW5nLCBcImlnXCIgKTtcbn07XG4iLCIvKiogQG1vZHVsZSBzdHJpbmdQcm9jZXNzaW5nL2ZpbmRLZXl3b3JkSW5VcmwgKi9cblxudmFyIG1hdGNoVGV4dFdpdGhUcmFuc2xpdGVyYXRpb24gPSByZXF1aXJlKCBcIi4vbWF0Y2hUZXh0V2l0aFRyYW5zbGl0ZXJhdGlvbi5qc1wiICk7XG5cbi8qKlxuICogTWF0Y2hlcyB0aGUga2V5d29yZCBpbiB0aGUgVVJMLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIHVybCB0byBjaGVjayBmb3Iga2V5d29yZFxuICogQHBhcmFtIHtzdHJpbmd9IGtleXdvcmQgVGhlIGtleXdvcmQgdG8gY2hlY2sgaWYgaXQgaXMgaW4gdGhlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IGxvY2FsZSBUaGUgbG9jYWxlIHVzZWQgZm9yIHRyYW5zbGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtib29sZWFufSBJZiBhIGtleXdvcmQgaXMgZm91bmQsIHJldHVybnMgdHJ1ZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCB1cmwsIGtleXdvcmQsIGxvY2FsZSApIHtcblx0dmFyIGZvcm1hdFVybCA9IHVybC5tYXRjaCggLz4oLiopL2lnICk7XG5cblx0aWYgKCBmb3JtYXRVcmwgIT09IG51bGwgKSB7XG5cdFx0Zm9ybWF0VXJsID0gZm9ybWF0VXJsWyAwIF0ucmVwbGFjZSggLzwuKj8+XFxzPy9pZywgXCJcIiApO1xuXHRcdHJldHVybiBtYXRjaFRleHRXaXRoVHJhbnNsaXRlcmF0aW9uKCBmb3JtYXRVcmwsIGtleXdvcmQsIGxvY2FsZSApLmxlbmd0aCA+IDA7XG5cdH1cblxuXHRyZXR1cm4gZmFsc2U7XG59O1xuIiwiLyoqIEBtb2R1bGUgc3RyaW5nUHJvY2Vzc2luZy9nZXRBbHR0YWdDb250ZW50ICovXG5cbnZhciBzdHJpcFNwYWNlcyA9IHJlcXVpcmUoIFwiLi4vc3RyaW5nUHJvY2Vzc2luZy9zdHJpcFNwYWNlcy5qc1wiICk7XG5cbnZhciByZWdleEFsdFRhZyA9IC9hbHQ9KFsnXCJdKSguKj8pXFwxL2k7XG5cbi8qKlxuICogQ2hlY2tzIGZvciBhbiBhbHR0YWcgaW4gdGhlIGltYWdlIGFuZCByZXR1cm5zIGl0cyBjb250ZW50XG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHRleHQgVGV4dHN0cmluZyB0byBtYXRjaCBhbHRcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHRoZSBjb250ZW50cyBvZiB0aGUgYWx0dGFnLCBlbXB0eSBpZiBub25lIGlzIHNldC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiggdGV4dCApIHtcblx0dmFyIGFsdCA9IFwiXCI7XG5cblx0dmFyIG1hdGNoZXMgPSB0ZXh0Lm1hdGNoKCByZWdleEFsdFRhZyApO1xuXG5cdGlmICggbWF0Y2hlcyAhPT0gbnVsbCApIHtcblx0XHRhbHQgPSBzdHJpcFNwYWNlcyggbWF0Y2hlc1sgMiBdICk7XG5cblx0XHRhbHQgPSBhbHQucmVwbGFjZSggLyZxdW90Oy9nLCBcIlxcXCJcIiApO1xuXHRcdGFsdCA9IGFsdC5yZXBsYWNlKCAvJiMwMzk7L2csIFwiJ1wiICk7XG5cdH1cblx0cmV0dXJuIGFsdDtcbn07XG4iLCIvKiogQG1vZHVsZSBzdHJpbmdQcm9jZXNzaW5nL2dldEFuY2hvcnNGcm9tVGV4dCAqL1xuXG4vKipcbiAqIENoZWNrIGZvciBhbmNob3JzIGluIHRoZSB0ZXh0c3RyaW5nIGFuZCByZXR1cm5zIHRoZW0gaW4gYW4gYXJyYXkuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHRleHQgVGhlIHRleHQgdG8gY2hlY2sgZm9yIG1hdGNoZXMuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFRoZSBtYXRjaGVkIGxpbmtzIGluIHRleHQuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oIHRleHQgKSB7XG5cdHZhciBtYXRjaGVzO1xuXG5cdC8vIFJlZ2V4IG1hdGNoZXMgZXZlcnl0aGluZyBiZXR3ZWVuIDxhPiBhbmQgPC9hPlxuXHRtYXRjaGVzID0gdGV4dC5tYXRjaCggLzxhKD86W14+XSspPz4oLio/KTxcXC9hPi9pZyApO1xuXG5cdGlmICggbWF0Y2hlcyA9PT0gbnVsbCApIHtcblx0XHRtYXRjaGVzID0gW107XG5cdH1cblxuXHRyZXR1cm4gbWF0Y2hlcztcbn07XG4iLCIvKiogQG1vZHVsZSBzdHJpbmdQcm9jZXNzL2dldExpbmtUeXBlICovXG5cbnZhciB1cmxIZWxwZXIgPSByZXF1aXJlKCBcIi4vdXJsXCIgKTtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHRoZSB0eXBlIG9mIGxpbmsuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQgU3RyaW5nIHdpdGggYW5jaG9yIHRhZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVXJsIHRvIG1hdGNoIGFnYWluc3QuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgbGluayB0eXBlIChvdGhlciwgZXh0ZXJuYWwgb3IgaW50ZXJuYWwpLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oIHRleHQsIHVybCApIHtcblx0dmFyIGxpbmtUeXBlID0gXCJvdGhlclwiO1xuXG5cdHZhciBhbmNob3JVcmwgPSB1cmxIZWxwZXIuZ2V0RnJvbUFuY2hvclRhZyggdGV4dCApO1xuXG5cdC8vIE1hdGNoZXMgYWxsIGxpbmtzIHRoYXQgc3RhcnQgd2l0aCBodHRwOi8vIGFuZCBodHRwczovLywgY2FzZSBpbnNlbnNpdGl2ZSBhbmQgZ2xvYmFsXG5cdGlmICggYW5jaG9yVXJsLm1hdGNoKCAvaHR0cHM/OlxcL1xcLy9pZyApICE9PSBudWxsICkge1xuXHRcdGxpbmtUeXBlID0gXCJleHRlcm5hbFwiO1xuXG5cdFx0aWYgKCB1cmxIZWxwZXIuZ2V0SG9zdG5hbWUoIGFuY2hvclVybCApID09PSB1cmxIZWxwZXIuZ2V0SG9zdG5hbWUoIHVybCApICkge1xuXHRcdFx0bGlua1R5cGUgPSBcImludGVybmFsXCI7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGxpbmtUeXBlO1xufTtcbiIsInZhciBtYXAgPSByZXF1aXJlKCBcImxvZGFzaC9tYXBcIiApO1xudmFyIGlzVW5kZWZpbmVkID0gcmVxdWlyZSggXCJsb2Rhc2gvaXNVbmRlZmluZWRcIiApO1xudmFyIGZvckVhY2ggPSByZXF1aXJlKCBcImxvZGFzaC9mb3JFYWNoXCIgKTtcbnZhciBpc05hTiA9IHJlcXVpcmUoIFwibG9kYXNoL2lzTmFOXCIgKTtcbnZhciBmaWx0ZXIgPSByZXF1aXJlKCBcImxvZGFzaC9maWx0ZXJcIiApO1xudmFyIGZsYXRNYXAgPSByZXF1aXJlKCBcImxvZGFzaC9mbGF0TWFwXCIgKTtcbnZhciBpc0VtcHR5ID0gcmVxdWlyZSggXCJsb2Rhc2gvaXNFbXB0eVwiICk7XG52YXIgbmVnYXRlID0gcmVxdWlyZSggXCJsb2Rhc2gvbmVnYXRlXCIgKTtcbnZhciBtZW1vaXplID0gcmVxdWlyZSggXCJsb2Rhc2gvbWVtb2l6ZVwiICk7XG5cbnZhciBjb3JlID0gcmVxdWlyZSggXCJ0b2tlbml6ZXIyL2NvcmVcIiApO1xuXG52YXIgZ2V0QmxvY2tzID0gcmVxdWlyZSggXCIuLi9oZWxwZXJzL2h0bWwuanNcIiApLmdldEJsb2NrcztcbnZhciBub3JtYWxpemVRdW90ZXMgPSByZXF1aXJlKCBcIi4uL3N0cmluZ1Byb2Nlc3NpbmcvcXVvdGVzLmpzXCIgKS5ub3JtYWxpemU7XG5cbnZhciB1bmlmeVdoaXRlc3BhY2UgPSByZXF1aXJlKCBcIi4uL3N0cmluZ1Byb2Nlc3NpbmcvdW5pZnlXaGl0ZXNwYWNlLmpzXCIgKS51bmlmeU5vbkJyZWFraW5nU3BhY2U7XG5cbi8vIEFsbCBjaGFyYWN0ZXJzIHRoYXQgaW5kaWNhdGUgYSBzZW50ZW5jZSBkZWxpbWl0ZXIuXG52YXIgZnVsbFN0b3AgPSBcIi5cIjtcbi8vIFRoZSBcXHUyMDI2IGNoYXJhY3RlciBpcyBhbiBlbGxpcHNpc1xudmFyIHNlbnRlbmNlRGVsaW1pdGVycyA9IFwiPyE7XFx1MjAyNlwiO1xudmFyIG5ld0xpbmVzID0gXCJcXG5cXHJ8XFxufFxcclwiO1xuXG52YXIgZnVsbFN0b3BSZWdleCA9IG5ldyBSZWdFeHAoIFwiXltcIiArIGZ1bGxTdG9wICsgXCJdJFwiICk7XG52YXIgc2VudGVuY2VEZWxpbWl0ZXJSZWdleCA9IG5ldyBSZWdFeHAoIFwiXltcIiArIHNlbnRlbmNlRGVsaW1pdGVycyArIFwiXSRcIiApO1xudmFyIHNlbnRlbmNlUmVnZXggPSBuZXcgUmVnRXhwKCBcIl5bXlwiICsgZnVsbFN0b3AgKyBzZW50ZW5jZURlbGltaXRlcnMgKyBcIjxcXFxcKFxcXFwpXFxcXFtcXFxcXV0rJFwiICk7XG52YXIgaHRtbFN0YXJ0UmVnZXggPSAvXjwoW14+XFxzXFwvXSspW14+XSo+JC9taTtcbnZhciBodG1sRW5kUmVnZXggPSAvXjxcXC8oW14+XFxzXSspW14+XSo+JC9taTtcbnZhciBuZXdMaW5lUmVnZXggPSBuZXcgUmVnRXhwKCBuZXdMaW5lcyApO1xuXG52YXIgYmxvY2tTdGFydFJlZ2V4ID0gL15cXHMqW1xcW1xcKFxce11cXHMqJC87XG52YXIgYmxvY2tFbmRSZWdleCA9IC9eXFxzKltcXF1cXCl9XVxccyokLztcblxudmFyIHRva2VucyA9IFtdO1xudmFyIHNlbnRlbmNlVG9rZW5pemVyO1xuXG4vKipcbiAqIENyZWF0ZXMgYSB0b2tlbml6ZXIgdG8gY3JlYXRlIHRva2VucyBmcm9tIGEgc2VudGVuY2UuXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVRva2VuaXplcigpIHtcblx0dG9rZW5zID0gW107XG5cblx0c2VudGVuY2VUb2tlbml6ZXIgPSBjb3JlKCBmdW5jdGlvbiggdG9rZW4gKSB7XG5cdFx0dG9rZW5zLnB1c2goIHRva2VuICk7XG5cdH0gKTtcblxuXHRzZW50ZW5jZVRva2VuaXplci5hZGRSdWxlKCBodG1sU3RhcnRSZWdleCwgXCJodG1sLXN0YXJ0XCIgKTtcblx0c2VudGVuY2VUb2tlbml6ZXIuYWRkUnVsZSggaHRtbEVuZFJlZ2V4LCBcImh0bWwtZW5kXCIgKTtcblx0c2VudGVuY2VUb2tlbml6ZXIuYWRkUnVsZSggYmxvY2tTdGFydFJlZ2V4LCBcImJsb2NrLXN0YXJ0XCIgKTtcblx0c2VudGVuY2VUb2tlbml6ZXIuYWRkUnVsZSggYmxvY2tFbmRSZWdleCwgXCJibG9jay1lbmRcIiApO1xuXHRzZW50ZW5jZVRva2VuaXplci5hZGRSdWxlKCBmdWxsU3RvcFJlZ2V4LCBcImZ1bGwtc3RvcFwiICk7XG5cdHNlbnRlbmNlVG9rZW5pemVyLmFkZFJ1bGUoIHNlbnRlbmNlRGVsaW1pdGVyUmVnZXgsIFwic2VudGVuY2UtZGVsaW1pdGVyXCIgKTtcblx0c2VudGVuY2VUb2tlbml6ZXIuYWRkUnVsZSggc2VudGVuY2VSZWdleCwgXCJzZW50ZW5jZVwiICk7XG59XG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCBhIGNlcnRhaW4gY2hhcmFjdGVyIGlzIGEgY2FwaXRhbCBsZXR0ZXIuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNoYXJhY3RlciBUaGUgY2hhcmFjdGVyIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IHRoZSBjaGFyYWN0ZXIgaXMgYSBjYXBpdGFsIGxldHRlci5cbiAqL1xuZnVuY3Rpb24gaXNDYXBpdGFsTGV0dGVyKCBjaGFyYWN0ZXIgKSB7XG5cdHJldHVybiBjaGFyYWN0ZXIgIT09IGNoYXJhY3Rlci50b0xvY2FsZUxvd2VyQ2FzZSgpO1xufVxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgYSBjZXJ0YWluIGNoYXJhY3RlciBpcyBhIG51bWJlci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY2hhcmFjdGVyIFRoZSBjaGFyYWN0ZXIgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIGNoYXJhY3RlciBpcyBhIGNhcGl0YWwgbGV0dGVyLlxuICovXG5mdW5jdGlvbiBpc051bWJlciggY2hhcmFjdGVyICkge1xuXHRyZXR1cm4gISBpc05hTiggcGFyc2VJbnQoIGNoYXJhY3RlciwgMTAgKSApO1xufVxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgYSBnaXZlbiBIVE1MIHRhZyBpcyBhIGJyZWFrIHRhZy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gaHRtbFRhZyBUaGUgSFRNTCB0YWcgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIGdpdmVuIEhUTUwgdGFnIGlzIGEgYnJlYWsgdGFnLlxuICovXG5mdW5jdGlvbiBpc0JyZWFrVGFnKCBodG1sVGFnICkge1xuXHRyZXR1cm4gLzxici8udGVzdCggaHRtbFRhZyApO1xufVxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgYSBnaXZlbiBjaGFyYWN0ZXIgaXMgcXVvdGF0aW9uIG1hcmsuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNoYXJhY3RlciBUaGUgY2hhcmFjdGVyIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IHRoZSBnaXZlbiBjaGFyYWN0ZXIgaXMgYSBxdW90YXRpb24gbWFyay5cbiAqL1xuZnVuY3Rpb24gaXNRdW90YXRpb24oIGNoYXJhY3RlciApIHtcblx0Y2hhcmFjdGVyID0gbm9ybWFsaXplUXVvdGVzKCBjaGFyYWN0ZXIgKTtcblxuXHRyZXR1cm4gXCInXCIgPT09IGNoYXJhY3RlclxuXHRcdHx8IFwiXFxcIlwiID09PSBjaGFyYWN0ZXI7XG59XG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCBhIGdpdmVuIGNoYXJhY3RlciBpcyBhIHB1bmN0dWF0aW9uIG1hcmsgdGhhdCBjYW4gYmUgYXQgdGhlIGJlZ2lubmluZ1xuICogb2YgYSBzZW50ZW5jZSwgbGlrZSDCvyBhbmQgwqEgdXNlZCBpbiBTcGFuaXNoLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjaGFyYWN0ZXIgVGhlIGNoYXJhY3RlciB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgZ2l2ZW4gY2hhcmFjdGVyIGlzIGEgcHVuY3R1YXRpb24gbWFyay5cbiAqL1xuZnVuY3Rpb24gaXNQdW5jdHVhdGlvbiggY2hhcmFjdGVyICkge1xuXHRyZXR1cm4gXCLCv1wiID09PSBjaGFyYWN0ZXJcblx0XHR8fCBcIsKhXCIgPT09IGNoYXJhY3Rlcjtcbn1cblxuLyoqXG4gKiBUb2tlbml6ZXMgYSBzZW50ZW5jZSwgYXNzdW1lcyB0aGF0IHRoZSB0ZXh0IGhhcyBhbHJlYWR5IGJlZW4gc3BsaXQgaW50byBibG9ja3MuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQgVGhlIHRleHQgdG8gdG9rZW5pemUuXG4gKiBAcmV0dXJucyB7QXJyYXl9IEFuIGFycmF5IG9mIHRva2Vucy5cbiAqL1xuZnVuY3Rpb24gdG9rZW5pemVTZW50ZW5jZXMoIHRleHQgKSB7XG5cdGNyZWF0ZVRva2VuaXplcigpO1xuXHRzZW50ZW5jZVRva2VuaXplci5vblRleHQoIHRleHQgKTtcblxuXHRzZW50ZW5jZVRva2VuaXplci5lbmQoKTtcblxuXHRyZXR1cm4gdG9rZW5zO1xufVxuXG4vKipcbiAqIFJlbW92ZXMgZHVwbGljYXRlIHdoaXRlc3BhY2UgZnJvbSBhIGdpdmVuIHRleHQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQgVGhlIHRleHQgd2l0aCBkdXBsaWNhdGUgd2hpdGVzcGFjZS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSB0ZXh0IHdpdGhvdXQgZHVwbGljYXRlIHdoaXRlc3BhY2UuXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUR1cGxpY2F0ZVdoaXRlc3BhY2UoIHRleHQgKSB7XG5cdHJldHVybiB0ZXh0LnJlcGxhY2UoIC9cXHMrLywgXCIgXCIgKTtcbn1cblxuLyoqXG4gKiBSZXRyaWV2ZXMgdGhlIG5leHQgdHdvIGNoYXJhY3RlcnMgZnJvbSBhbiBhcnJheSB3aXRoIHRoZSB0d28gbmV4dCB0b2tlbnMuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gbmV4dFRva2VucyBUaGUgdHdvIG5leHQgdG9rZW5zLiBNaWdodCBiZSB1bmRlZmluZWQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgbmV4dCB0d28gY2hhcmFjdGVycy5cbiAqL1xuZnVuY3Rpb24gZ2V0TmV4dFR3b0NoYXJhY3RlcnMoIG5leHRUb2tlbnMgKSB7XG5cdHZhciBuZXh0ID0gXCJcIjtcblxuXHRpZiAoICEgaXNVbmRlZmluZWQoIG5leHRUb2tlbnNbIDAgXSApICkge1xuXHRcdG5leHQgKz0gbmV4dFRva2Vuc1sgMCBdLnNyYztcblx0fVxuXG5cdGlmICggISBpc1VuZGVmaW5lZCggbmV4dFRva2Vuc1sgMSBdICkgKSB7XG5cdFx0bmV4dCArPSBuZXh0VG9rZW5zWyAxIF0uc3JjO1xuXHR9XG5cblx0bmV4dCA9IHJlbW92ZUR1cGxpY2F0ZVdoaXRlc3BhY2UoIG5leHQgKTtcblxuXHRyZXR1cm4gbmV4dDtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIHNlbnRlbmNlQmVnaW5uaW5nIGJlZ2lubmluZyBpcyBhIHZhbGlkIGJlZ2lubmluZy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc2VudGVuY2VCZWdpbm5pbmcgVGhlIGJlZ2lubmluZyBvZiB0aGUgc2VudGVuY2UgdG8gdmFsaWRhdGUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIGl0IGlzIGEgdmFsaWQgYmVnaW5uaW5nLCBmYWxzZSBpZiBpdCBpcyBub3QuXG4gKi9cbmZ1bmN0aW9uIGlzVmFsaWRTZW50ZW5jZUJlZ2lubmluZyggc2VudGVuY2VCZWdpbm5pbmcgKSB7XG5cdHJldHVybiAoXG5cdFx0aXNDYXBpdGFsTGV0dGVyKCBzZW50ZW5jZUJlZ2lubmluZyApIHx8XG5cdFx0aXNOdW1iZXIoIHNlbnRlbmNlQmVnaW5uaW5nICkgfHxcblx0XHRpc1F1b3RhdGlvbiggc2VudGVuY2VCZWdpbm5pbmcgKSB8fFxuXHRcdGlzUHVuY3R1YXRpb24oIHNlbnRlbmNlQmVnaW5uaW5nIClcblx0KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIHRva2VuIGlzIGEgdmFsaWQgc2VudGVuY2UgZW5kaW5nLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB0b2tlbiBUaGUgdG9rZW4gdG8gdmFsaWRhdGUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIHRoZSB0b2tlbiBpcyB2YWxpZCBlbmRpbmcsIGZhbHNlIGlmIGl0IGlzIG5vdC5cbiAqL1xuZnVuY3Rpb24gaXNTZW50ZW5jZVN0YXJ0KCB0b2tlbiApIHtcblx0cmV0dXJuICggIWlzVW5kZWZpbmVkKCB0b2tlbiApICYmIChcblx0XHRcImh0bWwtc3RhcnRcIiA9PT0gdG9rZW4udHlwZSB8fFxuXHRcdFwiaHRtbC1lbmRcIiA9PT0gdG9rZW4udHlwZSB8fFxuXHRcdFwiYmxvY2stc3RhcnRcIiA9PT0gdG9rZW4udHlwZVxuXHQpICk7XG59XG5cbi8qKlxuICogUmV0dXJucyBhbiBhcnJheSBvZiBzZW50ZW5jZXMgZm9yIGEgZ2l2ZW4gYXJyYXkgb2YgdG9rZW5zLCBhc3N1bWVzIHRoYXQgdGhlIHRleHQgaGFzIGFscmVhZHkgYmVlbiBzcGxpdCBpbnRvIGJsb2Nrcy5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSB0b2tlbnMgVGhlIHRva2VucyBmcm9tIHRoZSBzZW50ZW5jZSB0b2tlbml6ZXIuXG4gKiBAcmV0dXJucyB7QXJyYXk8c3RyaW5nPn0gQSBsaXN0IG9mIHNlbnRlbmNlcy5cbiAqL1xuZnVuY3Rpb24gZ2V0U2VudGVuY2VzRnJvbVRva2VucyggdG9rZW5zICkge1xuXHR2YXIgdG9rZW5TZW50ZW5jZXMgPSBbXSwgY3VycmVudFNlbnRlbmNlID0gXCJcIiwgbmV4dFNlbnRlbmNlU3RhcnQ7XG5cblx0dmFyIHNsaWNlZDtcblxuXHQvLyBEcm9wIHRoZSBmaXJzdCBhbmQgbGFzdCBIVE1MIHRhZyBpZiBib3RoIGFyZSBwcmVzZW50LlxuXHRkbyB7XG5cdFx0c2xpY2VkID0gZmFsc2U7XG5cdFx0dmFyIGZpcnN0VG9rZW4gPSB0b2tlbnNbIDAgXTtcblx0XHR2YXIgbGFzdFRva2VuID0gdG9rZW5zWyB0b2tlbnMubGVuZ3RoIC0gMSBdO1xuXG5cdFx0aWYgKCBmaXJzdFRva2VuLnR5cGUgPT09IFwiaHRtbC1zdGFydFwiICYmIGxhc3RUb2tlbi50eXBlID09PSBcImh0bWwtZW5kXCIgKSB7XG5cdFx0XHR0b2tlbnMgPSB0b2tlbnMuc2xpY2UoIDEsIHRva2Vucy5sZW5ndGggLSAxICk7XG5cblx0XHRcdHNsaWNlZCA9IHRydWU7XG5cdFx0fVxuXHR9IHdoaWxlICggc2xpY2VkICYmIHRva2Vucy5sZW5ndGggPiAxICk7XG5cblx0Zm9yRWFjaCggdG9rZW5zLCBmdW5jdGlvbiggdG9rZW4sIGkgKSB7XG5cdFx0dmFyIGhhc05leHRTZW50ZW5jZTtcblx0XHR2YXIgbmV4dFRva2VuID0gdG9rZW5zWyBpICsgMSBdO1xuXHRcdHZhciBzZWNvbmRUb05leHRUb2tlbiA9IHRva2Vuc1sgaSArIDIgXTtcblx0XHR2YXIgbmV4dENoYXJhY3RlcnM7XG5cblx0XHRzd2l0Y2ggKCB0b2tlbi50eXBlICkge1xuXG5cdFx0XHRjYXNlIFwiaHRtbC1zdGFydFwiOlxuXHRcdFx0Y2FzZSBcImh0bWwtZW5kXCI6XG5cdFx0XHRcdGlmICggaXNCcmVha1RhZyggdG9rZW4uc3JjICkgKSB7XG5cdFx0XHRcdFx0dG9rZW5TZW50ZW5jZXMucHVzaCggY3VycmVudFNlbnRlbmNlICk7XG5cdFx0XHRcdFx0Y3VycmVudFNlbnRlbmNlID0gXCJcIjtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjdXJyZW50U2VudGVuY2UgKz0gdG9rZW4uc3JjO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIFwic2VudGVuY2VcIjpcblx0XHRcdFx0Y3VycmVudFNlbnRlbmNlICs9IHRva2VuLnNyYztcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgXCJzZW50ZW5jZS1kZWxpbWl0ZXJcIjpcblx0XHRcdFx0Y3VycmVudFNlbnRlbmNlICs9IHRva2VuLnNyYztcblxuXHRcdFx0XHRpZiAoICEgaXNVbmRlZmluZWQoIG5leHRUb2tlbiApICYmIFwiYmxvY2stZW5kXCIgIT09IG5leHRUb2tlbi50eXBlICkge1xuXHRcdFx0XHRcdHRva2VuU2VudGVuY2VzLnB1c2goIGN1cnJlbnRTZW50ZW5jZSApO1xuXHRcdFx0XHRcdGN1cnJlbnRTZW50ZW5jZSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgXCJmdWxsLXN0b3BcIjpcblx0XHRcdFx0Y3VycmVudFNlbnRlbmNlICs9IHRva2VuLnNyYztcblxuXHRcdFx0XHRuZXh0Q2hhcmFjdGVycyA9IGdldE5leHRUd29DaGFyYWN0ZXJzKCBbIG5leHRUb2tlbiwgc2Vjb25kVG9OZXh0VG9rZW4gXSApO1xuXG5cdFx0XHRcdC8vIEZvciBhIG5ldyBzZW50ZW5jZSB3ZSBuZWVkIHRvIGNoZWNrIHRoZSBuZXh0IHR3byBjaGFyYWN0ZXJzLlxuXHRcdFx0XHRoYXNOZXh0U2VudGVuY2UgPSBuZXh0Q2hhcmFjdGVycy5sZW5ndGggPj0gMjtcblx0XHRcdFx0bmV4dFNlbnRlbmNlU3RhcnQgPSBoYXNOZXh0U2VudGVuY2UgPyBuZXh0Q2hhcmFjdGVyc1sgMSBdIDogXCJcIjtcblx0XHRcdFx0Ly8gSWYgdGhlIG5leHQgY2hhcmFjdGVyIGlzIGEgbnVtYmVyLCBuZXZlciBzcGxpdC4gRm9yIGV4YW1wbGU6IElQdjQtbnVtYmVycy5cblx0XHRcdFx0aWYgKCBoYXNOZXh0U2VudGVuY2UgJiYgaXNOdW1iZXIoIG5leHRDaGFyYWN0ZXJzWyAwIF0gKSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0XHQvLyBPbmx5IHNwbGl0IG9uIHNlbnRlbmNlIGRlbGltaXRlcnMgd2hlbiB0aGUgbmV4dCBzZW50ZW5jZSBsb29rcyBsaWtlIHRoZSBzdGFydCBvZiBhIHNlbnRlbmNlLlxuXHRcdFx0XHRpZiAoICggaGFzTmV4dFNlbnRlbmNlICYmIGlzVmFsaWRTZW50ZW5jZUJlZ2lubmluZyggbmV4dFNlbnRlbmNlU3RhcnQgKSApIHx8IGlzU2VudGVuY2VTdGFydCggbmV4dFRva2VuICkgKSB7XG5cblx0XHRcdFx0XHR0b2tlblNlbnRlbmNlcy5wdXNoKCBjdXJyZW50U2VudGVuY2UgKTtcblx0XHRcdFx0XHRjdXJyZW50U2VudGVuY2UgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIFwibmV3bGluZVwiOlxuXHRcdFx0XHR0b2tlblNlbnRlbmNlcy5wdXNoKCBjdXJyZW50U2VudGVuY2UgKTtcblx0XHRcdFx0Y3VycmVudFNlbnRlbmNlID0gXCJcIjtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgXCJibG9jay1zdGFydFwiOlxuXHRcdFx0XHRjdXJyZW50U2VudGVuY2UgKz0gdG9rZW4uc3JjO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBcImJsb2NrLWVuZFwiOlxuXHRcdFx0XHRjdXJyZW50U2VudGVuY2UgKz0gdG9rZW4uc3JjO1xuXG5cdFx0XHRcdG5leHRDaGFyYWN0ZXJzID0gZ2V0TmV4dFR3b0NoYXJhY3RlcnMoIFsgbmV4dFRva2VuLCBzZWNvbmRUb05leHRUb2tlbiBdICk7XG5cblx0XHRcdFx0Ly8gRm9yIGEgbmV3IHNlbnRlbmNlIHdlIG5lZWQgdG8gY2hlY2sgdGhlIG5leHQgdHdvIGNoYXJhY3RlcnMuXG5cdFx0XHRcdGhhc05leHRTZW50ZW5jZSA9IG5leHRDaGFyYWN0ZXJzLmxlbmd0aCA+PSAyO1xuXHRcdFx0XHRuZXh0U2VudGVuY2VTdGFydCA9IGhhc05leHRTZW50ZW5jZSA/IG5leHRDaGFyYWN0ZXJzWyAwIF0gOiBcIlwiO1xuXHRcdFx0XHQvLyBJZiB0aGUgbmV4dCBjaGFyYWN0ZXIgaXMgYSBudW1iZXIsIG5ldmVyIHNwbGl0LiBGb3IgZXhhbXBsZTogSVB2NC1udW1iZXJzLlxuXHRcdFx0XHRpZiAoIGhhc05leHRTZW50ZW5jZSAmJiBpc051bWJlciggbmV4dENoYXJhY3RlcnNbIDAgXSApICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCAoIGhhc05leHRTZW50ZW5jZSAmJiBpc1ZhbGlkU2VudGVuY2VCZWdpbm5pbmcoIG5leHRTZW50ZW5jZVN0YXJ0ICkgKSB8fCBpc1NlbnRlbmNlU3RhcnQoIG5leHRUb2tlbiApICkge1xuXHRcdFx0XHRcdHRva2VuU2VudGVuY2VzLnB1c2goIGN1cnJlbnRTZW50ZW5jZSApO1xuXHRcdFx0XHRcdGN1cnJlbnRTZW50ZW5jZSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9ICk7XG5cblx0aWYgKCBcIlwiICE9PSBjdXJyZW50U2VudGVuY2UgKSB7XG5cdFx0dG9rZW5TZW50ZW5jZXMucHVzaCggY3VycmVudFNlbnRlbmNlICk7XG5cdH1cblxuXHR0b2tlblNlbnRlbmNlcyA9IG1hcCggdG9rZW5TZW50ZW5jZXMsIGZ1bmN0aW9uKCBzZW50ZW5jZSApIHtcblx0XHRyZXR1cm4gc2VudGVuY2UudHJpbSgpO1xuXHR9ICk7XG5cblx0cmV0dXJuIHRva2VuU2VudGVuY2VzO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHNlbnRlbmNlcyBmcm9tIGEgY2VydGFpbiBibG9jay5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmxvY2sgVGhlIEhUTUwgaW5zaWRlIGEgSFRNTCBibG9jay5cbiAqIEByZXR1cm5zIHtBcnJheTxzdHJpbmc+fSBUaGUgbGlzdCBvZiBzZW50ZW5jZXMgaW4gdGhlIGJsb2NrLlxuICovXG5mdW5jdGlvbiBnZXRTZW50ZW5jZXNGcm9tQmxvY2soIGJsb2NrICkge1xuXHR2YXIgdG9rZW5zID0gdG9rZW5pemVTZW50ZW5jZXMoIGJsb2NrICk7XG5cblx0cmV0dXJuIHRva2Vucy5sZW5ndGggPT09IDAgPyBbXSA6IGdldFNlbnRlbmNlc0Zyb21Ub2tlbnMoIHRva2VucyApO1xufVxuXG52YXIgZ2V0U2VudGVuY2VzRnJvbUJsb2NrQ2FjaGVkID0gbWVtb2l6ZSggZ2V0U2VudGVuY2VzRnJvbUJsb2NrICk7XG5cbi8qKlxuICogUmV0dXJucyBzZW50ZW5jZXMgaW4gYSBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHRleHQgVGhlIHN0cmluZyB0byBjb3VudCBzZW50ZW5jZXMgaW4uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFNlbnRlbmNlcyBmb3VuZCBpbiB0aGUgdGV4dC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiggdGV4dCApIHtcblx0dGV4dCA9IHVuaWZ5V2hpdGVzcGFjZSggdGV4dCApO1xuXHR2YXIgc2VudGVuY2VzLCBibG9ja3MgPSBnZXRCbG9ja3MoIHRleHQgKTtcblxuXHQvLyBTcGxpdCBlYWNoIGJsb2NrIG9uIG5ld2xpbmVzLlxuXHRibG9ja3MgPSBmbGF0TWFwKCBibG9ja3MsIGZ1bmN0aW9uKCBibG9jayApIHtcblx0XHRyZXR1cm4gYmxvY2suc3BsaXQoIG5ld0xpbmVSZWdleCApO1xuXHR9ICk7XG5cblx0c2VudGVuY2VzID0gZmxhdE1hcCggYmxvY2tzLCBnZXRTZW50ZW5jZXNGcm9tQmxvY2tDYWNoZWQgKTtcblxuXHRyZXR1cm4gZmlsdGVyKCBzZW50ZW5jZXMsIG5lZ2F0ZSggaXNFbXB0eSApICk7XG59O1xuIiwiLyoqXG4gKiBSZXR1cm5zIGFsbCB0ZXh0cyBwZXIgc3ViaGVhZGluZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IFRoZSB0ZXh0IHRvIGFuYWx5emUgZnJvbS5cbiAqIEByZXR1cm5zIHtBcnJheX0gYW4gYXJyYXkgd2l0aCB0ZXh0IGJsb2NrcyBwZXIgc3ViaGVhZGluZy5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiggdGV4dCApIHtcblx0Lypcblx0IE1hdGNoaW5nIHRoaXMgaW4gYSByZWdleCBpcyBwcmV0dHkgaGFyZCwgc2luY2Ugd2UgbmVlZCB0byBmaW5kIGEgd2F5IGZvciBtYXRjaGluZyB0aGUgdGV4dCBhZnRlciBhIGhlYWRpbmcsIGFuZCBiZWZvcmUgdGhlIGVuZCBvZiB0aGUgdGV4dC5cblx0IFRoZSBoYXJkIHRoaW5nIGNhcHR1cmluZyB0aGlzIGlzIHdpdGggYSBjYXB0dXJlLCBpdCBjYXB0dXJlcyB0aGUgbmV4dCBzdWJoZWFkaW5nIGFzIHdlbGwsIHNvIGl0IHNraXBzIHRoZSBuZXh0IHBhcnQgb2YgdGhlIHRleHQsXG5cdCBzaW5jZSB0aGUgc3ViaGVhZGluZyBpcyBhbHJlYWR5IG1hdGNoZWQuXG5cdCBGb3Igbm93IHdlIHVzZSB0aGlzIG1ldGhvZCB0byBiZSBzdXJlIHdlIGNhcHR1cmUgdGhlIHJpZ2h0IGJsb2NrcyBvZiB0ZXh0LiBXZSByZW1vdmUgYWxsIHwgJ3MgZnJvbSB0ZXh0LFxuXHQgdGhlbiByZXBsYWNlIGFsbCBoZWFkaW5ncyB3aXRoIGEgfCBhbmQgc3BsaXQgb24gYSB8LlxuXHQgKi9cblx0dGV4dCA9IHRleHQucmVwbGFjZSggL1xcfC9pZywgXCJcIiApO1xuXHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCAvPGgoWzEtNl0pKD86W14+XSspPz4oLio/KTxcXC9oXFwxPi9pZywgXCJ8XCIgKTtcblx0dmFyIHN1YmhlYWRpbmdzID0gIHRleHQuc3BsaXQoIFwifFwiICk7XG5cblx0Lypcblx0ICogV2UgbmV2ZXIgbmVlZCB0aGUgZmlyc3QgZW50cnksIGlmIHRoZSB0ZXh0IHN0YXJ0cyB3aXRoIGEgc3ViaGVhZGluZyBpdCB3aWxsIGJlIGVtcHR5LCBhbmQgaWYgdGhlIHRleHQgZG9lc24ndCBzdGFydCB3aXRoIGEgc3ViaGVhZGluZyxcblx0ICogdGhlIHRleHQgZG9lc250J3QgYmVsb25nIHRvIGEgc3ViaGVhZGluZywgc28gaXQgY2FuIGJlIHJlbW92ZWRcblx0ICovXG5cdHN1YmhlYWRpbmdzLnNoaWZ0KCk7XG5cdHJldHVybiBzdWJoZWFkaW5ncztcbn07XG5cblxuIiwidmFyIG1hcCA9IHJlcXVpcmUoIFwibG9kYXNoL21hcFwiICk7XG5cbi8qKlxuICogR2V0cyBhbGwgc3ViaGVhZGluZ3MgZnJvbSB0aGUgdGV4dCBhbmQgcmV0dXJucyB0aGVzZSBpbiBhbiBhcnJheS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dCBUaGUgdGV4dCB0byByZXR1cm4gdGhlIGhlYWRpbmdzIGZyb20uXG4gKiBAcmV0dXJucyB7QXJyYXl9IE1hdGNoZXMgb2Ygc3ViaGVhZGluZ3MgaW4gdGhlIHRleHQsIGZpcnN0IGtleSBpcyBldmVyeXRoaW5nIGluY2x1ZGluZyB0YWdzLCBzZWNvbmQgaXMgdGhlIGhlYWRpbmdcbiAqICAgICAgICAgICAgICAgICAgbGV2ZWwsIHRoaXJkIGlzIHRoZSBjb250ZW50IG9mIHRoZSBzdWJoZWFkaW5nLlxuICovXG5mdW5jdGlvbiBnZXRTdWJoZWFkaW5ncyggdGV4dCApIHtcblx0dmFyIHN1YmhlYWRpbmdzID0gW107XG5cdHZhciByZWdleCA9IC88aChbMS02XSkoPzpbXj5dKyk/PiguKj8pPFxcL2hcXDE+L2lnO1xuXHR2YXIgbWF0Y2g7XG5cblx0d2hpbGUgKCAoIG1hdGNoID0gcmVnZXguZXhlYyggdGV4dCApICkgIT09IG51bGwgKSB7XG5cdFx0c3ViaGVhZGluZ3MucHVzaCggbWF0Y2ggKTtcblx0fVxuXG5cdHJldHVybiBzdWJoZWFkaW5ncztcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBjb250ZW50IG9mIHN1YmhlYWRpbmdzIGluIHRoZSB0ZXh0XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQgVGhlIHRleHQgdG8gZ2V0IHRoZSBzdWJoZWFkaW5nIGNvbnRlbnRzIGZyb20uXG4gKiBAcmV0dXJucyB7QXJyYXk8c3RyaW5nPn0gQSBsaXN0IG9mIGFsbCB0aGUgc3ViaGVhZGluZ3Mgd2l0aCB0aGVpciBjb250ZW50LlxuICovXG5mdW5jdGlvbiBnZXRTdWJoZWFkaW5nQ29udGVudHMoIHRleHQgKSB7XG5cdHZhciBzdWJoZWFkaW5ncyA9IGdldFN1YmhlYWRpbmdzKCB0ZXh0ICk7XG5cblx0c3ViaGVhZGluZ3MgPSBtYXAoIHN1YmhlYWRpbmdzLCBmdW5jdGlvbiggc3ViaGVhZGluZyApIHtcblx0XHRyZXR1cm4gc3ViaGVhZGluZ1sgMCBdO1xuXHR9ICk7XG5cblx0cmV0dXJuIHN1YmhlYWRpbmdzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0Z2V0U3ViaGVhZGluZ3M6IGdldFN1YmhlYWRpbmdzLFxuXHRnZXRTdWJoZWFkaW5nQ29udGVudHM6IGdldFN1YmhlYWRpbmdDb250ZW50cyxcbn07XG4iLCIvKiogQG1vZHVsZSBzdHJpbmdQcm9jZXNzaW5nL2NvdW50V29yZHMgKi9cblxudmFyIHN0cmlwVGFncyA9IHJlcXVpcmUoIFwiLi9zdHJpcEhUTUxUYWdzLmpzXCIgKS5zdHJpcEZ1bGxUYWdzO1xudmFyIHN0cmlwU3BhY2VzID0gcmVxdWlyZSggXCIuL3N0cmlwU3BhY2VzLmpzXCIgKTtcbnZhciByZW1vdmVUZXJtaW5hdG9ycyA9IHJlcXVpcmUoIFwiLi9yZW1vdmVUZXJtaW5hdG9ycy5qc1wiICk7XG52YXIgbWFwID0gcmVxdWlyZSggXCJsb2Rhc2gvbWFwXCIgKTtcbnZhciBmaWx0ZXIgPSByZXF1aXJlKCBcImxvZGFzaC9maWx0ZXJcIiApO1xuXG4vKipcbiAqIFJldHVybnMgYW4gYXJyYXkgd2l0aCB3b3JkcyB1c2VkIGluIHRoZSB0ZXh0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IFRoZSB0ZXh0IHRvIGJlIGNvdW50ZWQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFRoZSBhcnJheSB3aXRoIGFsbCB3b3Jkcy5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiggdGV4dCApIHtcblx0dGV4dCA9IHN0cmlwU3BhY2VzKCBzdHJpcFRhZ3MoIHRleHQgKSApO1xuXHRpZiAoIHRleHQgPT09IFwiXCIgKSB7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cblx0dmFyIHdvcmRzID0gdGV4dC5zcGxpdCggL1xccy9nICk7XG5cblx0d29yZHMgPSBtYXAoIHdvcmRzLCBmdW5jdGlvbiggd29yZCApIHtcblx0XHRyZXR1cm4gcmVtb3ZlVGVybWluYXRvcnMoIHdvcmQgKTtcblx0fSApO1xuXG5cdHJldHVybiBmaWx0ZXIoIHdvcmRzLCBmdW5jdGlvbiggd29yZCApIHtcblx0XHRyZXR1cm4gd29yZC50cmltKCkgIT09IFwiXCI7XG5cdH0gKTtcbn07XG5cbiIsIi8qKiBAbW9kdWxlIHN0cmluZ1Byb2Nlc3NpbmcvaW1hZ2VJblRleHQgKi9cblxudmFyIG1hdGNoU3RyaW5nV2l0aFJlZ2V4ID0gcmVxdWlyZSggXCIuL21hdGNoU3RyaW5nV2l0aFJlZ2V4LmpzXCIgKTtcblxuLyoqXG4gKiBDaGVja3MgdGhlIHRleHQgZm9yIGltYWdlcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dCBUaGUgdGV4dHN0cmluZyB0byBjaGVjayBmb3IgaW1hZ2VzXG4gKiBAcmV0dXJucyB7QXJyYXl9IEFycmF5IGNvbnRhaW5pbmcgYWxsIHR5cGVzIG9mIGZvdW5kIGltYWdlc1xuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRyZXR1cm4gbWF0Y2hTdHJpbmdXaXRoUmVnZXgoIHRleHQsIFwiPGltZyg/OltePl0rKT8+XCIgKTtcbn07XG4iLCJ2YXIgbWFwID0gcmVxdWlyZSggXCJsb2Rhc2gvbWFwXCIgKTtcbnZhciBmbGF0TWFwID0gcmVxdWlyZSggXCJsb2Rhc2gvZmxhdE1hcFwiICk7XG52YXIgZmlsdGVyID0gcmVxdWlyZSggXCJsb2Rhc2gvZmlsdGVyXCIgKTtcblxudmFyIGdldEJsb2NrcyA9IHJlcXVpcmUoIFwiLi4vaGVscGVycy9odG1sXCIgKS5nZXRCbG9ja3M7XG5cbi8qKlxuICogTWF0Y2hlcyB0aGUgcGFyYWdyYXBocyBpbiA8cD4tdGFncyBhbmQgcmV0dXJucyB0aGUgdGV4dCBpbiB0aGVtLlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQgVGhlIHRleHQgdG8gbWF0Y2ggcGFyYWdyYXBoIGluLlxuICogQHJldHVybnMge2FycmF5fSBBbiBhcnJheSBjb250YWluaW5nIGFsbCBwYXJhZ3JhcGhzIHRleHRzLlxuICovXG52YXIgZ2V0UGFyYWdyYXBoc0luVGFncyA9IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHR2YXIgcGFyYWdyYXBocyA9IFtdO1xuXHQvLyBNYXRjaGVzIGV2ZXJ5dGhpbmcgYmV0d2VlbiB0aGUgPHA+IGFuZCA8L3A+IHRhZ3MuXG5cdHZhciByZWdleCA9IC88cCg/OltePl0rKT8+KC4qPyk8XFwvcD4vaWc7XG5cdHZhciBtYXRjaDtcblxuXHR3aGlsZSAoICggbWF0Y2ggPSByZWdleC5leGVjKCB0ZXh0ICkgKSAhPT0gbnVsbCApIHtcblx0XHRwYXJhZ3JhcGhzLnB1c2goIG1hdGNoICk7XG5cdH1cblxuXHQvLyBSZXR1cm5zIG9ubHkgdGhlIHRleHQgZnJvbSB3aXRoaW4gdGhlIHBhcmFncmFwaCB0YWdzLlxuXHRyZXR1cm4gbWFwKCBwYXJhZ3JhcGhzLCBmdW5jdGlvbiggcGFyYWdyYXBoICkge1xuXHRcdHJldHVybiBwYXJhZ3JhcGhbIDEgXTtcblx0fSApO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIGFycmF5IHdpdGggYWxsIHBhcmFncmFwaHMgZnJvbSB0aGUgdGV4dC5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IFRoZSB0ZXh0IHRvIG1hdGNoIHBhcmFncmFwaCBpbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gVGhlIGFycmF5IGNvbnRhaW5pbmcgYWxsIHBhcmFncmFwaHMgZnJvbSB0aGUgdGV4dC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiggdGV4dCApIHtcblx0dmFyIHBhcmFncmFwaHMgPSBnZXRQYXJhZ3JhcGhzSW5UYWdzKCB0ZXh0ICk7XG5cblx0aWYgKCBwYXJhZ3JhcGhzLmxlbmd0aCA+IDAgKSB7XG5cdFx0cmV0dXJuIHBhcmFncmFwaHM7XG5cdH1cblxuXHQvLyBJZiBubyA8cD4gdGFncyBmb3VuZCwgc3BsaXQgb24gZG91YmxlIGxpbmVicmVha3MuXG5cdHZhciBibG9ja3MgPSBnZXRCbG9ja3MoIHRleHQgKTtcblxuXHRibG9ja3MgPSBmaWx0ZXIoIGJsb2NrcywgZnVuY3Rpb24oIGJsb2NrICkge1xuXHRcdC8vIE1hdGNoIGV4cGxpY2l0IHBhcmFncmFwaCB0YWdzLCBvciBpZiBhIGJsb2NrIGhhcyBubyBIVE1MIHRhZ3MuXG5cdFx0cmV0dXJuIDAgIT09IGJsb2NrLmluZGV4T2YoIFwiPGhcIiApO1xuXHR9ICk7XG5cblx0cGFyYWdyYXBocyA9IGZsYXRNYXAoIGJsb2NrcywgZnVuY3Rpb24oIGJsb2NrICkge1xuXHRcdHJldHVybiBibG9jay5zcGxpdCggXCJcXG5cXG5cIiApO1xuXHR9ICk7XG5cblx0aWYgKCBwYXJhZ3JhcGhzLmxlbmd0aCA+IDAgKSB7XG5cdFx0cmV0dXJuIHBhcmFncmFwaHM7XG5cdH1cblxuXHQvLyBJZiBubyBwYXJhZ3JhcGhzIGFyZSBmb3VuZCwgcmV0dXJuIGFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIGVudGlyZSB0ZXh0LlxuXHRyZXR1cm4gWyB0ZXh0IF07XG59O1xuIiwiLyoqIEBtb2R1bGUgc3RyaW5nUHJvY2Vzc2luZy9tYXRjaFN0cmluZ1dpdGhSZWdleCAqL1xuXG4vKipcbiAqIENoZWNrcyBhIHN0cmluZyB3aXRoIGEgcmVnZXgsIHJldHVybiBhbGwgbWF0Y2hlcyBmb3VuZCB3aXRoIHRoYXQgcmVnZXguXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHRleHQgVGhlIHRleHQgdG8gbWF0Y2ggdGhlXG4gKiBAcGFyYW0ge1N0cmluZ30gcmVnZXhTdHJpbmcgQSBzdHJpbmcgdG8gdXNlIGFzIHJlZ2V4LlxuICogQHJldHVybnMge0FycmF5fSBBcnJheSB3aXRoIG1hdGNoZXMsIGVtcHR5IGFycmF5IGlmIG5vIG1hdGNoZXMgZm91bmQuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oIHRleHQsIHJlZ2V4U3RyaW5nICkge1xuXHR2YXIgcmVnZXggPSBuZXcgUmVnRXhwKCByZWdleFN0cmluZywgXCJpZ1wiICk7XG5cdHZhciBtYXRjaGVzID0gdGV4dC5tYXRjaCggcmVnZXggKTtcblxuXHRpZiAoIG1hdGNoZXMgPT09IG51bGwgKSB7XG5cdFx0bWF0Y2hlcyA9IFtdO1xuXHR9XG5cblx0cmV0dXJuIG1hdGNoZXM7XG59O1xuIiwidmFyIG1hcCA9IHJlcXVpcmUoIFwibG9kYXNoL21hcFwiICk7XG52YXIgYWRkV29yZEJvdW5kYXJ5ID0gcmVxdWlyZSggXCIuL2FkZFdvcmRib3VuZGFyeS5qc1wiICk7XG52YXIgc3RyaXBTcGFjZXMgPSByZXF1aXJlKCBcIi4vc3RyaXBTcGFjZXMuanNcIiApO1xudmFyIHRyYW5zbGl0ZXJhdGUgPSByZXF1aXJlKCBcIi4vdHJhbnNsaXRlcmF0ZS5qc1wiICk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHJlZ2V4IGZyb20gdGhlIGtleXdvcmQgd2l0aCBpbmNsdWRlZCB3b3JkYm91bmRhcmllcy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXl3b3JkIFRoZSBrZXl3b3JkIHRvIGNyZWF0ZSBhIHJlZ2V4IGZyb20uXG4gKiBAcmV0dXJucyB7UmVnRXhwfSBSZWd1bGFyIGV4cHJlc3Npb24gb2YgdGhlIGtleXdvcmQgd2l0aCB3b3JkYm91bmRhcmllcy5cbiAqL1xudmFyIHRvUmVnZXggPSBmdW5jdGlvbigga2V5d29yZCApIHtcblx0a2V5d29yZCA9IGFkZFdvcmRCb3VuZGFyeSgga2V5d29yZCApO1xuXHRyZXR1cm4gbmV3IFJlZ0V4cCgga2V5d29yZCwgXCJpZ1wiICk7XG59O1xuXG4vKipcbiAqIE1hdGNoZXMgYSBzdHJpbmcgd2l0aCBhbmQgd2l0aG91dCB0cmFuc2xpdGVyYXRpb24uXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dCBUaGUgdGV4dCB0byBtYXRjaC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXl3b3JkIFRoZSBrZXl3b3JkIHRvIG1hdGNoIGluIHRoZSB0ZXh0LlxuICogQHBhcmFtIHtzdHJpbmd9IGxvY2FsZSBUaGUgbG9jYWxlIHVzZWQgZm9yIHRyYW5zbGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gQWxsIG1hdGNoZXMgZnJvbSB0aGUgb3JpZ2luYWwgYXMgdGhlIHRyYW5zbGl0ZXJhdGVkIHRleHQgYW5kIGtleXdvcmQuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oIHRleHQsIGtleXdvcmQsIGxvY2FsZSApIHtcblx0dmFyIGtleXdvcmRSZWdleCA9IHRvUmVnZXgoIGtleXdvcmQgKTtcblx0dmFyIG1hdGNoZXMgPSB0ZXh0Lm1hdGNoKCBrZXl3b3JkUmVnZXggKSB8fCBbXTtcblxuXHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCBrZXl3b3JkUmVnZXgsIFwiXCIgKTtcblxuXHR2YXIgdHJhbnNsaXRlcmF0ZUtleXdvcmQgPSB0cmFuc2xpdGVyYXRlKCBrZXl3b3JkLCBsb2NhbGUgKTtcblx0dmFyIHRyYW5zbGl0ZXJhdGVLZXl3b3JkUmVnZXggPSB0b1JlZ2V4KCB0cmFuc2xpdGVyYXRlS2V5d29yZCApO1xuXHR2YXIgdHJhbnNsaXRlcmF0ZU1hdGNoZXMgPSB0ZXh0Lm1hdGNoKCB0cmFuc2xpdGVyYXRlS2V5d29yZFJlZ2V4ICkgfHwgW107XG5cblx0dmFyIGNvbWJpbmVkQXJyYXkgPSBtYXRjaGVzLmNvbmNhdCggdHJhbnNsaXRlcmF0ZU1hdGNoZXMgKTtcblx0cmV0dXJuIG1hcCggY29tYmluZWRBcnJheSwgZnVuY3Rpb24oIGtleXdvcmQgKSB7XG5cdFx0cmV0dXJuIHN0cmlwU3BhY2VzKCBrZXl3b3JkICk7XG5cdH0gKTtcbn07XG5cblxuIiwiLyoqIEBtb2R1bGUgc3RyaW5nUHJvY2Vzc2luZy9tYXRjaFRleHRXaXRoV29yZCAqL1xuXG52YXIgc3RyaXBTb21lVGFncyA9IHJlcXVpcmUoIFwiLi4vc3RyaW5nUHJvY2Vzc2luZy9zdHJpcE5vblRleHRUYWdzLmpzXCIgKTtcbnZhciB1bmlmeVdoaXRlc3BhY2UgPSByZXF1aXJlKCBcIi4uL3N0cmluZ1Byb2Nlc3NpbmcvdW5pZnlXaGl0ZXNwYWNlLmpzXCIgKS51bmlmeUFsbFNwYWNlcztcbnZhciBtYXRjaFN0cmluZ1dpdGhUcmFuc2xpdGVyYXRpb24gPSByZXF1aXJlKCBcIi4uL3N0cmluZ1Byb2Nlc3NpbmcvbWF0Y2hUZXh0V2l0aFRyYW5zbGl0ZXJhdGlvbi5qc1wiICk7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIG1hdGNoZXMgaW4gYSBnaXZlbiBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dCBUaGUgdGV4dCB0byB1c2UgZm9yIG1hdGNoaW5nIHRoZSB3b3JkVG9NYXRjaC5cbiAqIEBwYXJhbSB7c3RyaW5nfSB3b3JkVG9NYXRjaCBUaGUgd29yZCB0byBtYXRjaCBpbiB0aGUgdGV4dFxuICogQHBhcmFtIHtzdHJpbmd9IGxvY2FsZSBUaGUgbG9jYWxlIHVzZWQgZm9yIHRyYW5zbGl0ZXJhdGlvbi5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbZXh0cmFCb3VuZGFyeV0gQW4gZXh0cmEgc3RyaW5nIHRoYXQgY2FuIGJlIGFkZGVkIHRvIHRoZSB3b3JkYm91bmRhcnkgcmVnZXhcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBhbW91bnQgb2YgbWF0Y2hlcyBmb3VuZC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiggdGV4dCwgd29yZFRvTWF0Y2gsIGxvY2FsZSwgZXh0cmFCb3VuZGFyeSApIHtcblx0dGV4dCA9IHN0cmlwU29tZVRhZ3MoIHRleHQgKTtcblx0dGV4dCA9IHVuaWZ5V2hpdGVzcGFjZSggdGV4dCApO1xuXHR2YXIgbWF0Y2hlcyA9IG1hdGNoU3RyaW5nV2l0aFRyYW5zbGl0ZXJhdGlvbiggdGV4dCwgd29yZFRvTWF0Y2gsIGxvY2FsZSwgZXh0cmFCb3VuZGFyeSApO1xuXHRyZXR1cm4gbWF0Y2hlcy5sZW5ndGg7XG59O1xuIiwidmFyIHdvcmRCb3VuZGFyaWVzID0gcmVxdWlyZSggXCIuLi9jb25maWcvd29yZEJvdW5kYXJpZXMuanNcIiApKCk7XG52YXIgaW5jbHVkZXMgPSByZXF1aXJlKCBcImxvZGFzaC9pbmNsdWRlc1wiICk7XG5cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgYSBjaGFyYWN0ZXIgaXMgcHJlc2VudCBpbiB0aGUgbGlzdCBvZiB3b3JkIGJvdW5kYXJpZXMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNoYXJhY3RlciBUaGUgY2hhcmFjdGVyIHRvIGxvb2sgZm9yLlxuICogQHJldHVybnMge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IHRoZSBjaGFyYWN0ZXIgaXMgcHJlc2VudCBpbiB0aGUgbGlzdCBvZiB3b3JkIGJvdW5kYXJpZXMuXG4gKi9cbnZhciBjaGFyYWN0ZXJJbkJvdW5kYXJ5ID0gZnVuY3Rpb24oIGNoYXJhY3RlciApIHtcblx0cmV0dXJuIGluY2x1ZGVzKCB3b3JkQm91bmRhcmllcywgY2hhcmFjdGVyICk7XG59O1xuXG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIGEgd29yZCBpcyBwcmVzZW50IGluIGEgc2VudGVuY2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHdvcmQgVGhlIHdvcmQgdG8gc2VhcmNoIGZvciBpbiB0aGUgc2VudGVuY2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gc2VudGVuY2UgVGhlIHNlbnRlbmNlIHRvIGxvb2sgdGhyb3VnaC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgd29yZCBpcyBwcmVzZW50IGluIHRoZSBzZW50ZW5jZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiggd29yZCwgc2VudGVuY2UgKSB7XG5cdC8vIFRvIGVuc3VyZSBwcm9wZXIgbWF0Y2hpbmcsIG1ha2UgZXZlcnl0aGluZyBsb3dlcmNhc2UuXG5cdHdvcmQgPSB3b3JkLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG5cdHNlbnRlbmNlID0gc2VudGVuY2UudG9Mb2NhbGVMb3dlckNhc2UoKTtcblxuXHR2YXIgb2NjdXJyZW5jZVN0YXJ0ID0gc2VudGVuY2UuaW5kZXhPZiggd29yZCApO1xuXHR2YXIgb2NjdXJyZW5jZUVuZCA9IG9jY3VycmVuY2VTdGFydCArIHdvcmQubGVuZ3RoO1xuXG5cdC8vIFJldHVybiBmYWxzZSBpZiBubyBtYXRjaCBoYXMgYmVlbiBmb3VuZC5cblx0aWYgKCBvY2N1cnJlbmNlU3RhcnQgPT09IC0xICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8vIENoZWNrIGlmIHRoZSBwcmV2aW91cyBhbmQgbmV4dCBjaGFyYWN0ZXIgYXJlIHdvcmQgYm91bmRhcmllcyB0byBkZXRlcm1pbmUgaWYgYSBjb21wbGV0ZSB3b3JkIHdhcyBkZXRlY3RlZFxuXHR2YXIgcHJldmlvdXNDaGFyYWN0ZXIgPSBjaGFyYWN0ZXJJbkJvdW5kYXJ5KCBzZW50ZW5jZVsgb2NjdXJyZW5jZVN0YXJ0IC0gMSBdICkgfHwgb2NjdXJyZW5jZVN0YXJ0ID09PSAwO1xuXHR2YXIgbmV4dENoYXJhY3RlciA9IGNoYXJhY3RlckluQm91bmRhcnkoIHNlbnRlbmNlWyBvY2N1cnJlbmNlRW5kIF0gKSB8fCBvY2N1cnJlbmNlRW5kID09PSBzZW50ZW5jZS5sZW5ndGg7XG5cblx0cmV0dXJuICggKCBwcmV2aW91c0NoYXJhY3RlciApICYmICggbmV4dENoYXJhY3RlciApICk7XG59O1xuIiwiLyoqXG4gKiBOb3JtYWxpemVzIHNpbmdsZSBxdW90ZXMgdG8gJ3JlZ3VsYXInIHF1b3Rlcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dCBUZXh0IHRvIG5vcm1hbGl6ZS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBub3JtYWxpemVkIHRleHQuXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVNpbmdsZVF1b3RlcyggdGV4dCApIHtcblx0cmV0dXJuIHRleHQucmVwbGFjZSggL1vigJjigJnigJtgXS9nLCBcIidcIiApO1xufVxuXG4vKipcbiAqIE5vcm1hbGl6ZXMgZG91YmxlIHF1b3RlcyB0byAncmVndWxhcicgcXVvdGVzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IFRleHQgdG8gbm9ybWFsaXplLlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIG5vcm1hbGl6ZWQgdGV4dC5cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplRG91YmxlUXVvdGVzKCB0ZXh0ICkge1xuXHRyZXR1cm4gdGV4dC5yZXBsYWNlKCAvW+KAnOKAneOAneOAnuOAn+KAn+KAnl0vZywgXCJcXFwiXCIgKTtcbn1cblxuLyoqXG4gKiBOb3JtYWxpemVzIHF1b3RlcyB0byAncmVndWxhcicgcXVvdGVzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IFRleHQgdG8gbm9ybWFsaXplLlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIG5vcm1hbGl6ZWQgdGV4dC5cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplUXVvdGVzKCB0ZXh0ICkge1xuXHRyZXR1cm4gbm9ybWFsaXplRG91YmxlUXVvdGVzKCBub3JtYWxpemVTaW5nbGVRdW90ZXMoIHRleHQgKSApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0bm9ybWFsaXplU2luZ2xlOiBub3JtYWxpemVTaW5nbGVRdW90ZXMsXG5cdG5vcm1hbGl6ZURvdWJsZTogbm9ybWFsaXplRG91YmxlUXVvdGVzLFxuXHRub3JtYWxpemU6IG5vcm1hbGl6ZVF1b3Rlcyxcbn07XG4iLCJ2YXIgdGVybWluYXRvclJlZ2V4U3RyaW5nID0gXCJbXFwtKClfXFxcXFtcXFxcXeKAmeKAnOKAnVxcXCInXFwvLj8hOjsswr/CoV1cIjtcbnZhciB0ZXJtaW5hdG9yUmVnZXhTdGFydCA9IG5ldyBSZWdFeHAoIFwiXlwiICsgdGVybWluYXRvclJlZ2V4U3RyaW5nICsgXCIrXCIgKTtcbnZhciB0ZXJtaW5hdG9yUmVnZXhFbmQgPSBuZXcgUmVnRXhwKCB0ZXJtaW5hdG9yUmVnZXhTdHJpbmcgKyBcIiskXCIgKTtcblxuLyoqXG4gKiBSZW1vdmVzIHNlbnRlbmNlIHRlcm1pbmF0b3JzIGF0IHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHNlbnRlbmNlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB3b3JkIFRoZSB3b3JkIHRvIHJlbW92ZSB0ZXJtaW5hdG9ycyBmcm9tLlxuICogQHJldHVybnMge1N0cmluZ30gVGhlIHdvcmQgd2l0aG91dCB0ZXJtaW5hdG9ycy5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiggd29yZCApIHtcblx0d29yZCA9IHdvcmQucmVwbGFjZSggdGVybWluYXRvclJlZ2V4U3RhcnQsIFwiXCIgKTtcblx0d29yZCA9IHdvcmQucmVwbGFjZSggdGVybWluYXRvclJlZ2V4RW5kLCBcIlwiICk7XG5cdHJldHVybiB3b3JkO1xufTtcbiIsIi8qKiBAbW9kdWxlIHN0cmluZ1Byb2Nlc3NpbmcvcmVwbGFjZURpYWNyaXRpY3MgKi9cblxudmFyIGRpYWNyaXRpY3NSZW1vdmFsTWFwID0gcmVxdWlyZSggXCIuLi9jb25maWcvZGlhY3JpdGljcy5qc1wiICk7XG5cbi8qKlxuICogUmVwbGFjZXMgYWxsIGRpYWNyaXRpY3MgZnJvbSB0aGUgdGV4dCBiYXNlZCBvbiB0aGUgZGlhY3JpdGljcyByZW1vdmFsIG1hcC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dCBUaGUgdGV4dCB0byByZW1vdmUgZGlhY3JpdGljcyBmcm9tLlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIHRleHQgd2l0aCBhbGwgZGlhY3JpdGljcyByZXBsYWNlZC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiggdGV4dCApIHtcblx0dmFyIG1hcCA9IGRpYWNyaXRpY3NSZW1vdmFsTWFwKCk7XG5cblx0Zm9yICggdmFyIGkgPSAwOyBpIDwgbWFwLmxlbmd0aDsgaSsrICkge1xuXHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoXG5cdFx0XHRtYXBbIGkgXS5sZXR0ZXJzLFxuXHRcdFx0bWFwWyBpIF0uYmFzZVxuXHRcdCk7XG5cdH1cblx0cmV0dXJuIHRleHQ7XG59O1xuIiwiLyoqIEBtb2R1bGUgc3RyaW5nUHJvY2Vzc2luZy9yZXBsYWNlU3RyaW5nICovXG5cbi8qKlxuICogUmVwbGFjZXMgc3RyaW5nIHdpdGggYSByZXBsYWNlbWVudCBpbiB0ZXh0XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQgVGhlIHRleHRzdHJpbmcgdG8gcmVtb3ZlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nVG9SZXBsYWNlIFRoZSBzdHJpbmcgdG8gcmVwbGFjZVxuICogQHBhcmFtIHtzdHJpbmd9IHJlcGxhY2VtZW50IFRoZSByZXBsYWNlbWVudCBvZiB0aGUgc3RyaW5nXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgdGV4dCB3aXRoIHRoZSBzdHJpbmcgcmVwbGFjZWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiggdGV4dCwgc3RyaW5nVG9SZXBsYWNlLCByZXBsYWNlbWVudCApIHtcblx0dGV4dCA9IHRleHQucmVwbGFjZSggc3RyaW5nVG9SZXBsYWNlLCByZXBsYWNlbWVudCApO1xuXG5cdHJldHVybiB0ZXh0O1xufTtcbiIsIi8qKiBAbW9kdWxlIHN0cmluZ1Byb2Nlc3Npbmcvc2FuaXRpemVTdHJpbmcgKi9cblxudmFyIHN0cmlwVGFncyA9IHJlcXVpcmUoIFwiLi4vc3RyaW5nUHJvY2Vzc2luZy9zdHJpcEhUTUxUYWdzLmpzXCIgKS5zdHJpcEZ1bGxUYWdzO1xudmFyIHN0cmlwU3BhY2VzID0gcmVxdWlyZSggXCIuLi9zdHJpbmdQcm9jZXNzaW5nL3N0cmlwU3BhY2VzLmpzXCIgKTtcblxuLyoqXG4gKiBTdHJpcCBIVE1MdGFncyBjaGFyYWN0ZXJzIGZyb20gc3RyaW5nIHRoYXQgYnJlYWsgcmVnZXhcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdGV4dCBUaGUgdGV4dCB0byBzdHJpcCB0aGUgY2hhcmFjdGVycyBmcm9tLlxuICogQHJldHVybnMge1N0cmluZ30gVGhlIHRleHQgd2l0aG91dCBjaGFyYWN0ZXJzLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCAvW1xcW1xcXVxce1xcfVxcKFxcKVxcKlxcK1xcP1xcXlxcJFxcfF0vZywgXCJcIiApO1xuXHR0ZXh0ID0gc3RyaXBUYWdzKCB0ZXh0ICk7XG5cdHRleHQgPSBzdHJpcFNwYWNlcyggdGV4dCApO1xuXG5cdHJldHVybiB0ZXh0O1xufTtcbiIsInZhciB3b3JkQ291bnQgPSByZXF1aXJlKCBcIi4vY291bnRXb3Jkcy5qc1wiICk7XG52YXIgZm9yRWFjaCA9IHJlcXVpcmUoIFwibG9kYXNoL2ZvckVhY2hcIiApO1xudmFyIHN0cmlwSFRNTFRhZ3MgPSByZXF1aXJlKCBcIi4vc3RyaXBIVE1MVGFncy5qc1wiICkuc3RyaXBGdWxsVGFncztcblxuLyoqXG4gKiBSZXR1cm5zIGFuIGFycmF5IHdpdGggdGhlIG51bWJlciBvZiB3b3JkcyBpbiBhIHNlbnRlbmNlLlxuICogQHBhcmFtIHtBcnJheX0gc2VudGVuY2VzIEFycmF5IHdpdGggc2VudGVuY2VzIGZyb20gdGV4dC5cbiAqIEByZXR1cm5zIHtBcnJheX0gQXJyYXkgd2l0aCBhbW91bnQgb2Ygd29yZHMgaW4gZWFjaCBzZW50ZW5jZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiggc2VudGVuY2VzICkge1xuXHR2YXIgc2VudGVuY2VzV29yZENvdW50ID0gW107XG5cdGZvckVhY2goIHNlbnRlbmNlcywgZnVuY3Rpb24oIHNlbnRlbmNlICkge1xuXHRcdC8vIEZvciBjb3VudGluZyB3b3JkcyB3ZSB3YW50IHRvIG9taXQgdGhlIEhUTUx0YWdzLlxuXHRcdHZhciBzdHJpcHBlZFNlbnRlbmNlID0gc3RyaXBIVE1MVGFncyggc2VudGVuY2UgKTtcblx0XHR2YXIgbGVuZ3RoID0gd29yZENvdW50KCBzdHJpcHBlZFNlbnRlbmNlICk7XG5cblx0XHRpZiAoIGxlbmd0aCA8PSAwICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHNlbnRlbmNlc1dvcmRDb3VudC5wdXNoKCB7XG5cdFx0XHRzZW50ZW5jZTogc2VudGVuY2UsXG5cdFx0XHRzZW50ZW5jZUxlbmd0aDogd29yZENvdW50KCBzZW50ZW5jZSApLFxuXHRcdH0gKTtcblx0fSApO1xuXHRyZXR1cm4gc2VudGVuY2VzV29yZENvdW50O1xufTtcbiIsIi8qKiBAbW9kdWxlIHN0cmluZ1Byb2Nlc3Npbmcvc3RyaW5nVG9SZWdleCAqL1xudmFyIGlzVW5kZWZpbmVkID0gcmVxdWlyZSggXCJsb2Rhc2gvaXNVbmRlZmluZWRcIiApO1xudmFyIHJlcGxhY2VEaWFjcml0aWNzID0gcmVxdWlyZSggXCIuLi9zdHJpbmdQcm9jZXNzaW5nL3JlcGxhY2VEaWFjcml0aWNzLmpzXCIgKTtcbnZhciBzYW5pdGl6ZVN0cmluZyA9IHJlcXVpcmUoIFwiLi4vc3RyaW5nUHJvY2Vzc2luZy9zYW5pdGl6ZVN0cmluZy5qc1wiICk7XG52YXIgYWRkV29yZEJvdW5kYXJ5ID0gcmVxdWlyZSggXCIuLi9zdHJpbmdQcm9jZXNzaW5nL2FkZFdvcmRib3VuZGFyeS5qc1wiICk7XG5cbnZhciBtZW1vaXplID0gcmVxdWlyZSggXCJsb2Rhc2gvbWVtb2l6ZVwiICk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHJlZ2V4IGZyb20gYSBzdHJpbmcgc28gaXQgY2FuIGJlIG1hdGNoZWQgZXZlcnl3aGVyZSBpbiB0aGUgc2FtZSB3YXkuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIG1ha2UgYSByZWdleCBmcm9tLlxuICogQHBhcmFtIHtzdHJpbmd9IFtleHRyYUJvdW5kYXJ5PVwiXCJdIEEgc3RyaW5nIHRoYXQgaXMgdXNlZCBhcyBleHRyYSBib3VuZGFyeSBmb3IgdGhlIHJlZ2V4LlxuICogQHBhcmFtIHtib29sZWFufSBbZG9SZXBsYWNlRGlhY3JpdGljcz10cnVlXSBJZiBzZXQgdG8gZmFsc2UsIGl0IGRvZXNuJ3QgcmVwbGFjZSBkaWFjcml0aWNzLiBEZWZhdWx0cyB0byB0cnVlLlxuICogQHJldHVybnMge1JlZ0V4cH0gcmVnZXggVGhlIHJlZ2V4IG1hZGUgZnJvbSB0aGUga2V5d29yZFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IG1lbW9pemUoIGZ1bmN0aW9uKCBzdHJpbmcsIGV4dHJhQm91bmRhcnksIGRvUmVwbGFjZURpYWNyaXRpY3MgKSB7XG5cdGlmICggaXNVbmRlZmluZWQoIGV4dHJhQm91bmRhcnkgKSApIHtcblx0XHRleHRyYUJvdW5kYXJ5ID0gXCJcIjtcblx0fVxuXG5cdGlmICggaXNVbmRlZmluZWQoIGRvUmVwbGFjZURpYWNyaXRpY3MgKSB8fCBkb1JlcGxhY2VEaWFjcml0aWNzID09PSB0cnVlICkge1xuXHRcdHN0cmluZyA9IHJlcGxhY2VEaWFjcml0aWNzKCBzdHJpbmcgKTtcblx0fVxuXG5cdHN0cmluZyA9IHNhbml0aXplU3RyaW5nKCBzdHJpbmcgKTtcblx0c3RyaW5nID0gYWRkV29yZEJvdW5kYXJ5KCBzdHJpbmcsIGV4dHJhQm91bmRhcnkgKTtcblx0cmV0dXJuIG5ldyBSZWdFeHAoIHN0cmluZywgXCJpZ1wiICk7XG59ICk7XG4iLCIvKiogQG1vZHVsZSBzdHJpbmdQcm9jZXNzaW5nL3N0cmlwSFRNTFRhZ3MgKi9cblxudmFyIHN0cmlwU3BhY2VzID0gcmVxdWlyZSggXCIuLi9zdHJpbmdQcm9jZXNzaW5nL3N0cmlwU3BhY2VzLmpzXCIgKTtcblxudmFyIGJsb2NrRWxlbWVudHMgPSByZXF1aXJlKCBcIi4uL2hlbHBlcnMvaHRtbC5qc1wiICkuYmxvY2tFbGVtZW50cztcblxudmFyIGJsb2NrRWxlbWVudFN0YXJ0UmVnZXggPSBuZXcgUmVnRXhwKCBcIl48KFwiICsgYmxvY2tFbGVtZW50cy5qb2luKCBcInxcIiApICsgXCIpW14+XSo/PlwiLCBcImlcIiApO1xudmFyIGJsb2NrRWxlbWVudEVuZFJlZ2V4ID0gbmV3IFJlZ0V4cCggXCI8LyhcIiArIGJsb2NrRWxlbWVudHMuam9pbiggXCJ8XCIgKSArIFwiKVtePl0qPz4kXCIsIFwiaVwiICk7XG5cbi8qKlxuICogU3RyaXAgaW5jb21wbGV0ZSB0YWdzIHdpdGhpbiBhIHRleHQuIFN0cmlwcyBhbiBlbmR0YWcgYXQgdGhlIGJlZ2lubmluZyBvZiBhIHN0cmluZyBhbmQgdGhlIHN0YXJ0IHRhZyBhdCB0aGUgZW5kIG9mIGFcbiAqIHN0YXJ0IG9mIGEgc3RyaW5nLlxuICogQHBhcmFtIHtTdHJpbmd9IHRleHQgVGhlIHRleHQgdG8gc3RyaXAgdGhlIEhUTUwtdGFncyBmcm9tIGF0IHRoZSBiZWdpbiBhbmQgZW5kLlxuICogQHJldHVybnMge1N0cmluZ30gVGhlIHRleHQgd2l0aG91dCBIVE1MLXRhZ3MgYXQgdGhlIGJlZ2luIGFuZCBlbmQuXG4gKi9cbnZhciBzdHJpcEluY29tcGxldGVUYWdzID0gZnVuY3Rpb24oIHRleHQgKSB7XG5cdHRleHQgPSB0ZXh0LnJlcGxhY2UoIC9eKDxcXC8oW14+XSspPikrL2ksIFwiXCIgKTtcblx0dGV4dCA9IHRleHQucmVwbGFjZSggLyg8KFteXFwvPl0rKT4pKyQvaSwgXCJcIiApO1xuXHRyZXR1cm4gdGV4dDtcbn07XG5cbi8qKlxuICogUmVtb3ZlcyB0aGUgYmxvY2sgZWxlbWVudCB0YWdzIGF0IHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZyBhbmQgcmV0dXJucyB0aGlzIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dCBUaGUgdW5mb3JtYXR0ZWQgc3RyaW5nLlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIHRleHQgd2l0aCByZW1vdmVkIEhUTUwgYmVnaW4gYW5kIGVuZCBibG9jayBlbGVtZW50c1xuICovXG52YXIgc3RyaXBCbG9ja1RhZ3NBdFN0YXJ0RW5kID0gZnVuY3Rpb24oIHRleHQgKSB7XG5cdHRleHQgPSB0ZXh0LnJlcGxhY2UoIGJsb2NrRWxlbWVudFN0YXJ0UmVnZXgsIFwiXCIgKTtcblx0dGV4dCA9IHRleHQucmVwbGFjZSggYmxvY2tFbGVtZW50RW5kUmVnZXgsIFwiXCIgKTtcblx0cmV0dXJuIHRleHQ7XG59O1xuXG4vKipcbiAqIFN0cmlwIEhUTUwtdGFncyBmcm9tIHRleHRcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdGV4dCBUaGUgdGV4dCB0byBzdHJpcCB0aGUgSFRNTC10YWdzIGZyb20uXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgdGV4dCB3aXRob3V0IEhUTUwtdGFncy5cbiAqL1xudmFyIHN0cmlwRnVsbFRhZ3MgPSBmdW5jdGlvbiggdGV4dCApIHtcblx0dGV4dCA9IHRleHQucmVwbGFjZSggLyg8KFtePl0rKT4pL2lnLCBcIiBcIiApO1xuXHR0ZXh0ID0gc3RyaXBTcGFjZXMoIHRleHQgKTtcblx0cmV0dXJuIHRleHQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0c3RyaXBGdWxsVGFnczogc3RyaXBGdWxsVGFncyxcblx0c3RyaXBJbmNvbXBsZXRlVGFnczogc3RyaXBJbmNvbXBsZXRlVGFncyxcblx0c3RyaXBCbG9ja1RhZ3NBdFN0YXJ0RW5kOiBzdHJpcEJsb2NrVGFnc0F0U3RhcnRFbmQsXG59O1xuIiwiLyoqIEBtb2R1bGUgc3RyaW5nUHJvY2Vzc2luZy9zdHJpcE5vblRleHRUYWdzICovXG5cbnZhciBzdHJpcFNwYWNlcyA9IHJlcXVpcmUoIFwiLi4vc3RyaW5nUHJvY2Vzc2luZy9zdHJpcFNwYWNlcy5qc1wiICk7XG5cbi8qKlxuICogU3RyaXBzIGFsbCB0YWdzIGZyb20gdGhlIHRleHQsIGV4Y2VwdCBsaSwgcCwgZGQgYW5kIGgxLWg2IHRhZ3MgZnJvbSB0aGUgdGV4dCB0aGF0IGNvbnRhaW4gY29udGVudCB0byBjaGVjay5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dCBUaGUgdGV4dCB0byBzdHJpcCB0YWdzIGZyb21cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSB0ZXh0IHN0cmlwcGVkIG9mIHRhZ3MsIGV4Y2VwdCBmb3IgbGksIHAsIGRkIGFuZCBoMS1oNiB0YWdzLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCAvPCg/IWxpfFxcL2xpfHB8XFwvcHxoMXxcXC9oMXxoMnxcXC9oMnxoM3xcXC9oM3xoNHxcXC9oNHxoNXxcXC9oNXxoNnxcXC9oNnxkZCkuKj9cXD4vZywgXCJcIiApO1xuXHR0ZXh0ID0gc3RyaXBTcGFjZXMoIHRleHQgKTtcblx0cmV0dXJuIHRleHQ7XG59O1xuIiwiLyoqIEBtb2R1bGUgc3RyaW5nUHJvY2Vzc2luZy9zdHJpcE51bWJlcnMgKi9cblxudmFyIHN0cmlwU3BhY2VzID0gcmVxdWlyZSggXCIuLi9zdHJpbmdQcm9jZXNzaW5nL3N0cmlwU3BhY2VzLmpzXCIgKTtcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCB3b3JkcyBjb21wcmlzZWQgb25seSBvZiBudW1iZXJzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IHRvIHJlbW92ZSB3b3Jkc1xuICogQHJldHVybnMge3N0cmluZ30gVGhlIHRleHQgd2l0aCBudW1iZXJvbmx5IHdvcmRzIHJlbW92ZWQuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiggdGV4dCApIHtcblx0Ly8gUmVtb3ZlIFwid29yZHNcIiBjb21wcmlzZWQgb25seSBvZiBudW1iZXJzXG5cdHRleHQgPSB0ZXh0LnJlcGxhY2UoIC9cXGJbMC05XStcXGIvZywgXCJcIiApO1xuXG5cdHRleHQgPSBzdHJpcFNwYWNlcyggdGV4dCApO1xuXG5cdGlmICggdGV4dCA9PT0gXCIuXCIgKSB7XG5cdFx0dGV4dCA9IFwiXCI7XG5cdH1cblx0cmV0dXJuIHRleHQ7XG59O1xuIiwiLyoqIEBtb2R1bGUgc3RyaW5nUHJvY2Vzc2luZy9zdHJpcFNwYWNlcyAqL1xuXG4vKipcbiAqIFN0cmlwIGRvdWJsZSBzcGFjZXMgZnJvbSB0ZXh0XG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHRleHQgVGhlIHRleHQgdG8gc3RyaXAgc3BhY2VzIGZyb20uXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgdGV4dCB3aXRob3V0IGRvdWJsZSBzcGFjZXNcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiggdGV4dCApIHtcblx0Ly8gUmVwbGFjZSBtdWx0aXBsZSBzcGFjZXMgd2l0aCBzaW5nbGUgc3BhY2Vcblx0dGV4dCA9IHRleHQucmVwbGFjZSggL1xcc3syLH0vZywgXCIgXCIgKTtcblxuXHQvLyBSZXBsYWNlIHNwYWNlcyBmb2xsb3dlZCBieSBwZXJpb2RzIHdpdGggb25seSB0aGUgcGVyaW9kLlxuXHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCAvXFxzXFwuL2csIFwiLlwiICk7XG5cblx0Ly8gUmVtb3ZlIGZpcnN0L2xhc3QgY2hhcmFjdGVyIGlmIHNwYWNlXG5cdHRleHQgPSB0ZXh0LnJlcGxhY2UoIC9eXFxzK3xcXHMrJC9nLCBcIlwiICk7XG5cblx0cmV0dXJuIHRleHQ7XG59O1xuIiwidmFyIHJlcGxhY2VTdHJpbmcgPSByZXF1aXJlKCBcIi4uL3N0cmluZ1Byb2Nlc3NpbmcvcmVwbGFjZVN0cmluZy5qc1wiICk7XG52YXIgcmVtb3ZhbFdvcmRzID0gcmVxdWlyZSggXCIuLi9jb25maWcvcmVtb3ZhbFdvcmRzLmpzXCIgKSgpO1xudmFyIG1hdGNoVGV4dFdpdGhUcmFuc2xpdGVyYXRpb24gPSByZXF1aXJlKCBcIi4uL3N0cmluZ1Byb2Nlc3NpbmcvbWF0Y2hUZXh0V2l0aFRyYW5zbGl0ZXJhdGlvbi5qc1wiICk7XG5cbi8qKlxuICogTWF0Y2hlcyB0aGUga2V5d29yZCBpbiBhbiBhcnJheSBvZiBzdHJpbmdzXG4gKlxuICogQHBhcmFtIHtBcnJheX0gbWF0Y2hlcyBUaGUgYXJyYXkgd2l0aCB0aGUgbWF0Y2hlZCBoZWFkaW5ncy5cbiAqIEBwYXJhbSB7U3RyaW5nfSBrZXl3b3JkIFRoZSBrZXl3b3JkIHRvIG1hdGNoXG4gKiBAcGFyYW0ge3N0cmluZ30gbG9jYWxlIFRoZSBsb2NhbGUgdXNlZCBmb3IgdHJhbnNsaXRlcmF0aW9uLlxuICogQHJldHVybnMge251bWJlcn0gVGhlIG51bWJlciBvZiBvY2N1cnJlbmNlcyBvZiB0aGUga2V5d29yZCBpbiB0aGUgaGVhZGluZ3MuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oIG1hdGNoZXMsIGtleXdvcmQsIGxvY2FsZSApIHtcblx0dmFyIGZvdW5kSW5IZWFkZXI7XG5cdGlmICggbWF0Y2hlcyA9PT0gbnVsbCApIHtcblx0XHRmb3VuZEluSGVhZGVyID0gLTE7XG5cdH0gZWxzZSB7XG5cdFx0Zm91bmRJbkhlYWRlciA9IDA7XG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgbWF0Y2hlcy5sZW5ndGg7IGkrKyApIHtcblx0XHRcdC8vIFRPRE86IFRoaXMgcmVwbGFjZVN0cmluZyBjYWxsIHNlZW1pbmdseSBkb2Vzbid0IHdvcmssIGFzIG5vIHJlcGxhY2VtZW50IHZhbHVlIGlzIGJlaW5nIHNlbnQgdG8gdGhlIC5yZXBsYWNlIG1ldGhvZCBpbiByZXBsYWNlU3RyaW5nXG5cdFx0XHR2YXIgZm9ybWF0dGVkSGVhZGVycyA9IHJlcGxhY2VTdHJpbmcoXG5cdFx0XHRcdG1hdGNoZXNbIGkgXSwgcmVtb3ZhbFdvcmRzXG5cdFx0XHQpO1xuXHRcdFx0aWYgKFxuXHRcdFx0XHRtYXRjaFRleHRXaXRoVHJhbnNsaXRlcmF0aW9uKCBmb3JtYXR0ZWRIZWFkZXJzLCBrZXl3b3JkLCBsb2NhbGUgKS5sZW5ndGggPiAwIHx8XG5cdFx0XHRcdG1hdGNoVGV4dFdpdGhUcmFuc2xpdGVyYXRpb24oIG1hdGNoZXNbIGkgXSwga2V5d29yZCwgbG9jYWxlICkubGVuZ3RoID4gMFxuXHRcdFx0KSB7XG5cdFx0XHRcdGZvdW5kSW5IZWFkZXIrKztcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0cmV0dXJuIGZvdW5kSW5IZWFkZXI7XG59O1xuIiwidmFyIGlzVW5kZWZpbmVkID0gcmVxdWlyZSggXCJsb2Rhc2gvaXNVbmRlZmluZWRcIiApO1xudmFyIHBpY2sgPSByZXF1aXJlKCBcImxvZGFzaC9waWNrXCIgKTtcblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgcGFydGlhbCBkZXZpYXRpb24gd2hlbiBjb3VudGluZyBzeWxsYWJsZXNcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBFeHRyYSBvcHRpb25zIGFib3V0IGhvdyB0byBtYXRjaCB0aGlzIGZyYWdtZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMubG9jYXRpb24gVGhlIGxvY2F0aW9uIGluIHRoZSB3b3JkIHdoZXJlIHRoaXMgZGV2aWF0aW9uIGNhbiBvY2N1ci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLndvcmQgVGhlIGFjdHVhbCBzdHJpbmcgdGhhdCBzaG91bGQgYmUgY291bnRlZCBkaWZmZXJlbnRseS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBvcHRpb25zLnN5bGxhYmxlcyBUaGUgYW1vdW50IG9mIHN5bGxhYmxlcyB0aGlzIGZyYWdtZW50IGhhcy5cbiAqIEBwYXJhbSB7c3RyaW5nW119IFtvcHRpb25zLm5vdEZvbGxvd2VkQnldIEEgbGlzdCBvZiBjaGFyYWN0ZXJzIHRoYXQgdGhpcyBmcmFnbWVudCBzaG91bGRuJ3QgYmUgZm9sbG93ZWQgd2l0aC5cbiAqIEBwYXJhbSB7c3RyaW5nW119IFtvcHRpb25zLmFsc29Gb2xsb3dlZEJ5XSBBIGxpc3Qgb2YgY2hhcmFjdGVycyB0aGF0IHRoaXMgZnJhZ21lbnQgY291bGQgYmUgZm9sbG93ZWQgd2l0aC5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gRGV2aWF0aW9uRnJhZ21lbnQoIG9wdGlvbnMgKSB7XG5cdHRoaXMuX2xvY2F0aW9uID0gb3B0aW9ucy5sb2NhdGlvbjtcblx0dGhpcy5fZnJhZ21lbnQgPSBvcHRpb25zLndvcmQ7XG5cdHRoaXMuX3N5bGxhYmxlcyA9IG9wdGlvbnMuc3lsbGFibGVzO1xuXHR0aGlzLl9yZWdleCA9IG51bGw7XG5cblx0dGhpcy5fb3B0aW9ucyA9IHBpY2soIG9wdGlvbnMsIFsgXCJub3RGb2xsb3dlZEJ5XCIsIFwiYWxzb0ZvbGxvd2VkQnlcIiBdICk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHJlZ2V4IHRoYXQgbWF0Y2hlcyB0aGlzIGZyYWdtZW50IGluc2lkZSBhIHdvcmQuXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbkRldmlhdGlvbkZyYWdtZW50LnByb3RvdHlwZS5jcmVhdGVSZWdleCA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgcmVnZXhTdHJpbmcgPSBcIlwiO1xuXHR2YXIgb3B0aW9ucyA9IHRoaXMuX29wdGlvbnM7XG5cblx0dmFyIGZyYWdtZW50ID0gdGhpcy5fZnJhZ21lbnQ7XG5cblx0aWYgKCAhIGlzVW5kZWZpbmVkKCBvcHRpb25zLm5vdEZvbGxvd2VkQnkgKSApIHtcblx0XHRmcmFnbWVudCArPSBcIig/IVtcIiArIG9wdGlvbnMubm90Rm9sbG93ZWRCeS5qb2luKCBcIlwiICkgKyBcIl0pXCI7XG5cdH1cblxuXHRpZiAoICEgaXNVbmRlZmluZWQoIG9wdGlvbnMuYWxzb0ZvbGxvd2VkQnkgKSApIHtcblx0XHRmcmFnbWVudCArPSBcIltcIiArIG9wdGlvbnMuYWxzb0ZvbGxvd2VkQnkuam9pbiggXCJcIiApICsgXCJdP1wiO1xuXHR9XG5cblx0c3dpdGNoICggdGhpcy5fbG9jYXRpb24gKSB7XG5cdFx0Y2FzZSBcImF0QmVnaW5uaW5nXCI6XG5cdFx0XHRyZWdleFN0cmluZyA9IFwiXlwiICsgZnJhZ21lbnQ7XG5cdFx0XHRicmVhaztcblxuXHRcdGNhc2UgXCJhdEVuZFwiOlxuXHRcdFx0cmVnZXhTdHJpbmcgPSBmcmFnbWVudCArIFwiJFwiO1xuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlIFwiYXRCZWdpbm5pbmdPckVuZFwiOlxuXHRcdFx0cmVnZXhTdHJpbmcgPSBcIiheXCIgKyBmcmFnbWVudCArIFwiKXwoXCIgKyBmcmFnbWVudCArIFwiJClcIjtcblx0XHRcdGJyZWFrO1xuXG5cdFx0ZGVmYXVsdDpcblx0XHRcdHJlZ2V4U3RyaW5nID0gZnJhZ21lbnQ7XG5cdFx0XHRicmVhaztcblx0fVxuXG5cdHRoaXMuX3JlZ2V4ID0gbmV3IFJlZ0V4cCggcmVnZXhTdHJpbmcgKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgcmVnZXggdGhhdCBtYXRjaGVzIHRoaXMgZnJhZ21lbnQgaW5zaWRlIGEgd29yZC5cbiAqXG4gKiBAcmV0dXJucyB7UmVnRXhwfSBUaGUgcmVnZXhwIHRoYXQgbWF0Y2hlcyB0aGlzIGZyYWdtZW50LlxuICovXG5EZXZpYXRpb25GcmFnbWVudC5wcm90b3R5cGUuZ2V0UmVnZXggPSBmdW5jdGlvbigpIHtcblx0aWYgKCBudWxsID09PSB0aGlzLl9yZWdleCApIHtcblx0XHR0aGlzLmNyZWF0ZVJlZ2V4KCk7XG5cdH1cblxuXHRyZXR1cm4gdGhpcy5fcmVnZXg7XG59O1xuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhpcyBmcmFnbWVudCBvY2N1cnMgaW4gYSB3b3JkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB3b3JkIFRoZSB3b3JkIHRvIG1hdGNoIHRoZSBmcmFnbWVudCBpbi5cbiAqIEByZXR1cm5zIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGlzIGZyYWdtZW50IG9jY3VycyBpbiBhIHdvcmQuXG4gKi9cbkRldmlhdGlvbkZyYWdtZW50LnByb3RvdHlwZS5vY2N1cnNJbiA9IGZ1bmN0aW9uKCB3b3JkICkge1xuXHR2YXIgcmVnZXggPSB0aGlzLmdldFJlZ2V4KCk7XG5cblx0cmV0dXJuIHJlZ2V4LnRlc3QoIHdvcmQgKTtcbn07XG5cbi8qKlxuICogUmVtb3ZlcyB0aGlzIGZyYWdtZW50IGZyb20gdGhlIGdpdmVuIHdvcmQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHdvcmQgVGhlIHdvcmQgdG8gcmVtb3ZlIHRoaXMgZnJhZ21lbnQgZnJvbS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBtb2RpZmllZCB3b3JkLlxuICovXG5EZXZpYXRpb25GcmFnbWVudC5wcm90b3R5cGUucmVtb3ZlRnJvbSA9IGZ1bmN0aW9uKCB3b3JkICkge1xuXHQvLyBSZXBsYWNlIGJ5IGEgc3BhY2UgdG8ga2VlcCB0aGUgcmVtYWluaW5nIHBhcnRzIHNlcGFyYXRlZC5cblx0cmV0dXJuIHdvcmQucmVwbGFjZSggdGhpcy5fZnJhZ21lbnQsIFwiIFwiICk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGFtb3VudCBvZiBzeWxsYWJsZXMgZm9yIHRoaXMgZnJhZ21lbnQuXG4gKlxuICogQHJldHVybnMge251bWJlcn0gVGhlIGFtb3VudCBvZiBzeWxsYWJsZXMgZm9yIHRoaXMgZnJhZ21lbnQuXG4gKi9cbkRldmlhdGlvbkZyYWdtZW50LnByb3RvdHlwZS5nZXRTeWxsYWJsZXMgPSBmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXMuX3N5bGxhYmxlcztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRGV2aWF0aW9uRnJhZ21lbnQ7XG4iLCIvKiogQG1vZHVsZSBzdHJpbmdQcm9jZXNzaW5nL2NvdW50U3lsbGFibGVzICovXG5cbnZhciBzeWxsYWJsZU1hdGNoZXJzID0gcmVxdWlyZSggXCIuLi8uLi9jb25maWcvc3lsbGFibGVzLmpzXCIgKTtcblxudmFyIGdldFdvcmRzID0gcmVxdWlyZSggXCIuLi9nZXRXb3Jkcy5qc1wiICk7XG5cbnZhciBmb3JFYWNoID0gcmVxdWlyZSggXCJsb2Rhc2gvZm9yRWFjaFwiICk7XG52YXIgZmlsdGVyID0gcmVxdWlyZSggXCJsb2Rhc2gvZmlsdGVyXCIgKTtcbnZhciBmaW5kID0gcmVxdWlyZSggXCJsb2Rhc2gvZmluZFwiICk7XG52YXIgaXNVbmRlZmluZWQgPSByZXF1aXJlKCBcImxvZGFzaC9pc1VuZGVmaW5lZFwiICk7XG52YXIgbWFwID0gcmVxdWlyZSggXCJsb2Rhc2gvbWFwXCIgKTtcbnZhciBzdW0gPSByZXF1aXJlKCBcImxvZGFzaC9zdW1cIiApO1xudmFyIG1lbW9pemUgPSByZXF1aXJlKCBcImxvZGFzaC9tZW1vaXplXCIgKTtcbnZhciBmbGF0TWFwID0gcmVxdWlyZSggXCJsb2Rhc2gvZmxhdE1hcFwiICk7XG5cbnZhciBTeWxsYWJsZUNvdW50SXRlcmF0b3IgPSByZXF1aXJlKCBcIi4uLy4uL2hlbHBlcnMvc3lsbGFibGVDb3VudEl0ZXJhdG9yLmpzXCIgKTtcbnZhciBEZXZpYXRpb25GcmFnbWVudCA9IHJlcXVpcmUoIFwiLi9EZXZpYXRpb25GcmFnbWVudFwiICk7XG5cbi8qKlxuICogQ291bnRzIHZvd2VsIGdyb3VwcyBpbnNpZGUgYSB3b3JkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB3b3JkIEEgdGV4dCB3aXRoIHdvcmRzIHRvIGNvdW50IHN5bGxhYmxlcy5cbiAqIEBwYXJhbSB7U3RyaW5nfSBsb2NhbGUgVGhlIGxvY2FsZSB0byB1c2UgZm9yIGNvdW50aW5nIHN5bGxhYmxlcy5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IHRoZSBzeWxsYWJsZSBjb3VudC5cbiAqL1xudmFyIGNvdW50Vm93ZWxHcm91cHMgPSBmdW5jdGlvbiggd29yZCwgbG9jYWxlICkge1xuXHR2YXIgbnVtYmVyT2ZTeWxsYWJsZXMgPSAwO1xuXHR2YXIgdm93ZWxSZWdleCA9IG5ldyBSZWdFeHAoIFwiW15cIiArIHN5bGxhYmxlTWF0Y2hlcnMoIGxvY2FsZSApLnZvd2VscyArIFwiXVwiLCBcImlnXCIgKTtcblx0dmFyIGZvdW5kVm93ZWxzID0gd29yZC5zcGxpdCggdm93ZWxSZWdleCApO1xuXHR2YXIgZmlsdGVyZWRXb3JkcyA9IGZpbHRlciggZm91bmRWb3dlbHMsIGZ1bmN0aW9uKCB2b3dlbCApIHtcblx0XHRyZXR1cm4gdm93ZWwgIT09IFwiXCI7XG5cdH0gKTtcblx0bnVtYmVyT2ZTeWxsYWJsZXMgKz0gZmlsdGVyZWRXb3Jkcy5sZW5ndGg7XG5cblx0cmV0dXJuIG51bWJlck9mU3lsbGFibGVzO1xufTtcblxuLyoqXG4gKiBDb3VudHMgdGhlIHN5bGxhYmxlcyB1c2luZyB2b3dlbCBleGNsdXNpb25zLiBUaGVzZSBhcmUgdXNlZCBmb3IgZ3JvdXBzIG9mIHZvd2VscyB0aGF0IGFyZSBtb3JlIG9yIGxlc3NcbiAqIHRoYW4gMSBzeWxsYWJsZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gd29yZCBUaGUgd29yZCB0byBjb3VudCBzeWxsYWJsZXMgb2YuXG4gKiBAcGFyYW0ge1N0cmluZ30gbG9jYWxlIFRoZSBsb2NhbGUgdG8gdXNlIGZvciBjb3VudGluZyBzeWxsYWJsZXMuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgbnVtYmVyIG9mIHN5bGxhYmxlcyBmb3VuZCBpbiB0aGUgZ2l2ZW4gd29yZC5cbiAqL1xudmFyIGNvdW50Vm93ZWxEZXZpYXRpb25zID0gZnVuY3Rpb24oIHdvcmQsIGxvY2FsZSApIHtcblx0dmFyIHN5bGxhYmxlQ291bnRJdGVyYXRvciA9IG5ldyBTeWxsYWJsZUNvdW50SXRlcmF0b3IoIHN5bGxhYmxlTWF0Y2hlcnMoIGxvY2FsZSApICk7XG5cdHJldHVybiBzeWxsYWJsZUNvdW50SXRlcmF0b3IuY291bnRTeWxsYWJsZXMoIHdvcmQgKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIHN5bGxhYmxlcyBmb3IgdGhlIHdvcmQgaWYgaXQgaXMgaW4gdGhlIGxpc3Qgb2YgZnVsbCB3b3JkIGRldmlhdGlvbnMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHdvcmQgVGhlIHdvcmQgdG8gcmV0cmlldmUgdGhlIHN5bGxhYmxlcyBmb3IuXG4gKiBAcGFyYW0ge1N0cmluZ30gbG9jYWxlIFRoZSBsb2NhbGUgdG8gdXNlIGZvciBjb3VudGluZyBzeWxsYWJsZXMuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgbnVtYmVyIG9mIHN5bGxhYmxlcyBmb3VuZC5cbiAqL1xudmFyIGNvdW50RnVsbFdvcmREZXZpYXRpb25zID0gZnVuY3Rpb24oIHdvcmQsIGxvY2FsZSApIHtcblx0dmFyIGZ1bGxXb3JkRGV2aWF0aW9ucyA9IHN5bGxhYmxlTWF0Y2hlcnMoIGxvY2FsZSApLmRldmlhdGlvbnMud29yZHMuZnVsbDtcblxuXHR2YXIgZGV2aWF0aW9uID0gZmluZCggZnVsbFdvcmREZXZpYXRpb25zLCBmdW5jdGlvbiggZnVsbFdvcmREZXZpYXRpb24gKSB7XG5cdFx0cmV0dXJuIGZ1bGxXb3JkRGV2aWF0aW9uLndvcmQgPT09IHdvcmQ7XG5cdH0gKTtcblxuXHRpZiAoICEgaXNVbmRlZmluZWQoIGRldmlhdGlvbiApICkge1xuXHRcdHJldHVybiBkZXZpYXRpb24uc3lsbGFibGVzO1xuXHR9XG5cblx0cmV0dXJuIDA7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZGV2aWF0aW9uIGZyYWdtZW50cyBmb3IgYSBjZXJ0YWluIGxvY2FsZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gc3lsbGFibGVDb25maWcgU3lsbGFibGUgY29uZmlnIGZvciBhIGNlcnRhaW4gbG9jYWxlLlxuICogQHJldHVybnMge0RldmlhdGlvbkZyYWdtZW50W119IEEgbGlzdCBvZiBkZXZpYXRpb24gZnJhZ21lbnRzXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURldmlhdGlvbkZyYWdtZW50cyggc3lsbGFibGVDb25maWcgKSB7XG5cdHZhciBkZXZpYXRpb25GcmFnbWVudHMgPSBbXTtcblxuXHR2YXIgZGV2aWF0aW9ucyA9IHN5bGxhYmxlQ29uZmlnLmRldmlhdGlvbnM7XG5cblx0aWYgKCAhIGlzVW5kZWZpbmVkKCBkZXZpYXRpb25zLndvcmRzICkgJiYgISBpc1VuZGVmaW5lZCggZGV2aWF0aW9ucy53b3Jkcy5mcmFnbWVudHMgKSApIHtcblx0XHRkZXZpYXRpb25GcmFnbWVudHMgPSBmbGF0TWFwKCBkZXZpYXRpb25zLndvcmRzLmZyYWdtZW50cywgZnVuY3Rpb24oIGZyYWdtZW50cywgZnJhZ21lbnRMb2NhdGlvbiApIHtcblx0XHRcdHJldHVybiBtYXAoIGZyYWdtZW50cywgZnVuY3Rpb24oIGZyYWdtZW50ICkge1xuXHRcdFx0XHRmcmFnbWVudC5sb2NhdGlvbiA9IGZyYWdtZW50TG9jYXRpb247XG5cblx0XHRcdFx0cmV0dXJuIG5ldyBEZXZpYXRpb25GcmFnbWVudCggZnJhZ21lbnQgKTtcblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHRyZXR1cm4gZGV2aWF0aW9uRnJhZ21lbnRzO1xufVxuXG52YXIgY3JlYXRlRGV2aWF0aW9uRnJhZ21lbnRzTWVtb2l6ZWQgPSBtZW1vaXplKCBjcmVhdGVEZXZpYXRpb25GcmFnbWVudHMgKTtcblxuLyoqXG4gKiBDb3VudHMgc3lsbGFibGVzIGluIHBhcnRpYWwgZXhjbHVzaW9ucy4gSWYgdGhlc2UgYXJlIGZvdW5kLCByZXR1cm5zIHRoZSBudW1iZXIgb2Ygc3lsbGFibGVzICBmb3VuZCwgYW5kIHRoZSBtb2RpZmllZCB3b3JkLlxuICogVGhlIHdvcmQgaXMgbW9kaWZpZWQgc28gdGhlIGV4Y2x1ZGVkIHBhcnQgaXNuJ3QgY291bnRlZCBieSB0aGUgbm9ybWFsIHN5bGxhYmxlIGNvdW50ZXIuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHdvcmQgVGhlIHdvcmQgdG8gY291bnQgc3lsbGFibGVzIG9mLlxuICogQHBhcmFtIHtTdHJpbmd9IGxvY2FsZSBUaGUgbG9jYWxlIHRvIHVzZSBmb3IgY291bnRpbmcgc3lsbGFibGVzLlxuICogQHJldHVybnMge29iamVjdH0gVGhlIG51bWJlciBvZiBzeWxsYWJsZXMgZm91bmQgYW5kIHRoZSBtb2RpZmllZCB3b3JkLlxuICovXG52YXIgY291bnRQYXJ0aWFsV29yZERldmlhdGlvbnMgPSBmdW5jdGlvbiggd29yZCwgbG9jYWxlICkge1xuXHR2YXIgZGV2aWF0aW9uRnJhZ21lbnRzID0gY3JlYXRlRGV2aWF0aW9uRnJhZ21lbnRzTWVtb2l6ZWQoIHN5bGxhYmxlTWF0Y2hlcnMoIGxvY2FsZSApICk7XG5cdHZhciByZW1haW5pbmdQYXJ0cyA9IHdvcmQ7XG5cdHZhciBzeWxsYWJsZUNvdW50ID0gMDtcblxuXHRmb3JFYWNoKCBkZXZpYXRpb25GcmFnbWVudHMsIGZ1bmN0aW9uKCBkZXZpYXRpb25GcmFnbWVudCApIHtcblx0XHRpZiAoIGRldmlhdGlvbkZyYWdtZW50Lm9jY3Vyc0luKCByZW1haW5pbmdQYXJ0cyApICkge1xuXHRcdFx0cmVtYWluaW5nUGFydHMgPSBkZXZpYXRpb25GcmFnbWVudC5yZW1vdmVGcm9tKCByZW1haW5pbmdQYXJ0cyApO1xuXHRcdFx0c3lsbGFibGVDb3VudCArPSBkZXZpYXRpb25GcmFnbWVudC5nZXRTeWxsYWJsZXMoKTtcblx0XHR9XG5cdH0gKTtcblxuXHRyZXR1cm4geyB3b3JkOiByZW1haW5pbmdQYXJ0cywgc3lsbGFibGVDb3VudDogc3lsbGFibGVDb3VudCB9O1xufTtcblxuLyoqXG4gKiBDb3VudCB0aGUgbnVtYmVyIG9mIHN5bGxhYmxlcyBpbiBhIHdvcmQsIHVzaW5nIHZvd2VscyBhbmQgZXhjZXB0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gd29yZCBUaGUgd29yZCB0byBjb3VudCB0aGUgbnVtYmVyIG9mIHN5bGxhYmxlcyBvZi5cbiAqIEBwYXJhbSB7U3RyaW5nfSBsb2NhbGUgVGhlIGxvY2FsZSB0byB1c2UgZm9yIGNvdW50aW5nIHN5bGxhYmxlcy5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBudW1iZXIgb2Ygc3lsbGFibGVzIGZvdW5kIGluIGEgd29yZC5cbiAqL1xudmFyIGNvdW50VXNpbmdWb3dlbHMgPSBmdW5jdGlvbiggd29yZCwgbG9jYWxlICkge1xuXHR2YXIgc3lsbGFibGVDb3VudCA9IDA7XG5cblx0c3lsbGFibGVDb3VudCArPSBjb3VudFZvd2VsR3JvdXBzKCB3b3JkLCBsb2NhbGUgKTtcblx0c3lsbGFibGVDb3VudCArPSBjb3VudFZvd2VsRGV2aWF0aW9ucyggd29yZCwgbG9jYWxlICk7XG5cblx0cmV0dXJuIHN5bGxhYmxlQ291bnQ7XG59O1xuXG4vKipcbiAqIENvdW50cyB0aGUgbnVtYmVyIG9mIHN5bGxhYmxlcyBpbiBhIHdvcmQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHdvcmQgVGhlIHdvcmQgdG8gY291bnQgc3lsbGFibGVzIG9mLlxuICogQHBhcmFtIHtzdHJpbmd9IGxvY2FsZSBUaGUgbG9jYWxlIG9mIHRoZSB3b3JkLlxuICogQHJldHVybnMge251bWJlcn0gVGhlIHN5bGxhYmxlIGNvdW50IGZvciB0aGUgd29yZC5cbiAqL1xudmFyIGNvdW50U3lsbGFibGVzSW5Xb3JkID0gZnVuY3Rpb24oIHdvcmQsIGxvY2FsZSApIHtcblx0dmFyIHN5bGxhYmxlQ291bnQgPSAwO1xuXG5cdHZhciBmdWxsV29yZEV4Y2x1c2lvbiA9IGNvdW50RnVsbFdvcmREZXZpYXRpb25zKCB3b3JkLCBsb2NhbGUgKTtcblx0aWYgKCBmdWxsV29yZEV4Y2x1c2lvbiAhPT0gMCApIHtcblx0XHRyZXR1cm4gZnVsbFdvcmRFeGNsdXNpb247XG5cdH1cblxuXHR2YXIgcGFydGlhbEV4Y2x1c2lvbnMgPSBjb3VudFBhcnRpYWxXb3JkRGV2aWF0aW9ucyggd29yZCwgbG9jYWxlICk7XG5cdHdvcmQgPSBwYXJ0aWFsRXhjbHVzaW9ucy53b3JkO1xuXHRzeWxsYWJsZUNvdW50ICs9IHBhcnRpYWxFeGNsdXNpb25zLnN5bGxhYmxlQ291bnQ7XG5cdHN5bGxhYmxlQ291bnQgKz0gY291bnRVc2luZ1Zvd2Vscyggd29yZCwgbG9jYWxlICk7XG5cblx0cmV0dXJuIHN5bGxhYmxlQ291bnQ7XG59O1xuXG4vKipcbiAqIENvdW50cyB0aGUgbnVtYmVyIG9mIHN5bGxhYmxlcyBpbiBhIHRleHQgcGVyIHdvcmQgYmFzZWQgb24gdm93ZWxzLlxuICogVXNlcyBleGNsdXNpb24gd29yZHMgZm9yIHdvcmRzIHRoYXQgY2Fubm90IGJlIG1hdGNoZWQgd2l0aCB2b3dlbCBtYXRjaGluZy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdGV4dCBUaGUgdGV4dCB0byBjb3VudCB0aGUgc3lsbGFibGVzIG9mLlxuICogQHBhcmFtIHtTdHJpbmd9IGxvY2FsZSBUaGUgbG9jYWxlIHRvIHVzZSBmb3IgY291bnRpbmcgc3lsbGFibGVzLlxuICogQHJldHVybnMge2ludH0gVGhlIHRvdGFsIG51bWJlciBvZiBzeWxsYWJsZXMgZm91bmQgaW4gdGhlIHRleHQuXG4gKi9cbnZhciBjb3VudFN5bGxhYmxlc0luVGV4dCA9IGZ1bmN0aW9uKCB0ZXh0LCBsb2NhbGUgKSB7XG5cdHRleHQgPSB0ZXh0LnRvTG9jYWxlTG93ZXJDYXNlKCk7XG5cdHZhciB3b3JkcyA9IGdldFdvcmRzKCB0ZXh0ICk7XG5cblx0dmFyIHN5bGxhYmxlQ291bnRzID0gbWFwKCB3b3JkcywgIGZ1bmN0aW9uKCB3b3JkICkge1xuXHRcdHJldHVybiBjb3VudFN5bGxhYmxlc0luV29yZCggd29yZCwgbG9jYWxlICk7XG5cdH0gKTtcblxuXHRyZXR1cm4gc3VtKCBzeWxsYWJsZUNvdW50cyApO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBjb3VudFN5bGxhYmxlc0luVGV4dDtcbiIsIi8qKiBAbW9kdWxlIHN0cmluZ1Byb2Nlc3NpbmcvcmVwbGFjZURpYWNyaXRpY3MgKi9cblxudmFyIHRyYW5zbGl0ZXJhdGlvbnNNYXAgPSByZXF1aXJlKCBcIi4uL2NvbmZpZy90cmFuc2xpdGVyYXRpb25zLmpzXCIgKTtcblxuLyoqXG4gKiBSZXBsYWNlcyBhbGwgc3BlY2lhbCBjaGFyYWN0ZXJzIGZyb20gdGhlIHRleHQgYmFzZWQgb24gdGhlIHRyYW5zbGl0ZXJhdGlvbnMgbWFwLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IFRoZSB0ZXh0IHRvIHJlbW92ZSBzcGVjaWFsIGNoYXJhY3RlcnMgZnJvbS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBsb2NhbGUgVGhlIGxvY2FsZS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSB0ZXh0IHdpdGggYWxsIHNwZWNpYWwgY2hhcmFjdGVycyByZXBsYWNlZC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiggdGV4dCwgbG9jYWxlICkge1xuXHR2YXIgbWFwID0gdHJhbnNsaXRlcmF0aW9uc01hcCggbG9jYWxlICk7XG5cdGZvciAoIHZhciBpID0gMDsgaSA8IG1hcC5sZW5ndGg7IGkrKyApIHtcblx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKFxuXHRcdFx0bWFwWyBpIF0ubGV0dGVyLFxuXHRcdFx0bWFwWyBpIF0uYWx0ZXJuYXRpdmVcblx0XHQpO1xuXHR9XG5cdHJldHVybiB0ZXh0O1xufTtcbiIsIi8qKiBAbW9kdWxlIHN0cmluZ1Byb2Nlc3NpbmcvdW5pZnlXaGl0ZXNwYWNlICovXG5cbi8qKlxuICogUmVwbGFjZXMgYSBub24gYnJlYWtpbmcgc3BhY2Ugd2l0aCBhIG5vcm1hbCBzcGFjZVxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQgVGhlIHN0cmluZyB0byByZXBsYWNlIHRoZSBub24gYnJlYWtpbmcgc3BhY2UgaW4uXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgdGV4dCB3aXRoIHVuaWZpZWQgc3BhY2VzLlxuICovXG52YXIgdW5pZnlOb25CcmVha2luZ1NwYWNlID0gZnVuY3Rpb24oIHRleHQgKSB7XG5cdHJldHVybiB0ZXh0LnJlcGxhY2UoIC8mbmJzcDsvZywgXCIgXCIgKTtcbn07XG5cbi8qKlxuICogUmVwbGFjZXMgYWxsIHdoaXRlc3BhY2VzIHdpdGggYSBub3JtYWwgc3BhY2VcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IFRoZSBzdHJpbmcgdG8gcmVwbGFjZSB0aGUgbm9uIGJyZWFraW5nIHNwYWNlIGluLlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIHRleHQgd2l0aCB1bmlmaWVkIHNwYWNlcy5cbiAqL1xudmFyIHVuaWZ5V2hpdGVTcGFjZSA9IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRyZXR1cm4gdGV4dC5yZXBsYWNlKCAvXFxzL2csIFwiIFwiICk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGFsbCB3aGl0ZXNwYWNlIHRvIHNwYWNlcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dCBUaGUgdGV4dCB0byByZXBsYWNlIHNwYWNlcy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSB0ZXh0IHdpdGggdW5pZmllZCBzcGFjZXMuXG4gKi9cbnZhciB1bmlmeUFsbFNwYWNlcyA9IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHR0ZXh0ID0gdW5pZnlOb25CcmVha2luZ1NwYWNlKCB0ZXh0ICk7XG5cdHJldHVybiB1bmlmeVdoaXRlU3BhY2UoIHRleHQgKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHR1bmlmeU5vbkJyZWFraW5nU3BhY2U6IHVuaWZ5Tm9uQnJlYWtpbmdTcGFjZSxcblx0dW5pZnlXaGl0ZVNwYWNlOiB1bmlmeVdoaXRlU3BhY2UsXG5cdHVuaWZ5QWxsU3BhY2VzOiB1bmlmeUFsbFNwYWNlcyxcbn07XG4iLCJ2YXIgdXJsRnJvbUFuY2hvclJlZ2V4ID0gL2hyZWY9KFtcIiddKShbXlwiJ10rKVxcMS9pO1xudmFyIHVybE1ldGhvZHMgPSByZXF1aXJlKCBcInVybFwiICk7XG5cbi8qKlxuICogUmVtb3ZlcyBhIGhhc2ggZnJvbSBhIFVSTCwgYXNzdW1lcyBhIHdlbGwgZm9ybWVkIFVSTC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gcmVtb3ZlIGEgaGFzaCBmcm9tLlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIFVSTCB3aXRob3V0IHRoZSBoYXNoLlxuICovXG5mdW5jdGlvbiByZW1vdmVIYXNoKCB1cmwgKSB7XG5cdHJldHVybiB1cmwuc3BsaXQoIFwiI1wiIClbIDAgXTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBxdWVyeSBhcmdzIGZyb20gYSBVUkwsIGFzc3VtZXMgYSB3ZWxsIGZvcm1lZCBVUkwuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHJlbW92ZSB0aGUgcXVlcnkgYXJncyBmcm9tLlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIFVSTCB3aXRob3V0IHRoZSBxdWVyeSBhcmdzLlxuICovXG5mdW5jdGlvbiByZW1vdmVRdWVyeUFyZ3MoIHVybCApIHtcblx0cmV0dXJuIHVybC5zcGxpdCggXCI/XCIgKVsgMCBdO1xufVxuXG4vKipcbiAqIFJlbW92ZXMgdGhlIHRyYWlsaW5nIHNsYXNoIG9mIGEgVVJMLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byByZW1vdmUgdGhlIHRyYWlsaW5nIHNsYXNoIGZyb20uXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIFVSTCB3aXRob3V0IGEgdHJhaWxpbmcgc2xhc2guXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZVRyYWlsaW5nU2xhc2goIHVybCApIHtcblx0cmV0dXJuIHVybC5yZXBsYWNlKCAvXFwvJC8sIFwiXCIgKTtcbn1cblxuLyoqXG4gKiBBZGRzIGEgdHJhaWxpbmcgc2xhc2ggdG8gYSBVUkwgaWYgaXQgaXMgbm90IHByZXNlbnQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIGFkZCBhIHRyYWlsaW5nIHNsYXNoIHRvLlxuICogQHJldHVybnMge3N0cmluZ30gQSBVUkwgd2l0aCBhIHRyYWlsaW5nIHNsYXNoLlxuICovXG5mdW5jdGlvbiBhZGRUcmFpbGluZ1NsYXNoKCB1cmwgKSB7XG5cdHJldHVybiByZW1vdmVUcmFpbGluZ1NsYXNoKCB1cmwgKSArIFwiL1wiO1xufVxuXG4vKipcbiAqIFJldHJpZXZlcyB0aGUgVVJMIGZyb20gYW4gYW5jaG9yIHRhZ1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBhbmNob3JUYWcgQW4gYW5jaG9yIHRhZy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBVUkwgaW4gdGhlIGFuY2hvciB0YWcuXG4gKi9cbmZ1bmN0aW9uIGdldEZyb21BbmNob3JUYWcoIGFuY2hvclRhZyApIHtcblx0dmFyIHVybE1hdGNoID0gdXJsRnJvbUFuY2hvclJlZ2V4LmV4ZWMoIGFuY2hvclRhZyApO1xuXG5cdHJldHVybiAoIHVybE1hdGNoID09PSBudWxsICkgPyBcIlwiIDogdXJsTWF0Y2hbIDIgXTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBnaXZlbiBVUkxzIGFyZSBlcXVhbFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmxBIFRoZSBmaXJzdCBVUkwgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmxCIFRoZSBzZWNvbmQgVVJMIHRvIGNvbXBhcmUuXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IHRoZSBnaXZlbiBVUkxzIGFyZSBlcXVhbC5cbiAqL1xuZnVuY3Rpb24gYXJlRXF1YWwoIHVybEEsIHVybEIgKSB7XG5cdC8vIE1ha2Ugc3VyZSB3ZSBhcmUgY29tcGFyaW5nIFVSTHMgd2l0aG91dCBxdWVyeSBhcmd1bWVudHMgYW5kIGhhc2hlcy5cblx0dXJsQSA9IHJlbW92ZVF1ZXJ5QXJncyggcmVtb3ZlSGFzaCggdXJsQSApICk7XG5cdHVybEIgPSByZW1vdmVRdWVyeUFyZ3MoIHJlbW92ZUhhc2goIHVybEIgKSApO1xuXG5cdHJldHVybiBhZGRUcmFpbGluZ1NsYXNoKCB1cmxBICkgPT09IGFkZFRyYWlsaW5nU2xhc2goIHVybEIgKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBkb21haW4gbmFtZSBvZiBhIFVSTFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byByZXRyaWV2ZSB0aGUgZG9tYWluIG5hbWUgb2YuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZG9tYWluIG5hbWUgb2YgdGhlIFVSTC5cbiAqL1xuZnVuY3Rpb24gZ2V0SG9zdG5hbWUoIHVybCApIHtcblx0dXJsID0gdXJsTWV0aG9kcy5wYXJzZSggdXJsICk7XG5cblx0cmV0dXJuIHVybC5ob3N0bmFtZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdHJlbW92ZUhhc2g6IHJlbW92ZUhhc2gsXG5cdHJlbW92ZVF1ZXJ5QXJnczogcmVtb3ZlUXVlcnlBcmdzLFxuXHRyZW1vdmVUcmFpbGluZ1NsYXNoOiByZW1vdmVUcmFpbGluZ1NsYXNoLFxuXHRhZGRUcmFpbGluZ1NsYXNoOiBhZGRUcmFpbGluZ1NsYXNoLFxuXHRnZXRGcm9tQW5jaG9yVGFnOiBnZXRGcm9tQW5jaG9yVGFnLFxuXHRhcmVFcXVhbDogYXJlRXF1YWwsXG5cdGdldEhvc3RuYW1lOiBnZXRIb3N0bmFtZSxcbn07XG4iLCJ2YXIgaXNVbmRlZmluZWQgPSByZXF1aXJlKCBcImxvZGFzaC9pc1VuZGVmaW5lZFwiICk7XG52YXIgaXNOdW1iZXIgPSByZXF1aXJlKCBcImxvZGFzaC9pc051bWJlclwiICk7XG5cbi8qKlxuICogQSBmdW5jdGlvbiB0aGF0IG9ubHkgcmV0dXJucyBhbiBlbXB0eSB0aGF0IGNhbiBiZSB1c2VkIGFzIGFuIGVtcHR5IG1hcmtlclxuICpcbiAqIEByZXR1cm5zIHtBcnJheX0gQSBsaXN0IG9mIGVtcHR5IG1hcmtzLlxuICovXG52YXIgZW1wdHlNYXJrZXIgPSBmdW5jdGlvbigpIHtcblx0cmV0dXJuIFtdO1xufTtcblxuLyoqXG4gKiBDb25zdHJ1Y3QgdGhlIEFzc2Vzc21lbnRSZXN1bHQgdmFsdWUgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBbdmFsdWVzXSBUaGUgdmFsdWVzIGZvciB0aGlzIGFzc2Vzc21lbnQgcmVzdWx0LlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICovXG52YXIgQXNzZXNzbWVudFJlc3VsdCA9IGZ1bmN0aW9uKCB2YWx1ZXMgKSB7XG5cdHRoaXMuX2hhc1Njb3JlID0gZmFsc2U7XG5cdHRoaXMuX2lkZW50aWZpZXIgPSBcIlwiO1xuXHR0aGlzLl9oYXNNYXJrcyA9IGZhbHNlO1xuXHR0aGlzLl9tYXJrZXIgPSBlbXB0eU1hcmtlcjtcblx0dGhpcy5zY29yZSA9IDA7XG5cdHRoaXMudGV4dCA9IFwiXCI7XG5cblx0aWYgKCBpc1VuZGVmaW5lZCggdmFsdWVzICkgKSB7XG5cdFx0dmFsdWVzID0ge307XG5cdH1cblxuXHRpZiAoICEgaXNVbmRlZmluZWQoIHZhbHVlcy5zY29yZSApICkge1xuXHRcdHRoaXMuc2V0U2NvcmUoIHZhbHVlcy5zY29yZSApO1xuXHR9XG5cblx0aWYgKCAhIGlzVW5kZWZpbmVkKCB2YWx1ZXMudGV4dCApICkge1xuXHRcdHRoaXMuc2V0VGV4dCggdmFsdWVzLnRleHQgKTtcblx0fVxufTtcblxuLyoqXG4gKiBDaGVjayBpZiBhIHNjb3JlIGlzIGF2YWlsYWJsZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCBhIHNjb3JlIGlzIGF2YWlsYWJsZS5cbiAqL1xuQXNzZXNzbWVudFJlc3VsdC5wcm90b3R5cGUuaGFzU2NvcmUgPSBmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXMuX2hhc1Njb3JlO1xufTtcblxuLyoqXG4gKiBHZXQgdGhlIGF2YWlsYWJsZSBzY29yZVxuICogQHJldHVybnMge251bWJlcn0gVGhlIHNjb3JlIGFzc29jaWF0ZWQgd2l0aCB0aGUgQXNzZXNzbWVudFJlc3VsdC5cbiAqL1xuQXNzZXNzbWVudFJlc3VsdC5wcm90b3R5cGUuZ2V0U2NvcmUgPSBmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXMuc2NvcmU7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgc2NvcmUgZm9yIHRoZSBhc3Nlc3NtZW50LlxuICogQHBhcmFtIHtudW1iZXJ9IHNjb3JlIFRoZSBzY29yZSB0byBiZSB1c2VkIGZvciB0aGUgc2NvcmUgcHJvcGVydHlcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5Bc3Nlc3NtZW50UmVzdWx0LnByb3RvdHlwZS5zZXRTY29yZSA9IGZ1bmN0aW9uKCBzY29yZSApIHtcblx0aWYgKCBpc051bWJlciggc2NvcmUgKSApIHtcblx0XHR0aGlzLnNjb3JlID0gc2NvcmU7XG5cdFx0dGhpcy5faGFzU2NvcmUgPSB0cnVlO1xuXHR9XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIGEgdGV4dCBpcyBhdmFpbGFibGUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgYSB0ZXh0IGlzIGF2YWlsYWJsZS5cbiAqL1xuQXNzZXNzbWVudFJlc3VsdC5wcm90b3R5cGUuaGFzVGV4dCA9IGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcy50ZXh0ICE9PSBcIlwiO1xufTtcblxuLyoqXG4gKiBHZXQgdGhlIGF2YWlsYWJsZSB0ZXh0XG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgdGV4dCBhc3NvY2lhdGVkIHdpdGggdGhlIEFzc2Vzc21lbnRSZXN1bHQuXG4gKi9cbkFzc2Vzc21lbnRSZXN1bHQucHJvdG90eXBlLmdldFRleHQgPSBmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXMudGV4dDtcbn07XG5cbi8qKlxuICogU2V0IHRoZSB0ZXh0IGZvciB0aGUgYXNzZXNzbWVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IFRoZSB0ZXh0IHRvIGJlIHVzZWQgZm9yIHRoZSB0ZXh0IHByb3BlcnR5XG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuQXNzZXNzbWVudFJlc3VsdC5wcm90b3R5cGUuc2V0VGV4dCA9IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRpZiAoIGlzVW5kZWZpbmVkKCB0ZXh0ICkgKSB7XG5cdFx0dGV4dCA9IFwiXCI7XG5cdH1cblxuXHR0aGlzLnRleHQgPSB0ZXh0O1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBpZGVudGlmaWVyXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGlkZW50aWZpZXIgQW4gYWxwaGFudW1lcmljIGlkZW50aWZpZXIgZm9yIHRoaXMgcmVzdWx0LlxuICovXG5Bc3Nlc3NtZW50UmVzdWx0LnByb3RvdHlwZS5zZXRJZGVudGlmaWVyID0gZnVuY3Rpb24oIGlkZW50aWZpZXIgKSB7XG5cdHRoaXMuX2lkZW50aWZpZXIgPSBpZGVudGlmaWVyO1xufTtcblxuLyoqXG4gKiBHZXRzIHRoZSBpZGVudGlmaWVyXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gQW4gYWxwaGFudW1lcmljIGlkZW50aWZpZXIgZm9yIHRoaXMgcmVzdWx0LlxuICovXG5Bc3Nlc3NtZW50UmVzdWx0LnByb3RvdHlwZS5nZXRJZGVudGlmaWVyID0gZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzLl9pZGVudGlmaWVyO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBtYXJrZXIsIGEgcHVyZSBmdW5jdGlvbiB0aGF0IGNhbiByZXR1cm4gdGhlIG1hcmtzIGZvciBhIGdpdmVuIFBhcGVyXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gbWFya2VyIFRoZSBtYXJrZXIgdG8gc2V0LlxuICovXG5Bc3Nlc3NtZW50UmVzdWx0LnByb3RvdHlwZS5zZXRNYXJrZXIgPSBmdW5jdGlvbiggbWFya2VyICkge1xuXHR0aGlzLl9tYXJrZXIgPSBtYXJrZXI7XG59O1xuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhpcyByZXN1bHQgaGFzIGEgbWFya2VyIHRoYXQgY2FuIGJlIHVzZWQgdG8gbWFyayBmb3IgYSBnaXZlbiBQYXBlclxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBXaGV0aGVyIG9yIHRoaXMgcmVzdWx0IGhhcyBhIG1hcmtlci5cbiAqL1xuQXNzZXNzbWVudFJlc3VsdC5wcm90b3R5cGUuaGFzTWFya2VyID0gZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzLl9oYXNNYXJrcyAmJiB0aGlzLl9tYXJrZXIgIT09IGVtcHR5TWFya2VyO1xufTtcblxuLyoqXG4gKiBHZXRzIHRoZSBtYXJrZXIsIGEgcHVyZSBmdW5jdGlvbiB0aGF0IGNhbiByZXR1cm4gdGhlIG1hcmtzIGZvciBhIGdpdmVuIFBhcGVyXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBUaGUgbWFya2VyLlxuICovXG5Bc3Nlc3NtZW50UmVzdWx0LnByb3RvdHlwZS5nZXRNYXJrZXIgPSBmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXMuX21hcmtlcjtcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgdmFsdWUgb2YgX2hhc01hcmtzIHRvIGRldGVybWluZSBpZiB0aGVyZSBpcyBzb21ldGhpbmcgdG8gbWFyay5cbiAqXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGhhc01hcmtzIElzIHRoZXJlIHNvbWV0aGluZyB0byBtYXJrLlxuICovXG5Bc3Nlc3NtZW50UmVzdWx0LnByb3RvdHlwZS5zZXRIYXNNYXJrcyA9IGZ1bmN0aW9uKCBoYXNNYXJrcyApIHtcblx0dGhpcy5faGFzTWFya3MgPSBoYXNNYXJrcztcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgdmFsdWUgb2YgX2hhc01hcmtzIHRvIGRldGVybWluZSBpZiB0aGVyZSBpcyBzb21ldGhpbmcgdG8gbWFyay5cbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gSXMgdGhlcmUgc29tZXRoaW5nIHRvIG1hcmsuXG4gKi9cbkFzc2Vzc21lbnRSZXN1bHQucHJvdG90eXBlLmhhc01hcmtzID0gZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzLl9oYXNNYXJrcztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQXNzZXNzbWVudFJlc3VsdDtcbiIsInZhciBkZWZhdWx0cyA9IHJlcXVpcmUoIFwibG9kYXNoL2RlZmF1bHRzXCIgKTtcblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgbWFya2VkIHBpZWNlIG9mIHRleHRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcGVydGllcyBUaGUgcHJvcGVydGllcyBvZiB0aGlzIE1hcmsuXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydGllcy5vcmlnaW5hbCBUaGUgb3JpZ2luYWwgdGV4dCB0aGF0IHNob3VsZCBiZSBtYXJrZWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydGllcy5tYXJrZWQgVGhlIG5ldyB0ZXh0IGluY2x1ZGluZyBtYXJrcy5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBNYXJrKCBwcm9wZXJ0aWVzICkge1xuXHRkZWZhdWx0cyggcHJvcGVydGllcywgeyBvcmlnaW5hbDogXCJcIiwgbWFya2VkOiBcIlwiIH0gKTtcblxuXHR0aGlzLl9wcm9wZXJ0aWVzID0gcHJvcGVydGllcztcbn1cblxuXG4vKipcbiAqIFJldHVybnMgdGhlIG9yaWdpbmFsIHRleHRcbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgb3JpZ2luYWwgdGV4dC5cbiAqL1xuTWFyay5wcm90b3R5cGUuZ2V0T3JpZ2luYWwgPSBmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXMuX3Byb3BlcnRpZXMub3JpZ2luYWw7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIG1hcmtlZCB0ZXh0XG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIHJlcGxhY2VkIHRleHQuXG4gKi9cbk1hcmsucHJvdG90eXBlLmdldE1hcmtlZCA9IGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcy5fcHJvcGVydGllcy5tYXJrZWQ7XG59O1xuXG4vKipcbiAqIEFwcGxpZXMgdGhpcyBtYXJrIHRvIHRoZSBnaXZlbiB0ZXh0XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQgVGhlIG9yaWdpbmFsIHRleHQgd2l0aG91dCB0aGUgbWFyayBhcHBsaWVkLlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIEEgbmV3IHRleHQgd2l0aCB0aGUgbWFyayBhcHBsaWVkIHRvIGl0LlxuICovXG5NYXJrLnByb3RvdHlwZS5hcHBseVdpdGhSZXBsYWNlID0gZnVuY3Rpb24oIHRleHQgKSB7XG5cdC8vIEN1dGUgbWV0aG9kIHRvIHJlcGxhY2UgZXZlcnl0aGluZyBpbiBhIHN0cmluZyB3aXRob3V0IHVzaW5nIHJlZ2V4LlxuXHRyZXR1cm4gdGV4dC5zcGxpdCggdGhpcy5fcHJvcGVydGllcy5vcmlnaW5hbCApLmpvaW4oIHRoaXMuX3Byb3BlcnRpZXMubWFya2VkICk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hcms7XG4iLCJ2YXIgZGVmYXVsdHMgPSByZXF1aXJlKCBcImxvZGFzaC9kZWZhdWx0c1wiICk7XG52YXIgc2FuaXRpemVTdHJpbmcgPSByZXF1aXJlKCBcIi4uL3N0cmluZ1Byb2Nlc3Npbmcvc2FuaXRpemVTdHJpbmcuanNcIiApO1xuXG4vKipcbiAqIERlZmF1bHQgYXR0cmlidXRlcyB0byBiZSB1c2VkIGJ5IHRoZSBQYXBlciBpZiB0aGV5IGFyZSBsZWZ0IHVuZGVmaW5lZC5cbiAqIEB0eXBlIHt7a2V5d29yZDogc3RyaW5nLCBkZXNjcmlwdGlvbjogc3RyaW5nLCB0aXRsZTogc3RyaW5nLCB1cmw6IHN0cmluZ319XG4gKi9cbnZhciBkZWZhdWx0QXR0cmlidXRlcyA9IHtcblx0a2V5d29yZDogXCJcIixcblx0ZGVzY3JpcHRpb246IFwiXCIsXG5cdHRpdGxlOiBcIlwiLFxuXHR0aXRsZVdpZHRoOiAwLFxuXHR1cmw6IFwiXCIsXG5cdGxvY2FsZTogXCJlbl9VU1wiLFxuXHRwZXJtYWxpbms6IFwiXCIsXG59O1xuXG4vKipcbiAqIFNhbml0aXplIGF0dHJpYnV0ZXMgYmVmb3JlIHRoZXkgYXJlIGFzc2lnbmVkIHRvIHRoZSBQYXBlci5cbiAqIEBwYXJhbSB7b2JqZWN0fSBhdHRyaWJ1dGVzIFRoZSBhdHRyaWJ1dGVzIHRoYXQgbmVlZCBzYW5pdGl6aW5nLlxuICogQHJldHVybnMge29iamVjdH0gVGhlIGF0dHJpYnV0ZXMgcGFzc2VkIHRvIHRoZSBQYXBlci5cbiAqL1xudmFyIHNhbml0aXplQXR0cmlidXRlcyA9IGZ1bmN0aW9uKCBhdHRyaWJ1dGVzICkge1xuXHRhdHRyaWJ1dGVzLmtleXdvcmQgPSBzYW5pdGl6ZVN0cmluZyggYXR0cmlidXRlcy5rZXl3b3JkICk7XG5cblx0cmV0dXJuIGF0dHJpYnV0ZXM7XG59O1xuXG4vKipcbiAqIENvbnN0cnVjdCB0aGUgUGFwZXIgb2JqZWN0IGFuZCBzZXQgdGhlIGtleXdvcmQgcHJvcGVydHkuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dCBUaGUgdGV4dCB0byB1c2UgaW4gdGhlIGFuYWx5c2lzLlxuICogQHBhcmFtIHtvYmplY3R9IGF0dHJpYnV0ZXMgVGhlIG9iamVjdCBjb250YWluaW5nIGFsbCBhdHRyaWJ1dGVzLlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnZhciBQYXBlciA9IGZ1bmN0aW9uKCB0ZXh0LCBhdHRyaWJ1dGVzICkge1xuXHR0aGlzLl90ZXh0ID0gdGV4dCB8fCBcIlwiO1xuXG5cdGF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzIHx8IHt9O1xuXHRkZWZhdWx0cyggYXR0cmlidXRlcywgZGVmYXVsdEF0dHJpYnV0ZXMgKTtcblx0aWYgKCBhdHRyaWJ1dGVzLmxvY2FsZSA9PT0gXCJcIiApIHtcblx0XHRhdHRyaWJ1dGVzLmxvY2FsZSA9IGRlZmF1bHRBdHRyaWJ1dGVzLmxvY2FsZTtcblx0fVxuXHR0aGlzLl9hdHRyaWJ1dGVzID0gc2FuaXRpemVBdHRyaWJ1dGVzKCBhdHRyaWJ1dGVzICk7XG59O1xuXG4vKipcbiAqIENoZWNrIHdoZXRoZXIgYSBrZXl3b3JkIGlzIGF2YWlsYWJsZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIHRydWUgaWYgdGhlIFBhcGVyIGhhcyBhIGtleXdvcmQuXG4gKi9cblBhcGVyLnByb3RvdHlwZS5oYXNLZXl3b3JkID0gZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzLl9hdHRyaWJ1dGVzLmtleXdvcmQgIT09IFwiXCI7XG59O1xuXG4vKipcbiAqIFJldHVybiB0aGUgYXNzb2NpYXRlZCBrZXl3b3JkIG9yIGFuIGVtcHR5IHN0cmluZyBpZiBubyBrZXl3b3JkIGlzIGF2YWlsYWJsZS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgS2V5d29yZFxuICovXG5QYXBlci5wcm90b3R5cGUuZ2V0S2V5d29yZCA9IGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcy5fYXR0cmlidXRlcy5rZXl3b3JkO1xufTtcblxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIHRoZSB0ZXh0IGlzIGF2YWlsYWJsZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIHRydWUgaWYgdGhlIHBhcGVyIGhhcyBhIHRleHQuXG4gKi9cblBhcGVyLnByb3RvdHlwZS5oYXNUZXh0ID0gZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzLl90ZXh0ICE9PSBcIlwiO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gdGhlIGFzc29jaWF0ZWQgdGV4dCBvciBhbSBlbXB0eSBzdHJpbmcgaWYgbm8gdGV4dCBpcyBhdmFpbGFibGUuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRleHRcbiAqL1xuUGFwZXIucHJvdG90eXBlLmdldFRleHQgPSBmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXMuX3RleHQ7XG59O1xuXG4vKipcbiAqIENoZWNrIHdoZXRoZXIgYSBkZXNjcmlwdGlvbiBpcyBhdmFpbGFibGUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIHRoZSBwYXBlciBoYXMgYSBkZXNjcmlwdGlvbi5cbiAqL1xuUGFwZXIucHJvdG90eXBlLmhhc0Rlc2NyaXB0aW9uID0gZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzLl9hdHRyaWJ1dGVzLmRlc2NyaXB0aW9uICE9PSBcIlwiO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gdGhlIGRlc2NyaXB0aW9uIG9yIGFuIGVtcHR5IHN0cmluZyBpZiBubyBkZXNjcmlwdGlvbiBpcyBhdmFpbGFibGUuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBkZXNjcmlwdGlvbi5cbiAqL1xuUGFwZXIucHJvdG90eXBlLmdldERlc2NyaXB0aW9uID0gZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzLl9hdHRyaWJ1dGVzLmRlc2NyaXB0aW9uO1xufTtcblxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIGFuIHRpdGxlIGlzIGF2YWlsYWJsZVxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiB0aGUgUGFwZXIgaGFzIGEgdGl0bGUuXG4gKi9cblBhcGVyLnByb3RvdHlwZS5oYXNUaXRsZSA9IGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcy5fYXR0cmlidXRlcy50aXRsZSAhPT0gXCJcIjtcbn07XG5cbi8qKlxuICogUmV0dXJuIHRoZSB0aXRsZSwgb3IgYW4gZW1wdHkgc3RyaW5nIG9mIG5vIHRpdGxlIGlzIGF2YWlsYWJsZS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHRpdGxlXG4gKi9cblBhcGVyLnByb3RvdHlwZS5nZXRUaXRsZSA9IGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcy5fYXR0cmlidXRlcy50aXRsZTtcbn07XG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciBhbiB0aXRsZSB3aWR0aCBpbiBwaXhlbHMgaXMgYXZhaWxhYmxlXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIHRoZSBQYXBlciBoYXMgYSB0aXRsZS5cbiAqL1xuUGFwZXIucHJvdG90eXBlLmhhc1RpdGxlV2lkdGggPSBmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXMuX2F0dHJpYnV0ZXMudGl0bGVXaWR0aCAhPT0gMDtcbn07XG5cbi8qKlxuICogUmV0dXJuIHRoZSB0aXRsZSB3aWR0aCBpbiBwaXhlbHMsIG9yIGFuIGVtcHR5IHN0cmluZyBvZiBubyB0aXRsZSB3aWR0aCBpbiBwaXhlbHMgaXMgYXZhaWxhYmxlLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdGl0bGVcbiAqL1xuUGFwZXIucHJvdG90eXBlLmdldFRpdGxlV2lkdGggPSBmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXMuX2F0dHJpYnV0ZXMudGl0bGVXaWR0aDtcbn07XG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciBhbiB1cmwgaXMgYXZhaWxhYmxlXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIHRoZSBQYXBlciBoYXMgYW4gVXJsLlxuICovXG5QYXBlci5wcm90b3R5cGUuaGFzVXJsID0gZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzLl9hdHRyaWJ1dGVzLnVybCAhPT0gXCJcIjtcbn07XG5cbi8qKlxuICogUmV0dXJuIHRoZSB1cmwsIG9yIGFuIGVtcHR5IHN0cmluZyBvZiBubyB1cmwgaXMgYXZhaWxhYmxlLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdXJsXG4gKi9cblBhcGVyLnByb3RvdHlwZS5nZXRVcmwgPSBmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXMuX2F0dHJpYnV0ZXMudXJsO1xufTtcblxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIGEgbG9jYWxlIGlzIGF2YWlsYWJsZVxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiB0aGUgcGFwZXIgaGFzIGEgbG9jYWxlXG4gKi9cblBhcGVyLnByb3RvdHlwZS5oYXNMb2NhbGUgPSBmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXMuX2F0dHJpYnV0ZXMubG9jYWxlICE9PSBcIlwiO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gdGhlIGxvY2FsZSBvciBhbiBlbXB0eSBzdHJpbmcgaWYgbm8gbG9jYWxlIGlzIGF2YWlsYWJsZVxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgbG9jYWxlXG4gKi9cblBhcGVyLnByb3RvdHlwZS5nZXRMb2NhbGUgPSBmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXMuX2F0dHJpYnV0ZXMubG9jYWxlO1xufTtcblxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIGEgcGVybWFsaW5rIGlzIGF2YWlsYWJsZVxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiB0aGUgUGFwZXIgaGFzIGEgcGVybWFsaW5rLlxuICovXG5QYXBlci5wcm90b3R5cGUuaGFzUGVybWFsaW5rID0gZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzLl9hdHRyaWJ1dGVzLnBlcm1hbGluayAhPT0gXCJcIjtcbn07XG5cbi8qKlxuICogUmV0dXJuIHRoZSBwZXJtYWxpbmssIG9yIGFuIGVtcHR5IHN0cmluZyBvZiBubyBwZXJtYWxpbmsgaXMgYXZhaWxhYmxlLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcGVybWFsaW5rLlxuICovXG5QYXBlci5wcm90b3R5cGUuZ2V0UGVybWFsaW5rID0gZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzLl9hdHRyaWJ1dGVzLnBlcm1hbGluaztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUGFwZXI7XG4iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBoYXNoIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgaGFzaCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIEhhc2goKSB7fVxuXG4vLyBBdm9pZCBpbmhlcml0aW5nIGZyb20gYE9iamVjdC5wcm90b3R5cGVgIHdoZW4gcG9zc2libGUuXG5IYXNoLnByb3RvdHlwZSA9IG5hdGl2ZUNyZWF0ZSA/IG5hdGl2ZUNyZWF0ZShudWxsKSA6IG9iamVjdFByb3RvO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEhhc2g7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIE1hcCA9IGdldE5hdGl2ZShyb290LCAnTWFwJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gTWFwO1xuIiwidmFyIG1hcENsZWFyID0gcmVxdWlyZSgnLi9fbWFwQ2xlYXInKSxcbiAgICBtYXBEZWxldGUgPSByZXF1aXJlKCcuL19tYXBEZWxldGUnKSxcbiAgICBtYXBHZXQgPSByZXF1aXJlKCcuL19tYXBHZXQnKSxcbiAgICBtYXBIYXMgPSByZXF1aXJlKCcuL19tYXBIYXMnKSxcbiAgICBtYXBTZXQgPSByZXF1aXJlKCcuL19tYXBTZXQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbWFwIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTWFwQ2FjaGUodmFsdWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gdmFsdWVzID8gdmFsdWVzLmxlbmd0aCA6IDA7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IHZhbHVlc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgZnVuY3Rpb25zIHRvIHRoZSBgTWFwQ2FjaGVgLlxuTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2xlYXI7XG5NYXBDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbWFwRGVsZXRlO1xuTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcEdldDtcbk1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBIYXM7XG5NYXBDYWNoZS5wcm90b3R5cGUuc2V0ID0gbWFwU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hcENhY2hlO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFJlZmxlY3QgPSByb290LlJlZmxlY3Q7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVmbGVjdDtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgU2V0ID0gZ2V0TmF0aXZlKHJvb3QsICdTZXQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTZXQ7XG4iLCJ2YXIgTWFwQ2FjaGUgPSByZXF1aXJlKCcuL19NYXBDYWNoZScpLFxuICAgIGNhY2hlUHVzaCA9IHJlcXVpcmUoJy4vX2NhY2hlUHVzaCcpO1xuXG4vKipcbiAqXG4gKiBDcmVhdGVzIGEgc2V0IGNhY2hlIG9iamVjdCB0byBzdG9yZSB1bmlxdWUgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIFNldENhY2hlKHZhbHVlcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHZhbHVlcyA/IHZhbHVlcy5sZW5ndGggOiAwO1xuXG4gIHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGU7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdGhpcy5wdXNoKHZhbHVlc1tpbmRleF0pO1xuICB9XG59XG5cbi8vIEFkZCBmdW5jdGlvbnMgdG8gdGhlIGBTZXRDYWNoZWAuXG5TZXRDYWNoZS5wcm90b3R5cGUucHVzaCA9IGNhY2hlUHVzaDtcblxubW9kdWxlLmV4cG9ydHMgPSBTZXRDYWNoZTtcbiIsInZhciBzdGFja0NsZWFyID0gcmVxdWlyZSgnLi9fc3RhY2tDbGVhcicpLFxuICAgIHN0YWNrRGVsZXRlID0gcmVxdWlyZSgnLi9fc3RhY2tEZWxldGUnKSxcbiAgICBzdGFja0dldCA9IHJlcXVpcmUoJy4vX3N0YWNrR2V0JyksXG4gICAgc3RhY2tIYXMgPSByZXF1aXJlKCcuL19zdGFja0hhcycpLFxuICAgIHN0YWNrU2V0ID0gcmVxdWlyZSgnLi9fc3RhY2tTZXQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RhY2sgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBTdGFjayh2YWx1ZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSB2YWx1ZXMgPyB2YWx1ZXMubGVuZ3RoIDogMDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gdmFsdWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBmdW5jdGlvbnMgdG8gdGhlIGBTdGFja2AgY2FjaGUuXG5TdGFjay5wcm90b3R5cGUuY2xlYXIgPSBzdGFja0NsZWFyO1xuU3RhY2sucHJvdG90eXBlWydkZWxldGUnXSA9IHN0YWNrRGVsZXRlO1xuU3RhY2sucHJvdG90eXBlLmdldCA9IHN0YWNrR2V0O1xuU3RhY2sucHJvdG90eXBlLmhhcyA9IHN0YWNrSGFzO1xuU3RhY2sucHJvdG90eXBlLnNldCA9IHN0YWNrU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN0YWNrO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bWJvbDtcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBVaW50OEFycmF5ID0gcm9vdC5VaW50OEFycmF5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFVpbnQ4QXJyYXk7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFdlYWtNYXAgPSBnZXROYXRpdmUocm9vdCwgJ1dlYWtNYXAnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBXZWFrTWFwO1xuIiwiLyoqXG4gKiBBZGRzIHRoZSBrZXktdmFsdWUgYHBhaXJgIHRvIGBtYXBgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtBcnJheX0gcGFpciBUaGUga2V5LXZhbHVlIHBhaXIgdG8gYWRkLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgbWFwYC5cbiAqL1xuZnVuY3Rpb24gYWRkTWFwRW50cnkobWFwLCBwYWlyKSB7XG4gIC8vIERvbid0IHJldHVybiBgTWFwI3NldGAgYmVjYXVzZSBpdCBkb2Vzbid0IHJldHVybiB0aGUgbWFwIGluc3RhbmNlIGluIElFIDExLlxuICBtYXAuc2V0KHBhaXJbMF0sIHBhaXJbMV0pO1xuICByZXR1cm4gbWFwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFkZE1hcEVudHJ5O1xuIiwiLyoqXG4gKiBBZGRzIGB2YWx1ZWAgdG8gYHNldGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBtb2RpZnkuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhZGQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBzZXRgLlxuICovXG5mdW5jdGlvbiBhZGRTZXRFbnRyeShzZXQsIHZhbHVlKSB7XG4gIHNldC5hZGQodmFsdWUpO1xuICByZXR1cm4gc2V0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFkZFNldEVudHJ5O1xuIiwiLyoqXG4gKiBBIGZhc3RlciBhbHRlcm5hdGl2ZSB0byBgRnVuY3Rpb24jYXBwbHlgLCB0aGlzIGZ1bmN0aW9uIGludm9rZXMgYGZ1bmNgXG4gKiB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBgdGhpc0FyZ2AgYW5kIHRoZSBhcmd1bWVudHMgb2YgYGFyZ3NgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gKiBAcGFyYW0geyp9IHRoaXNBcmcgVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAqIEBwYXJhbSB7Li4uKn0gYXJncyBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgYGZ1bmNgLlxuICovXG5mdW5jdGlvbiBhcHBseShmdW5jLCB0aGlzQXJnLCBhcmdzKSB7XG4gIHZhciBsZW5ndGggPSBhcmdzLmxlbmd0aDtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDA6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZyk7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0pO1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gIH1cbiAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXBwbHk7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5mb3JFYWNoYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5RWFjaChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBpZiAoaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpID09PSBmYWxzZSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheUVhY2g7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5maWx0ZXJgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5RmlsdGVyKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICByZXNJbmRleCA9IDAsXG4gICAgICByZXN1bHQgPSBbXTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheUZpbHRlcjtcbiIsInZhciBiYXNlSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Jhc2VJbmRleE9mJyk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmluY2x1ZGVzYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAqIHNwZWNpZnlpbmcgYW4gaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzZWFyY2guXG4gKiBAcGFyYW0geyp9IHRhcmdldCBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdGFyZ2V0YCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBhcnJheUluY2x1ZGVzKGFycmF5LCB2YWx1ZSkge1xuICByZXR1cm4gISFhcnJheS5sZW5ndGggJiYgYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCAwKSA+IC0xO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5SW5jbHVkZXM7XG4iLCIvKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYXJyYXlJbmNsdWRlc2AgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhIGNvbXBhcmF0b3IuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzZWFyY2guXG4gKiBAcGFyYW0geyp9IHRhcmdldCBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBhcmF0b3IgVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdGFyZ2V0YCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBhcnJheUluY2x1ZGVzV2l0aChhcnJheSwgdmFsdWUsIGNvbXBhcmF0b3IpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBpZiAoY29tcGFyYXRvcih2YWx1ZSwgYXJyYXlbaW5kZXhdKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheUluY2x1ZGVzV2l0aDtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1hcGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gKiBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlNYXAoYXJyYXksIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheU1hcDtcbiIsIi8qKlxuICogQXBwZW5kcyB0aGUgZWxlbWVudHMgb2YgYHZhbHVlc2AgdG8gYGFycmF5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGFwcGVuZC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBhcnJheVB1c2goYXJyYXksIHZhbHVlcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBvZmZzZXQgPSBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBhcnJheVtvZmZzZXQgKyBpbmRleF0gPSB2YWx1ZXNbaW5kZXhdO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheVB1c2g7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5yZWR1Y2VgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpbml0QWNjdW1dIFNwZWNpZnkgdXNpbmcgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YCBhcyB0aGUgaW5pdGlhbCB2YWx1ZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlSZWR1Y2UoYXJyYXksIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gIGlmIChpbml0QWNjdW0gJiYgbGVuZ3RoKSB7XG4gICAgYWNjdW11bGF0b3IgPSBhcnJheVsrK2luZGV4XTtcbiAgfVxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGFjY3VtdWxhdG9yID0gaXRlcmF0ZWUoYWNjdW11bGF0b3IsIGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KTtcbiAgfVxuICByZXR1cm4gYWNjdW11bGF0b3I7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlSZWR1Y2U7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zb21lYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAqIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjaywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBhcnJheVNvbWUoYXJyYXksIHByZWRpY2F0ZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5U29tZTtcbiIsInZhciBlcSA9IHJlcXVpcmUoJy4vZXEnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBVc2VkIGJ5IGBfLmRlZmF1bHRzYCB0byBjdXN0b21pemUgaXRzIGBfLmFzc2lnbkluYCB1c2UuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gb2JqVmFsdWUgVGhlIGRlc3RpbmF0aW9uIHZhbHVlLlxuICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgc291cmNlIHZhbHVlLlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBwYXJlbnQgb2JqZWN0IG9mIGBvYmpWYWx1ZWAuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdmFsdWUgdG8gYXNzaWduLlxuICovXG5mdW5jdGlvbiBhc3NpZ25JbkRlZmF1bHRzKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgaWYgKG9ialZhbHVlID09PSB1bmRlZmluZWQgfHxcbiAgICAgIChlcShvYmpWYWx1ZSwgb2JqZWN0UHJvdG9ba2V5XSkgJiYgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkge1xuICAgIHJldHVybiBzcmNWYWx1ZTtcbiAgfVxuICByZXR1cm4gb2JqVmFsdWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXNzaWduSW5EZWZhdWx0cztcbiIsInZhciBlcSA9IHJlcXVpcmUoJy4vZXEnKTtcblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGFzc2lnblZhbHVlYCBleGNlcHQgdGhhdCBpdCBkb2Vzbid0IGFzc2lnblxuICogYHVuZGVmaW5lZGAgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gKi9cbmZ1bmN0aW9uIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIGlmICgodmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhZXEob2JqZWN0W2tleV0sIHZhbHVlKSkgfHxcbiAgICAgICh0eXBlb2Yga2V5ID09ICdudW1iZXInICYmIHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkpIHtcbiAgICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXNzaWduTWVyZ2VWYWx1ZTtcbiIsInZhciBlcSA9IHJlcXVpcmUoJy4vZXEnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBBc3NpZ25zIGB2YWx1ZWAgdG8gYGtleWAgb2YgYG9iamVjdGAgaWYgdGhlIGV4aXN0aW5nIHZhbHVlIGlzIG5vdCBlcXVpdmFsZW50XG4gKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gKi9cbmZ1bmN0aW9uIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XTtcbiAgaWYgKCEoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYgZXEob2JqVmFsdWUsIHZhbHVlKSkgfHxcbiAgICAgICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpKSB7XG4gICAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFzc2lnblZhbHVlO1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3BsaWNlID0gYXJyYXlQcm90by5zcGxpY2U7XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGFzc29jaWF0aXZlIGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYXNzb2NEZWxldGUoYXJyYXksIGtleSkge1xuICB2YXIgaW5kZXggPSBhc3NvY0luZGV4T2YoYXJyYXksIGtleSk7XG4gIGlmIChpbmRleCA8IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGxhc3RJbmRleCA9IGFycmF5Lmxlbmd0aCAtIDE7XG4gIGlmIChpbmRleCA9PSBsYXN0SW5kZXgpIHtcbiAgICBhcnJheS5wb3AoKTtcbiAgfSBlbHNlIHtcbiAgICBzcGxpY2UuY2FsbChhcnJheSwgaW5kZXgsIDEpO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFzc29jRGVsZXRlO1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKipcbiAqIEdldHMgdGhlIGFzc29jaWF0aXZlIGFycmF5IHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGFzc29jR2V0KGFycmF5LCBrZXkpIHtcbiAgdmFyIGluZGV4ID0gYXNzb2NJbmRleE9mKGFycmF5LCBrZXkpO1xuICByZXR1cm4gaW5kZXggPCAwID8gdW5kZWZpbmVkIDogYXJyYXlbaW5kZXhdWzFdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFzc29jR2V0O1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBhbiBhc3NvY2lhdGl2ZSBhcnJheSB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYXNzb2NIYXMoYXJyYXksIGtleSkge1xuICByZXR1cm4gYXNzb2NJbmRleE9mKGFycmF5LCBrZXkpID4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXNzb2NIYXM7XG4iLCJ2YXIgZXEgPSByZXF1aXJlKCcuL2VxJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YFxuICogb2Yga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2VhcmNoLlxuICogQHBhcmFtIHsqfSBrZXkgVGhlIGtleSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gYXNzb2NJbmRleE9mKGFycmF5LCBrZXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgaWYgKGVxKGFycmF5W2xlbmd0aF1bMF0sIGtleSkpIHtcbiAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhc3NvY0luZGV4T2Y7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKlxuICogU2V0cyB0aGUgYXNzb2NpYXRpdmUgYXJyYXkgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICovXG5mdW5jdGlvbiBhc3NvY1NldChhcnJheSwga2V5LCB2YWx1ZSkge1xuICB2YXIgaW5kZXggPSBhc3NvY0luZGV4T2YoYXJyYXksIGtleSk7XG4gIGlmIChpbmRleCA8IDApIHtcbiAgICBhcnJheS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0gZWxzZSB7XG4gICAgYXJyYXlbaW5kZXhdWzFdID0gdmFsdWU7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhc3NvY1NldDtcbiIsInZhciBjb3B5T2JqZWN0ID0gcmVxdWlyZSgnLi9fY29weU9iamVjdCcpLFxuICAgIGtleXMgPSByZXF1aXJlKCcuL2tleXMnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hc3NpZ25gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlc1xuICogb3IgYGN1c3RvbWl6ZXJgIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VBc3NpZ24ob2JqZWN0LCBzb3VyY2UpIHtcbiAgcmV0dXJuIG9iamVjdCAmJiBjb3B5T2JqZWN0KHNvdXJjZSwga2V5cyhzb3VyY2UpLCBvYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VBc3NpZ247XG4iLCJ2YXIgaWRlbnRpdHkgPSByZXF1aXJlKCcuL2lkZW50aXR5Jyk7XG5cbi8qKlxuICogQ2FzdHMgYHZhbHVlYCB0byBgaWRlbnRpdHlgIGlmIGl0J3Mgbm90IGEgZnVuY3Rpb24uXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5LWxpa2Ugb2JqZWN0LlxuICovXG5mdW5jdGlvbiBiYXNlQ2FzdEZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlIDogaWRlbnRpdHk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUNhc3RGdW5jdGlvbjtcbiIsInZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgc3RyaW5nVG9QYXRoID0gcmVxdWlyZSgnLi9fc3RyaW5nVG9QYXRoJyk7XG5cbi8qKlxuICogQ2FzdHMgYHZhbHVlYCB0byBhIHBhdGggYXJyYXkgaWYgaXQncyBub3Qgb25lLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGJhc2VDYXN0UGF0aCh2YWx1ZSkge1xuICByZXR1cm4gaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IHN0cmluZ1RvUGF0aCh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUNhc3RQYXRoO1xuIiwidmFyIFN0YWNrID0gcmVxdWlyZSgnLi9fU3RhY2snKSxcbiAgICBhcnJheUVhY2ggPSByZXF1aXJlKCcuL19hcnJheUVhY2gnKSxcbiAgICBhc3NpZ25WYWx1ZSA9IHJlcXVpcmUoJy4vX2Fzc2lnblZhbHVlJyksXG4gICAgYmFzZUFzc2lnbiA9IHJlcXVpcmUoJy4vX2Jhc2VBc3NpZ24nKSxcbiAgICBiYXNlRm9yT3duID0gcmVxdWlyZSgnLi9fYmFzZUZvck93bicpLFxuICAgIGNsb25lQnVmZmVyID0gcmVxdWlyZSgnLi9fY2xvbmVCdWZmZXInKSxcbiAgICBjb3B5QXJyYXkgPSByZXF1aXJlKCcuL19jb3B5QXJyYXknKSxcbiAgICBjb3B5U3ltYm9scyA9IHJlcXVpcmUoJy4vX2NvcHlTeW1ib2xzJyksXG4gICAgZ2V0VGFnID0gcmVxdWlyZSgnLi9fZ2V0VGFnJyksXG4gICAgaW5pdENsb25lQXJyYXkgPSByZXF1aXJlKCcuL19pbml0Q2xvbmVBcnJheScpLFxuICAgIGluaXRDbG9uZUJ5VGFnID0gcmVxdWlyZSgnLi9faW5pdENsb25lQnlUYWcnKSxcbiAgICBpbml0Q2xvbmVPYmplY3QgPSByZXF1aXJlKCcuL19pbml0Q2xvbmVPYmplY3QnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNCdWZmZXIgPSByZXF1aXJlKCcuL2lzQnVmZmVyJyksXG4gICAgaXNIb3N0T2JqZWN0ID0gcmVxdWlyZSgnLi9faXNIb3N0T2JqZWN0JyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0Jyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuICAgIGJvb2xUYWcgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4vKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBzdXBwb3J0ZWQgYnkgYF8uY2xvbmVgLiAqL1xudmFyIGNsb25lYWJsZVRhZ3MgPSB7fTtcbmNsb25lYWJsZVRhZ3NbYXJnc1RhZ10gPSBjbG9uZWFibGVUYWdzW2FycmF5VGFnXSA9XG5jbG9uZWFibGVUYWdzW2FycmF5QnVmZmVyVGFnXSA9IGNsb25lYWJsZVRhZ3NbYm9vbFRhZ10gPVxuY2xvbmVhYmxlVGFnc1tkYXRlVGFnXSA9IGNsb25lYWJsZVRhZ3NbZmxvYXQzMlRhZ10gPVxuY2xvbmVhYmxlVGFnc1tmbG9hdDY0VGFnXSA9IGNsb25lYWJsZVRhZ3NbaW50OFRhZ10gPVxuY2xvbmVhYmxlVGFnc1tpbnQxNlRhZ10gPSBjbG9uZWFibGVUYWdzW2ludDMyVGFnXSA9XG5jbG9uZWFibGVUYWdzW21hcFRhZ10gPSBjbG9uZWFibGVUYWdzW251bWJlclRhZ10gPVxuY2xvbmVhYmxlVGFnc1tvYmplY3RUYWddID0gY2xvbmVhYmxlVGFnc1tyZWdleHBUYWddID1cbmNsb25lYWJsZVRhZ3Nbc2V0VGFnXSA9IGNsb25lYWJsZVRhZ3Nbc3RyaW5nVGFnXSA9XG5jbG9uZWFibGVUYWdzW3N5bWJvbFRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQ4VGFnXSA9XG5jbG9uZWFibGVUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQxNlRhZ10gPVxuY2xvbmVhYmxlVGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbmNsb25lYWJsZVRhZ3NbZXJyb3JUYWddID0gY2xvbmVhYmxlVGFnc1tmdW5jVGFnXSA9XG5jbG9uZWFibGVUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY2xvbmVgIGFuZCBgXy5jbG9uZURlZXBgIHdoaWNoIHRyYWNrc1xuICogdHJhdmVyc2VkIG9iamVjdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRnVsbF0gU3BlY2lmeSBhIGNsb25lIGluY2x1ZGluZyBzeW1ib2xzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY2xvbmluZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBba2V5XSBUaGUga2V5IG9mIGB2YWx1ZWAuXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIHBhcmVudCBvYmplY3Qgb2YgYHZhbHVlYC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBhbmQgdGhlaXIgY2xvbmUgY291bnRlcnBhcnRzLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gYmFzZUNsb25lKHZhbHVlLCBpc0RlZXAsIGlzRnVsbCwgY3VzdG9taXplciwga2V5LCBvYmplY3QsIHN0YWNrKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChjdXN0b21pemVyKSB7XG4gICAgcmVzdWx0ID0gb2JqZWN0ID8gY3VzdG9taXplcih2YWx1ZSwga2V5LCBvYmplY3QsIHN0YWNrKSA6IGN1c3RvbWl6ZXIodmFsdWUpO1xuICB9XG4gIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSk7XG4gIGlmIChpc0Fycikge1xuICAgIHJlc3VsdCA9IGluaXRDbG9uZUFycmF5KHZhbHVlKTtcbiAgICBpZiAoIWlzRGVlcCkge1xuICAgICAgcmV0dXJuIGNvcHlBcnJheSh2YWx1ZSwgcmVzdWx0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSksXG4gICAgICAgIGlzRnVuYyA9IHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWc7XG5cbiAgICBpZiAoaXNCdWZmZXIodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY2xvbmVCdWZmZXIodmFsdWUsIGlzRGVlcCk7XG4gICAgfVxuICAgIGlmICh0YWcgPT0gb2JqZWN0VGFnIHx8IHRhZyA9PSBhcmdzVGFnIHx8IChpc0Z1bmMgJiYgIW9iamVjdCkpIHtcbiAgICAgIGlmIChpc0hvc3RPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBvYmplY3QgPyB2YWx1ZSA6IHt9O1xuICAgICAgfVxuICAgICAgcmVzdWx0ID0gaW5pdENsb25lT2JqZWN0KGlzRnVuYyA/IHt9IDogdmFsdWUpO1xuICAgICAgaWYgKCFpc0RlZXApIHtcbiAgICAgICAgcmVzdWx0ID0gYmFzZUFzc2lnbihyZXN1bHQsIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIGlzRnVsbCA/IGNvcHlTeW1ib2xzKHZhbHVlLCByZXN1bHQpIDogcmVzdWx0O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIWNsb25lYWJsZVRhZ3NbdGFnXSkge1xuICAgICAgICByZXR1cm4gb2JqZWN0ID8gdmFsdWUgOiB7fTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IGluaXRDbG9uZUJ5VGFnKHZhbHVlLCB0YWcsIGlzRGVlcCk7XG4gICAgfVxuICB9XG4gIC8vIENoZWNrIGZvciBjaXJjdWxhciByZWZlcmVuY2VzIGFuZCByZXR1cm4gaXRzIGNvcnJlc3BvbmRpbmcgY2xvbmUuXG4gIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KHZhbHVlKTtcbiAgaWYgKHN0YWNrZWQpIHtcbiAgICByZXR1cm4gc3RhY2tlZDtcbiAgfVxuICBzdGFjay5zZXQodmFsdWUsIHJlc3VsdCk7XG5cbiAgLy8gUmVjdXJzaXZlbHkgcG9wdWxhdGUgY2xvbmUgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgKGlzQXJyID8gYXJyYXlFYWNoIDogYmFzZUZvck93bikodmFsdWUsIGZ1bmN0aW9uKHN1YlZhbHVlLCBrZXkpIHtcbiAgICBhc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgYmFzZUNsb25lKHN1YlZhbHVlLCBpc0RlZXAsIGlzRnVsbCwgY3VzdG9taXplciwga2V5LCB2YWx1ZSwgc3RhY2spKTtcbiAgfSk7XG4gIHJldHVybiAoaXNGdWxsICYmICFpc0FycikgPyBjb3B5U3ltYm9scyh2YWx1ZSwgcmVzdWx0KSA6IHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlQ2xvbmU7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0Jyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdENyZWF0ZSA9IE9iamVjdC5jcmVhdGU7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY3JlYXRlYCB3aXRob3V0IHN1cHBvcnQgZm9yIGFzc2lnbmluZ1xuICogcHJvcGVydGllcyB0byB0aGUgY3JlYXRlZCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm90b3R5cGUgVGhlIG9iamVjdCB0byBpbmhlcml0IGZyb20uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBiYXNlQ3JlYXRlKHByb3RvKSB7XG4gIHJldHVybiBpc09iamVjdChwcm90bykgPyBvYmplY3RDcmVhdGUocHJvdG8pIDoge307XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUNyZWF0ZTtcbiIsInZhciBiYXNlRm9yT3duID0gcmVxdWlyZSgnLi9fYmFzZUZvck93bicpLFxuICAgIGNyZWF0ZUJhc2VFYWNoID0gcmVxdWlyZSgnLi9fY3JlYXRlQmFzZUVhY2gnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JFYWNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAqL1xudmFyIGJhc2VFYWNoID0gY3JlYXRlQmFzZUVhY2goYmFzZUZvck93bik7XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUVhY2g7XG4iLCJ2YXIgYmFzZUVhY2ggPSByZXF1aXJlKCcuL19iYXNlRWFjaCcpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZpbHRlcmAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBiYXNlRmlsdGVyKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSkge1xuICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUZpbHRlcjtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLmZpbmRgIGFuZCBgXy5maW5kS2V5YCwgd2l0aG91dFxuICogc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcywgd2hpY2ggaXRlcmF0ZXMgb3ZlciBgY29sbGVjdGlvbmAgdXNpbmdcbiAqIGBlYWNoRnVuY2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNlYXJjaC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBgY29sbGVjdGlvbmAuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtyZXRLZXldIFNwZWNpZnkgcmV0dXJuaW5nIHRoZSBrZXkgb2YgdGhlIGZvdW5kIGVsZW1lbnQgaW5zdGVhZCBvZiB0aGUgZWxlbWVudCBpdHNlbGYuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZm91bmQgZWxlbWVudCBvciBpdHMga2V5LCBlbHNlIGB1bmRlZmluZWRgLlxuICovXG5mdW5jdGlvbiBiYXNlRmluZChjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGVhY2hGdW5jLCByZXRLZXkpIHtcbiAgdmFyIHJlc3VsdDtcbiAgZWFjaEZ1bmMoY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGtleSwgY29sbGVjdGlvbikpIHtcbiAgICAgIHJlc3VsdCA9IHJldEtleSA/IGtleSA6IHZhbHVlO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUZpbmQ7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZpbmRJbmRleGAgYW5kIGBfLmZpbmRMYXN0SW5kZXhgIHdpdGhvdXRcbiAqIHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzZWFyY2guXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlLCBmcm9tUmlnaHQpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIGluZGV4ID0gZnJvbVJpZ2h0ID8gbGVuZ3RoIDogLTE7XG5cbiAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUZpbmRJbmRleDtcbiIsInZhciBhcnJheVB1c2ggPSByZXF1aXJlKCcuL19hcnJheVB1c2gnKSxcbiAgICBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNBcnJheUxpa2VPYmplY3QgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlT2JqZWN0Jyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmxhdHRlbmAgd2l0aCBzdXBwb3J0IGZvciByZXN0cmljdGluZyBmbGF0dGVuaW5nLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBkZXB0aCBUaGUgbWF4aW11bSByZWN1cnNpb24gZGVwdGguXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc1N0cmljdF0gUmVzdHJpY3QgZmxhdHRlbmluZyB0byBhcnJheXMtbGlrZSBvYmplY3RzLlxuICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdD1bXV0gVGhlIGluaXRpYWwgcmVzdWx0IHZhbHVlLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBiYXNlRmxhdHRlbihhcnJheSwgZGVwdGgsIGlzU3RyaWN0LCByZXN1bHQpIHtcbiAgcmVzdWx0IHx8IChyZXN1bHQgPSBbXSk7XG5cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgaWYgKGRlcHRoID4gMCAmJiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkgJiZcbiAgICAgICAgKGlzU3RyaWN0IHx8IGlzQXJyYXkodmFsdWUpIHx8IGlzQXJndW1lbnRzKHZhbHVlKSkpIHtcbiAgICAgIGlmIChkZXB0aCA+IDEpIHtcbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgZmxhdHRlbiBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgYmFzZUZsYXR0ZW4odmFsdWUsIGRlcHRoIC0gMSwgaXNTdHJpY3QsIHJlc3VsdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhcnJheVB1c2gocmVzdWx0LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghaXNTdHJpY3QpIHtcbiAgICAgIHJlc3VsdFtyZXN1bHQubGVuZ3RoXSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VGbGF0dGVuO1xuIiwidmFyIGNyZWF0ZUJhc2VGb3IgPSByZXF1aXJlKCcuL19jcmVhdGVCYXNlRm9yJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGJhc2VGb3JJbmAgYW5kIGBiYXNlRm9yT3duYCB3aGljaCBpdGVyYXRlc1xuICogb3ZlciBgb2JqZWN0YCBwcm9wZXJ0aWVzIHJldHVybmVkIGJ5IGBrZXlzRnVuY2AgaW52b2tpbmcgYGl0ZXJhdGVlYCBmb3JcbiAqIGVhY2ggcHJvcGVydHkuIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseVxuICogcmV0dXJuaW5nIGBmYWxzZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbnZhciBiYXNlRm9yID0gY3JlYXRlQmFzZUZvcigpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VGb3I7XG4iLCJ2YXIgYmFzZUZvciA9IHJlcXVpcmUoJy4vX2Jhc2VGb3InKSxcbiAgICBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yT3duYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gYmFzZUZvck93bihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gIHJldHVybiBvYmplY3QgJiYgYmFzZUZvcihvYmplY3QsIGl0ZXJhdGVlLCBrZXlzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlRm9yT3duO1xuIiwidmFyIGJhc2VDYXN0UGF0aCA9IHJlcXVpcmUoJy4vX2Jhc2VDYXN0UGF0aCcpLFxuICAgIGlzS2V5ID0gcmVxdWlyZSgnLi9faXNLZXknKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5nZXRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVmYXVsdCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXQob2JqZWN0LCBwYXRoKSB7XG4gIHBhdGggPSBpc0tleShwYXRoLCBvYmplY3QpID8gW3BhdGggKyAnJ10gOiBiYXNlQ2FzdFBhdGgocGF0aCk7XG5cbiAgdmFyIGluZGV4ID0gMCxcbiAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoO1xuXG4gIHdoaWxlIChvYmplY3QgIT0gbnVsbCAmJiBpbmRleCA8IGxlbmd0aCkge1xuICAgIG9iamVjdCA9IG9iamVjdFtwYXRoW2luZGV4KytdXTtcbiAgfVxuICByZXR1cm4gKGluZGV4ICYmIGluZGV4ID09IGxlbmd0aCkgPyBvYmplY3QgOiB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUdldDtcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmhhc2Agd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30ga2V5IFRoZSBrZXkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VIYXMob2JqZWN0LCBrZXkpIHtcbiAgLy8gQXZvaWQgYSBidWcgaW4gSUUgMTAtMTEgd2hlcmUgb2JqZWN0cyB3aXRoIGEgW1tQcm90b3R5cGVdXSBvZiBgbnVsbGAsXG4gIC8vIHRoYXQgYXJlIGNvbXBvc2VkIGVudGlyZWx5IG9mIGluZGV4IHByb3BlcnRpZXMsIHJldHVybiBgZmFsc2VgIGZvclxuICAvLyBgaGFzT3duUHJvcGVydHlgIGNoZWNrcyBvZiB0aGVtLlxuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgfHxcbiAgICAodHlwZW9mIG9iamVjdCA9PSAnb2JqZWN0JyAmJiBrZXkgaW4gb2JqZWN0ICYmIGdldFByb3RvdHlwZU9mKG9iamVjdCkgPT09IG51bGwpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VIYXM7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmhhc0luYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBrZXkgVGhlIGtleSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUhhc0luKG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBrZXkgaW4gT2JqZWN0KG9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUhhc0luO1xuIiwiLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZU1heCA9IE1hdGgubWF4LFxuICAgIG5hdGl2ZU1pbiA9IE1hdGgubWluO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmluUmFuZ2VgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cyB0byBudW1iZXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2hlY2suXG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG51bWJlcmAgaXMgaW4gdGhlIHJhbmdlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJblJhbmdlKG51bWJlciwgc3RhcnQsIGVuZCkge1xuICByZXR1cm4gbnVtYmVyID49IG5hdGl2ZU1pbihzdGFydCwgZW5kKSAmJiBudW1iZXIgPCBuYXRpdmVNYXgoc3RhcnQsIGVuZCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUluUmFuZ2U7XG4iLCJ2YXIgaW5kZXhPZk5hTiA9IHJlcXVpcmUoJy4vX2luZGV4T2ZOYU4nKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pbmRleE9mYCB3aXRob3V0IGBmcm9tSW5kZXhgIGJvdW5kcyBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzZWFyY2guXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICovXG5mdW5jdGlvbiBiYXNlSW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICBpZiAodmFsdWUgIT09IHZhbHVlKSB7XG4gICAgcmV0dXJuIGluZGV4T2ZOYU4oYXJyYXksIGZyb21JbmRleCk7XG4gIH1cbiAgdmFyIGluZGV4ID0gZnJvbUluZGV4IC0gMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChhcnJheVtpbmRleF0gPT09IHZhbHVlKSB7XG4gICAgICByZXR1cm4gaW5kZXg7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSW5kZXhPZjtcbiIsInZhciBiYXNlSXNFcXVhbERlZXAgPSByZXF1aXJlKCcuL19iYXNlSXNFcXVhbERlZXAnKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzRXF1YWxgIHdoaWNoIHN1cHBvcnRzIHBhcnRpYWwgY29tcGFyaXNvbnNcbiAqIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtiaXRtYXNrXSBUaGUgYml0bWFzayBvZiBjb21wYXJpc29uIGZsYWdzLlxuICogIFRoZSBiaXRtYXNrIG1heSBiZSBjb21wb3NlZCBvZiB0aGUgZm9sbG93aW5nIGZsYWdzOlxuICogICAgIDEgLSBVbm9yZGVyZWQgY29tcGFyaXNvblxuICogICAgIDIgLSBQYXJ0aWFsIGNvbXBhcmlzb25cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYHZhbHVlYCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyLCBjdXN0b21pemVyLCBiaXRtYXNrLCBzdGFjaykge1xuICBpZiAodmFsdWUgPT09IG90aGVyKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKHZhbHVlID09IG51bGwgfHwgb3RoZXIgPT0gbnVsbCB8fCAoIWlzT2JqZWN0KHZhbHVlKSAmJiAhaXNPYmplY3RMaWtlKG90aGVyKSkpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcjtcbiAgfVxuICByZXR1cm4gYmFzZUlzRXF1YWxEZWVwKHZhbHVlLCBvdGhlciwgYmFzZUlzRXF1YWwsIGN1c3RvbWl6ZXIsIGJpdG1hc2ssIHN0YWNrKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNFcXVhbDtcbiIsInZhciBTdGFjayA9IHJlcXVpcmUoJy4vX1N0YWNrJyksXG4gICAgZXF1YWxBcnJheXMgPSByZXF1aXJlKCcuL19lcXVhbEFycmF5cycpLFxuICAgIGVxdWFsQnlUYWcgPSByZXF1aXJlKCcuL19lcXVhbEJ5VGFnJyksXG4gICAgZXF1YWxPYmplY3RzID0gcmVxdWlyZSgnLi9fZXF1YWxPYmplY3RzJyksXG4gICAgZ2V0VGFnID0gcmVxdWlyZSgnLi9fZ2V0VGFnJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzSG9zdE9iamVjdCA9IHJlcXVpcmUoJy4vX2lzSG9zdE9iamVjdCcpLFxuICAgIGlzVHlwZWRBcnJheSA9IHJlcXVpcmUoJy4vaXNUeXBlZEFycmF5Jyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGNvbXBhcmlzb24gc3R5bGVzLiAqL1xudmFyIFBBUlRJQUxfQ09NUEFSRV9GTEFHID0gMjtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XSc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbGAgZm9yIGFycmF5cyBhbmQgb2JqZWN0cyB3aGljaCBwZXJmb3Jtc1xuICogZGVlcCBjb21wYXJpc29ucyBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGVuYWJsaW5nIG9iamVjdHMgd2l0aCBjaXJjdWxhclxuICogcmVmZXJlbmNlcyB0byBiZSBjb21wYXJlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge251bWJlcn0gW2JpdG1hc2tdIFRoZSBiaXRtYXNrIG9mIGNvbXBhcmlzb24gZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzRXF1YWxEZWVwKG9iamVjdCwgb3RoZXIsIGVxdWFsRnVuYywgY3VzdG9taXplciwgYml0bWFzaywgc3RhY2spIHtcbiAgdmFyIG9iaklzQXJyID0gaXNBcnJheShvYmplY3QpLFxuICAgICAgb3RoSXNBcnIgPSBpc0FycmF5KG90aGVyKSxcbiAgICAgIG9ialRhZyA9IGFycmF5VGFnLFxuICAgICAgb3RoVGFnID0gYXJyYXlUYWc7XG5cbiAgaWYgKCFvYmpJc0Fycikge1xuICAgIG9ialRhZyA9IGdldFRhZyhvYmplY3QpO1xuICAgIG9ialRhZyA9IG9ialRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb2JqVGFnO1xuICB9XG4gIGlmICghb3RoSXNBcnIpIHtcbiAgICBvdGhUYWcgPSBnZXRUYWcob3RoZXIpO1xuICAgIG90aFRhZyA9IG90aFRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb3RoVGFnO1xuICB9XG4gIHZhciBvYmpJc09iaiA9IG9ialRhZyA9PSBvYmplY3RUYWcgJiYgIWlzSG9zdE9iamVjdChvYmplY3QpLFxuICAgICAgb3RoSXNPYmogPSBvdGhUYWcgPT0gb2JqZWN0VGFnICYmICFpc0hvc3RPYmplY3Qob3RoZXIpLFxuICAgICAgaXNTYW1lVGFnID0gb2JqVGFnID09IG90aFRhZztcblxuICBpZiAoaXNTYW1lVGFnICYmICFvYmpJc09iaikge1xuICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgcmV0dXJuIChvYmpJc0FyciB8fCBpc1R5cGVkQXJyYXkob2JqZWN0KSlcbiAgICAgID8gZXF1YWxBcnJheXMob2JqZWN0LCBvdGhlciwgZXF1YWxGdW5jLCBjdXN0b21pemVyLCBiaXRtYXNrLCBzdGFjaylcbiAgICAgIDogZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCBvYmpUYWcsIGVxdWFsRnVuYywgY3VzdG9taXplciwgYml0bWFzaywgc3RhY2spO1xuICB9XG4gIGlmICghKGJpdG1hc2sgJiBQQVJUSUFMX0NPTVBBUkVfRkxBRykpIHtcbiAgICB2YXIgb2JqSXNXcmFwcGVkID0gb2JqSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsICdfX3dyYXBwZWRfXycpLFxuICAgICAgICBvdGhJc1dyYXBwZWQgPSBvdGhJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCAnX193cmFwcGVkX18nKTtcblxuICAgIGlmIChvYmpJc1dyYXBwZWQgfHwgb3RoSXNXcmFwcGVkKSB7XG4gICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgcmV0dXJuIGVxdWFsRnVuYyhvYmpJc1dyYXBwZWQgPyBvYmplY3QudmFsdWUoKSA6IG9iamVjdCwgb3RoSXNXcmFwcGVkID8gb3RoZXIudmFsdWUoKSA6IG90aGVyLCBjdXN0b21pemVyLCBiaXRtYXNrLCBzdGFjayk7XG4gICAgfVxuICB9XG4gIGlmICghaXNTYW1lVGFnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gIHJldHVybiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgZXF1YWxGdW5jLCBjdXN0b21pemVyLCBiaXRtYXNrLCBzdGFjayk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzRXF1YWxEZWVwO1xuIiwidmFyIFN0YWNrID0gcmVxdWlyZSgnLi9fU3RhY2snKSxcbiAgICBiYXNlSXNFcXVhbCA9IHJlcXVpcmUoJy4vX2Jhc2VJc0VxdWFsJyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGNvbXBhcmlzb24gc3R5bGVzLiAqL1xudmFyIFVOT1JERVJFRF9DT01QQVJFX0ZMQUcgPSAxLFxuICAgIFBBUlRJQUxfQ09NUEFSRV9GTEFHID0gMjtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc01hdGNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAqIEBwYXJhbSB7QXJyYXl9IG1hdGNoRGF0YSBUaGUgcHJvcGVydHkgbmFtZXMsIHZhbHVlcywgYW5kIGNvbXBhcmUgZmxhZ3MgdG8gbWF0Y2guXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBpcyBhIG1hdGNoLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBtYXRjaERhdGEsIGN1c3RvbWl6ZXIpIHtcbiAgdmFyIGluZGV4ID0gbWF0Y2hEYXRhLmxlbmd0aCxcbiAgICAgIGxlbmd0aCA9IGluZGV4LFxuICAgICAgbm9DdXN0b21pemVyID0gIWN1c3RvbWl6ZXI7XG5cbiAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgcmV0dXJuICFsZW5ndGg7XG4gIH1cbiAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gIHdoaWxlIChpbmRleC0tKSB7XG4gICAgdmFyIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgIGlmICgobm9DdXN0b21pemVyICYmIGRhdGFbMl0pXG4gICAgICAgICAgPyBkYXRhWzFdICE9PSBvYmplY3RbZGF0YVswXV1cbiAgICAgICAgICA6ICEoZGF0YVswXSBpbiBvYmplY3QpXG4gICAgICAgICkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgIHZhciBrZXkgPSBkYXRhWzBdLFxuICAgICAgICBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICBzcmNWYWx1ZSA9IGRhdGFbMV07XG5cbiAgICBpZiAobm9DdXN0b21pemVyICYmIGRhdGFbMl0pIHtcbiAgICAgIGlmIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgc3RhY2sgPSBuZXcgU3RhY2ssXG4gICAgICAgICAgcmVzdWx0ID0gY3VzdG9taXplciA/IGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjaykgOiB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICghKHJlc3VsdCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IGJhc2VJc0VxdWFsKHNyY1ZhbHVlLCBvYmpWYWx1ZSwgY3VzdG9taXplciwgVU5PUkRFUkVEX0NPTVBBUkVfRkxBRyB8IFBBUlRJQUxfQ09NUEFSRV9GTEFHLCBzdGFjaylcbiAgICAgICAgICAgIDogcmVzdWx0XG4gICAgICAgICAgKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc01hdGNoO1xuIiwidmFyIGJhc2VNYXRjaGVzID0gcmVxdWlyZSgnLi9fYmFzZU1hdGNoZXMnKSxcbiAgICBiYXNlTWF0Y2hlc1Byb3BlcnR5ID0gcmVxdWlyZSgnLi9fYmFzZU1hdGNoZXNQcm9wZXJ0eScpLFxuICAgIGlkZW50aXR5ID0gcmVxdWlyZSgnLi9pZGVudGl0eScpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBwcm9wZXJ0eSA9IHJlcXVpcmUoJy4vcHJvcGVydHknKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pdGVyYXRlZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gW3ZhbHVlPV8uaWRlbnRpdHldIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGFuIGl0ZXJhdGVlLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBpdGVyYXRlZS5cbiAqL1xuZnVuY3Rpb24gYmFzZUl0ZXJhdGVlKHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICBpZiAodHlwZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGlkZW50aXR5O1xuICB9XG4gIGlmICh0eXBlID09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpXG4gICAgICA/IGJhc2VNYXRjaGVzUHJvcGVydHkodmFsdWVbMF0sIHZhbHVlWzFdKVxuICAgICAgOiBiYXNlTWF0Y2hlcyh2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHByb3BlcnR5KHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXRlcmF0ZWU7XG4iLCIvKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlS2V5cyA9IE9iamVjdC5rZXlzO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNgIHdoaWNoIGRvZXNuJ3Qgc2tpcCB0aGUgY29uc3RydWN0b3JcbiAqIHByb3BlcnR5IG9mIHByb3RvdHlwZXMgb3IgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYmFzZUtleXMob2JqZWN0KSB7XG4gIHJldHVybiBuYXRpdmVLZXlzKE9iamVjdChvYmplY3QpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlS2V5cztcbiIsInZhciBSZWZsZWN0ID0gcmVxdWlyZSgnLi9fUmVmbGVjdCcpLFxuICAgIGl0ZXJhdG9yVG9BcnJheSA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9yVG9BcnJheScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBlbnVtZXJhdGUgPSBSZWZsZWN0ID8gUmVmbGVjdC5lbnVtZXJhdGUgOiB1bmRlZmluZWQsXG4gICAgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzSW5gIHdoaWNoIGRvZXNuJ3Qgc2tpcCB0aGUgY29uc3RydWN0b3JcbiAqIHByb3BlcnR5IG9mIHByb3RvdHlwZXMgb3IgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYmFzZUtleXNJbihvYmplY3QpIHtcbiAgb2JqZWN0ID0gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBPYmplY3Qob2JqZWN0KTtcblxuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8vIEZhbGxiYWNrIGZvciBJRSA8IDkgd2l0aCBlczYtc2hpbS5cbmlmIChlbnVtZXJhdGUgJiYgIXByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoeyAndmFsdWVPZic6IDEgfSwgJ3ZhbHVlT2YnKSkge1xuICBiYXNlS2V5c0luID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIGl0ZXJhdG9yVG9BcnJheShlbnVtZXJhdGUob2JqZWN0KSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUtleXNJbjtcbiIsInZhciBiYXNlRWFjaCA9IHJlcXVpcmUoJy4vX2Jhc2VFYWNoJyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWFwYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGJhc2VNYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IEFycmF5KGNvbGxlY3Rpb24ubGVuZ3RoKSA6IFtdO1xuXG4gIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICByZXN1bHRbKytpbmRleF0gPSBpdGVyYXRlZSh2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZU1hcDtcbiIsInZhciBiYXNlSXNNYXRjaCA9IHJlcXVpcmUoJy4vX2Jhc2VJc01hdGNoJyksXG4gICAgZ2V0TWF0Y2hEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWF0Y2hEYXRhJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWF0Y2hlc2Agd2hpY2ggZG9lc24ndCBjbG9uZSBgc291cmNlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlTWF0Y2hlcyhzb3VyY2UpIHtcbiAgdmFyIG1hdGNoRGF0YSA9IGdldE1hdGNoRGF0YShzb3VyY2UpO1xuICBpZiAobWF0Y2hEYXRhLmxlbmd0aCA9PSAxICYmIG1hdGNoRGF0YVswXVsyXSkge1xuICAgIHZhciBrZXkgPSBtYXRjaERhdGFbMF1bMF0sXG4gICAgICAgIHZhbHVlID0gbWF0Y2hEYXRhWzBdWzFdO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmplY3Rba2V5XSA9PT0gdmFsdWUgJiZcbiAgICAgICAgKHZhbHVlICE9PSB1bmRlZmluZWQgfHwgKGtleSBpbiBPYmplY3Qob2JqZWN0KSkpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiBvYmplY3QgPT09IHNvdXJjZSB8fCBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlTWF0Y2hlcztcbiIsInZhciBiYXNlSXNFcXVhbCA9IHJlcXVpcmUoJy4vX2Jhc2VJc0VxdWFsJyksXG4gICAgZ2V0ID0gcmVxdWlyZSgnLi9nZXQnKSxcbiAgICBoYXNJbiA9IHJlcXVpcmUoJy4vaGFzSW4nKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgY29tcGFyaXNvbiBzdHlsZXMuICovXG52YXIgVU5PUkRFUkVEX0NPTVBBUkVfRkxBRyA9IDEsXG4gICAgUEFSVElBTF9DT01QQVJFX0ZMQUcgPSAyO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNQcm9wZXJ0eWAgd2hpY2ggZG9lc24ndCBjbG9uZSBgc3JjVmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZU1hdGNoZXNQcm9wZXJ0eShwYXRoLCBzcmNWYWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIG9ialZhbHVlID0gZ2V0KG9iamVjdCwgcGF0aCk7XG4gICAgcmV0dXJuIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkICYmIG9ialZhbHVlID09PSBzcmNWYWx1ZSlcbiAgICAgID8gaGFzSW4ob2JqZWN0LCBwYXRoKVxuICAgICAgOiBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIHVuZGVmaW5lZCwgVU5PUkRFUkVEX0NPTVBBUkVfRkxBRyB8IFBBUlRJQUxfQ09NUEFSRV9GTEFHKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlTWF0Y2hlc1Byb3BlcnR5O1xuIiwidmFyIFN0YWNrID0gcmVxdWlyZSgnLi9fU3RhY2snKSxcbiAgICBhcnJheUVhY2ggPSByZXF1aXJlKCcuL19hcnJheUVhY2gnKSxcbiAgICBhc3NpZ25NZXJnZVZhbHVlID0gcmVxdWlyZSgnLi9fYXNzaWduTWVyZ2VWYWx1ZScpLFxuICAgIGJhc2VNZXJnZURlZXAgPSByZXF1aXJlKCcuL19iYXNlTWVyZ2VEZWVwJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIGlzVHlwZWRBcnJheSA9IHJlcXVpcmUoJy4vaXNUeXBlZEFycmF5JyksXG4gICAga2V5c0luID0gcmVxdWlyZSgnLi9rZXlzSW4nKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tZXJnZWAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICogQHBhcmFtIHtudW1iZXJ9IHNyY0luZGV4IFRoZSBpbmRleCBvZiBgc291cmNlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIG1lcmdlZCB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZCBjb3VudGVycGFydHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gIGlmIChvYmplY3QgPT09IHNvdXJjZSkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgcHJvcHMgPSAoaXNBcnJheShzb3VyY2UpIHx8IGlzVHlwZWRBcnJheShzb3VyY2UpKVxuICAgID8gdW5kZWZpbmVkXG4gICAgOiBrZXlzSW4oc291cmNlKTtcblxuICBhcnJheUVhY2gocHJvcHMgfHwgc291cmNlLCBmdW5jdGlvbihzcmNWYWx1ZSwga2V5KSB7XG4gICAgaWYgKHByb3BzKSB7XG4gICAgICBrZXkgPSBzcmNWYWx1ZTtcbiAgICAgIHNyY1ZhbHVlID0gc291cmNlW2tleV07XG4gICAgfVxuICAgIGlmIChpc09iamVjdChzcmNWYWx1ZSkpIHtcbiAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICBiYXNlTWVyZ2VEZWVwKG9iamVjdCwgc291cmNlLCBrZXksIHNyY0luZGV4LCBiYXNlTWVyZ2UsIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICAgID8gY3VzdG9taXplcihvYmplY3Rba2V5XSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG5ld1ZhbHVlID0gc3JjVmFsdWU7XG4gICAgICB9XG4gICAgICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfVxuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlTWVyZ2U7XG4iLCJ2YXIgYXNzaWduTWVyZ2VWYWx1ZSA9IHJlcXVpcmUoJy4vX2Fzc2lnbk1lcmdlVmFsdWUnKSxcbiAgICBiYXNlQ2xvbmUgPSByZXF1aXJlKCcuL19iYXNlQ2xvbmUnKSxcbiAgICBjb3B5QXJyYXkgPSByZXF1aXJlKCcuL19jb3B5QXJyYXknKSxcbiAgICBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNBcnJheUxpa2VPYmplY3QgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlT2JqZWN0JyksXG4gICAgaXNGdW5jdGlvbiA9IHJlcXVpcmUoJy4vaXNGdW5jdGlvbicpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIGlzUGxhaW5PYmplY3QgPSByZXF1aXJlKCcuL2lzUGxhaW5PYmplY3QnKSxcbiAgICBpc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL2lzVHlwZWRBcnJheScpLFxuICAgIHRvUGxhaW5PYmplY3QgPSByZXF1aXJlKCcuL3RvUGxhaW5PYmplY3QnKTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VNZXJnZWAgZm9yIGFycmF5cyBhbmQgb2JqZWN0cyB3aGljaCBwZXJmb3Jtc1xuICogZGVlcCBtZXJnZXMgYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBlbmFibGluZyBvYmplY3RzIHdpdGggY2lyY3VsYXJcbiAqIHJlZmVyZW5jZXMgdG8gYmUgbWVyZ2VkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBtZXJnZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBzcmNJbmRleCBUaGUgaW5kZXggb2YgYHNvdXJjZWAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBtZXJnZUZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1lcmdlIHZhbHVlcy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIHZhbHVlcyBhbmQgdGhlaXIgbWVyZ2VkIGNvdW50ZXJwYXJ0cy5cbiAqL1xuZnVuY3Rpb24gYmFzZU1lcmdlRGVlcChvYmplY3QsIHNvdXJjZSwga2V5LCBzcmNJbmRleCwgbWVyZ2VGdW5jLCBjdXN0b21pemVyLCBzdGFjaykge1xuICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgIHNyY1ZhbHVlID0gc291cmNlW2tleV0sXG4gICAgICBzdGFja2VkID0gc3RhY2suZ2V0KHNyY1ZhbHVlKTtcblxuICBpZiAoc3RhY2tlZCkge1xuICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIHN0YWNrZWQpO1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgPyBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSwgKGtleSArICcnKSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKVxuICAgIDogdW5kZWZpbmVkO1xuXG4gIHZhciBpc0NvbW1vbiA9IG5ld1ZhbHVlID09PSB1bmRlZmluZWQ7XG5cbiAgaWYgKGlzQ29tbW9uKSB7XG4gICAgbmV3VmFsdWUgPSBzcmNWYWx1ZTtcbiAgICBpZiAoaXNBcnJheShzcmNWYWx1ZSkgfHwgaXNUeXBlZEFycmF5KHNyY1ZhbHVlKSkge1xuICAgICAgaWYgKGlzQXJyYXkob2JqVmFsdWUpKSB7XG4gICAgICAgIG5ld1ZhbHVlID0gb2JqVmFsdWU7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChpc0FycmF5TGlrZU9iamVjdChvYmpWYWx1ZSkpIHtcbiAgICAgICAgbmV3VmFsdWUgPSBjb3B5QXJyYXkob2JqVmFsdWUpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIG5ld1ZhbHVlID0gYmFzZUNsb25lKHNyY1ZhbHVlLCAhY3VzdG9taXplcik7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzUGxhaW5PYmplY3Qoc3JjVmFsdWUpIHx8IGlzQXJndW1lbnRzKHNyY1ZhbHVlKSkge1xuICAgICAgaWYgKGlzQXJndW1lbnRzKG9ialZhbHVlKSkge1xuICAgICAgICBuZXdWYWx1ZSA9IHRvUGxhaW5PYmplY3Qob2JqVmFsdWUpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoIWlzT2JqZWN0KG9ialZhbHVlKSB8fCAoc3JjSW5kZXggJiYgaXNGdW5jdGlvbihvYmpWYWx1ZSkpKSB7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIG5ld1ZhbHVlID0gYmFzZUNsb25lKHNyY1ZhbHVlLCAhY3VzdG9taXplcik7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgbmV3VmFsdWUgPSBvYmpWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICBzdGFjay5zZXQoc3JjVmFsdWUsIG5ld1ZhbHVlKTtcblxuICBpZiAoaXNDb21tb24pIHtcbiAgICAvLyBSZWN1cnNpdmVseSBtZXJnZSBvYmplY3RzIGFuZCBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBtZXJnZUZ1bmMobmV3VmFsdWUsIHNyY1ZhbHVlLCBzcmNJbmRleCwgY3VzdG9taXplciwgc3RhY2spO1xuICB9XG4gIHN0YWNrWydkZWxldGUnXShzcmNWYWx1ZSk7XG4gIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlTWVyZ2VEZWVwO1xuIiwidmFyIGFycmF5UmVkdWNlID0gcmVxdWlyZSgnLi9fYXJyYXlSZWR1Y2UnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5waWNrYCB3aXRob3V0IHN1cHBvcnQgZm9yIGluZGl2aWR1YWxcbiAqIHByb3BlcnR5IG5hbWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICogQHBhcmFtIHtzdHJpbmdbXX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIHBpY2suXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBiYXNlUGljayhvYmplY3QsIHByb3BzKSB7XG4gIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICByZXR1cm4gYXJyYXlSZWR1Y2UocHJvcHMsIGZ1bmN0aW9uKHJlc3VsdCwga2V5KSB7XG4gICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gb2JqZWN0W2tleV07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sIHt9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlUGljaztcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHJvcGVydHlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVByb3BlcnR5KGtleSkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVByb3BlcnR5O1xuIiwidmFyIGJhc2VHZXQgPSByZXF1aXJlKCcuL19iYXNlR2V0Jyk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUHJvcGVydHlgIHdoaWNoIHN1cHBvcnRzIGRlZXAgcGF0aHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVByb3BlcnR5RGVlcChwYXRoKSB7XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VQcm9wZXJ0eURlZXA7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNsaWNlYCB3aXRob3V0IGFuIGl0ZXJhdGVlIGNhbGwgZ3VhcmQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzbGljZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBiYXNlU2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gLXN0YXJ0ID4gbGVuZ3RoID8gMCA6IChsZW5ndGggKyBzdGFydCk7XG4gIH1cbiAgZW5kID0gZW5kID4gbGVuZ3RoID8gbGVuZ3RoIDogZW5kO1xuICBpZiAoZW5kIDwgMCkge1xuICAgIGVuZCArPSBsZW5ndGg7XG4gIH1cbiAgbGVuZ3RoID0gc3RhcnQgPiBlbmQgPyAwIDogKChlbmQgLSBzdGFydCkgPj4+IDApO1xuICBzdGFydCA+Pj49IDA7XG5cbiAgdmFyIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IGFycmF5W2luZGV4ICsgc3RhcnRdO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVNsaWNlO1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zdW1gIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdW0uXG4gKi9cbmZ1bmN0aW9uIGJhc2VTdW0oYXJyYXksIGl0ZXJhdGVlKSB7XG4gIHZhciByZXN1bHQsXG4gICAgICBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGN1cnJlbnQgPSBpdGVyYXRlZShhcnJheVtpbmRleF0pO1xuICAgIGlmIChjdXJyZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJlc3VsdCA9IHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gY3VycmVudCA6IChyZXN1bHQgKyBjdXJyZW50KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlU3VtO1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50aW1lc2Agd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzXG4gKiBvciBtYXggYXJyYXkgbGVuZ3RoIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBpbnZva2UgYGl0ZXJhdGVlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUaW1lcyhuLCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KG4pO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbikge1xuICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShpbmRleCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVGltZXM7XG4iLCJ2YXIgYXJyYXlNYXAgPSByZXF1aXJlKCcuL19hcnJheU1hcCcpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvUGFpcnNgIGFuZCBgXy50b1BhaXJzSW5gIHdoaWNoIGNyZWF0ZXMgYW4gYXJyYXlcbiAqIG9mIGtleS12YWx1ZSBwYWlycyBmb3IgYG9iamVjdGAgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvcGVydHkgbmFtZXMgb2YgYHByb3BzYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGdldCB2YWx1ZXMgZm9yLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGtleS12YWx1ZSBwYWlycy5cbiAqL1xuZnVuY3Rpb24gYmFzZVRvUGFpcnMob2JqZWN0LCBwcm9wcykge1xuICByZXR1cm4gYXJyYXlNYXAocHJvcHMsIGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiBba2V5LCBvYmplY3Rba2V5XV07XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VUb1BhaXJzO1xuIiwidmFyIFNldENhY2hlID0gcmVxdWlyZSgnLi9fU2V0Q2FjaGUnKSxcbiAgICBhcnJheUluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXlJbmNsdWRlcycpLFxuICAgIGFycmF5SW5jbHVkZXNXaXRoID0gcmVxdWlyZSgnLi9fYXJyYXlJbmNsdWRlc1dpdGgnKSxcbiAgICBjYWNoZUhhcyA9IHJlcXVpcmUoJy4vX2NhY2hlSGFzJyksXG4gICAgY3JlYXRlU2V0ID0gcmVxdWlyZSgnLi9fY3JlYXRlU2V0JyksXG4gICAgc2V0VG9BcnJheSA9IHJlcXVpcmUoJy4vX3NldFRvQXJyYXknKTtcblxuLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG52YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmlxQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYmFzZVVuaXEoYXJyYXksIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzLFxuICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgaXNDb21tb24gPSB0cnVlLFxuICAgICAgcmVzdWx0ID0gW10sXG4gICAgICBzZWVuID0gcmVzdWx0O1xuXG4gIGlmIChjb21wYXJhdG9yKSB7XG4gICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXNXaXRoO1xuICB9XG4gIGVsc2UgaWYgKGxlbmd0aCA+PSBMQVJHRV9BUlJBWV9TSVpFKSB7XG4gICAgdmFyIHNldCA9IGl0ZXJhdGVlID8gbnVsbCA6IGNyZWF0ZVNldChhcnJheSk7XG4gICAgaWYgKHNldCkge1xuICAgICAgcmV0dXJuIHNldFRvQXJyYXkoc2V0KTtcbiAgICB9XG4gICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICBpbmNsdWRlcyA9IGNhY2hlSGFzO1xuICAgIHNlZW4gPSBuZXcgU2V0Q2FjaGU7XG4gIH1cbiAgZWxzZSB7XG4gICAgc2VlbiA9IGl0ZXJhdGVlID8gW10gOiByZXN1bHQ7XG4gIH1cbiAgb3V0ZXI6XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICBpZiAoaXNDb21tb24gJiYgY29tcHV0ZWQgPT09IGNvbXB1dGVkKSB7XG4gICAgICB2YXIgc2VlbkluZGV4ID0gc2Vlbi5sZW5ndGg7XG4gICAgICB3aGlsZSAoc2VlbkluZGV4LS0pIHtcbiAgICAgICAgaWYgKHNlZW5bc2VlbkluZGV4XSA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGl0ZXJhdGVlKSB7XG4gICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICB9XG4gICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKCFpbmNsdWRlcyhzZWVuLCBjb21wdXRlZCwgY29tcGFyYXRvcikpIHtcbiAgICAgIGlmIChzZWVuICE9PSByZXN1bHQpIHtcbiAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVW5pcTtcbiIsInZhciBhcnJheU1hcCA9IHJlcXVpcmUoJy4vX2FycmF5TWFwJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udmFsdWVzYCBhbmQgYF8udmFsdWVzSW5gIHdoaWNoIGNyZWF0ZXMgYW5cbiAqIGFycmF5IG9mIGBvYmplY3RgIHByb3BlcnR5IHZhbHVlcyBjb3JyZXNwb25kaW5nIHRvIHRoZSBwcm9wZXJ0eSBuYW1lc1xuICogb2YgYHByb3BzYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGdldCB2YWx1ZXMgZm9yLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICovXG5mdW5jdGlvbiBiYXNlVmFsdWVzKG9iamVjdCwgcHJvcHMpIHtcbiAgcmV0dXJuIGFycmF5TWFwKHByb3BzLCBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gb2JqZWN0W2tleV07XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VWYWx1ZXM7XG4iLCJ2YXIgaXNLZXlhYmxlID0gcmVxdWlyZSgnLi9faXNLZXlhYmxlJyk7XG5cbi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBpbiBgY2FjaGVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gY2FjaGUgVGhlIHNldCBjYWNoZSB0byBzZWFyY2guXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBjYWNoZUhhcyhjYWNoZSwgdmFsdWUpIHtcbiAgdmFyIG1hcCA9IGNhY2hlLl9fZGF0YV9fO1xuICBpZiAoaXNLZXlhYmxlKHZhbHVlKSkge1xuICAgIHZhciBkYXRhID0gbWFwLl9fZGF0YV9fLFxuICAgICAgICBoYXNoID0gdHlwZW9mIHZhbHVlID09ICdzdHJpbmcnID8gZGF0YS5zdHJpbmcgOiBkYXRhLmhhc2g7XG5cbiAgICByZXR1cm4gaGFzaFt2YWx1ZV0gPT09IEhBU0hfVU5ERUZJTkVEO1xuICB9XG4gIHJldHVybiBtYXAuaGFzKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjYWNoZUhhcztcbiIsInZhciBpc0tleWFibGUgPSByZXF1aXJlKCcuL19pc0tleWFibGUnKTtcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKipcbiAqIEFkZHMgYHZhbHVlYCB0byB0aGUgc2V0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBwdXNoXG4gKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBjYWNoZVB1c2godmFsdWUpIHtcbiAgdmFyIG1hcCA9IHRoaXMuX19kYXRhX187XG4gIGlmIChpc0tleWFibGUodmFsdWUpKSB7XG4gICAgdmFyIGRhdGEgPSBtYXAuX19kYXRhX18sXG4gICAgICAgIGhhc2ggPSB0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgPyBkYXRhLnN0cmluZyA6IGRhdGEuaGFzaDtcblxuICAgIGhhc2hbdmFsdWVdID0gSEFTSF9VTkRFRklORUQ7XG4gIH1cbiAgZWxzZSB7XG4gICAgbWFwLnNldCh2YWx1ZSwgSEFTSF9VTkRFRklORUQpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2FjaGVQdXNoO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGdsb2JhbCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge251bGx8T2JqZWN0fSBSZXR1cm5zIGB2YWx1ZWAgaWYgaXQncyBhIGdsb2JhbCBvYmplY3QsIGVsc2UgYG51bGxgLlxuICovXG5mdW5jdGlvbiBjaGVja0dsb2JhbCh2YWx1ZSkge1xuICByZXR1cm4gKHZhbHVlICYmIHZhbHVlLk9iamVjdCA9PT0gT2JqZWN0KSA/IHZhbHVlIDogbnVsbDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjaGVja0dsb2JhbDtcbiIsInZhciBVaW50OEFycmF5ID0gcmVxdWlyZSgnLi9fVWludDhBcnJheScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgYXJyYXlCdWZmZXJgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBhcnJheUJ1ZmZlciBUaGUgYXJyYXkgYnVmZmVyIHRvIGNsb25lLlxuICogQHJldHVybnMge0FycmF5QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYXJyYXkgYnVmZmVyLlxuICovXG5mdW5jdGlvbiBjbG9uZUFycmF5QnVmZmVyKGFycmF5QnVmZmVyKSB7XG4gIHZhciByZXN1bHQgPSBuZXcgYXJyYXlCdWZmZXIuY29uc3RydWN0b3IoYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCk7XG4gIG5ldyBVaW50OEFycmF5KHJlc3VsdCkuc2V0KG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyKSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmVBcnJheUJ1ZmZlcjtcbiIsIi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mICBgYnVmZmVyYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZmZlciBUaGUgYnVmZmVyIHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtCdWZmZXJ9IFJldHVybnMgdGhlIGNsb25lZCBidWZmZXIuXG4gKi9cbmZ1bmN0aW9uIGNsb25lQnVmZmVyKGJ1ZmZlciwgaXNEZWVwKSB7XG4gIGlmIChpc0RlZXApIHtcbiAgICByZXR1cm4gYnVmZmVyLnNsaWNlKCk7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IG5ldyBidWZmZXIuY29uc3RydWN0b3IoYnVmZmVyLmxlbmd0aCk7XG4gIGJ1ZmZlci5jb3B5KHJlc3VsdCk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmVCdWZmZXI7XG4iLCJ2YXIgYWRkTWFwRW50cnkgPSByZXF1aXJlKCcuL19hZGRNYXBFbnRyeScpLFxuICAgIGFycmF5UmVkdWNlID0gcmVxdWlyZSgnLi9fYXJyYXlSZWR1Y2UnKSxcbiAgICBtYXBUb0FycmF5ID0gcmVxdWlyZSgnLi9fbWFwVG9BcnJheScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgbWFwYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIG1hcC5cbiAqL1xuZnVuY3Rpb24gY2xvbmVNYXAobWFwKSB7XG4gIHJldHVybiBhcnJheVJlZHVjZShtYXBUb0FycmF5KG1hcCksIGFkZE1hcEVudHJ5LCBuZXcgbWFwLmNvbnN0cnVjdG9yKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbG9uZU1hcDtcbiIsIi8qKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgIGZsYWdzIGZyb20gdGhlaXIgY29lcmNlZCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlRmxhZ3MgPSAvXFx3KiQvO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgcmVnZXhwYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHJlZ2V4cCBUaGUgcmVnZXhwIHRvIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHJlZ2V4cC5cbiAqL1xuZnVuY3Rpb24gY2xvbmVSZWdFeHAocmVnZXhwKSB7XG4gIHZhciByZXN1bHQgPSBuZXcgcmVnZXhwLmNvbnN0cnVjdG9yKHJlZ2V4cC5zb3VyY2UsIHJlRmxhZ3MuZXhlYyhyZWdleHApKTtcbiAgcmVzdWx0Lmxhc3RJbmRleCA9IHJlZ2V4cC5sYXN0SW5kZXg7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmVSZWdFeHA7XG4iLCJ2YXIgYWRkU2V0RW50cnkgPSByZXF1aXJlKCcuL19hZGRTZXRFbnRyeScpLFxuICAgIGFycmF5UmVkdWNlID0gcmVxdWlyZSgnLi9fYXJyYXlSZWR1Y2UnKSxcbiAgICBzZXRUb0FycmF5ID0gcmVxdWlyZSgnLi9fc2V0VG9BcnJheScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgc2V0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNldCBUaGUgc2V0IHRvIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHNldC5cbiAqL1xuZnVuY3Rpb24gY2xvbmVTZXQoc2V0KSB7XG4gIHJldHVybiBhcnJheVJlZHVjZShzZXRUb0FycmF5KHNldCksIGFkZFNldEVudHJ5LCBuZXcgc2V0LmNvbnN0cnVjdG9yKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbG9uZVNldDtcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKTtcblxuLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG52YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgIHN5bWJvbFZhbHVlT2YgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnZhbHVlT2YgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBgc3ltYm9sYCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzeW1ib2wgVGhlIHN5bWJvbCBvYmplY3QgdG8gY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgc3ltYm9sIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gY2xvbmVTeW1ib2woc3ltYm9sKSB7XG4gIHJldHVybiBzeW1ib2xWYWx1ZU9mID8gT2JqZWN0KHN5bWJvbFZhbHVlT2YuY2FsbChzeW1ib2wpKSA6IHt9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsb25lU3ltYm9sO1xuIiwidmFyIGNsb25lQXJyYXlCdWZmZXIgPSByZXF1aXJlKCcuL19jbG9uZUFycmF5QnVmZmVyJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIGB0eXBlZEFycmF5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHR5cGVkQXJyYXkgVGhlIHR5cGVkIGFycmF5IHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCB0eXBlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gY2xvbmVUeXBlZEFycmF5KHR5cGVkQXJyYXksIGlzRGVlcCkge1xuICB2YXIgYnVmZmVyID0gaXNEZWVwID8gY2xvbmVBcnJheUJ1ZmZlcih0eXBlZEFycmF5LmJ1ZmZlcikgOiB0eXBlZEFycmF5LmJ1ZmZlcjtcbiAgcmV0dXJuIG5ldyB0eXBlZEFycmF5LmNvbnN0cnVjdG9yKGJ1ZmZlciwgdHlwZWRBcnJheS5ieXRlT2Zmc2V0LCB0eXBlZEFycmF5Lmxlbmd0aCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmVUeXBlZEFycmF5O1xuIiwiLyoqXG4gKiBDb3BpZXMgdGhlIHZhbHVlcyBvZiBgc291cmNlYCB0byBgYXJyYXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBzb3VyY2UgVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIGZyb20uXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXk9W11dIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyB0by5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBjb3B5QXJyYXkoc291cmNlLCBhcnJheSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHNvdXJjZS5sZW5ndGg7XG5cbiAgYXJyYXkgfHwgKGFycmF5ID0gQXJyYXkobGVuZ3RoKSk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgYXJyYXlbaW5kZXhdID0gc291cmNlW2luZGV4XTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29weUFycmF5O1xuIiwidmFyIGNvcHlPYmplY3RXaXRoID0gcmVxdWlyZSgnLi9fY29weU9iamVjdFdpdGgnKTtcblxuLyoqXG4gKiBDb3BpZXMgcHJvcGVydGllcyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tLlxuICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGNvcHkuXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgdG8uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBjb3B5T2JqZWN0KHNvdXJjZSwgcHJvcHMsIG9iamVjdCkge1xuICByZXR1cm4gY29weU9iamVjdFdpdGgoc291cmNlLCBwcm9wcywgb2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb3B5T2JqZWN0O1xuIiwidmFyIGFzc2lnblZhbHVlID0gcmVxdWlyZSgnLi9fYXNzaWduVmFsdWUnKTtcblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGNvcHlPYmplY3RgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYSBmdW5jdGlvbiB0b1xuICogY3VzdG9taXplIGNvcGllZCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbS5cbiAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBuYW1lcyB0byBjb3B5LlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIHRvLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29waWVkIHZhbHVlcy5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGNvcHlPYmplY3RXaXRoKHNvdXJjZSwgcHJvcHMsIG9iamVjdCwgY3VzdG9taXplcikge1xuICBvYmplY3QgfHwgKG9iamVjdCA9IHt9KTtcblxuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBrZXkgPSBwcm9wc1tpbmRleF07XG5cbiAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICA/IGN1c3RvbWl6ZXIob2JqZWN0W2tleV0sIHNvdXJjZVtrZXldLCBrZXksIG9iamVjdCwgc291cmNlKVxuICAgICAgOiBzb3VyY2Vba2V5XTtcblxuICAgIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIG9iamVjdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb3B5T2JqZWN0V2l0aDtcbiIsInZhciBjb3B5T2JqZWN0ID0gcmVxdWlyZSgnLi9fY29weU9iamVjdCcpLFxuICAgIGdldFN5bWJvbHMgPSByZXF1aXJlKCcuL19nZXRTeW1ib2xzJyk7XG5cbi8qKlxuICogQ29waWVzIG93biBzeW1ib2wgcHJvcGVydGllcyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyBmcm9tLlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIHRvLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gY29weVN5bWJvbHMoc291cmNlLCBvYmplY3QpIHtcbiAgcmV0dXJuIGNvcHlPYmplY3Qoc291cmNlLCBnZXRTeW1ib2xzKHNvdXJjZSksIG9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29weVN5bWJvbHM7XG4iLCJ2YXIgaXNJdGVyYXRlZUNhbGwgPSByZXF1aXJlKCcuL19pc0l0ZXJhdGVlQ2FsbCcpLFxuICAgIHJlc3QgPSByZXF1aXJlKCcuL3Jlc3QnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5hc3NpZ25gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBhc3NpZ25lciBUaGUgZnVuY3Rpb24gdG8gYXNzaWduIHZhbHVlcy5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFzc2lnbmVyIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVBc3NpZ25lcihhc3NpZ25lcikge1xuICByZXR1cm4gcmVzdChmdW5jdGlvbihvYmplY3QsIHNvdXJjZXMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gc291cmNlcy5sZW5ndGgsXG4gICAgICAgIGN1c3RvbWl6ZXIgPSBsZW5ndGggPiAxID8gc291cmNlc1tsZW5ndGggLSAxXSA6IHVuZGVmaW5lZCxcbiAgICAgICAgZ3VhcmQgPSBsZW5ndGggPiAyID8gc291cmNlc1syXSA6IHVuZGVmaW5lZDtcblxuICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nXG4gICAgICA/IChsZW5ndGgtLSwgY3VzdG9taXplcilcbiAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHNvdXJjZXNbMF0sIHNvdXJjZXNbMV0sIGd1YXJkKSkge1xuICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiBjdXN0b21pemVyO1xuICAgICAgbGVuZ3RoID0gMTtcbiAgICB9XG4gICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciBzb3VyY2UgPSBzb3VyY2VzW2luZGV4XTtcbiAgICAgIGlmIChzb3VyY2UpIHtcbiAgICAgICAgYXNzaWduZXIob2JqZWN0LCBzb3VyY2UsIGluZGV4LCBjdXN0b21pemVyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlQXNzaWduZXI7XG4iLCJ2YXIgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGBiYXNlRWFjaGAgb3IgYGJhc2VFYWNoUmlnaHRgIGZ1bmN0aW9uLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlYWNoRnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGEgY29sbGVjdGlvbi5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYmFzZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQmFzZUVhY2goZWFjaEZ1bmMsIGZyb21SaWdodCkge1xuICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICBpZiAoY29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgICB9XG4gICAgaWYgKCFpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xuICAgICAgcmV0dXJuIGVhY2hGdW5jKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKTtcbiAgICB9XG4gICAgdmFyIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoLFxuICAgICAgICBpbmRleCA9IGZyb21SaWdodCA/IGxlbmd0aCA6IC0xLFxuICAgICAgICBpdGVyYWJsZSA9IE9iamVjdChjb2xsZWN0aW9uKTtcblxuICAgIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpKSB7XG4gICAgICBpZiAoaXRlcmF0ZWUoaXRlcmFibGVbaW5kZXhdLCBpbmRleCwgaXRlcmFibGUpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlQmFzZUVhY2g7XG4iLCIvKipcbiAqIENyZWF0ZXMgYSBiYXNlIGZ1bmN0aW9uIGZvciBtZXRob2RzIGxpa2UgYF8uZm9ySW5gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJhc2UgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJhc2VGb3IoZnJvbVJpZ2h0KSB7XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QsIGl0ZXJhdGVlLCBrZXlzRnVuYykge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBpdGVyYWJsZSA9IE9iamVjdChvYmplY3QpLFxuICAgICAgICBwcm9wcyA9IGtleXNGdW5jKG9iamVjdCksXG4gICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgdmFyIGtleSA9IHByb3BzW2Zyb21SaWdodCA/IGxlbmd0aCA6ICsraW5kZXhdO1xuICAgICAgaWYgKGl0ZXJhdGVlKGl0ZXJhYmxlW2tleV0sIGtleSwgaXRlcmFibGUpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVCYXNlRm9yO1xuIiwidmFyIFNldCA9IHJlcXVpcmUoJy4vX1NldCcpLFxuICAgIG5vb3AgPSByZXF1aXJlKCcuL25vb3AnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgc2V0IG9mIGB2YWx1ZXNgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBhZGQgdG8gdGhlIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBzZXQuXG4gKi9cbnZhciBjcmVhdGVTZXQgPSAhKFNldCAmJiBuZXcgU2V0KFsxLCAyXSkuc2l6ZSA9PT0gMikgPyBub29wIDogZnVuY3Rpb24odmFsdWVzKSB7XG4gIHJldHVybiBuZXcgU2V0KHZhbHVlcyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZVNldDtcbiIsInZhciBhcnJheVNvbWUgPSByZXF1aXJlKCcuL19hcnJheVNvbWUnKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgY29tcGFyaXNvbiBzdHlsZXMuICovXG52YXIgVU5PUkRFUkVEX0NPTVBBUkVfRkxBRyA9IDEsXG4gICAgUEFSVElBTF9DT01QQVJFX0ZMQUcgPSAyO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgYXJyYXlzIHdpdGggc3VwcG9ydCBmb3JcbiAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge0FycmF5fSBvdGhlciBUaGUgb3RoZXIgYXJyYXkgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIG9mIGNvbXBhcmlzb24gZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgYXJyYXlgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFycmF5cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbEFycmF5cyhhcnJheSwgb3RoZXIsIGVxdWFsRnVuYywgY3VzdG9taXplciwgYml0bWFzaywgc3RhY2spIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBpc1BhcnRpYWwgPSBiaXRtYXNrICYgUEFSVElBTF9DT01QQVJFX0ZMQUcsXG4gICAgICBpc1Vub3JkZXJlZCA9IGJpdG1hc2sgJiBVTk9SREVSRURfQ09NUEFSRV9GTEFHLFxuICAgICAgYXJyTGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgb3RoTGVuZ3RoID0gb3RoZXIubGVuZ3RoO1xuXG4gIGlmIChhcnJMZW5ndGggIT0gb3RoTGVuZ3RoICYmICEoaXNQYXJ0aWFsICYmIG90aExlbmd0aCA+IGFyckxlbmd0aCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChhcnJheSk7XG4gIGlmIChzdGFja2VkKSB7XG4gICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IHRydWU7XG4gIHN0YWNrLnNldChhcnJheSwgb3RoZXIpO1xuXG4gIC8vIElnbm9yZSBub24taW5kZXggcHJvcGVydGllcy5cbiAgd2hpbGUgKCsraW5kZXggPCBhcnJMZW5ndGgpIHtcbiAgICB2YXIgYXJyVmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgIG90aFZhbHVlID0gb3RoZXJbaW5kZXhdO1xuXG4gICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIGFyclZhbHVlLCBpbmRleCwgb3RoZXIsIGFycmF5LCBzdGFjaylcbiAgICAgICAgOiBjdXN0b21pemVyKGFyclZhbHVlLCBvdGhWYWx1ZSwgaW5kZXgsIGFycmF5LCBvdGhlciwgc3RhY2spO1xuICAgIH1cbiAgICBpZiAoY29tcGFyZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGNvbXBhcmVkKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBpZiAoaXNVbm9yZGVyZWQpIHtcbiAgICAgIGlmICghYXJyYXlTb21lKG90aGVyLCBmdW5jdGlvbihvdGhWYWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBjdXN0b21pemVyLCBiaXRtYXNrLCBzdGFjayk7XG4gICAgICAgICAgfSkpIHtcbiAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIShhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgY3VzdG9taXplciwgYml0bWFzaywgc3RhY2spKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgc3RhY2tbJ2RlbGV0ZSddKGFycmF5KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlcXVhbEFycmF5cztcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKSxcbiAgICBVaW50OEFycmF5ID0gcmVxdWlyZSgnLi9fVWludDhBcnJheScpLFxuICAgIGVxdWFsQXJyYXlzID0gcmVxdWlyZSgnLi9fZXF1YWxBcnJheXMnKSxcbiAgICBtYXBUb0FycmF5ID0gcmVxdWlyZSgnLi9fbWFwVG9BcnJheScpLFxuICAgIHNldFRvQXJyYXkgPSByZXF1aXJlKCcuL19zZXRUb0FycmF5Jyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGNvbXBhcmlzb24gc3R5bGVzLiAqL1xudmFyIFVOT1JERVJFRF9DT01QQVJFX0ZMQUcgPSAxLFxuICAgIFBBUlRJQUxfQ09NUEFSRV9GTEFHID0gMjtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGJvb2xUYWcgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXScsXG4gICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXSc7XG5cbi8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xudmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICBzeW1ib2xWYWx1ZU9mID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by52YWx1ZU9mIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgY29tcGFyaW5nIG9iamVjdHMgb2ZcbiAqIHRoZSBzYW1lIGB0b1N0cmluZ1RhZ2AuXG4gKlxuICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gb25seSBzdXBwb3J0cyBjb21wYXJpbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBOdW1iZXJgLCBgUmVnRXhwYCwgb3IgYFN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhlIG9iamVjdHMgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIG9mIGNvbXBhcmlzb24gZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgdGFnLCBlcXVhbEZ1bmMsIGN1c3RvbWl6ZXIsIGJpdG1hc2ssIHN0YWNrKSB7XG4gIHN3aXRjaCAodGFnKSB7XG4gICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAhZXF1YWxGdW5jKG5ldyBVaW50OEFycmF5KG9iamVjdCksIG5ldyBVaW50OEFycmF5KG90aGVyKSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICBjYXNlIGJvb2xUYWc6XG4gICAgY2FzZSBkYXRlVGFnOlxuICAgICAgLy8gQ29lcmNlIGRhdGVzIGFuZCBib29sZWFucyB0byBudW1iZXJzLCBkYXRlcyB0byBtaWxsaXNlY29uZHMgYW5kIGJvb2xlYW5zXG4gICAgICAvLyB0byBgMWAgb3IgYDBgIHRyZWF0aW5nIGludmFsaWQgZGF0ZXMgY29lcmNlZCB0byBgTmFOYCBhcyBub3QgZXF1YWwuXG4gICAgICByZXR1cm4gK29iamVjdCA9PSArb3RoZXI7XG5cbiAgICBjYXNlIGVycm9yVGFnOlxuICAgICAgcmV0dXJuIG9iamVjdC5uYW1lID09IG90aGVyLm5hbWUgJiYgb2JqZWN0Lm1lc3NhZ2UgPT0gb3RoZXIubWVzc2FnZTtcblxuICAgIGNhc2UgbnVtYmVyVGFnOlxuICAgICAgLy8gVHJlYXQgYE5hTmAgdnMuIGBOYU5gIGFzIGVxdWFsLlxuICAgICAgcmV0dXJuIChvYmplY3QgIT0gK29iamVjdCkgPyBvdGhlciAhPSArb3RoZXIgOiBvYmplY3QgPT0gK290aGVyO1xuXG4gICAgY2FzZSByZWdleHBUYWc6XG4gICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICAvLyBDb2VyY2UgcmVnZXhlcyB0byBzdHJpbmdzIGFuZCB0cmVhdCBzdHJpbmdzIHByaW1pdGl2ZXMgYW5kIHN0cmluZ1xuICAgICAgLy8gb2JqZWN0cyBhcyBlcXVhbC4gU2VlIGh0dHBzOi8vZXM1LmdpdGh1Yi5pby8jeDE1LjEwLjYuNCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgcmV0dXJuIG9iamVjdCA9PSAob3RoZXIgKyAnJyk7XG5cbiAgICBjYXNlIG1hcFRhZzpcbiAgICAgIHZhciBjb252ZXJ0ID0gbWFwVG9BcnJheTtcblxuICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBQQVJUSUFMX0NPTVBBUkVfRkxBRztcbiAgICAgIGNvbnZlcnQgfHwgKGNvbnZlcnQgPSBzZXRUb0FycmF5KTtcblxuICAgICAgaWYgKG9iamVjdC5zaXplICE9IG90aGVyLnNpemUgJiYgIWlzUGFydGlhbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICAgICAgaWYgKHN0YWNrZWQpIHtcbiAgICAgICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gICAgICB9XG4gICAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgIHJldHVybiBlcXVhbEFycmF5cyhjb252ZXJ0KG9iamVjdCksIGNvbnZlcnQob3RoZXIpLCBlcXVhbEZ1bmMsIGN1c3RvbWl6ZXIsIGJpdG1hc2sgfCBVTk9SREVSRURfQ09NUEFSRV9GTEFHLCBzdGFjay5zZXQob2JqZWN0LCBvdGhlcikpO1xuXG4gICAgY2FzZSBzeW1ib2xUYWc6XG4gICAgICBpZiAoc3ltYm9sVmFsdWVPZikge1xuICAgICAgICByZXR1cm4gc3ltYm9sVmFsdWVPZi5jYWxsKG9iamVjdCkgPT0gc3ltYm9sVmFsdWVPZi5jYWxsKG90aGVyKTtcbiAgICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXF1YWxCeVRhZztcbiIsInZhciBiYXNlSGFzID0gcmVxdWlyZSgnLi9fYmFzZUhhcycpLFxuICAgIGtleXMgPSByZXF1aXJlKCcuL2tleXMnKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgY29tcGFyaXNvbiBzdHlsZXMuICovXG52YXIgUEFSVElBTF9DT01QQVJFX0ZMQUcgPSAyO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3Igb2JqZWN0cyB3aXRoIHN1cHBvcnQgZm9yXG4gKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIG9mIGNvbXBhcmlzb24gZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBlcXVhbEZ1bmMsIGN1c3RvbWl6ZXIsIGJpdG1hc2ssIHN0YWNrKSB7XG4gIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgUEFSVElBTF9DT01QQVJFX0ZMQUcsXG4gICAgICBvYmpQcm9wcyA9IGtleXMob2JqZWN0KSxcbiAgICAgIG9iakxlbmd0aCA9IG9ialByb3BzLmxlbmd0aCxcbiAgICAgIG90aFByb3BzID0ga2V5cyhvdGhlciksXG4gICAgICBvdGhMZW5ndGggPSBvdGhQcm9wcy5sZW5ndGg7XG5cbiAgaWYgKG9iakxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIWlzUGFydGlhbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgaW5kZXggPSBvYmpMZW5ndGg7XG4gIHdoaWxlIChpbmRleC0tKSB7XG4gICAgdmFyIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICBpZiAoIShpc1BhcnRpYWwgPyBrZXkgaW4gb3RoZXIgOiBiYXNlSGFzKG90aGVyLCBrZXkpKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KG9iamVjdCk7XG4gIGlmIChzdGFja2VkKSB7XG4gICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IHRydWU7XG4gIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcblxuICB2YXIgc2tpcEN0b3IgPSBpc1BhcnRpYWw7XG4gIHdoaWxlICgrK2luZGV4IDwgb2JqTGVuZ3RoKSB7XG4gICAga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2tleV07XG5cbiAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgb2JqVmFsdWUsIGtleSwgb3RoZXIsIG9iamVjdCwgc3RhY2spXG4gICAgICAgIDogY3VzdG9taXplcihvYmpWYWx1ZSwgb3RoVmFsdWUsIGtleSwgb2JqZWN0LCBvdGhlciwgc3RhY2spO1xuICAgIH1cbiAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBpZiAoIShjb21wYXJlZCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgPyAob2JqVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhvYmpWYWx1ZSwgb3RoVmFsdWUsIGN1c3RvbWl6ZXIsIGJpdG1hc2ssIHN0YWNrKSlcbiAgICAgICAgICA6IGNvbXBhcmVkXG4gICAgICAgICkpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHNraXBDdG9yIHx8IChza2lwQ3RvciA9IGtleSA9PSAnY29uc3RydWN0b3InKTtcbiAgfVxuICBpZiAocmVzdWx0ICYmICFza2lwQ3Rvcikge1xuICAgIHZhciBvYmpDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yLFxuICAgICAgICBvdGhDdG9yID0gb3RoZXIuY29uc3RydWN0b3I7XG5cbiAgICAvLyBOb24gYE9iamVjdGAgb2JqZWN0IGluc3RhbmNlcyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVhbC5cbiAgICBpZiAob2JqQ3RvciAhPSBvdGhDdG9yICYmXG4gICAgICAgICgnY29uc3RydWN0b3InIGluIG9iamVjdCAmJiAnY29uc3RydWN0b3InIGluIG90aGVyKSAmJlxuICAgICAgICAhKHR5cGVvZiBvYmpDdG9yID09ICdmdW5jdGlvbicgJiYgb2JqQ3RvciBpbnN0YW5jZW9mIG9iakN0b3IgJiZcbiAgICAgICAgICB0eXBlb2Ygb3RoQ3RvciA9PSAnZnVuY3Rpb24nICYmIG90aEN0b3IgaW5zdGFuY2VvZiBvdGhDdG9yKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVxdWFsT2JqZWN0cztcbiIsIi8qKiBVc2VkIHRvIG1hcCBjaGFyYWN0ZXJzIHRvIEhUTUwgZW50aXRpZXMuICovXG52YXIgaHRtbEVzY2FwZXMgPSB7XG4gICcmJzogJyZhbXA7JyxcbiAgJzwnOiAnJmx0OycsXG4gICc+JzogJyZndDsnLFxuICAnXCInOiAnJnF1b3Q7JyxcbiAgXCInXCI6ICcmIzM5OycsXG4gICdgJzogJyYjOTY7J1xufTtcblxuLyoqXG4gKiBVc2VkIGJ5IGBfLmVzY2FwZWAgdG8gY29udmVydCBjaGFyYWN0ZXJzIHRvIEhUTUwgZW50aXRpZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBjaHIgVGhlIG1hdGNoZWQgY2hhcmFjdGVyIHRvIGVzY2FwZS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgY2hhcmFjdGVyLlxuICovXG5mdW5jdGlvbiBlc2NhcGVIdG1sQ2hhcihjaHIpIHtcbiAgcmV0dXJuIGh0bWxFc2NhcGVzW2Nocl07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXNjYXBlSHRtbENoYXI7XG4iLCJ2YXIgYmFzZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fYmFzZVByb3BlcnR5Jyk7XG5cbi8qKlxuICogR2V0cyB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSB2YWx1ZSBvZiBgb2JqZWN0YC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIGF2b2lkIGEgW0pJVCBidWddKGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xNDI3OTIpXG4gKiB0aGF0IGFmZmVjdHMgU2FmYXJpIG9uIGF0IGxlYXN0IGlPUyA4LjEtOC4zIEFSTTY0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgXCJsZW5ndGhcIiB2YWx1ZS5cbiAqL1xudmFyIGdldExlbmd0aCA9IGJhc2VQcm9wZXJ0eSgnbGVuZ3RoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0TGVuZ3RoO1xuIiwidmFyIGlzU3RyaWN0Q29tcGFyYWJsZSA9IHJlcXVpcmUoJy4vX2lzU3RyaWN0Q29tcGFyYWJsZScpLFxuICAgIHRvUGFpcnMgPSByZXF1aXJlKCcuL3RvUGFpcnMnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBwcm9wZXJ0eSBuYW1lcywgdmFsdWVzLCBhbmQgY29tcGFyZSBmbGFncyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBtYXRjaCBkYXRhIG9mIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBnZXRNYXRjaERhdGEob2JqZWN0KSB7XG4gIHZhciByZXN1bHQgPSB0b1BhaXJzKG9iamVjdCksXG4gICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIHJlc3VsdFtsZW5ndGhdWzJdID0gaXNTdHJpY3RDb21wYXJhYmxlKHJlc3VsdFtsZW5ndGhdWzFdKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE1hdGNoRGF0YTtcbiIsInZhciBpc05hdGl2ZSA9IHJlcXVpcmUoJy4vaXNOYXRpdmUnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBuYXRpdmUgZnVuY3Rpb24gYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBpZiBpdCdzIG5hdGl2ZSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAqL1xuZnVuY3Rpb24gZ2V0TmF0aXZlKG9iamVjdCwga2V5KSB7XG4gIHZhciB2YWx1ZSA9IG9iamVjdFtrZXldO1xuICByZXR1cm4gaXNOYXRpdmUodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0TmF0aXZlO1xuIiwiLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gc3ltYm9sIHByb3BlcnRpZXMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAqL1xudmFyIGdldFN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgfHwgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBbXTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0U3ltYm9scztcbiIsInZhciBNYXAgPSByZXF1aXJlKCcuL19NYXAnKSxcbiAgICBTZXQgPSByZXF1aXJlKCcuL19TZXQnKSxcbiAgICBXZWFrTWFwID0gcmVxdWlyZSgnLi9fV2Vha01hcCcpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZztcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgb2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1hcHMsIHNldHMsIGFuZCB3ZWFrbWFwcy4gKi9cbnZhciBtYXBDdG9yU3RyaW5nID0gTWFwID8gZnVuY1RvU3RyaW5nLmNhbGwoTWFwKSA6ICcnLFxuICAgIHNldEN0b3JTdHJpbmcgPSBTZXQgPyBmdW5jVG9TdHJpbmcuY2FsbChTZXQpIDogJycsXG4gICAgd2Vha01hcEN0b3JTdHJpbmcgPSBXZWFrTWFwID8gZnVuY1RvU3RyaW5nLmNhbGwoV2Vha01hcCkgOiAnJztcblxuLyoqXG4gKiBHZXRzIHRoZSBgdG9TdHJpbmdUYWdgIG9mIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gZ2V0VGFnKHZhbHVlKSB7XG4gIHJldHVybiBvYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxuLy8gRmFsbGJhY2sgZm9yIElFIDExIHByb3ZpZGluZyBgdG9TdHJpbmdUYWdgIHZhbHVlcyBmb3IgbWFwcywgc2V0cywgYW5kIHdlYWttYXBzLlxuaWYgKChNYXAgJiYgZ2V0VGFnKG5ldyBNYXApICE9IG1hcFRhZykgfHxcbiAgICAoU2V0ICYmIGdldFRhZyhuZXcgU2V0KSAhPSBzZXRUYWcpIHx8XG4gICAgKFdlYWtNYXAgJiYgZ2V0VGFnKG5ldyBXZWFrTWFwKSAhPSB3ZWFrTWFwVGFnKSkge1xuICBnZXRUYWcgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciByZXN1bHQgPSBvYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKSxcbiAgICAgICAgQ3RvciA9IHJlc3VsdCA9PSBvYmplY3RUYWcgPyB2YWx1ZS5jb25zdHJ1Y3RvciA6IG51bGwsXG4gICAgICAgIGN0b3JTdHJpbmcgPSB0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nID8gZnVuY1RvU3RyaW5nLmNhbGwoQ3RvcikgOiAnJztcblxuICAgIGlmIChjdG9yU3RyaW5nKSB7XG4gICAgICBzd2l0Y2ggKGN0b3JTdHJpbmcpIHtcbiAgICAgICAgY2FzZSBtYXBDdG9yU3RyaW5nOiByZXR1cm4gbWFwVGFnO1xuICAgICAgICBjYXNlIHNldEN0b3JTdHJpbmc6IHJldHVybiBzZXRUYWc7XG4gICAgICAgIGNhc2Ugd2Vha01hcEN0b3JTdHJpbmc6IHJldHVybiB3ZWFrTWFwVGFnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFRhZztcbiIsInZhciBiYXNlQ2FzdFBhdGggPSByZXF1aXJlKCcuL19iYXNlQ2FzdFBhdGgnKSxcbiAgICBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNJbmRleCA9IHJlcXVpcmUoJy4vX2lzSW5kZXgnKSxcbiAgICBpc0tleSA9IHJlcXVpcmUoJy4vX2lzS2V5JyksXG4gICAgaXNMZW5ndGggPSByZXF1aXJlKCcuL2lzTGVuZ3RoJyksXG4gICAgaXNTdHJpbmcgPSByZXF1aXJlKCcuL2lzU3RyaW5nJyksXG4gICAgbGFzdCA9IHJlcXVpcmUoJy4vbGFzdCcpLFxuICAgIHBhcmVudCA9IHJlcXVpcmUoJy4vX3BhcmVudCcpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgcGF0aGAgZXhpc3RzIG9uIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrIHByb3BlcnRpZXMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgaGFzRnVuYykge1xuICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IGhhc0Z1bmMob2JqZWN0LCBwYXRoKTtcbiAgaWYgKCFyZXN1bHQgJiYgIWlzS2V5KHBhdGgpKSB7XG4gICAgcGF0aCA9IGJhc2VDYXN0UGF0aChwYXRoKTtcbiAgICBvYmplY3QgPSBwYXJlbnQob2JqZWN0LCBwYXRoKTtcbiAgICBpZiAob2JqZWN0ICE9IG51bGwpIHtcbiAgICAgIHBhdGggPSBsYXN0KHBhdGgpO1xuICAgICAgcmVzdWx0ID0gaGFzRnVuYyhvYmplY3QsIHBhdGgpO1xuICAgIH1cbiAgfVxuICB2YXIgbGVuZ3RoID0gb2JqZWN0ID8gb2JqZWN0Lmxlbmd0aCA6IHVuZGVmaW5lZDtcbiAgcmV0dXJuIHJlc3VsdCB8fCAoXG4gICAgISFsZW5ndGggJiYgaXNMZW5ndGgobGVuZ3RoKSAmJiBpc0luZGV4KHBhdGgsIGxlbmd0aCkgJiZcbiAgICAoaXNBcnJheShvYmplY3QpIHx8IGlzU3RyaW5nKG9iamVjdCkgfHwgaXNBcmd1bWVudHMob2JqZWN0KSlcbiAgKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNQYXRoO1xuIiwidmFyIGhhc2hIYXMgPSByZXF1aXJlKCcuL19oYXNoSGFzJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBoYXNoIFRoZSBoYXNoIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoRGVsZXRlKGhhc2gsIGtleSkge1xuICByZXR1cm4gaGFzaEhhcyhoYXNoLCBrZXkpICYmIGRlbGV0ZSBoYXNoW2tleV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaERlbGV0ZTtcbiIsInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEdldHMgdGhlIGhhc2ggdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gaGFzaCBUaGUgaGFzaCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBoYXNoR2V0KGhhc2gsIGtleSkge1xuICBpZiAobmF0aXZlQ3JlYXRlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGhhc2hba2V5XTtcbiAgICByZXR1cm4gcmVzdWx0ID09PSBIQVNIX1VOREVGSU5FRCA/IHVuZGVmaW5lZCA6IHJlc3VsdDtcbiAgfVxuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChoYXNoLCBrZXkpID8gaGFzaFtrZXldIDogdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hHZXQ7XG4iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgaGFzaCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gaGFzaCBUaGUgaGFzaCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoSGFzKGhhc2gsIGtleSkge1xuICByZXR1cm4gbmF0aXZlQ3JlYXRlID8gaGFzaFtrZXldICE9PSB1bmRlZmluZWQgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGhhc2gsIGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaEhhcztcbiIsInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKipcbiAqIFNldHMgdGhlIGhhc2ggYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IGhhc2ggVGhlIGhhc2ggdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKi9cbmZ1bmN0aW9uIGhhc2hTZXQoaGFzaCwga2V5LCB2YWx1ZSkge1xuICBoYXNoW2tleV0gPSAobmF0aXZlQ3JlYXRlICYmIHZhbHVlID09PSB1bmRlZmluZWQpID8gSEFTSF9VTkRFRklORUQgOiB2YWx1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoU2V0O1xuIiwidmFyIGJhc2VUaW1lcyA9IHJlcXVpcmUoJy4vX2Jhc2VUaW1lcycpLFxuICAgIGlzQXJndW1lbnRzID0gcmVxdWlyZSgnLi9pc0FyZ3VtZW50cycpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0xlbmd0aCA9IHJlcXVpcmUoJy4vaXNMZW5ndGgnKSxcbiAgICBpc1N0cmluZyA9IHJlcXVpcmUoJy4vaXNTdHJpbmcnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIGluZGV4IGtleXMgZm9yIGBvYmplY3RgIHZhbHVlcyBvZiBhcnJheXMsXG4gKiBgYXJndW1lbnRzYCBvYmplY3RzLCBhbmQgc3RyaW5ncywgb3RoZXJ3aXNlIGBudWxsYCBpcyByZXR1cm5lZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fG51bGx9IFJldHVybnMgaW5kZXgga2V5cywgZWxzZSBgbnVsbGAuXG4gKi9cbmZ1bmN0aW9uIGluZGV4S2V5cyhvYmplY3QpIHtcbiAgdmFyIGxlbmd0aCA9IG9iamVjdCA/IG9iamVjdC5sZW5ndGggOiB1bmRlZmluZWQ7XG4gIGlmIChpc0xlbmd0aChsZW5ndGgpICYmXG4gICAgICAoaXNBcnJheShvYmplY3QpIHx8IGlzU3RyaW5nKG9iamVjdCkgfHwgaXNBcmd1bWVudHMob2JqZWN0KSkpIHtcbiAgICByZXR1cm4gYmFzZVRpbWVzKGxlbmd0aCwgU3RyaW5nKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbmRleEtleXM7XG4iLCIvKipcbiAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIGBOYU5gIGlzIGZvdW5kIGluIGBhcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzZWFyY2guXG4gKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgYE5hTmAsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gaW5kZXhPZk5hTihhcnJheSwgZnJvbUluZGV4LCBmcm9tUmlnaHQpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIGluZGV4ID0gZnJvbUluZGV4ICsgKGZyb21SaWdodCA/IDAgOiAtMSk7XG5cbiAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICB2YXIgb3RoZXIgPSBhcnJheVtpbmRleF07XG4gICAgaWYgKG90aGVyICE9PSBvdGhlcikge1xuICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5kZXhPZk5hTjtcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgYW4gYXJyYXkgY2xvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gKi9cbmZ1bmN0aW9uIGluaXRDbG9uZUFycmF5KGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBhcnJheS5jb25zdHJ1Y3RvcihsZW5ndGgpO1xuXG4gIC8vIEFkZCBwcm9wZXJ0aWVzIGFzc2lnbmVkIGJ5IGBSZWdFeHAjZXhlY2AuXG4gIGlmIChsZW5ndGggJiYgdHlwZW9mIGFycmF5WzBdID09ICdzdHJpbmcnICYmIGhhc093blByb3BlcnR5LmNhbGwoYXJyYXksICdpbmRleCcpKSB7XG4gICAgcmVzdWx0LmluZGV4ID0gYXJyYXkuaW5kZXg7XG4gICAgcmVzdWx0LmlucHV0ID0gYXJyYXkuaW5wdXQ7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbml0Q2xvbmVBcnJheTtcbiIsInZhciBjbG9uZUFycmF5QnVmZmVyID0gcmVxdWlyZSgnLi9fY2xvbmVBcnJheUJ1ZmZlcicpLFxuICAgIGNsb25lTWFwID0gcmVxdWlyZSgnLi9fY2xvbmVNYXAnKSxcbiAgICBjbG9uZVJlZ0V4cCA9IHJlcXVpcmUoJy4vX2Nsb25lUmVnRXhwJyksXG4gICAgY2xvbmVTZXQgPSByZXF1aXJlKCcuL19jbG9uZVNldCcpLFxuICAgIGNsb25lU3ltYm9sID0gcmVxdWlyZSgnLi9fY2xvbmVTeW1ib2wnKSxcbiAgICBjbG9uZVR5cGVkQXJyYXkgPSByZXF1aXJlKCcuL19jbG9uZVR5cGVkQXJyYXknKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGJvb2xUYWcgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxudmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuLyoqXG4gKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUgYmFzZWQgb24gaXRzIGB0b1N0cmluZ1RhZ2AuXG4gKlxuICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gb25seSBzdXBwb3J0cyBjbG9uaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAqIGBCb29sZWFuYCwgYERhdGVgLCBgRXJyb3JgLCBgTnVtYmVyYCwgYFJlZ0V4cGAsIG9yIGBTdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSBgdG9TdHJpbmdUYWdgIG9mIHRoZSBvYmplY3QgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gKi9cbmZ1bmN0aW9uIGluaXRDbG9uZUJ5VGFnKG9iamVjdCwgdGFnLCBpc0RlZXApIHtcbiAgdmFyIEN0b3IgPSBvYmplY3QuY29uc3RydWN0b3I7XG4gIHN3aXRjaCAodGFnKSB7XG4gICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgIHJldHVybiBjbG9uZUFycmF5QnVmZmVyKG9iamVjdCk7XG5cbiAgICBjYXNlIGJvb2xUYWc6XG4gICAgY2FzZSBkYXRlVGFnOlxuICAgICAgcmV0dXJuIG5ldyBDdG9yKCtvYmplY3QpO1xuXG4gICAgY2FzZSBmbG9hdDMyVGFnOiBjYXNlIGZsb2F0NjRUYWc6XG4gICAgY2FzZSBpbnQ4VGFnOiBjYXNlIGludDE2VGFnOiBjYXNlIGludDMyVGFnOlxuICAgIGNhc2UgdWludDhUYWc6IGNhc2UgdWludDhDbGFtcGVkVGFnOiBjYXNlIHVpbnQxNlRhZzogY2FzZSB1aW50MzJUYWc6XG4gICAgICByZXR1cm4gY2xvbmVUeXBlZEFycmF5KG9iamVjdCwgaXNEZWVwKTtcblxuICAgIGNhc2UgbWFwVGFnOlxuICAgICAgcmV0dXJuIGNsb25lTWFwKG9iamVjdCk7XG5cbiAgICBjYXNlIG51bWJlclRhZzpcbiAgICBjYXNlIHN0cmluZ1RhZzpcbiAgICAgIHJldHVybiBuZXcgQ3RvcihvYmplY3QpO1xuXG4gICAgY2FzZSByZWdleHBUYWc6XG4gICAgICByZXR1cm4gY2xvbmVSZWdFeHAob2JqZWN0KTtcblxuICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgcmV0dXJuIGNsb25lU2V0KG9iamVjdCk7XG5cbiAgICBjYXNlIHN5bWJvbFRhZzpcbiAgICAgIHJldHVybiBjbG9uZVN5bWJvbChvYmplY3QpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5pdENsb25lQnlUYWc7XG4iLCJ2YXIgYmFzZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX2Jhc2VDcmVhdGUnKSxcbiAgICBpc1Byb3RvdHlwZSA9IHJlcXVpcmUoJy4vX2lzUHJvdG90eXBlJyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuXG4vKipcbiAqIEluaXRpYWxpemVzIGFuIG9iamVjdCBjbG9uZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gKi9cbmZ1bmN0aW9uIGluaXRDbG9uZU9iamVjdChvYmplY3QpIHtcbiAgcmV0dXJuICh0eXBlb2Ygb2JqZWN0LmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgIWlzUHJvdG90eXBlKG9iamVjdCkpXG4gICAgPyBiYXNlQ3JlYXRlKGdldFByb3RvdHlwZU9mKG9iamVjdCkpXG4gICAgOiB7fTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbml0Q2xvbmVPYmplY3Q7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgaG9zdCBvYmplY3QgaW4gSUUgPCA5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgaG9zdCBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNIb3N0T2JqZWN0KHZhbHVlKSB7XG4gIC8vIE1hbnkgaG9zdCBvYmplY3RzIGFyZSBgT2JqZWN0YCBvYmplY3RzIHRoYXQgY2FuIGNvZXJjZSB0byBzdHJpbmdzXG4gIC8vIGRlc3BpdGUgaGF2aW5nIGltcHJvcGVybHkgZGVmaW5lZCBgdG9TdHJpbmdgIG1ldGhvZHMuXG4gIHZhciByZXN1bHQgPSBmYWxzZTtcbiAgaWYgKHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlLnRvU3RyaW5nICE9ICdmdW5jdGlvbicpIHtcbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gISEodmFsdWUgKyAnJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzSG9zdE9iamVjdDtcbiIsIi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgdW5zaWduZWQgaW50ZWdlciB2YWx1ZXMuICovXG52YXIgcmVJc1VpbnQgPSAvXig/OjB8WzEtOV1cXGQqKSQvO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBpbmRleC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD1NQVhfU0FGRV9JTlRFR0VSXSBUaGUgdXBwZXIgYm91bmRzIG9mIGEgdmFsaWQgaW5kZXguXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGluZGV4LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsIGxlbmd0aCkge1xuICB2YWx1ZSA9ICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgfHwgcmVJc1VpbnQudGVzdCh2YWx1ZSkpID8gK3ZhbHVlIDogLTE7XG4gIGxlbmd0aCA9IGxlbmd0aCA9PSBudWxsID8gTUFYX1NBRkVfSU5URUdFUiA6IGxlbmd0aDtcbiAgcmV0dXJuIHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPCBsZW5ndGg7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNJbmRleDtcbiIsInZhciBlcSA9IHJlcXVpcmUoJy4vZXEnKSxcbiAgICBpc0FycmF5TGlrZSA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2UnKSxcbiAgICBpc0luZGV4ID0gcmVxdWlyZSgnLi9faXNJbmRleCcpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpO1xuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSB2YWx1ZSBhcmd1bWVudC5cbiAqIEBwYXJhbSB7Kn0gaW5kZXggVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBpbmRleCBvciBrZXkgYXJndW1lbnQuXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIG9iamVjdCBhcmd1bWVudC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNJdGVyYXRlZUNhbGwodmFsdWUsIGluZGV4LCBvYmplY3QpIHtcbiAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciB0eXBlID0gdHlwZW9mIGluZGV4O1xuICBpZiAodHlwZSA9PSAnbnVtYmVyJ1xuICAgICAgPyAoaXNBcnJheUxpa2Uob2JqZWN0KSAmJiBpc0luZGV4KGluZGV4LCBvYmplY3QubGVuZ3RoKSlcbiAgICAgIDogKHR5cGUgPT0gJ3N0cmluZycgJiYgaW5kZXggaW4gb2JqZWN0KSkge1xuICAgIHJldHVybiBlcShvYmplY3RbaW5kZXhdLCB2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzSXRlcmF0ZWVDYWxsO1xuIiwidmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKTtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggcHJvcGVydHkgbmFtZXMgd2l0aGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHJlSXNEZWVwUHJvcCA9IC9cXC58XFxbKD86W15bXFxdXSp8KFtcIiddKSg/Oig/IVxcMSlbXlxcXFxdfFxcXFwuKSo/XFwxKVxcXS8sXG4gICAgcmVJc1BsYWluUHJvcCA9IC9eXFx3KiQvO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSBhbmQgbm90IGEgcHJvcGVydHkgcGF0aC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0eSBuYW1lLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5KHZhbHVlLCBvYmplY3QpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiAhaXNBcnJheSh2YWx1ZSkgJiZcbiAgICAocmVJc1BsYWluUHJvcC50ZXN0KHZhbHVlKSB8fCAhcmVJc0RlZXBQcm9wLnRlc3QodmFsdWUpIHx8XG4gICAgICAob2JqZWN0ICE9IG51bGwgJiYgdmFsdWUgaW4gT2JqZWN0KG9iamVjdCkpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0tleTtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHVzZSBhcyB1bmlxdWUgb2JqZWN0IGtleS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0tleWFibGUodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiB0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nIHx8XG4gICAgKHR5cGUgPT0gJ3N0cmluZycgJiYgdmFsdWUgIT0gJ19fcHJvdG9fXycpIHx8IHZhbHVlID09IG51bGw7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNLZXlhYmxlO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBwcm90b3R5cGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7XG4gIHZhciBDdG9yID0gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IsXG4gICAgICBwcm90byA9ICh0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IucHJvdG90eXBlKSB8fCBvYmplY3RQcm90bztcblxuICByZXR1cm4gdmFsdWUgPT09IHByb3RvO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzUHJvdG90eXBlO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciBzdHJpY3QgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaWYgc3VpdGFibGUgZm9yIHN0cmljdFxuICogIGVxdWFsaXR5IGNvbXBhcmlzb25zLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaWN0Q29tcGFyYWJsZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IHZhbHVlICYmICFpc09iamVjdCh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNTdHJpY3RDb21wYXJhYmxlO1xuIiwiLyoqXG4gKiBDb252ZXJ0cyBgaXRlcmF0b3JgIHRvIGFuIGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gaXRlcmF0b3IgVGhlIGl0ZXJhdG9yIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gaXRlcmF0b3JUb0FycmF5KGl0ZXJhdG9yKSB7XG4gIHZhciBkYXRhLFxuICAgICAgcmVzdWx0ID0gW107XG5cbiAgd2hpbGUgKCEoZGF0YSA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgIHJlc3VsdC5wdXNoKGRhdGEudmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXRlcmF0b3JUb0FycmF5O1xuIiwidmFyIEhhc2ggPSByZXF1aXJlKCcuL19IYXNoJyksXG4gICAgTWFwID0gcmVxdWlyZSgnLi9fTWFwJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKi9cbmZ1bmN0aW9uIG1hcENsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICdoYXNoJzogbmV3IEhhc2gsXG4gICAgJ21hcCc6IE1hcCA/IG5ldyBNYXAgOiBbXSxcbiAgICAnc3RyaW5nJzogbmV3IEhhc2hcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDbGVhcjtcbiIsInZhciBNYXAgPSByZXF1aXJlKCcuL19NYXAnKSxcbiAgICBhc3NvY0RlbGV0ZSA9IHJlcXVpcmUoJy4vX2Fzc29jRGVsZXRlJyksXG4gICAgaGFzaERlbGV0ZSA9IHJlcXVpcmUoJy4vX2hhc2hEZWxldGUnKSxcbiAgICBpc0tleWFibGUgPSByZXF1aXJlKCcuL19pc0tleWFibGUnKTtcblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcERlbGV0ZShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAoaXNLZXlhYmxlKGtleSkpIHtcbiAgICByZXR1cm4gaGFzaERlbGV0ZSh0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8gZGF0YS5zdHJpbmcgOiBkYXRhLmhhc2gsIGtleSk7XG4gIH1cbiAgcmV0dXJuIE1hcCA/IGRhdGEubWFwWydkZWxldGUnXShrZXkpIDogYXNzb2NEZWxldGUoZGF0YS5tYXAsIGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwRGVsZXRlO1xuIiwidmFyIE1hcCA9IHJlcXVpcmUoJy4vX01hcCcpLFxuICAgIGFzc29jR2V0ID0gcmVxdWlyZSgnLi9fYXNzb2NHZXQnKSxcbiAgICBoYXNoR2V0ID0gcmVxdWlyZSgnLi9faGFzaEdldCcpLFxuICAgIGlzS2V5YWJsZSA9IHJlcXVpcmUoJy4vX2lzS2V5YWJsZScpO1xuXG4vKipcbiAqIEdldHMgdGhlIG1hcCB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbWFwR2V0KGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIGlmIChpc0tleWFibGUoa2V5KSkge1xuICAgIHJldHVybiBoYXNoR2V0KHR5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyBkYXRhLnN0cmluZyA6IGRhdGEuaGFzaCwga2V5KTtcbiAgfVxuICByZXR1cm4gTWFwID8gZGF0YS5tYXAuZ2V0KGtleSkgOiBhc3NvY0dldChkYXRhLm1hcCwga2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBHZXQ7XG4iLCJ2YXIgTWFwID0gcmVxdWlyZSgnLi9fTWFwJyksXG4gICAgYXNzb2NIYXMgPSByZXF1aXJlKCcuL19hc3NvY0hhcycpLFxuICAgIGhhc2hIYXMgPSByZXF1aXJlKCcuL19oYXNoSGFzJyksXG4gICAgaXNLZXlhYmxlID0gcmVxdWlyZSgnLi9faXNLZXlhYmxlJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwSGFzKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIGlmIChpc0tleWFibGUoa2V5KSkge1xuICAgIHJldHVybiBoYXNoSGFzKHR5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyBkYXRhLnN0cmluZyA6IGRhdGEuaGFzaCwga2V5KTtcbiAgfVxuICByZXR1cm4gTWFwID8gZGF0YS5tYXAuaGFzKGtleSkgOiBhc3NvY0hhcyhkYXRhLm1hcCwga2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBIYXM7XG4iLCJ2YXIgTWFwID0gcmVxdWlyZSgnLi9fTWFwJyksXG4gICAgYXNzb2NTZXQgPSByZXF1aXJlKCcuL19hc3NvY1NldCcpLFxuICAgIGhhc2hTZXQgPSByZXF1aXJlKCcuL19oYXNoU2V0JyksXG4gICAgaXNLZXlhYmxlID0gcmVxdWlyZSgnLi9faXNLZXlhYmxlJyk7XG5cbi8qKlxuICogU2V0cyB0aGUgbWFwIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG1hcCBjYWNoZSBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIG1hcFNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKGlzS2V5YWJsZShrZXkpKSB7XG4gICAgaGFzaFNldCh0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8gZGF0YS5zdHJpbmcgOiBkYXRhLmhhc2gsIGtleSwgdmFsdWUpO1xuICB9IGVsc2UgaWYgKE1hcCkge1xuICAgIGRhdGEubWFwLnNldChrZXksIHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICBhc3NvY1NldChkYXRhLm1hcCwga2V5LCB2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwU2V0O1xuIiwiLyoqXG4gKiBDb252ZXJ0cyBgbWFwYCB0byBhbiBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gbWFwVG9BcnJheShtYXApIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShtYXAuc2l6ZSk7XG5cbiAgbWFwLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgIHJlc3VsdFsrK2luZGV4XSA9IFtrZXksIHZhbHVlXTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwVG9BcnJheTtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIG5hdGl2ZUNyZWF0ZSA9IGdldE5hdGl2ZShPYmplY3QsICdjcmVhdGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBuYXRpdmVDcmVhdGU7XG4iLCJ2YXIgYmFzZVNsaWNlID0gcmVxdWlyZSgnLi9fYmFzZVNsaWNlJyksXG4gICAgZ2V0ID0gcmVxdWlyZSgnLi9nZXQnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBwYXJlbnQgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fSBwYXRoIFRoZSBwYXRoIHRvIGdldCB0aGUgcGFyZW50IHZhbHVlIG9mLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHBhcmVudCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gcGFyZW50KG9iamVjdCwgcGF0aCkge1xuICByZXR1cm4gcGF0aC5sZW5ndGggPT0gMSA/IG9iamVjdCA6IGdldChvYmplY3QsIGJhc2VTbGljZShwYXRoLCAwLCAtMSkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcmVudDtcbiIsInZhciBjaGVja0dsb2JhbCA9IHJlcXVpcmUoJy4vX2NoZWNrR2xvYmFsJyk7XG5cbi8qKiBVc2VkIHRvIGRldGVybWluZSBpZiB2YWx1ZXMgYXJlIG9mIHRoZSBsYW5ndWFnZSB0eXBlIGBPYmplY3RgLiAqL1xudmFyIG9iamVjdFR5cGVzID0ge1xuICAnZnVuY3Rpb24nOiB0cnVlLFxuICAnb2JqZWN0JzogdHJ1ZVxufTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IChvYmplY3RUeXBlc1t0eXBlb2YgZXhwb3J0c10gJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSlcbiAgPyBleHBvcnRzXG4gIDogdW5kZWZpbmVkO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IChvYmplY3RUeXBlc1t0eXBlb2YgbW9kdWxlXSAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSlcbiAgPyBtb2R1bGVcbiAgOiB1bmRlZmluZWQ7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IGNoZWNrR2xvYmFsKGZyZWVFeHBvcnRzICYmIGZyZWVNb2R1bGUgJiYgdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gY2hlY2tHbG9iYWwob2JqZWN0VHlwZXNbdHlwZW9mIHNlbGZdICYmIHNlbGYpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHdpbmRvd2AuICovXG52YXIgZnJlZVdpbmRvdyA9IGNoZWNrR2xvYmFsKG9iamVjdFR5cGVzW3R5cGVvZiB3aW5kb3ddICYmIHdpbmRvdyk7XG5cbi8qKiBEZXRlY3QgYHRoaXNgIGFzIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHRoaXNHbG9iYWwgPSBjaGVja0dsb2JhbChvYmplY3RUeXBlc1t0eXBlb2YgdGhpc10gJiYgdGhpcyk7XG5cbi8qKlxuICogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC5cbiAqXG4gKiBUaGUgYHRoaXNgIHZhbHVlIGlzIHVzZWQgaWYgaXQncyB0aGUgZ2xvYmFsIG9iamVjdCB0byBhdm9pZCBHcmVhc2Vtb25rZXknc1xuICogcmVzdHJpY3RlZCBgd2luZG93YCBvYmplY3QsIG90aGVyd2lzZSB0aGUgYHdpbmRvd2Agb2JqZWN0IGlzIHVzZWQuXG4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fFxuICAoKGZyZWVXaW5kb3cgIT09ICh0aGlzR2xvYmFsICYmIHRoaXNHbG9iYWwud2luZG93KSkgJiYgZnJlZVdpbmRvdykgfHxcbiAgICBmcmVlU2VsZiB8fCB0aGlzR2xvYmFsIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gcm9vdDtcbiIsIi8qKlxuICogQ29udmVydHMgYHNldGAgdG8gYW4gYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIHNldFRvQXJyYXkoc2V0KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUpO1xuXG4gIHNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmVzdWx0WysraW5kZXhdID0gdmFsdWU7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldFRvQXJyYXk7XG4iLCIvKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIHN0YWNrLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIFN0YWNrXG4gKi9cbmZ1bmN0aW9uIHN0YWNrQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSB7ICdhcnJheSc6IFtdLCAnbWFwJzogbnVsbCB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrQ2xlYXI7XG4iLCJ2YXIgYXNzb2NEZWxldGUgPSByZXF1aXJlKCcuL19hc3NvY0RlbGV0ZScpO1xuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBzdGFjay5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzdGFja0RlbGV0ZShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgYXJyYXkgPSBkYXRhLmFycmF5O1xuXG4gIHJldHVybiBhcnJheSA/IGFzc29jRGVsZXRlKGFycmF5LCBrZXkpIDogZGF0YS5tYXBbJ2RlbGV0ZSddKGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tEZWxldGU7XG4iLCJ2YXIgYXNzb2NHZXQgPSByZXF1aXJlKCcuL19hc3NvY0dldCcpO1xuXG4vKipcbiAqIEdldHMgdGhlIHN0YWNrIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBzdGFja0dldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgYXJyYXkgPSBkYXRhLmFycmF5O1xuXG4gIHJldHVybiBhcnJheSA/IGFzc29jR2V0KGFycmF5LCBrZXkpIDogZGF0YS5tYXAuZ2V0KGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tHZXQ7XG4iLCJ2YXIgYXNzb2NIYXMgPSByZXF1aXJlKCcuL19hc3NvY0hhcycpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIHN0YWNrIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc3RhY2tIYXMoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGFycmF5ID0gZGF0YS5hcnJheTtcblxuICByZXR1cm4gYXJyYXkgPyBhc3NvY0hhcyhhcnJheSwga2V5KSA6IGRhdGEubWFwLmhhcyhrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrSGFzO1xuIiwidmFyIE1hcENhY2hlID0gcmVxdWlyZSgnLi9fTWFwQ2FjaGUnKSxcbiAgICBhc3NvY1NldCA9IHJlcXVpcmUoJy4vX2Fzc29jU2V0Jyk7XG5cbi8qKiBVc2VkIGFzIHRoZSBzaXplIHRvIGVuYWJsZSBsYXJnZSBhcnJheSBvcHRpbWl6YXRpb25zLiAqL1xudmFyIExBUkdFX0FSUkFZX1NJWkUgPSAyMDA7XG5cbi8qKlxuICogU2V0cyB0aGUgc3RhY2sgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgc3RhY2sgY2FjaGUgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBzdGFja1NldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGFycmF5ID0gZGF0YS5hcnJheTtcblxuICBpZiAoYXJyYXkpIHtcbiAgICBpZiAoYXJyYXkubGVuZ3RoIDwgKExBUkdFX0FSUkFZX1NJWkUgLSAxKSkge1xuICAgICAgYXNzb2NTZXQoYXJyYXksIGtleSwgdmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXRhLmFycmF5ID0gbnVsbDtcbiAgICAgIGRhdGEubWFwID0gbmV3IE1hcENhY2hlKGFycmF5KTtcbiAgICB9XG4gIH1cbiAgdmFyIG1hcCA9IGRhdGEubWFwO1xuICBpZiAobWFwKSB7XG4gICAgbWFwLnNldChrZXksIHZhbHVlKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja1NldDtcbiIsInZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4vdG9TdHJpbmcnKTtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggcHJvcGVydHkgbmFtZXMgd2l0aGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHJlUHJvcE5hbWUgPSAvW14uW1xcXV0rfFxcWyg/OigtP1xcZCsoPzpcXC5cXGQrKT8pfChbXCInXSkoKD86KD8hXFwyKVteXFxcXF18XFxcXC4pKj8pXFwyKVxcXS9nO1xuXG4vKiogVXNlZCB0byBtYXRjaCBiYWNrc2xhc2hlcyBpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciByZUVzY2FwZUNoYXIgPSAvXFxcXChcXFxcKT8vZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICovXG5mdW5jdGlvbiBzdHJpbmdUb1BhdGgoc3RyaW5nKSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdG9TdHJpbmcoc3RyaW5nKS5yZXBsYWNlKHJlUHJvcE5hbWUsIGZ1bmN0aW9uKG1hdGNoLCBudW1iZXIsIHF1b3RlLCBzdHJpbmcpIHtcbiAgICByZXN1bHQucHVzaChxdW90ZSA/IHN0cmluZy5yZXBsYWNlKHJlRXNjYXBlQ2hhciwgJyQxJykgOiAobnVtYmVyIHx8IG1hdGNoKSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0cmluZ1RvUGF0aDtcbiIsInZhciBjb3B5T2JqZWN0V2l0aCA9IHJlcXVpcmUoJy4vX2NvcHlPYmplY3RXaXRoJyksXG4gICAgY3JlYXRlQXNzaWduZXIgPSByZXF1aXJlKCcuL19jcmVhdGVBc3NpZ25lcicpLFxuICAgIGtleXNJbiA9IHJlcXVpcmUoJy4va2V5c0luJyk7XG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25JbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2hcbiAqIGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgYXNzaWduZWQgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYFxuICogYXNzaWdubWVudCBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkXG4gKiB3aXRoIGZpdmUgYXJndW1lbnRzOiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlKS5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQGFsaWFzIGV4dGVuZFdpdGhcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7Li4uT2JqZWN0fSBzb3VyY2VzIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gKiAgIHJldHVybiBfLmlzVW5kZWZpbmVkKG9ialZhbHVlKSA/IHNyY1ZhbHVlIDogb2JqVmFsdWU7XG4gKiB9XG4gKlxuICogdmFyIGRlZmF1bHRzID0gXy5wYXJ0aWFsUmlnaHQoXy5hc3NpZ25JbldpdGgsIGN1c3RvbWl6ZXIpO1xuICpcbiAqIGRlZmF1bHRzKHsgJ2EnOiAxIH0sIHsgJ2InOiAyIH0sIHsgJ2EnOiAzIH0pO1xuICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gKi9cbnZhciBhc3NpZ25JbldpdGggPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpIHtcbiAgY29weU9iamVjdFdpdGgoc291cmNlLCBrZXlzSW4oc291cmNlKSwgb2JqZWN0LCBjdXN0b21pemVyKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGFzc2lnbkluV2l0aDtcbiIsIi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBgdmFsdWVgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmV0dXJuIGZyb20gdGhlIG5ldyBmdW5jdGlvbi5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAndXNlcic6ICdmcmVkJyB9O1xuICogdmFyIGdldHRlciA9IF8uY29uc3RhbnQob2JqZWN0KTtcbiAqXG4gKiBnZXR0ZXIoKSA9PT0gb2JqZWN0O1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBjb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnN0YW50O1xuIiwidmFyIGFwcGx5ID0gcmVxdWlyZSgnLi9fYXBwbHknKSxcbiAgICBhc3NpZ25JbkRlZmF1bHRzID0gcmVxdWlyZSgnLi9fYXNzaWduSW5EZWZhdWx0cycpLFxuICAgIGFzc2lnbkluV2l0aCA9IHJlcXVpcmUoJy4vYXNzaWduSW5XaXRoJyksXG4gICAgcmVzdCA9IHJlcXVpcmUoJy4vcmVzdCcpO1xuXG4vKipcbiAqIEFzc2lnbnMgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9mIHNvdXJjZSBvYmplY3RzIHRvIHRoZVxuICogZGVzdGluYXRpb24gb2JqZWN0IGZvciBhbGwgZGVzdGluYXRpb24gcHJvcGVydGllcyB0aGF0IHJlc29sdmUgdG8gYHVuZGVmaW5lZGAuXG4gKiBTb3VyY2Ugb2JqZWN0cyBhcmUgYXBwbGllZCBmcm9tIGxlZnQgdG8gcmlnaHQuIE9uY2UgYSBwcm9wZXJ0eSBpcyBzZXQsXG4gKiBhZGRpdGlvbmFsIHZhbHVlcyBvZiB0aGUgc2FtZSBwcm9wZXJ0eSBhcmUgaWdub3JlZC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmRlZmF1bHRzKHsgJ3VzZXInOiAnYmFybmV5JyB9LCB7ICdhZ2UnOiAzNiB9LCB7ICd1c2VyJzogJ2ZyZWQnIH0pO1xuICogLy8gPT4geyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfVxuICovXG52YXIgZGVmYXVsdHMgPSByZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgYXJncy5wdXNoKHVuZGVmaW5lZCwgYXNzaWduSW5EZWZhdWx0cyk7XG4gIHJldHVybiBhcHBseShhc3NpZ25JbldpdGgsIHVuZGVmaW5lZCwgYXJncyk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0cztcbiIsIi8qKlxuICogUGVyZm9ybXMgYSBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlIGVxdWl2YWxlbnQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICd1c2VyJzogJ2ZyZWQnIH07XG4gKiB2YXIgb3RoZXIgPSB7ICd1c2VyJzogJ2ZyZWQnIH07XG4gKlxuICogXy5lcShvYmplY3QsIG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcShvYmplY3QsIG90aGVyKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcSgnYScsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcSgnYScsIE9iamVjdCgnYScpKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcShOYU4sIE5hTik7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGVxKHZhbHVlLCBvdGhlcikge1xuICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlcTtcbiIsInZhciBlc2NhcGVIdG1sQ2hhciA9IHJlcXVpcmUoJy4vX2VzY2FwZUh0bWxDaGFyJyksXG4gICAgdG9TdHJpbmcgPSByZXF1aXJlKCcuL3RvU3RyaW5nJyk7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIEhUTUwgZW50aXRpZXMgYW5kIEhUTUwgY2hhcmFjdGVycy4gKi9cbnZhciByZVVuZXNjYXBlZEh0bWwgPSAvWyY8PlwiJ2BdL2csXG4gICAgcmVIYXNVbmVzY2FwZWRIdG1sID0gUmVnRXhwKHJlVW5lc2NhcGVkSHRtbC5zb3VyY2UpO1xuXG4vKipcbiAqIENvbnZlcnRzIHRoZSBjaGFyYWN0ZXJzIFwiJlwiLCBcIjxcIiwgXCI+XCIsICdcIicsIFwiJ1wiLCBhbmQgXCJcXGBcIiBpbiBgc3RyaW5nYCB0b1xuICogdGhlaXIgY29ycmVzcG9uZGluZyBIVE1MIGVudGl0aWVzLlxuICpcbiAqICoqTm90ZToqKiBObyBvdGhlciBjaGFyYWN0ZXJzIGFyZSBlc2NhcGVkLiBUbyBlc2NhcGUgYWRkaXRpb25hbFxuICogY2hhcmFjdGVycyB1c2UgYSB0aGlyZC1wYXJ0eSBsaWJyYXJ5IGxpa2UgW19oZV9dKGh0dHBzOi8vbXRocy5iZS9oZSkuXG4gKlxuICogVGhvdWdoIHRoZSBcIj5cIiBjaGFyYWN0ZXIgaXMgZXNjYXBlZCBmb3Igc3ltbWV0cnksIGNoYXJhY3RlcnMgbGlrZVxuICogXCI+XCIgYW5kIFwiL1wiIGRvbid0IG5lZWQgZXNjYXBpbmcgaW4gSFRNTCBhbmQgaGF2ZSBubyBzcGVjaWFsIG1lYW5pbmdcbiAqIHVubGVzcyB0aGV5J3JlIHBhcnQgb2YgYSB0YWcgb3IgdW5xdW90ZWQgYXR0cmlidXRlIHZhbHVlLlxuICogU2VlIFtNYXRoaWFzIEJ5bmVucydzIGFydGljbGVdKGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9hbWJpZ3VvdXMtYW1wZXJzYW5kcylcbiAqICh1bmRlciBcInNlbWktcmVsYXRlZCBmdW4gZmFjdFwiKSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIEJhY2t0aWNrcyBhcmUgZXNjYXBlZCBiZWNhdXNlIGluIElFIDwgOSwgdGhleSBjYW4gYnJlYWsgb3V0IG9mXG4gKiBhdHRyaWJ1dGUgdmFsdWVzIG9yIEhUTUwgY29tbWVudHMuIFNlZSBbIzU5XShodHRwczovL2h0bWw1c2VjLm9yZy8jNTkpLFxuICogWyMxMDJdKGh0dHBzOi8vaHRtbDVzZWMub3JnLyMxMDIpLCBbIzEwOF0oaHR0cHM6Ly9odG1sNXNlYy5vcmcvIzEwOCksIGFuZFxuICogWyMxMzNdKGh0dHBzOi8vaHRtbDVzZWMub3JnLyMxMzMpIG9mIHRoZSBbSFRNTDUgU2VjdXJpdHkgQ2hlYXRzaGVldF0oaHR0cHM6Ly9odG1sNXNlYy5vcmcvKVxuICogZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBXaGVuIHdvcmtpbmcgd2l0aCBIVE1MIHlvdSBzaG91bGQgYWx3YXlzIFtxdW90ZSBhdHRyaWJ1dGUgdmFsdWVzXShodHRwOi8vd29ua28uY29tL3Bvc3QvaHRtbC1lc2NhcGluZylcbiAqIHRvIHJlZHVjZSBYU1MgdmVjdG9ycy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IFN0cmluZ1xuICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gZXNjYXBlLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBzdHJpbmcuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uZXNjYXBlKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICogLy8gPT4gJ2ZyZWQsIGJhcm5leSwgJmFtcDsgcGViYmxlcydcbiAqL1xuZnVuY3Rpb24gZXNjYXBlKHN0cmluZykge1xuICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICByZXR1cm4gKHN0cmluZyAmJiByZUhhc1VuZXNjYXBlZEh0bWwudGVzdChzdHJpbmcpKVxuICAgID8gc3RyaW5nLnJlcGxhY2UocmVVbmVzY2FwZWRIdG1sLCBlc2NhcGVIdG1sQ2hhcilcbiAgICA6IHN0cmluZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlc2NhcGU7XG4iLCJ2YXIgYXJyYXlGaWx0ZXIgPSByZXF1aXJlKCcuL19hcnJheUZpbHRlcicpLFxuICAgIGJhc2VGaWx0ZXIgPSByZXF1aXJlKCcuL19iYXNlRmlsdGVyJyksXG4gICAgYmFzZUl0ZXJhdGVlID0gcmVxdWlyZSgnLi9fYmFzZUl0ZXJhdGVlJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpO1xuXG4vKipcbiAqIEl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gLCByZXR1cm5pbmcgYW4gYXJyYXkgb2YgYWxsIGVsZW1lbnRzXG4gKiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAqICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciB1c2VycyA9IFtcbiAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICogXTtcbiAqXG4gKiBfLmZpbHRlcih1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gKlxuICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8uZmlsdGVyKHVzZXJzLCB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gKlxuICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICogXy5maWx0ZXIodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gKlxuICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gKiBfLmZpbHRlcih1c2VycywgJ2FjdGl2ZScpO1xuICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICovXG5mdW5jdGlvbiBmaWx0ZXIoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RmlsdGVyIDogYmFzZUZpbHRlcjtcbiAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgYmFzZUl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZpbHRlcjtcbiIsInZhciBiYXNlRWFjaCA9IHJlcXVpcmUoJy4vX2Jhc2VFYWNoJyksXG4gICAgYmFzZUZpbmQgPSByZXF1aXJlKCcuL19iYXNlRmluZCcpLFxuICAgIGJhc2VGaW5kSW5kZXggPSByZXF1aXJlKCcuL19iYXNlRmluZEluZGV4JyksXG4gICAgYmFzZUl0ZXJhdGVlID0gcmVxdWlyZSgnLi9fYmFzZUl0ZXJhdGVlJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpO1xuXG4vKipcbiAqIEl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gLCByZXR1cm5pbmcgdGhlIGZpcnN0IGVsZW1lbnRcbiAqIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOlxuICogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2VhcmNoLlxuICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8c3RyaW5nfSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWF0Y2hlZCBlbGVtZW50LCBlbHNlIGB1bmRlZmluZWRgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgdXNlcnMgPSBbXG4gKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfSxcbiAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FnZSc6IDEsICAnYWN0aXZlJzogdHJ1ZSB9XG4gKiBdO1xuICpcbiAqIF8uZmluZCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hZ2UgPCA0MDsgfSk7XG4gKiAvLyA9PiBvYmplY3QgZm9yICdiYXJuZXknXG4gKlxuICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8uZmluZCh1c2VycywgeyAnYWdlJzogMSwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gKiAvLyA9PiBvYmplY3QgZm9yICdwZWJibGVzJ1xuICpcbiAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8uZmluZCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICogLy8gPT4gb2JqZWN0IGZvciAnZnJlZCdcbiAqXG4gKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8uZmluZCh1c2VycywgJ2FjdGl2ZScpO1xuICogLy8gPT4gb2JqZWN0IGZvciAnYmFybmV5J1xuICovXG5mdW5jdGlvbiBmaW5kKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICBwcmVkaWNhdGUgPSBiYXNlSXRlcmF0ZWUocHJlZGljYXRlLCAzKTtcbiAgaWYgKGlzQXJyYXkoY29sbGVjdGlvbikpIHtcbiAgICB2YXIgaW5kZXggPSBiYXNlRmluZEluZGV4KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSk7XG4gICAgcmV0dXJuIGluZGV4ID4gLTEgPyBjb2xsZWN0aW9uW2luZGV4XSA6IHVuZGVmaW5lZDtcbiAgfVxuICByZXR1cm4gYmFzZUZpbmQoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBiYXNlRWFjaCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZmluZDtcbiIsInZhciBiYXNlRmluZEluZGV4ID0gcmVxdWlyZSgnLi9fYmFzZUZpbmRJbmRleCcpLFxuICAgIGJhc2VJdGVyYXRlZSA9IHJlcXVpcmUoJy4vX2Jhc2VJdGVyYXRlZScpO1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZpcnN0XG4gKiBlbGVtZW50IGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciBpbnN0ZWFkIG9mIHRoZSBlbGVtZW50IGl0c2VsZi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IEFycmF5XG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2VhcmNoLlxuICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8c3RyaW5nfSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZm91bmQgZWxlbWVudCwgZWxzZSBgLTFgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgdXNlcnMgPSBbXG4gKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiBmYWxzZSB9LFxuICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IHRydWUgfVxuICogXTtcbiAqXG4gKiBfLmZpbmRJbmRleCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby51c2VyID09ICdiYXJuZXknOyB9KTtcbiAqIC8vID0+IDBcbiAqXG4gKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICogXy5maW5kSW5kZXgodXNlcnMsIHsgJ3VzZXInOiAnZnJlZCcsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAqIC8vID0+IDFcbiAqXG4gKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gKiBfLmZpbmRJbmRleCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICogLy8gPT4gMFxuICpcbiAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICogXy5maW5kSW5kZXgodXNlcnMsICdhY3RpdmUnKTtcbiAqIC8vID0+IDJcbiAqL1xuZnVuY3Rpb24gZmluZEluZGV4KGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgPyBiYXNlRmluZEluZGV4KGFycmF5LCBiYXNlSXRlcmF0ZWUocHJlZGljYXRlLCAzKSlcbiAgICA6IC0xO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZpbmRJbmRleDtcbiIsInZhciBiYXNlRmxhdHRlbiA9IHJlcXVpcmUoJy4vX2Jhc2VGbGF0dGVuJyksXG4gICAgbWFwID0gcmVxdWlyZSgnLi9tYXAnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIGZsYXR0ZW5lZCB2YWx1ZXMgYnkgcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gXG4gKiB0aHJvdWdoIGBpdGVyYXRlZWAgYW5kIGNvbmNhdGluZyBpdHMgcmVzdWx0IHRvIHRoZSBvdGhlciBtYXBwZWQgdmFsdWVzLlxuICogVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIGR1cGxpY2F0ZShuKSB7XG4gKiAgIHJldHVybiBbbiwgbl07XG4gKiB9XG4gKlxuICogXy5mbGF0TWFwKFsxLCAyXSwgZHVwbGljYXRlKTtcbiAqIC8vID0+IFsxLCAxLCAyLCAyXVxuICovXG5mdW5jdGlvbiBmbGF0TWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCAxKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmbGF0TWFwO1xuIiwidmFyIGFycmF5RWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5RWFjaCcpLFxuICAgIGJhc2VDYXN0RnVuY3Rpb24gPSByZXF1aXJlKCcuL19iYXNlQ2FzdEZ1bmN0aW9uJyksXG4gICAgYmFzZUVhY2ggPSByZXF1aXJlKCcuL19iYXNlRWFjaCcpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKTtcblxuLyoqXG4gKiBJdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCBpbnZva2luZyBgaXRlcmF0ZWVgIGZvciBlYWNoIGVsZW1lbnQuXG4gKiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICpcbiAqICoqTm90ZToqKiBBcyB3aXRoIG90aGVyIFwiQ29sbGVjdGlvbnNcIiBtZXRob2RzLCBvYmplY3RzIHdpdGggYSBcImxlbmd0aFwiIHByb3BlcnR5XG4gKiBhcmUgaXRlcmF0ZWQgbGlrZSBhcnJheXMuIFRvIGF2b2lkIHRoaXMgYmVoYXZpb3IgdXNlIGBfLmZvckluYCBvciBgXy5mb3JPd25gXG4gKiBmb3Igb2JqZWN0IGl0ZXJhdGlvbi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQGFsaWFzIGVhY2hcbiAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfKFsxLCAyXSkuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICogICBjb25zb2xlLmxvZyh2YWx1ZSk7XG4gKiB9KTtcbiAqIC8vID0+IGxvZ3MgYDFgIHRoZW4gYDJgXG4gKlxuICogXy5mb3JFYWNoKHsgJ2EnOiAxLCAnYic6IDIgfSwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICogICBjb25zb2xlLmxvZyhrZXkpO1xuICogfSk7XG4gKiAvLyA9PiBsb2dzICdhJyB0aGVuICdiJyAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICovXG5mdW5jdGlvbiBmb3JFYWNoKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gIHJldHVybiAodHlwZW9mIGl0ZXJhdGVlID09ICdmdW5jdGlvbicgJiYgaXNBcnJheShjb2xsZWN0aW9uKSlcbiAgICA/IGFycmF5RWFjaChjb2xsZWN0aW9uLCBpdGVyYXRlZSlcbiAgICA6IGJhc2VFYWNoKGNvbGxlY3Rpb24sIGJhc2VDYXN0RnVuY3Rpb24oaXRlcmF0ZWUpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmb3JFYWNoO1xuIiwidmFyIGJhc2VHZXQgPSByZXF1aXJlKCcuL19iYXNlR2V0Jyk7XG5cbi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLiBJZiB0aGUgcmVzb2x2ZWQgdmFsdWUgaXNcbiAqIGB1bmRlZmluZWRgIHRoZSBgZGVmYXVsdFZhbHVlYCBpcyB1c2VkIGluIGl0cyBwbGFjZS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEBwYXJhbSB7Kn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHJldHVybmVkIGlmIHRoZSByZXNvbHZlZCB2YWx1ZSBpcyBgdW5kZWZpbmVkYC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAqXG4gKiBfLmdldChvYmplY3QsICdhWzBdLmIuYycpO1xuICogLy8gPT4gM1xuICpcbiAqIF8uZ2V0KG9iamVjdCwgWydhJywgJzAnLCAnYicsICdjJ10pO1xuICogLy8gPT4gM1xuICpcbiAqIF8uZ2V0KG9iamVjdCwgJ2EuYi5jJywgJ2RlZmF1bHQnKTtcbiAqIC8vID0+ICdkZWZhdWx0J1xuICovXG5mdW5jdGlvbiBnZXQob2JqZWN0LCBwYXRoLCBkZWZhdWx0VmFsdWUpIHtcbiAgdmFyIHJlc3VsdCA9IG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICByZXR1cm4gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBkZWZhdWx0VmFsdWUgOiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0O1xuIiwidmFyIGJhc2VIYXNJbiA9IHJlcXVpcmUoJy4vX2Jhc2VIYXNJbicpLFxuICAgIGhhc1BhdGggPSByZXF1aXJlKCcuL19oYXNQYXRoJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBwYXRoYCBpcyBhIGRpcmVjdCBvciBpbmhlcml0ZWQgcHJvcGVydHkgb2YgYG9iamVjdGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IF8uY3JlYXRlKHsgJ2EnOiBfLmNyZWF0ZSh7ICdiJzogXy5jcmVhdGUoeyAnYyc6IDMgfSkgfSkgfSk7XG4gKlxuICogXy5oYXNJbihvYmplY3QsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5oYXNJbihvYmplY3QsICdhLmIuYycpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaGFzSW4ob2JqZWN0LCBbJ2EnLCAnYicsICdjJ10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaGFzSW4ob2JqZWN0LCAnYicpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaGFzSW4ob2JqZWN0LCBwYXRoKSB7XG4gIHJldHVybiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgYmFzZUhhc0luKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNJbjtcbiIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZmlyc3QgYXJndW1lbnQgZ2l2ZW4gdG8gaXQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0geyp9IHZhbHVlIEFueSB2YWx1ZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICd1c2VyJzogJ2ZyZWQnIH07XG4gKlxuICogXy5pZGVudGl0eShvYmplY3QpID09PSBvYmplY3Q7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGlkZW50aXR5KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpZGVudGl0eTtcbiIsInZhciBiYXNlSW5SYW5nZSA9IHJlcXVpcmUoJy4vX2Jhc2VJblJhbmdlJyksXG4gICAgdG9OdW1iZXIgPSByZXF1aXJlKCcuL3RvTnVtYmVyJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBuYCBpcyBiZXR3ZWVuIGBzdGFydGAgYW5kIHVwIHRvIGJ1dCBub3QgaW5jbHVkaW5nLCBgZW5kYC4gSWZcbiAqIGBlbmRgIGlzIG5vdCBzcGVjaWZpZWQgaXQncyBzZXQgdG8gYHN0YXJ0YCB3aXRoIGBzdGFydGAgdGhlbiBzZXQgdG8gYDBgLlxuICogSWYgYHN0YXJ0YCBpcyBncmVhdGVyIHRoYW4gYGVuZGAgdGhlIHBhcmFtcyBhcmUgc3dhcHBlZCB0byBzdXBwb3J0XG4gKiBuZWdhdGl2ZSByYW5nZXMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBOdW1iZXJcbiAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjaGVjay5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG51bWJlcmAgaXMgaW4gdGhlIHJhbmdlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaW5SYW5nZSgzLCAyLCA0KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmluUmFuZ2UoNCwgOCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pblJhbmdlKDQsIDIpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmluUmFuZ2UoMiwgMik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaW5SYW5nZSgxLjIsIDIpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaW5SYW5nZSg1LjIsIDQpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmluUmFuZ2UoLTMsIC0yLCAtNik7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGluUmFuZ2UobnVtYmVyLCBzdGFydCwgZW5kKSB7XG4gIHN0YXJ0ID0gdG9OdW1iZXIoc3RhcnQpIHx8IDA7XG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuZCA9IHN0YXJ0O1xuICAgIHN0YXJ0ID0gMDtcbiAgfSBlbHNlIHtcbiAgICBlbmQgPSB0b051bWJlcihlbmQpIHx8IDA7XG4gIH1cbiAgbnVtYmVyID0gdG9OdW1iZXIobnVtYmVyKTtcbiAgcmV0dXJuIGJhc2VJblJhbmdlKG51bWJlciwgc3RhcnQsIGVuZCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5SYW5nZTtcbiIsInZhciBiYXNlSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Jhc2VJbmRleE9mJyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyksXG4gICAgaXNTdHJpbmcgPSByZXF1aXJlKCcuL2lzU3RyaW5nJyksXG4gICAgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi90b0ludGVnZXInKSxcbiAgICB2YWx1ZXMgPSByZXF1aXJlKCcuL3ZhbHVlcycpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlTWF4ID0gTWF0aC5tYXg7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgaW4gYGNvbGxlY3Rpb25gLiBJZiBgY29sbGVjdGlvbmAgaXMgYSBzdHJpbmcgaXQncyBjaGVja2VkXG4gKiBmb3IgYSBzdWJzdHJpbmcgb2YgYHZhbHVlYCwgb3RoZXJ3aXNlIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBpcyB1c2VkIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gSWYgYGZyb21JbmRleGAgaXMgbmVnYXRpdmUsIGl0J3MgdXNlZCBhc1xuICogdGhlIG9mZnNldCBmcm9tIHRoZSBlbmQgb2YgYGNvbGxlY3Rpb25gLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNlYXJjaC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIGZ1bmN0aW9ucyBsaWtlIGBfLnJlZHVjZWAuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmluY2x1ZGVzKFsxLCAyLCAzXSwgMSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pbmNsdWRlcyhbMSwgMiwgM10sIDEsIDIpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmluY2x1ZGVzKHsgJ3VzZXInOiAnZnJlZCcsICdhZ2UnOiA0MCB9LCAnZnJlZCcpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaW5jbHVkZXMoJ3BlYmJsZXMnLCAnZWInKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gaW5jbHVkZXMoY29sbGVjdGlvbiwgdmFsdWUsIGZyb21JbmRleCwgZ3VhcmQpIHtcbiAgY29sbGVjdGlvbiA9IGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pID8gY29sbGVjdGlvbiA6IHZhbHVlcyhjb2xsZWN0aW9uKTtcbiAgZnJvbUluZGV4ID0gKGZyb21JbmRleCAmJiAhZ3VhcmQpID8gdG9JbnRlZ2VyKGZyb21JbmRleCkgOiAwO1xuXG4gIHZhciBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcbiAgaWYgKGZyb21JbmRleCA8IDApIHtcbiAgICBmcm9tSW5kZXggPSBuYXRpdmVNYXgobGVuZ3RoICsgZnJvbUluZGV4LCAwKTtcbiAgfVxuICByZXR1cm4gaXNTdHJpbmcoY29sbGVjdGlvbilcbiAgICA/IChmcm9tSW5kZXggPD0gbGVuZ3RoICYmIGNvbGxlY3Rpb24uaW5kZXhPZih2YWx1ZSwgZnJvbUluZGV4KSA+IC0xKVxuICAgIDogKCEhbGVuZ3RoICYmIGJhc2VJbmRleE9mKGNvbGxlY3Rpb24sIHZhbHVlLCBmcm9tSW5kZXgpID4gLTEpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluY2x1ZGVzO1xuIiwidmFyIGlzQXJyYXlMaWtlT2JqZWN0ID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZU9iamVjdCcpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBvYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhbiBgYXJndW1lbnRzYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGNvcnJlY3RseSBjbGFzc2lmaWVkLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcmd1bWVudHModmFsdWUpIHtcbiAgLy8gU2FmYXJpIDguMSBpbmNvcnJlY3RseSBtYWtlcyBgYXJndW1lbnRzLmNhbGxlZWAgZW51bWVyYWJsZSBpbiBzdHJpY3QgbW9kZS5cbiAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KHZhbHVlKSAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnY2FsbGVlJykgJiZcbiAgICAoIXByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsICdjYWxsZWUnKSB8fCBvYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKSA9PSBhcmdzVGFnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0FyZ3VtZW50cztcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHR5cGUge0Z1bmN0aW9ufVxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgY29ycmVjdGx5IGNsYXNzaWZpZWQsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0FycmF5O1xuIiwidmFyIGdldExlbmd0aCA9IHJlcXVpcmUoJy4vX2dldExlbmd0aCcpLFxuICAgIGlzRnVuY3Rpb24gPSByZXF1aXJlKCcuL2lzRnVuY3Rpb24nKSxcbiAgICBpc0xlbmd0aCA9IHJlcXVpcmUoJy4vaXNMZW5ndGgnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gKiBub3QgYSBmdW5jdGlvbiBhbmQgaGFzIGEgYHZhbHVlLmxlbmd0aGAgdGhhdCdzIGFuIGludGVnZXIgZ3JlYXRlciB0aGFuIG9yXG4gKiBlcXVhbCB0byBgMGAgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoJ2FiYycpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIGlzTGVuZ3RoKGdldExlbmd0aCh2YWx1ZSkpICYmICFpc0Z1bmN0aW9uKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0FycmF5TGlrZTtcbiIsInZhciBpc0FycmF5TGlrZSA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2UnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNBcnJheUxpa2VgIGV4Y2VwdCB0aGF0IGl0IGFsc28gY2hlY2tzIGlmIGB2YWx1ZWBcbiAqIGlzIGFuIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXktbGlrZSBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGlzQXJyYXlMaWtlKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0FycmF5TGlrZU9iamVjdDtcbiIsInZhciBjb25zdGFudCA9IHJlcXVpcmUoJy4vY29uc3RhbnQnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogVXNlZCB0byBkZXRlcm1pbmUgaWYgdmFsdWVzIGFyZSBvZiB0aGUgbGFuZ3VhZ2UgdHlwZSBgT2JqZWN0YC4gKi9cbnZhciBvYmplY3RUeXBlcyA9IHtcbiAgJ2Z1bmN0aW9uJzogdHJ1ZSxcbiAgJ29iamVjdCc6IHRydWVcbn07XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSAob2JqZWN0VHlwZXNbdHlwZW9mIGV4cG9ydHNdICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUpXG4gID8gZXhwb3J0c1xuICA6IHVuZGVmaW5lZDtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSAob2JqZWN0VHlwZXNbdHlwZW9mIG1vZHVsZV0gJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUpXG4gID8gbW9kdWxlXG4gIDogdW5kZWZpbmVkO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSAoZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzKVxuICA/IGZyZWVFeHBvcnRzXG4gIDogdW5kZWZpbmVkO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBCdWZmZXIgPSBtb2R1bGVFeHBvcnRzID8gcm9vdC5CdWZmZXIgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IEJ1ZmZlcigyKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0J1ZmZlcihuZXcgVWludDhBcnJheSgyKSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNCdWZmZXIgPSAhQnVmZmVyID8gY29uc3RhbnQoZmFsc2UpIDogZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgQnVmZmVyO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0J1ZmZlcjtcbiIsInZhciBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyksXG4gICAgaXNGdW5jdGlvbiA9IHJlcXVpcmUoJy4vaXNGdW5jdGlvbicpLFxuICAgIGlzU3RyaW5nID0gcmVxdWlyZSgnLi9pc1N0cmluZycpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFuIGVtcHR5IGNvbGxlY3Rpb24gb3Igb2JqZWN0LiBBIHZhbHVlIGlzIGNvbnNpZGVyZWRcbiAqIGVtcHR5IGlmIGl0J3MgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LCBhcnJheSwgc3RyaW5nLCBvciBqUXVlcnktbGlrZSBjb2xsZWN0aW9uXG4gKiB3aXRoIGEgbGVuZ3RoIG9mIGAwYCBvciBoYXMgbm8gb3duIGVudW1lcmFibGUgcHJvcGVydGllcy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZW1wdHksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0VtcHR5KG51bGwpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNFbXB0eSh0cnVlKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRW1wdHkoMSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0VtcHR5KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNFbXB0eSh7ICdhJzogMSB9KTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRW1wdHkodmFsdWUpIHtcbiAgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSAmJlxuICAgICAgKGlzQXJyYXkodmFsdWUpIHx8IGlzU3RyaW5nKHZhbHVlKSB8fFxuICAgICAgICBpc0Z1bmN0aW9uKHZhbHVlLnNwbGljZSkgfHwgaXNBcmd1bWVudHModmFsdWUpKSkge1xuICAgIHJldHVybiAhdmFsdWUubGVuZ3RoO1xuICB9XG4gIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRW1wdHk7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0Jyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBvYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgY29ycmVjdGx5IGNsYXNzaWZpZWQsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0Z1bmN0aW9uKF8pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAvLyBpbiBTYWZhcmkgOCB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheSBhbmQgd2VhayBtYXAgY29uc3RydWN0b3JzLFxuICAvLyBhbmQgUGhhbnRvbUpTIDEuOSB3aGljaCByZXR1cm5zICdmdW5jdGlvbicgZm9yIGBOb2RlTGlzdGAgaW5zdGFuY2VzLlxuICB2YXIgdGFnID0gaXNPYmplY3QodmFsdWUpID8gb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJztcbiAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNGdW5jdGlvbjtcbiIsIi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBsZW5ndGguXG4gKlxuICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gaXMgbG9vc2VseSBiYXNlZCBvbiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtdG9sZW5ndGgpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGxlbmd0aCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzTGVuZ3RoKDMpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNMZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoSW5maW5pdHkpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKCczJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0xlbmd0aCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmXG4gICAgdmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTGVuZ3RoO1xuIiwidmFyIGlzTnVtYmVyID0gcmVxdWlyZSgnLi9pc051bWJlcicpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGBOYU5gLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBub3QgdGhlIHNhbWUgYXMgW2Bpc05hTmBdKGh0dHBzOi8vZXM1LmdpdGh1Yi5pby8jeDE1LjEuMi40KVxuICogd2hpY2ggcmV0dXJucyBgdHJ1ZWAgZm9yIGB1bmRlZmluZWRgIGFuZCBvdGhlciBub24tbnVtZXJpYyB2YWx1ZXMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGBOYU5gLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNOYU4oTmFOKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTmFOKG5ldyBOdW1iZXIoTmFOKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogaXNOYU4odW5kZWZpbmVkKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTmFOKHVuZGVmaW5lZCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc05hTih2YWx1ZSkge1xuICAvLyBBbiBgTmFOYCBwcmltaXRpdmUgaXMgdGhlIG9ubHkgdmFsdWUgdGhhdCBpcyBub3QgZXF1YWwgdG8gaXRzZWxmLlxuICAvLyBQZXJmb3JtIHRoZSBgdG9TdHJpbmdUYWdgIGNoZWNrIGZpcnN0IHRvIGF2b2lkIGVycm9ycyB3aXRoIHNvbWUgQWN0aXZlWCBvYmplY3RzIGluIElFLlxuICByZXR1cm4gaXNOdW1iZXIodmFsdWUpICYmIHZhbHVlICE9ICt2YWx1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc05hTjtcbiIsInZhciBpc0Z1bmN0aW9uID0gcmVxdWlyZSgnLi9pc0Z1bmN0aW9uJyksXG4gICAgaXNIb3N0T2JqZWN0ID0gcmVxdWlyZSgnLi9faXNIb3N0T2JqZWN0JyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGAgW3N5bnRheCBjaGFyYWN0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1wYXR0ZXJucykuICovXG52YXIgcmVSZWdFeHBDaGFyID0gL1tcXFxcXiQuKis/KClbXFxde318XS9nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaG9zdCBjb25zdHJ1Y3RvcnMgKFNhZmFyaSA+IDUpLiAqL1xudmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBGdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovXG52YXIgcmVJc05hdGl2ZSA9IFJlZ0V4cCgnXicgK1xuICBmdW5jVG9TdHJpbmcuY2FsbChoYXNPd25Qcm9wZXJ0eSkucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgJyQxLio/JykgKyAnJCdcbik7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24uXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNOYXRpdmUoQXJyYXkucHJvdG90eXBlLnB1c2gpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNOYXRpdmUoXyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc05hdGl2ZSh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICByZXR1cm4gcmVJc05hdGl2ZS50ZXN0KGZ1bmNUb1N0cmluZy5jYWxsKHZhbHVlKSk7XG4gIH1cbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiZcbiAgICAoaXNIb3N0T2JqZWN0KHZhbHVlKSA/IHJlSXNOYXRpdmUgOiByZUlzSG9zdEN0b3IpLnRlc3QodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTmF0aXZlO1xuIiwidmFyIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgb2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYE51bWJlcmAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAqXG4gKiAqKk5vdGU6KiogVG8gZXhjbHVkZSBgSW5maW5pdHlgLCBgLUluZmluaXR5YCwgYW5kIGBOYU5gLCB3aGljaCBhcmUgY2xhc3NpZmllZFxuICogYXMgbnVtYmVycywgdXNlIHRoZSBgXy5pc0Zpbml0ZWAgbWV0aG9kLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBjb3JyZWN0bHkgY2xhc3NpZmllZCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzTnVtYmVyKDMpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNOdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc051bWJlcihJbmZpbml0eSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc051bWJlcignMycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNOdW1iZXIodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyB8fFxuICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpID09IG51bWJlclRhZyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNOdW1iZXI7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZSBbbGFuZ3VhZ2UgdHlwZV0oaHR0cHM6Ly9lczUuZ2l0aHViLmlvLyN4OCkgb2YgYE9iamVjdGAuXG4gKiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gISF2YWx1ZSAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0O1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuICEhdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0TGlrZTtcbiIsInZhciBpc0hvc3RPYmplY3QgPSByZXF1aXJlKCcuL19pc0hvc3RPYmplY3QnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XSc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBGdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGluZmVyIHRoZSBgT2JqZWN0YCBjb25zdHJ1Y3Rvci4gKi9cbnZhciBvYmplY3RDdG9yU3RyaW5nID0gZnVuY1RvU3RyaW5nLmNhbGwoT2JqZWN0KTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgb2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIHRoYXQgaXMsIGFuIG9iamVjdCBjcmVhdGVkIGJ5IHRoZVxuICogYE9iamVjdGAgY29uc3RydWN0b3Igb3Igb25lIHdpdGggYSBgW1tQcm90b3R5cGVdXWAgb2YgYG51bGxgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiB9XG4gKlxuICogXy5pc1BsYWluT2JqZWN0KG5ldyBGb28pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KHsgJ3gnOiAwLCAneSc6IDAgfSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3RMaWtlKHZhbHVlKSB8fFxuICAgICAgb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgIT0gb2JqZWN0VGFnIHx8IGlzSG9zdE9iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHByb3RvID0gZ2V0UHJvdG90eXBlT2YodmFsdWUpO1xuICBpZiAocHJvdG8gPT09IG51bGwpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB2YXIgQ3RvciA9IHByb3RvLmNvbnN0cnVjdG9yO1xuICByZXR1cm4gKHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiZcbiAgICBDdG9yIGluc3RhbmNlb2YgQ3RvciAmJiBmdW5jVG9TdHJpbmcuY2FsbChDdG9yKSA9PSBvYmplY3RDdG9yU3RyaW5nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1BsYWluT2JqZWN0O1xuIiwidmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXSc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZSBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTdHJpbmdgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGNvcnJlY3RseSBjbGFzc2lmaWVkLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNTdHJpbmcoJ2FiYycpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTdHJpbmcoMSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8XG4gICAgKCFpc0FycmF5KHZhbHVlKSAmJiBpc09iamVjdExpa2UodmFsdWUpICYmIG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpID09IHN0cmluZ1RhZyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNTdHJpbmc7XG4iLCJ2YXIgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBvYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBjb3JyZWN0bHkgY2xhc3NpZmllZCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8XG4gICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1N5bWJvbDtcbiIsInZhciBpc0xlbmd0aCA9IHJlcXVpcmUoJy4vaXNMZW5ndGgnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZmxvYXQzMlRhZyA9ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgIGZsb2F0NjRUYWcgPSAnW29iamVjdCBGbG9hdDY0QXJyYXldJyxcbiAgICBpbnQ4VGFnID0gJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgaW50MTZUYWcgPSAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgaW50MzJUYWcgPSAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgdWludDhUYWcgPSAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgdWludDhDbGFtcGVkVGFnID0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICB1aW50MTZUYWcgPSAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgIHVpbnQzMlRhZyA9ICdbb2JqZWN0IFVpbnQzMkFycmF5XSc7XG5cbi8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIG9mIHR5cGVkIGFycmF5cy4gKi9cbnZhciB0eXBlZEFycmF5VGFncyA9IHt9O1xudHlwZWRBcnJheVRhZ3NbZmxvYXQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1tmbG9hdDY0VGFnXSA9XG50eXBlZEFycmF5VGFnc1tpbnQ4VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2ludDE2VGFnXSA9XG50eXBlZEFycmF5VGFnc1tpbnQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50OFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbdWludDhDbGFtcGVkVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQxNlRhZ10gPVxudHlwZWRBcnJheVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG50eXBlZEFycmF5VGFnc1thcmdzVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2FycmF5VGFnXSA9XG50eXBlZEFycmF5VGFnc1thcnJheUJ1ZmZlclRhZ10gPSB0eXBlZEFycmF5VGFnc1tib29sVGFnXSA9XG50eXBlZEFycmF5VGFnc1tkYXRlVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Vycm9yVGFnXSA9XG50eXBlZEFycmF5VGFnc1tmdW5jVGFnXSA9IHR5cGVkQXJyYXlUYWdzW21hcFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbbnVtYmVyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW29iamVjdFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbcmVnZXhwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3NldFRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbc3RyaW5nVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZSBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIHR5cGVkIGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBjb3JyZWN0bHkgY2xhc3NpZmllZCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzVHlwZWRBcnJheShuZXcgVWludDhBcnJheSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkoW10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNUeXBlZEFycmF5KHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmXG4gICAgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhIXR5cGVkQXJyYXlUYWdzW29iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1R5cGVkQXJyYXk7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGB1bmRlZmluZWRgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgdW5kZWZpbmVkYCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzVW5kZWZpbmVkKHZvaWQgMCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1VuZGVmaW5lZChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzVW5kZWZpbmVkO1xuIiwidmFyIGJhc2VIYXMgPSByZXF1aXJlKCcuL19iYXNlSGFzJyksXG4gICAgYmFzZUtleXMgPSByZXF1aXJlKCcuL19iYXNlS2V5cycpLFxuICAgIGluZGV4S2V5cyA9IHJlcXVpcmUoJy4vX2luZGV4S2V5cycpLFxuICAgIGlzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZScpLFxuICAgIGlzSW5kZXggPSByZXF1aXJlKCcuL19pc0luZGV4JyksXG4gICAgaXNQcm90b3R5cGUgPSByZXF1aXJlKCcuL19pc1Byb3RvdHlwZScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICpcbiAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLiBTZWUgdGhlXG4gKiBbRVMgc3BlY10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtb2JqZWN0LmtleXMpXG4gKiBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmtleXMobmV3IEZvbyk7XG4gKiAvLyA9PiBbJ2EnLCAnYiddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKlxuICogXy5rZXlzKCdoaScpO1xuICogLy8gPT4gWycwJywgJzEnXVxuICovXG5mdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuICB2YXIgaXNQcm90byA9IGlzUHJvdG90eXBlKG9iamVjdCk7XG4gIGlmICghKGlzUHJvdG8gfHwgaXNBcnJheUxpa2Uob2JqZWN0KSkpIHtcbiAgICByZXR1cm4gYmFzZUtleXMob2JqZWN0KTtcbiAgfVxuICB2YXIgaW5kZXhlcyA9IGluZGV4S2V5cyhvYmplY3QpLFxuICAgICAgc2tpcEluZGV4ZXMgPSAhIWluZGV4ZXMsXG4gICAgICByZXN1bHQgPSBpbmRleGVzIHx8IFtdLFxuICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgaWYgKGJhc2VIYXMob2JqZWN0LCBrZXkpICYmXG4gICAgICAgICEoc2tpcEluZGV4ZXMgJiYgKGtleSA9PSAnbGVuZ3RoJyB8fCBpc0luZGV4KGtleSwgbGVuZ3RoKSkpICYmXG4gICAgICAgICEoaXNQcm90byAmJiBrZXkgPT0gJ2NvbnN0cnVjdG9yJykpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ga2V5cztcbiIsInZhciBiYXNlS2V5c0luID0gcmVxdWlyZSgnLi9fYmFzZUtleXNJbicpLFxuICAgIGluZGV4S2V5cyA9IHJlcXVpcmUoJy4vX2luZGV4S2V5cycpLFxuICAgIGlzSW5kZXggPSByZXF1aXJlKCcuL19pc0luZGV4JyksXG4gICAgaXNQcm90b3R5cGUgPSByZXF1aXJlKCcuL19pc1Byb3RvdHlwZScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gKlxuICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8ua2V5c0luKG5ldyBGb28pO1xuICogLy8gPT4gWydhJywgJ2InLCAnYyddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKi9cbmZ1bmN0aW9uIGtleXNJbihvYmplY3QpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBpc1Byb3RvID0gaXNQcm90b3R5cGUob2JqZWN0KSxcbiAgICAgIHByb3BzID0gYmFzZUtleXNJbihvYmplY3QpLFxuICAgICAgcHJvcHNMZW5ndGggPSBwcm9wcy5sZW5ndGgsXG4gICAgICBpbmRleGVzID0gaW5kZXhLZXlzKG9iamVjdCksXG4gICAgICBza2lwSW5kZXhlcyA9ICEhaW5kZXhlcyxcbiAgICAgIHJlc3VsdCA9IGluZGV4ZXMgfHwgW10sXG4gICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgcHJvcHNMZW5ndGgpIHtcbiAgICB2YXIga2V5ID0gcHJvcHNbaW5kZXhdO1xuICAgIGlmICghKHNraXBJbmRleGVzICYmIChrZXkgPT0gJ2xlbmd0aCcgfHwgaXNJbmRleChrZXksIGxlbmd0aCkpKSAmJlxuICAgICAgICAhKGtleSA9PSAnY29uc3RydWN0b3InICYmIChpc1Byb3RvIHx8ICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGtleXNJbjtcbiIsIi8qKlxuICogR2V0cyB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBBcnJheVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmxhc3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IDNcbiAqL1xuZnVuY3Rpb24gbGFzdChhcnJheSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwO1xuICByZXR1cm4gbGVuZ3RoID8gYXJyYXlbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGFzdDtcbiIsInZhciBhcnJheU1hcCA9IHJlcXVpcmUoJy4vX2FycmF5TWFwJyksXG4gICAgYmFzZUl0ZXJhdGVlID0gcmVxdWlyZSgnLi9fYmFzZUl0ZXJhdGVlJyksXG4gICAgYmFzZU1hcCA9IHJlcXVpcmUoJy4vX2Jhc2VNYXAnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB2YWx1ZXMgYnkgcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gIHRocm91Z2hcbiAqIGBpdGVyYXRlZWAuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOlxuICogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICpcbiAqIE1hbnkgbG9kYXNoIG1ldGhvZHMgYXJlIGd1YXJkZWQgdG8gd29yayBhcyBpdGVyYXRlZXMgZm9yIG1ldGhvZHMgbGlrZVxuICogYF8uZXZlcnlgLCBgXy5maWx0ZXJgLCBgXy5tYXBgLCBgXy5tYXBWYWx1ZXNgLCBgXy5yZWplY3RgLCBhbmQgYF8uc29tZWAuXG4gKlxuICogVGhlIGd1YXJkZWQgbWV0aG9kcyBhcmU6XG4gKiBgYXJ5YCwgYGN1cnJ5YCwgYGN1cnJ5UmlnaHRgLCBgZHJvcGAsIGBkcm9wUmlnaHRgLCBgZXZlcnlgLCBgZmlsbGAsXG4gKiBgaW52ZXJ0YCwgYHBhcnNlSW50YCwgYHJhbmRvbWAsIGByYW5nZWAsIGByYW5nZVJpZ2h0YCwgYHNsaWNlYCwgYHNvbWVgLFxuICogYHNvcnRCeWAsIGB0YWtlYCwgYHRha2VSaWdodGAsIGB0ZW1wbGF0ZWAsIGB0cmltYCwgYHRyaW1FbmRgLCBgdHJpbVN0YXJ0YCxcbiAqIGFuZCBgd29yZHNgXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxzdHJpbmd9IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICogICByZXR1cm4gbiAqIG47XG4gKiB9XG4gKlxuICogXy5tYXAoWzQsIDhdLCBzcXVhcmUpO1xuICogLy8gPT4gWzE2LCA2NF1cbiAqXG4gKiBfLm1hcCh7ICdhJzogNCwgJ2InOiA4IH0sIHNxdWFyZSk7XG4gKiAvLyA9PiBbMTYsIDY0XSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICpcbiAqIHZhciB1c2VycyA9IFtcbiAqICAgeyAndXNlcic6ICdiYXJuZXknIH0sXG4gKiAgIHsgJ3VzZXInOiAnZnJlZCcgfVxuICogXTtcbiAqXG4gKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8ubWFwKHVzZXJzLCAndXNlcicpO1xuICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCddXG4gKi9cbmZ1bmN0aW9uIG1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheU1hcCA6IGJhc2VNYXA7XG4gIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGJhc2VJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcDtcbiIsInZhciBNYXBDYWNoZSA9IHJlcXVpcmUoJy4vX01hcENhY2hlJyk7XG5cbi8qKiBVc2VkIGFzIHRoZSBgVHlwZUVycm9yYCBtZXNzYWdlIGZvciBcIkZ1bmN0aW9uc1wiIG1ldGhvZHMuICovXG52YXIgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG1lbW9pemVzIHRoZSByZXN1bHQgb2YgYGZ1bmNgLiBJZiBgcmVzb2x2ZXJgIGlzXG4gKiBwcm92aWRlZCBpdCBkZXRlcm1pbmVzIHRoZSBjYWNoZSBrZXkgZm9yIHN0b3JpbmcgdGhlIHJlc3VsdCBiYXNlZCBvbiB0aGVcbiAqIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uIEJ5IGRlZmF1bHQsIHRoZSBmaXJzdCBhcmd1bWVudFxuICogcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uIGlzIHVzZWQgYXMgdGhlIG1hcCBjYWNoZSBrZXkuIFRoZSBgZnVuY2BcbiAqIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIG1lbW9pemVkIGZ1bmN0aW9uLlxuICpcbiAqICoqTm90ZToqKiBUaGUgY2FjaGUgaXMgZXhwb3NlZCBhcyB0aGUgYGNhY2hlYCBwcm9wZXJ0eSBvbiB0aGUgbWVtb2l6ZWRcbiAqIGZ1bmN0aW9uLiBJdHMgY3JlYXRpb24gbWF5IGJlIGN1c3RvbWl6ZWQgYnkgcmVwbGFjaW5nIHRoZSBgXy5tZW1vaXplLkNhY2hlYFxuICogY29uc3RydWN0b3Igd2l0aCBvbmUgd2hvc2UgaW5zdGFuY2VzIGltcGxlbWVudCB0aGUgW2BNYXBgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1wcm9wZXJ0aWVzLW9mLXRoZS1tYXAtcHJvdG90eXBlLW9iamVjdClcbiAqIG1ldGhvZCBpbnRlcmZhY2Ugb2YgYGRlbGV0ZWAsIGBnZXRgLCBgaGFzYCwgYW5kIGBzZXRgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXNvbHZlcl0gVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgdGhlIGNhY2hlIGtleS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemluZyBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2MnOiAzLCAnZCc6IDQgfTtcbiAqXG4gKiB2YXIgdmFsdWVzID0gXy5tZW1vaXplKF8udmFsdWVzKTtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWzEsIDJdXG4gKlxuICogdmFsdWVzKG90aGVyKTtcbiAqIC8vID0+IFszLCA0XVxuICpcbiAqIG9iamVjdC5hID0gMjtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWzEsIDJdXG4gKlxuICogLy8gTW9kaWZ5IHRoZSByZXN1bHQgY2FjaGUuXG4gKiB2YWx1ZXMuY2FjaGUuc2V0KG9iamVjdCwgWydhJywgJ2InXSk7XG4gKiB2YWx1ZXMob2JqZWN0KTtcbiAqIC8vID0+IFsnYScsICdiJ11cbiAqXG4gKiAvLyBSZXBsYWNlIGBfLm1lbW9pemUuQ2FjaGVgLlxuICogXy5tZW1vaXplLkNhY2hlID0gV2Vha01hcDtcbiAqL1xuZnVuY3Rpb24gbWVtb2l6ZShmdW5jLCByZXNvbHZlcikge1xuICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJyB8fCAocmVzb2x2ZXIgJiYgdHlwZW9mIHJlc29sdmVyICE9ICdmdW5jdGlvbicpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICB9XG4gIHZhciBtZW1vaXplZCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICBrZXkgPSByZXNvbHZlciA/IHJlc29sdmVyLmFwcGx5KHRoaXMsIGFyZ3MpIDogYXJnc1swXSxcbiAgICAgICAgY2FjaGUgPSBtZW1vaXplZC5jYWNoZTtcblxuICAgIGlmIChjYWNoZS5oYXMoa2V5KSkge1xuICAgICAgcmV0dXJuIGNhY2hlLmdldChrZXkpO1xuICAgIH1cbiAgICB2YXIgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICBtZW1vaXplZC5jYWNoZSA9IGNhY2hlLnNldChrZXksIHJlc3VsdCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgbWVtb2l6ZWQuY2FjaGUgPSBuZXcgbWVtb2l6ZS5DYWNoZTtcbiAgcmV0dXJuIG1lbW9pemVkO1xufVxuXG4vLyBBc3NpZ24gY2FjaGUgdG8gYF8ubWVtb2l6ZWAuXG5tZW1vaXplLkNhY2hlID0gTWFwQ2FjaGU7XG5cbm1vZHVsZS5leHBvcnRzID0gbWVtb2l6ZTtcbiIsInZhciBiYXNlTWVyZ2UgPSByZXF1aXJlKCcuL19iYXNlTWVyZ2UnKSxcbiAgICBjcmVhdGVBc3NpZ25lciA9IHJlcXVpcmUoJy4vX2NyZWF0ZUFzc2lnbmVyJyk7XG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25gIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IG1lcmdlcyBvd24gYW5kXG4gKiBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9mIHNvdXJjZSBvYmplY3RzIGludG8gdGhlIGRlc3RpbmF0aW9uXG4gKiBvYmplY3QuIFNvdXJjZSBwcm9wZXJ0aWVzIHRoYXQgcmVzb2x2ZSB0byBgdW5kZWZpbmVkYCBhcmUgc2tpcHBlZCBpZiBhXG4gKiBkZXN0aW5hdGlvbiB2YWx1ZSBleGlzdHMuIEFycmF5IGFuZCBwbGFpbiBvYmplY3QgcHJvcGVydGllcyBhcmUgbWVyZ2VkXG4gKiByZWN1cnNpdmVseS5PdGhlciBvYmplY3RzIGFuZCB2YWx1ZSB0eXBlcyBhcmUgb3ZlcnJpZGRlbiBieSBhc3NpZ25tZW50LlxuICogU291cmNlIG9iamVjdHMgYXJlIGFwcGxpZWQgZnJvbSBsZWZ0IHRvIHJpZ2h0LiBTdWJzZXF1ZW50IHNvdXJjZXNcbiAqIG92ZXJ3cml0ZSBwcm9wZXJ0eSBhc3NpZ25tZW50cyBvZiBwcmV2aW91cyBzb3VyY2VzLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciB1c2VycyA9IHtcbiAqICAgJ2RhdGEnOiBbeyAndXNlcic6ICdiYXJuZXknIH0sIHsgJ3VzZXInOiAnZnJlZCcgfV1cbiAqIH07XG4gKlxuICogdmFyIGFnZXMgPSB7XG4gKiAgICdkYXRhJzogW3sgJ2FnZSc6IDM2IH0sIHsgJ2FnZSc6IDQwIH1dXG4gKiB9O1xuICpcbiAqIF8ubWVyZ2UodXNlcnMsIGFnZXMpO1xuICogLy8gPT4geyAnZGF0YSc6IFt7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9LCB7ICd1c2VyJzogJ2ZyZWQnLCAnYWdlJzogNDAgfV0gfVxuICovXG52YXIgbWVyZ2UgPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgpIHtcbiAgYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBtZXJnZTtcbiIsIi8qKiBVc2VkIGFzIHRoZSBgVHlwZUVycm9yYCBtZXNzYWdlIGZvciBcIkZ1bmN0aW9uc1wiIG1ldGhvZHMuICovXG52YXIgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG5lZ2F0ZXMgdGhlIHJlc3VsdCBvZiB0aGUgcHJlZGljYXRlIGBmdW5jYC4gVGhlXG4gKiBgZnVuY2AgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50cyBvZiB0aGVcbiAqIGNyZWF0ZWQgZnVuY3Rpb24uXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBwcmVkaWNhdGUgdG8gbmVnYXRlLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIGlzRXZlbihuKSB7XG4gKiAgIHJldHVybiBuICUgMiA9PSAwO1xuICogfVxuICpcbiAqIF8uZmlsdGVyKFsxLCAyLCAzLCA0LCA1LCA2XSwgXy5uZWdhdGUoaXNFdmVuKSk7XG4gKiAvLyA9PiBbMSwgMywgNV1cbiAqL1xuZnVuY3Rpb24gbmVnYXRlKHByZWRpY2F0ZSkge1xuICBpZiAodHlwZW9mIHByZWRpY2F0ZSAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICB9XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gIXByZWRpY2F0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5lZ2F0ZTtcbiIsIi8qKlxuICogQSBuby1vcGVyYXRpb24gZnVuY3Rpb24gdGhhdCByZXR1cm5zIGB1bmRlZmluZWRgIHJlZ2FyZGxlc3Mgb2YgdGhlXG4gKiBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICd1c2VyJzogJ2ZyZWQnIH07XG4gKlxuICogXy5ub29wKG9iamVjdCkgPT09IHVuZGVmaW5lZDtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gbm9vcCgpIHtcbiAgLy8gTm8gb3BlcmF0aW9uIHBlcmZvcm1lZC5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBub29wO1xuIiwidmFyIGJhc2VGbGF0dGVuID0gcmVxdWlyZSgnLi9fYmFzZUZsYXR0ZW4nKSxcbiAgICBiYXNlUGljayA9IHJlcXVpcmUoJy4vX2Jhc2VQaWNrJyksXG4gICAgcmVzdCA9IHJlcXVpcmUoJy4vcmVzdCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZSBwaWNrZWQgYG9iamVjdGAgcHJvcGVydGllcy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwcm9wc10gVGhlIHByb3BlcnR5IG5hbWVzIHRvIHBpY2ssIHNwZWNpZmllZFxuICogIGluZGl2aWR1YWxseSBvciBpbiBhcnJheXMuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAqXG4gKiBfLnBpY2sob2JqZWN0LCBbJ2EnLCAnYyddKTtcbiAqIC8vID0+IHsgJ2EnOiAxLCAnYyc6IDMgfVxuICovXG52YXIgcGljayA9IHJlc3QoZnVuY3Rpb24ob2JqZWN0LCBwcm9wcykge1xuICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB7fSA6IGJhc2VQaWNrKG9iamVjdCwgYmFzZUZsYXR0ZW4ocHJvcHMsIDEpKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBpY2s7XG4iLCJ2YXIgYmFzZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fYmFzZVByb3BlcnR5JyksXG4gICAgYmFzZVByb3BlcnR5RGVlcCA9IHJlcXVpcmUoJy4vX2Jhc2VQcm9wZXJ0eURlZXAnKSxcbiAgICBpc0tleSA9IHJlcXVpcmUoJy4vX2lzS2V5Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGEgZ2l2ZW4gb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0cyA9IFtcbiAqICAgeyAnYSc6IHsgJ2InOiB7ICdjJzogMiB9IH0gfSxcbiAqICAgeyAnYSc6IHsgJ2InOiB7ICdjJzogMSB9IH0gfVxuICogXTtcbiAqXG4gKiBfLm1hcChvYmplY3RzLCBfLnByb3BlcnR5KCdhLmIuYycpKTtcbiAqIC8vID0+IFsyLCAxXVxuICpcbiAqIF8ubWFwKF8uc29ydEJ5KG9iamVjdHMsIF8ucHJvcGVydHkoWydhJywgJ2InLCAnYyddKSksICdhLmIuYycpO1xuICogLy8gPT4gWzEsIDJdXG4gKi9cbmZ1bmN0aW9uIHByb3BlcnR5KHBhdGgpIHtcbiAgcmV0dXJuIGlzS2V5KHBhdGgpID8gYmFzZVByb3BlcnR5KHBhdGgpIDogYmFzZVByb3BlcnR5RGVlcChwYXRoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwcm9wZXJ0eTtcbiIsInZhciBhcHBseSA9IHJlcXVpcmUoJy4vX2FwcGx5JyksXG4gICAgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi90b0ludGVnZXInKTtcblxuLyoqIFVzZWQgYXMgdGhlIGBUeXBlRXJyb3JgIG1lc3NhZ2UgZm9yIFwiRnVuY3Rpb25zXCIgbWV0aG9kcy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVNYXggPSBNYXRoLm1heDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGVcbiAqIGNyZWF0ZWQgZnVuY3Rpb24gYW5kIGFyZ3VtZW50cyBmcm9tIGBzdGFydGAgYW5kIGJleW9uZCBwcm92aWRlZCBhcyBhbiBhcnJheS5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb24gdGhlIFtyZXN0IHBhcmFtZXRlcl0oaHR0cHM6Ly9tZG4uaW8vcmVzdF9wYXJhbWV0ZXJzKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBzYXkgPSBfLnJlc3QoZnVuY3Rpb24od2hhdCwgbmFtZXMpIHtcbiAqICAgcmV0dXJuIHdoYXQgKyAnICcgKyBfLmluaXRpYWwobmFtZXMpLmpvaW4oJywgJykgK1xuICogICAgIChfLnNpemUobmFtZXMpID4gMSA/ICcsICYgJyA6ICcnKSArIF8ubGFzdChuYW1lcyk7XG4gKiB9KTtcbiAqXG4gKiBzYXkoJ2hlbGxvJywgJ2ZyZWQnLCAnYmFybmV5JywgJ3BlYmJsZXMnKTtcbiAqIC8vID0+ICdoZWxsbyBmcmVkLCBiYXJuZXksICYgcGViYmxlcydcbiAqL1xuZnVuY3Rpb24gcmVzdChmdW5jLCBzdGFydCkge1xuICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICBzdGFydCA9IG5hdGl2ZU1heChzdGFydCA9PT0gdW5kZWZpbmVkID8gKGZ1bmMubGVuZ3RoIC0gMSkgOiB0b0ludGVnZXIoc3RhcnQpLCAwKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgoYXJncy5sZW5ndGggLSBzdGFydCwgMCksXG4gICAgICAgIGFycmF5ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBhcnJheVtpbmRleF0gPSBhcmdzW3N0YXJ0ICsgaW5kZXhdO1xuICAgIH1cbiAgICBzd2l0Y2ggKHN0YXJ0KSB7XG4gICAgICBjYXNlIDA6IHJldHVybiBmdW5jLmNhbGwodGhpcywgYXJyYXkpO1xuICAgICAgY2FzZSAxOiByZXR1cm4gZnVuYy5jYWxsKHRoaXMsIGFyZ3NbMF0sIGFycmF5KTtcbiAgICAgIGNhc2UgMjogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzLCBhcmdzWzBdLCBhcmdzWzFdLCBhcnJheSk7XG4gICAgfVxuICAgIHZhciBvdGhlckFyZ3MgPSBBcnJheShzdGFydCArIDEpO1xuICAgIGluZGV4ID0gLTE7XG4gICAgd2hpbGUgKCsraW5kZXggPCBzdGFydCkge1xuICAgICAgb3RoZXJBcmdzW2luZGV4XSA9IGFyZ3NbaW5kZXhdO1xuICAgIH1cbiAgICBvdGhlckFyZ3Nbc3RhcnRdID0gYXJyYXk7XG4gICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHRoaXMsIG90aGVyQXJncyk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcmVzdDtcbiIsInZhciBiYXNlU3VtID0gcmVxdWlyZSgnLi9fYmFzZVN1bScpLFxuICAgIGlkZW50aXR5ID0gcmVxdWlyZSgnLi9pZGVudGl0eScpO1xuXG4vKipcbiAqIENvbXB1dGVzIHRoZSBzdW0gb2YgdGhlIHZhbHVlcyBpbiBgYXJyYXlgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgTWF0aFxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN1bS5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5zdW0oWzQsIDIsIDgsIDZdKTtcbiAqIC8vID0+IDIwXG4gKi9cbmZ1bmN0aW9uIHN1bShhcnJheSkge1xuICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICA/IGJhc2VTdW0oYXJyYXksIGlkZW50aXR5KVxuICAgIDogMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdW07XG4iLCJ2YXIgdG9OdW1iZXIgPSByZXF1aXJlKCcuL3RvTnVtYmVyJyk7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIElORklOSVRZID0gMSAvIDAsXG4gICAgTUFYX0lOVEVHRVIgPSAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwODtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGFuIGludGVnZXIuXG4gKlxuICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gaXMgbG9vc2VseSBiYXNlZCBvbiBbYFRvSW50ZWdlcmBdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy10b2ludGVnZXIpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvSW50ZWdlcigzKTtcbiAqIC8vID0+IDNcbiAqXG4gKiBfLnRvSW50ZWdlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IDBcbiAqXG4gKiBfLnRvSW50ZWdlcihJbmZpbml0eSk7XG4gKiAvLyA9PiAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOFxuICpcbiAqIF8udG9JbnRlZ2VyKCczJyk7XG4gKiAvLyA9PiAzXG4gKi9cbmZ1bmN0aW9uIHRvSW50ZWdlcih2YWx1ZSkge1xuICBpZiAoIXZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSAwID8gdmFsdWUgOiAwO1xuICB9XG4gIHZhbHVlID0gdG9OdW1iZXIodmFsdWUpO1xuICBpZiAodmFsdWUgPT09IElORklOSVRZIHx8IHZhbHVlID09PSAtSU5GSU5JVFkpIHtcbiAgICB2YXIgc2lnbiA9ICh2YWx1ZSA8IDAgPyAtMSA6IDEpO1xuICAgIHJldHVybiBzaWduICogTUFYX0lOVEVHRVI7XG4gIH1cbiAgdmFyIHJlbWFpbmRlciA9IHZhbHVlICUgMTtcbiAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSA/IChyZW1haW5kZXIgPyB2YWx1ZSAtIHJlbWFpbmRlciA6IHZhbHVlKSA6IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9JbnRlZ2VyO1xuIiwidmFyIGlzRnVuY3Rpb24gPSByZXF1aXJlKCcuL2lzRnVuY3Rpb24nKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTkFOID0gMCAvIDA7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHdoaXRlc3BhY2UuICovXG52YXIgcmVUcmltID0gL15cXHMrfFxccyskL2c7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBiYWQgc2lnbmVkIGhleGFkZWNpbWFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JhZEhleCA9IC9eWy0rXTB4WzAtOWEtZl0rJC9pO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgYmluYXJ5IHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JpbmFyeSA9IC9eMGJbMDFdKyQvaTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG9jdGFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc09jdGFsID0gL14wb1swLTddKyQvaTtcblxuLyoqIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHdpdGhvdXQgYSBkZXBlbmRlbmN5IG9uIGByb290YC4gKi9cbnZhciBmcmVlUGFyc2VJbnQgPSBwYXJzZUludDtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgbnVtYmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG51bWJlci5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b051bWJlcigzKTtcbiAqIC8vID0+IDNcbiAqXG4gKiBfLnRvTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gNWUtMzI0XG4gKlxuICogXy50b051bWJlcihJbmZpbml0eSk7XG4gKiAvLyA9PiBJbmZpbml0eVxuICpcbiAqIF8udG9OdW1iZXIoJzMnKTtcbiAqIC8vID0+IDNcbiAqL1xuZnVuY3Rpb24gdG9OdW1iZXIodmFsdWUpIHtcbiAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHZhciBvdGhlciA9IGlzRnVuY3Rpb24odmFsdWUudmFsdWVPZikgPyB2YWx1ZS52YWx1ZU9mKCkgOiB2YWx1ZTtcbiAgICB2YWx1ZSA9IGlzT2JqZWN0KG90aGVyKSA/IChvdGhlciArICcnKSA6IG90aGVyO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6ICt2YWx1ZTtcbiAgfVxuICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UocmVUcmltLCAnJyk7XG4gIHZhciBpc0JpbmFyeSA9IHJlSXNCaW5hcnkudGVzdCh2YWx1ZSk7XG4gIHJldHVybiAoaXNCaW5hcnkgfHwgcmVJc09jdGFsLnRlc3QodmFsdWUpKVxuICAgID8gZnJlZVBhcnNlSW50KHZhbHVlLnNsaWNlKDIpLCBpc0JpbmFyeSA/IDIgOiA4KVxuICAgIDogKHJlSXNCYWRIZXgudGVzdCh2YWx1ZSkgPyBOQU4gOiArdmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvTnVtYmVyO1xuIiwidmFyIGJhc2VUb1BhaXJzID0gcmVxdWlyZSgnLi9fYmFzZVRvUGFpcnMnKSxcbiAgICBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gZW51bWVyYWJsZSBrZXktdmFsdWUgcGFpcnMgZm9yIGBvYmplY3RgIHdoaWNoXG4gKiBjYW4gYmUgY29uc3VtZWQgYnkgYF8uZnJvbVBhaXJzYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2Yga2V5LXZhbHVlIHBhaXJzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLnRvUGFpcnMobmV3IEZvbyk7XG4gKiAvLyA9PiBbWydhJywgMV0sIFsnYicsIDJdXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICovXG5mdW5jdGlvbiB0b1BhaXJzKG9iamVjdCkge1xuICByZXR1cm4gYmFzZVRvUGFpcnMob2JqZWN0LCBrZXlzKG9iamVjdCkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvUGFpcnM7XG4iLCJ2YXIgY29weU9iamVjdCA9IHJlcXVpcmUoJy4vX2NvcHlPYmplY3QnKSxcbiAgICBrZXlzSW4gPSByZXF1aXJlKCcuL2tleXNJbicpO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBwbGFpbiBvYmplY3QgZmxhdHRlbmluZyBpbmhlcml0ZWQgZW51bWVyYWJsZVxuICogcHJvcGVydGllcyBvZiBgdmFsdWVgIHRvIG93biBwcm9wZXJ0aWVzIG9mIHRoZSBwbGFpbiBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29udmVydGVkIHBsYWluIG9iamVjdC5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy5hc3NpZ24oeyAnYSc6IDEgfSwgbmV3IEZvbyk7XG4gKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAqXG4gKiBfLmFzc2lnbih7ICdhJzogMSB9LCBfLnRvUGxhaW5PYmplY3QobmV3IEZvbykpO1xuICogLy8gPT4geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH1cbiAqL1xuZnVuY3Rpb24gdG9QbGFpbk9iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gY29weU9iamVjdCh2YWx1ZSwga2V5c0luKHZhbHVlKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9QbGFpbk9iamVjdDtcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKSxcbiAgICBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMDtcblxuLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG52YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgIHN5bWJvbFRvU3RyaW5nID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by50b1N0cmluZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIGlmIGl0J3Mgbm90IG9uZS4gQW4gZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkXG4gKiBmb3IgYG51bGxgIGFuZCBgdW5kZWZpbmVkYCB2YWx1ZXMuIFRoZSBzaWduIG9mIGAtMGAgaXMgcHJlc2VydmVkLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZy5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b1N0cmluZyhudWxsKTtcbiAqIC8vID0+ICcnXG4gKlxuICogXy50b1N0cmluZygtMCk7XG4gKiAvLyA9PiAnLTAnXG4gKlxuICogXy50b1N0cmluZyhbMSwgMiwgM10pO1xuICogLy8gPT4gJzEsMiwzJ1xuICovXG5mdW5jdGlvbiB0b1N0cmluZyh2YWx1ZSkge1xuICAvLyBFeGl0IGVhcmx5IGZvciBzdHJpbmdzIHRvIGF2b2lkIGEgcGVyZm9ybWFuY2UgaGl0IGluIHNvbWUgZW52aXJvbm1lbnRzLlxuICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG4gIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3ltYm9sVG9TdHJpbmcgPyBzeW1ib2xUb1N0cmluZy5jYWxsKHZhbHVlKSA6ICcnO1xuICB9XG4gIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b1N0cmluZztcbiIsInZhciBiYXNlSXRlcmF0ZWUgPSByZXF1aXJlKCcuL19iYXNlSXRlcmF0ZWUnKSxcbiAgICBiYXNlVW5pcSA9IHJlcXVpcmUoJy4vX2Jhc2VVbmlxJyk7XG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlxYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnkgd2hpY2hcbiAqIHVuaXF1ZW5lc3MgaXMgY29tcHV0ZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgQXJyYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8c3RyaW5nfSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAqIEBleGFtcGxlXG4gKlxuICogXy51bmlxQnkoWzIuMSwgMS4yLCAyLjNdLCBNYXRoLmZsb29yKTtcbiAqIC8vID0+IFsyLjEsIDEuMl1cbiAqXG4gKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8udW5pcUJ5KFt7ICd4JzogMSB9LCB7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgJ3gnKTtcbiAqIC8vID0+IFt7ICd4JzogMSB9LCB7ICd4JzogMiB9XVxuICovXG5mdW5jdGlvbiB1bmlxQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgID8gYmFzZVVuaXEoYXJyYXksIGJhc2VJdGVyYXRlZShpdGVyYXRlZSkpXG4gICAgOiBbXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB1bmlxQnk7XG4iLCJ2YXIgYmFzZVZhbHVlcyA9IHJlcXVpcmUoJy4vX2Jhc2VWYWx1ZXMnKSxcbiAgICBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgcHJvcGVydHkgdmFsdWVzIG9mIGBvYmplY3RgLlxuICpcbiAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy52YWx1ZXMobmV3IEZvbyk7XG4gKiAvLyA9PiBbMSwgMl0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqXG4gKiBfLnZhbHVlcygnaGknKTtcbiAqIC8vID0+IFsnaCcsICdpJ11cbiAqL1xuZnVuY3Rpb24gdmFsdWVzKG9iamVjdCkge1xuICByZXR1cm4gb2JqZWN0ID8gYmFzZVZhbHVlcyhvYmplY3QsIGtleXMob2JqZWN0KSkgOiBbXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB2YWx1ZXM7XG4iLCJ2YXIgZmluZE1hdGNoaW5nUnVsZSA9IGZ1bmN0aW9uKHJ1bGVzLCB0ZXh0KXtcbiAgdmFyIGk7XG4gIGZvcihpPTA7IGk8cnVsZXMubGVuZ3RoOyBpKyspXG4gICAgaWYocnVsZXNbaV0ucmVnZXgudGVzdCh0ZXh0KSlcbiAgICAgIHJldHVybiBydWxlc1tpXTtcbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG5cbnZhciBmaW5kTWF4SW5kZXhBbmRSdWxlID0gZnVuY3Rpb24ocnVsZXMsIHRleHQpe1xuICB2YXIgaSwgcnVsZSwgbGFzdF9tYXRjaGluZ19ydWxlO1xuICBmb3IoaT0wOyBpPHRleHQubGVuZ3RoOyBpKyspe1xuICAgIHJ1bGUgPSBmaW5kTWF0Y2hpbmdSdWxlKHJ1bGVzLCB0ZXh0LnN1YnN0cmluZygwLCBpICsgMSkpO1xuICAgIGlmKHJ1bGUpXG4gICAgICBsYXN0X21hdGNoaW5nX3J1bGUgPSBydWxlO1xuICAgIGVsc2UgaWYobGFzdF9tYXRjaGluZ19ydWxlKVxuICAgICAgcmV0dXJuIHttYXhfaW5kZXg6IGksIHJ1bGU6IGxhc3RfbWF0Y2hpbmdfcnVsZX07XG4gIH1cbiAgcmV0dXJuIGxhc3RfbWF0Y2hpbmdfcnVsZSA/IHttYXhfaW5kZXg6IHRleHQubGVuZ3RoLCBydWxlOiBsYXN0X21hdGNoaW5nX3J1bGV9IDogdW5kZWZpbmVkO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvblRva2VuX29yaWcpe1xuICB2YXIgYnVmZmVyID0gXCJcIjtcbiAgdmFyIHJ1bGVzID0gW107XG4gIHZhciBsaW5lID0gMTtcbiAgdmFyIGNvbCA9IDE7XG5cbiAgdmFyIG9uVG9rZW4gPSBmdW5jdGlvbihzcmMsIHR5cGUpe1xuICAgIG9uVG9rZW5fb3JpZyh7XG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAgc3JjOiBzcmMsXG4gICAgICBsaW5lOiBsaW5lLFxuICAgICAgY29sOiBjb2xcbiAgICB9KTtcbiAgICB2YXIgbGluZXMgPSBzcmMuc3BsaXQoXCJcXG5cIik7XG4gICAgbGluZSArPSBsaW5lcy5sZW5ndGggLSAxO1xuICAgIGNvbCA9IChsaW5lcy5sZW5ndGggPiAxID8gMSA6IGNvbCkgKyBsaW5lc1tsaW5lcy5sZW5ndGggLSAxXS5sZW5ndGg7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBhZGRSdWxlOiBmdW5jdGlvbihyZWdleCwgdHlwZSl7XG4gICAgICBydWxlcy5wdXNoKHtyZWdleDogcmVnZXgsIHR5cGU6IHR5cGV9KTtcbiAgICB9LFxuICAgIG9uVGV4dDogZnVuY3Rpb24odGV4dCl7XG4gICAgICB2YXIgc3RyID0gYnVmZmVyICsgdGV4dDtcbiAgICAgIHZhciBtID0gZmluZE1heEluZGV4QW5kUnVsZShydWxlcywgc3RyKTtcbiAgICAgIHdoaWxlKG0gJiYgbS5tYXhfaW5kZXggIT09IHN0ci5sZW5ndGgpe1xuICAgICAgICBvblRva2VuKHN0ci5zdWJzdHJpbmcoMCwgbS5tYXhfaW5kZXgpLCBtLnJ1bGUudHlwZSk7XG5cbiAgICAgICAgLy9ub3cgZmluZCB0aGUgbmV4dCB0b2tlblxuICAgICAgICBzdHIgPSBzdHIuc3Vic3RyaW5nKG0ubWF4X2luZGV4KTtcbiAgICAgICAgbSA9IGZpbmRNYXhJbmRleEFuZFJ1bGUocnVsZXMsIHN0cik7XG4gICAgICB9XG4gICAgICBidWZmZXIgPSBzdHI7XG4gICAgfSxcbiAgICBlbmQ6IGZ1bmN0aW9uKCl7XG4gICAgICBpZihidWZmZXIubGVuZ3RoID09PSAwKVxuICAgICAgICByZXR1cm47XG5cbiAgICAgIHZhciBydWxlID0gZmluZE1hdGNoaW5nUnVsZShydWxlcywgYnVmZmVyKTtcbiAgICAgIGlmKCFydWxlKXtcbiAgICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcihcInVuYWJsZSB0byB0b2tlbml6ZVwiKTtcbiAgICAgICAgZXJyLnRva2VuaXplcjIgPSB7XG4gICAgICAgICAgYnVmZmVyOiBidWZmZXIsXG4gICAgICAgICAgbGluZTogbGluZSxcbiAgICAgICAgICBjb2w6IGNvbFxuICAgICAgICB9O1xuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9XG5cbiAgICAgIG9uVG9rZW4oYnVmZmVyLCBydWxlLnR5cGUpO1xuICAgIH1cbiAgfTtcbn07XG4iLCJ2YXIgQXNzZXNzb3IgPSByZXF1aXJlKCBcInlvYXN0c2VvL2pzL2Fzc2Vzc29yLmpzXCIgKTtcblxudmFyIGludHJvZHVjdGlvbktleXdvcmQgPSByZXF1aXJlKCBcInlvYXN0c2VvL2pzL2Fzc2Vzc21lbnRzL2ludHJvZHVjdGlvbktleXdvcmRBc3Nlc3NtZW50LmpzXCIgKTtcbnZhciBrZXlwaHJhc2VMZW5ndGggPSByZXF1aXJlKCBcInlvYXN0c2VvL2pzL2Fzc2Vzc21lbnRzL2tleXBocmFzZUxlbmd0aEFzc2Vzc21lbnQuanNcIiApO1xudmFyIGtleXdvcmREZW5zaXR5ID0gcmVxdWlyZSggXCJ5b2FzdHNlby9qcy9hc3Nlc3NtZW50cy9rZXl3b3JkRGVuc2l0eUFzc2Vzc21lbnQuanNcIiApO1xudmFyIGtleXdvcmRTdG9wV29yZHMgPSByZXF1aXJlKCBcInlvYXN0c2VvL2pzL2Fzc2Vzc21lbnRzL2tleXdvcmRTdG9wV29yZHNBc3Nlc3NtZW50LmpzXCIgKTtcbnZhciBtZXRhRGVzY3JpcHRpb25LZXl3b3JkID0gcmVxdWlyZSggXCJ5b2FzdHNlby9qcy9hc3Nlc3NtZW50cy9tZXRhRGVzY3JpcHRpb25LZXl3b3JkQXNzZXNzbWVudC5qc1wiICk7XG52YXIgbWV0YURlc2NyaXB0aW9uTGVuZ3RoID0gcmVxdWlyZSggXCJ5b2FzdHNlby9qcy9hc3Nlc3NtZW50cy9tZXRhRGVzY3JpcHRpb25MZW5ndGhBc3Nlc3NtZW50LmpzXCIgKTtcbnZhciB0aXRsZUtleXdvcmQgPSByZXF1aXJlKCBcInlvYXN0c2VvL2pzL2Fzc2Vzc21lbnRzL3RpdGxlS2V5d29yZEFzc2Vzc21lbnQuanNcIiApO1xudmFyIHRpdGxlV2lkdGggPSByZXF1aXJlKCBcInlvYXN0c2VvL2pzL2Fzc2Vzc21lbnRzL3BhZ2VUaXRsZVdpZHRoQXNzZXNzbWVudC5qc1wiICk7XG52YXIgdXJsS2V5d29yZCA9IHJlcXVpcmUoIFwieW9hc3RzZW8vanMvYXNzZXNzbWVudHMvdXJsS2V5d29yZEFzc2Vzc21lbnQuanNcIiApO1xudmFyIHVybExlbmd0aCA9IHJlcXVpcmUoIFwieW9hc3RzZW8vanMvYXNzZXNzbWVudHMvdXJsTGVuZ3RoQXNzZXNzbWVudC5qc1wiICk7XG52YXIgdXJsU3RvcFdvcmRzID0gcmVxdWlyZSggXCJ5b2FzdHNlby9qcy9hc3Nlc3NtZW50cy91cmxTdG9wV29yZHNBc3Nlc3NtZW50LmpzXCIgKTtcbnZhciB0YXhvbm9teVRleHRMZW5ndGggPSByZXF1aXJlKCBcInlvYXN0c2VvL2pzL2Fzc2Vzc21lbnRzL3RheG9ub215VGV4dExlbmd0aEFzc2Vzc21lbnRcIiApO1xuXG4vKipcbiAqIENyZWF0ZXMgdGhlIEFzc2Vzc29yXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGkxOG4gVGhlIGkxOG4gb2JqZWN0IHVzZWQgZm9yIHRyYW5zbGF0aW9ucy5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG52YXIgVGF4b25vbXlBc3Nlc3NvciA9IGZ1bmN0aW9uKCBpMThuICkge1xuXHRBc3Nlc3Nvci5jYWxsKCB0aGlzLCBpMThuICk7XG5cblx0dGhpcy5fYXNzZXNzbWVudHMgPSBbXG5cdFx0aW50cm9kdWN0aW9uS2V5d29yZCxcblx0XHRrZXlwaHJhc2VMZW5ndGgsXG5cdFx0a2V5d29yZERlbnNpdHksXG5cdFx0a2V5d29yZFN0b3BXb3Jkcyxcblx0XHRtZXRhRGVzY3JpcHRpb25LZXl3b3JkLFxuXHRcdG1ldGFEZXNjcmlwdGlvbkxlbmd0aCxcblx0XHR0YXhvbm9teVRleHRMZW5ndGgsXG5cdFx0dGl0bGVLZXl3b3JkLFxuXHRcdHRpdGxlV2lkdGgsXG5cdFx0dXJsS2V5d29yZCxcblx0XHR1cmxMZW5ndGgsXG5cdFx0dXJsU3RvcFdvcmRzLFxuXHRdO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBUYXhvbm9teUFzc2Vzc29yO1xuXG5yZXF1aXJlKCBcInV0aWxcIiApLmluaGVyaXRzKCBtb2R1bGUuZXhwb3J0cywgQXNzZXNzb3IgKTtcblxuIiwiLyogZ2xvYmFsIHdwc2VvQWRtaW5MMTBuICovXG4vKiBnbG9iYWwgYWpheHVybCAqL1xuLyogZ2xvYmFsIHJlcXVpcmUgKi9cblxudmFyIEplZCA9IHJlcXVpcmUoIFwiamVkXCIgKTtcbnZhciBQYXBlciA9IHJlcXVpcmUoIFwieW9hc3RzZW8vanMvdmFsdWVzL1BhcGVyXCIgKTtcbnZhciBTRU9Bc3Nlc3NvciA9IHJlcXVpcmUoIFwieW9hc3RzZW8vanMvU0VPQXNzZXNzb3JcIiApO1xudmFyIFRheG9ub215QXNzZXNzb3IgPSByZXF1aXJlKCBcIi4vYXNzZXNzb3JzL3RheG9ub215QXNzZXNzb3JcIiApO1xudmFyIGlzVW5kZWZpbmVkID0gcmVxdWlyZSggXCJsb2Rhc2gvaXNVbmRlZmluZWRcIiApO1xuXG4oIGZ1bmN0aW9uKCAkICkge1xuXHRcInVzZSBzdHJpY3RcIjtcblxuXHR2YXIgaTE4biA9IG5ldyBKZWQoIHtcblx0XHRkb21haW46IFwianMtdGV4dC1hbmFseXNpc1wiLFxuXHRcdGxvY2FsZV9kYXRhOiB7XG5cdFx0XHRcImpzLXRleHQtYW5hbHlzaXNcIjoge1xuXHRcdFx0XHRcIlwiOiB7fSxcblx0XHRcdH0sXG5cdFx0fSxcblx0fSApO1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIHRoZSByZWNhbGN1bGF0ZSBzY29yZS5cblx0ICpcblx0ICogQGNvbnN0cnVjdG9yXG5cdCAqL1xuXHR2YXIgWW9hc3RSZWNhbGN1bGF0ZVNjb3JlID0gZnVuY3Rpb24oIHRvdGFsX2NvdW50ICkge1xuXHRcdC8vIFNldHMgdGhlIHRvdGFsIGNvdW50XG5cdFx0dGhpcy50b3RhbF9jb3VudCA9IHRvdGFsX2NvdW50O1xuXHRcdHRoaXMub25jb21wbGV0ZSAgPSBmYWxzZTtcblxuXHRcdHRoaXMuc2V0dXBBc3Nlc3NvcnMoKTtcblxuXHRcdCQoIFwiI3dwc2VvX2NvdW50X3RvdGFsXCIgKS5odG1sKCB0b3RhbF9jb3VudCApO1xuXG5cdFx0alF1ZXJ5KCBcIiN3cHNlb19wcm9ncmVzc2JhclwiICkucHJvZ3Jlc3NiYXIoIHsgdmFsdWU6IDAgfSApO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBTZXRzIHVwIHRoZSBBc3Nlc3NvcnMgbmVlZGVkIGZvciB0aGUgcmVjYWxjdWxhdGlvbi5cblx0ICovXG5cdFlvYXN0UmVjYWxjdWxhdGVTY29yZS5wcm90b3R5cGUuc2V0dXBBc3Nlc3NvcnMgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgcG9zdEFzc2Vzc29yID0gbmV3IFNFT0Fzc2Vzc29yKCBpMThuICk7XG5cdFx0dmFyIHRheG9ub215QXNzZXNzb3IgPSBuZXcgVGF4b25vbXlBc3Nlc3NvciggaTE4biApO1xuXG5cdFx0dGhpcy52YWxpZEFzc2Vzc29ycyA9IHtcblx0XHRcdHBvc3Q6IHBvc3RBc3Nlc3Nvcixcblx0XHRcdHRlcm06IHRheG9ub215QXNzZXNzb3IsXG5cdFx0fTtcblx0fTtcblxuXHQvKipcblx0ICogU3RhcnRzIHRoZSByZWNhbGN1bGF0aW9uXG5cdCAqXG5cdCAqIEBwYXJhbSB7aW50fSBpdGVtc190b19mZXRjaFxuXHQgKiBAcGFyYW0ge3N0cmluZ30gZmV0Y2hfdHlwZVxuXHQgKiBAcGFyYW0ge3N0cmluZ30gaWRfZmllbGRcblx0ICogQHBhcmFtIHtGdW5jdGlvbnxib29sfSBjYWxsYmFja1xuXHQgKi9cblx0WW9hc3RSZWNhbGN1bGF0ZVNjb3JlLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uKCBpdGVtc190b19mZXRjaCwgZmV0Y2hfdHlwZSwgaWRfZmllbGQsIGNhbGxiYWNrICkge1xuXHRcdGlmICggISB0aGlzLnZhbGlkQXNzZXNzb3JzLmhhc093blByb3BlcnR5KCBmZXRjaF90eXBlICkgKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoIFwiVW5rbm93biBmZXRjaCB0eXBlIG9mIFwiICsgZmV0Y2hfdHlwZSArIFwiIGdpdmVuLlwiICk7XG5cdFx0fVxuXG5cdFx0dGhpcy5mZXRjaF90eXBlICAgICA9IGZldGNoX3R5cGU7XG5cdFx0dGhpcy5pdGVtc190b19mZXRjaCA9IGl0ZW1zX3RvX2ZldGNoO1xuXHRcdHRoaXMuaWRfZmllbGQgICAgICAgPSBpZF9maWVsZDtcblx0XHR0aGlzLm9uY29tcGxldGUgICAgID0gY2FsbGJhY2s7XG5cblx0XHR0aGlzLmFzc2Vzc29yICAgICAgID0gdGhpcy52YWxpZEFzc2Vzc29yc1sgZmV0Y2hfdHlwZSBdO1xuXG5cdFx0dGhpcy5nZXRJdGVtc1RvUmVjYWxjdWxhdGUoIDEgKTtcblx0fTtcblxuXHQvKipcblx0ICogVXBkYXRlcyB0aGUgcHJvZ3Jlc3NiYXJcblx0ICpcblx0ICogQHBhcmFtIHtpbnR9IHRvdGFsX3Bvc3RzXG5cdCAqL1xuXHRZb2FzdFJlY2FsY3VsYXRlU2NvcmUucHJvdG90eXBlLnVwZGF0ZVByb2dyZXNzQmFyID0gZnVuY3Rpb24oIHRvdGFsX3Bvc3RzICkge1xuXHRcdHZhciBjdXJyZW50X3ZhbHVlID0galF1ZXJ5KCBcIiN3cHNlb19jb3VudFwiICkudGV4dCgpO1xuXHRcdHZhciBuZXdfdmFsdWUgPSBwYXJzZUludCggY3VycmVudF92YWx1ZSwgMTAgKSArIHRvdGFsX3Bvc3RzO1xuXHRcdHZhciBuZXdfd2lkdGggPSBuZXdfdmFsdWUgKiAoIDEwMCAvIHRoaXMudG90YWxfY291bnQgKTtcblxuXHRcdGpRdWVyeSggXCIjd3BzZW9fcHJvZ3Jlc3NiYXJcIiApLnByb2dyZXNzYmFyKCBcInZhbHVlXCIsIG5ld193aWR0aCApO1xuXG5cdFx0dGhpcy51cGRhdGVDb3VudEVsZW1lbnQoIG5ld192YWx1ZSApO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBVcGRhdGVzIHRoZSBlbGVtZW50IHdpdGggdGhlIG5ldyBjb3VudCB2YWx1ZVxuXHQgKlxuXHQgKiBAcGFyYW0ge2ludH0gbmV3X3ZhbHVlXG5cdCAqL1xuXHRZb2FzdFJlY2FsY3VsYXRlU2NvcmUucHJvdG90eXBlLnVwZGF0ZUNvdW50RWxlbWVudCA9IGZ1bmN0aW9uKCBuZXdfdmFsdWUgKSB7XG5cdFx0alF1ZXJ5KCBcIiN3cHNlb19jb3VudFwiICkuaHRtbCggbmV3X3ZhbHVlICk7XG5cdH07XG5cblx0LyoqXG5cdCAqIENhbGN1bGF0ZSB0aGUgc2NvcmVzXG5cdCAqXG5cdCAqIEBwYXJhbSB7aW50fSAgIHRvdGFsX2l0ZW1zXG5cdCAqIEBwYXJhbSB7YXJyYXl9IGl0ZW1zXG5cdCAqL1xuXHRZb2FzdFJlY2FsY3VsYXRlU2NvcmUucHJvdG90eXBlLmNhbGN1bGF0ZVNjb3JlcyA9IGZ1bmN0aW9uKCB0b3RhbF9pdGVtcywgaXRlbXMgKSB7XG5cdFx0dmFyIHNjb3JlcyA9IFtdO1xuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IHRvdGFsX2l0ZW1zOyBpKysgKSB7XG5cdFx0XHRzY29yZXMucHVzaCggdGhpcy5nZXRTY29yZSggaXRlbXNbIGkgXSApICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHNjb3Jlcztcblx0fTtcblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgc2NvcmVcblx0ICpcblx0ICogQHBhcmFtIHtqc29ufSBpdGVtXG5cdCAqIEByZXR1cm5zIHt7aXRlbV9pZDogaW50LCBzY29yZX19XG5cdCAqL1xuXHRZb2FzdFJlY2FsY3VsYXRlU2NvcmUucHJvdG90eXBlLmdldFNjb3JlID0gZnVuY3Rpb24oIGl0ZW0gKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGl0ZW1faWQ6IHRoaXMuZ2V0SXRlbUlEKCBpdGVtICksXG5cdFx0XHR0YXhvbm9teTogKCBpdGVtLnRheG9ub215ICkgPyBpdGVtLnRheG9ub215IDogXCJcIixcblx0XHRcdHNjb3JlOiB0aGlzLmNhbGN1bGF0ZUl0ZW1TY29yZSggaXRlbSApLFxuXHRcdH07XG5cdH07XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGl0ZW0gaWRcblx0ICpcblx0ICogQHBhcmFtIHtqc29ufSBpdGVtXG5cdCAqIEByZXR1cm5zIHtpbnR9XG5cdCAqL1xuXHRZb2FzdFJlY2FsY3VsYXRlU2NvcmUucHJvdG90eXBlLmdldEl0ZW1JRCA9IGZ1bmN0aW9uKCBpdGVtICkge1xuXHRcdHRoaXMuaXRlbXNfdG9fZmV0Y2gtLTtcblxuXHRcdHJldHVybiBpdGVtWyB0aGlzLmlkX2ZpZWxkIF07XG5cdH07XG5cblx0LyoqXG5cdCAqIFBhc3MgdGhlIHBvc3QgdG8gdGhlIGFuYWx5emVyIHRvIGNhbGN1bGF0ZXMgaXQncyBjb3JlXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBpdGVtXG5cdCAqL1xuXHRZb2FzdFJlY2FsY3VsYXRlU2NvcmUucHJvdG90eXBlLmNhbGN1bGF0ZUl0ZW1TY29yZSA9IGZ1bmN0aW9uKCBpdGVtICkge1xuXHRcdHZhciB0ZW1wUGFwZXIgPSBuZXcgUGFwZXIoIGl0ZW0udGV4dCwge1xuXHRcdFx0a2V5d29yZDogaXRlbS5rZXl3b3JkLFxuXHRcdFx0dXJsOiBpdGVtLnVybCxcblx0XHRcdGxvY2FsZTogd3BzZW9BZG1pbkwxMG4ubG9jYWxlLFxuXHRcdFx0ZGVzY3JpcHRpb246IGl0ZW0ubWV0YSxcblx0XHRcdHRpdGxlOiBpdGVtLnBhZ2VUaXRsZSxcblx0XHR9ICk7XG5cblx0XHR2YXIgdGVtcEFzc2Vzc29yID0gdGhpcy5hc3Nlc3NvcjtcblxuXHRcdHRlbXBBc3Nlc3Nvci5hc3Nlc3MoIHRlbXBQYXBlciApO1xuXG5cdFx0cmV0dXJuIHRlbXBBc3Nlc3Nvci5jYWxjdWxhdGVPdmVyYWxsU2NvcmUoKTtcblx0fTtcblxuXHQvKipcblx0ICogUGFyc2UgdGhlIHJlc3BvbnNlIGdpdmVuIGJ5IHJlcXVlc3QgaW4gZ2V0SXRlbXNUb1JlY2FsY3VsYXRlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdH0gcmVzcG9uc2Vcblx0ICovXG5cdFlvYXN0UmVjYWxjdWxhdGVTY29yZS5wcm90b3R5cGUucGFyc2VSZXNwb25zZSA9IGZ1bmN0aW9uKCByZXNwb25zZSApIHtcblx0XHRpZiAoIHJlc3BvbnNlICE9PSBcIlwiICYmIHJlc3BvbnNlICE9PSBudWxsICkge1xuXHRcdFx0aWYgKCAhIGlzVW5kZWZpbmVkKCByZXNwb25zZS50b3RhbF9pdGVtcyApICkge1xuXHRcdFx0XHR2YXIgc2NvcmVzID0gdGhpcy5jYWxjdWxhdGVTY29yZXMoIHJlc3BvbnNlLnRvdGFsX2l0ZW1zLCByZXNwb25zZS5pdGVtcyApO1xuXG5cdFx0XHRcdHRoaXMuc2VuZFNjb3Jlcyggc2NvcmVzICk7XG5cblx0XHRcdFx0dGhpcy51cGRhdGVQcm9ncmVzc0JhciggcmVzcG9uc2UudG90YWxfaXRlbXMgKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCAhIGlzVW5kZWZpbmVkKCByZXNwb25zZS5uZXh0X3BhZ2UgKSApIHtcblx0XHRcdFx0dGhpcy5nZXRJdGVtc1RvUmVjYWxjdWxhdGUoIHJlc3BvbnNlLm5leHRfcGFnZSApO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdHRoaXMub25Db21wbGV0ZVJlcXVlc3QoKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0dGhpcy5vbkNvbXBsZXRlUmVxdWVzdCgpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBSdW4gdGhlIG9uY29tcGxldGUgbWV0aG9kIHdoZW4gdGhlIHByb2Nlc3MgaXMgZG9uZS4uXG5cdCAqL1xuXHRZb2FzdFJlY2FsY3VsYXRlU2NvcmUucHJvdG90eXBlLm9uQ29tcGxldGVSZXF1ZXN0ID0gZnVuY3Rpb24oKSB7XG5cdFx0Ly8gV2hlbiB0aGVyZSBpcyBub3RoaW5nIHRvIGRvLlxuXHRcdGlmICggdGhpcy5vbmNvbXBsZXRlICE9PSBmYWxzZSApIHtcblx0XHRcdHRoaXMub25jb21wbGV0ZSgpO1xuXHRcdFx0dGhpcy5vbmNvbXBsZXRlID0gZmFsc2U7XG5cdFx0fVxuXHR9O1xuXG5cdC8qKlxuXHQgKiBTZW5kcyB0aGUgc2NvcmVzIHRvIHRoZSBiYWNrZW5kXG5cdCAqXG5cdCAqIEBwYXJhbSB7YXJyYXl9IHNjb3Jlc1xuXHQgKi9cblx0WW9hc3RSZWNhbGN1bGF0ZVNjb3JlLnByb3RvdHlwZS5zZW5kU2NvcmVzID0gZnVuY3Rpb24oIHNjb3JlcyApIHtcblx0XHRqUXVlcnkucG9zdChcblx0XHRcdGFqYXh1cmwsXG5cdFx0XHR7XG5cdFx0XHRcdGFjdGlvbjogXCJ3cHNlb191cGRhdGVfc2NvcmVcIixcblx0XHRcdFx0bm9uY2U6IGpRdWVyeSggXCIjd3BzZW9fcmVjYWxjdWxhdGVfbm9uY2VcIiApLnZhbCgpLFxuXHRcdFx0XHRzY29yZXM6IHNjb3Jlcyxcblx0XHRcdFx0dHlwZTogdGhpcy5mZXRjaF90eXBlLFxuXHRcdFx0fVxuXHRcdCk7XG5cdH07XG5cblx0LyoqXG5cdCAqIEdldCB0aGUgcG9zdHMgd2hpY2ggaGF2ZSB0byBiZSByZWNhbGN1bGF0ZWQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7aW50fSBjdXJyZW50X3BhZ2Vcblx0ICovXG5cdFlvYXN0UmVjYWxjdWxhdGVTY29yZS5wcm90b3R5cGUuZ2V0SXRlbXNUb1JlY2FsY3VsYXRlID0gZnVuY3Rpb24oIGN1cnJlbnRfcGFnZSApIHtcblx0XHRqUXVlcnkucG9zdChcblx0XHRcdGFqYXh1cmwsXG5cdFx0XHR7XG5cdFx0XHRcdGFjdGlvbjogXCJ3cHNlb19yZWNhbGN1bGF0ZV9zY29yZXNcIixcblx0XHRcdFx0bm9uY2U6IGpRdWVyeSggXCIjd3BzZW9fcmVjYWxjdWxhdGVfbm9uY2VcIiApLnZhbCgpLFxuXHRcdFx0XHRwYWdlZDogY3VycmVudF9wYWdlLFxuXHRcdFx0XHR0eXBlOiB0aGlzLmZldGNoX3R5cGUsXG5cdFx0XHR9LFxuXHRcdFx0dGhpcy5wYXJzZVJlc3BvbnNlLmJpbmQoIHRoaXMgKSxcblx0XHRcdFwianNvblwiXG5cdFx0KTtcblx0fTtcblxuXHQvKipcblx0ICogU3RhcnRpbmcgdGhlIHJlY2FsY3VsYXRpb24gcHJvY2Vzc1xuXHQgKlxuXHQgKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2Vcblx0ICovXG5cdGZ1bmN0aW9uIHN0YXJ0X3JlY2FsY3VsYXRlKCByZXNwb25zZSApIHtcblx0XHR2YXIgUG9zdHNUb0ZldGNoID0gcGFyc2VJbnQoIHJlc3BvbnNlLnBvc3RzLCAxMCApO1xuXHRcdHZhciBUZXJtc1RvRmV0Y2ggPSBwYXJzZUludCggcmVzcG9uc2UudGVybXMsIDEwICk7XG5cblx0XHR2YXIgUmVjYWxjdWxhdGVTY29yZSA9IG5ldyBZb2FzdFJlY2FsY3VsYXRlU2NvcmUoIFBvc3RzVG9GZXRjaCArIFRlcm1zVG9GZXRjaCApO1xuXG5cdFx0UmVjYWxjdWxhdGVTY29yZS5zdGFydCggUG9zdHNUb0ZldGNoLCBcInBvc3RcIiwgXCJwb3N0X2lkXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0UmVjYWxjdWxhdGVTY29yZS5zdGFydCggVGVybXNUb0ZldGNoLCBcInRlcm1cIiwgXCJ0ZXJtX2lkXCIsIGZhbHNlICk7XG5cdFx0fSApO1xuXHR9XG5cblx0LyoqXG5cdCAqIEluaXRpYWxpemVzIHRoZSBldmVudCBoYW5kbGVyIGZvciB0aGUgcmVjYWxjdWxhdGUgYnV0dG9uLlxuXHQgKi9cblx0ZnVuY3Rpb24gaW5pdCgpIHtcblx0XHR2YXIgcmVjYWxjdWxhdGVfbGluayA9IGpRdWVyeSggXCIjd3BzZW9fcmVjYWxjdWxhdGVfbGlua1wiICk7XG5cblx0XHRpZiAoICEgaXNVbmRlZmluZWQoIHJlY2FsY3VsYXRlX2xpbmsgKSApIHtcblx0XHRcdHJlY2FsY3VsYXRlX2xpbmsuY2xpY2soXG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdC8vIFJlc2V0IHRoZSBjb3VudCBlbGVtZW50IGFuZCB0aGUgcHJvZ3Jlc3NiYXJcblx0XHRcdFx0XHRqUXVlcnkoIFwiI3dwc2VvX2NvdW50XCIgKS50ZXh0KCAwICk7XG5cblx0XHRcdFx0XHQkLnBvc3QoXG5cdFx0XHRcdFx0XHRhamF4dXJsLFxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRhY3Rpb246IFwid3BzZW9fcmVjYWxjdWxhdGVfdG90YWxcIixcblx0XHRcdFx0XHRcdFx0bm9uY2U6IGpRdWVyeSggXCIjd3BzZW9fcmVjYWxjdWxhdGVfbm9uY2VcIiApLnZhbCgpLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdHN0YXJ0X3JlY2FsY3VsYXRlLFxuXHRcdFx0XHRcdFx0XCJqc29uXCJcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cdFx0XHQpO1xuXG5cdFx0XHRpZiAoIHJlY2FsY3VsYXRlX2xpbmsuZGF0YSggXCJvcGVuXCIgKSApIHtcblx0XHRcdFx0cmVjYWxjdWxhdGVfbGluay50cmlnZ2VyKCBcImNsaWNrXCIgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQkKCBpbml0ICk7XG59KCBqUXVlcnkgKSApO1xuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGlzIG5vdCBkZWZpbmVkJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaXMgbm90IGRlZmluZWQnKTtcbiAgICAgICAgfVxuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCJpZiAodHlwZW9mIE9iamVjdC5jcmVhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgLy8gaW1wbGVtZW50YXRpb24gZnJvbSBzdGFuZGFyZCBub2RlLmpzICd1dGlsJyBtb2R1bGVcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgIGN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckN0b3IucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogY3RvcixcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbn0gZWxzZSB7XG4gIC8vIG9sZCBzY2hvb2wgc2hpbSBmb3Igb2xkIGJyb3dzZXJzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICB2YXIgVGVtcEN0b3IgPSBmdW5jdGlvbiAoKSB7fVxuICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGVcbiAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpXG4gICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yXG4gIH1cbn1cbiIsIi8qKlxuICogQHByZXNlcnZlIGplZC5qcyBodHRwczovL2dpdGh1Yi5jb20vU2xleEF4dG9uL0plZFxuICovXG4vKlxuLS0tLS0tLS0tLS1cbkEgZ2V0dGV4dCBjb21wYXRpYmxlIGkxOG4gbGlicmFyeSBmb3IgbW9kZXJuIEphdmFTY3JpcHQgQXBwbGljYXRpb25zXG5cbmJ5IEFsZXggU2V4dG9uIC0gQWxleFNleHRvbiBbYXRdIGdtYWlsIC0gQFNsZXhBeHRvblxuV1RGUEwgbGljZW5zZSBmb3IgdXNlXG5Eb2pvIENMQSBmb3IgY29udHJpYnV0aW9uc1xuXG5KZWQgb2ZmZXJzIHRoZSBlbnRpcmUgYXBwbGljYWJsZSBHTlUgZ2V0dGV4dCBzcGVjJ2Qgc2V0IG9mXG5mdW5jdGlvbnMsIGJ1dCBhbHNvIG9mZmVycyBzb21lIG5pY2VyIHdyYXBwZXJzIGFyb3VuZCB0aGVtLlxuVGhlIGFwaSBmb3IgZ2V0dGV4dCB3YXMgd3JpdHRlbiBmb3IgYSBsYW5ndWFnZSB3aXRoIG5vIGZ1bmN0aW9uXG5vdmVybG9hZGluZywgc28gSmVkIGFsbG93cyBhIGxpdHRsZSBtb3JlIG9mIHRoYXQuXG5cbk1hbnkgdGhhbmtzIHRvIEpvc2h1YSBJLiBNaWxsZXIgLSB1bnJ0c3RAY3Bhbi5vcmcgLSB3aG8gd3JvdGVcbmdldHRleHQuanMgYmFjayBpbiAyMDA4LiBJIHdhcyBhYmxlIHRvIHZldCBhIGxvdCBvZiBteSBpZGVhc1xuYWdhaW5zdCBoaXMuIEkgYWxzbyBtYWRlIHN1cmUgSmVkIHBhc3NlZCBhZ2FpbnN0IGhpcyB0ZXN0c1xuaW4gb3JkZXIgdG8gb2ZmZXIgZWFzeSB1cGdyYWRlcyAtLSBqc2dldHRleHQuYmVybGlvcy5kZVxuKi9cbihmdW5jdGlvbiAocm9vdCwgdW5kZWYpIHtcblxuICAvLyBTZXQgdXAgc29tZSB1bmRlcnNjb3JlLXN0eWxlIGZ1bmN0aW9ucywgaWYgeW91IGFscmVhZHkgaGF2ZVxuICAvLyB1bmRlcnNjb3JlLCBmZWVsIGZyZWUgdG8gZGVsZXRlIHRoaXMgc2VjdGlvbiwgYW5kIHVzZSBpdFxuICAvLyBkaXJlY3RseSwgaG93ZXZlciwgdGhlIGFtb3VudCBvZiBmdW5jdGlvbnMgdXNlZCBkb2Vzbid0XG4gIC8vIHdhcnJhbnQgaGF2aW5nIHVuZGVyc2NvcmUgYXMgYSBmdWxsIGRlcGVuZGVuY3kuXG4gIC8vIFVuZGVyc2NvcmUgMS4zLjAgd2FzIHVzZWQgdG8gcG9ydCBhbmQgaXMgbGljZW5zZWRcbiAgLy8gdW5kZXIgdGhlIE1JVCBMaWNlbnNlIGJ5IEplcmVteSBBc2hrZW5hcy5cbiAgdmFyIEFycmF5UHJvdG8gICAgPSBBcnJheS5wcm90b3R5cGUsXG4gICAgICBPYmpQcm90byAgICAgID0gT2JqZWN0LnByb3RvdHlwZSxcbiAgICAgIHNsaWNlICAgICAgICAgPSBBcnJheVByb3RvLnNsaWNlLFxuICAgICAgaGFzT3duUHJvcCAgICA9IE9ialByb3RvLmhhc093blByb3BlcnR5LFxuICAgICAgbmF0aXZlRm9yRWFjaCA9IEFycmF5UHJvdG8uZm9yRWFjaCxcbiAgICAgIGJyZWFrZXIgICAgICAgPSB7fTtcblxuICAvLyBXZSdyZSBub3QgdXNpbmcgdGhlIE9PUCBzdHlsZSBfIHNvIHdlIGRvbid0IG5lZWQgdGhlXG4gIC8vIGV4dHJhIGxldmVsIG9mIGluZGlyZWN0aW9uLiBUaGlzIHN0aWxsIG1lYW5zIHRoYXQgeW91XG4gIC8vIHN1YiBvdXQgZm9yIHJlYWwgYF9gIHRob3VnaC5cbiAgdmFyIF8gPSB7XG4gICAgZm9yRWFjaCA6IGZ1bmN0aW9uKCBvYmosIGl0ZXJhdG9yLCBjb250ZXh0ICkge1xuICAgICAgdmFyIGksIGwsIGtleTtcbiAgICAgIGlmICggb2JqID09PSBudWxsICkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICggbmF0aXZlRm9yRWFjaCAmJiBvYmouZm9yRWFjaCA9PT0gbmF0aXZlRm9yRWFjaCApIHtcbiAgICAgICAgb2JqLmZvckVhY2goIGl0ZXJhdG9yLCBjb250ZXh0ICk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmICggb2JqLmxlbmd0aCA9PT0gK29iai5sZW5ndGggKSB7XG4gICAgICAgIGZvciAoIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcbiAgICAgICAgICBpZiAoIGkgaW4gb2JqICYmIGl0ZXJhdG9yLmNhbGwoIGNvbnRleHQsIG9ialtpXSwgaSwgb2JqICkgPT09IGJyZWFrZXIgKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgZm9yICgga2V5IGluIG9iaikge1xuICAgICAgICAgIGlmICggaGFzT3duUHJvcC5jYWxsKCBvYmosIGtleSApICkge1xuICAgICAgICAgICAgaWYgKCBpdGVyYXRvci5jYWxsIChjb250ZXh0LCBvYmpba2V5XSwga2V5LCBvYmogKSA9PT0gYnJlYWtlciApIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgZXh0ZW5kIDogZnVuY3Rpb24oIG9iaiApIHtcbiAgICAgIHRoaXMuZm9yRWFjaCggc2xpY2UuY2FsbCggYXJndW1lbnRzLCAxICksIGZ1bmN0aW9uICggc291cmNlICkge1xuICAgICAgICBmb3IgKCB2YXIgcHJvcCBpbiBzb3VyY2UgKSB7XG4gICAgICAgICAgb2JqW3Byb3BdID0gc291cmNlW3Byb3BdO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuICB9O1xuICAvLyBFTkQgTWluaWF0dXJlIHVuZGVyc2NvcmUgaW1wbFxuXG4gIC8vIEplZCBpcyBhIGNvbnN0cnVjdG9yIGZ1bmN0aW9uXG4gIHZhciBKZWQgPSBmdW5jdGlvbiAoIG9wdGlvbnMgKSB7XG4gICAgLy8gU29tZSBtaW5pbWFsIGRlZmF1bHRzXG4gICAgdGhpcy5kZWZhdWx0cyA9IHtcbiAgICAgIFwibG9jYWxlX2RhdGFcIiA6IHtcbiAgICAgICAgXCJtZXNzYWdlc1wiIDoge1xuICAgICAgICAgIFwiXCIgOiB7XG4gICAgICAgICAgICBcImRvbWFpblwiICAgICAgIDogXCJtZXNzYWdlc1wiLFxuICAgICAgICAgICAgXCJsYW5nXCIgICAgICAgICA6IFwiZW5cIixcbiAgICAgICAgICAgIFwicGx1cmFsX2Zvcm1zXCIgOiBcIm5wbHVyYWxzPTI7IHBsdXJhbD0obiAhPSAxKTtcIlxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBUaGVyZSBhcmUgbm8gZGVmYXVsdCBrZXlzLCB0aG91Z2hcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIFRoZSBkZWZhdWx0IGRvbWFpbiBpZiBvbmUgaXMgbWlzc2luZ1xuICAgICAgXCJkb21haW5cIiA6IFwibWVzc2FnZXNcIixcbiAgICAgIC8vIGVuYWJsZSBkZWJ1ZyBtb2RlIHRvIGxvZyB1bnRyYW5zbGF0ZWQgc3RyaW5ncyB0byB0aGUgY29uc29sZVxuICAgICAgXCJkZWJ1Z1wiIDogZmFsc2VcbiAgICB9O1xuXG4gICAgLy8gTWl4IGluIHRoZSBzZW50IG9wdGlvbnMgd2l0aCB0aGUgZGVmYXVsdCBvcHRpb25zXG4gICAgdGhpcy5vcHRpb25zID0gXy5leHRlbmQoIHt9LCB0aGlzLmRlZmF1bHRzLCBvcHRpb25zICk7XG4gICAgdGhpcy50ZXh0ZG9tYWluKCB0aGlzLm9wdGlvbnMuZG9tYWluICk7XG5cbiAgICBpZiAoIG9wdGlvbnMuZG9tYWluICYmICEgdGhpcy5vcHRpb25zLmxvY2FsZV9kYXRhWyB0aGlzLm9wdGlvbnMuZG9tYWluIF0gKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RleHQgZG9tYWluIHNldCB0byBub24tZXhpc3RlbnQgZG9tYWluOiBgJyArIG9wdGlvbnMuZG9tYWluICsgJ2AnKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gVGhlIGdldHRleHQgc3BlYyBzZXRzIHRoaXMgY2hhcmFjdGVyIGFzIHRoZSBkZWZhdWx0XG4gIC8vIGRlbGltaXRlciBmb3IgY29udGV4dCBsb29rdXBzLlxuICAvLyBlLmcuOiBjb250ZXh0XFx1MDAwNGtleVxuICAvLyBJZiB5b3VyIHRyYW5zbGF0aW9uIGNvbXBhbnkgdXNlcyBzb21ldGhpbmcgZGlmZmVyZW50LFxuICAvLyBqdXN0IGNoYW5nZSB0aGlzIGF0IGFueSB0aW1lIGFuZCBpdCB3aWxsIHVzZSB0aGF0IGluc3RlYWQuXG4gIEplZC5jb250ZXh0X2RlbGltaXRlciA9IFN0cmluZy5mcm9tQ2hhckNvZGUoIDQgKTtcblxuICBmdW5jdGlvbiBnZXRQbHVyYWxGb3JtRnVuYyAoIHBsdXJhbF9mb3JtX3N0cmluZyApIHtcbiAgICByZXR1cm4gSmVkLlBGLmNvbXBpbGUoIHBsdXJhbF9mb3JtX3N0cmluZyB8fCBcIm5wbHVyYWxzPTI7IHBsdXJhbD0obiAhPSAxKTtcIik7XG4gIH1cblxuICBmdW5jdGlvbiBDaGFpbigga2V5LCBpMThuICl7XG4gICAgdGhpcy5fa2V5ID0ga2V5O1xuICAgIHRoaXMuX2kxOG4gPSBpMThuO1xuICB9XG5cbiAgLy8gQ3JlYXRlIGEgY2hhaW5hYmxlIGFwaSBmb3IgYWRkaW5nIGFyZ3MgcHJldHRpbHlcbiAgXy5leHRlbmQoIENoYWluLnByb3RvdHlwZSwge1xuICAgIG9uRG9tYWluIDogZnVuY3Rpb24gKCBkb21haW4gKSB7XG4gICAgICB0aGlzLl9kb21haW4gPSBkb21haW47XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIHdpdGhDb250ZXh0IDogZnVuY3Rpb24gKCBjb250ZXh0ICkge1xuICAgICAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGlmUGx1cmFsIDogZnVuY3Rpb24gKCBudW0sIHBrZXkgKSB7XG4gICAgICB0aGlzLl92YWwgPSBudW07XG4gICAgICB0aGlzLl9wa2V5ID0gcGtleTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgZmV0Y2ggOiBmdW5jdGlvbiAoIHNBcnIgKSB7XG4gICAgICBpZiAoIHt9LnRvU3RyaW5nLmNhbGwoIHNBcnIgKSAhPSAnW29iamVjdCBBcnJheV0nICkge1xuICAgICAgICBzQXJyID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuICAgICAgfVxuICAgICAgcmV0dXJuICggc0FyciAmJiBzQXJyLmxlbmd0aCA/IEplZC5zcHJpbnRmIDogZnVuY3Rpb24oeCl7IHJldHVybiB4OyB9ICkoXG4gICAgICAgIHRoaXMuX2kxOG4uZGNucGdldHRleHQodGhpcy5fZG9tYWluLCB0aGlzLl9jb250ZXh0LCB0aGlzLl9rZXksIHRoaXMuX3BrZXksIHRoaXMuX3ZhbCksXG4gICAgICAgIHNBcnJcbiAgICAgICk7XG4gICAgfVxuICB9KTtcblxuICAvLyBBZGQgZnVuY3Rpb25zIHRvIHRoZSBKZWQgcHJvdG90eXBlLlxuICAvLyBUaGVzZSB3aWxsIGJlIHRoZSBmdW5jdGlvbnMgb24gdGhlIG9iamVjdCB0aGF0J3MgcmV0dXJuZWRcbiAgLy8gZnJvbSBjcmVhdGluZyBhIGBuZXcgSmVkKClgXG4gIC8vIFRoZXNlIHNlZW0gcmVkdW5kYW50LCBidXQgdGhleSBnemlwIHByZXR0eSB3ZWxsLlxuICBfLmV4dGVuZCggSmVkLnByb3RvdHlwZSwge1xuICAgIC8vIFRoZSBzZXhpZXIgYXBpIHN0YXJ0IHBvaW50XG4gICAgdHJhbnNsYXRlIDogZnVuY3Rpb24gKCBrZXkgKSB7XG4gICAgICByZXR1cm4gbmV3IENoYWluKCBrZXksIHRoaXMgKTtcbiAgICB9LFxuXG4gICAgdGV4dGRvbWFpbiA6IGZ1bmN0aW9uICggZG9tYWluICkge1xuICAgICAgaWYgKCAhIGRvbWFpbiApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RleHRkb21haW47XG4gICAgICB9XG4gICAgICB0aGlzLl90ZXh0ZG9tYWluID0gZG9tYWluO1xuICAgIH0sXG5cbiAgICBnZXR0ZXh0IDogZnVuY3Rpb24gKCBrZXkgKSB7XG4gICAgICByZXR1cm4gdGhpcy5kY25wZ2V0dGV4dC5jYWxsKCB0aGlzLCB1bmRlZiwgdW5kZWYsIGtleSApO1xuICAgIH0sXG5cbiAgICBkZ2V0dGV4dCA6IGZ1bmN0aW9uICggZG9tYWluLCBrZXkgKSB7XG4gICAgIHJldHVybiB0aGlzLmRjbnBnZXR0ZXh0LmNhbGwoIHRoaXMsIGRvbWFpbiwgdW5kZWYsIGtleSApO1xuICAgIH0sXG5cbiAgICBkY2dldHRleHQgOiBmdW5jdGlvbiAoIGRvbWFpbiAsIGtleSAvKiwgY2F0ZWdvcnkgKi8gKSB7XG4gICAgICAvLyBJZ25vcmVzIHRoZSBjYXRlZ29yeSBhbnl3YXlzXG4gICAgICByZXR1cm4gdGhpcy5kY25wZ2V0dGV4dC5jYWxsKCB0aGlzLCBkb21haW4sIHVuZGVmLCBrZXkgKTtcbiAgICB9LFxuXG4gICAgbmdldHRleHQgOiBmdW5jdGlvbiAoIHNrZXksIHBrZXksIHZhbCApIHtcbiAgICAgIHJldHVybiB0aGlzLmRjbnBnZXR0ZXh0LmNhbGwoIHRoaXMsIHVuZGVmLCB1bmRlZiwgc2tleSwgcGtleSwgdmFsICk7XG4gICAgfSxcblxuICAgIGRuZ2V0dGV4dCA6IGZ1bmN0aW9uICggZG9tYWluLCBza2V5LCBwa2V5LCB2YWwgKSB7XG4gICAgICByZXR1cm4gdGhpcy5kY25wZ2V0dGV4dC5jYWxsKCB0aGlzLCBkb21haW4sIHVuZGVmLCBza2V5LCBwa2V5LCB2YWwgKTtcbiAgICB9LFxuXG4gICAgZGNuZ2V0dGV4dCA6IGZ1bmN0aW9uICggZG9tYWluLCBza2V5LCBwa2V5LCB2YWwvKiwgY2F0ZWdvcnkgKi8pIHtcbiAgICAgIHJldHVybiB0aGlzLmRjbnBnZXR0ZXh0LmNhbGwoIHRoaXMsIGRvbWFpbiwgdW5kZWYsIHNrZXksIHBrZXksIHZhbCApO1xuICAgIH0sXG5cbiAgICBwZ2V0dGV4dCA6IGZ1bmN0aW9uICggY29udGV4dCwga2V5ICkge1xuICAgICAgcmV0dXJuIHRoaXMuZGNucGdldHRleHQuY2FsbCggdGhpcywgdW5kZWYsIGNvbnRleHQsIGtleSApO1xuICAgIH0sXG5cbiAgICBkcGdldHRleHQgOiBmdW5jdGlvbiAoIGRvbWFpbiwgY29udGV4dCwga2V5ICkge1xuICAgICAgcmV0dXJuIHRoaXMuZGNucGdldHRleHQuY2FsbCggdGhpcywgZG9tYWluLCBjb250ZXh0LCBrZXkgKTtcbiAgICB9LFxuXG4gICAgZGNwZ2V0dGV4dCA6IGZ1bmN0aW9uICggZG9tYWluLCBjb250ZXh0LCBrZXkvKiwgY2F0ZWdvcnkgKi8pIHtcbiAgICAgIHJldHVybiB0aGlzLmRjbnBnZXR0ZXh0LmNhbGwoIHRoaXMsIGRvbWFpbiwgY29udGV4dCwga2V5ICk7XG4gICAgfSxcblxuICAgIG5wZ2V0dGV4dCA6IGZ1bmN0aW9uICggY29udGV4dCwgc2tleSwgcGtleSwgdmFsICkge1xuICAgICAgcmV0dXJuIHRoaXMuZGNucGdldHRleHQuY2FsbCggdGhpcywgdW5kZWYsIGNvbnRleHQsIHNrZXksIHBrZXksIHZhbCApO1xuICAgIH0sXG5cbiAgICBkbnBnZXR0ZXh0IDogZnVuY3Rpb24gKCBkb21haW4sIGNvbnRleHQsIHNrZXksIHBrZXksIHZhbCApIHtcbiAgICAgIHJldHVybiB0aGlzLmRjbnBnZXR0ZXh0LmNhbGwoIHRoaXMsIGRvbWFpbiwgY29udGV4dCwgc2tleSwgcGtleSwgdmFsICk7XG4gICAgfSxcblxuICAgIC8vIFRoZSBtb3N0IGZ1bGx5IHF1YWxpZmllZCBnZXR0ZXh0IGZ1bmN0aW9uLiBJdCBoYXMgZXZlcnkgb3B0aW9uLlxuICAgIC8vIFNpbmNlIGl0IGhhcyBldmVyeSBvcHRpb24sIHdlIGNhbiB1c2UgaXQgZnJvbSBldmVyeSBvdGhlciBtZXRob2QuXG4gICAgLy8gVGhpcyBpcyB0aGUgYnJlYWQgYW5kIGJ1dHRlci5cbiAgICAvLyBUZWNobmljYWxseSB0aGVyZSBzaG91bGQgYmUgb25lIG1vcmUgYXJndW1lbnQgaW4gdGhpcyBmdW5jdGlvbiBmb3IgJ0NhdGVnb3J5JyxcbiAgICAvLyBidXQgc2luY2Ugd2UgbmV2ZXIgdXNlIGl0LCB3ZSBtaWdodCBhcyB3ZWxsIG5vdCB3YXN0ZSB0aGUgYnl0ZXMgdG8gZGVmaW5lIGl0LlxuICAgIGRjbnBnZXR0ZXh0IDogZnVuY3Rpb24gKCBkb21haW4sIGNvbnRleHQsIHNpbmd1bGFyX2tleSwgcGx1cmFsX2tleSwgdmFsICkge1xuICAgICAgLy8gU2V0IHNvbWUgZGVmYXVsdHNcblxuICAgICAgcGx1cmFsX2tleSA9IHBsdXJhbF9rZXkgfHwgc2luZ3VsYXJfa2V5O1xuXG4gICAgICAvLyBVc2UgdGhlIGdsb2JhbCBkb21haW4gZGVmYXVsdCBpZiBvbmVcbiAgICAgIC8vIGlzbid0IGV4cGxpY2l0bHkgcGFzc2VkIGluXG4gICAgICBkb21haW4gPSBkb21haW4gfHwgdGhpcy5fdGV4dGRvbWFpbjtcblxuICAgICAgdmFyIGZhbGxiYWNrO1xuXG4gICAgICAvLyBIYW5kbGUgc3BlY2lhbCBjYXNlc1xuXG4gICAgICAvLyBObyBvcHRpb25zIGZvdW5kXG4gICAgICBpZiAoICEgdGhpcy5vcHRpb25zICkge1xuICAgICAgICAvLyBUaGVyZSdzIGxpa2VseSBzb21ldGhpbmcgd3JvbmcsIGJ1dCB3ZSdsbCByZXR1cm4gdGhlIGNvcnJlY3Qga2V5IGZvciBlbmdsaXNoXG4gICAgICAgIC8vIFdlIGRvIHRoaXMgYnkgaW5zdGFudGlhdGluZyBhIGJyYW5kIG5ldyBKZWQgaW5zdGFuY2Ugd2l0aCB0aGUgZGVmYXVsdCBzZXRcbiAgICAgICAgLy8gZm9yIGV2ZXJ5dGhpbmcgdGhhdCBjb3VsZCBiZSBicm9rZW4uXG4gICAgICAgIGZhbGxiYWNrID0gbmV3IEplZCgpO1xuICAgICAgICByZXR1cm4gZmFsbGJhY2suZGNucGdldHRleHQuY2FsbCggZmFsbGJhY2ssIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBzaW5ndWxhcl9rZXksIHBsdXJhbF9rZXksIHZhbCApO1xuICAgICAgfVxuXG4gICAgICAvLyBObyB0cmFuc2xhdGlvbiBkYXRhIHByb3ZpZGVkXG4gICAgICBpZiAoICEgdGhpcy5vcHRpb25zLmxvY2FsZV9kYXRhICkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGxvY2FsZSBkYXRhIHByb3ZpZGVkLicpO1xuICAgICAgfVxuXG4gICAgICBpZiAoICEgdGhpcy5vcHRpb25zLmxvY2FsZV9kYXRhWyBkb21haW4gXSApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEb21haW4gYCcgKyBkb21haW4gKyAnYCB3YXMgbm90IGZvdW5kLicpO1xuICAgICAgfVxuXG4gICAgICBpZiAoICEgdGhpcy5vcHRpb25zLmxvY2FsZV9kYXRhWyBkb21haW4gXVsgXCJcIiBdICkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGxvY2FsZSBtZXRhIGluZm9ybWF0aW9uIHByb3ZpZGVkLicpO1xuICAgICAgfVxuXG4gICAgICAvLyBNYWtlIHN1cmUgd2UgaGF2ZSBhIHRydXRoeSBrZXkuIE90aGVyd2lzZSB3ZSBtaWdodCBzdGFydCBsb29raW5nXG4gICAgICAvLyBpbnRvIHRoZSBlbXB0eSBzdHJpbmcga2V5LCB3aGljaCBpcyB0aGUgb3B0aW9ucyBmb3IgdGhlIGxvY2FsZVxuICAgICAgLy8gZGF0YS5cbiAgICAgIGlmICggISBzaW5ndWxhcl9rZXkgKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gdHJhbnNsYXRpb24ga2V5IGZvdW5kLicpO1xuICAgICAgfVxuXG4gICAgICB2YXIga2V5ICA9IGNvbnRleHQgPyBjb250ZXh0ICsgSmVkLmNvbnRleHRfZGVsaW1pdGVyICsgc2luZ3VsYXJfa2V5IDogc2luZ3VsYXJfa2V5LFxuICAgICAgICAgIGxvY2FsZV9kYXRhID0gdGhpcy5vcHRpb25zLmxvY2FsZV9kYXRhLFxuICAgICAgICAgIGRpY3QgPSBsb2NhbGVfZGF0YVsgZG9tYWluIF0sXG4gICAgICAgICAgZGVmYXVsdENvbmYgPSAobG9jYWxlX2RhdGEubWVzc2FnZXMgfHwgdGhpcy5kZWZhdWx0cy5sb2NhbGVfZGF0YS5tZXNzYWdlcylbXCJcIl0sXG4gICAgICAgICAgcGx1cmFsRm9ybXMgPSBkaWN0W1wiXCJdLnBsdXJhbF9mb3JtcyB8fCBkaWN0W1wiXCJdW1wiUGx1cmFsLUZvcm1zXCJdIHx8IGRpY3RbXCJcIl1bXCJwbHVyYWwtZm9ybXNcIl0gfHwgZGVmYXVsdENvbmYucGx1cmFsX2Zvcm1zIHx8IGRlZmF1bHRDb25mW1wiUGx1cmFsLUZvcm1zXCJdIHx8IGRlZmF1bHRDb25mW1wicGx1cmFsLWZvcm1zXCJdLFxuICAgICAgICAgIHZhbF9saXN0LFxuICAgICAgICAgIHJlcztcblxuICAgICAgdmFyIHZhbF9pZHg7XG4gICAgICBpZiAodmFsID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gTm8gdmFsdWUgcGFzc2VkIGluOyBhc3N1bWUgc2luZ3VsYXIga2V5IGxvb2t1cC5cbiAgICAgICAgdmFsX2lkeCA9IDA7XG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFZhbHVlIGhhcyBiZWVuIHBhc3NlZCBpbjsgdXNlIHBsdXJhbC1mb3JtcyBjYWxjdWxhdGlvbnMuXG5cbiAgICAgICAgLy8gSGFuZGxlIGludmFsaWQgbnVtYmVycywgYnV0IHRyeSBjYXN0aW5nIHN0cmluZ3MgZm9yIGdvb2QgbWVhc3VyZVxuICAgICAgICBpZiAoIHR5cGVvZiB2YWwgIT0gJ251bWJlcicgKSB7XG4gICAgICAgICAgdmFsID0gcGFyc2VJbnQoIHZhbCwgMTAgKTtcblxuICAgICAgICAgIGlmICggaXNOYU4oIHZhbCApICkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgbnVtYmVyIHRoYXQgd2FzIHBhc3NlZCBpbiBpcyBub3QgYSBudW1iZXIuJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFsX2lkeCA9IGdldFBsdXJhbEZvcm1GdW5jKHBsdXJhbEZvcm1zKSh2YWwpO1xuICAgICAgfVxuXG4gICAgICAvLyBUaHJvdyBhbiBlcnJvciBpZiBhIGRvbWFpbiBpc24ndCBmb3VuZFxuICAgICAgaWYgKCAhIGRpY3QgKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gZG9tYWluIG5hbWVkIGAnICsgZG9tYWluICsgJ2AgY291bGQgYmUgZm91bmQuJyk7XG4gICAgICB9XG5cbiAgICAgIHZhbF9saXN0ID0gZGljdFsga2V5IF07XG5cbiAgICAgIC8vIElmIHRoZXJlIGlzIG5vIG1hdGNoLCB0aGVuIHJldmVydCBiYWNrIHRvXG4gICAgICAvLyBlbmdsaXNoIHN0eWxlIHNpbmd1bGFyL3BsdXJhbCB3aXRoIHRoZSBrZXlzIHBhc3NlZCBpbi5cbiAgICAgIGlmICggISB2YWxfbGlzdCB8fCB2YWxfaWR4ID4gdmFsX2xpc3QubGVuZ3RoICkge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLm1pc3Npbmdfa2V5X2NhbGxiYWNrKSB7XG4gICAgICAgICAgdGhpcy5vcHRpb25zLm1pc3Npbmdfa2V5X2NhbGxiYWNrKGtleSwgZG9tYWluKTtcbiAgICAgICAgfVxuICAgICAgICByZXMgPSBbIHNpbmd1bGFyX2tleSwgcGx1cmFsX2tleSBdO1xuXG4gICAgICAgIC8vIGNvbGxlY3QgdW50cmFuc2xhdGVkIHN0cmluZ3NcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5kZWJ1Zz09PXRydWUpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhyZXNbIGdldFBsdXJhbEZvcm1GdW5jKHBsdXJhbEZvcm1zKSggdmFsICkgXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc1sgZ2V0UGx1cmFsRm9ybUZ1bmMoKSggdmFsICkgXTtcbiAgICAgIH1cblxuICAgICAgcmVzID0gdmFsX2xpc3RbIHZhbF9pZHggXTtcblxuICAgICAgLy8gVGhpcyBpbmNsdWRlcyBlbXB0eSBzdHJpbmdzIG9uIHB1cnBvc2VcbiAgICAgIGlmICggISByZXMgICkge1xuICAgICAgICByZXMgPSBbIHNpbmd1bGFyX2tleSwgcGx1cmFsX2tleSBdO1xuICAgICAgICByZXR1cm4gcmVzWyBnZXRQbHVyYWxGb3JtRnVuYygpKCB2YWwgKSBdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gIH0pO1xuXG5cbiAgLy8gV2UgYWRkIGluIHNwcmludGYgY2FwYWJpbGl0aWVzIGZvciBwb3N0IHRyYW5zbGF0aW9uIHZhbHVlIGludGVyb2xhdGlvblxuICAvLyBUaGlzIGlzIG5vdCBpbnRlcm5hbGx5IHVzZWQsIHNvIHlvdSBjYW4gcmVtb3ZlIGl0IGlmIHlvdSBoYXZlIHRoaXNcbiAgLy8gYXZhaWxhYmxlIHNvbWV3aGVyZSBlbHNlLCBvciB3YW50IHRvIHVzZSBhIGRpZmZlcmVudCBzeXN0ZW0uXG5cbiAgLy8gV2UgX3NsaWdodGx5XyBtb2RpZnkgdGhlIG5vcm1hbCBzcHJpbnRmIGJlaGF2aW9yIHRvIG1vcmUgZ3JhY2VmdWxseSBoYW5kbGVcbiAgLy8gdW5kZWZpbmVkIHZhbHVlcy5cblxuICAvKipcbiAgIHNwcmludGYoKSBmb3IgSmF2YVNjcmlwdCAwLjctYmV0YTFcbiAgIGh0dHA6Ly93d3cuZGl2ZWludG9qYXZhc2NyaXB0LmNvbS9wcm9qZWN0cy9qYXZhc2NyaXB0LXNwcmludGZcblxuICAgQ29weXJpZ2h0IChjKSBBbGV4YW5kcnUgTWFyYXN0ZWFudSA8YWxleGFob2xpYyBbYXQpIGdtYWlsIChkb3RdIGNvbT5cbiAgIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cbiAgIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuICAgbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4gICAgICAgKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodFxuICAgICAgICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuICAgICAgICogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHRcbiAgICAgICAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGVcbiAgICAgICAgIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gICAgICAgKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHNwcmludGYoKSBmb3IgSmF2YVNjcmlwdCBub3IgdGhlXG4gICAgICAgICBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0c1xuICAgICAgICAgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG5cbiAgIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiIEFORFxuICAgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRURcbiAgIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkVcbiAgIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIEFsZXhhbmRydSBNYXJhc3RlYW51IEJFIExJQUJMRSBGT1IgQU5ZXG4gICBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFU1xuICAgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTO1xuICAgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EXG4gICBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVFxuICAgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVNcbiAgIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICAqL1xuICB2YXIgc3ByaW50ZiA9IChmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiBnZXRfdHlwZSh2YXJpYWJsZSkge1xuICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YXJpYWJsZSkuc2xpY2UoOCwgLTEpLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHN0cl9yZXBlYXQoaW5wdXQsIG11bHRpcGxpZXIpIHtcbiAgICAgIGZvciAodmFyIG91dHB1dCA9IFtdOyBtdWx0aXBsaWVyID4gMDsgb3V0cHV0Wy0tbXVsdGlwbGllcl0gPSBpbnB1dCkgey8qIGRvIG5vdGhpbmcgKi99XG4gICAgICByZXR1cm4gb3V0cHV0LmpvaW4oJycpO1xuICAgIH1cblxuICAgIHZhciBzdHJfZm9ybWF0ID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIXN0cl9mb3JtYXQuY2FjaGUuaGFzT3duUHJvcGVydHkoYXJndW1lbnRzWzBdKSkge1xuICAgICAgICBzdHJfZm9ybWF0LmNhY2hlW2FyZ3VtZW50c1swXV0gPSBzdHJfZm9ybWF0LnBhcnNlKGFyZ3VtZW50c1swXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyX2Zvcm1hdC5mb3JtYXQuY2FsbChudWxsLCBzdHJfZm9ybWF0LmNhY2hlW2FyZ3VtZW50c1swXV0sIGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAgIHN0cl9mb3JtYXQuZm9ybWF0ID0gZnVuY3Rpb24ocGFyc2VfdHJlZSwgYXJndikge1xuICAgICAgdmFyIGN1cnNvciA9IDEsIHRyZWVfbGVuZ3RoID0gcGFyc2VfdHJlZS5sZW5ndGgsIG5vZGVfdHlwZSA9ICcnLCBhcmcsIG91dHB1dCA9IFtdLCBpLCBrLCBtYXRjaCwgcGFkLCBwYWRfY2hhcmFjdGVyLCBwYWRfbGVuZ3RoO1xuICAgICAgZm9yIChpID0gMDsgaSA8IHRyZWVfbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbm9kZV90eXBlID0gZ2V0X3R5cGUocGFyc2VfdHJlZVtpXSk7XG4gICAgICAgIGlmIChub2RlX3R5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgb3V0cHV0LnB1c2gocGFyc2VfdHJlZVtpXSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobm9kZV90eXBlID09PSAnYXJyYXknKSB7XG4gICAgICAgICAgbWF0Y2ggPSBwYXJzZV90cmVlW2ldOyAvLyBjb252ZW5pZW5jZSBwdXJwb3NlcyBvbmx5XG4gICAgICAgICAgaWYgKG1hdGNoWzJdKSB7IC8vIGtleXdvcmQgYXJndW1lbnRcbiAgICAgICAgICAgIGFyZyA9IGFyZ3ZbY3Vyc29yXTtcbiAgICAgICAgICAgIGZvciAoayA9IDA7IGsgPCBtYXRjaFsyXS5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgICBpZiAoIWFyZy5oYXNPd25Qcm9wZXJ0eShtYXRjaFsyXVtrXSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyhzcHJpbnRmKCdbc3ByaW50Zl0gcHJvcGVydHkgXCIlc1wiIGRvZXMgbm90IGV4aXN0JywgbWF0Y2hbMl1ba10pKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBhcmcgPSBhcmdbbWF0Y2hbMl1ba11dO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChtYXRjaFsxXSkgeyAvLyBwb3NpdGlvbmFsIGFyZ3VtZW50IChleHBsaWNpdClcbiAgICAgICAgICAgIGFyZyA9IGFyZ3ZbbWF0Y2hbMV1dO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHsgLy8gcG9zaXRpb25hbCBhcmd1bWVudCAoaW1wbGljaXQpXG4gICAgICAgICAgICBhcmcgPSBhcmd2W2N1cnNvcisrXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoL1tec10vLnRlc3QobWF0Y2hbOF0pICYmIChnZXRfdHlwZShhcmcpICE9ICdudW1iZXInKSkge1xuICAgICAgICAgICAgdGhyb3coc3ByaW50ZignW3NwcmludGZdIGV4cGVjdGluZyBudW1iZXIgYnV0IGZvdW5kICVzJywgZ2V0X3R5cGUoYXJnKSkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIEplZCBFRElUXG4gICAgICAgICAgaWYgKCB0eXBlb2YgYXJnID09ICd1bmRlZmluZWQnIHx8IGFyZyA9PT0gbnVsbCApIHtcbiAgICAgICAgICAgIGFyZyA9ICcnO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBKZWQgRURJVFxuXG4gICAgICAgICAgc3dpdGNoIChtYXRjaFs4XSkge1xuICAgICAgICAgICAgY2FzZSAnYic6IGFyZyA9IGFyZy50b1N0cmluZygyKTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdjJzogYXJnID0gU3RyaW5nLmZyb21DaGFyQ29kZShhcmcpOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2QnOiBhcmcgPSBwYXJzZUludChhcmcsIDEwKTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdlJzogYXJnID0gbWF0Y2hbN10gPyBhcmcudG9FeHBvbmVudGlhbChtYXRjaFs3XSkgOiBhcmcudG9FeHBvbmVudGlhbCgpOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2YnOiBhcmcgPSBtYXRjaFs3XSA/IHBhcnNlRmxvYXQoYXJnKS50b0ZpeGVkKG1hdGNoWzddKSA6IHBhcnNlRmxvYXQoYXJnKTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdvJzogYXJnID0gYXJnLnRvU3RyaW5nKDgpOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3MnOiBhcmcgPSAoKGFyZyA9IFN0cmluZyhhcmcpKSAmJiBtYXRjaFs3XSA/IGFyZy5zdWJzdHJpbmcoMCwgbWF0Y2hbN10pIDogYXJnKTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd1JzogYXJnID0gTWF0aC5hYnMoYXJnKTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd4JzogYXJnID0gYXJnLnRvU3RyaW5nKDE2KTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdYJzogYXJnID0gYXJnLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpOyBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgYXJnID0gKC9bZGVmXS8udGVzdChtYXRjaFs4XSkgJiYgbWF0Y2hbM10gJiYgYXJnID49IDAgPyAnKycrIGFyZyA6IGFyZyk7XG4gICAgICAgICAgcGFkX2NoYXJhY3RlciA9IG1hdGNoWzRdID8gbWF0Y2hbNF0gPT0gJzAnID8gJzAnIDogbWF0Y2hbNF0uY2hhckF0KDEpIDogJyAnO1xuICAgICAgICAgIHBhZF9sZW5ndGggPSBtYXRjaFs2XSAtIFN0cmluZyhhcmcpLmxlbmd0aDtcbiAgICAgICAgICBwYWQgPSBtYXRjaFs2XSA/IHN0cl9yZXBlYXQocGFkX2NoYXJhY3RlciwgcGFkX2xlbmd0aCkgOiAnJztcbiAgICAgICAgICBvdXRwdXQucHVzaChtYXRjaFs1XSA/IGFyZyArIHBhZCA6IHBhZCArIGFyZyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBvdXRwdXQuam9pbignJyk7XG4gICAgfTtcblxuICAgIHN0cl9mb3JtYXQuY2FjaGUgPSB7fTtcblxuICAgIHN0cl9mb3JtYXQucGFyc2UgPSBmdW5jdGlvbihmbXQpIHtcbiAgICAgIHZhciBfZm10ID0gZm10LCBtYXRjaCA9IFtdLCBwYXJzZV90cmVlID0gW10sIGFyZ19uYW1lcyA9IDA7XG4gICAgICB3aGlsZSAoX2ZtdCkge1xuICAgICAgICBpZiAoKG1hdGNoID0gL15bXlxceDI1XSsvLmV4ZWMoX2ZtdCkpICE9PSBudWxsKSB7XG4gICAgICAgICAgcGFyc2VfdHJlZS5wdXNoKG1hdGNoWzBdKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgobWF0Y2ggPSAvXlxceDI1ezJ9Ly5leGVjKF9mbXQpKSAhPT0gbnVsbCkge1xuICAgICAgICAgIHBhcnNlX3RyZWUucHVzaCgnJScpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKChtYXRjaCA9IC9eXFx4MjUoPzooWzEtOV1cXGQqKVxcJHxcXCgoW15cXCldKylcXCkpPyhcXCspPygwfCdbXiRdKT8oLSk/KFxcZCspPyg/OlxcLihcXGQrKSk/KFtiLWZvc3V4WF0pLy5leGVjKF9mbXQpKSAhPT0gbnVsbCkge1xuICAgICAgICAgIGlmIChtYXRjaFsyXSkge1xuICAgICAgICAgICAgYXJnX25hbWVzIHw9IDE7XG4gICAgICAgICAgICB2YXIgZmllbGRfbGlzdCA9IFtdLCByZXBsYWNlbWVudF9maWVsZCA9IG1hdGNoWzJdLCBmaWVsZF9tYXRjaCA9IFtdO1xuICAgICAgICAgICAgaWYgKChmaWVsZF9tYXRjaCA9IC9eKFthLXpfXVthLXpfXFxkXSopL2kuZXhlYyhyZXBsYWNlbWVudF9maWVsZCkpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIGZpZWxkX2xpc3QucHVzaChmaWVsZF9tYXRjaFsxXSk7XG4gICAgICAgICAgICAgIHdoaWxlICgocmVwbGFjZW1lbnRfZmllbGQgPSByZXBsYWNlbWVudF9maWVsZC5zdWJzdHJpbmcoZmllbGRfbWF0Y2hbMF0ubGVuZ3RoKSkgIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgaWYgKChmaWVsZF9tYXRjaCA9IC9eXFwuKFthLXpfXVthLXpfXFxkXSopL2kuZXhlYyhyZXBsYWNlbWVudF9maWVsZCkpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICBmaWVsZF9saXN0LnB1c2goZmllbGRfbWF0Y2hbMV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICgoZmllbGRfbWF0Y2ggPSAvXlxcWyhcXGQrKVxcXS8uZXhlYyhyZXBsYWNlbWVudF9maWVsZCkpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICBmaWVsZF9saXN0LnB1c2goZmllbGRfbWF0Y2hbMV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHRocm93KCdbc3ByaW50Zl0gaHVoPycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgIHRocm93KCdbc3ByaW50Zl0gaHVoPycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWF0Y2hbMl0gPSBmaWVsZF9saXN0O1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGFyZ19uYW1lcyB8PSAyO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoYXJnX25hbWVzID09PSAzKSB7XG4gICAgICAgICAgICB0aHJvdygnW3NwcmludGZdIG1peGluZyBwb3NpdGlvbmFsIGFuZCBuYW1lZCBwbGFjZWhvbGRlcnMgaXMgbm90ICh5ZXQpIHN1cHBvcnRlZCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwYXJzZV90cmVlLnB1c2gobWF0Y2gpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHRocm93KCdbc3ByaW50Zl0gaHVoPycpO1xuICAgICAgICB9XG4gICAgICAgIF9mbXQgPSBfZm10LnN1YnN0cmluZyhtYXRjaFswXS5sZW5ndGgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHBhcnNlX3RyZWU7XG4gICAgfTtcblxuICAgIHJldHVybiBzdHJfZm9ybWF0O1xuICB9KSgpO1xuXG4gIHZhciB2c3ByaW50ZiA9IGZ1bmN0aW9uKGZtdCwgYXJndikge1xuICAgIGFyZ3YudW5zaGlmdChmbXQpO1xuICAgIHJldHVybiBzcHJpbnRmLmFwcGx5KG51bGwsIGFyZ3YpO1xuICB9O1xuXG4gIEplZC5wYXJzZV9wbHVyYWwgPSBmdW5jdGlvbiAoIHBsdXJhbF9mb3JtcywgbiApIHtcbiAgICBwbHVyYWxfZm9ybXMgPSBwbHVyYWxfZm9ybXMucmVwbGFjZSgvbi9nLCBuKTtcbiAgICByZXR1cm4gSmVkLnBhcnNlX2V4cHJlc3Npb24ocGx1cmFsX2Zvcm1zKTtcbiAgfTtcblxuICBKZWQuc3ByaW50ZiA9IGZ1bmN0aW9uICggZm10LCBhcmdzICkge1xuICAgIGlmICgge30udG9TdHJpbmcuY2FsbCggYXJncyApID09ICdbb2JqZWN0IEFycmF5XScgKSB7XG4gICAgICByZXR1cm4gdnNwcmludGYoIGZtdCwgW10uc2xpY2UuY2FsbChhcmdzKSApO1xuICAgIH1cbiAgICByZXR1cm4gc3ByaW50Zi5hcHBseSh0aGlzLCBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cykgKTtcbiAgfTtcblxuICBKZWQucHJvdG90eXBlLnNwcmludGYgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIEplZC5zcHJpbnRmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG4gIC8vIEVORCBzcHJpbnRmIEltcGxlbWVudGF0aW9uXG5cbiAgLy8gU3RhcnQgdGhlIFBsdXJhbCBmb3JtcyBzZWN0aW9uXG4gIC8vIFRoaXMgaXMgYSBmdWxsIHBsdXJhbCBmb3JtIGV4cHJlc3Npb24gcGFyc2VyLiBJdCBpcyB1c2VkIHRvIGF2b2lkXG4gIC8vIHJ1bm5pbmcgJ2V2YWwnIG9yICduZXcgRnVuY3Rpb24nIGRpcmVjdGx5IGFnYWluc3QgdGhlIHBsdXJhbFxuICAvLyBmb3Jtcy5cbiAgLy9cbiAgLy8gVGhpcyBjYW4gYmUgaW1wb3J0YW50IGlmIHlvdSBnZXQgdHJhbnNsYXRpb25zIGRvbmUgdGhyb3VnaCBhIDNyZFxuICAvLyBwYXJ0eSB2ZW5kb3IuIEkgZW5jb3VyYWdlIHlvdSB0byB1c2UgdGhpcyBpbnN0ZWFkLCBob3dldmVyLCBJXG4gIC8vIGFsc28gd2lsbCBwcm92aWRlIGEgJ3ByZWNvbXBpbGVyJyB0aGF0IHlvdSBjYW4gdXNlIGF0IGJ1aWxkIHRpbWVcbiAgLy8gdG8gb3V0cHV0IHZhbGlkL3NhZmUgZnVuY3Rpb24gcmVwcmVzZW50YXRpb25zIG9mIHRoZSBwbHVyYWwgZm9ybVxuICAvLyBleHByZXNzaW9ucy4gVGhpcyBtZWFucyB5b3UgY2FuIGJ1aWxkIHRoaXMgY29kZSBvdXQgZm9yIHRoZSBtb3N0XG4gIC8vIHBhcnQuXG4gIEplZC5QRiA9IHt9O1xuXG4gIEplZC5QRi5wYXJzZSA9IGZ1bmN0aW9uICggcCApIHtcbiAgICB2YXIgcGx1cmFsX3N0ciA9IEplZC5QRi5leHRyYWN0UGx1cmFsRXhwciggcCApO1xuICAgIHJldHVybiBKZWQuUEYucGFyc2VyLnBhcnNlLmNhbGwoSmVkLlBGLnBhcnNlciwgcGx1cmFsX3N0cik7XG4gIH07XG5cbiAgSmVkLlBGLmNvbXBpbGUgPSBmdW5jdGlvbiAoIHAgKSB7XG4gICAgLy8gSGFuZGxlIHRydWVzIGFuZCBmYWxzZXMgYXMgMCBhbmQgMVxuICAgIGZ1bmN0aW9uIGltcGx5KCB2YWwgKSB7XG4gICAgICByZXR1cm4gKHZhbCA9PT0gdHJ1ZSA/IDEgOiB2YWwgPyB2YWwgOiAwKTtcbiAgICB9XG5cbiAgICB2YXIgYXN0ID0gSmVkLlBGLnBhcnNlKCBwICk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICggbiApIHtcbiAgICAgIHJldHVybiBpbXBseSggSmVkLlBGLmludGVycHJldGVyKCBhc3QgKSggbiApICk7XG4gICAgfTtcbiAgfTtcblxuICBKZWQuUEYuaW50ZXJwcmV0ZXIgPSBmdW5jdGlvbiAoIGFzdCApIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCBuICkge1xuICAgICAgdmFyIHJlcztcbiAgICAgIHN3aXRjaCAoIGFzdC50eXBlICkge1xuICAgICAgICBjYXNlICdHUk9VUCc6XG4gICAgICAgICAgcmV0dXJuIEplZC5QRi5pbnRlcnByZXRlciggYXN0LmV4cHIgKSggbiApO1xuICAgICAgICBjYXNlICdURVJOQVJZJzpcbiAgICAgICAgICBpZiAoIEplZC5QRi5pbnRlcnByZXRlciggYXN0LmV4cHIgKSggbiApICkge1xuICAgICAgICAgICAgcmV0dXJuIEplZC5QRi5pbnRlcnByZXRlciggYXN0LnRydXRoeSApKCBuICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBKZWQuUEYuaW50ZXJwcmV0ZXIoIGFzdC5mYWxzZXkgKSggbiApO1xuICAgICAgICBjYXNlICdPUic6XG4gICAgICAgICAgcmV0dXJuIEplZC5QRi5pbnRlcnByZXRlciggYXN0LmxlZnQgKSggbiApIHx8IEplZC5QRi5pbnRlcnByZXRlciggYXN0LnJpZ2h0ICkoIG4gKTtcbiAgICAgICAgY2FzZSAnQU5EJzpcbiAgICAgICAgICByZXR1cm4gSmVkLlBGLmludGVycHJldGVyKCBhc3QubGVmdCApKCBuICkgJiYgSmVkLlBGLmludGVycHJldGVyKCBhc3QucmlnaHQgKSggbiApO1xuICAgICAgICBjYXNlICdMVCc6XG4gICAgICAgICAgcmV0dXJuIEplZC5QRi5pbnRlcnByZXRlciggYXN0LmxlZnQgKSggbiApIDwgSmVkLlBGLmludGVycHJldGVyKCBhc3QucmlnaHQgKSggbiApO1xuICAgICAgICBjYXNlICdHVCc6XG4gICAgICAgICAgcmV0dXJuIEplZC5QRi5pbnRlcnByZXRlciggYXN0LmxlZnQgKSggbiApID4gSmVkLlBGLmludGVycHJldGVyKCBhc3QucmlnaHQgKSggbiApO1xuICAgICAgICBjYXNlICdMVEUnOlxuICAgICAgICAgIHJldHVybiBKZWQuUEYuaW50ZXJwcmV0ZXIoIGFzdC5sZWZ0ICkoIG4gKSA8PSBKZWQuUEYuaW50ZXJwcmV0ZXIoIGFzdC5yaWdodCApKCBuICk7XG4gICAgICAgIGNhc2UgJ0dURSc6XG4gICAgICAgICAgcmV0dXJuIEplZC5QRi5pbnRlcnByZXRlciggYXN0LmxlZnQgKSggbiApID49IEplZC5QRi5pbnRlcnByZXRlciggYXN0LnJpZ2h0ICkoIG4gKTtcbiAgICAgICAgY2FzZSAnRVEnOlxuICAgICAgICAgIHJldHVybiBKZWQuUEYuaW50ZXJwcmV0ZXIoIGFzdC5sZWZ0ICkoIG4gKSA9PSBKZWQuUEYuaW50ZXJwcmV0ZXIoIGFzdC5yaWdodCApKCBuICk7XG4gICAgICAgIGNhc2UgJ05FUSc6XG4gICAgICAgICAgcmV0dXJuIEplZC5QRi5pbnRlcnByZXRlciggYXN0LmxlZnQgKSggbiApICE9IEplZC5QRi5pbnRlcnByZXRlciggYXN0LnJpZ2h0ICkoIG4gKTtcbiAgICAgICAgY2FzZSAnTU9EJzpcbiAgICAgICAgICByZXR1cm4gSmVkLlBGLmludGVycHJldGVyKCBhc3QubGVmdCApKCBuICkgJSBKZWQuUEYuaW50ZXJwcmV0ZXIoIGFzdC5yaWdodCApKCBuICk7XG4gICAgICAgIGNhc2UgJ1ZBUic6XG4gICAgICAgICAgcmV0dXJuIG47XG4gICAgICAgIGNhc2UgJ05VTSc6XG4gICAgICAgICAgcmV0dXJuIGFzdC52YWw7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBUb2tlbiBmb3VuZC5cIik7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICBKZWQuUEYuZXh0cmFjdFBsdXJhbEV4cHIgPSBmdW5jdGlvbiAoIHAgKSB7XG4gICAgLy8gdHJpbSBmaXJzdFxuICAgIHAgPSBwLnJlcGxhY2UoL15cXHNcXHMqLywgJycpLnJlcGxhY2UoL1xcc1xccyokLywgJycpO1xuXG4gICAgaWYgKCEgLztcXHMqJC8udGVzdChwKSkge1xuICAgICAgcCA9IHAuY29uY2F0KCc7Jyk7XG4gICAgfVxuXG4gICAgdmFyIG5wbHVyYWxzX3JlID0gL25wbHVyYWxzXFw9KFxcZCspOy8sXG4gICAgICAgIHBsdXJhbF9yZSA9IC9wbHVyYWxcXD0oLiopOy8sXG4gICAgICAgIG5wbHVyYWxzX21hdGNoZXMgPSBwLm1hdGNoKCBucGx1cmFsc19yZSApLFxuICAgICAgICByZXMgPSB7fSxcbiAgICAgICAgcGx1cmFsX21hdGNoZXM7XG5cbiAgICAvLyBGaW5kIHRoZSBucGx1cmFscyBudW1iZXJcbiAgICBpZiAoIG5wbHVyYWxzX21hdGNoZXMubGVuZ3RoID4gMSApIHtcbiAgICAgIHJlcy5ucGx1cmFscyA9IG5wbHVyYWxzX21hdGNoZXNbMV07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCducGx1cmFscyBub3QgZm91bmQgaW4gcGx1cmFsX2Zvcm1zIHN0cmluZzogJyArIHAgKTtcbiAgICB9XG5cbiAgICAvLyByZW1vdmUgdGhhdCBkYXRhIHRvIGdldCB0byB0aGUgZm9ybXVsYVxuICAgIHAgPSBwLnJlcGxhY2UoIG5wbHVyYWxzX3JlLCBcIlwiICk7XG4gICAgcGx1cmFsX21hdGNoZXMgPSBwLm1hdGNoKCBwbHVyYWxfcmUgKTtcblxuICAgIGlmICghKCBwbHVyYWxfbWF0Y2hlcyAmJiBwbHVyYWxfbWF0Y2hlcy5sZW5ndGggPiAxICkgKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2BwbHVyYWxgIGV4cHJlc3Npb24gbm90IGZvdW5kOiAnICsgcCk7XG4gICAgfVxuICAgIHJldHVybiBwbHVyYWxfbWF0Y2hlc1sgMSBdO1xuICB9O1xuXG4gIC8qIEppc29uIGdlbmVyYXRlZCBwYXJzZXIgKi9cbiAgSmVkLlBGLnBhcnNlciA9IChmdW5jdGlvbigpe1xuXG52YXIgcGFyc2VyID0ge3RyYWNlOiBmdW5jdGlvbiB0cmFjZSgpIHsgfSxcbnl5OiB7fSxcbnN5bWJvbHNfOiB7XCJlcnJvclwiOjIsXCJleHByZXNzaW9uc1wiOjMsXCJlXCI6NCxcIkVPRlwiOjUsXCI/XCI6NixcIjpcIjo3LFwifHxcIjo4LFwiJiZcIjo5LFwiPFwiOjEwLFwiPD1cIjoxMSxcIj5cIjoxMixcIj49XCI6MTMsXCIhPVwiOjE0LFwiPT1cIjoxNSxcIiVcIjoxNixcIihcIjoxNyxcIilcIjoxOCxcIm5cIjoxOSxcIk5VTUJFUlwiOjIwLFwiJGFjY2VwdFwiOjAsXCIkZW5kXCI6MX0sXG50ZXJtaW5hbHNfOiB7MjpcImVycm9yXCIsNTpcIkVPRlwiLDY6XCI/XCIsNzpcIjpcIiw4OlwifHxcIiw5OlwiJiZcIiwxMDpcIjxcIiwxMTpcIjw9XCIsMTI6XCI+XCIsMTM6XCI+PVwiLDE0OlwiIT1cIiwxNTpcIj09XCIsMTY6XCIlXCIsMTc6XCIoXCIsMTg6XCIpXCIsMTk6XCJuXCIsMjA6XCJOVU1CRVJcIn0sXG5wcm9kdWN0aW9uc186IFswLFszLDJdLFs0LDVdLFs0LDNdLFs0LDNdLFs0LDNdLFs0LDNdLFs0LDNdLFs0LDNdLFs0LDNdLFs0LDNdLFs0LDNdLFs0LDNdLFs0LDFdLFs0LDFdXSxcbnBlcmZvcm1BY3Rpb246IGZ1bmN0aW9uIGFub255bW91cyh5eXRleHQseXlsZW5nLHl5bGluZW5vLHl5LHl5c3RhdGUsJCQsXyQpIHtcblxudmFyICQwID0gJCQubGVuZ3RoIC0gMTtcbnN3aXRjaCAoeXlzdGF0ZSkge1xuY2FzZSAxOiByZXR1cm4geyB0eXBlIDogJ0dST1VQJywgZXhwcjogJCRbJDAtMV0gfTtcbmJyZWFrO1xuY2FzZSAyOnRoaXMuJCA9IHsgdHlwZTogJ1RFUk5BUlknLCBleHByOiAkJFskMC00XSwgdHJ1dGh5IDogJCRbJDAtMl0sIGZhbHNleTogJCRbJDBdIH07XG5icmVhaztcbmNhc2UgMzp0aGlzLiQgPSB7IHR5cGU6IFwiT1JcIiwgbGVmdDogJCRbJDAtMl0sIHJpZ2h0OiAkJFskMF0gfTtcbmJyZWFrO1xuY2FzZSA0OnRoaXMuJCA9IHsgdHlwZTogXCJBTkRcIiwgbGVmdDogJCRbJDAtMl0sIHJpZ2h0OiAkJFskMF0gfTtcbmJyZWFrO1xuY2FzZSA1OnRoaXMuJCA9IHsgdHlwZTogJ0xUJywgbGVmdDogJCRbJDAtMl0sIHJpZ2h0OiAkJFskMF0gfTtcbmJyZWFrO1xuY2FzZSA2OnRoaXMuJCA9IHsgdHlwZTogJ0xURScsIGxlZnQ6ICQkWyQwLTJdLCByaWdodDogJCRbJDBdIH07XG5icmVhaztcbmNhc2UgNzp0aGlzLiQgPSB7IHR5cGU6ICdHVCcsIGxlZnQ6ICQkWyQwLTJdLCByaWdodDogJCRbJDBdIH07XG5icmVhaztcbmNhc2UgODp0aGlzLiQgPSB7IHR5cGU6ICdHVEUnLCBsZWZ0OiAkJFskMC0yXSwgcmlnaHQ6ICQkWyQwXSB9O1xuYnJlYWs7XG5jYXNlIDk6dGhpcy4kID0geyB0eXBlOiAnTkVRJywgbGVmdDogJCRbJDAtMl0sIHJpZ2h0OiAkJFskMF0gfTtcbmJyZWFrO1xuY2FzZSAxMDp0aGlzLiQgPSB7IHR5cGU6ICdFUScsIGxlZnQ6ICQkWyQwLTJdLCByaWdodDogJCRbJDBdIH07XG5icmVhaztcbmNhc2UgMTE6dGhpcy4kID0geyB0eXBlOiAnTU9EJywgbGVmdDogJCRbJDAtMl0sIHJpZ2h0OiAkJFskMF0gfTtcbmJyZWFrO1xuY2FzZSAxMjp0aGlzLiQgPSB7IHR5cGU6ICdHUk9VUCcsIGV4cHI6ICQkWyQwLTFdIH07XG5icmVhaztcbmNhc2UgMTM6dGhpcy4kID0geyB0eXBlOiAnVkFSJyB9O1xuYnJlYWs7XG5jYXNlIDE0OnRoaXMuJCA9IHsgdHlwZTogJ05VTScsIHZhbDogTnVtYmVyKHl5dGV4dCkgfTtcbmJyZWFrO1xufVxufSxcbnRhYmxlOiBbezM6MSw0OjIsMTc6WzEsM10sMTk6WzEsNF0sMjA6WzEsNV19LHsxOlszXX0sezU6WzEsNl0sNjpbMSw3XSw4OlsxLDhdLDk6WzEsOV0sMTA6WzEsMTBdLDExOlsxLDExXSwxMjpbMSwxMl0sMTM6WzEsMTNdLDE0OlsxLDE0XSwxNTpbMSwxNV0sMTY6WzEsMTZdfSx7NDoxNywxNzpbMSwzXSwxOTpbMSw0XSwyMDpbMSw1XX0sezU6WzIsMTNdLDY6WzIsMTNdLDc6WzIsMTNdLDg6WzIsMTNdLDk6WzIsMTNdLDEwOlsyLDEzXSwxMTpbMiwxM10sMTI6WzIsMTNdLDEzOlsyLDEzXSwxNDpbMiwxM10sMTU6WzIsMTNdLDE2OlsyLDEzXSwxODpbMiwxM119LHs1OlsyLDE0XSw2OlsyLDE0XSw3OlsyLDE0XSw4OlsyLDE0XSw5OlsyLDE0XSwxMDpbMiwxNF0sMTE6WzIsMTRdLDEyOlsyLDE0XSwxMzpbMiwxNF0sMTQ6WzIsMTRdLDE1OlsyLDE0XSwxNjpbMiwxNF0sMTg6WzIsMTRdfSx7MTpbMiwxXX0sezQ6MTgsMTc6WzEsM10sMTk6WzEsNF0sMjA6WzEsNV19LHs0OjE5LDE3OlsxLDNdLDE5OlsxLDRdLDIwOlsxLDVdfSx7NDoyMCwxNzpbMSwzXSwxOTpbMSw0XSwyMDpbMSw1XX0sezQ6MjEsMTc6WzEsM10sMTk6WzEsNF0sMjA6WzEsNV19LHs0OjIyLDE3OlsxLDNdLDE5OlsxLDRdLDIwOlsxLDVdfSx7NDoyMywxNzpbMSwzXSwxOTpbMSw0XSwyMDpbMSw1XX0sezQ6MjQsMTc6WzEsM10sMTk6WzEsNF0sMjA6WzEsNV19LHs0OjI1LDE3OlsxLDNdLDE5OlsxLDRdLDIwOlsxLDVdfSx7NDoyNiwxNzpbMSwzXSwxOTpbMSw0XSwyMDpbMSw1XX0sezQ6MjcsMTc6WzEsM10sMTk6WzEsNF0sMjA6WzEsNV19LHs2OlsxLDddLDg6WzEsOF0sOTpbMSw5XSwxMDpbMSwxMF0sMTE6WzEsMTFdLDEyOlsxLDEyXSwxMzpbMSwxM10sMTQ6WzEsMTRdLDE1OlsxLDE1XSwxNjpbMSwxNl0sMTg6WzEsMjhdfSx7NjpbMSw3XSw3OlsxLDI5XSw4OlsxLDhdLDk6WzEsOV0sMTA6WzEsMTBdLDExOlsxLDExXSwxMjpbMSwxMl0sMTM6WzEsMTNdLDE0OlsxLDE0XSwxNTpbMSwxNV0sMTY6WzEsMTZdfSx7NTpbMiwzXSw2OlsyLDNdLDc6WzIsM10sODpbMiwzXSw5OlsxLDldLDEwOlsxLDEwXSwxMTpbMSwxMV0sMTI6WzEsMTJdLDEzOlsxLDEzXSwxNDpbMSwxNF0sMTU6WzEsMTVdLDE2OlsxLDE2XSwxODpbMiwzXX0sezU6WzIsNF0sNjpbMiw0XSw3OlsyLDRdLDg6WzIsNF0sOTpbMiw0XSwxMDpbMSwxMF0sMTE6WzEsMTFdLDEyOlsxLDEyXSwxMzpbMSwxM10sMTQ6WzEsMTRdLDE1OlsxLDE1XSwxNjpbMSwxNl0sMTg6WzIsNF19LHs1OlsyLDVdLDY6WzIsNV0sNzpbMiw1XSw4OlsyLDVdLDk6WzIsNV0sMTA6WzIsNV0sMTE6WzIsNV0sMTI6WzIsNV0sMTM6WzIsNV0sMTQ6WzIsNV0sMTU6WzIsNV0sMTY6WzEsMTZdLDE4OlsyLDVdfSx7NTpbMiw2XSw2OlsyLDZdLDc6WzIsNl0sODpbMiw2XSw5OlsyLDZdLDEwOlsyLDZdLDExOlsyLDZdLDEyOlsyLDZdLDEzOlsyLDZdLDE0OlsyLDZdLDE1OlsyLDZdLDE2OlsxLDE2XSwxODpbMiw2XX0sezU6WzIsN10sNjpbMiw3XSw3OlsyLDddLDg6WzIsN10sOTpbMiw3XSwxMDpbMiw3XSwxMTpbMiw3XSwxMjpbMiw3XSwxMzpbMiw3XSwxNDpbMiw3XSwxNTpbMiw3XSwxNjpbMSwxNl0sMTg6WzIsN119LHs1OlsyLDhdLDY6WzIsOF0sNzpbMiw4XSw4OlsyLDhdLDk6WzIsOF0sMTA6WzIsOF0sMTE6WzIsOF0sMTI6WzIsOF0sMTM6WzIsOF0sMTQ6WzIsOF0sMTU6WzIsOF0sMTY6WzEsMTZdLDE4OlsyLDhdfSx7NTpbMiw5XSw2OlsyLDldLDc6WzIsOV0sODpbMiw5XSw5OlsyLDldLDEwOlsyLDldLDExOlsyLDldLDEyOlsyLDldLDEzOlsyLDldLDE0OlsyLDldLDE1OlsyLDldLDE2OlsxLDE2XSwxODpbMiw5XX0sezU6WzIsMTBdLDY6WzIsMTBdLDc6WzIsMTBdLDg6WzIsMTBdLDk6WzIsMTBdLDEwOlsyLDEwXSwxMTpbMiwxMF0sMTI6WzIsMTBdLDEzOlsyLDEwXSwxNDpbMiwxMF0sMTU6WzIsMTBdLDE2OlsxLDE2XSwxODpbMiwxMF19LHs1OlsyLDExXSw2OlsyLDExXSw3OlsyLDExXSw4OlsyLDExXSw5OlsyLDExXSwxMDpbMiwxMV0sMTE6WzIsMTFdLDEyOlsyLDExXSwxMzpbMiwxMV0sMTQ6WzIsMTFdLDE1OlsyLDExXSwxNjpbMiwxMV0sMTg6WzIsMTFdfSx7NTpbMiwxMl0sNjpbMiwxMl0sNzpbMiwxMl0sODpbMiwxMl0sOTpbMiwxMl0sMTA6WzIsMTJdLDExOlsyLDEyXSwxMjpbMiwxMl0sMTM6WzIsMTJdLDE0OlsyLDEyXSwxNTpbMiwxMl0sMTY6WzIsMTJdLDE4OlsyLDEyXX0sezQ6MzAsMTc6WzEsM10sMTk6WzEsNF0sMjA6WzEsNV19LHs1OlsyLDJdLDY6WzEsN10sNzpbMiwyXSw4OlsxLDhdLDk6WzEsOV0sMTA6WzEsMTBdLDExOlsxLDExXSwxMjpbMSwxMl0sMTM6WzEsMTNdLDE0OlsxLDE0XSwxNTpbMSwxNV0sMTY6WzEsMTZdLDE4OlsyLDJdfV0sXG5kZWZhdWx0QWN0aW9uczogezY6WzIsMV19LFxucGFyc2VFcnJvcjogZnVuY3Rpb24gcGFyc2VFcnJvcihzdHIsIGhhc2gpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3Ioc3RyKTtcbn0sXG5wYXJzZTogZnVuY3Rpb24gcGFyc2UoaW5wdXQpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgIHN0YWNrID0gWzBdLFxuICAgICAgICB2c3RhY2sgPSBbbnVsbF0sIC8vIHNlbWFudGljIHZhbHVlIHN0YWNrXG4gICAgICAgIGxzdGFjayA9IFtdLCAvLyBsb2NhdGlvbiBzdGFja1xuICAgICAgICB0YWJsZSA9IHRoaXMudGFibGUsXG4gICAgICAgIHl5dGV4dCA9ICcnLFxuICAgICAgICB5eWxpbmVubyA9IDAsXG4gICAgICAgIHl5bGVuZyA9IDAsXG4gICAgICAgIHJlY292ZXJpbmcgPSAwLFxuICAgICAgICBURVJST1IgPSAyLFxuICAgICAgICBFT0YgPSAxO1xuXG4gICAgLy90aGlzLnJlZHVjdGlvbkNvdW50ID0gdGhpcy5zaGlmdENvdW50ID0gMDtcblxuICAgIHRoaXMubGV4ZXIuc2V0SW5wdXQoaW5wdXQpO1xuICAgIHRoaXMubGV4ZXIueXkgPSB0aGlzLnl5O1xuICAgIHRoaXMueXkubGV4ZXIgPSB0aGlzLmxleGVyO1xuICAgIGlmICh0eXBlb2YgdGhpcy5sZXhlci55eWxsb2MgPT0gJ3VuZGVmaW5lZCcpXG4gICAgICAgIHRoaXMubGV4ZXIueXlsbG9jID0ge307XG4gICAgdmFyIHl5bG9jID0gdGhpcy5sZXhlci55eWxsb2M7XG4gICAgbHN0YWNrLnB1c2goeXlsb2MpO1xuXG4gICAgaWYgKHR5cGVvZiB0aGlzLnl5LnBhcnNlRXJyb3IgPT09ICdmdW5jdGlvbicpXG4gICAgICAgIHRoaXMucGFyc2VFcnJvciA9IHRoaXMueXkucGFyc2VFcnJvcjtcblxuICAgIGZ1bmN0aW9uIHBvcFN0YWNrIChuKSB7XG4gICAgICAgIHN0YWNrLmxlbmd0aCA9IHN0YWNrLmxlbmd0aCAtIDIqbjtcbiAgICAgICAgdnN0YWNrLmxlbmd0aCA9IHZzdGFjay5sZW5ndGggLSBuO1xuICAgICAgICBsc3RhY2subGVuZ3RoID0gbHN0YWNrLmxlbmd0aCAtIG47XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGV4KCkge1xuICAgICAgICB2YXIgdG9rZW47XG4gICAgICAgIHRva2VuID0gc2VsZi5sZXhlci5sZXgoKSB8fCAxOyAvLyAkZW5kID0gMVxuICAgICAgICAvLyBpZiB0b2tlbiBpc24ndCBpdHMgbnVtZXJpYyB2YWx1ZSwgY29udmVydFxuICAgICAgICBpZiAodHlwZW9mIHRva2VuICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgdG9rZW4gPSBzZWxmLnN5bWJvbHNfW3Rva2VuXSB8fCB0b2tlbjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgfVxuXG4gICAgdmFyIHN5bWJvbCwgcHJlRXJyb3JTeW1ib2wsIHN0YXRlLCBhY3Rpb24sIGEsIHIsIHl5dmFsPXt9LHAsbGVuLG5ld1N0YXRlLCBleHBlY3RlZDtcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAvLyByZXRyZWl2ZSBzdGF0ZSBudW1iZXIgZnJvbSB0b3Agb2Ygc3RhY2tcbiAgICAgICAgc3RhdGUgPSBzdGFja1tzdGFjay5sZW5ndGgtMV07XG5cbiAgICAgICAgLy8gdXNlIGRlZmF1bHQgYWN0aW9ucyBpZiBhdmFpbGFibGVcbiAgICAgICAgaWYgKHRoaXMuZGVmYXVsdEFjdGlvbnNbc3RhdGVdKSB7XG4gICAgICAgICAgICBhY3Rpb24gPSB0aGlzLmRlZmF1bHRBY3Rpb25zW3N0YXRlXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChzeW1ib2wgPT0gbnVsbClcbiAgICAgICAgICAgICAgICBzeW1ib2wgPSBsZXgoKTtcbiAgICAgICAgICAgIC8vIHJlYWQgYWN0aW9uIGZvciBjdXJyZW50IHN0YXRlIGFuZCBmaXJzdCBpbnB1dFxuICAgICAgICAgICAgYWN0aW9uID0gdGFibGVbc3RhdGVdICYmIHRhYmxlW3N0YXRlXVtzeW1ib2xdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaGFuZGxlIHBhcnNlIGVycm9yXG4gICAgICAgIF9oYW5kbGVfZXJyb3I6XG4gICAgICAgIGlmICh0eXBlb2YgYWN0aW9uID09PSAndW5kZWZpbmVkJyB8fCAhYWN0aW9uLmxlbmd0aCB8fCAhYWN0aW9uWzBdKSB7XG5cbiAgICAgICAgICAgIGlmICghcmVjb3ZlcmluZykge1xuICAgICAgICAgICAgICAgIC8vIFJlcG9ydCBlcnJvclxuICAgICAgICAgICAgICAgIGV4cGVjdGVkID0gW107XG4gICAgICAgICAgICAgICAgZm9yIChwIGluIHRhYmxlW3N0YXRlXSkgaWYgKHRoaXMudGVybWluYWxzX1twXSAmJiBwID4gMikge1xuICAgICAgICAgICAgICAgICAgICBleHBlY3RlZC5wdXNoKFwiJ1wiK3RoaXMudGVybWluYWxzX1twXStcIidcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBlcnJTdHIgPSAnJztcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5sZXhlci5zaG93UG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyU3RyID0gJ1BhcnNlIGVycm9yIG9uIGxpbmUgJysoeXlsaW5lbm8rMSkrXCI6XFxuXCIrdGhpcy5sZXhlci5zaG93UG9zaXRpb24oKStcIlxcbkV4cGVjdGluZyBcIitleHBlY3RlZC5qb2luKCcsICcpICsgXCIsIGdvdCAnXCIgKyB0aGlzLnRlcm1pbmFsc19bc3ltYm9sXSsgXCInXCI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyU3RyID0gJ1BhcnNlIGVycm9yIG9uIGxpbmUgJysoeXlsaW5lbm8rMSkrXCI6IFVuZXhwZWN0ZWQgXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChzeW1ib2wgPT0gMSAvKkVPRiovID8gXCJlbmQgb2YgaW5wdXRcIiA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKFwiJ1wiKyh0aGlzLnRlcm1pbmFsc19bc3ltYm9sXSB8fCBzeW1ib2wpK1wiJ1wiKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMucGFyc2VFcnJvcihlcnJTdHIsXG4gICAgICAgICAgICAgICAgICAgIHt0ZXh0OiB0aGlzLmxleGVyLm1hdGNoLCB0b2tlbjogdGhpcy50ZXJtaW5hbHNfW3N5bWJvbF0gfHwgc3ltYm9sLCBsaW5lOiB0aGlzLmxleGVyLnl5bGluZW5vLCBsb2M6IHl5bG9jLCBleHBlY3RlZDogZXhwZWN0ZWR9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8ganVzdCByZWNvdmVyZWQgZnJvbSBhbm90aGVyIGVycm9yXG4gICAgICAgICAgICBpZiAocmVjb3ZlcmluZyA9PSAzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN5bWJvbCA9PSBFT0YpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVyclN0ciB8fCAnUGFyc2luZyBoYWx0ZWQuJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gZGlzY2FyZCBjdXJyZW50IGxvb2thaGVhZCBhbmQgZ3JhYiBhbm90aGVyXG4gICAgICAgICAgICAgICAgeXlsZW5nID0gdGhpcy5sZXhlci55eWxlbmc7XG4gICAgICAgICAgICAgICAgeXl0ZXh0ID0gdGhpcy5sZXhlci55eXRleHQ7XG4gICAgICAgICAgICAgICAgeXlsaW5lbm8gPSB0aGlzLmxleGVyLnl5bGluZW5vO1xuICAgICAgICAgICAgICAgIHl5bG9jID0gdGhpcy5sZXhlci55eWxsb2M7XG4gICAgICAgICAgICAgICAgc3ltYm9sID0gbGV4KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHRyeSB0byByZWNvdmVyIGZyb20gZXJyb3JcbiAgICAgICAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgZm9yIGVycm9yIHJlY292ZXJ5IHJ1bGUgaW4gdGhpcyBzdGF0ZVxuICAgICAgICAgICAgICAgIGlmICgoVEVSUk9SLnRvU3RyaW5nKCkpIGluIHRhYmxlW3N0YXRlXSkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVyclN0ciB8fCAnUGFyc2luZyBoYWx0ZWQuJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHBvcFN0YWNrKDEpO1xuICAgICAgICAgICAgICAgIHN0YXRlID0gc3RhY2tbc3RhY2subGVuZ3RoLTFdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwcmVFcnJvclN5bWJvbCA9IHN5bWJvbDsgLy8gc2F2ZSB0aGUgbG9va2FoZWFkIHRva2VuXG4gICAgICAgICAgICBzeW1ib2wgPSBURVJST1I7ICAgICAgICAgLy8gaW5zZXJ0IGdlbmVyaWMgZXJyb3Igc3ltYm9sIGFzIG5ldyBsb29rYWhlYWRcbiAgICAgICAgICAgIHN0YXRlID0gc3RhY2tbc3RhY2subGVuZ3RoLTFdO1xuICAgICAgICAgICAgYWN0aW9uID0gdGFibGVbc3RhdGVdICYmIHRhYmxlW3N0YXRlXVtURVJST1JdO1xuICAgICAgICAgICAgcmVjb3ZlcmluZyA9IDM7IC8vIGFsbG93IDMgcmVhbCBzeW1ib2xzIHRvIGJlIHNoaWZ0ZWQgYmVmb3JlIHJlcG9ydGluZyBhIG5ldyBlcnJvclxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdGhpcyBzaG91bGRuJ3QgaGFwcGVuLCB1bmxlc3MgcmVzb2x2ZSBkZWZhdWx0cyBhcmUgb2ZmXG4gICAgICAgIGlmIChhY3Rpb25bMF0gaW5zdGFuY2VvZiBBcnJheSAmJiBhY3Rpb24ubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQYXJzZSBFcnJvcjogbXVsdGlwbGUgYWN0aW9ucyBwb3NzaWJsZSBhdCBzdGF0ZTogJytzdGF0ZSsnLCB0b2tlbjogJytzeW1ib2wpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoIChhY3Rpb25bMF0pIHtcblxuICAgICAgICAgICAgY2FzZSAxOiAvLyBzaGlmdFxuICAgICAgICAgICAgICAgIC8vdGhpcy5zaGlmdENvdW50Kys7XG5cbiAgICAgICAgICAgICAgICBzdGFjay5wdXNoKHN5bWJvbCk7XG4gICAgICAgICAgICAgICAgdnN0YWNrLnB1c2godGhpcy5sZXhlci55eXRleHQpO1xuICAgICAgICAgICAgICAgIGxzdGFjay5wdXNoKHRoaXMubGV4ZXIueXlsbG9jKTtcbiAgICAgICAgICAgICAgICBzdGFjay5wdXNoKGFjdGlvblsxXSk7IC8vIHB1c2ggc3RhdGVcbiAgICAgICAgICAgICAgICBzeW1ib2wgPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmICghcHJlRXJyb3JTeW1ib2wpIHsgLy8gbm9ybWFsIGV4ZWN1dGlvbi9ubyBlcnJvclxuICAgICAgICAgICAgICAgICAgICB5eWxlbmcgPSB0aGlzLmxleGVyLnl5bGVuZztcbiAgICAgICAgICAgICAgICAgICAgeXl0ZXh0ID0gdGhpcy5sZXhlci55eXRleHQ7XG4gICAgICAgICAgICAgICAgICAgIHl5bGluZW5vID0gdGhpcy5sZXhlci55eWxpbmVubztcbiAgICAgICAgICAgICAgICAgICAgeXlsb2MgPSB0aGlzLmxleGVyLnl5bGxvYztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlY292ZXJpbmcgPiAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVjb3ZlcmluZy0tO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7IC8vIGVycm9yIGp1c3Qgb2NjdXJyZWQsIHJlc3VtZSBvbGQgbG9va2FoZWFkIGYvIGJlZm9yZSBlcnJvclxuICAgICAgICAgICAgICAgICAgICBzeW1ib2wgPSBwcmVFcnJvclN5bWJvbDtcbiAgICAgICAgICAgICAgICAgICAgcHJlRXJyb3JTeW1ib2wgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAyOiAvLyByZWR1Y2VcbiAgICAgICAgICAgICAgICAvL3RoaXMucmVkdWN0aW9uQ291bnQrKztcblxuICAgICAgICAgICAgICAgIGxlbiA9IHRoaXMucHJvZHVjdGlvbnNfW2FjdGlvblsxXV1bMV07XG5cbiAgICAgICAgICAgICAgICAvLyBwZXJmb3JtIHNlbWFudGljIGFjdGlvblxuICAgICAgICAgICAgICAgIHl5dmFsLiQgPSB2c3RhY2tbdnN0YWNrLmxlbmd0aC1sZW5dOyAvLyBkZWZhdWx0IHRvICQkID0gJDFcbiAgICAgICAgICAgICAgICAvLyBkZWZhdWx0IGxvY2F0aW9uLCB1c2VzIGZpcnN0IHRva2VuIGZvciBmaXJzdHMsIGxhc3QgZm9yIGxhc3RzXG4gICAgICAgICAgICAgICAgeXl2YWwuXyQgPSB7XG4gICAgICAgICAgICAgICAgICAgIGZpcnN0X2xpbmU6IGxzdGFja1tsc3RhY2subGVuZ3RoLShsZW58fDEpXS5maXJzdF9saW5lLFxuICAgICAgICAgICAgICAgICAgICBsYXN0X2xpbmU6IGxzdGFja1tsc3RhY2subGVuZ3RoLTFdLmxhc3RfbGluZSxcbiAgICAgICAgICAgICAgICAgICAgZmlyc3RfY29sdW1uOiBsc3RhY2tbbHN0YWNrLmxlbmd0aC0obGVufHwxKV0uZmlyc3RfY29sdW1uLFxuICAgICAgICAgICAgICAgICAgICBsYXN0X2NvbHVtbjogbHN0YWNrW2xzdGFjay5sZW5ndGgtMV0ubGFzdF9jb2x1bW5cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHIgPSB0aGlzLnBlcmZvcm1BY3Rpb24uY2FsbCh5eXZhbCwgeXl0ZXh0LCB5eWxlbmcsIHl5bGluZW5vLCB0aGlzLnl5LCBhY3Rpb25bMV0sIHZzdGFjaywgbHN0YWNrKTtcblxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHI7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gcG9wIG9mZiBzdGFja1xuICAgICAgICAgICAgICAgIGlmIChsZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhY2sgPSBzdGFjay5zbGljZSgwLC0xKmxlbioyKTtcbiAgICAgICAgICAgICAgICAgICAgdnN0YWNrID0gdnN0YWNrLnNsaWNlKDAsIC0xKmxlbik7XG4gICAgICAgICAgICAgICAgICAgIGxzdGFjayA9IGxzdGFjay5zbGljZSgwLCAtMSpsZW4pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHN0YWNrLnB1c2godGhpcy5wcm9kdWN0aW9uc19bYWN0aW9uWzFdXVswXSk7ICAgIC8vIHB1c2ggbm9udGVybWluYWwgKHJlZHVjZSlcbiAgICAgICAgICAgICAgICB2c3RhY2sucHVzaCh5eXZhbC4kKTtcbiAgICAgICAgICAgICAgICBsc3RhY2sucHVzaCh5eXZhbC5fJCk7XG4gICAgICAgICAgICAgICAgLy8gZ290byBuZXcgc3RhdGUgPSB0YWJsZVtTVEFURV1bTk9OVEVSTUlOQUxdXG4gICAgICAgICAgICAgICAgbmV3U3RhdGUgPSB0YWJsZVtzdGFja1tzdGFjay5sZW5ndGgtMl1dW3N0YWNrW3N0YWNrLmxlbmd0aC0xXV07XG4gICAgICAgICAgICAgICAgc3RhY2sucHVzaChuZXdTdGF0ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMzogLy8gYWNjZXB0XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xufX07LyogSmlzb24gZ2VuZXJhdGVkIGxleGVyICovXG52YXIgbGV4ZXIgPSAoZnVuY3Rpb24oKXtcblxudmFyIGxleGVyID0gKHtFT0Y6MSxcbnBhcnNlRXJyb3I6ZnVuY3Rpb24gcGFyc2VFcnJvcihzdHIsIGhhc2gpIHtcbiAgICAgICAgaWYgKHRoaXMueXkucGFyc2VFcnJvcikge1xuICAgICAgICAgICAgdGhpcy55eS5wYXJzZUVycm9yKHN0ciwgaGFzaCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3Ioc3RyKTtcbiAgICAgICAgfVxuICAgIH0sXG5zZXRJbnB1dDpmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgdGhpcy5faW5wdXQgPSBpbnB1dDtcbiAgICAgICAgdGhpcy5fbW9yZSA9IHRoaXMuX2xlc3MgPSB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy55eWxpbmVubyA9IHRoaXMueXlsZW5nID0gMDtcbiAgICAgICAgdGhpcy55eXRleHQgPSB0aGlzLm1hdGNoZWQgPSB0aGlzLm1hdGNoID0gJyc7XG4gICAgICAgIHRoaXMuY29uZGl0aW9uU3RhY2sgPSBbJ0lOSVRJQUwnXTtcbiAgICAgICAgdGhpcy55eWxsb2MgPSB7Zmlyc3RfbGluZToxLGZpcnN0X2NvbHVtbjowLGxhc3RfbGluZToxLGxhc3RfY29sdW1uOjB9O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuaW5wdXQ6ZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY2ggPSB0aGlzLl9pbnB1dFswXTtcbiAgICAgICAgdGhpcy55eXRleHQrPWNoO1xuICAgICAgICB0aGlzLnl5bGVuZysrO1xuICAgICAgICB0aGlzLm1hdGNoKz1jaDtcbiAgICAgICAgdGhpcy5tYXRjaGVkKz1jaDtcbiAgICAgICAgdmFyIGxpbmVzID0gY2gubWF0Y2goL1xcbi8pO1xuICAgICAgICBpZiAobGluZXMpIHRoaXMueXlsaW5lbm8rKztcbiAgICAgICAgdGhpcy5faW5wdXQgPSB0aGlzLl9pbnB1dC5zbGljZSgxKTtcbiAgICAgICAgcmV0dXJuIGNoO1xuICAgIH0sXG51bnB1dDpmdW5jdGlvbiAoY2gpIHtcbiAgICAgICAgdGhpcy5faW5wdXQgPSBjaCArIHRoaXMuX2lucHV0O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxubW9yZTpmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX21vcmUgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxucGFzdElucHV0OmZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHBhc3QgPSB0aGlzLm1hdGNoZWQuc3Vic3RyKDAsIHRoaXMubWF0Y2hlZC5sZW5ndGggLSB0aGlzLm1hdGNoLmxlbmd0aCk7XG4gICAgICAgIHJldHVybiAocGFzdC5sZW5ndGggPiAyMCA/ICcuLi4nOicnKSArIHBhc3Quc3Vic3RyKC0yMCkucmVwbGFjZSgvXFxuL2csIFwiXCIpO1xuICAgIH0sXG51cGNvbWluZ0lucHV0OmZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG5leHQgPSB0aGlzLm1hdGNoO1xuICAgICAgICBpZiAobmV4dC5sZW5ndGggPCAyMCkge1xuICAgICAgICAgICAgbmV4dCArPSB0aGlzLl9pbnB1dC5zdWJzdHIoMCwgMjAtbmV4dC5sZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAobmV4dC5zdWJzdHIoMCwyMCkrKG5leHQubGVuZ3RoID4gMjAgPyAnLi4uJzonJykpLnJlcGxhY2UoL1xcbi9nLCBcIlwiKTtcbiAgICB9LFxuc2hvd1Bvc2l0aW9uOmZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHByZSA9IHRoaXMucGFzdElucHV0KCk7XG4gICAgICAgIHZhciBjID0gbmV3IEFycmF5KHByZS5sZW5ndGggKyAxKS5qb2luKFwiLVwiKTtcbiAgICAgICAgcmV0dXJuIHByZSArIHRoaXMudXBjb21pbmdJbnB1dCgpICsgXCJcXG5cIiArIGMrXCJeXCI7XG4gICAgfSxcbm5leHQ6ZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5FT0Y7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9pbnB1dCkgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgICB2YXIgdG9rZW4sXG4gICAgICAgICAgICBtYXRjaCxcbiAgICAgICAgICAgIGNvbCxcbiAgICAgICAgICAgIGxpbmVzO1xuICAgICAgICBpZiAoIXRoaXMuX21vcmUpIHtcbiAgICAgICAgICAgIHRoaXMueXl0ZXh0ID0gJyc7XG4gICAgICAgICAgICB0aGlzLm1hdGNoID0gJyc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJ1bGVzID0gdGhpcy5fY3VycmVudFJ1bGVzKCk7XG4gICAgICAgIGZvciAodmFyIGk9MDtpIDwgcnVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIG1hdGNoID0gdGhpcy5faW5wdXQubWF0Y2godGhpcy5ydWxlc1tydWxlc1tpXV0pO1xuICAgICAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgbGluZXMgPSBtYXRjaFswXS5tYXRjaCgvXFxuLiovZyk7XG4gICAgICAgICAgICAgICAgaWYgKGxpbmVzKSB0aGlzLnl5bGluZW5vICs9IGxpbmVzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB0aGlzLnl5bGxvYyA9IHtmaXJzdF9saW5lOiB0aGlzLnl5bGxvYy5sYXN0X2xpbmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdF9saW5lOiB0aGlzLnl5bGluZW5vKzEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RfY29sdW1uOiB0aGlzLnl5bGxvYy5sYXN0X2NvbHVtbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0X2NvbHVtbjogbGluZXMgPyBsaW5lc1tsaW5lcy5sZW5ndGgtMV0ubGVuZ3RoLTEgOiB0aGlzLnl5bGxvYy5sYXN0X2NvbHVtbiArIG1hdGNoWzBdLmxlbmd0aH1cbiAgICAgICAgICAgICAgICB0aGlzLnl5dGV4dCArPSBtYXRjaFswXTtcbiAgICAgICAgICAgICAgICB0aGlzLm1hdGNoICs9IG1hdGNoWzBdO1xuICAgICAgICAgICAgICAgIHRoaXMubWF0Y2hlcyA9IG1hdGNoO1xuICAgICAgICAgICAgICAgIHRoaXMueXlsZW5nID0gdGhpcy55eXRleHQubGVuZ3RoO1xuICAgICAgICAgICAgICAgIHRoaXMuX21vcmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLl9pbnB1dCA9IHRoaXMuX2lucHV0LnNsaWNlKG1hdGNoWzBdLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXRjaGVkICs9IG1hdGNoWzBdO1xuICAgICAgICAgICAgICAgIHRva2VuID0gdGhpcy5wZXJmb3JtQWN0aW9uLmNhbGwodGhpcywgdGhpcy55eSwgdGhpcywgcnVsZXNbaV0sdGhpcy5jb25kaXRpb25TdGFja1t0aGlzLmNvbmRpdGlvblN0YWNrLmxlbmd0aC0xXSk7XG4gICAgICAgICAgICAgICAgaWYgKHRva2VuKSByZXR1cm4gdG9rZW47XG4gICAgICAgICAgICAgICAgZWxzZSByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2lucHV0ID09PSBcIlwiKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5FT0Y7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnBhcnNlRXJyb3IoJ0xleGljYWwgZXJyb3Igb24gbGluZSAnKyh0aGlzLnl5bGluZW5vKzEpKycuIFVucmVjb2duaXplZCB0ZXh0LlxcbicrdGhpcy5zaG93UG9zaXRpb24oKSxcbiAgICAgICAgICAgICAgICAgICAge3RleHQ6IFwiXCIsIHRva2VuOiBudWxsLCBsaW5lOiB0aGlzLnl5bGluZW5vfSk7XG4gICAgICAgIH1cbiAgICB9LFxubGV4OmZ1bmN0aW9uIGxleCgpIHtcbiAgICAgICAgdmFyIHIgPSB0aGlzLm5leHQoKTtcbiAgICAgICAgaWYgKHR5cGVvZiByICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIHI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sZXgoKTtcbiAgICAgICAgfVxuICAgIH0sXG5iZWdpbjpmdW5jdGlvbiBiZWdpbihjb25kaXRpb24pIHtcbiAgICAgICAgdGhpcy5jb25kaXRpb25TdGFjay5wdXNoKGNvbmRpdGlvbik7XG4gICAgfSxcbnBvcFN0YXRlOmZ1bmN0aW9uIHBvcFN0YXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25kaXRpb25TdGFjay5wb3AoKTtcbiAgICB9LFxuX2N1cnJlbnRSdWxlczpmdW5jdGlvbiBfY3VycmVudFJ1bGVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25kaXRpb25zW3RoaXMuY29uZGl0aW9uU3RhY2tbdGhpcy5jb25kaXRpb25TdGFjay5sZW5ndGgtMV1dLnJ1bGVzO1xuICAgIH0sXG50b3BTdGF0ZTpmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbmRpdGlvblN0YWNrW3RoaXMuY29uZGl0aW9uU3RhY2subGVuZ3RoLTJdO1xuICAgIH0sXG5wdXNoU3RhdGU6ZnVuY3Rpb24gYmVnaW4oY29uZGl0aW9uKSB7XG4gICAgICAgIHRoaXMuYmVnaW4oY29uZGl0aW9uKTtcbiAgICB9fSk7XG5sZXhlci5wZXJmb3JtQWN0aW9uID0gZnVuY3Rpb24gYW5vbnltb3VzKHl5LHl5XywkYXZvaWRpbmdfbmFtZV9jb2xsaXNpb25zLFlZX1NUQVJUKSB7XG5cbnZhciBZWVNUQVRFPVlZX1NUQVJUO1xuc3dpdGNoKCRhdm9pZGluZ19uYW1lX2NvbGxpc2lvbnMpIHtcbmNhc2UgMDovKiBza2lwIHdoaXRlc3BhY2UgKi9cbmJyZWFrO1xuY2FzZSAxOnJldHVybiAyMFxuYnJlYWs7XG5jYXNlIDI6cmV0dXJuIDE5XG5icmVhaztcbmNhc2UgMzpyZXR1cm4gOFxuYnJlYWs7XG5jYXNlIDQ6cmV0dXJuIDlcbmJyZWFrO1xuY2FzZSA1OnJldHVybiA2XG5icmVhaztcbmNhc2UgNjpyZXR1cm4gN1xuYnJlYWs7XG5jYXNlIDc6cmV0dXJuIDExXG5icmVhaztcbmNhc2UgODpyZXR1cm4gMTNcbmJyZWFrO1xuY2FzZSA5OnJldHVybiAxMFxuYnJlYWs7XG5jYXNlIDEwOnJldHVybiAxMlxuYnJlYWs7XG5jYXNlIDExOnJldHVybiAxNFxuYnJlYWs7XG5jYXNlIDEyOnJldHVybiAxNVxuYnJlYWs7XG5jYXNlIDEzOnJldHVybiAxNlxuYnJlYWs7XG5jYXNlIDE0OnJldHVybiAxN1xuYnJlYWs7XG5jYXNlIDE1OnJldHVybiAxOFxuYnJlYWs7XG5jYXNlIDE2OnJldHVybiA1XG5icmVhaztcbmNhc2UgMTc6cmV0dXJuICdJTlZBTElEJ1xuYnJlYWs7XG59XG59O1xubGV4ZXIucnVsZXMgPSBbL15cXHMrLywvXlswLTldKyhcXC5bMC05XSspP1xcYi8sL15uXFxiLywvXlxcfFxcfC8sL14mJi8sL15cXD8vLC9eOi8sL148PS8sL14+PS8sL148LywvXj4vLC9eIT0vLC9ePT0vLC9eJS8sL15cXCgvLC9eXFwpLywvXiQvLC9eLi9dO1xubGV4ZXIuY29uZGl0aW9ucyA9IHtcIklOSVRJQUxcIjp7XCJydWxlc1wiOlswLDEsMiwzLDQsNSw2LDcsOCw5LDEwLDExLDEyLDEzLDE0LDE1LDE2LDE3XSxcImluY2x1c2l2ZVwiOnRydWV9fTtyZXR1cm4gbGV4ZXI7fSkoKVxucGFyc2VyLmxleGVyID0gbGV4ZXI7XG5yZXR1cm4gcGFyc2VyO1xufSkoKTtcbi8vIEVuZCBwYXJzZXJcblxuICAvLyBIYW5kbGUgbm9kZSwgYW1kLCBhbmQgZ2xvYmFsIHN5c3RlbXNcbiAgaWYgKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgICAgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gSmVkO1xuICAgIH1cbiAgICBleHBvcnRzLkplZCA9IEplZDtcbiAgfVxuICBlbHNlIHtcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICBkZWZpbmUoJ2plZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gSmVkO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8vIExlYWsgYSBnbG9iYWwgcmVnYXJkbGVzcyBvZiBtb2R1bGUgc3lzdGVtXG4gICAgcm9vdFsnSmVkJ10gPSBKZWQ7XG4gIH1cblxufSkodGhpcyk7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGB1bmRlZmluZWRgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGB1bmRlZmluZWRgLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNVbmRlZmluZWQodm9pZCAwKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzVW5kZWZpbmVkKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNVbmRlZmluZWQ7XG4iLCIvKiEgaHR0cHM6Ly9tdGhzLmJlL3B1bnljb2RlIHYxLjQuMSBieSBAbWF0aGlhcyAqL1xuOyhmdW5jdGlvbihyb290KSB7XG5cblx0LyoqIERldGVjdCBmcmVlIHZhcmlhYmxlcyAqL1xuXHR2YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmXG5cdFx0IWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblx0dmFyIGZyZWVNb2R1bGUgPSB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJlxuXHRcdCFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXHR2YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsO1xuXHRpZiAoXG5cdFx0ZnJlZUdsb2JhbC5nbG9iYWwgPT09IGZyZWVHbG9iYWwgfHxcblx0XHRmcmVlR2xvYmFsLndpbmRvdyA9PT0gZnJlZUdsb2JhbCB8fFxuXHRcdGZyZWVHbG9iYWwuc2VsZiA9PT0gZnJlZUdsb2JhbFxuXHQpIHtcblx0XHRyb290ID0gZnJlZUdsb2JhbDtcblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgYHB1bnljb2RlYCBvYmplY3QuXG5cdCAqIEBuYW1lIHB1bnljb2RlXG5cdCAqIEB0eXBlIE9iamVjdFxuXHQgKi9cblx0dmFyIHB1bnljb2RlLFxuXG5cdC8qKiBIaWdoZXN0IHBvc2l0aXZlIHNpZ25lZCAzMi1iaXQgZmxvYXQgdmFsdWUgKi9cblx0bWF4SW50ID0gMjE0NzQ4MzY0NywgLy8gYWthLiAweDdGRkZGRkZGIG9yIDJeMzEtMVxuXG5cdC8qKiBCb290c3RyaW5nIHBhcmFtZXRlcnMgKi9cblx0YmFzZSA9IDM2LFxuXHR0TWluID0gMSxcblx0dE1heCA9IDI2LFxuXHRza2V3ID0gMzgsXG5cdGRhbXAgPSA3MDAsXG5cdGluaXRpYWxCaWFzID0gNzIsXG5cdGluaXRpYWxOID0gMTI4LCAvLyAweDgwXG5cdGRlbGltaXRlciA9ICctJywgLy8gJ1xceDJEJ1xuXG5cdC8qKiBSZWd1bGFyIGV4cHJlc3Npb25zICovXG5cdHJlZ2V4UHVueWNvZGUgPSAvXnhuLS0vLFxuXHRyZWdleE5vbkFTQ0lJID0gL1teXFx4MjAtXFx4N0VdLywgLy8gdW5wcmludGFibGUgQVNDSUkgY2hhcnMgKyBub24tQVNDSUkgY2hhcnNcblx0cmVnZXhTZXBhcmF0b3JzID0gL1tcXHgyRVxcdTMwMDJcXHVGRjBFXFx1RkY2MV0vZywgLy8gUkZDIDM0OTAgc2VwYXJhdG9yc1xuXG5cdC8qKiBFcnJvciBtZXNzYWdlcyAqL1xuXHRlcnJvcnMgPSB7XG5cdFx0J292ZXJmbG93JzogJ092ZXJmbG93OiBpbnB1dCBuZWVkcyB3aWRlciBpbnRlZ2VycyB0byBwcm9jZXNzJyxcblx0XHQnbm90LWJhc2ljJzogJ0lsbGVnYWwgaW5wdXQgPj0gMHg4MCAobm90IGEgYmFzaWMgY29kZSBwb2ludCknLFxuXHRcdCdpbnZhbGlkLWlucHV0JzogJ0ludmFsaWQgaW5wdXQnXG5cdH0sXG5cblx0LyoqIENvbnZlbmllbmNlIHNob3J0Y3V0cyAqL1xuXHRiYXNlTWludXNUTWluID0gYmFzZSAtIHRNaW4sXG5cdGZsb29yID0gTWF0aC5mbG9vcixcblx0c3RyaW5nRnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZSxcblxuXHQvKiogVGVtcG9yYXJ5IHZhcmlhYmxlICovXG5cdGtleTtcblxuXHQvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuXHQvKipcblx0ICogQSBnZW5lcmljIGVycm9yIHV0aWxpdHkgZnVuY3Rpb24uXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIFRoZSBlcnJvciB0eXBlLlxuXHQgKiBAcmV0dXJucyB7RXJyb3J9IFRocm93cyBhIGBSYW5nZUVycm9yYCB3aXRoIHRoZSBhcHBsaWNhYmxlIGVycm9yIG1lc3NhZ2UuXG5cdCAqL1xuXHRmdW5jdGlvbiBlcnJvcih0eXBlKSB7XG5cdFx0dGhyb3cgbmV3IFJhbmdlRXJyb3IoZXJyb3JzW3R5cGVdKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBBIGdlbmVyaWMgYEFycmF5I21hcGAgdXRpbGl0eSBmdW5jdGlvbi5cblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRoYXQgZ2V0cyBjYWxsZWQgZm9yIGV2ZXJ5IGFycmF5XG5cdCAqIGl0ZW0uXG5cdCAqIEByZXR1cm5zIHtBcnJheX0gQSBuZXcgYXJyYXkgb2YgdmFsdWVzIHJldHVybmVkIGJ5IHRoZSBjYWxsYmFjayBmdW5jdGlvbi5cblx0ICovXG5cdGZ1bmN0aW9uIG1hcChhcnJheSwgZm4pIHtcblx0XHR2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXHRcdHZhciByZXN1bHQgPSBbXTtcblx0XHR3aGlsZSAobGVuZ3RoLS0pIHtcblx0XHRcdHJlc3VsdFtsZW5ndGhdID0gZm4oYXJyYXlbbGVuZ3RoXSk7XG5cdFx0fVxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHQvKipcblx0ICogQSBzaW1wbGUgYEFycmF5I21hcGAtbGlrZSB3cmFwcGVyIHRvIHdvcmsgd2l0aCBkb21haW4gbmFtZSBzdHJpbmdzIG9yIGVtYWlsXG5cdCAqIGFkZHJlc3Nlcy5cblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IGRvbWFpbiBUaGUgZG9tYWluIG5hbWUgb3IgZW1haWwgYWRkcmVzcy5cblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRoYXQgZ2V0cyBjYWxsZWQgZm9yIGV2ZXJ5XG5cdCAqIGNoYXJhY3Rlci5cblx0ICogQHJldHVybnMge0FycmF5fSBBIG5ldyBzdHJpbmcgb2YgY2hhcmFjdGVycyByZXR1cm5lZCBieSB0aGUgY2FsbGJhY2tcblx0ICogZnVuY3Rpb24uXG5cdCAqL1xuXHRmdW5jdGlvbiBtYXBEb21haW4oc3RyaW5nLCBmbikge1xuXHRcdHZhciBwYXJ0cyA9IHN0cmluZy5zcGxpdCgnQCcpO1xuXHRcdHZhciByZXN1bHQgPSAnJztcblx0XHRpZiAocGFydHMubGVuZ3RoID4gMSkge1xuXHRcdFx0Ly8gSW4gZW1haWwgYWRkcmVzc2VzLCBvbmx5IHRoZSBkb21haW4gbmFtZSBzaG91bGQgYmUgcHVueWNvZGVkLiBMZWF2ZVxuXHRcdFx0Ly8gdGhlIGxvY2FsIHBhcnQgKGkuZS4gZXZlcnl0aGluZyB1cCB0byBgQGApIGludGFjdC5cblx0XHRcdHJlc3VsdCA9IHBhcnRzWzBdICsgJ0AnO1xuXHRcdFx0c3RyaW5nID0gcGFydHNbMV07XG5cdFx0fVxuXHRcdC8vIEF2b2lkIGBzcGxpdChyZWdleClgIGZvciBJRTggY29tcGF0aWJpbGl0eS4gU2VlICMxNy5cblx0XHRzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShyZWdleFNlcGFyYXRvcnMsICdcXHgyRScpO1xuXHRcdHZhciBsYWJlbHMgPSBzdHJpbmcuc3BsaXQoJy4nKTtcblx0XHR2YXIgZW5jb2RlZCA9IG1hcChsYWJlbHMsIGZuKS5qb2luKCcuJyk7XG5cdFx0cmV0dXJuIHJlc3VsdCArIGVuY29kZWQ7XG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhbiBhcnJheSBjb250YWluaW5nIHRoZSBudW1lcmljIGNvZGUgcG9pbnRzIG9mIGVhY2ggVW5pY29kZVxuXHQgKiBjaGFyYWN0ZXIgaW4gdGhlIHN0cmluZy4gV2hpbGUgSmF2YVNjcmlwdCB1c2VzIFVDUy0yIGludGVybmFsbHksXG5cdCAqIHRoaXMgZnVuY3Rpb24gd2lsbCBjb252ZXJ0IGEgcGFpciBvZiBzdXJyb2dhdGUgaGFsdmVzIChlYWNoIG9mIHdoaWNoXG5cdCAqIFVDUy0yIGV4cG9zZXMgYXMgc2VwYXJhdGUgY2hhcmFjdGVycykgaW50byBhIHNpbmdsZSBjb2RlIHBvaW50LFxuXHQgKiBtYXRjaGluZyBVVEYtMTYuXG5cdCAqIEBzZWUgYHB1bnljb2RlLnVjczIuZW5jb2RlYFxuXHQgKiBAc2VlIDxodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC1lbmNvZGluZz5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlLnVjczJcblx0ICogQG5hbWUgZGVjb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBzdHJpbmcgVGhlIFVuaWNvZGUgaW5wdXQgc3RyaW5nIChVQ1MtMikuXG5cdCAqIEByZXR1cm5zIHtBcnJheX0gVGhlIG5ldyBhcnJheSBvZiBjb2RlIHBvaW50cy5cblx0ICovXG5cdGZ1bmN0aW9uIHVjczJkZWNvZGUoc3RyaW5nKSB7XG5cdFx0dmFyIG91dHB1dCA9IFtdLFxuXHRcdCAgICBjb3VudGVyID0gMCxcblx0XHQgICAgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aCxcblx0XHQgICAgdmFsdWUsXG5cdFx0ICAgIGV4dHJhO1xuXHRcdHdoaWxlIChjb3VudGVyIDwgbGVuZ3RoKSB7XG5cdFx0XHR2YWx1ZSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG5cdFx0XHRpZiAodmFsdWUgPj0gMHhEODAwICYmIHZhbHVlIDw9IDB4REJGRiAmJiBjb3VudGVyIDwgbGVuZ3RoKSB7XG5cdFx0XHRcdC8vIGhpZ2ggc3Vycm9nYXRlLCBhbmQgdGhlcmUgaXMgYSBuZXh0IGNoYXJhY3RlclxuXHRcdFx0XHRleHRyYSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG5cdFx0XHRcdGlmICgoZXh0cmEgJiAweEZDMDApID09IDB4REMwMCkgeyAvLyBsb3cgc3Vycm9nYXRlXG5cdFx0XHRcdFx0b3V0cHV0LnB1c2goKCh2YWx1ZSAmIDB4M0ZGKSA8PCAxMCkgKyAoZXh0cmEgJiAweDNGRikgKyAweDEwMDAwKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQvLyB1bm1hdGNoZWQgc3Vycm9nYXRlOyBvbmx5IGFwcGVuZCB0aGlzIGNvZGUgdW5pdCwgaW4gY2FzZSB0aGUgbmV4dFxuXHRcdFx0XHRcdC8vIGNvZGUgdW5pdCBpcyB0aGUgaGlnaCBzdXJyb2dhdGUgb2YgYSBzdXJyb2dhdGUgcGFpclxuXHRcdFx0XHRcdG91dHB1dC5wdXNoKHZhbHVlKTtcblx0XHRcdFx0XHRjb3VudGVyLS07XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG91dHB1dC5wdXNoKHZhbHVlKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgc3RyaW5nIGJhc2VkIG9uIGFuIGFycmF5IG9mIG51bWVyaWMgY29kZSBwb2ludHMuXG5cdCAqIEBzZWUgYHB1bnljb2RlLnVjczIuZGVjb2RlYFxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGUudWNzMlxuXHQgKiBAbmFtZSBlbmNvZGVcblx0ICogQHBhcmFtIHtBcnJheX0gY29kZVBvaW50cyBUaGUgYXJyYXkgb2YgbnVtZXJpYyBjb2RlIHBvaW50cy5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIG5ldyBVbmljb2RlIHN0cmluZyAoVUNTLTIpLlxuXHQgKi9cblx0ZnVuY3Rpb24gdWNzMmVuY29kZShhcnJheSkge1xuXHRcdHJldHVybiBtYXAoYXJyYXksIGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHR2YXIgb3V0cHV0ID0gJyc7XG5cdFx0XHRpZiAodmFsdWUgPiAweEZGRkYpIHtcblx0XHRcdFx0dmFsdWUgLT0gMHgxMDAwMDtcblx0XHRcdFx0b3V0cHV0ICs9IHN0cmluZ0Zyb21DaGFyQ29kZSh2YWx1ZSA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMCk7XG5cdFx0XHRcdHZhbHVlID0gMHhEQzAwIHwgdmFsdWUgJiAweDNGRjtcblx0XHRcdH1cblx0XHRcdG91dHB1dCArPSBzdHJpbmdGcm9tQ2hhckNvZGUodmFsdWUpO1xuXHRcdFx0cmV0dXJuIG91dHB1dDtcblx0XHR9KS5qb2luKCcnKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIGJhc2ljIGNvZGUgcG9pbnQgaW50byBhIGRpZ2l0L2ludGVnZXIuXG5cdCAqIEBzZWUgYGRpZ2l0VG9CYXNpYygpYFxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge051bWJlcn0gY29kZVBvaW50IFRoZSBiYXNpYyBudW1lcmljIGNvZGUgcG9pbnQgdmFsdWUuXG5cdCAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBudW1lcmljIHZhbHVlIG9mIGEgYmFzaWMgY29kZSBwb2ludCAoZm9yIHVzZSBpblxuXHQgKiByZXByZXNlbnRpbmcgaW50ZWdlcnMpIGluIHRoZSByYW5nZSBgMGAgdG8gYGJhc2UgLSAxYCwgb3IgYGJhc2VgIGlmXG5cdCAqIHRoZSBjb2RlIHBvaW50IGRvZXMgbm90IHJlcHJlc2VudCBhIHZhbHVlLlxuXHQgKi9cblx0ZnVuY3Rpb24gYmFzaWNUb0RpZ2l0KGNvZGVQb2ludCkge1xuXHRcdGlmIChjb2RlUG9pbnQgLSA0OCA8IDEwKSB7XG5cdFx0XHRyZXR1cm4gY29kZVBvaW50IC0gMjI7XG5cdFx0fVxuXHRcdGlmIChjb2RlUG9pbnQgLSA2NSA8IDI2KSB7XG5cdFx0XHRyZXR1cm4gY29kZVBvaW50IC0gNjU7XG5cdFx0fVxuXHRcdGlmIChjb2RlUG9pbnQgLSA5NyA8IDI2KSB7XG5cdFx0XHRyZXR1cm4gY29kZVBvaW50IC0gOTc7XG5cdFx0fVxuXHRcdHJldHVybiBiYXNlO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgZGlnaXQvaW50ZWdlciBpbnRvIGEgYmFzaWMgY29kZSBwb2ludC5cblx0ICogQHNlZSBgYmFzaWNUb0RpZ2l0KClgXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBkaWdpdCBUaGUgbnVtZXJpYyB2YWx1ZSBvZiBhIGJhc2ljIGNvZGUgcG9pbnQuXG5cdCAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBiYXNpYyBjb2RlIHBvaW50IHdob3NlIHZhbHVlICh3aGVuIHVzZWQgZm9yXG5cdCAqIHJlcHJlc2VudGluZyBpbnRlZ2VycykgaXMgYGRpZ2l0YCwgd2hpY2ggbmVlZHMgdG8gYmUgaW4gdGhlIHJhbmdlXG5cdCAqIGAwYCB0byBgYmFzZSAtIDFgLiBJZiBgZmxhZ2AgaXMgbm9uLXplcm8sIHRoZSB1cHBlcmNhc2UgZm9ybSBpc1xuXHQgKiB1c2VkOyBlbHNlLCB0aGUgbG93ZXJjYXNlIGZvcm0gaXMgdXNlZC4gVGhlIGJlaGF2aW9yIGlzIHVuZGVmaW5lZFxuXHQgKiBpZiBgZmxhZ2AgaXMgbm9uLXplcm8gYW5kIGBkaWdpdGAgaGFzIG5vIHVwcGVyY2FzZSBmb3JtLlxuXHQgKi9cblx0ZnVuY3Rpb24gZGlnaXRUb0Jhc2ljKGRpZ2l0LCBmbGFnKSB7XG5cdFx0Ly8gIDAuLjI1IG1hcCB0byBBU0NJSSBhLi56IG9yIEEuLlpcblx0XHQvLyAyNi4uMzUgbWFwIHRvIEFTQ0lJIDAuLjlcblx0XHRyZXR1cm4gZGlnaXQgKyAyMiArIDc1ICogKGRpZ2l0IDwgMjYpIC0gKChmbGFnICE9IDApIDw8IDUpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEJpYXMgYWRhcHRhdGlvbiBmdW5jdGlvbiBhcyBwZXIgc2VjdGlvbiAzLjQgb2YgUkZDIDM0OTIuXG5cdCAqIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzNDkyI3NlY3Rpb24tMy40XG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRmdW5jdGlvbiBhZGFwdChkZWx0YSwgbnVtUG9pbnRzLCBmaXJzdFRpbWUpIHtcblx0XHR2YXIgayA9IDA7XG5cdFx0ZGVsdGEgPSBmaXJzdFRpbWUgPyBmbG9vcihkZWx0YSAvIGRhbXApIDogZGVsdGEgPj4gMTtcblx0XHRkZWx0YSArPSBmbG9vcihkZWx0YSAvIG51bVBvaW50cyk7XG5cdFx0Zm9yICgvKiBubyBpbml0aWFsaXphdGlvbiAqLzsgZGVsdGEgPiBiYXNlTWludXNUTWluICogdE1heCA+PiAxOyBrICs9IGJhc2UpIHtcblx0XHRcdGRlbHRhID0gZmxvb3IoZGVsdGEgLyBiYXNlTWludXNUTWluKTtcblx0XHR9XG5cdFx0cmV0dXJuIGZsb29yKGsgKyAoYmFzZU1pbnVzVE1pbiArIDEpICogZGVsdGEgLyAoZGVsdGEgKyBza2V3KSk7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzIHRvIGEgc3RyaW5nIG9mIFVuaWNvZGVcblx0ICogc3ltYm9scy5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scy5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIHJlc3VsdGluZyBzdHJpbmcgb2YgVW5pY29kZSBzeW1ib2xzLlxuXHQgKi9cblx0ZnVuY3Rpb24gZGVjb2RlKGlucHV0KSB7XG5cdFx0Ly8gRG9uJ3QgdXNlIFVDUy0yXG5cdFx0dmFyIG91dHB1dCA9IFtdLFxuXHRcdCAgICBpbnB1dExlbmd0aCA9IGlucHV0Lmxlbmd0aCxcblx0XHQgICAgb3V0LFxuXHRcdCAgICBpID0gMCxcblx0XHQgICAgbiA9IGluaXRpYWxOLFxuXHRcdCAgICBiaWFzID0gaW5pdGlhbEJpYXMsXG5cdFx0ICAgIGJhc2ljLFxuXHRcdCAgICBqLFxuXHRcdCAgICBpbmRleCxcblx0XHQgICAgb2xkaSxcblx0XHQgICAgdyxcblx0XHQgICAgayxcblx0XHQgICAgZGlnaXQsXG5cdFx0ICAgIHQsXG5cdFx0ICAgIC8qKiBDYWNoZWQgY2FsY3VsYXRpb24gcmVzdWx0cyAqL1xuXHRcdCAgICBiYXNlTWludXNUO1xuXG5cdFx0Ly8gSGFuZGxlIHRoZSBiYXNpYyBjb2RlIHBvaW50czogbGV0IGBiYXNpY2AgYmUgdGhlIG51bWJlciBvZiBpbnB1dCBjb2RlXG5cdFx0Ly8gcG9pbnRzIGJlZm9yZSB0aGUgbGFzdCBkZWxpbWl0ZXIsIG9yIGAwYCBpZiB0aGVyZSBpcyBub25lLCB0aGVuIGNvcHlcblx0XHQvLyB0aGUgZmlyc3QgYmFzaWMgY29kZSBwb2ludHMgdG8gdGhlIG91dHB1dC5cblxuXHRcdGJhc2ljID0gaW5wdXQubGFzdEluZGV4T2YoZGVsaW1pdGVyKTtcblx0XHRpZiAoYmFzaWMgPCAwKSB7XG5cdFx0XHRiYXNpYyA9IDA7XG5cdFx0fVxuXG5cdFx0Zm9yIChqID0gMDsgaiA8IGJhc2ljOyArK2opIHtcblx0XHRcdC8vIGlmIGl0J3Mgbm90IGEgYmFzaWMgY29kZSBwb2ludFxuXHRcdFx0aWYgKGlucHV0LmNoYXJDb2RlQXQoaikgPj0gMHg4MCkge1xuXHRcdFx0XHRlcnJvcignbm90LWJhc2ljJyk7XG5cdFx0XHR9XG5cdFx0XHRvdXRwdXQucHVzaChpbnB1dC5jaGFyQ29kZUF0KGopKTtcblx0XHR9XG5cblx0XHQvLyBNYWluIGRlY29kaW5nIGxvb3A6IHN0YXJ0IGp1c3QgYWZ0ZXIgdGhlIGxhc3QgZGVsaW1pdGVyIGlmIGFueSBiYXNpYyBjb2RlXG5cdFx0Ly8gcG9pbnRzIHdlcmUgY29waWVkOyBzdGFydCBhdCB0aGUgYmVnaW5uaW5nIG90aGVyd2lzZS5cblxuXHRcdGZvciAoaW5kZXggPSBiYXNpYyA+IDAgPyBiYXNpYyArIDEgOiAwOyBpbmRleCA8IGlucHV0TGVuZ3RoOyAvKiBubyBmaW5hbCBleHByZXNzaW9uICovKSB7XG5cblx0XHRcdC8vIGBpbmRleGAgaXMgdGhlIGluZGV4IG9mIHRoZSBuZXh0IGNoYXJhY3RlciB0byBiZSBjb25zdW1lZC5cblx0XHRcdC8vIERlY29kZSBhIGdlbmVyYWxpemVkIHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyIGludG8gYGRlbHRhYCxcblx0XHRcdC8vIHdoaWNoIGdldHMgYWRkZWQgdG8gYGlgLiBUaGUgb3ZlcmZsb3cgY2hlY2tpbmcgaXMgZWFzaWVyXG5cdFx0XHQvLyBpZiB3ZSBpbmNyZWFzZSBgaWAgYXMgd2UgZ28sIHRoZW4gc3VidHJhY3Qgb2ZmIGl0cyBzdGFydGluZ1xuXHRcdFx0Ly8gdmFsdWUgYXQgdGhlIGVuZCB0byBvYnRhaW4gYGRlbHRhYC5cblx0XHRcdGZvciAob2xkaSA9IGksIHcgPSAxLCBrID0gYmFzZTsgLyogbm8gY29uZGl0aW9uICovOyBrICs9IGJhc2UpIHtcblxuXHRcdFx0XHRpZiAoaW5kZXggPj0gaW5wdXRMZW5ndGgpIHtcblx0XHRcdFx0XHRlcnJvcignaW52YWxpZC1pbnB1dCcpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGlnaXQgPSBiYXNpY1RvRGlnaXQoaW5wdXQuY2hhckNvZGVBdChpbmRleCsrKSk7XG5cblx0XHRcdFx0aWYgKGRpZ2l0ID49IGJhc2UgfHwgZGlnaXQgPiBmbG9vcigobWF4SW50IC0gaSkgLyB3KSkge1xuXHRcdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aSArPSBkaWdpdCAqIHc7XG5cdFx0XHRcdHQgPSBrIDw9IGJpYXMgPyB0TWluIDogKGsgPj0gYmlhcyArIHRNYXggPyB0TWF4IDogayAtIGJpYXMpO1xuXG5cdFx0XHRcdGlmIChkaWdpdCA8IHQpIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGJhc2VNaW51c1QgPSBiYXNlIC0gdDtcblx0XHRcdFx0aWYgKHcgPiBmbG9vcihtYXhJbnQgLyBiYXNlTWludXNUKSkge1xuXHRcdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dyAqPSBiYXNlTWludXNUO1xuXG5cdFx0XHR9XG5cblx0XHRcdG91dCA9IG91dHB1dC5sZW5ndGggKyAxO1xuXHRcdFx0YmlhcyA9IGFkYXB0KGkgLSBvbGRpLCBvdXQsIG9sZGkgPT0gMCk7XG5cblx0XHRcdC8vIGBpYCB3YXMgc3VwcG9zZWQgdG8gd3JhcCBhcm91bmQgZnJvbSBgb3V0YCB0byBgMGAsXG5cdFx0XHQvLyBpbmNyZW1lbnRpbmcgYG5gIGVhY2ggdGltZSwgc28gd2UnbGwgZml4IHRoYXQgbm93OlxuXHRcdFx0aWYgKGZsb29yKGkgLyBvdXQpID4gbWF4SW50IC0gbikge1xuXHRcdFx0XHRlcnJvcignb3ZlcmZsb3cnKTtcblx0XHRcdH1cblxuXHRcdFx0biArPSBmbG9vcihpIC8gb3V0KTtcblx0XHRcdGkgJT0gb3V0O1xuXG5cdFx0XHQvLyBJbnNlcnQgYG5gIGF0IHBvc2l0aW9uIGBpYCBvZiB0aGUgb3V0cHV0XG5cdFx0XHRvdXRwdXQuc3BsaWNlKGkrKywgMCwgbik7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdWNzMmVuY29kZShvdXRwdXQpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgc3RyaW5nIG9mIFVuaWNvZGUgc3ltYm9scyAoZS5nLiBhIGRvbWFpbiBuYW1lIGxhYmVsKSB0byBhXG5cdCAqIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMuXG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIHN0cmluZyBvZiBVbmljb2RlIHN5bWJvbHMuXG5cdCAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSByZXN1bHRpbmcgUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scy5cblx0ICovXG5cdGZ1bmN0aW9uIGVuY29kZShpbnB1dCkge1xuXHRcdHZhciBuLFxuXHRcdCAgICBkZWx0YSxcblx0XHQgICAgaGFuZGxlZENQQ291bnQsXG5cdFx0ICAgIGJhc2ljTGVuZ3RoLFxuXHRcdCAgICBiaWFzLFxuXHRcdCAgICBqLFxuXHRcdCAgICBtLFxuXHRcdCAgICBxLFxuXHRcdCAgICBrLFxuXHRcdCAgICB0LFxuXHRcdCAgICBjdXJyZW50VmFsdWUsXG5cdFx0ICAgIG91dHB1dCA9IFtdLFxuXHRcdCAgICAvKiogYGlucHV0TGVuZ3RoYCB3aWxsIGhvbGQgdGhlIG51bWJlciBvZiBjb2RlIHBvaW50cyBpbiBgaW5wdXRgLiAqL1xuXHRcdCAgICBpbnB1dExlbmd0aCxcblx0XHQgICAgLyoqIENhY2hlZCBjYWxjdWxhdGlvbiByZXN1bHRzICovXG5cdFx0ICAgIGhhbmRsZWRDUENvdW50UGx1c09uZSxcblx0XHQgICAgYmFzZU1pbnVzVCxcblx0XHQgICAgcU1pbnVzVDtcblxuXHRcdC8vIENvbnZlcnQgdGhlIGlucHV0IGluIFVDUy0yIHRvIFVuaWNvZGVcblx0XHRpbnB1dCA9IHVjczJkZWNvZGUoaW5wdXQpO1xuXG5cdFx0Ly8gQ2FjaGUgdGhlIGxlbmd0aFxuXHRcdGlucHV0TGVuZ3RoID0gaW5wdXQubGVuZ3RoO1xuXG5cdFx0Ly8gSW5pdGlhbGl6ZSB0aGUgc3RhdGVcblx0XHRuID0gaW5pdGlhbE47XG5cdFx0ZGVsdGEgPSAwO1xuXHRcdGJpYXMgPSBpbml0aWFsQmlhcztcblxuXHRcdC8vIEhhbmRsZSB0aGUgYmFzaWMgY29kZSBwb2ludHNcblx0XHRmb3IgKGogPSAwOyBqIDwgaW5wdXRMZW5ndGg7ICsraikge1xuXHRcdFx0Y3VycmVudFZhbHVlID0gaW5wdXRbal07XG5cdFx0XHRpZiAoY3VycmVudFZhbHVlIDwgMHg4MCkge1xuXHRcdFx0XHRvdXRwdXQucHVzaChzdHJpbmdGcm9tQ2hhckNvZGUoY3VycmVudFZhbHVlKSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aGFuZGxlZENQQ291bnQgPSBiYXNpY0xlbmd0aCA9IG91dHB1dC5sZW5ndGg7XG5cblx0XHQvLyBgaGFuZGxlZENQQ291bnRgIGlzIHRoZSBudW1iZXIgb2YgY29kZSBwb2ludHMgdGhhdCBoYXZlIGJlZW4gaGFuZGxlZDtcblx0XHQvLyBgYmFzaWNMZW5ndGhgIGlzIHRoZSBudW1iZXIgb2YgYmFzaWMgY29kZSBwb2ludHMuXG5cblx0XHQvLyBGaW5pc2ggdGhlIGJhc2ljIHN0cmluZyAtIGlmIGl0IGlzIG5vdCBlbXB0eSAtIHdpdGggYSBkZWxpbWl0ZXJcblx0XHRpZiAoYmFzaWNMZW5ndGgpIHtcblx0XHRcdG91dHB1dC5wdXNoKGRlbGltaXRlcik7XG5cdFx0fVxuXG5cdFx0Ly8gTWFpbiBlbmNvZGluZyBsb29wOlxuXHRcdHdoaWxlIChoYW5kbGVkQ1BDb3VudCA8IGlucHV0TGVuZ3RoKSB7XG5cblx0XHRcdC8vIEFsbCBub24tYmFzaWMgY29kZSBwb2ludHMgPCBuIGhhdmUgYmVlbiBoYW5kbGVkIGFscmVhZHkuIEZpbmQgdGhlIG5leHRcblx0XHRcdC8vIGxhcmdlciBvbmU6XG5cdFx0XHRmb3IgKG0gPSBtYXhJbnQsIGogPSAwOyBqIDwgaW5wdXRMZW5ndGg7ICsraikge1xuXHRcdFx0XHRjdXJyZW50VmFsdWUgPSBpbnB1dFtqXTtcblx0XHRcdFx0aWYgKGN1cnJlbnRWYWx1ZSA+PSBuICYmIGN1cnJlbnRWYWx1ZSA8IG0pIHtcblx0XHRcdFx0XHRtID0gY3VycmVudFZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEluY3JlYXNlIGBkZWx0YWAgZW5vdWdoIHRvIGFkdmFuY2UgdGhlIGRlY29kZXIncyA8bixpPiBzdGF0ZSB0byA8bSwwPixcblx0XHRcdC8vIGJ1dCBndWFyZCBhZ2FpbnN0IG92ZXJmbG93XG5cdFx0XHRoYW5kbGVkQ1BDb3VudFBsdXNPbmUgPSBoYW5kbGVkQ1BDb3VudCArIDE7XG5cdFx0XHRpZiAobSAtIG4gPiBmbG9vcigobWF4SW50IC0gZGVsdGEpIC8gaGFuZGxlZENQQ291bnRQbHVzT25lKSkge1xuXHRcdFx0XHRlcnJvcignb3ZlcmZsb3cnKTtcblx0XHRcdH1cblxuXHRcdFx0ZGVsdGEgKz0gKG0gLSBuKSAqIGhhbmRsZWRDUENvdW50UGx1c09uZTtcblx0XHRcdG4gPSBtO1xuXG5cdFx0XHRmb3IgKGogPSAwOyBqIDwgaW5wdXRMZW5ndGg7ICsraikge1xuXHRcdFx0XHRjdXJyZW50VmFsdWUgPSBpbnB1dFtqXTtcblxuXHRcdFx0XHRpZiAoY3VycmVudFZhbHVlIDwgbiAmJiArK2RlbHRhID4gbWF4SW50KSB7XG5cdFx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoY3VycmVudFZhbHVlID09IG4pIHtcblx0XHRcdFx0XHQvLyBSZXByZXNlbnQgZGVsdGEgYXMgYSBnZW5lcmFsaXplZCB2YXJpYWJsZS1sZW5ndGggaW50ZWdlclxuXHRcdFx0XHRcdGZvciAocSA9IGRlbHRhLCBrID0gYmFzZTsgLyogbm8gY29uZGl0aW9uICovOyBrICs9IGJhc2UpIHtcblx0XHRcdFx0XHRcdHQgPSBrIDw9IGJpYXMgPyB0TWluIDogKGsgPj0gYmlhcyArIHRNYXggPyB0TWF4IDogayAtIGJpYXMpO1xuXHRcdFx0XHRcdFx0aWYgKHEgPCB0KSB7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0cU1pbnVzVCA9IHEgLSB0O1xuXHRcdFx0XHRcdFx0YmFzZU1pbnVzVCA9IGJhc2UgLSB0O1xuXHRcdFx0XHRcdFx0b3V0cHV0LnB1c2goXG5cdFx0XHRcdFx0XHRcdHN0cmluZ0Zyb21DaGFyQ29kZShkaWdpdFRvQmFzaWModCArIHFNaW51c1QgJSBiYXNlTWludXNULCAwKSlcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRxID0gZmxvb3IocU1pbnVzVCAvIGJhc2VNaW51c1QpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdG91dHB1dC5wdXNoKHN0cmluZ0Zyb21DaGFyQ29kZShkaWdpdFRvQmFzaWMocSwgMCkpKTtcblx0XHRcdFx0XHRiaWFzID0gYWRhcHQoZGVsdGEsIGhhbmRsZWRDUENvdW50UGx1c09uZSwgaGFuZGxlZENQQ291bnQgPT0gYmFzaWNMZW5ndGgpO1xuXHRcdFx0XHRcdGRlbHRhID0gMDtcblx0XHRcdFx0XHQrK2hhbmRsZWRDUENvdW50O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdCsrZGVsdGE7XG5cdFx0XHQrK247XG5cblx0XHR9XG5cdFx0cmV0dXJuIG91dHB1dC5qb2luKCcnKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIFB1bnljb2RlIHN0cmluZyByZXByZXNlbnRpbmcgYSBkb21haW4gbmFtZSBvciBhbiBlbWFpbCBhZGRyZXNzXG5cdCAqIHRvIFVuaWNvZGUuIE9ubHkgdGhlIFB1bnljb2RlZCBwYXJ0cyBvZiB0aGUgaW5wdXQgd2lsbCBiZSBjb252ZXJ0ZWQsIGkuZS5cblx0ICogaXQgZG9lc24ndCBtYXR0ZXIgaWYgeW91IGNhbGwgaXQgb24gYSBzdHJpbmcgdGhhdCBoYXMgYWxyZWFkeSBiZWVuXG5cdCAqIGNvbnZlcnRlZCB0byBVbmljb2RlLlxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBQdW55Y29kZWQgZG9tYWluIG5hbWUgb3IgZW1haWwgYWRkcmVzcyB0b1xuXHQgKiBjb252ZXJ0IHRvIFVuaWNvZGUuXG5cdCAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBVbmljb2RlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBnaXZlbiBQdW55Y29kZVxuXHQgKiBzdHJpbmcuXG5cdCAqL1xuXHRmdW5jdGlvbiB0b1VuaWNvZGUoaW5wdXQpIHtcblx0XHRyZXR1cm4gbWFwRG9tYWluKGlucHV0LCBmdW5jdGlvbihzdHJpbmcpIHtcblx0XHRcdHJldHVybiByZWdleFB1bnljb2RlLnRlc3Qoc3RyaW5nKVxuXHRcdFx0XHQ/IGRlY29kZShzdHJpbmcuc2xpY2UoNCkudG9Mb3dlckNhc2UoKSlcblx0XHRcdFx0OiBzdHJpbmc7XG5cdFx0fSk7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBVbmljb2RlIHN0cmluZyByZXByZXNlbnRpbmcgYSBkb21haW4gbmFtZSBvciBhbiBlbWFpbCBhZGRyZXNzIHRvXG5cdCAqIFB1bnljb2RlLiBPbmx5IHRoZSBub24tQVNDSUkgcGFydHMgb2YgdGhlIGRvbWFpbiBuYW1lIHdpbGwgYmUgY29udmVydGVkLFxuXHQgKiBpLmUuIGl0IGRvZXNuJ3QgbWF0dGVyIGlmIHlvdSBjYWxsIGl0IHdpdGggYSBkb21haW4gdGhhdCdzIGFscmVhZHkgaW5cblx0ICogQVNDSUkuXG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIGRvbWFpbiBuYW1lIG9yIGVtYWlsIGFkZHJlc3MgdG8gY29udmVydCwgYXMgYVxuXHQgKiBVbmljb2RlIHN0cmluZy5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIFB1bnljb2RlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBnaXZlbiBkb21haW4gbmFtZSBvclxuXHQgKiBlbWFpbCBhZGRyZXNzLlxuXHQgKi9cblx0ZnVuY3Rpb24gdG9BU0NJSShpbnB1dCkge1xuXHRcdHJldHVybiBtYXBEb21haW4oaW5wdXQsIGZ1bmN0aW9uKHN0cmluZykge1xuXHRcdFx0cmV0dXJuIHJlZ2V4Tm9uQVNDSUkudGVzdChzdHJpbmcpXG5cdFx0XHRcdD8gJ3huLS0nICsgZW5jb2RlKHN0cmluZylcblx0XHRcdFx0OiBzdHJpbmc7XG5cdFx0fSk7XG5cdH1cblxuXHQvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuXHQvKiogRGVmaW5lIHRoZSBwdWJsaWMgQVBJICovXG5cdHB1bnljb2RlID0ge1xuXHRcdC8qKlxuXHRcdCAqIEEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgY3VycmVudCBQdW55Y29kZS5qcyB2ZXJzaW9uIG51bWJlci5cblx0XHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0XHQgKiBAdHlwZSBTdHJpbmdcblx0XHQgKi9cblx0XHQndmVyc2lvbic6ICcxLjQuMScsXG5cdFx0LyoqXG5cdFx0ICogQW4gb2JqZWN0IG9mIG1ldGhvZHMgdG8gY29udmVydCBmcm9tIEphdmFTY3JpcHQncyBpbnRlcm5hbCBjaGFyYWN0ZXJcblx0XHQgKiByZXByZXNlbnRhdGlvbiAoVUNTLTIpIHRvIFVuaWNvZGUgY29kZSBwb2ludHMsIGFuZCBiYWNrLlxuXHRcdCAqIEBzZWUgPGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LWVuY29kaW5nPlxuXHRcdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHRcdCAqIEB0eXBlIE9iamVjdFxuXHRcdCAqL1xuXHRcdCd1Y3MyJzoge1xuXHRcdFx0J2RlY29kZSc6IHVjczJkZWNvZGUsXG5cdFx0XHQnZW5jb2RlJzogdWNzMmVuY29kZVxuXHRcdH0sXG5cdFx0J2RlY29kZSc6IGRlY29kZSxcblx0XHQnZW5jb2RlJzogZW5jb2RlLFxuXHRcdCd0b0FTQ0lJJzogdG9BU0NJSSxcblx0XHQndG9Vbmljb2RlJzogdG9Vbmljb2RlXG5cdH07XG5cblx0LyoqIEV4cG9zZSBgcHVueWNvZGVgICovXG5cdC8vIFNvbWUgQU1EIGJ1aWxkIG9wdGltaXplcnMsIGxpa2Ugci5qcywgY2hlY2sgZm9yIHNwZWNpZmljIGNvbmRpdGlvbiBwYXR0ZXJuc1xuXHQvLyBsaWtlIHRoZSBmb2xsb3dpbmc6XG5cdGlmIChcblx0XHR0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiZcblx0XHR0eXBlb2YgZGVmaW5lLmFtZCA9PSAnb2JqZWN0JyAmJlxuXHRcdGRlZmluZS5hbWRcblx0KSB7XG5cdFx0ZGVmaW5lKCdwdW55Y29kZScsIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHB1bnljb2RlO1xuXHRcdH0pO1xuXHR9IGVsc2UgaWYgKGZyZWVFeHBvcnRzICYmIGZyZWVNb2R1bGUpIHtcblx0XHRpZiAobW9kdWxlLmV4cG9ydHMgPT0gZnJlZUV4cG9ydHMpIHtcblx0XHRcdC8vIGluIE5vZGUuanMsIGlvLmpzLCBvciBSaW5nb0pTIHYwLjguMCtcblx0XHRcdGZyZWVNb2R1bGUuZXhwb3J0cyA9IHB1bnljb2RlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBpbiBOYXJ3aGFsIG9yIFJpbmdvSlMgdjAuNy4wLVxuXHRcdFx0Zm9yIChrZXkgaW4gcHVueWNvZGUpIHtcblx0XHRcdFx0cHVueWNvZGUuaGFzT3duUHJvcGVydHkoa2V5KSAmJiAoZnJlZUV4cG9ydHNba2V5XSA9IHB1bnljb2RlW2tleV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIHtcblx0XHQvLyBpbiBSaGlubyBvciBhIHdlYiBicm93c2VyXG5cdFx0cm9vdC5wdW55Y29kZSA9IHB1bnljb2RlO1xuXHR9XG5cbn0odGhpcykpO1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxuLy8gSWYgb2JqLmhhc093blByb3BlcnR5IGhhcyBiZWVuIG92ZXJyaWRkZW4sIHRoZW4gY2FsbGluZ1xuLy8gb2JqLmhhc093blByb3BlcnR5KHByb3ApIHdpbGwgYnJlYWsuXG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9qb3llbnQvbm9kZS9pc3N1ZXMvMTcwN1xuZnVuY3Rpb24gaGFzT3duUHJvcGVydHkob2JqLCBwcm9wKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihxcywgc2VwLCBlcSwgb3B0aW9ucykge1xuICBzZXAgPSBzZXAgfHwgJyYnO1xuICBlcSA9IGVxIHx8ICc9JztcbiAgdmFyIG9iaiA9IHt9O1xuXG4gIGlmICh0eXBlb2YgcXMgIT09ICdzdHJpbmcnIHx8IHFzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICB2YXIgcmVnZXhwID0gL1xcKy9nO1xuICBxcyA9IHFzLnNwbGl0KHNlcCk7XG5cbiAgdmFyIG1heEtleXMgPSAxMDAwO1xuICBpZiAob3B0aW9ucyAmJiB0eXBlb2Ygb3B0aW9ucy5tYXhLZXlzID09PSAnbnVtYmVyJykge1xuICAgIG1heEtleXMgPSBvcHRpb25zLm1heEtleXM7XG4gIH1cblxuICB2YXIgbGVuID0gcXMubGVuZ3RoO1xuICAvLyBtYXhLZXlzIDw9IDAgbWVhbnMgdGhhdCB3ZSBzaG91bGQgbm90IGxpbWl0IGtleXMgY291bnRcbiAgaWYgKG1heEtleXMgPiAwICYmIGxlbiA+IG1heEtleXMpIHtcbiAgICBsZW4gPSBtYXhLZXlzO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIHZhciB4ID0gcXNbaV0ucmVwbGFjZShyZWdleHAsICclMjAnKSxcbiAgICAgICAgaWR4ID0geC5pbmRleE9mKGVxKSxcbiAgICAgICAga3N0ciwgdnN0ciwgaywgdjtcblxuICAgIGlmIChpZHggPj0gMCkge1xuICAgICAga3N0ciA9IHguc3Vic3RyKDAsIGlkeCk7XG4gICAgICB2c3RyID0geC5zdWJzdHIoaWR4ICsgMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGtzdHIgPSB4O1xuICAgICAgdnN0ciA9ICcnO1xuICAgIH1cblxuICAgIGsgPSBkZWNvZGVVUklDb21wb25lbnQoa3N0cik7XG4gICAgdiA9IGRlY29kZVVSSUNvbXBvbmVudCh2c3RyKTtcblxuICAgIGlmICghaGFzT3duUHJvcGVydHkob2JqLCBrKSkge1xuICAgICAgb2JqW2tdID0gdjtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkob2JqW2tdKSkge1xuICAgICAgb2JqW2tdLnB1c2godik7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9ialtrXSA9IFtvYmpba10sIHZdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvYmo7XG59O1xuXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKHhzKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoeHMpID09PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBzdHJpbmdpZnlQcmltaXRpdmUgPSBmdW5jdGlvbih2KSB7XG4gIHN3aXRjaCAodHlwZW9mIHYpIHtcbiAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgcmV0dXJuIHY7XG5cbiAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIHJldHVybiB2ID8gJ3RydWUnIDogJ2ZhbHNlJztcblxuICAgIGNhc2UgJ251bWJlcic6XG4gICAgICByZXR1cm4gaXNGaW5pdGUodikgPyB2IDogJyc7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuICcnO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9iaiwgc2VwLCBlcSwgbmFtZSkge1xuICBzZXAgPSBzZXAgfHwgJyYnO1xuICBlcSA9IGVxIHx8ICc9JztcbiAgaWYgKG9iaiA9PT0gbnVsbCkge1xuICAgIG9iaiA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBtYXAob2JqZWN0S2V5cyhvYmopLCBmdW5jdGlvbihrKSB7XG4gICAgICB2YXIga3MgPSBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKGspKSArIGVxO1xuICAgICAgaWYgKGlzQXJyYXkob2JqW2tdKSkge1xuICAgICAgICByZXR1cm4gbWFwKG9ialtrXSwgZnVuY3Rpb24odikge1xuICAgICAgICAgIHJldHVybiBrcyArIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUodikpO1xuICAgICAgICB9KS5qb2luKHNlcCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4ga3MgKyBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKG9ialtrXSkpO1xuICAgICAgfVxuICAgIH0pLmpvaW4oc2VwKTtcblxuICB9XG5cbiAgaWYgKCFuYW1lKSByZXR1cm4gJyc7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKG5hbWUpKSArIGVxICtcbiAgICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUob2JqKSk7XG59O1xuXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKHhzKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoeHMpID09PSAnW29iamVjdCBBcnJheV0nO1xufTtcblxuZnVuY3Rpb24gbWFwICh4cywgZikge1xuICBpZiAoeHMubWFwKSByZXR1cm4geHMubWFwKGYpO1xuICB2YXIgcmVzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgeHMubGVuZ3RoOyBpKyspIHtcbiAgICByZXMucHVzaChmKHhzW2ldLCBpKSk7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cblxudmFyIG9iamVjdEtleXMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiAob2JqKSB7XG4gIHZhciByZXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSByZXMucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLmRlY29kZSA9IGV4cG9ydHMucGFyc2UgPSByZXF1aXJlKCcuL2RlY29kZScpO1xuZXhwb3J0cy5lbmNvZGUgPSBleHBvcnRzLnN0cmluZ2lmeSA9IHJlcXVpcmUoJy4vZW5jb2RlJyk7XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgcHVueWNvZGUgPSByZXF1aXJlKCdwdW55Y29kZScpO1xudmFyIHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcblxuZXhwb3J0cy5wYXJzZSA9IHVybFBhcnNlO1xuZXhwb3J0cy5yZXNvbHZlID0gdXJsUmVzb2x2ZTtcbmV4cG9ydHMucmVzb2x2ZU9iamVjdCA9IHVybFJlc29sdmVPYmplY3Q7XG5leHBvcnRzLmZvcm1hdCA9IHVybEZvcm1hdDtcblxuZXhwb3J0cy5VcmwgPSBVcmw7XG5cbmZ1bmN0aW9uIFVybCgpIHtcbiAgdGhpcy5wcm90b2NvbCA9IG51bGw7XG4gIHRoaXMuc2xhc2hlcyA9IG51bGw7XG4gIHRoaXMuYXV0aCA9IG51bGw7XG4gIHRoaXMuaG9zdCA9IG51bGw7XG4gIHRoaXMucG9ydCA9IG51bGw7XG4gIHRoaXMuaG9zdG5hbWUgPSBudWxsO1xuICB0aGlzLmhhc2ggPSBudWxsO1xuICB0aGlzLnNlYXJjaCA9IG51bGw7XG4gIHRoaXMucXVlcnkgPSBudWxsO1xuICB0aGlzLnBhdGhuYW1lID0gbnVsbDtcbiAgdGhpcy5wYXRoID0gbnVsbDtcbiAgdGhpcy5ocmVmID0gbnVsbDtcbn1cblxuLy8gUmVmZXJlbmNlOiBSRkMgMzk4NiwgUkZDIDE4MDgsIFJGQyAyMzk2XG5cbi8vIGRlZmluZSB0aGVzZSBoZXJlIHNvIGF0IGxlYXN0IHRoZXkgb25seSBoYXZlIHRvIGJlXG4vLyBjb21waWxlZCBvbmNlIG9uIHRoZSBmaXJzdCBtb2R1bGUgbG9hZC5cbnZhciBwcm90b2NvbFBhdHRlcm4gPSAvXihbYS16MC05ListXSs6KS9pLFxuICAgIHBvcnRQYXR0ZXJuID0gLzpbMC05XSokLyxcblxuICAgIC8vIFNwZWNpYWwgY2FzZSBmb3IgYSBzaW1wbGUgcGF0aCBVUkxcbiAgICBzaW1wbGVQYXRoUGF0dGVybiA9IC9eKFxcL1xcLz8oPyFcXC8pW15cXD9cXHNdKikoXFw/W15cXHNdKik/JC8sXG5cbiAgICAvLyBSRkMgMjM5NjogY2hhcmFjdGVycyByZXNlcnZlZCBmb3IgZGVsaW1pdGluZyBVUkxzLlxuICAgIC8vIFdlIGFjdHVhbGx5IGp1c3QgYXV0by1lc2NhcGUgdGhlc2UuXG4gICAgZGVsaW1zID0gWyc8JywgJz4nLCAnXCInLCAnYCcsICcgJywgJ1xccicsICdcXG4nLCAnXFx0J10sXG5cbiAgICAvLyBSRkMgMjM5NjogY2hhcmFjdGVycyBub3QgYWxsb3dlZCBmb3IgdmFyaW91cyByZWFzb25zLlxuICAgIHVud2lzZSA9IFsneycsICd9JywgJ3wnLCAnXFxcXCcsICdeJywgJ2AnXS5jb25jYXQoZGVsaW1zKSxcblxuICAgIC8vIEFsbG93ZWQgYnkgUkZDcywgYnV0IGNhdXNlIG9mIFhTUyBhdHRhY2tzLiAgQWx3YXlzIGVzY2FwZSB0aGVzZS5cbiAgICBhdXRvRXNjYXBlID0gWydcXCcnXS5jb25jYXQodW53aXNlKSxcbiAgICAvLyBDaGFyYWN0ZXJzIHRoYXQgYXJlIG5ldmVyIGV2ZXIgYWxsb3dlZCBpbiBhIGhvc3RuYW1lLlxuICAgIC8vIE5vdGUgdGhhdCBhbnkgaW52YWxpZCBjaGFycyBhcmUgYWxzbyBoYW5kbGVkLCBidXQgdGhlc2VcbiAgICAvLyBhcmUgdGhlIG9uZXMgdGhhdCBhcmUgKmV4cGVjdGVkKiB0byBiZSBzZWVuLCBzbyB3ZSBmYXN0LXBhdGhcbiAgICAvLyB0aGVtLlxuICAgIG5vbkhvc3RDaGFycyA9IFsnJScsICcvJywgJz8nLCAnOycsICcjJ10uY29uY2F0KGF1dG9Fc2NhcGUpLFxuICAgIGhvc3RFbmRpbmdDaGFycyA9IFsnLycsICc/JywgJyMnXSxcbiAgICBob3N0bmFtZU1heExlbiA9IDI1NSxcbiAgICBob3N0bmFtZVBhcnRQYXR0ZXJuID0gL15bK2EtejAtOUEtWl8tXXswLDYzfSQvLFxuICAgIGhvc3RuYW1lUGFydFN0YXJ0ID0gL14oWythLXowLTlBLVpfLV17MCw2M30pKC4qKSQvLFxuICAgIC8vIHByb3RvY29scyB0aGF0IGNhbiBhbGxvdyBcInVuc2FmZVwiIGFuZCBcInVud2lzZVwiIGNoYXJzLlxuICAgIHVuc2FmZVByb3RvY29sID0ge1xuICAgICAgJ2phdmFzY3JpcHQnOiB0cnVlLFxuICAgICAgJ2phdmFzY3JpcHQ6JzogdHJ1ZVxuICAgIH0sXG4gICAgLy8gcHJvdG9jb2xzIHRoYXQgbmV2ZXIgaGF2ZSBhIGhvc3RuYW1lLlxuICAgIGhvc3RsZXNzUHJvdG9jb2wgPSB7XG4gICAgICAnamF2YXNjcmlwdCc6IHRydWUsXG4gICAgICAnamF2YXNjcmlwdDonOiB0cnVlXG4gICAgfSxcbiAgICAvLyBwcm90b2NvbHMgdGhhdCBhbHdheXMgY29udGFpbiBhIC8vIGJpdC5cbiAgICBzbGFzaGVkUHJvdG9jb2wgPSB7XG4gICAgICAnaHR0cCc6IHRydWUsXG4gICAgICAnaHR0cHMnOiB0cnVlLFxuICAgICAgJ2Z0cCc6IHRydWUsXG4gICAgICAnZ29waGVyJzogdHJ1ZSxcbiAgICAgICdmaWxlJzogdHJ1ZSxcbiAgICAgICdodHRwOic6IHRydWUsXG4gICAgICAnaHR0cHM6JzogdHJ1ZSxcbiAgICAgICdmdHA6JzogdHJ1ZSxcbiAgICAgICdnb3BoZXI6JzogdHJ1ZSxcbiAgICAgICdmaWxlOic6IHRydWVcbiAgICB9LFxuICAgIHF1ZXJ5c3RyaW5nID0gcmVxdWlyZSgncXVlcnlzdHJpbmcnKTtcblxuZnVuY3Rpb24gdXJsUGFyc2UodXJsLCBwYXJzZVF1ZXJ5U3RyaW5nLCBzbGFzaGVzRGVub3RlSG9zdCkge1xuICBpZiAodXJsICYmIHV0aWwuaXNPYmplY3QodXJsKSAmJiB1cmwgaW5zdGFuY2VvZiBVcmwpIHJldHVybiB1cmw7XG5cbiAgdmFyIHUgPSBuZXcgVXJsO1xuICB1LnBhcnNlKHVybCwgcGFyc2VRdWVyeVN0cmluZywgc2xhc2hlc0Rlbm90ZUhvc3QpO1xuICByZXR1cm4gdTtcbn1cblxuVXJsLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uKHVybCwgcGFyc2VRdWVyeVN0cmluZywgc2xhc2hlc0Rlbm90ZUhvc3QpIHtcbiAgaWYgKCF1dGlsLmlzU3RyaW5nKHVybCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUGFyYW1ldGVyICd1cmwnIG11c3QgYmUgYSBzdHJpbmcsIG5vdCBcIiArIHR5cGVvZiB1cmwpO1xuICB9XG5cbiAgLy8gQ29weSBjaHJvbWUsIElFLCBvcGVyYSBiYWNrc2xhc2gtaGFuZGxpbmcgYmVoYXZpb3IuXG4gIC8vIEJhY2sgc2xhc2hlcyBiZWZvcmUgdGhlIHF1ZXJ5IHN0cmluZyBnZXQgY29udmVydGVkIHRvIGZvcndhcmQgc2xhc2hlc1xuICAvLyBTZWU6IGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0yNTkxNlxuICB2YXIgcXVlcnlJbmRleCA9IHVybC5pbmRleE9mKCc/JyksXG4gICAgICBzcGxpdHRlciA9XG4gICAgICAgICAgKHF1ZXJ5SW5kZXggIT09IC0xICYmIHF1ZXJ5SW5kZXggPCB1cmwuaW5kZXhPZignIycpKSA/ICc/JyA6ICcjJyxcbiAgICAgIHVTcGxpdCA9IHVybC5zcGxpdChzcGxpdHRlciksXG4gICAgICBzbGFzaFJlZ2V4ID0gL1xcXFwvZztcbiAgdVNwbGl0WzBdID0gdVNwbGl0WzBdLnJlcGxhY2Uoc2xhc2hSZWdleCwgJy8nKTtcbiAgdXJsID0gdVNwbGl0LmpvaW4oc3BsaXR0ZXIpO1xuXG4gIHZhciByZXN0ID0gdXJsO1xuXG4gIC8vIHRyaW0gYmVmb3JlIHByb2NlZWRpbmcuXG4gIC8vIFRoaXMgaXMgdG8gc3VwcG9ydCBwYXJzZSBzdHVmZiBsaWtlIFwiICBodHRwOi8vZm9vLmNvbSAgXFxuXCJcbiAgcmVzdCA9IHJlc3QudHJpbSgpO1xuXG4gIGlmICghc2xhc2hlc0Rlbm90ZUhvc3QgJiYgdXJsLnNwbGl0KCcjJykubGVuZ3RoID09PSAxKSB7XG4gICAgLy8gVHJ5IGZhc3QgcGF0aCByZWdleHBcbiAgICB2YXIgc2ltcGxlUGF0aCA9IHNpbXBsZVBhdGhQYXR0ZXJuLmV4ZWMocmVzdCk7XG4gICAgaWYgKHNpbXBsZVBhdGgpIHtcbiAgICAgIHRoaXMucGF0aCA9IHJlc3Q7XG4gICAgICB0aGlzLmhyZWYgPSByZXN0O1xuICAgICAgdGhpcy5wYXRobmFtZSA9IHNpbXBsZVBhdGhbMV07XG4gICAgICBpZiAoc2ltcGxlUGF0aFsyXSkge1xuICAgICAgICB0aGlzLnNlYXJjaCA9IHNpbXBsZVBhdGhbMl07XG4gICAgICAgIGlmIChwYXJzZVF1ZXJ5U3RyaW5nKSB7XG4gICAgICAgICAgdGhpcy5xdWVyeSA9IHF1ZXJ5c3RyaW5nLnBhcnNlKHRoaXMuc2VhcmNoLnN1YnN0cigxKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5xdWVyeSA9IHRoaXMuc2VhcmNoLnN1YnN0cigxKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChwYXJzZVF1ZXJ5U3RyaW5nKSB7XG4gICAgICAgIHRoaXMuc2VhcmNoID0gJyc7XG4gICAgICAgIHRoaXMucXVlcnkgPSB7fTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfVxuXG4gIHZhciBwcm90byA9IHByb3RvY29sUGF0dGVybi5leGVjKHJlc3QpO1xuICBpZiAocHJvdG8pIHtcbiAgICBwcm90byA9IHByb3RvWzBdO1xuICAgIHZhciBsb3dlclByb3RvID0gcHJvdG8udG9Mb3dlckNhc2UoKTtcbiAgICB0aGlzLnByb3RvY29sID0gbG93ZXJQcm90bztcbiAgICByZXN0ID0gcmVzdC5zdWJzdHIocHJvdG8ubGVuZ3RoKTtcbiAgfVxuXG4gIC8vIGZpZ3VyZSBvdXQgaWYgaXQncyBnb3QgYSBob3N0XG4gIC8vIHVzZXJAc2VydmVyIGlzICphbHdheXMqIGludGVycHJldGVkIGFzIGEgaG9zdG5hbWUsIGFuZCB1cmxcbiAgLy8gcmVzb2x1dGlvbiB3aWxsIHRyZWF0IC8vZm9vL2JhciBhcyBob3N0PWZvbyxwYXRoPWJhciBiZWNhdXNlIHRoYXQnc1xuICAvLyBob3cgdGhlIGJyb3dzZXIgcmVzb2x2ZXMgcmVsYXRpdmUgVVJMcy5cbiAgaWYgKHNsYXNoZXNEZW5vdGVIb3N0IHx8IHByb3RvIHx8IHJlc3QubWF0Y2goL15cXC9cXC9bXkBcXC9dK0BbXkBcXC9dKy8pKSB7XG4gICAgdmFyIHNsYXNoZXMgPSByZXN0LnN1YnN0cigwLCAyKSA9PT0gJy8vJztcbiAgICBpZiAoc2xhc2hlcyAmJiAhKHByb3RvICYmIGhvc3RsZXNzUHJvdG9jb2xbcHJvdG9dKSkge1xuICAgICAgcmVzdCA9IHJlc3Quc3Vic3RyKDIpO1xuICAgICAgdGhpcy5zbGFzaGVzID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWhvc3RsZXNzUHJvdG9jb2xbcHJvdG9dICYmXG4gICAgICAoc2xhc2hlcyB8fCAocHJvdG8gJiYgIXNsYXNoZWRQcm90b2NvbFtwcm90b10pKSkge1xuXG4gICAgLy8gdGhlcmUncyBhIGhvc3RuYW1lLlxuICAgIC8vIHRoZSBmaXJzdCBpbnN0YW5jZSBvZiAvLCA/LCA7LCBvciAjIGVuZHMgdGhlIGhvc3QuXG4gICAgLy9cbiAgICAvLyBJZiB0aGVyZSBpcyBhbiBAIGluIHRoZSBob3N0bmFtZSwgdGhlbiBub24taG9zdCBjaGFycyAqYXJlKiBhbGxvd2VkXG4gICAgLy8gdG8gdGhlIGxlZnQgb2YgdGhlIGxhc3QgQCBzaWduLCB1bmxlc3Mgc29tZSBob3N0LWVuZGluZyBjaGFyYWN0ZXJcbiAgICAvLyBjb21lcyAqYmVmb3JlKiB0aGUgQC1zaWduLlxuICAgIC8vIFVSTHMgYXJlIG9ibm94aW91cy5cbiAgICAvL1xuICAgIC8vIGV4OlxuICAgIC8vIGh0dHA6Ly9hQGJAYy8gPT4gdXNlcjphQGIgaG9zdDpjXG4gICAgLy8gaHR0cDovL2FAYj9AYyA9PiB1c2VyOmEgaG9zdDpjIHBhdGg6Lz9AY1xuXG4gICAgLy8gdjAuMTIgVE9ETyhpc2FhY3MpOiBUaGlzIGlzIG5vdCBxdWl0ZSBob3cgQ2hyb21lIGRvZXMgdGhpbmdzLlxuICAgIC8vIFJldmlldyBvdXIgdGVzdCBjYXNlIGFnYWluc3QgYnJvd3NlcnMgbW9yZSBjb21wcmVoZW5zaXZlbHkuXG5cbiAgICAvLyBmaW5kIHRoZSBmaXJzdCBpbnN0YW5jZSBvZiBhbnkgaG9zdEVuZGluZ0NoYXJzXG4gICAgdmFyIGhvc3RFbmQgPSAtMTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhvc3RFbmRpbmdDaGFycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGhlYyA9IHJlc3QuaW5kZXhPZihob3N0RW5kaW5nQ2hhcnNbaV0pO1xuICAgICAgaWYgKGhlYyAhPT0gLTEgJiYgKGhvc3RFbmQgPT09IC0xIHx8IGhlYyA8IGhvc3RFbmQpKVxuICAgICAgICBob3N0RW5kID0gaGVjO1xuICAgIH1cblxuICAgIC8vIGF0IHRoaXMgcG9pbnQsIGVpdGhlciB3ZSBoYXZlIGFuIGV4cGxpY2l0IHBvaW50IHdoZXJlIHRoZVxuICAgIC8vIGF1dGggcG9ydGlvbiBjYW5ub3QgZ28gcGFzdCwgb3IgdGhlIGxhc3QgQCBjaGFyIGlzIHRoZSBkZWNpZGVyLlxuICAgIHZhciBhdXRoLCBhdFNpZ247XG4gICAgaWYgKGhvc3RFbmQgPT09IC0xKSB7XG4gICAgICAvLyBhdFNpZ24gY2FuIGJlIGFueXdoZXJlLlxuICAgICAgYXRTaWduID0gcmVzdC5sYXN0SW5kZXhPZignQCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBhdFNpZ24gbXVzdCBiZSBpbiBhdXRoIHBvcnRpb24uXG4gICAgICAvLyBodHRwOi8vYUBiL2NAZCA9PiBob3N0OmIgYXV0aDphIHBhdGg6L2NAZFxuICAgICAgYXRTaWduID0gcmVzdC5sYXN0SW5kZXhPZignQCcsIGhvc3RFbmQpO1xuICAgIH1cblxuICAgIC8vIE5vdyB3ZSBoYXZlIGEgcG9ydGlvbiB3aGljaCBpcyBkZWZpbml0ZWx5IHRoZSBhdXRoLlxuICAgIC8vIFB1bGwgdGhhdCBvZmYuXG4gICAgaWYgKGF0U2lnbiAhPT0gLTEpIHtcbiAgICAgIGF1dGggPSByZXN0LnNsaWNlKDAsIGF0U2lnbik7XG4gICAgICByZXN0ID0gcmVzdC5zbGljZShhdFNpZ24gKyAxKTtcbiAgICAgIHRoaXMuYXV0aCA9IGRlY29kZVVSSUNvbXBvbmVudChhdXRoKTtcbiAgICB9XG5cbiAgICAvLyB0aGUgaG9zdCBpcyB0aGUgcmVtYWluaW5nIHRvIHRoZSBsZWZ0IG9mIHRoZSBmaXJzdCBub24taG9zdCBjaGFyXG4gICAgaG9zdEVuZCA9IC0xO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9uSG9zdENoYXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaGVjID0gcmVzdC5pbmRleE9mKG5vbkhvc3RDaGFyc1tpXSk7XG4gICAgICBpZiAoaGVjICE9PSAtMSAmJiAoaG9zdEVuZCA9PT0gLTEgfHwgaGVjIDwgaG9zdEVuZCkpXG4gICAgICAgIGhvc3RFbmQgPSBoZWM7XG4gICAgfVxuICAgIC8vIGlmIHdlIHN0aWxsIGhhdmUgbm90IGhpdCBpdCwgdGhlbiB0aGUgZW50aXJlIHRoaW5nIGlzIGEgaG9zdC5cbiAgICBpZiAoaG9zdEVuZCA9PT0gLTEpXG4gICAgICBob3N0RW5kID0gcmVzdC5sZW5ndGg7XG5cbiAgICB0aGlzLmhvc3QgPSByZXN0LnNsaWNlKDAsIGhvc3RFbmQpO1xuICAgIHJlc3QgPSByZXN0LnNsaWNlKGhvc3RFbmQpO1xuXG4gICAgLy8gcHVsbCBvdXQgcG9ydC5cbiAgICB0aGlzLnBhcnNlSG9zdCgpO1xuXG4gICAgLy8gd2UndmUgaW5kaWNhdGVkIHRoYXQgdGhlcmUgaXMgYSBob3N0bmFtZSxcbiAgICAvLyBzbyBldmVuIGlmIGl0J3MgZW1wdHksIGl0IGhhcyB0byBiZSBwcmVzZW50LlxuICAgIHRoaXMuaG9zdG5hbWUgPSB0aGlzLmhvc3RuYW1lIHx8ICcnO1xuXG4gICAgLy8gaWYgaG9zdG5hbWUgYmVnaW5zIHdpdGggWyBhbmQgZW5kcyB3aXRoIF1cbiAgICAvLyBhc3N1bWUgdGhhdCBpdCdzIGFuIElQdjYgYWRkcmVzcy5cbiAgICB2YXIgaXB2Nkhvc3RuYW1lID0gdGhpcy5ob3N0bmFtZVswXSA9PT0gJ1snICYmXG4gICAgICAgIHRoaXMuaG9zdG5hbWVbdGhpcy5ob3N0bmFtZS5sZW5ndGggLSAxXSA9PT0gJ10nO1xuXG4gICAgLy8gdmFsaWRhdGUgYSBsaXR0bGUuXG4gICAgaWYgKCFpcHY2SG9zdG5hbWUpIHtcbiAgICAgIHZhciBob3N0cGFydHMgPSB0aGlzLmhvc3RuYW1lLnNwbGl0KC9cXC4vKTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gaG9zdHBhcnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB2YXIgcGFydCA9IGhvc3RwYXJ0c1tpXTtcbiAgICAgICAgaWYgKCFwYXJ0KSBjb250aW51ZTtcbiAgICAgICAgaWYgKCFwYXJ0Lm1hdGNoKGhvc3RuYW1lUGFydFBhdHRlcm4pKSB7XG4gICAgICAgICAgdmFyIG5ld3BhcnQgPSAnJztcbiAgICAgICAgICBmb3IgKHZhciBqID0gMCwgayA9IHBhcnQubGVuZ3RoOyBqIDwgazsgaisrKSB7XG4gICAgICAgICAgICBpZiAocGFydC5jaGFyQ29kZUF0KGopID4gMTI3KSB7XG4gICAgICAgICAgICAgIC8vIHdlIHJlcGxhY2Ugbm9uLUFTQ0lJIGNoYXIgd2l0aCBhIHRlbXBvcmFyeSBwbGFjZWhvbGRlclxuICAgICAgICAgICAgICAvLyB3ZSBuZWVkIHRoaXMgdG8gbWFrZSBzdXJlIHNpemUgb2YgaG9zdG5hbWUgaXMgbm90XG4gICAgICAgICAgICAgIC8vIGJyb2tlbiBieSByZXBsYWNpbmcgbm9uLUFTQ0lJIGJ5IG5vdGhpbmdcbiAgICAgICAgICAgICAgbmV3cGFydCArPSAneCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBuZXdwYXJ0ICs9IHBhcnRbal07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIHdlIHRlc3QgYWdhaW4gd2l0aCBBU0NJSSBjaGFyIG9ubHlcbiAgICAgICAgICBpZiAoIW5ld3BhcnQubWF0Y2goaG9zdG5hbWVQYXJ0UGF0dGVybikpIHtcbiAgICAgICAgICAgIHZhciB2YWxpZFBhcnRzID0gaG9zdHBhcnRzLnNsaWNlKDAsIGkpO1xuICAgICAgICAgICAgdmFyIG5vdEhvc3QgPSBob3N0cGFydHMuc2xpY2UoaSArIDEpO1xuICAgICAgICAgICAgdmFyIGJpdCA9IHBhcnQubWF0Y2goaG9zdG5hbWVQYXJ0U3RhcnQpO1xuICAgICAgICAgICAgaWYgKGJpdCkge1xuICAgICAgICAgICAgICB2YWxpZFBhcnRzLnB1c2goYml0WzFdKTtcbiAgICAgICAgICAgICAgbm90SG9zdC51bnNoaWZ0KGJpdFsyXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobm90SG9zdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgcmVzdCA9ICcvJyArIG5vdEhvc3Quam9pbignLicpICsgcmVzdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuaG9zdG5hbWUgPSB2YWxpZFBhcnRzLmpvaW4oJy4nKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLmhvc3RuYW1lLmxlbmd0aCA+IGhvc3RuYW1lTWF4TGVuKSB7XG4gICAgICB0aGlzLmhvc3RuYW1lID0gJyc7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGhvc3RuYW1lcyBhcmUgYWx3YXlzIGxvd2VyIGNhc2UuXG4gICAgICB0aGlzLmhvc3RuYW1lID0gdGhpcy5ob3N0bmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cblxuICAgIGlmICghaXB2Nkhvc3RuYW1lKSB7XG4gICAgICAvLyBJRE5BIFN1cHBvcnQ6IFJldHVybnMgYSBwdW55Y29kZWQgcmVwcmVzZW50YXRpb24gb2YgXCJkb21haW5cIi5cbiAgICAgIC8vIEl0IG9ubHkgY29udmVydHMgcGFydHMgb2YgdGhlIGRvbWFpbiBuYW1lIHRoYXRcbiAgICAgIC8vIGhhdmUgbm9uLUFTQ0lJIGNoYXJhY3RlcnMsIGkuZS4gaXQgZG9lc24ndCBtYXR0ZXIgaWZcbiAgICAgIC8vIHlvdSBjYWxsIGl0IHdpdGggYSBkb21haW4gdGhhdCBhbHJlYWR5IGlzIEFTQ0lJLW9ubHkuXG4gICAgICB0aGlzLmhvc3RuYW1lID0gcHVueWNvZGUudG9BU0NJSSh0aGlzLmhvc3RuYW1lKTtcbiAgICB9XG5cbiAgICB2YXIgcCA9IHRoaXMucG9ydCA/ICc6JyArIHRoaXMucG9ydCA6ICcnO1xuICAgIHZhciBoID0gdGhpcy5ob3N0bmFtZSB8fCAnJztcbiAgICB0aGlzLmhvc3QgPSBoICsgcDtcbiAgICB0aGlzLmhyZWYgKz0gdGhpcy5ob3N0O1xuXG4gICAgLy8gc3RyaXAgWyBhbmQgXSBmcm9tIHRoZSBob3N0bmFtZVxuICAgIC8vIHRoZSBob3N0IGZpZWxkIHN0aWxsIHJldGFpbnMgdGhlbSwgdGhvdWdoXG4gICAgaWYgKGlwdjZIb3N0bmFtZSkge1xuICAgICAgdGhpcy5ob3N0bmFtZSA9IHRoaXMuaG9zdG5hbWUuc3Vic3RyKDEsIHRoaXMuaG9zdG5hbWUubGVuZ3RoIC0gMik7XG4gICAgICBpZiAocmVzdFswXSAhPT0gJy8nKSB7XG4gICAgICAgIHJlc3QgPSAnLycgKyByZXN0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIG5vdyByZXN0IGlzIHNldCB0byB0aGUgcG9zdC1ob3N0IHN0dWZmLlxuICAvLyBjaG9wIG9mZiBhbnkgZGVsaW0gY2hhcnMuXG4gIGlmICghdW5zYWZlUHJvdG9jb2xbbG93ZXJQcm90b10pIHtcblxuICAgIC8vIEZpcnN0LCBtYWtlIDEwMCUgc3VyZSB0aGF0IGFueSBcImF1dG9Fc2NhcGVcIiBjaGFycyBnZXRcbiAgICAvLyBlc2NhcGVkLCBldmVuIGlmIGVuY29kZVVSSUNvbXBvbmVudCBkb2Vzbid0IHRoaW5rIHRoZXlcbiAgICAvLyBuZWVkIHRvIGJlLlxuICAgIGZvciAodmFyIGkgPSAwLCBsID0gYXV0b0VzY2FwZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBhZSA9IGF1dG9Fc2NhcGVbaV07XG4gICAgICBpZiAocmVzdC5pbmRleE9mKGFlKSA9PT0gLTEpXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgdmFyIGVzYyA9IGVuY29kZVVSSUNvbXBvbmVudChhZSk7XG4gICAgICBpZiAoZXNjID09PSBhZSkge1xuICAgICAgICBlc2MgPSBlc2NhcGUoYWUpO1xuICAgICAgfVxuICAgICAgcmVzdCA9IHJlc3Quc3BsaXQoYWUpLmpvaW4oZXNjKTtcbiAgICB9XG4gIH1cblxuXG4gIC8vIGNob3Agb2ZmIGZyb20gdGhlIHRhaWwgZmlyc3QuXG4gIHZhciBoYXNoID0gcmVzdC5pbmRleE9mKCcjJyk7XG4gIGlmIChoYXNoICE9PSAtMSkge1xuICAgIC8vIGdvdCBhIGZyYWdtZW50IHN0cmluZy5cbiAgICB0aGlzLmhhc2ggPSByZXN0LnN1YnN0cihoYXNoKTtcbiAgICByZXN0ID0gcmVzdC5zbGljZSgwLCBoYXNoKTtcbiAgfVxuICB2YXIgcW0gPSByZXN0LmluZGV4T2YoJz8nKTtcbiAgaWYgKHFtICE9PSAtMSkge1xuICAgIHRoaXMuc2VhcmNoID0gcmVzdC5zdWJzdHIocW0pO1xuICAgIHRoaXMucXVlcnkgPSByZXN0LnN1YnN0cihxbSArIDEpO1xuICAgIGlmIChwYXJzZVF1ZXJ5U3RyaW5nKSB7XG4gICAgICB0aGlzLnF1ZXJ5ID0gcXVlcnlzdHJpbmcucGFyc2UodGhpcy5xdWVyeSk7XG4gICAgfVxuICAgIHJlc3QgPSByZXN0LnNsaWNlKDAsIHFtKTtcbiAgfSBlbHNlIGlmIChwYXJzZVF1ZXJ5U3RyaW5nKSB7XG4gICAgLy8gbm8gcXVlcnkgc3RyaW5nLCBidXQgcGFyc2VRdWVyeVN0cmluZyBzdGlsbCByZXF1ZXN0ZWRcbiAgICB0aGlzLnNlYXJjaCA9ICcnO1xuICAgIHRoaXMucXVlcnkgPSB7fTtcbiAgfVxuICBpZiAocmVzdCkgdGhpcy5wYXRobmFtZSA9IHJlc3Q7XG4gIGlmIChzbGFzaGVkUHJvdG9jb2xbbG93ZXJQcm90b10gJiZcbiAgICAgIHRoaXMuaG9zdG5hbWUgJiYgIXRoaXMucGF0aG5hbWUpIHtcbiAgICB0aGlzLnBhdGhuYW1lID0gJy8nO1xuICB9XG5cbiAgLy90byBzdXBwb3J0IGh0dHAucmVxdWVzdFxuICBpZiAodGhpcy5wYXRobmFtZSB8fCB0aGlzLnNlYXJjaCkge1xuICAgIHZhciBwID0gdGhpcy5wYXRobmFtZSB8fCAnJztcbiAgICB2YXIgcyA9IHRoaXMuc2VhcmNoIHx8ICcnO1xuICAgIHRoaXMucGF0aCA9IHAgKyBzO1xuICB9XG5cbiAgLy8gZmluYWxseSwgcmVjb25zdHJ1Y3QgdGhlIGhyZWYgYmFzZWQgb24gd2hhdCBoYXMgYmVlbiB2YWxpZGF0ZWQuXG4gIHRoaXMuaHJlZiA9IHRoaXMuZm9ybWF0KCk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gZm9ybWF0IGEgcGFyc2VkIG9iamVjdCBpbnRvIGEgdXJsIHN0cmluZ1xuZnVuY3Rpb24gdXJsRm9ybWF0KG9iaikge1xuICAvLyBlbnN1cmUgaXQncyBhbiBvYmplY3QsIGFuZCBub3QgYSBzdHJpbmcgdXJsLlxuICAvLyBJZiBpdCdzIGFuIG9iaiwgdGhpcyBpcyBhIG5vLW9wLlxuICAvLyB0aGlzIHdheSwgeW91IGNhbiBjYWxsIHVybF9mb3JtYXQoKSBvbiBzdHJpbmdzXG4gIC8vIHRvIGNsZWFuIHVwIHBvdGVudGlhbGx5IHdvbmt5IHVybHMuXG4gIGlmICh1dGlsLmlzU3RyaW5nKG9iaikpIG9iaiA9IHVybFBhcnNlKG9iaik7XG4gIGlmICghKG9iaiBpbnN0YW5jZW9mIFVybCkpIHJldHVybiBVcmwucHJvdG90eXBlLmZvcm1hdC5jYWxsKG9iaik7XG4gIHJldHVybiBvYmouZm9ybWF0KCk7XG59XG5cblVybC5wcm90b3R5cGUuZm9ybWF0ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBhdXRoID0gdGhpcy5hdXRoIHx8ICcnO1xuICBpZiAoYXV0aCkge1xuICAgIGF1dGggPSBlbmNvZGVVUklDb21wb25lbnQoYXV0aCk7XG4gICAgYXV0aCA9IGF1dGgucmVwbGFjZSgvJTNBL2ksICc6Jyk7XG4gICAgYXV0aCArPSAnQCc7XG4gIH1cblxuICB2YXIgcHJvdG9jb2wgPSB0aGlzLnByb3RvY29sIHx8ICcnLFxuICAgICAgcGF0aG5hbWUgPSB0aGlzLnBhdGhuYW1lIHx8ICcnLFxuICAgICAgaGFzaCA9IHRoaXMuaGFzaCB8fCAnJyxcbiAgICAgIGhvc3QgPSBmYWxzZSxcbiAgICAgIHF1ZXJ5ID0gJyc7XG5cbiAgaWYgKHRoaXMuaG9zdCkge1xuICAgIGhvc3QgPSBhdXRoICsgdGhpcy5ob3N0O1xuICB9IGVsc2UgaWYgKHRoaXMuaG9zdG5hbWUpIHtcbiAgICBob3N0ID0gYXV0aCArICh0aGlzLmhvc3RuYW1lLmluZGV4T2YoJzonKSA9PT0gLTEgP1xuICAgICAgICB0aGlzLmhvc3RuYW1lIDpcbiAgICAgICAgJ1snICsgdGhpcy5ob3N0bmFtZSArICddJyk7XG4gICAgaWYgKHRoaXMucG9ydCkge1xuICAgICAgaG9zdCArPSAnOicgKyB0aGlzLnBvcnQ7XG4gICAgfVxuICB9XG5cbiAgaWYgKHRoaXMucXVlcnkgJiZcbiAgICAgIHV0aWwuaXNPYmplY3QodGhpcy5xdWVyeSkgJiZcbiAgICAgIE9iamVjdC5rZXlzKHRoaXMucXVlcnkpLmxlbmd0aCkge1xuICAgIHF1ZXJ5ID0gcXVlcnlzdHJpbmcuc3RyaW5naWZ5KHRoaXMucXVlcnkpO1xuICB9XG5cbiAgdmFyIHNlYXJjaCA9IHRoaXMuc2VhcmNoIHx8IChxdWVyeSAmJiAoJz8nICsgcXVlcnkpKSB8fCAnJztcblxuICBpZiAocHJvdG9jb2wgJiYgcHJvdG9jb2wuc3Vic3RyKC0xKSAhPT0gJzonKSBwcm90b2NvbCArPSAnOic7XG5cbiAgLy8gb25seSB0aGUgc2xhc2hlZFByb3RvY29scyBnZXQgdGhlIC8vLiAgTm90IG1haWx0bzosIHhtcHA6LCBldGMuXG4gIC8vIHVubGVzcyB0aGV5IGhhZCB0aGVtIHRvIGJlZ2luIHdpdGguXG4gIGlmICh0aGlzLnNsYXNoZXMgfHxcbiAgICAgICghcHJvdG9jb2wgfHwgc2xhc2hlZFByb3RvY29sW3Byb3RvY29sXSkgJiYgaG9zdCAhPT0gZmFsc2UpIHtcbiAgICBob3N0ID0gJy8vJyArIChob3N0IHx8ICcnKTtcbiAgICBpZiAocGF0aG5hbWUgJiYgcGF0aG5hbWUuY2hhckF0KDApICE9PSAnLycpIHBhdGhuYW1lID0gJy8nICsgcGF0aG5hbWU7XG4gIH0gZWxzZSBpZiAoIWhvc3QpIHtcbiAgICBob3N0ID0gJyc7XG4gIH1cblxuICBpZiAoaGFzaCAmJiBoYXNoLmNoYXJBdCgwKSAhPT0gJyMnKSBoYXNoID0gJyMnICsgaGFzaDtcbiAgaWYgKHNlYXJjaCAmJiBzZWFyY2guY2hhckF0KDApICE9PSAnPycpIHNlYXJjaCA9ICc/JyArIHNlYXJjaDtcblxuICBwYXRobmFtZSA9IHBhdGhuYW1lLnJlcGxhY2UoL1s/I10vZywgZnVuY3Rpb24obWF0Y2gpIHtcbiAgICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KG1hdGNoKTtcbiAgfSk7XG4gIHNlYXJjaCA9IHNlYXJjaC5yZXBsYWNlKCcjJywgJyUyMycpO1xuXG4gIHJldHVybiBwcm90b2NvbCArIGhvc3QgKyBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7XG59O1xuXG5mdW5jdGlvbiB1cmxSZXNvbHZlKHNvdXJjZSwgcmVsYXRpdmUpIHtcbiAgcmV0dXJuIHVybFBhcnNlKHNvdXJjZSwgZmFsc2UsIHRydWUpLnJlc29sdmUocmVsYXRpdmUpO1xufVxuXG5VcmwucHJvdG90eXBlLnJlc29sdmUgPSBmdW5jdGlvbihyZWxhdGl2ZSkge1xuICByZXR1cm4gdGhpcy5yZXNvbHZlT2JqZWN0KHVybFBhcnNlKHJlbGF0aXZlLCBmYWxzZSwgdHJ1ZSkpLmZvcm1hdCgpO1xufTtcblxuZnVuY3Rpb24gdXJsUmVzb2x2ZU9iamVjdChzb3VyY2UsIHJlbGF0aXZlKSB7XG4gIGlmICghc291cmNlKSByZXR1cm4gcmVsYXRpdmU7XG4gIHJldHVybiB1cmxQYXJzZShzb3VyY2UsIGZhbHNlLCB0cnVlKS5yZXNvbHZlT2JqZWN0KHJlbGF0aXZlKTtcbn1cblxuVXJsLnByb3RvdHlwZS5yZXNvbHZlT2JqZWN0ID0gZnVuY3Rpb24ocmVsYXRpdmUpIHtcbiAgaWYgKHV0aWwuaXNTdHJpbmcocmVsYXRpdmUpKSB7XG4gICAgdmFyIHJlbCA9IG5ldyBVcmwoKTtcbiAgICByZWwucGFyc2UocmVsYXRpdmUsIGZhbHNlLCB0cnVlKTtcbiAgICByZWxhdGl2ZSA9IHJlbDtcbiAgfVxuXG4gIHZhciByZXN1bHQgPSBuZXcgVXJsKCk7XG4gIHZhciB0a2V5cyA9IE9iamVjdC5rZXlzKHRoaXMpO1xuICBmb3IgKHZhciB0ayA9IDA7IHRrIDwgdGtleXMubGVuZ3RoOyB0aysrKSB7XG4gICAgdmFyIHRrZXkgPSB0a2V5c1t0a107XG4gICAgcmVzdWx0W3RrZXldID0gdGhpc1t0a2V5XTtcbiAgfVxuXG4gIC8vIGhhc2ggaXMgYWx3YXlzIG92ZXJyaWRkZW4sIG5vIG1hdHRlciB3aGF0LlxuICAvLyBldmVuIGhyZWY9XCJcIiB3aWxsIHJlbW92ZSBpdC5cbiAgcmVzdWx0Lmhhc2ggPSByZWxhdGl2ZS5oYXNoO1xuXG4gIC8vIGlmIHRoZSByZWxhdGl2ZSB1cmwgaXMgZW1wdHksIHRoZW4gdGhlcmUncyBub3RoaW5nIGxlZnQgdG8gZG8gaGVyZS5cbiAgaWYgKHJlbGF0aXZlLmhyZWYgPT09ICcnKSB7XG4gICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8vIGhyZWZzIGxpa2UgLy9mb28vYmFyIGFsd2F5cyBjdXQgdG8gdGhlIHByb3RvY29sLlxuICBpZiAocmVsYXRpdmUuc2xhc2hlcyAmJiAhcmVsYXRpdmUucHJvdG9jb2wpIHtcbiAgICAvLyB0YWtlIGV2ZXJ5dGhpbmcgZXhjZXB0IHRoZSBwcm90b2NvbCBmcm9tIHJlbGF0aXZlXG4gICAgdmFyIHJrZXlzID0gT2JqZWN0LmtleXMocmVsYXRpdmUpO1xuICAgIGZvciAodmFyIHJrID0gMDsgcmsgPCBya2V5cy5sZW5ndGg7IHJrKyspIHtcbiAgICAgIHZhciBya2V5ID0gcmtleXNbcmtdO1xuICAgICAgaWYgKHJrZXkgIT09ICdwcm90b2NvbCcpXG4gICAgICAgIHJlc3VsdFtya2V5XSA9IHJlbGF0aXZlW3JrZXldO1xuICAgIH1cblxuICAgIC8vdXJsUGFyc2UgYXBwZW5kcyB0cmFpbGluZyAvIHRvIHVybHMgbGlrZSBodHRwOi8vd3d3LmV4YW1wbGUuY29tXG4gICAgaWYgKHNsYXNoZWRQcm90b2NvbFtyZXN1bHQucHJvdG9jb2xdICYmXG4gICAgICAgIHJlc3VsdC5ob3N0bmFtZSAmJiAhcmVzdWx0LnBhdGhuYW1lKSB7XG4gICAgICByZXN1bHQucGF0aCA9IHJlc3VsdC5wYXRobmFtZSA9ICcvJztcbiAgICB9XG5cbiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgaWYgKHJlbGF0aXZlLnByb3RvY29sICYmIHJlbGF0aXZlLnByb3RvY29sICE9PSByZXN1bHQucHJvdG9jb2wpIHtcbiAgICAvLyBpZiBpdCdzIGEga25vd24gdXJsIHByb3RvY29sLCB0aGVuIGNoYW5naW5nXG4gICAgLy8gdGhlIHByb3RvY29sIGRvZXMgd2VpcmQgdGhpbmdzXG4gICAgLy8gZmlyc3QsIGlmIGl0J3Mgbm90IGZpbGU6LCB0aGVuIHdlIE1VU1QgaGF2ZSBhIGhvc3QsXG4gICAgLy8gYW5kIGlmIHRoZXJlIHdhcyBhIHBhdGhcbiAgICAvLyB0byBiZWdpbiB3aXRoLCB0aGVuIHdlIE1VU1QgaGF2ZSBhIHBhdGguXG4gICAgLy8gaWYgaXQgaXMgZmlsZTosIHRoZW4gdGhlIGhvc3QgaXMgZHJvcHBlZCxcbiAgICAvLyBiZWNhdXNlIHRoYXQncyBrbm93biB0byBiZSBob3N0bGVzcy5cbiAgICAvLyBhbnl0aGluZyBlbHNlIGlzIGFzc3VtZWQgdG8gYmUgYWJzb2x1dGUuXG4gICAgaWYgKCFzbGFzaGVkUHJvdG9jb2xbcmVsYXRpdmUucHJvdG9jb2xdKSB7XG4gICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHJlbGF0aXZlKTtcbiAgICAgIGZvciAodmFyIHYgPSAwOyB2IDwga2V5cy5sZW5ndGg7IHYrKykge1xuICAgICAgICB2YXIgayA9IGtleXNbdl07XG4gICAgICAgIHJlc3VsdFtrXSA9IHJlbGF0aXZlW2tdO1xuICAgICAgfVxuICAgICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHJlc3VsdC5wcm90b2NvbCA9IHJlbGF0aXZlLnByb3RvY29sO1xuICAgIGlmICghcmVsYXRpdmUuaG9zdCAmJiAhaG9zdGxlc3NQcm90b2NvbFtyZWxhdGl2ZS5wcm90b2NvbF0pIHtcbiAgICAgIHZhciByZWxQYXRoID0gKHJlbGF0aXZlLnBhdGhuYW1lIHx8ICcnKS5zcGxpdCgnLycpO1xuICAgICAgd2hpbGUgKHJlbFBhdGgubGVuZ3RoICYmICEocmVsYXRpdmUuaG9zdCA9IHJlbFBhdGguc2hpZnQoKSkpO1xuICAgICAgaWYgKCFyZWxhdGl2ZS5ob3N0KSByZWxhdGl2ZS5ob3N0ID0gJyc7XG4gICAgICBpZiAoIXJlbGF0aXZlLmhvc3RuYW1lKSByZWxhdGl2ZS5ob3N0bmFtZSA9ICcnO1xuICAgICAgaWYgKHJlbFBhdGhbMF0gIT09ICcnKSByZWxQYXRoLnVuc2hpZnQoJycpO1xuICAgICAgaWYgKHJlbFBhdGgubGVuZ3RoIDwgMikgcmVsUGF0aC51bnNoaWZ0KCcnKTtcbiAgICAgIHJlc3VsdC5wYXRobmFtZSA9IHJlbFBhdGguam9pbignLycpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQucGF0aG5hbWUgPSByZWxhdGl2ZS5wYXRobmFtZTtcbiAgICB9XG4gICAgcmVzdWx0LnNlYXJjaCA9IHJlbGF0aXZlLnNlYXJjaDtcbiAgICByZXN1bHQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTtcbiAgICByZXN1bHQuaG9zdCA9IHJlbGF0aXZlLmhvc3QgfHwgJyc7XG4gICAgcmVzdWx0LmF1dGggPSByZWxhdGl2ZS5hdXRoO1xuICAgIHJlc3VsdC5ob3N0bmFtZSA9IHJlbGF0aXZlLmhvc3RuYW1lIHx8IHJlbGF0aXZlLmhvc3Q7XG4gICAgcmVzdWx0LnBvcnQgPSByZWxhdGl2ZS5wb3J0O1xuICAgIC8vIHRvIHN1cHBvcnQgaHR0cC5yZXF1ZXN0XG4gICAgaWYgKHJlc3VsdC5wYXRobmFtZSB8fCByZXN1bHQuc2VhcmNoKSB7XG4gICAgICB2YXIgcCA9IHJlc3VsdC5wYXRobmFtZSB8fCAnJztcbiAgICAgIHZhciBzID0gcmVzdWx0LnNlYXJjaCB8fCAnJztcbiAgICAgIHJlc3VsdC5wYXRoID0gcCArIHM7XG4gICAgfVxuICAgIHJlc3VsdC5zbGFzaGVzID0gcmVzdWx0LnNsYXNoZXMgfHwgcmVsYXRpdmUuc2xhc2hlcztcbiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgdmFyIGlzU291cmNlQWJzID0gKHJlc3VsdC5wYXRobmFtZSAmJiByZXN1bHQucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpLFxuICAgICAgaXNSZWxBYnMgPSAoXG4gICAgICAgICAgcmVsYXRpdmUuaG9zdCB8fFxuICAgICAgICAgIHJlbGF0aXZlLnBhdGhuYW1lICYmIHJlbGF0aXZlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nXG4gICAgICApLFxuICAgICAgbXVzdEVuZEFicyA9IChpc1JlbEFicyB8fCBpc1NvdXJjZUFicyB8fFxuICAgICAgICAgICAgICAgICAgICAocmVzdWx0Lmhvc3QgJiYgcmVsYXRpdmUucGF0aG5hbWUpKSxcbiAgICAgIHJlbW92ZUFsbERvdHMgPSBtdXN0RW5kQWJzLFxuICAgICAgc3JjUGF0aCA9IHJlc3VsdC5wYXRobmFtZSAmJiByZXN1bHQucGF0aG5hbWUuc3BsaXQoJy8nKSB8fCBbXSxcbiAgICAgIHJlbFBhdGggPSByZWxhdGl2ZS5wYXRobmFtZSAmJiByZWxhdGl2ZS5wYXRobmFtZS5zcGxpdCgnLycpIHx8IFtdLFxuICAgICAgcHN5Y2hvdGljID0gcmVzdWx0LnByb3RvY29sICYmICFzbGFzaGVkUHJvdG9jb2xbcmVzdWx0LnByb3RvY29sXTtcblxuICAvLyBpZiB0aGUgdXJsIGlzIGEgbm9uLXNsYXNoZWQgdXJsLCB0aGVuIHJlbGF0aXZlXG4gIC8vIGxpbmtzIGxpa2UgLi4vLi4gc2hvdWxkIGJlIGFibGVcbiAgLy8gdG8gY3Jhd2wgdXAgdG8gdGhlIGhvc3RuYW1lLCBhcyB3ZWxsLiAgVGhpcyBpcyBzdHJhbmdlLlxuICAvLyByZXN1bHQucHJvdG9jb2wgaGFzIGFscmVhZHkgYmVlbiBzZXQgYnkgbm93LlxuICAvLyBMYXRlciBvbiwgcHV0IHRoZSBmaXJzdCBwYXRoIHBhcnQgaW50byB0aGUgaG9zdCBmaWVsZC5cbiAgaWYgKHBzeWNob3RpYykge1xuICAgIHJlc3VsdC5ob3N0bmFtZSA9ICcnO1xuICAgIHJlc3VsdC5wb3J0ID0gbnVsbDtcbiAgICBpZiAocmVzdWx0Lmhvc3QpIHtcbiAgICAgIGlmIChzcmNQYXRoWzBdID09PSAnJykgc3JjUGF0aFswXSA9IHJlc3VsdC5ob3N0O1xuICAgICAgZWxzZSBzcmNQYXRoLnVuc2hpZnQocmVzdWx0Lmhvc3QpO1xuICAgIH1cbiAgICByZXN1bHQuaG9zdCA9ICcnO1xuICAgIGlmIChyZWxhdGl2ZS5wcm90b2NvbCkge1xuICAgICAgcmVsYXRpdmUuaG9zdG5hbWUgPSBudWxsO1xuICAgICAgcmVsYXRpdmUucG9ydCA9IG51bGw7XG4gICAgICBpZiAocmVsYXRpdmUuaG9zdCkge1xuICAgICAgICBpZiAocmVsUGF0aFswXSA9PT0gJycpIHJlbFBhdGhbMF0gPSByZWxhdGl2ZS5ob3N0O1xuICAgICAgICBlbHNlIHJlbFBhdGgudW5zaGlmdChyZWxhdGl2ZS5ob3N0KTtcbiAgICAgIH1cbiAgICAgIHJlbGF0aXZlLmhvc3QgPSBudWxsO1xuICAgIH1cbiAgICBtdXN0RW5kQWJzID0gbXVzdEVuZEFicyAmJiAocmVsUGF0aFswXSA9PT0gJycgfHwgc3JjUGF0aFswXSA9PT0gJycpO1xuICB9XG5cbiAgaWYgKGlzUmVsQWJzKSB7XG4gICAgLy8gaXQncyBhYnNvbHV0ZS5cbiAgICByZXN1bHQuaG9zdCA9IChyZWxhdGl2ZS5ob3N0IHx8IHJlbGF0aXZlLmhvc3QgPT09ICcnKSA/XG4gICAgICAgICAgICAgICAgICByZWxhdGl2ZS5ob3N0IDogcmVzdWx0Lmhvc3Q7XG4gICAgcmVzdWx0Lmhvc3RuYW1lID0gKHJlbGF0aXZlLmhvc3RuYW1lIHx8IHJlbGF0aXZlLmhvc3RuYW1lID09PSAnJykgP1xuICAgICAgICAgICAgICAgICAgICAgIHJlbGF0aXZlLmhvc3RuYW1lIDogcmVzdWx0Lmhvc3RuYW1lO1xuICAgIHJlc3VsdC5zZWFyY2ggPSByZWxhdGl2ZS5zZWFyY2g7XG4gICAgcmVzdWx0LnF1ZXJ5ID0gcmVsYXRpdmUucXVlcnk7XG4gICAgc3JjUGF0aCA9IHJlbFBhdGg7XG4gICAgLy8gZmFsbCB0aHJvdWdoIHRvIHRoZSBkb3QtaGFuZGxpbmcgYmVsb3cuXG4gIH0gZWxzZSBpZiAocmVsUGF0aC5sZW5ndGgpIHtcbiAgICAvLyBpdCdzIHJlbGF0aXZlXG4gICAgLy8gdGhyb3cgYXdheSB0aGUgZXhpc3RpbmcgZmlsZSwgYW5kIHRha2UgdGhlIG5ldyBwYXRoIGluc3RlYWQuXG4gICAgaWYgKCFzcmNQYXRoKSBzcmNQYXRoID0gW107XG4gICAgc3JjUGF0aC5wb3AoKTtcbiAgICBzcmNQYXRoID0gc3JjUGF0aC5jb25jYXQocmVsUGF0aCk7XG4gICAgcmVzdWx0LnNlYXJjaCA9IHJlbGF0aXZlLnNlYXJjaDtcbiAgICByZXN1bHQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTtcbiAgfSBlbHNlIGlmICghdXRpbC5pc051bGxPclVuZGVmaW5lZChyZWxhdGl2ZS5zZWFyY2gpKSB7XG4gICAgLy8ganVzdCBwdWxsIG91dCB0aGUgc2VhcmNoLlxuICAgIC8vIGxpa2UgaHJlZj0nP2ZvbycuXG4gICAgLy8gUHV0IHRoaXMgYWZ0ZXIgdGhlIG90aGVyIHR3byBjYXNlcyBiZWNhdXNlIGl0IHNpbXBsaWZpZXMgdGhlIGJvb2xlYW5zXG4gICAgaWYgKHBzeWNob3RpYykge1xuICAgICAgcmVzdWx0Lmhvc3RuYW1lID0gcmVzdWx0Lmhvc3QgPSBzcmNQYXRoLnNoaWZ0KCk7XG4gICAgICAvL29jY2F0aW9uYWx5IHRoZSBhdXRoIGNhbiBnZXQgc3R1Y2sgb25seSBpbiBob3N0XG4gICAgICAvL3RoaXMgZXNwZWNpYWxseSBoYXBwZW5zIGluIGNhc2VzIGxpa2VcbiAgICAgIC8vdXJsLnJlc29sdmVPYmplY3QoJ21haWx0bzpsb2NhbDFAZG9tYWluMScsICdsb2NhbDJAZG9tYWluMicpXG4gICAgICB2YXIgYXV0aEluSG9zdCA9IHJlc3VsdC5ob3N0ICYmIHJlc3VsdC5ob3N0LmluZGV4T2YoJ0AnKSA+IDAgP1xuICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuaG9zdC5zcGxpdCgnQCcpIDogZmFsc2U7XG4gICAgICBpZiAoYXV0aEluSG9zdCkge1xuICAgICAgICByZXN1bHQuYXV0aCA9IGF1dGhJbkhvc3Quc2hpZnQoKTtcbiAgICAgICAgcmVzdWx0Lmhvc3QgPSByZXN1bHQuaG9zdG5hbWUgPSBhdXRoSW5Ib3N0LnNoaWZ0KCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdC5zZWFyY2ggPSByZWxhdGl2ZS5zZWFyY2g7XG4gICAgcmVzdWx0LnF1ZXJ5ID0gcmVsYXRpdmUucXVlcnk7XG4gICAgLy90byBzdXBwb3J0IGh0dHAucmVxdWVzdFxuICAgIGlmICghdXRpbC5pc051bGwocmVzdWx0LnBhdGhuYW1lKSB8fCAhdXRpbC5pc051bGwocmVzdWx0LnNlYXJjaCkpIHtcbiAgICAgIHJlc3VsdC5wYXRoID0gKHJlc3VsdC5wYXRobmFtZSA/IHJlc3VsdC5wYXRobmFtZSA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAgIChyZXN1bHQuc2VhcmNoID8gcmVzdWx0LnNlYXJjaCA6ICcnKTtcbiAgICB9XG4gICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGlmICghc3JjUGF0aC5sZW5ndGgpIHtcbiAgICAvLyBubyBwYXRoIGF0IGFsbC4gIGVhc3kuXG4gICAgLy8gd2UndmUgYWxyZWFkeSBoYW5kbGVkIHRoZSBvdGhlciBzdHVmZiBhYm92ZS5cbiAgICByZXN1bHQucGF0aG5hbWUgPSBudWxsO1xuICAgIC8vdG8gc3VwcG9ydCBodHRwLnJlcXVlc3RcbiAgICBpZiAocmVzdWx0LnNlYXJjaCkge1xuICAgICAgcmVzdWx0LnBhdGggPSAnLycgKyByZXN1bHQuc2VhcmNoO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQucGF0aCA9IG51bGw7XG4gICAgfVxuICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvLyBpZiBhIHVybCBFTkRzIGluIC4gb3IgLi4sIHRoZW4gaXQgbXVzdCBnZXQgYSB0cmFpbGluZyBzbGFzaC5cbiAgLy8gaG93ZXZlciwgaWYgaXQgZW5kcyBpbiBhbnl0aGluZyBlbHNlIG5vbi1zbGFzaHksXG4gIC8vIHRoZW4gaXQgbXVzdCBOT1QgZ2V0IGEgdHJhaWxpbmcgc2xhc2guXG4gIHZhciBsYXN0ID0gc3JjUGF0aC5zbGljZSgtMSlbMF07XG4gIHZhciBoYXNUcmFpbGluZ1NsYXNoID0gKFxuICAgICAgKHJlc3VsdC5ob3N0IHx8IHJlbGF0aXZlLmhvc3QgfHwgc3JjUGF0aC5sZW5ndGggPiAxKSAmJlxuICAgICAgKGxhc3QgPT09ICcuJyB8fCBsYXN0ID09PSAnLi4nKSB8fCBsYXN0ID09PSAnJyk7XG5cbiAgLy8gc3RyaXAgc2luZ2xlIGRvdHMsIHJlc29sdmUgZG91YmxlIGRvdHMgdG8gcGFyZW50IGRpclxuICAvLyBpZiB0aGUgcGF0aCB0cmllcyB0byBnbyBhYm92ZSB0aGUgcm9vdCwgYHVwYCBlbmRzIHVwID4gMFxuICB2YXIgdXAgPSAwO1xuICBmb3IgKHZhciBpID0gc3JjUGF0aC5sZW5ndGg7IGkgPj0gMDsgaS0tKSB7XG4gICAgbGFzdCA9IHNyY1BhdGhbaV07XG4gICAgaWYgKGxhc3QgPT09ICcuJykge1xuICAgICAgc3JjUGF0aC5zcGxpY2UoaSwgMSk7XG4gICAgfSBlbHNlIGlmIChsYXN0ID09PSAnLi4nKSB7XG4gICAgICBzcmNQYXRoLnNwbGljZShpLCAxKTtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCkge1xuICAgICAgc3JjUGF0aC5zcGxpY2UoaSwgMSk7XG4gICAgICB1cC0tO1xuICAgIH1cbiAgfVxuXG4gIC8vIGlmIHRoZSBwYXRoIGlzIGFsbG93ZWQgdG8gZ28gYWJvdmUgdGhlIHJvb3QsIHJlc3RvcmUgbGVhZGluZyAuLnNcbiAgaWYgKCFtdXN0RW5kQWJzICYmICFyZW1vdmVBbGxEb3RzKSB7XG4gICAgZm9yICg7IHVwLS07IHVwKSB7XG4gICAgICBzcmNQYXRoLnVuc2hpZnQoJy4uJyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKG11c3RFbmRBYnMgJiYgc3JjUGF0aFswXSAhPT0gJycgJiZcbiAgICAgICghc3JjUGF0aFswXSB8fCBzcmNQYXRoWzBdLmNoYXJBdCgwKSAhPT0gJy8nKSkge1xuICAgIHNyY1BhdGgudW5zaGlmdCgnJyk7XG4gIH1cblxuICBpZiAoaGFzVHJhaWxpbmdTbGFzaCAmJiAoc3JjUGF0aC5qb2luKCcvJykuc3Vic3RyKC0xKSAhPT0gJy8nKSkge1xuICAgIHNyY1BhdGgucHVzaCgnJyk7XG4gIH1cblxuICB2YXIgaXNBYnNvbHV0ZSA9IHNyY1BhdGhbMF0gPT09ICcnIHx8XG4gICAgICAoc3JjUGF0aFswXSAmJiBzcmNQYXRoWzBdLmNoYXJBdCgwKSA9PT0gJy8nKTtcblxuICAvLyBwdXQgdGhlIGhvc3QgYmFja1xuICBpZiAocHN5Y2hvdGljKSB7XG4gICAgcmVzdWx0Lmhvc3RuYW1lID0gcmVzdWx0Lmhvc3QgPSBpc0Fic29sdXRlID8gJycgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjUGF0aC5sZW5ndGggPyBzcmNQYXRoLnNoaWZ0KCkgOiAnJztcbiAgICAvL29jY2F0aW9uYWx5IHRoZSBhdXRoIGNhbiBnZXQgc3R1Y2sgb25seSBpbiBob3N0XG4gICAgLy90aGlzIGVzcGVjaWFsbHkgaGFwcGVucyBpbiBjYXNlcyBsaWtlXG4gICAgLy91cmwucmVzb2x2ZU9iamVjdCgnbWFpbHRvOmxvY2FsMUBkb21haW4xJywgJ2xvY2FsMkBkb21haW4yJylcbiAgICB2YXIgYXV0aEluSG9zdCA9IHJlc3VsdC5ob3N0ICYmIHJlc3VsdC5ob3N0LmluZGV4T2YoJ0AnKSA+IDAgP1xuICAgICAgICAgICAgICAgICAgICAgcmVzdWx0Lmhvc3Quc3BsaXQoJ0AnKSA6IGZhbHNlO1xuICAgIGlmIChhdXRoSW5Ib3N0KSB7XG4gICAgICByZXN1bHQuYXV0aCA9IGF1dGhJbkhvc3Quc2hpZnQoKTtcbiAgICAgIHJlc3VsdC5ob3N0ID0gcmVzdWx0Lmhvc3RuYW1lID0gYXV0aEluSG9zdC5zaGlmdCgpO1xuICAgIH1cbiAgfVxuXG4gIG11c3RFbmRBYnMgPSBtdXN0RW5kQWJzIHx8IChyZXN1bHQuaG9zdCAmJiBzcmNQYXRoLmxlbmd0aCk7XG5cbiAgaWYgKG11c3RFbmRBYnMgJiYgIWlzQWJzb2x1dGUpIHtcbiAgICBzcmNQYXRoLnVuc2hpZnQoJycpO1xuICB9XG5cbiAgaWYgKCFzcmNQYXRoLmxlbmd0aCkge1xuICAgIHJlc3VsdC5wYXRobmFtZSA9IG51bGw7XG4gICAgcmVzdWx0LnBhdGggPSBudWxsO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdC5wYXRobmFtZSA9IHNyY1BhdGguam9pbignLycpO1xuICB9XG5cbiAgLy90byBzdXBwb3J0IHJlcXVlc3QuaHR0cFxuICBpZiAoIXV0aWwuaXNOdWxsKHJlc3VsdC5wYXRobmFtZSkgfHwgIXV0aWwuaXNOdWxsKHJlc3VsdC5zZWFyY2gpKSB7XG4gICAgcmVzdWx0LnBhdGggPSAocmVzdWx0LnBhdGhuYW1lID8gcmVzdWx0LnBhdGhuYW1lIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChyZXN1bHQuc2VhcmNoID8gcmVzdWx0LnNlYXJjaCA6ICcnKTtcbiAgfVxuICByZXN1bHQuYXV0aCA9IHJlbGF0aXZlLmF1dGggfHwgcmVzdWx0LmF1dGg7XG4gIHJlc3VsdC5zbGFzaGVzID0gcmVzdWx0LnNsYXNoZXMgfHwgcmVsYXRpdmUuc2xhc2hlcztcbiAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5VcmwucHJvdG90eXBlLnBhcnNlSG9zdCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaG9zdCA9IHRoaXMuaG9zdDtcbiAgdmFyIHBvcnQgPSBwb3J0UGF0dGVybi5leGVjKGhvc3QpO1xuICBpZiAocG9ydCkge1xuICAgIHBvcnQgPSBwb3J0WzBdO1xuICAgIGlmIChwb3J0ICE9PSAnOicpIHtcbiAgICAgIHRoaXMucG9ydCA9IHBvcnQuc3Vic3RyKDEpO1xuICAgIH1cbiAgICBob3N0ID0gaG9zdC5zdWJzdHIoMCwgaG9zdC5sZW5ndGggLSBwb3J0Lmxlbmd0aCk7XG4gIH1cbiAgaWYgKGhvc3QpIHRoaXMuaG9zdG5hbWUgPSBob3N0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzU3RyaW5nOiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gdHlwZW9mKGFyZykgPT09ICdzdHJpbmcnO1xuICB9LFxuICBpc09iamVjdDogZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHR5cGVvZihhcmcpID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG4gIH0sXG4gIGlzTnVsbDogZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGFyZyA9PT0gbnVsbDtcbiAgfSxcbiAgaXNOdWxsT3JVbmRlZmluZWQ6IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBhcmcgPT0gbnVsbDtcbiAgfVxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNCdWZmZXIoYXJnKSB7XG4gIHJldHVybiBhcmcgJiYgdHlwZW9mIGFyZyA9PT0gJ29iamVjdCdcbiAgICAmJiB0eXBlb2YgYXJnLmNvcHkgPT09ICdmdW5jdGlvbidcbiAgICAmJiB0eXBlb2YgYXJnLmZpbGwgPT09ICdmdW5jdGlvbidcbiAgICAmJiB0eXBlb2YgYXJnLnJlYWRVSW50OCA9PT0gJ2Z1bmN0aW9uJztcbn0iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxudmFyIGZvcm1hdFJlZ0V4cCA9IC8lW3NkaiVdL2c7XG5leHBvcnRzLmZvcm1hdCA9IGZ1bmN0aW9uKGYpIHtcbiAgaWYgKCFpc1N0cmluZyhmKSkge1xuICAgIHZhciBvYmplY3RzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIG9iamVjdHMucHVzaChpbnNwZWN0KGFyZ3VtZW50c1tpXSkpO1xuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0cy5qb2luKCcgJyk7XG4gIH1cblxuICB2YXIgaSA9IDE7XG4gIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG4gIHZhciBzdHIgPSBTdHJpbmcoZikucmVwbGFjZShmb3JtYXRSZWdFeHAsIGZ1bmN0aW9uKHgpIHtcbiAgICBpZiAoeCA9PT0gJyUlJykgcmV0dXJuICclJztcbiAgICBpZiAoaSA+PSBsZW4pIHJldHVybiB4O1xuICAgIHN3aXRjaCAoeCkge1xuICAgICAgY2FzZSAnJXMnOiByZXR1cm4gU3RyaW5nKGFyZ3NbaSsrXSk7XG4gICAgICBjYXNlICclZCc6IHJldHVybiBOdW1iZXIoYXJnc1tpKytdKTtcbiAgICAgIGNhc2UgJyVqJzpcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYXJnc1tpKytdKTtcbiAgICAgICAgfSBjYXRjaCAoXykge1xuICAgICAgICAgIHJldHVybiAnW0NpcmN1bGFyXSc7XG4gICAgICAgIH1cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB4O1xuICAgIH1cbiAgfSk7XG4gIGZvciAodmFyIHggPSBhcmdzW2ldOyBpIDwgbGVuOyB4ID0gYXJnc1srK2ldKSB7XG4gICAgaWYgKGlzTnVsbCh4KSB8fCAhaXNPYmplY3QoeCkpIHtcbiAgICAgIHN0ciArPSAnICcgKyB4O1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgKz0gJyAnICsgaW5zcGVjdCh4KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0cjtcbn07XG5cblxuLy8gTWFyayB0aGF0IGEgbWV0aG9kIHNob3VsZCBub3QgYmUgdXNlZC5cbi8vIFJldHVybnMgYSBtb2RpZmllZCBmdW5jdGlvbiB3aGljaCB3YXJucyBvbmNlIGJ5IGRlZmF1bHQuXG4vLyBJZiAtLW5vLWRlcHJlY2F0aW9uIGlzIHNldCwgdGhlbiBpdCBpcyBhIG5vLW9wLlxuZXhwb3J0cy5kZXByZWNhdGUgPSBmdW5jdGlvbihmbiwgbXNnKSB7XG4gIC8vIEFsbG93IGZvciBkZXByZWNhdGluZyB0aGluZ3MgaW4gdGhlIHByb2Nlc3Mgb2Ygc3RhcnRpbmcgdXAuXG4gIGlmIChpc1VuZGVmaW5lZChnbG9iYWwucHJvY2VzcykpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZXhwb3J0cy5kZXByZWNhdGUoZm4sIG1zZykuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKHByb2Nlc3Mubm9EZXByZWNhdGlvbiA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiBmbjtcbiAgfVxuXG4gIHZhciB3YXJuZWQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gZGVwcmVjYXRlZCgpIHtcbiAgICBpZiAoIXdhcm5lZCkge1xuICAgICAgaWYgKHByb2Nlc3MudGhyb3dEZXByZWNhdGlvbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy50cmFjZURlcHJlY2F0aW9uKSB7XG4gICAgICAgIGNvbnNvbGUudHJhY2UobXNnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IobXNnKTtcbiAgICAgIH1cbiAgICAgIHdhcm5lZCA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgcmV0dXJuIGRlcHJlY2F0ZWQ7XG59O1xuXG5cbnZhciBkZWJ1Z3MgPSB7fTtcbnZhciBkZWJ1Z0Vudmlyb247XG5leHBvcnRzLmRlYnVnbG9nID0gZnVuY3Rpb24oc2V0KSB7XG4gIGlmIChpc1VuZGVmaW5lZChkZWJ1Z0Vudmlyb24pKVxuICAgIGRlYnVnRW52aXJvbiA9IHByb2Nlc3MuZW52Lk5PREVfREVCVUcgfHwgJyc7XG4gIHNldCA9IHNldC50b1VwcGVyQ2FzZSgpO1xuICBpZiAoIWRlYnVnc1tzZXRdKSB7XG4gICAgaWYgKG5ldyBSZWdFeHAoJ1xcXFxiJyArIHNldCArICdcXFxcYicsICdpJykudGVzdChkZWJ1Z0Vudmlyb24pKSB7XG4gICAgICB2YXIgcGlkID0gcHJvY2Vzcy5waWQ7XG4gICAgICBkZWJ1Z3Nbc2V0XSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgbXNnID0gZXhwb3J0cy5mb3JtYXQuYXBwbHkoZXhwb3J0cywgYXJndW1lbnRzKTtcbiAgICAgICAgY29uc29sZS5lcnJvcignJXMgJWQ6ICVzJywgc2V0LCBwaWQsIG1zZyk7XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWJ1Z3Nbc2V0XSA9IGZ1bmN0aW9uKCkge307XG4gICAgfVxuICB9XG4gIHJldHVybiBkZWJ1Z3Nbc2V0XTtcbn07XG5cblxuLyoqXG4gKiBFY2hvcyB0aGUgdmFsdWUgb2YgYSB2YWx1ZS4gVHJ5cyB0byBwcmludCB0aGUgdmFsdWUgb3V0XG4gKiBpbiB0aGUgYmVzdCB3YXkgcG9zc2libGUgZ2l2ZW4gdGhlIGRpZmZlcmVudCB0eXBlcy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIFRoZSBvYmplY3QgdG8gcHJpbnQgb3V0LlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uYWwgb3B0aW9ucyBvYmplY3QgdGhhdCBhbHRlcnMgdGhlIG91dHB1dC5cbiAqL1xuLyogbGVnYWN5OiBvYmosIHNob3dIaWRkZW4sIGRlcHRoLCBjb2xvcnMqL1xuZnVuY3Rpb24gaW5zcGVjdChvYmosIG9wdHMpIHtcbiAgLy8gZGVmYXVsdCBvcHRpb25zXG4gIHZhciBjdHggPSB7XG4gICAgc2VlbjogW10sXG4gICAgc3R5bGl6ZTogc3R5bGl6ZU5vQ29sb3JcbiAgfTtcbiAgLy8gbGVnYWN5Li4uXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDMpIGN0eC5kZXB0aCA9IGFyZ3VtZW50c1syXTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gNCkgY3R4LmNvbG9ycyA9IGFyZ3VtZW50c1szXTtcbiAgaWYgKGlzQm9vbGVhbihvcHRzKSkge1xuICAgIC8vIGxlZ2FjeS4uLlxuICAgIGN0eC5zaG93SGlkZGVuID0gb3B0cztcbiAgfSBlbHNlIGlmIChvcHRzKSB7XG4gICAgLy8gZ290IGFuIFwib3B0aW9uc1wiIG9iamVjdFxuICAgIGV4cG9ydHMuX2V4dGVuZChjdHgsIG9wdHMpO1xuICB9XG4gIC8vIHNldCBkZWZhdWx0IG9wdGlvbnNcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5zaG93SGlkZGVuKSkgY3R4LnNob3dIaWRkZW4gPSBmYWxzZTtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5kZXB0aCkpIGN0eC5kZXB0aCA9IDI7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguY29sb3JzKSkgY3R4LmNvbG9ycyA9IGZhbHNlO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmN1c3RvbUluc3BlY3QpKSBjdHguY3VzdG9tSW5zcGVjdCA9IHRydWU7XG4gIGlmIChjdHguY29sb3JzKSBjdHguc3R5bGl6ZSA9IHN0eWxpemVXaXRoQ29sb3I7XG4gIHJldHVybiBmb3JtYXRWYWx1ZShjdHgsIG9iaiwgY3R4LmRlcHRoKTtcbn1cbmV4cG9ydHMuaW5zcGVjdCA9IGluc3BlY3Q7XG5cblxuLy8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9BTlNJX2VzY2FwZV9jb2RlI2dyYXBoaWNzXG5pbnNwZWN0LmNvbG9ycyA9IHtcbiAgJ2JvbGQnIDogWzEsIDIyXSxcbiAgJ2l0YWxpYycgOiBbMywgMjNdLFxuICAndW5kZXJsaW5lJyA6IFs0LCAyNF0sXG4gICdpbnZlcnNlJyA6IFs3LCAyN10sXG4gICd3aGl0ZScgOiBbMzcsIDM5XSxcbiAgJ2dyZXknIDogWzkwLCAzOV0sXG4gICdibGFjaycgOiBbMzAsIDM5XSxcbiAgJ2JsdWUnIDogWzM0LCAzOV0sXG4gICdjeWFuJyA6IFszNiwgMzldLFxuICAnZ3JlZW4nIDogWzMyLCAzOV0sXG4gICdtYWdlbnRhJyA6IFszNSwgMzldLFxuICAncmVkJyA6IFszMSwgMzldLFxuICAneWVsbG93JyA6IFszMywgMzldXG59O1xuXG4vLyBEb24ndCB1c2UgJ2JsdWUnIG5vdCB2aXNpYmxlIG9uIGNtZC5leGVcbmluc3BlY3Quc3R5bGVzID0ge1xuICAnc3BlY2lhbCc6ICdjeWFuJyxcbiAgJ251bWJlcic6ICd5ZWxsb3cnLFxuICAnYm9vbGVhbic6ICd5ZWxsb3cnLFxuICAndW5kZWZpbmVkJzogJ2dyZXknLFxuICAnbnVsbCc6ICdib2xkJyxcbiAgJ3N0cmluZyc6ICdncmVlbicsXG4gICdkYXRlJzogJ21hZ2VudGEnLFxuICAvLyBcIm5hbWVcIjogaW50ZW50aW9uYWxseSBub3Qgc3R5bGluZ1xuICAncmVnZXhwJzogJ3JlZCdcbn07XG5cblxuZnVuY3Rpb24gc3R5bGl6ZVdpdGhDb2xvcihzdHIsIHN0eWxlVHlwZSkge1xuICB2YXIgc3R5bGUgPSBpbnNwZWN0LnN0eWxlc1tzdHlsZVR5cGVdO1xuXG4gIGlmIChzdHlsZSkge1xuICAgIHJldHVybiAnXFx1MDAxYlsnICsgaW5zcGVjdC5jb2xvcnNbc3R5bGVdWzBdICsgJ20nICsgc3RyICtcbiAgICAgICAgICAgJ1xcdTAwMWJbJyArIGluc3BlY3QuY29sb3JzW3N0eWxlXVsxXSArICdtJztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc3RyO1xuICB9XG59XG5cblxuZnVuY3Rpb24gc3R5bGl6ZU5vQ29sb3Ioc3RyLCBzdHlsZVR5cGUpIHtcbiAgcmV0dXJuIHN0cjtcbn1cblxuXG5mdW5jdGlvbiBhcnJheVRvSGFzaChhcnJheSkge1xuICB2YXIgaGFzaCA9IHt9O1xuXG4gIGFycmF5LmZvckVhY2goZnVuY3Rpb24odmFsLCBpZHgpIHtcbiAgICBoYXNoW3ZhbF0gPSB0cnVlO1xuICB9KTtcblxuICByZXR1cm4gaGFzaDtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRWYWx1ZShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMpIHtcbiAgLy8gUHJvdmlkZSBhIGhvb2sgZm9yIHVzZXItc3BlY2lmaWVkIGluc3BlY3QgZnVuY3Rpb25zLlxuICAvLyBDaGVjayB0aGF0IHZhbHVlIGlzIGFuIG9iamVjdCB3aXRoIGFuIGluc3BlY3QgZnVuY3Rpb24gb24gaXRcbiAgaWYgKGN0eC5jdXN0b21JbnNwZWN0ICYmXG4gICAgICB2YWx1ZSAmJlxuICAgICAgaXNGdW5jdGlvbih2YWx1ZS5pbnNwZWN0KSAmJlxuICAgICAgLy8gRmlsdGVyIG91dCB0aGUgdXRpbCBtb2R1bGUsIGl0J3MgaW5zcGVjdCBmdW5jdGlvbiBpcyBzcGVjaWFsXG4gICAgICB2YWx1ZS5pbnNwZWN0ICE9PSBleHBvcnRzLmluc3BlY3QgJiZcbiAgICAgIC8vIEFsc28gZmlsdGVyIG91dCBhbnkgcHJvdG90eXBlIG9iamVjdHMgdXNpbmcgdGhlIGNpcmN1bGFyIGNoZWNrLlxuICAgICAgISh2YWx1ZS5jb25zdHJ1Y3RvciAmJiB2YWx1ZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgPT09IHZhbHVlKSkge1xuICAgIHZhciByZXQgPSB2YWx1ZS5pbnNwZWN0KHJlY3Vyc2VUaW1lcywgY3R4KTtcbiAgICBpZiAoIWlzU3RyaW5nKHJldCkpIHtcbiAgICAgIHJldCA9IGZvcm1hdFZhbHVlKGN0eCwgcmV0LCByZWN1cnNlVGltZXMpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgLy8gUHJpbWl0aXZlIHR5cGVzIGNhbm5vdCBoYXZlIHByb3BlcnRpZXNcbiAgdmFyIHByaW1pdGl2ZSA9IGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKTtcbiAgaWYgKHByaW1pdGl2ZSkge1xuICAgIHJldHVybiBwcmltaXRpdmU7XG4gIH1cblxuICAvLyBMb29rIHVwIHRoZSBrZXlzIG9mIHRoZSBvYmplY3QuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXModmFsdWUpO1xuICB2YXIgdmlzaWJsZUtleXMgPSBhcnJheVRvSGFzaChrZXlzKTtcblxuICBpZiAoY3R4LnNob3dIaWRkZW4pIHtcbiAgICBrZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModmFsdWUpO1xuICB9XG5cbiAgLy8gSUUgZG9lc24ndCBtYWtlIGVycm9yIGZpZWxkcyBub24tZW51bWVyYWJsZVxuICAvLyBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvZHd3NTJzYnQodj12cy45NCkuYXNweFxuICBpZiAoaXNFcnJvcih2YWx1ZSlcbiAgICAgICYmIChrZXlzLmluZGV4T2YoJ21lc3NhZ2UnKSA+PSAwIHx8IGtleXMuaW5kZXhPZignZGVzY3JpcHRpb24nKSA+PSAwKSkge1xuICAgIHJldHVybiBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gIH1cblxuICAvLyBTb21lIHR5cGUgb2Ygb2JqZWN0IHdpdGhvdXQgcHJvcGVydGllcyBjYW4gYmUgc2hvcnRjdXR0ZWQuXG4gIGlmIChrZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgICAgdmFyIG5hbWUgPSB2YWx1ZS5uYW1lID8gJzogJyArIHZhbHVlLm5hbWUgOiAnJztcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnW0Z1bmN0aW9uJyArIG5hbWUgKyAnXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAncmVnZXhwJyk7XG4gICAgfVxuICAgIGlmIChpc0RhdGUodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdkYXRlJyk7XG4gICAgfVxuICAgIGlmIChpc0Vycm9yKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgYmFzZSA9ICcnLCBhcnJheSA9IGZhbHNlLCBicmFjZXMgPSBbJ3snLCAnfSddO1xuXG4gIC8vIE1ha2UgQXJyYXkgc2F5IHRoYXQgdGhleSBhcmUgQXJyYXlcbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgYXJyYXkgPSB0cnVlO1xuICAgIGJyYWNlcyA9IFsnWycsICddJ107XG4gIH1cblxuICAvLyBNYWtlIGZ1bmN0aW9ucyBzYXkgdGhhdCB0aGV5IGFyZSBmdW5jdGlvbnNcbiAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgdmFyIG4gPSB2YWx1ZS5uYW1lID8gJzogJyArIHZhbHVlLm5hbWUgOiAnJztcbiAgICBiYXNlID0gJyBbRnVuY3Rpb24nICsgbiArICddJztcbiAgfVxuXG4gIC8vIE1ha2UgUmVnRXhwcyBzYXkgdGhhdCB0aGV5IGFyZSBSZWdFeHBzXG4gIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgfVxuXG4gIC8vIE1ha2UgZGF0ZXMgd2l0aCBwcm9wZXJ0aWVzIGZpcnN0IHNheSB0aGUgZGF0ZVxuICBpZiAoaXNEYXRlKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBEYXRlLnByb3RvdHlwZS50b1VUQ1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgfVxuXG4gIC8vIE1ha2UgZXJyb3Igd2l0aCBtZXNzYWdlIGZpcnN0IHNheSB0aGUgZXJyb3JcbiAgaWYgKGlzRXJyb3IodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgfVxuXG4gIGlmIChrZXlzLmxlbmd0aCA9PT0gMCAmJiAoIWFycmF5IHx8IHZhbHVlLmxlbmd0aCA9PSAwKSkge1xuICAgIHJldHVybiBicmFjZXNbMF0gKyBiYXNlICsgYnJhY2VzWzFdO1xuICB9XG5cbiAgaWYgKHJlY3Vyc2VUaW1lcyA8IDApIHtcbiAgICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ3JlZ2V4cCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoJ1tPYmplY3RdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cblxuICBjdHguc2Vlbi5wdXNoKHZhbHVlKTtcblxuICB2YXIgb3V0cHV0O1xuICBpZiAoYXJyYXkpIHtcbiAgICBvdXRwdXQgPSBmb3JtYXRBcnJheShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXlzKTtcbiAgfSBlbHNlIHtcbiAgICBvdXRwdXQgPSBrZXlzLm1hcChmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXksIGFycmF5KTtcbiAgICB9KTtcbiAgfVxuXG4gIGN0eC5zZWVuLnBvcCgpO1xuXG4gIHJldHVybiByZWR1Y2VUb1NpbmdsZVN0cmluZyhvdXRwdXQsIGJhc2UsIGJyYWNlcyk7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0UHJpbWl0aXZlKGN0eCwgdmFsdWUpIHtcbiAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJ3VuZGVmaW5lZCcsICd1bmRlZmluZWQnKTtcbiAgaWYgKGlzU3RyaW5nKHZhbHVlKSkge1xuICAgIHZhciBzaW1wbGUgPSAnXFwnJyArIEpTT04uc3RyaW5naWZ5KHZhbHVlKS5yZXBsYWNlKC9eXCJ8XCIkL2csICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLycvZywgXCJcXFxcJ1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcXFxcIi9nLCAnXCInKSArICdcXCcnO1xuICAgIHJldHVybiBjdHguc3R5bGl6ZShzaW1wbGUsICdzdHJpbmcnKTtcbiAgfVxuICBpZiAoaXNOdW1iZXIodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgnJyArIHZhbHVlLCAnbnVtYmVyJyk7XG4gIGlmIChpc0Jvb2xlYW4odmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgnJyArIHZhbHVlLCAnYm9vbGVhbicpO1xuICAvLyBGb3Igc29tZSByZWFzb24gdHlwZW9mIG51bGwgaXMgXCJvYmplY3RcIiwgc28gc3BlY2lhbCBjYXNlIGhlcmUuXG4gIGlmIChpc051bGwodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgnbnVsbCcsICdudWxsJyk7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0RXJyb3IodmFsdWUpIHtcbiAgcmV0dXJuICdbJyArIEVycm9yLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSArICddJztcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRBcnJheShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXlzKSB7XG4gIHZhciBvdXRwdXQgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkodmFsdWUsIFN0cmluZyhpKSkpIHtcbiAgICAgIG91dHB1dC5wdXNoKGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsXG4gICAgICAgICAgU3RyaW5nKGkpLCB0cnVlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dHB1dC5wdXNoKCcnKTtcbiAgICB9XG4gIH1cbiAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgIGlmICgha2V5Lm1hdGNoKC9eXFxkKyQvKSkge1xuICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cyxcbiAgICAgICAgICBrZXksIHRydWUpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb3V0cHV0O1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpIHtcbiAgdmFyIG5hbWUsIHN0ciwgZGVzYztcbiAgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodmFsdWUsIGtleSkgfHwgeyB2YWx1ZTogdmFsdWVba2V5XSB9O1xuICBpZiAoZGVzYy5nZXQpIHtcbiAgICBpZiAoZGVzYy5zZXQpIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbR2V0dGVyL1NldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0dldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoZGVzYy5zZXQpIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbU2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG4gIGlmICghaGFzT3duUHJvcGVydHkodmlzaWJsZUtleXMsIGtleSkpIHtcbiAgICBuYW1lID0gJ1snICsga2V5ICsgJ10nO1xuICB9XG4gIGlmICghc3RyKSB7XG4gICAgaWYgKGN0eC5zZWVuLmluZGV4T2YoZGVzYy52YWx1ZSkgPCAwKSB7XG4gICAgICBpZiAoaXNOdWxsKHJlY3Vyc2VUaW1lcykpIHtcbiAgICAgICAgc3RyID0gZm9ybWF0VmFsdWUoY3R4LCBkZXNjLnZhbHVlLCBudWxsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0ciA9IGZvcm1hdFZhbHVlKGN0eCwgZGVzYy52YWx1ZSwgcmVjdXJzZVRpbWVzIC0gMSk7XG4gICAgICB9XG4gICAgICBpZiAoc3RyLmluZGV4T2YoJ1xcbicpID4gLTEpIHtcbiAgICAgICAgaWYgKGFycmF5KSB7XG4gICAgICAgICAgc3RyID0gc3RyLnNwbGl0KCdcXG4nKS5tYXAoZnVuY3Rpb24obGluZSkge1xuICAgICAgICAgICAgcmV0dXJuICcgICcgKyBsaW5lO1xuICAgICAgICAgIH0pLmpvaW4oJ1xcbicpLnN1YnN0cigyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdHIgPSAnXFxuJyArIHN0ci5zcGxpdCgnXFxuJykubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgICAgICAgIHJldHVybiAnICAgJyArIGxpbmU7XG4gICAgICAgICAgfSkuam9pbignXFxuJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tDaXJjdWxhcl0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuICBpZiAoaXNVbmRlZmluZWQobmFtZSkpIHtcbiAgICBpZiAoYXJyYXkgJiYga2V5Lm1hdGNoKC9eXFxkKyQvKSkge1xuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gICAgbmFtZSA9IEpTT04uc3RyaW5naWZ5KCcnICsga2V5KTtcbiAgICBpZiAobmFtZS5tYXRjaCgvXlwiKFthLXpBLVpfXVthLXpBLVpfMC05XSopXCIkLykpIHtcbiAgICAgIG5hbWUgPSBuYW1lLnN1YnN0cigxLCBuYW1lLmxlbmd0aCAtIDIpO1xuICAgICAgbmFtZSA9IGN0eC5zdHlsaXplKG5hbWUsICduYW1lJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoLycvZywgXCJcXFxcJ1wiKVxuICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcXFwiL2csICdcIicpXG4gICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8oXlwifFwiJCkvZywgXCInXCIpO1xuICAgICAgbmFtZSA9IGN0eC5zdHlsaXplKG5hbWUsICdzdHJpbmcnKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmFtZSArICc6ICcgKyBzdHI7XG59XG5cblxuZnVuY3Rpb24gcmVkdWNlVG9TaW5nbGVTdHJpbmcob3V0cHV0LCBiYXNlLCBicmFjZXMpIHtcbiAgdmFyIG51bUxpbmVzRXN0ID0gMDtcbiAgdmFyIGxlbmd0aCA9IG91dHB1dC5yZWR1Y2UoZnVuY3Rpb24ocHJldiwgY3VyKSB7XG4gICAgbnVtTGluZXNFc3QrKztcbiAgICBpZiAoY3VyLmluZGV4T2YoJ1xcbicpID49IDApIG51bUxpbmVzRXN0Kys7XG4gICAgcmV0dXJuIHByZXYgKyBjdXIucmVwbGFjZSgvXFx1MDAxYlxcW1xcZFxcZD9tL2csICcnKS5sZW5ndGggKyAxO1xuICB9LCAwKTtcblxuICBpZiAobGVuZ3RoID4gNjApIHtcbiAgICByZXR1cm4gYnJhY2VzWzBdICtcbiAgICAgICAgICAgKGJhc2UgPT09ICcnID8gJycgOiBiYXNlICsgJ1xcbiAnKSArXG4gICAgICAgICAgICcgJyArXG4gICAgICAgICAgIG91dHB1dC5qb2luKCcsXFxuICAnKSArXG4gICAgICAgICAgICcgJyArXG4gICAgICAgICAgIGJyYWNlc1sxXTtcbiAgfVxuXG4gIHJldHVybiBicmFjZXNbMF0gKyBiYXNlICsgJyAnICsgb3V0cHV0LmpvaW4oJywgJykgKyAnICcgKyBicmFjZXNbMV07XG59XG5cblxuLy8gTk9URTogVGhlc2UgdHlwZSBjaGVja2luZyBmdW5jdGlvbnMgaW50ZW50aW9uYWxseSBkb24ndCB1c2UgYGluc3RhbmNlb2ZgXG4vLyBiZWNhdXNlIGl0IGlzIGZyYWdpbGUgYW5kIGNhbiBiZSBlYXNpbHkgZmFrZWQgd2l0aCBgT2JqZWN0LmNyZWF0ZSgpYC5cbmZ1bmN0aW9uIGlzQXJyYXkoYXIpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXIpO1xufVxuZXhwb3J0cy5pc0FycmF5ID0gaXNBcnJheTtcblxuZnVuY3Rpb24gaXNCb29sZWFuKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nO1xufVxuZXhwb3J0cy5pc0Jvb2xlYW4gPSBpc0Jvb2xlYW47XG5cbmZ1bmN0aW9uIGlzTnVsbChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsID0gaXNOdWxsO1xuXG5mdW5jdGlvbiBpc051bGxPclVuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGxPclVuZGVmaW5lZCA9IGlzTnVsbE9yVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc051bWJlcihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInO1xufVxuZXhwb3J0cy5pc051bWJlciA9IGlzTnVtYmVyO1xuXG5mdW5jdGlvbiBpc1N0cmluZyhhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnO1xufVxuZXhwb3J0cy5pc1N0cmluZyA9IGlzU3RyaW5nO1xuXG5mdW5jdGlvbiBpc1N5bWJvbChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnO1xufVxuZXhwb3J0cy5pc1N5bWJvbCA9IGlzU3ltYm9sO1xuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwO1xufVxuZXhwb3J0cy5pc1VuZGVmaW5lZCA9IGlzVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc1JlZ0V4cChyZSkge1xuICByZXR1cm4gaXNPYmplY3QocmUpICYmIG9iamVjdFRvU3RyaW5nKHJlKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XG59XG5leHBvcnRzLmlzUmVnRXhwID0gaXNSZWdFeHA7XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsO1xufVxuZXhwb3J0cy5pc09iamVjdCA9IGlzT2JqZWN0O1xuXG5mdW5jdGlvbiBpc0RhdGUoZCkge1xuICByZXR1cm4gaXNPYmplY3QoZCkgJiYgb2JqZWN0VG9TdHJpbmcoZCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cbmV4cG9ydHMuaXNEYXRlID0gaXNEYXRlO1xuXG5mdW5jdGlvbiBpc0Vycm9yKGUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KGUpICYmXG4gICAgICAob2JqZWN0VG9TdHJpbmcoZSkgPT09ICdbb2JqZWN0IEVycm9yXScgfHwgZSBpbnN0YW5jZW9mIEVycm9yKTtcbn1cbmV4cG9ydHMuaXNFcnJvciA9IGlzRXJyb3I7XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nO1xufVxuZXhwb3J0cy5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcblxuZnVuY3Rpb24gaXNQcmltaXRpdmUoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGwgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ251bWJlcicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3ltYm9sJyB8fCAgLy8gRVM2IHN5bWJvbFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3VuZGVmaW5lZCc7XG59XG5leHBvcnRzLmlzUHJpbWl0aXZlID0gaXNQcmltaXRpdmU7XG5cbmV4cG9ydHMuaXNCdWZmZXIgPSByZXF1aXJlKCcuL3N1cHBvcnQvaXNCdWZmZXInKTtcblxuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcobykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pO1xufVxuXG5cbmZ1bmN0aW9uIHBhZChuKSB7XG4gIHJldHVybiBuIDwgMTAgPyAnMCcgKyBuLnRvU3RyaW5nKDEwKSA6IG4udG9TdHJpbmcoMTApO1xufVxuXG5cbnZhciBtb250aHMgPSBbJ0phbicsICdGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCcsICdBdWcnLCAnU2VwJyxcbiAgICAgICAgICAgICAgJ09jdCcsICdOb3YnLCAnRGVjJ107XG5cbi8vIDI2IEZlYiAxNjoxOTozNFxuZnVuY3Rpb24gdGltZXN0YW1wKCkge1xuICB2YXIgZCA9IG5ldyBEYXRlKCk7XG4gIHZhciB0aW1lID0gW3BhZChkLmdldEhvdXJzKCkpLFxuICAgICAgICAgICAgICBwYWQoZC5nZXRNaW51dGVzKCkpLFxuICAgICAgICAgICAgICBwYWQoZC5nZXRTZWNvbmRzKCkpXS5qb2luKCc6Jyk7XG4gIHJldHVybiBbZC5nZXREYXRlKCksIG1vbnRoc1tkLmdldE1vbnRoKCldLCB0aW1lXS5qb2luKCcgJyk7XG59XG5cblxuLy8gbG9nIGlzIGp1c3QgYSB0aGluIHdyYXBwZXIgdG8gY29uc29sZS5sb2cgdGhhdCBwcmVwZW5kcyBhIHRpbWVzdGFtcFxuZXhwb3J0cy5sb2cgPSBmdW5jdGlvbigpIHtcbiAgY29uc29sZS5sb2coJyVzIC0gJXMnLCB0aW1lc3RhbXAoKSwgZXhwb3J0cy5mb3JtYXQuYXBwbHkoZXhwb3J0cywgYXJndW1lbnRzKSk7XG59O1xuXG5cbi8qKlxuICogSW5oZXJpdCB0aGUgcHJvdG90eXBlIG1ldGhvZHMgZnJvbSBvbmUgY29uc3RydWN0b3IgaW50byBhbm90aGVyLlxuICpcbiAqIFRoZSBGdW5jdGlvbi5wcm90b3R5cGUuaW5oZXJpdHMgZnJvbSBsYW5nLmpzIHJld3JpdHRlbiBhcyBhIHN0YW5kYWxvbmVcbiAqIGZ1bmN0aW9uIChub3Qgb24gRnVuY3Rpb24ucHJvdG90eXBlKS4gTk9URTogSWYgdGhpcyBmaWxlIGlzIHRvIGJlIGxvYWRlZFxuICogZHVyaW5nIGJvb3RzdHJhcHBpbmcgdGhpcyBmdW5jdGlvbiBuZWVkcyB0byBiZSByZXdyaXR0ZW4gdXNpbmcgc29tZSBuYXRpdmVcbiAqIGZ1bmN0aW9ucyBhcyBwcm90b3R5cGUgc2V0dXAgdXNpbmcgbm9ybWFsIEphdmFTY3JpcHQgZG9lcyBub3Qgd29yayBhc1xuICogZXhwZWN0ZWQgZHVyaW5nIGJvb3RzdHJhcHBpbmcgKHNlZSBtaXJyb3IuanMgaW4gcjExNDkwMykuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY3RvciBDb25zdHJ1Y3RvciBmdW5jdGlvbiB3aGljaCBuZWVkcyB0byBpbmhlcml0IHRoZVxuICogICAgIHByb3RvdHlwZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHN1cGVyQ3RvciBDb25zdHJ1Y3RvciBmdW5jdGlvbiB0byBpbmhlcml0IHByb3RvdHlwZSBmcm9tLlxuICovXG5leHBvcnRzLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcblxuZXhwb3J0cy5fZXh0ZW5kID0gZnVuY3Rpb24ob3JpZ2luLCBhZGQpIHtcbiAgLy8gRG9uJ3QgZG8gYW55dGhpbmcgaWYgYWRkIGlzbid0IGFuIG9iamVjdFxuICBpZiAoIWFkZCB8fCAhaXNPYmplY3QoYWRkKSkgcmV0dXJuIG9yaWdpbjtcblxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGFkZCk7XG4gIHZhciBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICBvcmlnaW5ba2V5c1tpXV0gPSBhZGRba2V5c1tpXV07XG4gIH1cbiAgcmV0dXJuIG9yaWdpbjtcbn07XG5cbmZ1bmN0aW9uIGhhc093blByb3BlcnR5KG9iaiwgcHJvcCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7XG59XG4iXX0=
