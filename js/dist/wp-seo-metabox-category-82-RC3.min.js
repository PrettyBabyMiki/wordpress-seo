yoastWebpackJsonp([12],{2178:function(module,exports,__webpack_require__){"use strict";eval('\n\nvar _data = __webpack_require__(311);\n\n__webpack_require__(35);\n\n/* global wp, _, wpseoPrimaryCategoryL10n */\n/* External dependencies */\n(function ($) {\n\t"use strict";\n\n\tvar primaryTermUITemplate, primaryTermScreenReaderTemplate;\n\tvar taxonomies = wpseoPrimaryCategoryL10n.taxonomies;\n\n\t/**\n  * Checks if the elements to make a term the primary term and the display for a primary term exist.\n  *\n  * @param {Object} checkbox The checkbox to get the closest required fields for.\n  *\n  * @returns {boolean} True when there are primary elements.\n  */\n\tfunction hasPrimaryTermElements(checkbox) {\n\t\treturn 1 === $(checkbox).closest("li").children(".wpseo-make-primary-term").length;\n\t}\n\n\t/**\n  * Retrieves the primary term for a taxonomy.\n  *\n  * @param {string} taxonomyName The taxonomy name.\n  *\n  * @returns {string} The value of the primary term.\n  */\n\tfunction getPrimaryTerm(taxonomyName) {\n\t\tvar primaryTermInput;\n\n\t\tprimaryTermInput = $("#yoast-wpseo-primary-" + taxonomyName);\n\t\treturn primaryTermInput.val();\n\t}\n\n\t/**\n  * Gets the name of a term for the category taxonomy.\n  *\n  * @param {number} categoryTermId The terms\'s id.\n  *\n  * @returns {string} The term\'s name.\n  */\n\tfunction getCategoryTermName(categoryTermId) {\n\t\tvar categoryListItem = $("#category-all").find("#category-" + categoryTermId + " > label");\n\t\tif (categoryListItem.length === 0) {\n\t\t\treturn "";\n\t\t}\n\t\tvar clone = categoryListItem.clone();\n\t\tclone.children().remove();\n\t\tconsole.log($.trim(categoryListItem.text()), $.trim(clone.text()));\n\t\treturn $.trim(clone.text());\n\t}\n\n\t/**\n  * Sets the primary term for a taxonomy.\n  *\n  * @param {string} taxonomyName The taxonomy name.\n  * @param {string} termId       The term id.\n  *\n  * @returns {void}\n  */\n\tfunction setPrimaryTerm(taxonomyName, termId) {\n\t\tvar primaryTermInput = $("#yoast-wpseo-primary-" + taxonomyName);\n\t\tprimaryTermInput.val(termId).trigger("change");\n\n\t\tvar yoastEditor = (0, _data.dispatch)("yoast-seo/editor");\n\t\tif (yoastEditor) {\n\t\t\tvar termIdInt = parseInt(termId, 10);\n\t\t\tyoastEditor.setPrimaryTaxonomyId(taxonomyName, termIdInt);\n\t\t\t// If the taxonomy is category update the replacement variable.\n\t\t\tif (taxonomyName === "category") {\n\t\t\t\tyoastEditor.updateReplacementVariable("primary_category", getCategoryTermName(termIdInt));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n  * Creates the elements necessary to show something is a primary term or to make it the primary term.\n  *\n  * @param {string} taxonomyName The taxonomy name.\n  * @param {Object} checkbox     The checkbox to get label for.\n  *\n  * @returns {void}\n  */\n\tfunction createPrimaryTermElements(taxonomyName, checkbox) {\n\t\tvar label, html;\n\n\t\tlabel = $(checkbox).closest("label");\n\n\t\thtml = primaryTermUITemplate({\n\t\t\ttaxonomy: taxonomies[taxonomyName],\n\t\t\tterm: label.text()\n\t\t});\n\n\t\tlabel.after(html);\n\t}\n\n\t/**\n  * Updates the primary term selectors/indicators for a certain taxonomy.\n  *\n  * @param {string} taxonomyName The taxonomy name.\n  *\n  * @returns {void}\n  */\n\tfunction updatePrimaryTermSelectors(taxonomyName) {\n\t\tvar checkedTerms;\n\t\tvar listItem, label;\n\n\t\tcheckedTerms = $("#" + taxonomyName + \'checklist input[type="checkbox"]:checked\');\n\n\t\tvar taxonomyListItem = $("#" + taxonomyName + "checklist li");\n\t\ttaxonomyListItem.removeClass("wpseo-term-unchecked wpseo-primary-term wpseo-non-primary-term");\n\n\t\t$(".wpseo-primary-category-label").remove();\n\t\ttaxonomyListItem.addClass("wpseo-term-unchecked");\n\n\t\t// If there is only one term selected we don\'t want to show our interface.\n\t\tif (checkedTerms.length <= 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tcheckedTerms.each(function (i, term) {\n\t\t\tterm = $(term);\n\t\t\tlistItem = term.closest("li");\n\t\t\tlistItem.removeClass("wpseo-term-unchecked");\n\n\t\t\t// Create our interface elements if they don\'t exist.\n\t\t\tif (!hasPrimaryTermElements(term)) {\n\t\t\t\tcreatePrimaryTermElements(taxonomyName, term);\n\t\t\t}\n\n\t\t\tif (term.val() === getPrimaryTerm(taxonomyName)) {\n\t\t\t\tlistItem.addClass("wpseo-primary-term");\n\n\t\t\t\tlabel = term.closest("label");\n\t\t\t\tlabel.find(".wpseo-primary-category-label").remove();\n\t\t\t\tlabel.append(primaryTermScreenReaderTemplate({\n\t\t\t\t\ttaxonomy: taxonomies[taxonomyName]\n\t\t\t\t}));\n\t\t\t} else {\n\t\t\t\tlistItem.addClass("wpseo-non-primary-term");\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n  * Makes the first term primary for a certain taxonomy.\n  *\n  * @param {string} taxonomyName The taxonomy name.\n  *\n  * @returns {void}\n  */\n\tfunction makeFirstTermPrimary(taxonomyName) {\n\t\tvar firstTerm = $("#" + taxonomyName + \'checklist input[type="checkbox"]:checked:first\');\n\n\t\tsetPrimaryTerm(taxonomyName, firstTerm.val());\n\t\tupdatePrimaryTermSelectors(taxonomyName);\n\t}\n\n\t/**\n  * If we check a term while there is no primary term we make that one the primary term.\n  *\n  * @param {string} taxonomyName The taxonomy name.\n  *\n  * @returns {void}\n  */\n\tfunction ensurePrimaryTerm(taxonomyName) {\n\t\tif ("" === getPrimaryTerm(taxonomyName)) {\n\t\t\tmakeFirstTermPrimary(taxonomyName);\n\t\t}\n\t}\n\n\t/**\n  * Returns the term checkbox handler for a certain taxonomy name.\n  *\n  * @param {string} taxonomyName The taxonomy name.\n  *\n  * @returns {Function} Event handler for the checkbox.\n  */\n\tfunction termCheckboxHandler(taxonomyName) {\n\t\treturn function () {\n\t\t\t// If the user unchecks the primary category we have to select any new primary term\n\t\t\tif (false === $(this).prop("checked") && $(this).val() === getPrimaryTerm(taxonomyName)) {\n\t\t\t\tmakeFirstTermPrimary(taxonomyName);\n\t\t\t}\n\n\t\t\tensurePrimaryTerm(taxonomyName);\n\n\t\t\tupdatePrimaryTermSelectors(taxonomyName);\n\t\t};\n\t}\n\n\t/**\n  * Returns the term list add handler for a certain taxonomy name.\n  *\n  * @param {string} taxonomyName The taxonomy name.\n  *\n  * @returns {Function} The term list add handler.\n  */\n\tfunction termListAddHandler(taxonomyName) {\n\t\treturn function () {\n\t\t\tensurePrimaryTerm(taxonomyName);\n\t\t\tupdatePrimaryTermSelectors(taxonomyName);\n\t\t};\n\t}\n\n\t/**\n  * Returns the make primary event handler for a certain taxonomy name.\n  *\n  * @param {string} taxonomyName The taxonomy name.\n  *\n  * @returns {Function} The event handler.\n  */\n\tfunction makePrimaryHandler(taxonomyName) {\n\t\treturn function (e) {\n\t\t\tvar term, checkbox;\n\n\t\t\tterm = $(e.currentTarget);\n\t\t\tcheckbox = term.siblings("label").find("input");\n\n\t\t\tsetPrimaryTerm(taxonomyName, checkbox.val());\n\n\t\t\tupdatePrimaryTermSelectors(taxonomyName);\n\n\t\t\t// The clicked link will be hidden so we need to focus something different.\n\t\t\tcheckbox.focus();\n\t\t};\n\t}\n\n\t$.fn.initYstSEOPrimaryCategory = function () {\n\t\treturn this.each(function (i, taxonomy) {\n\t\t\tvar metaboxTaxonomy = $("#" + taxonomy.name + "div");\n\n\t\t\tupdatePrimaryTermSelectors(taxonomy.name);\n\n\t\t\tmetaboxTaxonomy.on("click", \'input[type="checkbox"]\', termCheckboxHandler(taxonomy.name));\n\n\t\t\t// When the AJAX Request is done, this event will be fired.\n\t\t\tmetaboxTaxonomy.on("wpListAddEnd", "#" + taxonomy.name + "checklist", termListAddHandler(taxonomy.name));\n\n\t\t\tmetaboxTaxonomy.on("click", ".wpseo-make-primary-term", makePrimaryHandler(taxonomy.name));\n\t\t});\n\t};\n\n\t$(function () {\n\t\t// Initialize our templates\n\t\tprimaryTermUITemplate = wp.template("primary-term-ui");\n\t\tprimaryTermScreenReaderTemplate = wp.template("primary-term-screen-reader");\n\n\t\t$(_.values(taxonomies)).initYstSEOPrimaryCategory();\n\t});\n})(jQuery);\n\n/* Internal dependencies *///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjE3OC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9qcy9zcmMvd3Atc2VvLW1ldGFib3gtY2F0ZWdvcnkuanM/MzFlMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWwgd3AsIF8sIHdwc2VvUHJpbWFyeUNhdGVnb3J5TDEwbiAqL1xuLyogRXh0ZXJuYWwgZGVwZW5kZW5jaWVzICovXG5pbXBvcnQgeyBkaXNwYXRjaCB9IGZyb20gXCJAd29yZHByZXNzL2RhdGFcIjtcblxuLyogSW50ZXJuYWwgZGVwZW5kZW5jaWVzICovXG5pbXBvcnQgXCIuL2hlbHBlcnMvYmFiZWwtcG9seWZpbGxcIjtcblxuKCBmdW5jdGlvbiggJCApIHtcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0dmFyIHByaW1hcnlUZXJtVUlUZW1wbGF0ZSwgcHJpbWFyeVRlcm1TY3JlZW5SZWFkZXJUZW1wbGF0ZTtcblx0dmFyIHRheG9ub21pZXMgPSB3cHNlb1ByaW1hcnlDYXRlZ29yeUwxMG4udGF4b25vbWllcztcblxuXHQvKipcblx0ICogQ2hlY2tzIGlmIHRoZSBlbGVtZW50cyB0byBtYWtlIGEgdGVybSB0aGUgcHJpbWFyeSB0ZXJtIGFuZCB0aGUgZGlzcGxheSBmb3IgYSBwcmltYXJ5IHRlcm0gZXhpc3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBjaGVja2JveCBUaGUgY2hlY2tib3ggdG8gZ2V0IHRoZSBjbG9zZXN0IHJlcXVpcmVkIGZpZWxkcyBmb3IuXG5cdCAqXG5cdCAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIHdoZW4gdGhlcmUgYXJlIHByaW1hcnkgZWxlbWVudHMuXG5cdCAqL1xuXHRmdW5jdGlvbiBoYXNQcmltYXJ5VGVybUVsZW1lbnRzKCBjaGVja2JveCApIHtcblx0XHRyZXR1cm4gMSA9PT0gJCggY2hlY2tib3ggKS5jbG9zZXN0KCBcImxpXCIgKS5jaGlsZHJlbiggXCIud3BzZW8tbWFrZS1wcmltYXJ5LXRlcm1cIiApLmxlbmd0aDtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXRyaWV2ZXMgdGhlIHByaW1hcnkgdGVybSBmb3IgYSB0YXhvbm9teS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHRheG9ub215TmFtZSBUaGUgdGF4b25vbXkgbmFtZS5cblx0ICpcblx0ICogQHJldHVybnMge3N0cmluZ30gVGhlIHZhbHVlIG9mIHRoZSBwcmltYXJ5IHRlcm0uXG5cdCAqL1xuXHRmdW5jdGlvbiBnZXRQcmltYXJ5VGVybSggdGF4b25vbXlOYW1lICkge1xuXHRcdHZhciBwcmltYXJ5VGVybUlucHV0O1xuXG5cdFx0cHJpbWFyeVRlcm1JbnB1dCA9ICQoIFwiI3lvYXN0LXdwc2VvLXByaW1hcnktXCIgKyB0YXhvbm9teU5hbWUgKTtcblx0XHRyZXR1cm4gcHJpbWFyeVRlcm1JbnB1dC52YWwoKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSBuYW1lIG9mIGEgdGVybSBmb3IgdGhlIGNhdGVnb3J5IHRheG9ub215LlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gY2F0ZWdvcnlUZXJtSWQgVGhlIHRlcm1zJ3MgaWQuXG5cdCAqXG5cdCAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSB0ZXJtJ3MgbmFtZS5cblx0ICovXG5cdGZ1bmN0aW9uIGdldENhdGVnb3J5VGVybU5hbWUoIGNhdGVnb3J5VGVybUlkICkge1xuXHRcdGNvbnN0IGNhdGVnb3J5TGlzdEl0ZW0gPSAkKCBcIiNjYXRlZ29yeS1hbGxcIiApXG5cdFx0XHQuZmluZCggYCNjYXRlZ29yeS0keyBjYXRlZ29yeVRlcm1JZCB9ID4gbGFiZWxgICk7XG5cdFx0aWYgKCBjYXRlZ29yeUxpc3RJdGVtLmxlbmd0aCA9PT0gMCApIHtcblx0XHRcdHJldHVybiBcIlwiO1xuXHRcdH1cblx0XHRjb25zdCBjbG9uZSA9IGNhdGVnb3J5TGlzdEl0ZW0uY2xvbmUoKTtcblx0XHRjbG9uZS5jaGlsZHJlbigpLnJlbW92ZSgpO1xuXHRcdGNvbnNvbGUubG9nKCAkLnRyaW0oIGNhdGVnb3J5TGlzdEl0ZW0udGV4dCgpICksICQudHJpbSggY2xvbmUudGV4dCgpICkgKTtcblx0XHRyZXR1cm4gJC50cmltKCBjbG9uZS50ZXh0KCkgKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBwcmltYXJ5IHRlcm0gZm9yIGEgdGF4b25vbXkuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB0YXhvbm9teU5hbWUgVGhlIHRheG9ub215IG5hbWUuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB0ZXJtSWQgICAgICAgVGhlIHRlcm0gaWQuXG5cdCAqXG5cdCAqIEByZXR1cm5zIHt2b2lkfVxuXHQgKi9cblx0ZnVuY3Rpb24gc2V0UHJpbWFyeVRlcm0oIHRheG9ub215TmFtZSwgdGVybUlkICkge1xuXHRcdGNvbnN0IHByaW1hcnlUZXJtSW5wdXQgPSAkKCBcIiN5b2FzdC13cHNlby1wcmltYXJ5LVwiICsgdGF4b25vbXlOYW1lICk7XG5cdFx0cHJpbWFyeVRlcm1JbnB1dC52YWwoIHRlcm1JZCApLnRyaWdnZXIoIFwiY2hhbmdlXCIgKTtcblxuXHRcdGNvbnN0IHlvYXN0RWRpdG9yID0gZGlzcGF0Y2goIFwieW9hc3Qtc2VvL2VkaXRvclwiICk7XG5cdFx0aWYgKCB5b2FzdEVkaXRvciApIHtcblx0XHRcdGNvbnN0IHRlcm1JZEludCA9IHBhcnNlSW50KCB0ZXJtSWQsIDEwICk7XG5cdFx0XHR5b2FzdEVkaXRvci5zZXRQcmltYXJ5VGF4b25vbXlJZCggdGF4b25vbXlOYW1lLCB0ZXJtSWRJbnQgKTtcblx0XHRcdC8vIElmIHRoZSB0YXhvbm9teSBpcyBjYXRlZ29yeSB1cGRhdGUgdGhlIHJlcGxhY2VtZW50IHZhcmlhYmxlLlxuXHRcdFx0aWYgKCB0YXhvbm9teU5hbWUgPT09IFwiY2F0ZWdvcnlcIiApIHtcblx0XHRcdFx0eW9hc3RFZGl0b3IudXBkYXRlUmVwbGFjZW1lbnRWYXJpYWJsZShcblx0XHRcdFx0XHRcInByaW1hcnlfY2F0ZWdvcnlcIixcblx0XHRcdFx0XHRnZXRDYXRlZ29yeVRlcm1OYW1lKCB0ZXJtSWRJbnQgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIHRoZSBlbGVtZW50cyBuZWNlc3NhcnkgdG8gc2hvdyBzb21ldGhpbmcgaXMgYSBwcmltYXJ5IHRlcm0gb3IgdG8gbWFrZSBpdCB0aGUgcHJpbWFyeSB0ZXJtLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdGF4b25vbXlOYW1lIFRoZSB0YXhvbm9teSBuYW1lLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gY2hlY2tib3ggICAgIFRoZSBjaGVja2JveCB0byBnZXQgbGFiZWwgZm9yLlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7dm9pZH1cblx0ICovXG5cdGZ1bmN0aW9uIGNyZWF0ZVByaW1hcnlUZXJtRWxlbWVudHMoIHRheG9ub215TmFtZSwgY2hlY2tib3ggKSB7XG5cdFx0dmFyIGxhYmVsLCBodG1sO1xuXG5cdFx0bGFiZWwgPSAkKCBjaGVja2JveCApLmNsb3Nlc3QoIFwibGFiZWxcIiApO1xuXG5cdFx0aHRtbCA9IHByaW1hcnlUZXJtVUlUZW1wbGF0ZSgge1xuXHRcdFx0dGF4b25vbXk6IHRheG9ub21pZXNbIHRheG9ub215TmFtZSBdLFxuXHRcdFx0dGVybTogbGFiZWwudGV4dCgpLFxuXHRcdH0gKTtcblxuXHRcdGxhYmVsLmFmdGVyKCBodG1sICk7XG5cdH1cblxuXHQvKipcblx0ICogVXBkYXRlcyB0aGUgcHJpbWFyeSB0ZXJtIHNlbGVjdG9ycy9pbmRpY2F0b3JzIGZvciBhIGNlcnRhaW4gdGF4b25vbXkuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB0YXhvbm9teU5hbWUgVGhlIHRheG9ub215IG5hbWUuXG5cdCAqXG5cdCAqIEByZXR1cm5zIHt2b2lkfVxuXHQgKi9cblx0ZnVuY3Rpb24gdXBkYXRlUHJpbWFyeVRlcm1TZWxlY3RvcnMoIHRheG9ub215TmFtZSApIHtcblx0XHR2YXIgY2hlY2tlZFRlcm1zO1xuXHRcdHZhciBsaXN0SXRlbSwgbGFiZWw7XG5cblx0XHRjaGVja2VkVGVybXMgPSAkKCBcIiNcIiArIHRheG9ub215TmFtZSArICdjaGVja2xpc3QgaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdOmNoZWNrZWQnICk7XG5cblx0XHR2YXIgdGF4b25vbXlMaXN0SXRlbSA9ICQoIFwiI1wiICsgdGF4b25vbXlOYW1lICsgXCJjaGVja2xpc3QgbGlcIiApO1xuXHRcdHRheG9ub215TGlzdEl0ZW0ucmVtb3ZlQ2xhc3MoIFwid3BzZW8tdGVybS11bmNoZWNrZWQgd3BzZW8tcHJpbWFyeS10ZXJtIHdwc2VvLW5vbi1wcmltYXJ5LXRlcm1cIiApO1xuXG5cdFx0JCggXCIud3BzZW8tcHJpbWFyeS1jYXRlZ29yeS1sYWJlbFwiICkucmVtb3ZlKCk7XG5cdFx0dGF4b25vbXlMaXN0SXRlbS5hZGRDbGFzcyggXCJ3cHNlby10ZXJtLXVuY2hlY2tlZFwiICk7XG5cblx0XHQvLyBJZiB0aGVyZSBpcyBvbmx5IG9uZSB0ZXJtIHNlbGVjdGVkIHdlIGRvbid0IHdhbnQgdG8gc2hvdyBvdXIgaW50ZXJmYWNlLlxuXHRcdGlmICggY2hlY2tlZFRlcm1zLmxlbmd0aCA8PSAxICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNoZWNrZWRUZXJtcy5lYWNoKCBmdW5jdGlvbiggaSwgdGVybSApIHtcblx0XHRcdHRlcm0gPSAkKCB0ZXJtICk7XG5cdFx0XHRsaXN0SXRlbSA9IHRlcm0uY2xvc2VzdCggXCJsaVwiICk7XG5cdFx0XHRsaXN0SXRlbS5yZW1vdmVDbGFzcyggXCJ3cHNlby10ZXJtLXVuY2hlY2tlZFwiICk7XG5cblx0XHRcdC8vIENyZWF0ZSBvdXIgaW50ZXJmYWNlIGVsZW1lbnRzIGlmIHRoZXkgZG9uJ3QgZXhpc3QuXG5cdFx0XHRpZiAoICEgaGFzUHJpbWFyeVRlcm1FbGVtZW50cyggdGVybSApICkge1xuXHRcdFx0XHRjcmVhdGVQcmltYXJ5VGVybUVsZW1lbnRzKCB0YXhvbm9teU5hbWUsIHRlcm0gKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB0ZXJtLnZhbCgpID09PSBnZXRQcmltYXJ5VGVybSggdGF4b25vbXlOYW1lICkgKSB7XG5cdFx0XHRcdGxpc3RJdGVtLmFkZENsYXNzKCBcIndwc2VvLXByaW1hcnktdGVybVwiICk7XG5cblx0XHRcdFx0bGFiZWwgPSB0ZXJtLmNsb3Nlc3QoIFwibGFiZWxcIiApO1xuXHRcdFx0XHRsYWJlbC5maW5kKCBcIi53cHNlby1wcmltYXJ5LWNhdGVnb3J5LWxhYmVsXCIgKS5yZW1vdmUoKTtcblx0XHRcdFx0bGFiZWwuYXBwZW5kKCBwcmltYXJ5VGVybVNjcmVlblJlYWRlclRlbXBsYXRlKCB7XG5cdFx0XHRcdFx0dGF4b25vbXk6IHRheG9ub21pZXNbIHRheG9ub215TmFtZSBdLFxuXHRcdFx0XHR9ICkgKTtcblx0XHRcdH1cblx0XHRcdGVsc2Uge1xuXHRcdFx0XHRsaXN0SXRlbS5hZGRDbGFzcyggXCJ3cHNlby1ub24tcHJpbWFyeS10ZXJtXCIgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cblxuXHQvKipcblx0ICogTWFrZXMgdGhlIGZpcnN0IHRlcm0gcHJpbWFyeSBmb3IgYSBjZXJ0YWluIHRheG9ub215LlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdGF4b25vbXlOYW1lIFRoZSB0YXhvbm9teSBuYW1lLlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7dm9pZH1cblx0ICovXG5cdGZ1bmN0aW9uIG1ha2VGaXJzdFRlcm1QcmltYXJ5KCB0YXhvbm9teU5hbWUgKSB7XG5cdFx0dmFyIGZpcnN0VGVybSA9ICQoIFwiI1wiICsgdGF4b25vbXlOYW1lICsgJ2NoZWNrbGlzdCBpbnB1dFt0eXBlPVwiY2hlY2tib3hcIl06Y2hlY2tlZDpmaXJzdCcgKTtcblxuXHRcdHNldFByaW1hcnlUZXJtKCB0YXhvbm9teU5hbWUsIGZpcnN0VGVybS52YWwoKSApO1xuXHRcdHVwZGF0ZVByaW1hcnlUZXJtU2VsZWN0b3JzKCB0YXhvbm9teU5hbWUgKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBJZiB3ZSBjaGVjayBhIHRlcm0gd2hpbGUgdGhlcmUgaXMgbm8gcHJpbWFyeSB0ZXJtIHdlIG1ha2UgdGhhdCBvbmUgdGhlIHByaW1hcnkgdGVybS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHRheG9ub215TmFtZSBUaGUgdGF4b25vbXkgbmFtZS5cblx0ICpcblx0ICogQHJldHVybnMge3ZvaWR9XG5cdCAqL1xuXHRmdW5jdGlvbiBlbnN1cmVQcmltYXJ5VGVybSggdGF4b25vbXlOYW1lICkge1xuXHRcdGlmICggXCJcIiA9PT0gZ2V0UHJpbWFyeVRlcm0oIHRheG9ub215TmFtZSApICkge1xuXHRcdFx0bWFrZUZpcnN0VGVybVByaW1hcnkoIHRheG9ub215TmFtZSApO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSB0ZXJtIGNoZWNrYm94IGhhbmRsZXIgZm9yIGEgY2VydGFpbiB0YXhvbm9teSBuYW1lLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdGF4b25vbXlOYW1lIFRoZSB0YXhvbm9teSBuYW1lLlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7RnVuY3Rpb259IEV2ZW50IGhhbmRsZXIgZm9yIHRoZSBjaGVja2JveC5cblx0ICovXG5cdGZ1bmN0aW9uIHRlcm1DaGVja2JveEhhbmRsZXIoIHRheG9ub215TmFtZSApIHtcblx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHQvLyBJZiB0aGUgdXNlciB1bmNoZWNrcyB0aGUgcHJpbWFyeSBjYXRlZ29yeSB3ZSBoYXZlIHRvIHNlbGVjdCBhbnkgbmV3IHByaW1hcnkgdGVybVxuXHRcdFx0aWYgKCBmYWxzZSA9PT0gJCggdGhpcyApLnByb3AoIFwiY2hlY2tlZFwiICkgJiYgJCggdGhpcyApLnZhbCgpID09PSBnZXRQcmltYXJ5VGVybSggdGF4b25vbXlOYW1lICkgKSB7XG5cdFx0XHRcdG1ha2VGaXJzdFRlcm1QcmltYXJ5KCB0YXhvbm9teU5hbWUgKTtcblx0XHRcdH1cblxuXHRcdFx0ZW5zdXJlUHJpbWFyeVRlcm0oIHRheG9ub215TmFtZSApO1xuXG5cdFx0XHR1cGRhdGVQcmltYXJ5VGVybVNlbGVjdG9ycyggdGF4b25vbXlOYW1lICk7XG5cdFx0fTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSB0ZXJtIGxpc3QgYWRkIGhhbmRsZXIgZm9yIGEgY2VydGFpbiB0YXhvbm9teSBuYW1lLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdGF4b25vbXlOYW1lIFRoZSB0YXhvbm9teSBuYW1lLlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7RnVuY3Rpb259IFRoZSB0ZXJtIGxpc3QgYWRkIGhhbmRsZXIuXG5cdCAqL1xuXHRmdW5jdGlvbiB0ZXJtTGlzdEFkZEhhbmRsZXIoIHRheG9ub215TmFtZSApIHtcblx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRlbnN1cmVQcmltYXJ5VGVybSggdGF4b25vbXlOYW1lICk7XG5cdFx0XHR1cGRhdGVQcmltYXJ5VGVybVNlbGVjdG9ycyggdGF4b25vbXlOYW1lICk7XG5cdFx0fTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBtYWtlIHByaW1hcnkgZXZlbnQgaGFuZGxlciBmb3IgYSBjZXJ0YWluIHRheG9ub215IG5hbWUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB0YXhvbm9teU5hbWUgVGhlIHRheG9ub215IG5hbWUuXG5cdCAqXG5cdCAqIEByZXR1cm5zIHtGdW5jdGlvbn0gVGhlIGV2ZW50IGhhbmRsZXIuXG5cdCAqL1xuXHRmdW5jdGlvbiBtYWtlUHJpbWFyeUhhbmRsZXIoIHRheG9ub215TmFtZSApIHtcblx0XHRyZXR1cm4gZnVuY3Rpb24oIGUgKSB7XG5cdFx0XHR2YXIgdGVybSwgY2hlY2tib3g7XG5cblx0XHRcdHRlcm0gPSAkKCBlLmN1cnJlbnRUYXJnZXQgKTtcblx0XHRcdGNoZWNrYm94ID0gdGVybS5zaWJsaW5ncyggXCJsYWJlbFwiICkuZmluZCggXCJpbnB1dFwiICk7XG5cblx0XHRcdHNldFByaW1hcnlUZXJtKCB0YXhvbm9teU5hbWUsIGNoZWNrYm94LnZhbCgpICk7XG5cblx0XHRcdHVwZGF0ZVByaW1hcnlUZXJtU2VsZWN0b3JzKCB0YXhvbm9teU5hbWUgKTtcblxuXHRcdFx0Ly8gVGhlIGNsaWNrZWQgbGluayB3aWxsIGJlIGhpZGRlbiBzbyB3ZSBuZWVkIHRvIGZvY3VzIHNvbWV0aGluZyBkaWZmZXJlbnQuXG5cdFx0XHRjaGVja2JveC5mb2N1cygpO1xuXHRcdH07XG5cdH1cblxuXHQkLmZuLmluaXRZc3RTRU9QcmltYXJ5Q2F0ZWdvcnkgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSwgdGF4b25vbXkgKSB7XG5cdFx0XHRjb25zdCBtZXRhYm94VGF4b25vbXkgPSAkKCBcIiNcIiArIHRheG9ub215Lm5hbWUgKyBcImRpdlwiICk7XG5cblx0XHRcdHVwZGF0ZVByaW1hcnlUZXJtU2VsZWN0b3JzKCB0YXhvbm9teS5uYW1lICk7XG5cblx0XHRcdG1ldGFib3hUYXhvbm9teS5vbiggXCJjbGlja1wiLCAnaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdJywgdGVybUNoZWNrYm94SGFuZGxlciggdGF4b25vbXkubmFtZSApICk7XG5cblx0XHRcdC8vIFdoZW4gdGhlIEFKQVggUmVxdWVzdCBpcyBkb25lLCB0aGlzIGV2ZW50IHdpbGwgYmUgZmlyZWQuXG5cdFx0XHRtZXRhYm94VGF4b25vbXkub24oIFwid3BMaXN0QWRkRW5kXCIsIFwiI1wiICsgdGF4b25vbXkubmFtZSArIFwiY2hlY2tsaXN0XCIsIHRlcm1MaXN0QWRkSGFuZGxlciggdGF4b25vbXkubmFtZSApICk7XG5cblx0XHRcdG1ldGFib3hUYXhvbm9teS5vbiggXCJjbGlja1wiLCBcIi53cHNlby1tYWtlLXByaW1hcnktdGVybVwiLCBtYWtlUHJpbWFyeUhhbmRsZXIoIHRheG9ub215Lm5hbWUgKSApO1xuXHRcdH0gKTtcblx0fTtcblxuXHQkKCBmdW5jdGlvbigpIHtcblx0XHQvLyBJbml0aWFsaXplIG91ciB0ZW1wbGF0ZXNcblx0XHRwcmltYXJ5VGVybVVJVGVtcGxhdGUgPSB3cC50ZW1wbGF0ZSggXCJwcmltYXJ5LXRlcm0tdWlcIiApO1xuXHRcdHByaW1hcnlUZXJtU2NyZWVuUmVhZGVyVGVtcGxhdGUgPSB3cC50ZW1wbGF0ZSggXCJwcmltYXJ5LXRlcm0tc2NyZWVuLXJlYWRlclwiICk7XG5cblx0XHQkKCBfLnZhbHVlcyggdGF4b25vbWllcyApICkuaW5pdFlzdFNFT1ByaW1hcnlDYXRlZ29yeSgpO1xuXHR9ICk7XG59KCBqUXVlcnkgKSApO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIGpzL3NyYy93cC1zZW8tbWV0YWJveC1jYXRlZ29yeS5qcyJdLCJtYXBwaW5ncyI6Ijs7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQU5BO0FBQ0E7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FBT0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBR0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBaFFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2178\n')},311:function(module,exports){eval("module.exports = window.yoast._wp.data;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzExLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwid2luZG93LnlvYXN0Ll93cC5kYXRhXCI/MjNkZiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHdpbmRvdy55b2FzdC5fd3AuZGF0YTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCBcIndpbmRvdy55b2FzdC5fd3AuZGF0YVwiXG4vLyBtb2R1bGUgaWQgPSAzMTFcbi8vIG1vZHVsZSBjaHVua3MgPSAyIDMgMTIiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///311\n")},35:function(module,exports,__webpack_require__){"use strict";eval('\n\n// The babel polyfill sets the _babelPolyfill to true. So only load it ourselves if the variable is undefined or false.\nif (typeof window._babelPolyfill === "undefined" || !window._babelPolyfill) {\n\t// eslint-disable-next-line global-require\n\t__webpack_require__(101);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vanMvc3JjL2hlbHBlcnMvYmFiZWwtcG9seWZpbGwuanM/MTdiOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGUgYmFiZWwgcG9seWZpbGwgc2V0cyB0aGUgX2JhYmVsUG9seWZpbGwgdG8gdHJ1ZS4gU28gb25seSBsb2FkIGl0IG91cnNlbHZlcyBpZiB0aGUgdmFyaWFibGUgaXMgdW5kZWZpbmVkIG9yIGZhbHNlLlxuaWYgKCB0eXBlb2Ygd2luZG93Ll9iYWJlbFBvbHlmaWxsID09PSBcInVuZGVmaW5lZFwiIHx8ICEgd2luZG93Ll9iYWJlbFBvbHlmaWxsICkge1xuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ2xvYmFsLXJlcXVpcmVcblx0cmVxdWlyZSggXCJiYWJlbC1wb2x5ZmlsbFwiICk7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8ganMvc3JjL2hlbHBlcnMvYmFiZWwtcG9seWZpbGwuanMiXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///35\n')}},[2178]);