yoastWebpackJsonp([25],{

/***/ 1845:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/* global ajaxurl */\n/* global wpseoAdminGlobalL10n, wpseoConsoleNotifications */\n/* jshint -W097 */\n/* jshint unused:false */\n\n(function ($) {\n\t/**\n  * Displays console notifications.\n  *\n  * Looks at a global variable to display all notifications in there.\n  *\n  * @returns {void}\n  */\n\tfunction displayConsoleNotifications() {\n\t\tif (typeof window.wpseoConsoleNotifications === \"undefined\" || typeof console === \"undefined\") {\n\t\t\treturn;\n\t\t}\n\n\t\t/* jshint ignore:start */\n\t\tfor (var index = 0; index < wpseoConsoleNotifications.length; index++) {\n\t\t\tconsole.warn(wpseoConsoleNotifications[index]);\n\t\t}\n\t\t/* jshint ignore:end */\n\t}\n\n\tjQuery(document).ready(displayConsoleNotifications);\n\n\t/**\n  * Used to dismiss the tagline notice for a specific user.\n  *\n  * @param {string} nonce Nonce for verification.\n  *\n  * @returns {void}\n  */\n\tfunction wpseoDismissTaglineNotice(nonce) {\n\t\tjQuery.post(ajaxurl, {\n\t\t\taction: \"wpseo_dismiss_tagline_notice\",\n\t\t\t_wpnonce: nonce\n\t\t});\n\t}\n\n\t/**\n  * Used to remove the admin notices for several purposes, dies on exit.\n  *\n  * @param {string} option The option to ignore.\n  * @param {string} hide   The target element to hide.\n  * @param {string} nonce  Nonce for verification.\n  *\n  * @returns {void}\n  */\n\tfunction wpseoSetIgnore(option, hide, nonce) {\n\t\tjQuery.post(ajaxurl, {\n\t\t\taction: \"wpseo_set_ignore\",\n\t\t\toption: option,\n\t\t\t_wpnonce: nonce\n\t\t}, function (data) {\n\t\t\tif (data) {\n\t\t\t\tjQuery(\"#\" + hide).hide();\n\t\t\t\tjQuery(\"#hidden_ignore_\" + option).val(\"ignore\");\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n  * Generates a dismissable anchor button.\n  *\n  * @param {string} dismissLink The URL that leads to the dismissing of the notice.\n  *\n  * @returns {Object} Anchor to dismiss.\n  */\n\tfunction wpseoDismissLink(dismissLink) {\n\t\treturn jQuery('<a href=\"' + dismissLink + '\" type=\"button\" class=\"notice-dismiss\">' + '<span class=\"screen-reader-text\">Dismiss this notice.</span>' + \"</a>\");\n\t}\n\n\tjQuery(document).ready(function () {\n\t\tjQuery(\".yoast-dismissible\").on(\"click\", \".yoast-notice-dismiss\", function () {\n\t\t\tvar $parentDiv = jQuery(this).parent();\n\n\t\t\t// Deprecated, todo: remove when all notifiers have been implemented.\n\t\t\tjQuery.post(ajaxurl, {\n\t\t\t\taction: $parentDiv.attr(\"id\").replace(/-/g, \"_\"),\n\t\t\t\t_wpnonce: $parentDiv.data(\"nonce\"),\n\t\t\t\tdata: $parentDiv.data(\"json\")\n\t\t\t});\n\n\t\t\tjQuery.post(ajaxurl, {\n\t\t\t\taction: \"yoast_dismiss_notification\",\n\t\t\t\tnotification: $parentDiv.attr(\"id\"),\n\t\t\t\tnonce: $parentDiv.data(\"nonce\"),\n\t\t\t\tdata: $parentDiv.data(\"json\")\n\t\t\t});\n\n\t\t\t$parentDiv.fadeTo(100, 0, function () {\n\t\t\t\t$parentDiv.slideUp(100, function () {\n\t\t\t\t\t$parentDiv.remove();\n\t\t\t\t});\n\t\t\t});\n\n\t\t\treturn false;\n\t\t});\n\n\t\tjQuery(\".yoast-help-button\").on(\"click\", function () {\n\t\t\tvar $button = jQuery(this),\n\t\t\t    helpPanel = jQuery(\"#\" + $button.attr(\"aria-controls\")),\n\t\t\t    isPanelVisible = helpPanel.is(\":visible\");\n\n\t\t\tjQuery(helpPanel).slideToggle(200, function () {\n\t\t\t\t$button.attr(\"aria-expanded\", !isPanelVisible);\n\t\t\t});\n\t\t});\n\t});\n\twindow.wpseoDismissTaglineNotice = wpseoDismissTaglineNotice;\n\twindow.wpseoSetIgnore = wpseoSetIgnore;\n\twindow.wpseoDismissLink = wpseoDismissLink;\n\n\t/**\n  * Hides popup showing new alerts message.\n  *\n  * @returns {void}\n  */\n\tfunction hideAlertPopup() {\n\t\t// Remove the namespaced hover event from the menu top level list items.\n\t\t$(\"#wp-admin-bar-root-default > li\").off(\"mouseenter.yoastalertpopup mouseleave.yoastalertpopup\");\n\t\t// Hide the notification popup by fading it out.\n\t\t$(\".yoast-issue-added\").fadeOut(200);\n\t}\n\n\t/**\n  * Shows popup with new alerts message.\n  *\n  * @returns {void}\n  */\n\tfunction showAlertPopup() {\n\t\t// Attach an hover event and show the notification popup by fading it in.\n\t\t$(\".yoast-issue-added\").on(\"mouseenter mouseleave\", function (evt) {\n\t\t\t// Avoid the hover event to propagate on the parent elements.\n\t\t\tevt.stopPropagation();\n\t\t\t// Hide the notification popup when hovering on it.\n\t\t\thideAlertPopup();\n\t\t}).fadeIn();\n\n\t\t/*\n   * Attach a namespaced hover event on the menu top level items to hide\n   * the notification popup when hovering them.\n   * Note: this will work just the first time the list items get hovered in the\n   * first 3 seconds after DOM ready because this event is then removed.\n   */\n\t\t$(\"#wp-admin-bar-root-default > li\").on(\"mouseenter.yoastalertpopup mouseleave.yoastalertpopup\", hideAlertPopup);\n\n\t\t// Hide the notification popup after 3 seconds from DOM ready.\n\t\tsetTimeout(hideAlertPopup, 3000);\n\t}\n\n\t/**\n  * Handles dismiss and restore AJAX responses.\n  *\n  * @param {Object} $source Object that triggered the request.\n  * @param {Object} response AJAX response.\n  *\n  * @returns {void}\n  */\n\tfunction handleDismissRestoreResponse($source, response) {\n\t\t$(\".yoast-alert-holder\").off(\"click\", \".restore\").off(\"click\", \".dismiss\");\n\n\t\tif (typeof response.html === \"undefined\") {\n\t\t\treturn;\n\t\t}\n\n\t\tif (response.html) {\n\t\t\t$source.closest(\".yoast-container\").html(response.html);\n\t\t\t/* jshint ignore:start */\n\t\t\t/* eslint-disable */\n\t\t\thookDismissRestoreButtons();\n\t\t\t/* jshint ignore:end */\n\t\t\t/* eslint-enable */\n\t\t}\n\n\t\tvar $wpseoMenu = $(\"#wp-admin-bar-wpseo-menu\");\n\t\tvar $issueCounter = $wpseoMenu.find(\".yoast-issue-counter\");\n\n\t\tif (!$issueCounter.length) {\n\t\t\t$wpseoMenu.find(\"> a:first-child\").append('<div class=\"yoast-issue-counter\"/>');\n\t\t\t$issueCounter = $wpseoMenu.find(\".yoast-issue-counter\");\n\t\t}\n\n\t\t$issueCounter.html(response.total);\n\t\tif (response.total === 0) {\n\t\t\t$issueCounter.hide();\n\t\t} else {\n\t\t\t$issueCounter.show();\n\t\t}\n\n\t\t$(\"#toplevel_page_wpseo_dashboard .update-plugins\").removeClass().addClass(\"update-plugins count-\" + response.total);\n\t\t$(\"#toplevel_page_wpseo_dashboard .plugin-count\").html(response.total);\n\t}\n\n\t/**\n  * Hooks the restore and dismiss buttons.\n  *\n  * @returns {void}\n  */\n\tfunction hookDismissRestoreButtons() {\n\t\tvar $dismissible = $(\".yoast-alert-holder\");\n\n\t\t$dismissible.on(\"click\", \".dismiss\", function () {\n\t\t\tvar $this = $(this);\n\t\t\tvar $source = $this.closest(\".yoast-alert-holder\");\n\n\t\t\tvar $container = $this.closest(\".yoast-container\");\n\t\t\t$container.append('<div class=\"yoast-container-disabled\"/>');\n\n\t\t\t$this.find(\"span\").removeClass(\"dashicons-no-alt\").addClass(\"dashicons-randomize\");\n\n\t\t\t$.post(ajaxurl, {\n\t\t\t\taction: \"yoast_dismiss_alert\",\n\t\t\t\tnotification: $source.attr(\"id\"),\n\t\t\t\tnonce: $source.data(\"nonce\"),\n\t\t\t\tdata: $source.data(\"json\")\n\t\t\t}, handleDismissRestoreResponse.bind(this, $source), \"json\");\n\t\t});\n\n\t\t$dismissible.on(\"click\", \".restore\", function () {\n\t\t\tvar $this = $(this);\n\t\t\tvar $source = $this.closest(\".yoast-alert-holder\");\n\n\t\t\tvar $container = $this.closest(\".yoast-container\");\n\t\t\t$container.append('<div class=\"yoast-container-disabled\"/>');\n\n\t\t\t$this.find(\"span\").removeClass(\"dashicons-arrow-up\").addClass(\"dashicons-randomize\");\n\n\t\t\t$.post(ajaxurl, {\n\t\t\t\taction: \"yoast_restore_alert\",\n\t\t\t\tnotification: $source.attr(\"id\"),\n\t\t\t\tnonce: $source.data(\"nonce\"),\n\t\t\t\tdata: $source.data(\"json\")\n\t\t\t}, handleDismissRestoreResponse.bind(this, $source), \"json\");\n\t\t});\n\t}\n\n\t/**\n  * Sets the color of the svg for the premium indicator based on the color of the color scheme.\n  *\n  * @returns {void}\n  */\n\tfunction setPremiumIndicatorColor() {\n\t\tvar $premiumIndicator = jQuery(\".wpseo-js-premium-indicator\");\n\t\tvar $svg = $premiumIndicator.find(\"svg\");\n\n\t\t// Don't change the color to stand out when premium is actually enabled.\n\t\tif ($premiumIndicator.hasClass(\"wpseo-premium-indicator--no\")) {\n\t\t\tvar $svgPath = $svg.find(\"path\");\n\n\t\t\tvar backgroundColor = $premiumIndicator.css(\"backgroundColor\");\n\n\t\t\t$svgPath.css(\"fill\", backgroundColor);\n\t\t}\n\n\t\t$svg.css(\"display\", \"block\");\n\t\t$premiumIndicator.css({\n\t\t\tbackgroundColor: \"transparent\",\n\t\t\twidth: \"20px\",\n\t\t\theight: \"20px\"\n\t\t});\n\t}\n\n\t/**\n  * Checks a scrollable table width.\n  *\n  * Compares the scrollable table width against the size of its container and\n  * adds or removes CSS classes accordingly.\n  *\n  * @param {object} table A jQuery object with one scrollable table.\n  * @returns {void}\n  */\n\tfunction checkScrollableTableSize(table) {\n\t\t// Bail if the table is hidden.\n\t\tif (table.is(\":hidden\")) {\n\t\t\treturn;\n\t\t}\n\n\t\t// When the table is wider than its parent, make it scrollable.\n\t\tif (table.outerWidth() > table.parent().outerWidth()) {\n\t\t\ttable.data(\"scrollHint\").addClass(\"yoast-has-scroll\");\n\t\t\ttable.data(\"scrollContainer\").addClass(\"yoast-has-scroll\");\n\t\t} else {\n\t\t\ttable.data(\"scrollHint\").removeClass(\"yoast-has-scroll\");\n\t\t\ttable.data(\"scrollContainer\").removeClass(\"yoast-has-scroll\");\n\t\t}\n\t}\n\n\t/**\n  * Checks the width of multiple scrollable tables.\n  *\n  * @param {object} tables A jQuery collection of scrollable tables.\n  * @returns {void}\n  */\n\tfunction checkMultipleScrollableTablesSize(tables) {\n\t\ttables.each(function () {\n\t\t\tcheckScrollableTableSize($(this));\n\t\t});\n\t}\n\n\t/**\n  * Makes tables scrollable.\n  *\n  * Usage: see related stylesheet.\n  *\n  * @returns {void}\n  */\n\tfunction createScrollableTables() {\n\t\t// Get the tables elected to be scrollable and store them for later reuse.\n\t\twindow.wpseoScrollableTables = $(\".yoast-table-scrollable\");\n\n\t\t// Bail if there are no tables.\n\t\tif (!window.wpseoScrollableTables.length) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Loop over the collection of tables and build some HTML around them.\n\t\twindow.wpseoScrollableTables.each(function () {\n\t\t\tvar table = $(this);\n\n\t\t\t// Continue if the table already has the necessary markup.\n\t\t\tif (table.data(\"scrollContainer\")) {\n\t\t\t\t// This is a jQuery equivalent of `continue` within an `each()` loop.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/*\n    * Create an element with a hint message and insert it in the DOM\n    * before each table.\n    */\n\t\t\tvar scrollHint = $(\"<div />\", {\n\t\t\t\t\"class\": \"yoast-table-scrollable__hintwrapper\",\n\t\t\t\thtml: \"<span class='yoast-table-scrollable__hint' aria-hidden='true' />\"\n\t\t\t}).insertBefore(table);\n\n\t\t\t/*\n    * Create a wrapper element with an inner div necessary for\n    * styling and insert them in the DOM before each table.\n    */\n\t\t\tvar scrollContainer = $(\"<div />\", {\n\t\t\t\t\"class\": \"yoast-table-scrollable__container\",\n\t\t\t\thtml: \"<div class='yoast-table-scrollable__inner' />\"\n\t\t\t}).insertBefore(table);\n\n\t\t\t// Set the hint message text.\n\t\t\tscrollHint.find(\".yoast-table-scrollable__hint\").text(wpseoAdminGlobalL10n.scrollable_table_hint);\n\n\t\t\t// For each table, store a reference to its wrapper element.\n\t\t\ttable.data(\"scrollContainer\", scrollContainer);\n\n\t\t\t// For each table, store a reference to its hint message.\n\t\t\ttable.data(\"scrollHint\", scrollHint);\n\n\t\t\t// Move the scrollable table inside the wrapper.\n\t\t\ttable.appendTo(scrollContainer.find(\".yoast-table-scrollable__inner\"));\n\n\t\t\t// Check each table's width.\n\t\t\tcheckScrollableTableSize(table);\n\t\t});\n\t}\n\n\t/*\n  * When the viewport size changes, check again the scrollable tables width.\n  * About the events: technically `wp-window-resized` is triggered on the\n  * body but since it bubbles, it happens also on the window.\n  * Also, instead of trying to detect events support on devices and browsers,\n  * we just run the check on both `wp-window-resized` and `orientationchange`.\n  */\n\t$(window).on(\"wp-window-resized orientationchange\", function () {\n\t\t/*\n   * Bail if there are no tables. Check also for the jQuery object itself,\n   * see https://github.com/Yoast/wordpress-seo/issues/8214\n   */\n\t\tif (!window.wpseoScrollableTables || !window.wpseoScrollableTables.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tcheckMultipleScrollableTablesSize(window.wpseoScrollableTables);\n\t});\n\n\t/*\n  * Generates the scrollable tables markuo when the react tabs are mounted,\n  * when a table is in the active tab. Or, generates the markup when a react\n  * tabs is selected. Uses a timeout to wait for the HTML injection of the table.\n  */\n\t$(window).on({\n\t\t\"Yoast:YoastTabsMounted\": function YoastYoastTabsMounted() {\n\t\t\tsetTimeout(function () {\n\t\t\t\tcreateScrollableTables();\n\t\t\t}, 100);\n\t\t},\n\t\t\"Yoast:YoastTabsSelected\": function YoastYoastTabsSelected() {\n\t\t\tsetTimeout(function () {\n\t\t\t\tcreateScrollableTables();\n\t\t\t}, 100);\n\t\t}\n\t});\n\n\t$(document).ready(function () {\n\t\tshowAlertPopup();\n\t\thookDismissRestoreButtons();\n\t\tsetPremiumIndicatorColor();\n\t\tcreateScrollableTables();\n\t});\n})(jQuery);\n\n//////////////////\n// WEBPACK FOOTER\n// ./wp-seo-admin-global.js\n// module id = 1845\n// module chunks = 25\n\n//# sourceURL=webpack:///./wp-seo-admin-global.js?");

/***/ })

},[1845]);