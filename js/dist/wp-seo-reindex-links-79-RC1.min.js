yoastWebpackJsonp([12],{2057:function(module,exports,__webpack_require__){"use strict";eval('\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _a11ySpeak = __webpack_require__(557);\n\nvar _a11ySpeak2 = _interopRequireDefault(_a11ySpeak);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\n/* global yoastReindexLinksData, jQuery, tb_remove */\n\nvar settings = yoastReindexLinksData.data;\nvar linkIndexingCompleted = false;\n\n/**\n * Represents the progressbar for the reindexing for the links.\n */\nvar IndexProgressBar = function () {\n\n\t/**\n  * The constructor.\n  *\n  * @param {int} total The total amount of items.\n  */\n\tfunction IndexProgressBar(total) {\n\t\t_classCallCheck(this, IndexProgressBar);\n\n\t\tthis.element = jQuery("#wpseo_count_index_links");\n\t\tthis.progressbarTarget = jQuery("#wpseo_index_links_progressbar").progressbar({ value: 0 });\n\t\tthis.total = parseInt(total, 10);\n\t\tthis.totalProcessed = 0;\n\t}\n\n\t/**\n  * Updates the processbar.\n  *\n  * @param {int} countProcessed The amount of items that has been process.\n  *\n  * @returns {void}\n  */\n\n\n\t_createClass(IndexProgressBar, [{\n\t\tkey: "update",\n\t\tvalue: function update(countProcessed) {\n\t\t\tthis.totalProcessed += countProcessed;\n\t\t\tvar newWidth = this.totalProcessed * (100 / this.total);\n\n\t\t\tthis.progressbarTarget.progressbar("value", Math.round(newWidth));\n\t\t\tthis.element.html(this.totalProcessed);\n\t\t}\n\n\t\t/**\n   * Completes the processbar.\n   *\n   * @returns {void}\n   */\n\n\t}, {\n\t\tkey: "complete",\n\t\tvalue: function complete() {\n\t\t\tthis.progressbarTarget.progressbar("value", 100);\n\t\t}\n\t}]);\n\n\treturn IndexProgressBar;\n}();\n\n/**\n * Does the reindex request for the current post and updates the processbar.\n *\n * @param {IndexProgressBar} progressbar The progressbar.\n * @param {Promise.resolve}  resolve     The method to complete index process.\n *\n * @returns {void}\n */\n\n\nfunction doReindexRequest(progressbar, resolve) {\n\t// Do\n\tjQuery.ajax({\n\t\ttype: "GET",\n\t\turl: settings.restApi.root + settings.restApi.endpoint,\n\t\tbeforeSend: function beforeSend(xhr) {\n\t\t\txhr.setRequestHeader("X-WP-Nonce", settings.restApi.nonce);\n\t\t},\n\t\tsuccess: function success(response) {\n\t\t\tvar totalIndexed = parseInt(response, 10);\n\t\t\tif (totalIndexed !== 0) {\n\t\t\t\tprogressbar.update(totalIndexed);\n\n\t\t\t\tdoReindexRequest(progressbar, resolve);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tprogressbar.complete();\n\t\t\tresolve();\n\t\t}\n\t});\n}\n\n/**\n * Starts the reindexing of the links.\n *\n * @returns {Promise} Promise.\n */\nfunction reindexLinks() {\n\t// Do request to get post ids\n\treturn new Promise(function (resolve) {\n\t\tvar progressbar = new IndexProgressBar(settings.amount);\n\t\tdoReindexRequest(progressbar, resolve);\n\t});\n}\n\n/**\n * Sets the finish message, when indexing has been completed.\n *\n * @returns {void}\n */\nfunction completeReindexing() {\n\tlinkIndexingCompleted = true;\n\t(0, _a11ySpeak2.default)(settings.l10n.calculationCompleted);\n\tjQuery("#reindexLinks").html(settings.message.indexingCompleted);\n\n\ttb_remove();\n}\n\n/**\n * Starts the reindexing of the links.\n *\n * @returns {void}\n */\nfunction startReindexing() {\n\t(0, _a11ySpeak2.default)(settings.l10n.calculationInProgress);\n\n\tvar promises = [];\n\tpromises.push(reindexLinks());\n\tPromise.all(promises).then(completeReindexing);\n}\n\n/**\n * Opens the link indexing modal.\n *\n * @returns {void}\n */\nfunction openLinkIndexing() {\n\tjQuery("#general-tab").click();\n\n\tif (linkIndexingCompleted === false) {\n\t\tjQuery("#openLinkIndexing").click();\n\t}\n}\n\n/**\n * Initializes the indexation of links.\n *\n * @returns {void}\n */\nfunction init() {\n\tvar recalculating = false;\n\tjQuery(".yoast-js-calculate-index-links--all ").on("click", function () {\n\t\tif (recalculating === false) {\n\t\t\tstartReindexing();\n\n\t\t\trecalculating = true;\n\t\t}\n\t});\n\n\tjQuery("#noticeRunLinkIndex").click(openLinkIndexing);\n\n\tif (window.location.href.indexOf("&reIndexLinks=1") !== -1) {\n\t\tjQuery(openLinkIndexing);\n\t}\n}\n\njQuery(init);\n\n//////////////////\n// WEBPACK FOOTER\n// ./wp-seo-reindex-links.js\n// module id = 2057\n// module chunks = 12\n\n//# sourceURL=webpack:///./wp-seo-reindex-links.js?')},557:function(module,exports){eval('var containerPolite, containerAssertive, previousMessage = "";\n\n/**\n * Build the live regions markup.\n *\n * @param {String} ariaLive Optional. Value for the "aria-live" attribute, default "polite".\n *\n * @returns {Object} $container The ARIA live region jQuery object.\n */\nvar addContainer = function( ariaLive ) {\n\tariaLive = ariaLive || "polite";\n\n\tvar container = document.createElement( "div" );\n\tcontainer.id = "a11y-speak-" + ariaLive;\n\tcontainer.className = "a11y-speak-region";\n\n\tvar screenReaderTextStyle = "clip: rect(1px, 1px, 1px, 1px); position: absolute; height: 1px; width: 1px; overflow: hidden; word-wrap: normal;";\n\tcontainer.setAttribute( "style", screenReaderTextStyle );\n\n\tcontainer.setAttribute( "aria-live", ariaLive );\n\tcontainer.setAttribute( "aria-relevant", "additions text" );\n\tcontainer.setAttribute( "aria-atomic", "true" );\n\n\tdocument.querySelector( "body" ).appendChild( container );\n\treturn container;\n};\n\n/**\n * Specify a function to execute when the DOM is fully loaded.\n *\n * @param {Function} callback A function to execute after the DOM is ready.\n *\n * @returns {void}\n */\nvar domReady = function( callback ) {\n\tif ( document.readyState === "complete" || ( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {\n\t\treturn callback();\n\t}\n\n\tdocument.addEventListener( "DOMContentLoaded", callback );\n};\n\n/**\n * Create the live regions when the DOM is fully loaded.\n */\ndomReady( function() {\n\tcontainerPolite = document.getElementById( "a11y-speak-polite" );\n\tcontainerAssertive = document.getElementById( "a11y-speak-assertive" );\n\n\tif ( containerPolite === null ) {\n\t\tcontainerPolite = addContainer( "polite" );\n\t}\n\tif ( containerAssertive === null ) {\n\t\tcontainerAssertive = addContainer( "assertive" );\n\t}\n} );\n\n/**\n * Clear the live regions.\n */\nvar clear = function() {\n\tvar regions = document.querySelectorAll( ".a11y-speak-region" );\n\tfor ( var i = 0; i < regions.length; i++ ) {\n\t\tregions[ i ].textContent = "";\n\t}\n};\n\n/**\n * Update the ARIA live notification area text node.\n *\n * @param {String} message  The message to be announced by Assistive Technologies.\n * @param {String} ariaLive Optional. The politeness level for aria-live. Possible values:\n *                          polite or assertive. Default polite.\n */\nvar A11ySpeak = function( message, ariaLive ) {\n\t// Clear previous messages to allow repeated strings being read out.\n\tclear();\n\n\t/*\n\t * Strip HTML tags (if any) from the message string. Ideally, messages should\n\t * be simple strings, carefully crafted for specific use with A11ySpeak.\n\t * When re-using already existing strings this will ensure simple HTML to be\n\t * stripped out and replaced with a space. Browsers will collapse multiple\n\t * spaces natively.\n\t */\n\tmessage = message.replace( /<[^<>]+>/g, " " );\n\n\tif ( previousMessage === message ) {\n\t\tmessage = message + "\\u00A0";\n\t}\n\n\tpreviousMessage = message;\n\n\tif ( containerAssertive && "assertive" === ariaLive ) {\n\t\tcontainerAssertive.textContent = message;\n\t} else if ( containerPolite ) {\n\t\tcontainerPolite.textContent = message;\n\t}\n};\n\nmodule.exports = A11ySpeak;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/atimmer/Documents/clones/VVV2/www/wordpress-default/public_html/wp-content/plugins/wordpress-seo/node_modules/a11y-speak/a11y-speak.js\n// module id = 557\n// module chunks = 12 13 14\n\n//# sourceURL=webpack:////Users/atimmer/Documents/clones/VVV2/www/wordpress-default/public_html/wp-content/plugins/wordpress-seo/node_modules/a11y-speak/a11y-speak.js?')}},[2057]);