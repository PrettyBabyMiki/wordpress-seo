// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SnippetEditor accepts a custom data mapping function 1`] = `
.c0 {
  border-bottom: 1px hidden #fff;
  border-radius: 2px;
  box-shadow: 0 1px 2px rgba(0,0,0,.2);
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  max-width: 600px;
  box-sizing: border-box;
  font-size: 14px;
}

.c2 {
  cursor: pointer;
  position: relative;
}

.c3 {
  color: #1e0fbe;
  -webkit-text-decoration: none;
  text-decoration: none;
  font-size: 18px;
  line-height: 1.2;
  font-weight: normal;
  margin: 0;
  display: inline-block;
  overflow: hidden;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c4 {
  display: inline-block;
  font-size: 16px;
  line-height: 1.2em;
  max-height: 2.4em;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c5 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  white-space: nowrap;
  font-size: 14px;
}

.c6 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  white-space: nowrap;
  font-size: 14px;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 100%;
}

.c8 {
  color: #545454;
  cursor: pointer;
  position: relative;
  max-width: 600px;
  font-size: 13px;
  font-size: 14px;
  line-height: 20px;
}

.c1 {
  padding: 8px 16px;
}

.c7 {
  border: 0;
  border-bottom: 1px solid #DFE1E5;
  margin: 0;
}

.c10 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: #555;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 3px 0 0 3px;
}

.c10:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c10::-moz-focus-inner {
  border-width: 0;
}

.c10:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c10:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c10 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c10:hover,
.c10:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
  box-shadow: none;
}

.c12 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: transparent;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 0 3px 3px 0;
}

.c12:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c12::-moz-focus-inner {
  border-width: 0;
}

.c12:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c12:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c12 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c12:hover,
.c12:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
  box-shadow: none;
}

.c9 {
  display: inline-block;
  margin-top: 10px;
  border: 1px solid #dbdbdb;
  border-radius: 4px;
  background-color: #f7f7f7;
  vertical-align: top;
}

.c14 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin: 10px 0 0 4px;
  fill: #555;
  padding-left: 8px;
}

.c14:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c14::-moz-focus-inner {
  border-width: 0;
}

.c14:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c14:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c14 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c14 svg {
  margin-right: 7px;
}

.c11 {
  width: 22px;
  height: 22px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c13 {
  width: 18px;
  height: 18px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c15 {
  width: 16px;
  height: 16px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c10::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c12::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c14::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

<div>
  <section>
    <div
      className="c0"
      onMouseLeave={undefined}
      width={640}
    >
      <div
        className="c1"
      >
        <span
          className="screen-reader-text"
          style={
            Object {
              "clip": "rect(1px, 1px, 1px, 1px)",
              "height": "1px",
              "overflow": "hidden",
              "position": "absolute",
              "width": "1px",
            }
          }
        >
          SEO title preview:
        </span>
        <div
          className="c2"
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
        >
          <div
            className="c3"
          >
            <span
              className="c4"
            >
              Totally different title
            </span>
          </div>
        </div>
        <span
          className="screen-reader-text"
          style={
            Object {
              "clip": "rect(1px, 1px, 1px, 1px)",
              "height": "1px",
              "overflow": "hidden",
              "position": "absolute",
              "width": "1px",
            }
          }
        >
          Url preview:
        </span>
        <div
          className="c5"
        >
          <div
            className="c6"
            onMouseEnter={[Function]}
            onMouseLeave={[Function]}
            onMouseUp={[Function]}
          >
            example.org â€º totally-different-url
          </div>
        </div>
      </div>
      <hr
        className="c7"
      />
      <div
        className="c1"
      >
        <span
          className="screen-reader-text"
          style={
            Object {
              "clip": "rect(1px, 1px, 1px, 1px)",
              "height": "1px",
              "overflow": "hidden",
              "position": "absolute",
              "width": "1px",
            }
          }
        >
          Meta description preview:
        </span>
        <div
          className="c8"
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
        >
          <div
            className="c8"
          >
            Totally different description
          </div>
        </div>
      </div>
    </div>
  </section>
  <div
    className="c9"
  >
    <button
      aria-pressed={true}
      className="c10"
      onClick={[Function]}
      type="button"
    >
      <svg
        aria-hidden={true}
        className="yoast-svg-icon yoast-svg-icon-mobile c11"
        fill="currentColor"
        focusable="false"
        role="img"
        size="22px"
        viewBox="0 0 1792 1792"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
        />
      </svg>
      <span
        className="screen-reader-text"
        style={
          Object {
            "clip": "rect(1px, 1px, 1px, 1px)",
            "height": "1px",
            "overflow": "hidden",
            "position": "absolute",
            "width": "1px",
          }
        }
      >
        Mobile preview
      </span>
    </button>
    <button
      aria-pressed={false}
      className="c12"
      onClick={[Function]}
      type="button"
    >
      <svg
        aria-hidden={true}
        className="yoast-svg-icon yoast-svg-icon-desktop c13"
        fill="currentColor"
        focusable="false"
        role="img"
        size="18px"
        viewBox="0 0 1792 1792"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
        />
      </svg>
      <span
        className="screen-reader-text"
        style={
          Object {
            "clip": "rect(1px, 1px, 1px, 1px)",
            "height": "1px",
            "overflow": "hidden",
            "position": "absolute",
            "width": "1px",
          }
        }
      >
        Desktop preview
      </span>
    </button>
  </div>
  <button
    aria-expanded={false}
    className="c14"
    onClick={[Function]}
    type="button"
  >
    <svg
      aria-hidden={true}
      className="yoast-svg-icon yoast-svg-icon-edit c15"
      fill="currentColor"
      focusable="false"
      role="img"
      size="16px"
      viewBox="0 0 1792 1792"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
      />
    </svg>
    Edit snippet
  </button>
</div>
`;

exports[`SnippetEditor activates a field on onMouseUp() and opens the editor 1`] = `
<ErrorBoundary>
  <div>
    <SnippetPreview
      activeField={null}
      breadcrumbs={null}
      date=""
      description="Test description, %%replacement_variable%%"
      hoveredField={null}
      isAmp={false}
      keyword=""
      locale="en"
      mode="mobile"
      onHover={[Function]}
      onMouseEnter={[Function]}
      onMouseLeave={[Function]}
      onMouseUp={[Function]}
      title="Test title"
      url="example.org/test-slug"
      wordsToHighlight={Array []}
    />
    <ModeSwitcher
      active="mobile"
      onChange={[Function]}
    />
    <SnippetEditor__EditSnippetButton
      activeBackgroundColor="#f7f7f7"
      activeBorderColor="#888"
      activeColor="#000"
      aria-expanded={true}
      backgroundColor="#f7f7f7"
      borderColor="#ccc"
      boxShadowColor="#ccc"
      focusBackgroundColor="#fff"
      focusBorderColor="#0066cd"
      focusColor="#000"
      hoverBackgroundColor="#fff"
      hoverBorderColor="#888"
      hoverColor="#000"
      onClick={[Function]}
      textColor="#555"
      type="button"
    >
      <SvgIcon
        color="currentColor"
        icon="edit"
        size="16px"
      />
      Edit snippet
    </SnippetEditor__EditSnippetButton>
    <SnippetEditorFields
      activeField={null}
      containerPadding="0 20px"
      data={
        Object {
          "description": "Test description, %%replacement_variable%%",
          "slug": "test-slug",
          "title": "Test title",
        }
      }
      descriptionEditorFieldPlaceholder="Modify your meta description by editing it right here"
      descriptionLengthProgress={
        Object {
          "actual": 42,
          "max": 156,
          "score": 6,
        }
      }
      hoveredField={null}
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      recommendedReplacementVariables={Array []}
      replacementVariables={Array []}
      titleLengthProgress={
        Object {
          "actual": 0,
          "max": 600,
          "score": 1,
        }
      }
    />
    <SnippetEditor__CloseEditorButton
      activeBackgroundColor="#f7f7f7"
      activeBorderColor="#888"
      activeColor="#000"
      backgroundColor="#f7f7f7"
      borderColor="#ccc"
      boxShadowColor="#ccc"
      focusBackgroundColor="#fff"
      focusBorderColor="#0066cd"
      focusColor="#000"
      hoverBackgroundColor="#fff"
      hoverBorderColor="#888"
      hoverColor="#000"
      onClick={[Function]}
      textColor="#555"
      type="button"
    >
      Close snippet editor
    </SnippetEditor__CloseEditorButton>
  </div>
</ErrorBoundary>
`;

exports[`SnippetEditor calls callbacks when the editors are focused or changed 1`] = `
.c21 {
  box-sizing: border-box;
  width: 100%;
  height: 8px;
  display: block;
  margin-top: 8px;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background-color: #f7f7f7;
  border: 1px solid #ddd;
}

.c21::-webkit-progress-bar {
  background-color: #f7f7f7;
}

.c21::-webkit-progress-value {
  background-color: #dc3232;
  -webkit-transition: width 250ms;
  transition: width 250ms;
}

.c21::-moz-progress-bar {
  background-color: #dc3232;
}

.c21::-ms-fill {
  background-color: #dc3232;
  border: 0;
}

.c25 {
  box-sizing: border-box;
  width: 100%;
  height: 8px;
  display: block;
  margin-top: 8px;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background-color: #f7f7f7;
  border: 1px solid #ddd;
}

.c25::-webkit-progress-bar {
  background-color: #f7f7f7;
}

.c25::-webkit-progress-value {
  background-color: #ee7c1b;
  -webkit-transition: width 250ms;
  transition: width 250ms;
}

.c25::-moz-progress-bar {
  background-color: #ee7c1b;
}

.c25::-ms-fill {
  background-color: #ee7c1b;
  border: 0;
}

.c17 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  margin: 24px 0 0 0;
}

.c16 {
  padding: 0 20px;
}

.c18 {
  -webkit-flex: 1 1 200px;
  -ms-flex: 1 1 200px;
  flex: 1 1 200px;
  min-width: 200px;
  cursor: pointer;
  font-size: 16px;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin: 4px 0;
}

.c19 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  padding-left: 8px;
  height: 33px;
  border: 1px solid #dbdbdb;
  font-size: 13px;
}

.c19:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c19::-moz-focus-inner {
  border-width: 0;
}

.c19:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c19:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c19 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c19 svg {
  margin-right: 7px;
  fill: #555;
}

.c0 {
  border-bottom: 1px hidden #fff;
  border-radius: 2px;
  box-shadow: 0 1px 2px rgba(0,0,0,.2);
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  max-width: 600px;
  box-sizing: border-box;
  font-size: 14px;
}

.c2 {
  cursor: pointer;
  position: relative;
}

.c3 {
  color: #1e0fbe;
  -webkit-text-decoration: none;
  text-decoration: none;
  font-size: 18px;
  line-height: 1.2;
  font-weight: normal;
  margin: 0;
  display: inline-block;
  overflow: hidden;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c4 {
  display: inline-block;
  font-size: 16px;
  line-height: 1.2em;
  max-height: 2.4em;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c5 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  white-space: nowrap;
  font-size: 14px;
}

.c6 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  white-space: nowrap;
  font-size: 14px;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 100%;
}

.c8 {
  color: #545454;
  cursor: pointer;
  position: relative;
  max-width: 600px;
  font-size: 13px;
  font-size: 14px;
  line-height: 20px;
}

.c1 {
  padding: 8px 16px;
}

.c7 {
  border: 0;
  border-bottom: 1px solid #DFE1E5;
  margin: 0;
}

.c23 {
  border: none;
  width: 100%;
  height: inherit;
  line-height: inherit;
  font-family: inherit;
  font-size: inherit;
  color: inherit;
}

.c23:focus {
  outline: 0;
}

.c20 {
  -webkit-flex: 0 1 100%;
  -ms-flex: 0 1 100%;
  flex: 0 1 100%;
  border: 1px solid #ddd;
  padding: 3px 5px;
  box-sizing: border-box;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  cursor: text;
}

.c20 .public-DraftStyleDefault-block {
  line-height: 24px;
}

.c20::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width%3D%221792%22%20height%3D%221792%22%20viewBox%3D%220%200%201792%201792%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20fill%3D%22transparent%22%20d%3D%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20%2F%3E%3C%2Fsvg%3E );
  background-size: 25px;
  content: "";
}

.c22 {
  -webkit-flex: 0 1 100%;
  -ms-flex: 0 1 100%;
  flex: 0 1 100%;
  border: 1px solid #ddd;
  padding: 3px 5px;
  box-sizing: border-box;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  cursor: text;
}

.c22::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width%3D%221792%22%20height%3D%221792%22%20viewBox%3D%220%200%201792%201792%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20fill%3D%22transparent%22%20d%3D%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20%2F%3E%3C%2Fsvg%3E );
  background-size: 25px;
  content: "";
}

.c24 {
  -webkit-flex: 0 1 100%;
  -ms-flex: 0 1 100%;
  flex: 0 1 100%;
  border: 1px solid #ddd;
  padding: 3px 5px;
  box-sizing: border-box;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  cursor: text;
  min-height: 72px;
  padding: 2px 6px;
  line-height: 24px;
}

.c24 .public-DraftEditorPlaceholder-root {
  color: #616161;
}

.c24 .public-DraftEditorPlaceholder-hasFocus {
  color: #616161;
}

.c24::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width%3D%221792%22%20height%3D%221792%22%20viewBox%3D%220%200%201792%201792%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20fill%3D%22transparent%22%20d%3D%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20%2F%3E%3C%2Fsvg%3E );
  background-size: 25px;
  content: "";
}

.c10 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: #555;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 3px 0 0 3px;
}

.c10:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c10::-moz-focus-inner {
  border-width: 0;
}

.c10:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c10:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c10 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c10:hover,
.c10:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
  box-shadow: none;
}

.c12 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: transparent;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 0 3px 3px 0;
}

.c12:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c12::-moz-focus-inner {
  border-width: 0;
}

.c12:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c12:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c12 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c12:hover,
.c12:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
  box-shadow: none;
}

.c9 {
  display: inline-block;
  margin-top: 10px;
  border: 1px solid #dbdbdb;
  border-radius: 4px;
  background-color: #f7f7f7;
  vertical-align: top;
}

.c14 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin: 10px 0 0 4px;
  fill: #555;
  padding-left: 8px;
}

.c14:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c14::-moz-focus-inner {
  border-width: 0;
}

.c14:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c14:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c14 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c14 svg {
  margin-right: 7px;
}

.c26 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin-top: 24px;
}

.c26:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c26::-moz-focus-inner {
  border-width: 0;
}

.c26:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c26:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c26 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c11 {
  width: 22px;
  height: 22px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c13 {
  width: 18px;
  height: 18px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c15 {
  width: 16px;
  height: 16px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c19::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c10::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c12::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c14::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c26::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

<SnippetEditor
  baseUrl="http://example.org/"
  data={
    Object {
      "description": "Test description, %%replacement_variable%%",
      "slug": "test-slug",
      "title": "Test title",
    }
  }
  date=""
  descriptionEditorFieldPlaceholder=""
  descriptionLengthProgress={
    Object {
      "actual": 0,
      "max": 156,
      "score": 0,
    }
  }
  hasPaperStyle={true}
  locale="en"
  mapEditorDataToPreview={null}
  mode="mobile"
  onChange={[MockFunction]}
  onChangeAnalysisData={[Function]}
  recommendedReplacementVariables={Array []}
  replacementVariables={Array []}
  showCloseButton={true}
  titleLengthProgress={
    Object {
      "actual": 0,
      "max": 600,
      "score": 0,
    }
  }
  wordsToHighlight={Array []}
>
  <ErrorBoundary>
    <div>
      <SnippetPreview
        activeField={null}
        breadcrumbs={null}
        date=""
        description="Test description, %%replacement_variable%%"
        hoveredField={null}
        isAmp={false}
        keyword=""
        locale="en"
        mode="mobile"
        onHover={[Function]}
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        title="Test title"
        url="example.org/test-slug"
        wordsToHighlight={Array []}
      >
        <section>
          <SnippetPreview__MobileContainer
            padding={20}
            width={640}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "SnippetPreview__MobileContainer-sc-1hxg8jo-1",
                    "isStatic": true,
                    "lastClassName": "c0",
                    "rules": Array [
                      "border-bottom:1px hidden #fff;border-radius:2px;box-shadow:0 1px 2px rgba(0,0,0,.2);font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;max-width:",
                      "600",
                      "px;box-sizing:border-box;font-size:14px;",
                    ],
                  },
                  "displayName": "SnippetPreview__MobileContainer",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "SnippetPreview__MobileContainer-sc-1hxg8jo-1",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              padding={20}
              width={640}
            >
              <div
                className="c0"
                width={640}
              >
                <SnippetPreview__MobilePartContainer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__MobilePartContainer-sc-1hxg8jo-12",
                          "isStatic": true,
                          "lastClassName": "c1",
                          "rules": Array [
                            "padding:8px 16px;",
                          ],
                        },
                        "displayName": "SnippetPreview__MobilePartContainer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__MobilePartContainer-sc-1hxg8jo-12",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="c1"
                    >
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          SEO title preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__BaseTitle
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__BaseTitle-sc-1hxg8jo-2",
                                "isStatic": true,
                                "lastClassName": "c2",
                                "rules": Array [
                                  "cursor:pointer;position:relative;",
                                ],
                              },
                              "displayName": "SnippetPreview__BaseTitle",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__BaseTitle-sc-1hxg8jo-2",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                        >
                          <div
                            className="c2"
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                          >
                            <SnippetPreview__TitleBounded>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__TitleBounded-sc-1hxg8jo-5",
                                      "isStatic": true,
                                      "lastClassName": "c3",
                                      "rules": Array [
                                        "color:",
                                        "#1e0fbe",
                                        ";text-decoration:none;font-size:18px;line-height:1.2;font-weight:normal;margin:0;display:inline-block;overflow:hidden;max-width:",
                                        "600",
                                        "px;vertical-align:top;text-overflow:ellipsis;",
                                        "max-width:",
                                        "600",
                                        "px;vertical-align:top;text-overflow:ellipsis;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__TitleBounded",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__Title-sc-1hxg8jo-4",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__TitleBounded-sc-1hxg8jo-5",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="c3"
                                >
                                  <SnippetPreview__TitleUnboundedMobile>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "SnippetPreview__TitleUnboundedMobile-sc-1hxg8jo-7",
                                            "isStatic": true,
                                            "lastClassName": "c4",
                                            "rules": Array [
                                              "display:inline-block;font-size:16px;line-height:1.2em;max-height:2.4em;overflow:hidden;text-overflow:ellipsis;",
                                            ],
                                          },
                                          "displayName": "SnippetPreview__TitleUnboundedMobile",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "SnippetPreview__TitleUnboundedMobile-sc-1hxg8jo-7",
                                          "target": "span",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={[Function]}
                                    >
                                      <span
                                        className="c4"
                                      >
                                        Test title
                                      </span>
                                    </StyledComponent>
                                  </SnippetPreview__TitleUnboundedMobile>
                                </div>
                              </StyledComponent>
                            </SnippetPreview__TitleBounded>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__BaseTitle>
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          Url preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__BaseUrl>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__BaseUrl-sc-1hxg8jo-8",
                                "isStatic": true,
                                "lastClassName": "c5",
                                "rules": Array [
                                  "display:inline-block;color:",
                                  "#006621",
                                  ";cursor:pointer;position:relative;max-width:90%;white-space:nowrap;font-size:14px;",
                                ],
                              },
                              "displayName": "SnippetPreview__BaseUrl",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__BaseUrl-sc-1hxg8jo-8",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <div
                            className="c5"
                          >
                            <SnippetPreview__BaseUrlOverflowContainer
                              onMouseEnter={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__BaseUrlOverflowContainer-sc-1hxg8jo-9",
                                      "isStatic": true,
                                      "lastClassName": "c6",
                                      "rules": Array [
                                        "display:inline-block;color:",
                                        "#006621",
                                        ";cursor:pointer;position:relative;max-width:90%;white-space:nowrap;font-size:14px;",
                                        "overflow:hidden;text-overflow:ellipsis;max-width:100%;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__BaseUrlOverflowContainer",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__BaseUrl-sc-1hxg8jo-8",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__BaseUrlOverflowContainer-sc-1hxg8jo-9",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                onMouseEnter={[Function]}
                                onMouseLeave={[Function]}
                                onMouseUp={[Function]}
                              >
                                <div
                                  className="c6"
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseUp={[Function]}
                                >
                                  example.org â€º test-slug
                                </div>
                              </StyledComponent>
                            </SnippetPreview__BaseUrlOverflowContainer>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__BaseUrl>
                    </div>
                  </StyledComponent>
                </SnippetPreview__MobilePartContainer>
                <SnippetPreview__Separator>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__Separator-sc-1hxg8jo-16",
                          "isStatic": true,
                          "lastClassName": "c7",
                          "rules": Array [
                            "border:0;border-bottom:1px solid #DFE1E5;margin:0;",
                          ],
                        },
                        "displayName": "SnippetPreview__Separator",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__Separator-sc-1hxg8jo-16",
                        "target": "hr",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <hr
                      className="c7"
                    />
                  </StyledComponent>
                </SnippetPreview__Separator>
                <SnippetPreview__MobilePartContainer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__MobilePartContainer-sc-1hxg8jo-12",
                          "isStatic": true,
                          "lastClassName": "c1",
                          "rules": Array [
                            "padding:8px 16px;",
                          ],
                        },
                        "displayName": "SnippetPreview__MobilePartContainer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__MobilePartContainer-sc-1hxg8jo-12",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="c1"
                    >
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          Meta description preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__MobileDescription
                        isDescriptionPlaceholder={false}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__MobileDescription-sc-1hxg8jo-11",
                                "isStatic": false,
                                "lastClassName": "c8",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";cursor:pointer;position:relative;max-width:",
                                  "600",
                                  "px;font-size:13px;",
                                  "font-size:14px;line-height:20px;",
                                ],
                              },
                              "displayName": "SnippetPreview__MobileDescription",
                              "foldedComponentIds": Array [
                                "SnippetPreview__DesktopDescription-sc-1hxg8jo-10",
                              ],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__MobileDescription-sc-1hxg8jo-11",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isDescriptionPlaceholder={false}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                        >
                          <div
                            className="c8"
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                          >
                            <SnippetPreview__MobileDescription
                              isDescriptionPlaceholder={false}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__MobileDescription-sc-1hxg8jo-11",
                                      "isStatic": false,
                                      "lastClassName": "c8",
                                      "rules": Array [
                                        "color:",
                                        [Function],
                                        ";cursor:pointer;position:relative;max-width:",
                                        "600",
                                        "px;font-size:13px;",
                                        "font-size:14px;line-height:20px;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__MobileDescription",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__DesktopDescription-sc-1hxg8jo-10",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__MobileDescription-sc-1hxg8jo-11",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={[Function]}
                                isDescriptionPlaceholder={false}
                              >
                                <div
                                  className="c8"
                                >
                                  Test description, %%replacement_variable%%
                                </div>
                              </StyledComponent>
                            </SnippetPreview__MobileDescription>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__MobileDescription>
                    </div>
                  </StyledComponent>
                </SnippetPreview__MobilePartContainer>
              </div>
            </StyledComponent>
          </SnippetPreview__MobileContainer>
        </section>
      </SnippetPreview>
      <ModeSwitcher
        active="mobile"
        onChange={[Function]}
      >
        <ModeSwitcher__Switcher>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "ModeSwitcher__Switcher-sc-9lbpr3-3",
                  "isStatic": true,
                  "lastClassName": "c9",
                  "rules": Array [
                    "display:inline-block;margin-top:10px;border:1px solid #dbdbdb;border-radius:4px;background-color:#f7f7f7;vertical-align:top;",
                  ],
                },
                "displayName": "ModeSwitcher__Switcher",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModeSwitcher__Switcher-sc-9lbpr3-3",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="c9"
            >
              <ModeSwitcher__MobileButton
                activeBackgroundColor="#f7f7f7"
                activeBorderColor="#888"
                activeColor="#000"
                aria-pressed={true}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                focusBackgroundColor="#fff"
                focusBorderColor="#0066cd"
                focusColor="#000"
                hoverBackgroundColor="#fff"
                hoverBorderColor="#888"
                hoverColor="#000"
                isActive={true}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <StyledComponent
                  activeBackgroundColor="#f7f7f7"
                  activeBorderColor="#888"
                  activeColor="#000"
                  aria-pressed={true}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  focusBackgroundColor="#fff"
                  focusBorderColor="#0066cd"
                  focusColor="#000"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "ModeSwitcher__MobileButton-sc-9lbpr3-1",
                        "isStatic": false,
                        "lastClassName": "c10",
                        "rules": Array [
                          "color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";box-shadow:0 1px 0 ",
                          [Function],
                          ";",
                          "&:active{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";box-shadow:inset 0 2px 5px -3px ",
                          "rgba( 0, 0, 0, 0.5 )",
                          ";}",
                          "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                          [Function],
                          ";color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";box-shadow:0 0 3px ",
                          "rgba( 8, 74, 103, 0.8 )",
                          ";}",
                          "&:hover{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";}",
                          "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                          "1px",
                          ";border-style:solid;margin:0;padding:",
                          "4px",
                          " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                          [Function],
                          ";overflow:visible;min-height:",
                          "32px",
                          ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                          "22px",
                          ";}}",
                          "border:none;border-bottom:4px solid transparent;width:31px;height:31px;border-color:",
                          [Function],
                          ";color:",
                          "#555",
                          ";transition:0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;transition-property:border-color;&:hover,&:focus{background-color:",
                          "#fff",
                          ";border:none;border-bottom:4px solid transparent;border-color:",
                          "#1e8cbe",
                          ";color:",
                          "#1e8cbe",
                          ";box-shadow:none;}",
                          "border-radius:3px 0 0 3px;",
                        ],
                      },
                      "defaultProps": Object {
                        "activeBackgroundColor": "#f7f7f7",
                        "activeBorderColor": "#888",
                        "activeColor": "#000",
                        "backgroundColor": "#f7f7f7",
                        "borderColor": "#ccc",
                        "boxShadowColor": "#ccc",
                        "focusBackgroundColor": "#fff",
                        "focusBorderColor": "#0066cd",
                        "focusColor": "#000",
                        "hoverBackgroundColor": "#fff",
                        "hoverBorderColor": "#888",
                        "hoverColor": "#000",
                        "textColor": "#555",
                        "type": "button",
                      },
                      "displayName": "ModeSwitcher__MobileButton",
                      "foldedComponentIds": Array [
                        "Button__BaseButton-sc-32rbq-4",
                        "Button-sc-32rbq-3",
                        "Button-sc-32rbq-1",
                        "Button-sc-32rbq-2",
                        "Button-sc-32rbq-0",
                        "ModeSwitcher__SwitcherButton-sc-9lbpr3-0",
                      ],
                      "propTypes": Object {
                        "activeBackgroundColor": [Function],
                        "activeBorderColor": [Function],
                        "activeColor": [Function],
                        "backgroundColor": [Function],
                        "borderColor": [Function],
                        "boxShadowColor": [Function],
                        "focusBackgroundColor": [Function],
                        "focusBorderColor": [Function],
                        "focusColor": [Function],
                        "hoverBackgroundColor": [Function],
                        "hoverBorderColor": [Function],
                        "hoverColor": [Function],
                        "textColor": [Function],
                        "type": [Function],
                      },
                      "render": [Function],
                      "styledComponentId": "ModeSwitcher__MobileButton-sc-9lbpr3-1",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hoverBackgroundColor="#fff"
                  hoverBorderColor="#888"
                  hoverColor="#000"
                  isActive={true}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <button
                    aria-pressed={true}
                    className="c10"
                    onClick={[Function]}
                    type="button"
                  >
                    <SvgIcon
                      color="currentColor"
                      icon="mobile"
                      size="22px"
                    >
                      <SvgIcon__StyledSvg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-mobile"
                        fill="currentColor"
                        focusable="false"
                        role="img"
                        size="22px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <StyledComponent
                          aria-hidden={true}
                          className="yoast-svg-icon yoast-svg-icon-mobile"
                          fill="currentColor"
                          focusable="false"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                "isStatic": false,
                                "lastClassName": "c11",
                                "rules": Array [
                                  "width:",
                                  [Function],
                                  ";height:",
                                  [Function],
                                  ";flex:none;",
                                ],
                              },
                              "displayName": "SvgIcon__StyledSvg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          role="img"
                          size="22px"
                          viewBox="0 0 1792 1792"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <svg
                            aria-hidden={true}
                            className="yoast-svg-icon yoast-svg-icon-mobile c11"
                            fill="currentColor"
                            focusable="false"
                            role="img"
                            size="22px"
                            viewBox="0 0 1792 1792"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
                            />
                          </svg>
                        </StyledComponent>
                      </SvgIcon__StyledSvg>
                    </SvgIcon>
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Mobile preview
                      </span>
                    </ScreenReaderText>
                  </button>
                </StyledComponent>
              </ModeSwitcher__MobileButton>
              <ModeSwitcher__DesktopButton
                activeBackgroundColor="#f7f7f7"
                activeBorderColor="#888"
                activeColor="#000"
                aria-pressed={false}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                focusBackgroundColor="#fff"
                focusBorderColor="#0066cd"
                focusColor="#000"
                hoverBackgroundColor="#fff"
                hoverBorderColor="#888"
                hoverColor="#000"
                isActive={false}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <StyledComponent
                  activeBackgroundColor="#f7f7f7"
                  activeBorderColor="#888"
                  activeColor="#000"
                  aria-pressed={false}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  focusBackgroundColor="#fff"
                  focusBorderColor="#0066cd"
                  focusColor="#000"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "ModeSwitcher__DesktopButton-sc-9lbpr3-2",
                        "isStatic": false,
                        "lastClassName": "c12",
                        "rules": Array [
                          "color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";box-shadow:0 1px 0 ",
                          [Function],
                          ";",
                          "&:active{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";box-shadow:inset 0 2px 5px -3px ",
                          "rgba( 0, 0, 0, 0.5 )",
                          ";}",
                          "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                          [Function],
                          ";color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";box-shadow:0 0 3px ",
                          "rgba( 8, 74, 103, 0.8 )",
                          ";}",
                          "&:hover{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";}",
                          "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                          "1px",
                          ";border-style:solid;margin:0;padding:",
                          "4px",
                          " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                          [Function],
                          ";overflow:visible;min-height:",
                          "32px",
                          ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                          "22px",
                          ";}}",
                          "border:none;border-bottom:4px solid transparent;width:31px;height:31px;border-color:",
                          [Function],
                          ";color:",
                          "#555",
                          ";transition:0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;transition-property:border-color;&:hover,&:focus{background-color:",
                          "#fff",
                          ";border:none;border-bottom:4px solid transparent;border-color:",
                          "#1e8cbe",
                          ";color:",
                          "#1e8cbe",
                          ";box-shadow:none;}",
                          "border-radius:0 3px 3px 0;",
                        ],
                      },
                      "defaultProps": Object {
                        "activeBackgroundColor": "#f7f7f7",
                        "activeBorderColor": "#888",
                        "activeColor": "#000",
                        "backgroundColor": "#f7f7f7",
                        "borderColor": "#ccc",
                        "boxShadowColor": "#ccc",
                        "focusBackgroundColor": "#fff",
                        "focusBorderColor": "#0066cd",
                        "focusColor": "#000",
                        "hoverBackgroundColor": "#fff",
                        "hoverBorderColor": "#888",
                        "hoverColor": "#000",
                        "textColor": "#555",
                        "type": "button",
                      },
                      "displayName": "ModeSwitcher__DesktopButton",
                      "foldedComponentIds": Array [
                        "Button__BaseButton-sc-32rbq-4",
                        "Button-sc-32rbq-3",
                        "Button-sc-32rbq-1",
                        "Button-sc-32rbq-2",
                        "Button-sc-32rbq-0",
                        "ModeSwitcher__SwitcherButton-sc-9lbpr3-0",
                      ],
                      "propTypes": Object {
                        "activeBackgroundColor": [Function],
                        "activeBorderColor": [Function],
                        "activeColor": [Function],
                        "backgroundColor": [Function],
                        "borderColor": [Function],
                        "boxShadowColor": [Function],
                        "focusBackgroundColor": [Function],
                        "focusBorderColor": [Function],
                        "focusColor": [Function],
                        "hoverBackgroundColor": [Function],
                        "hoverBorderColor": [Function],
                        "hoverColor": [Function],
                        "textColor": [Function],
                        "type": [Function],
                      },
                      "render": [Function],
                      "styledComponentId": "ModeSwitcher__DesktopButton-sc-9lbpr3-2",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hoverBackgroundColor="#fff"
                  hoverBorderColor="#888"
                  hoverColor="#000"
                  isActive={false}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <button
                    aria-pressed={false}
                    className="c12"
                    onClick={[Function]}
                    type="button"
                  >
                    <SvgIcon
                      color="currentColor"
                      icon="desktop"
                      size="18px"
                    >
                      <SvgIcon__StyledSvg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-desktop"
                        fill="currentColor"
                        focusable="false"
                        role="img"
                        size="18px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <StyledComponent
                          aria-hidden={true}
                          className="yoast-svg-icon yoast-svg-icon-desktop"
                          fill="currentColor"
                          focusable="false"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                "isStatic": false,
                                "lastClassName": "c13",
                                "rules": Array [
                                  "width:",
                                  [Function],
                                  ";height:",
                                  [Function],
                                  ";flex:none;",
                                ],
                              },
                              "displayName": "SvgIcon__StyledSvg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          role="img"
                          size="18px"
                          viewBox="0 0 1792 1792"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <svg
                            aria-hidden={true}
                            className="yoast-svg-icon yoast-svg-icon-desktop c13"
                            fill="currentColor"
                            focusable="false"
                            role="img"
                            size="18px"
                            viewBox="0 0 1792 1792"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
                            />
                          </svg>
                        </StyledComponent>
                      </SvgIcon__StyledSvg>
                    </SvgIcon>
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Desktop preview
                      </span>
                    </ScreenReaderText>
                  </button>
                </StyledComponent>
              </ModeSwitcher__DesktopButton>
            </div>
          </StyledComponent>
        </ModeSwitcher__Switcher>
      </ModeSwitcher>
      <SnippetEditor__EditSnippetButton
        activeBackgroundColor="#f7f7f7"
        activeBorderColor="#888"
        activeColor="#000"
        aria-expanded={true}
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        focusBackgroundColor="#fff"
        focusBorderColor="#0066cd"
        focusColor="#000"
        hoverBackgroundColor="#fff"
        hoverBorderColor="#888"
        hoverColor="#000"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <StyledComponent
          activeBackgroundColor="#f7f7f7"
          activeBorderColor="#888"
          activeColor="#000"
          aria-expanded={true}
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          focusBackgroundColor="#fff"
          focusBorderColor="#0066cd"
          focusColor="#000"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "SnippetEditor__EditSnippetButton-sc-144bmm3-1",
                "isStatic": false,
                "lastClassName": "c14",
                "rules": Array [
                  "color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";background:",
                  [Function],
                  ";box-shadow:0 1px 0 ",
                  [Function],
                  ";",
                  "&:active{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";box-shadow:inset 0 2px 5px -3px ",
                  "rgba( 0, 0, 0, 0.5 )",
                  ";}",
                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                  [Function],
                  ";color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";box-shadow:0 0 3px ",
                  "rgba( 8, 74, 103, 0.8 )",
                  ";}",
                  "&:hover{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";}",
                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                  "1px",
                  ";border-style:solid;margin:0;padding:",
                  "4px",
                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                  [Function],
                  ";overflow:visible;min-height:",
                  "32px",
                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                  "22px",
                  ";}}",
                  "height:33px;border:1px solid #dbdbdb;box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;",
                  "margin:",
                  [Function],
                  ";fill:",
                  "#555",
                  ";padding-left:8px;& svg{",
                  [Function],
                  ":7px;}",
                ],
              },
              "defaultProps": Object {
                "activeBackgroundColor": "#f7f7f7",
                "activeBorderColor": "#888",
                "activeColor": "#000",
                "backgroundColor": "#f7f7f7",
                "borderColor": "#ccc",
                "boxShadowColor": "#ccc",
                "focusBackgroundColor": "#fff",
                "focusBorderColor": "#0066cd",
                "focusColor": "#000",
                "hoverBackgroundColor": "#fff",
                "hoverBorderColor": "#888",
                "hoverColor": "#000",
                "textColor": "#555",
                "type": "button",
              },
              "displayName": "SnippetEditor__EditSnippetButton",
              "foldedComponentIds": Array [
                "Button__BaseButton-sc-32rbq-4",
                "Button-sc-32rbq-3",
                "Button-sc-32rbq-1",
                "Button-sc-32rbq-2",
                "Button-sc-32rbq-0",
                "SnippetEditor__SnippetEditorButton-sc-144bmm3-0",
              ],
              "propTypes": Object {
                "activeBackgroundColor": [Function],
                "activeBorderColor": [Function],
                "activeColor": [Function],
                "backgroundColor": [Function],
                "borderColor": [Function],
                "boxShadowColor": [Function],
                "focusBackgroundColor": [Function],
                "focusBorderColor": [Function],
                "focusColor": [Function],
                "hoverBackgroundColor": [Function],
                "hoverBorderColor": [Function],
                "hoverColor": [Function],
                "textColor": [Function],
                "type": [Function],
              },
              "render": [Function],
              "styledComponentId": "SnippetEditor__EditSnippetButton-sc-144bmm3-1",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={[Function]}
          hoverBackgroundColor="#fff"
          hoverBorderColor="#888"
          hoverColor="#000"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <button
            aria-expanded={true}
            className="c14"
            onClick={[Function]}
            type="button"
          >
            <SvgIcon
              color="currentColor"
              icon="edit"
              size="16px"
            >
              <SvgIcon__StyledSvg
                aria-hidden={true}
                className="yoast-svg-icon yoast-svg-icon-edit"
                fill="currentColor"
                focusable="false"
                role="img"
                size="16px"
                viewBox="0 0 1792 1792"
                xmlns="http://www.w3.org/2000/svg"
              >
                <StyledComponent
                  aria-hidden={true}
                  className="yoast-svg-icon yoast-svg-icon-edit"
                  fill="currentColor"
                  focusable="false"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                        "isStatic": false,
                        "lastClassName": "c15",
                        "rules": Array [
                          "width:",
                          [Function],
                          ";height:",
                          [Function],
                          ";flex:none;",
                        ],
                      },
                      "displayName": "SvgIcon__StyledSvg",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                      "target": "svg",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  role="img"
                  size="16px"
                  viewBox="0 0 1792 1792"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <svg
                    aria-hidden={true}
                    className="yoast-svg-icon yoast-svg-icon-edit c15"
                    fill="currentColor"
                    focusable="false"
                    role="img"
                    size="16px"
                    viewBox="0 0 1792 1792"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
                    />
                  </svg>
                </StyledComponent>
              </SvgIcon__StyledSvg>
            </SvgIcon>
            Edit snippet
          </button>
        </StyledComponent>
      </SnippetEditor__EditSnippetButton>
      <SnippetEditorFields
        activeField={null}
        containerPadding="0 20px"
        data={
          Object {
            "description": "Test description, %%replacement_variable%%",
            "slug": "test-slug",
            "title": "Test title",
          }
        }
        descriptionEditorFieldPlaceholder="Modify your meta description by editing it right here"
        descriptionLengthProgress={
          Object {
            "actual": 42,
            "max": 156,
            "score": 6,
          }
        }
        hoveredField={null}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        recommendedReplacementVariables={Array []}
        replacementVariables={Array []}
        titleLengthProgress={
          Object {
            "actual": 0,
            "max": 600,
            "score": 1,
          }
        }
      >
        <shared__StyledEditor
          padding="0 20px"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "shared__StyledEditor-lzs0hf-5",
                  "isStatic": false,
                  "lastClassName": "c16",
                  "rules": Array [
                    "padding:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "shared__StyledEditor",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "shared__StyledEditor-lzs0hf-5",
                "target": "section",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            padding="0 20px"
          >
            <section
              className="c16"
            >
              <shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "shared__FormSection-lzs0hf-4",
                        "isStatic": true,
                        "lastClassName": "c17",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "shared__FormSection-lzs0hf-4",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="c17"
                  >
                    <ReplacementVariableEditor
                      content="Test title"
                      editorRef={[Function]}
                      fieldId="snippet-editor-field-title"
                      isActive={false}
                      isHovered={false}
                      label="SEO title"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      recommendedReplacementVariables={Array []}
                      replacementVariables={Array []}
                      withCaret={true}
                    >
                      <shared__SimulatedLabel
                        id="21"
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared__SimulatedLabel-lzs0hf-6",
                                "isStatic": true,
                                "lastClassName": "c18",
                                "rules": Array [
                                  "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                                ],
                              },
                              "displayName": "shared__SimulatedLabel",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "shared__SimulatedLabel-lzs0hf-6",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          id="21"
                          onClick={[Function]}
                        >
                          <div
                            className="c18"
                            id="21"
                            onClick={[Function]}
                          >
                            SEO title
                          </div>
                        </StyledComponent>
                      </shared__SimulatedLabel>
                      <shared__TriggerReplacementVariableSuggestionsButton
                        activeBackgroundColor="#f7f7f7"
                        activeBorderColor="#888"
                        activeColor="#000"
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        focusBackgroundColor="#fff"
                        focusBorderColor="#0066cd"
                        focusColor="#000"
                        hoverBackgroundColor="#fff"
                        hoverBorderColor="#888"
                        hoverColor="#000"
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <StyledComponent
                          activeBackgroundColor="#f7f7f7"
                          activeBorderColor="#888"
                          activeColor="#000"
                          backgroundColor="#f7f7f7"
                          borderColor="#ccc"
                          boxShadowColor="#ccc"
                          focusBackgroundColor="#fff"
                          focusBorderColor="#0066cd"
                          focusColor="#000"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared__TriggerReplacementVariableSuggestionsButton-lzs0hf-7",
                                "isStatic": false,
                                "lastClassName": "c19",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";background:",
                                  [Function],
                                  ";box-shadow:0 1px 0 ",
                                  [Function],
                                  ";",
                                  "&:active{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";box-shadow:inset 0 2px 5px -3px ",
                                  "rgba( 0, 0, 0, 0.5 )",
                                  ";}",
                                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                                  [Function],
                                  ";color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";box-shadow:0 0 3px ",
                                  "rgba( 8, 74, 103, 0.8 )",
                                  ";}",
                                  "&:hover{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";}",
                                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                                  "1px",
                                  ";border-style:solid;margin:0;padding:",
                                  "4px",
                                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                                  [Function],
                                  ";overflow:visible;min-height:",
                                  "32px",
                                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                                  "22px",
                                  ";}}",
                                  "box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;padding-left:8px;height:33px;border:1px solid #dbdbdb;font-size:13px;& svg{",
                                  [Function],
                                  ":7px;fill:",
                                  "#555",
                                  ";}",
                                ],
                              },
                              "defaultProps": Object {
                                "activeBackgroundColor": "#f7f7f7",
                                "activeBorderColor": "#888",
                                "activeColor": "#000",
                                "backgroundColor": "#f7f7f7",
                                "borderColor": "#ccc",
                                "boxShadowColor": "#ccc",
                                "focusBackgroundColor": "#fff",
                                "focusBorderColor": "#0066cd",
                                "focusColor": "#000",
                                "hoverBackgroundColor": "#fff",
                                "hoverBorderColor": "#888",
                                "hoverColor": "#000",
                                "textColor": "#555",
                                "type": "button",
                              },
                              "displayName": "shared__TriggerReplacementVariableSuggestionsButton",
                              "foldedComponentIds": Array [
                                "Button__BaseButton-sc-32rbq-4",
                                "Button-sc-32rbq-3",
                                "Button-sc-32rbq-1",
                                "Button-sc-32rbq-2",
                                "Button-sc-32rbq-0",
                              ],
                              "propTypes": Object {
                                "activeBackgroundColor": [Function],
                                "activeBorderColor": [Function],
                                "activeColor": [Function],
                                "backgroundColor": [Function],
                                "borderColor": [Function],
                                "boxShadowColor": [Function],
                                "focusBackgroundColor": [Function],
                                "focusBorderColor": [Function],
                                "focusColor": [Function],
                                "hoverBackgroundColor": [Function],
                                "hoverBorderColor": [Function],
                                "hoverColor": [Function],
                                "textColor": [Function],
                                "type": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "shared__TriggerReplacementVariableSuggestionsButton-lzs0hf-7",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverBackgroundColor="#fff"
                          hoverBorderColor="#888"
                          hoverColor="#000"
                          onClick={[Function]}
                          textColor="#555"
                          type="button"
                        >
                          <button
                            className="c19"
                            onClick={[Function]}
                            type="button"
                          >
                            <SvgIcon
                              color="currentColor"
                              icon="plus-circle"
                              size="16px"
                            >
                              <SvgIcon__StyledSvg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="16px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <StyledComponent
                                  aria-hidden={true}
                                  className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                  fill="currentColor"
                                  focusable="false"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                        "isStatic": false,
                                        "lastClassName": "c15",
                                        "rules": Array [
                                          "width:",
                                          [Function],
                                          ";height:",
                                          [Function],
                                          ";flex:none;",
                                        ],
                                      },
                                      "displayName": "SvgIcon__StyledSvg",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                      "target": "svg",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  role="img"
                                  size="16px"
                                  viewBox="0 0 1792 1792"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="yoast-svg-icon yoast-svg-icon-plus-circle c15"
                                    fill="currentColor"
                                    focusable="false"
                                    role="img"
                                    size="16px"
                                    viewBox="0 0 1792 1792"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M1344 960v-128q0-26-19-45t-45-19h-256v-256q0-26-19-45t-45-19h-128q-26 0-45 19t-19 45v256h-256q-26 0-45 19t-19 45v128q0 26 19 45t45 19h256v256q0 26 19 45t45 19h128q26 0 45-19t19-45v-256h256q26 0 45-19t19-45zm320-64q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"
                                    />
                                  </svg>
                                </StyledComponent>
                              </SvgIcon__StyledSvg>
                            </SvgIcon>
                            Insert snippet variable
                          </button>
                        </StyledComponent>
                      </shared__TriggerReplacementVariableSuggestionsButton>
                      <shared
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {},
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared-lzs0hf-1",
                                "isStatic": false,
                                "lastClassName": "dMDPhh",
                                "rules": Array [
                                  "flex:0 1 100%;border:1px solid ",
                                  [Function],
                                  ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                  [Function],
                                  ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                  ".public-DraftStyleDefault-block{line-height:24px;}",
                                  "&::before{display:block;position:absolute;top:-1px;",
                                  [Function],
                                  ":-25px;width:24px;height:24px;background-image:url( ",
                                  [Function],
                                  " );background-size:25px;content:\\"\\";}",
                                ],
                              },
                              "displayName": "shared",
                              "foldedComponentIds": Array [
                                "shared__InputContainer-lzs0hf-0",
                                "shared__TitleInputContainer-lzs0hf-2",
                              ],
                              "render": [Function],
                              "styledComponentId": "shared-lzs0hf-1",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isActive={false}
                          isHovered={false}
                          onClick={[Function]}
                        >
                          <div
                            className="c20"
                            onClick={[Function]}
                          >
                            <ReplacementVariableEditorStandalone
                              ariaLabelledBy="21"
                              content="Test title"
                              fieldId="snippet-editor-field-title"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              recommendedReplacementVariables={Array []}
                              replacementVariables={Array []}
                            >
                              <div />
                            </ReplacementVariableEditorStandalone>
                          </div>
                        </StyledComponent>
                      </shared>
                    </ReplacementVariableEditor>
                    <ProgressBar
                      aria-hidden="true"
                      backgroundColor="#f7f7f7"
                      borderColor="#ddd"
                      max={600}
                      progressColor="#dc3232"
                      value={0}
                    >
                      <StyledComponent
                        aria-hidden="true"
                        backgroundColor="#f7f7f7"
                        borderColor="#ddd"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ProgressBar-sc-9g9yx6-0",
                              "isStatic": false,
                              "lastClassName": "c25",
                              "rules": Array [
                                "box-sizing:border-box;width:100%;height:8px;display:block;margin-top:8px;appearance:none;background-color:",
                                [Function],
                                ";border:1px solid ",
                                [Function],
                                ";::-webkit-progress-bar{background-color:",
                                [Function],
                                ";}::-webkit-progress-value{background-color:",
                                [Function],
                                ";transition:width 250ms;}::-moz-progress-bar{background-color:",
                                [Function],
                                ";}::-ms-fill{background-color:",
                                [Function],
                                ";border:0;}",
                              ],
                            },
                            "defaultProps": Object {
                              "aria-hidden": "true",
                              "backgroundColor": "#f7f7f7",
                              "borderColor": "#ddd",
                              "max": 1,
                              "progressColor": "#7ad03a",
                              "value": 0,
                            },
                            "displayName": "ProgressBar",
                            "foldedComponentIds": Array [],
                            "propTypes": Object {
                              "aria-hidden": [Function],
                              "backgroundColor": [Function],
                              "borderColor": [Function],
                              "max": [Function],
                              "progressColor": [Function],
                              "value": [Function],
                            },
                            "render": [Function],
                            "styledComponentId": "ProgressBar-sc-9g9yx6-0",
                            "target": "progress",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        max={600}
                        progressColor="#dc3232"
                        value={0}
                      >
                        <progress
                          aria-hidden="true"
                          className="c21"
                          max={600}
                          value={0}
                        />
                      </StyledComponent>
                    </ProgressBar>
                  </div>
                </StyledComponent>
              </shared__FormSection>
              <shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "shared__FormSection-lzs0hf-4",
                        "isStatic": true,
                        "lastClassName": "c17",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "shared__FormSection-lzs0hf-4",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="c17"
                  >
                    <shared__SimulatedLabel
                      id="snippet-editor-field-20-slug"
                      onClick={[Function]}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "shared__SimulatedLabel-lzs0hf-6",
                              "isStatic": true,
                              "lastClassName": "c18",
                              "rules": Array [
                                "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                              ],
                            },
                            "displayName": "shared__SimulatedLabel",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "shared__SimulatedLabel-lzs0hf-6",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        id="snippet-editor-field-20-slug"
                        onClick={[Function]}
                      >
                        <div
                          className="c18"
                          id="snippet-editor-field-20-slug"
                          onClick={[Function]}
                        >
                          Slug
                        </div>
                      </StyledComponent>
                    </shared__SimulatedLabel>
                    <shared
                      isActive={false}
                      isHovered={false}
                      onClick={[Function]}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [
                              Object {},
                            ],
                            "componentStyle": ComponentStyle {
                              "componentId": "shared-lzs0hf-1",
                              "isStatic": false,
                              "lastClassName": "c22",
                              "rules": Array [
                                "flex:0 1 100%;border:1px solid ",
                                [Function],
                                ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                [Function],
                                ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                "&::before{display:block;position:absolute;top:-1px;",
                                [Function],
                                ":-25px;width:24px;height:24px;background-image:url( ",
                                [Function],
                                " );background-size:25px;content:\\"\\";}",
                              ],
                            },
                            "displayName": "shared",
                            "foldedComponentIds": Array [
                              "shared__InputContainer-lzs0hf-0",
                            ],
                            "render": [Function],
                            "styledComponentId": "shared-lzs0hf-1",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <div
                          className="c22"
                          onClick={[Function]}
                        >
                          <SnippetEditorFields__SlugInput
                            aria-labelledby="snippet-editor-field-20-slug"
                            id="snippet-editor-field-slug"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            value="test-slug"
                          >
                            <StyledComponent
                              aria-labelledby="snippet-editor-field-20-slug"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "SnippetEditorFields__SlugInput-sc-1ioqi3y-0",
                                    "isStatic": true,
                                    "lastClassName": "c23",
                                    "rules": Array [
                                      "border:none;width:100%;height:inherit;line-height:inherit;font-family:inherit;font-size:inherit;color:inherit;&:focus{outline:0;}",
                                    ],
                                  },
                                  "displayName": "SnippetEditorFields__SlugInput",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "SnippetEditorFields__SlugInput-sc-1ioqi3y-0",
                                  "target": "input",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={[Function]}
                              id="snippet-editor-field-slug"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              value="test-slug"
                            >
                              <input
                                aria-labelledby="snippet-editor-field-20-slug"
                                className="c23"
                                id="snippet-editor-field-slug"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                value="test-slug"
                              />
                            </StyledComponent>
                          </SnippetEditorFields__SlugInput>
                        </div>
                      </StyledComponent>
                    </shared>
                  </div>
                </StyledComponent>
              </shared__FormSection>
              <shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "shared__FormSection-lzs0hf-4",
                        "isStatic": true,
                        "lastClassName": "c17",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "shared__FormSection-lzs0hf-4",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="c17"
                  >
                    <ReplacementVariableEditor
                      content="Test description, %%replacement_variable%%"
                      editorRef={[Function]}
                      fieldId="snippet-editor-field-description"
                      isActive={false}
                      isHovered={false}
                      label="Meta description"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      placeholder="Modify your meta description by editing it right here"
                      recommendedReplacementVariables={Array []}
                      replacementVariables={Array []}
                      type="description"
                      withCaret={true}
                    >
                      <shared__SimulatedLabel
                        id="22"
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared__SimulatedLabel-lzs0hf-6",
                                "isStatic": true,
                                "lastClassName": "c18",
                                "rules": Array [
                                  "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                                ],
                              },
                              "displayName": "shared__SimulatedLabel",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "shared__SimulatedLabel-lzs0hf-6",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          id="22"
                          onClick={[Function]}
                        >
                          <div
                            className="c18"
                            id="22"
                            onClick={[Function]}
                          >
                            Meta description
                          </div>
                        </StyledComponent>
                      </shared__SimulatedLabel>
                      <shared__TriggerReplacementVariableSuggestionsButton
                        activeBackgroundColor="#f7f7f7"
                        activeBorderColor="#888"
                        activeColor="#000"
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        focusBackgroundColor="#fff"
                        focusBorderColor="#0066cd"
                        focusColor="#000"
                        hoverBackgroundColor="#fff"
                        hoverBorderColor="#888"
                        hoverColor="#000"
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <StyledComponent
                          activeBackgroundColor="#f7f7f7"
                          activeBorderColor="#888"
                          activeColor="#000"
                          backgroundColor="#f7f7f7"
                          borderColor="#ccc"
                          boxShadowColor="#ccc"
                          focusBackgroundColor="#fff"
                          focusBorderColor="#0066cd"
                          focusColor="#000"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared__TriggerReplacementVariableSuggestionsButton-lzs0hf-7",
                                "isStatic": false,
                                "lastClassName": "c19",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";background:",
                                  [Function],
                                  ";box-shadow:0 1px 0 ",
                                  [Function],
                                  ";",
                                  "&:active{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";box-shadow:inset 0 2px 5px -3px ",
                                  "rgba( 0, 0, 0, 0.5 )",
                                  ";}",
                                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                                  [Function],
                                  ";color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";box-shadow:0 0 3px ",
                                  "rgba( 8, 74, 103, 0.8 )",
                                  ";}",
                                  "&:hover{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";}",
                                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                                  "1px",
                                  ";border-style:solid;margin:0;padding:",
                                  "4px",
                                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                                  [Function],
                                  ";overflow:visible;min-height:",
                                  "32px",
                                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                                  "22px",
                                  ";}}",
                                  "box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;padding-left:8px;height:33px;border:1px solid #dbdbdb;font-size:13px;& svg{",
                                  [Function],
                                  ":7px;fill:",
                                  "#555",
                                  ";}",
                                ],
                              },
                              "defaultProps": Object {
                                "activeBackgroundColor": "#f7f7f7",
                                "activeBorderColor": "#888",
                                "activeColor": "#000",
                                "backgroundColor": "#f7f7f7",
                                "borderColor": "#ccc",
                                "boxShadowColor": "#ccc",
                                "focusBackgroundColor": "#fff",
                                "focusBorderColor": "#0066cd",
                                "focusColor": "#000",
                                "hoverBackgroundColor": "#fff",
                                "hoverBorderColor": "#888",
                                "hoverColor": "#000",
                                "textColor": "#555",
                                "type": "button",
                              },
                              "displayName": "shared__TriggerReplacementVariableSuggestionsButton",
                              "foldedComponentIds": Array [
                                "Button__BaseButton-sc-32rbq-4",
                                "Button-sc-32rbq-3",
                                "Button-sc-32rbq-1",
                                "Button-sc-32rbq-2",
                                "Button-sc-32rbq-0",
                              ],
                              "propTypes": Object {
                                "activeBackgroundColor": [Function],
                                "activeBorderColor": [Function],
                                "activeColor": [Function],
                                "backgroundColor": [Function],
                                "borderColor": [Function],
                                "boxShadowColor": [Function],
                                "focusBackgroundColor": [Function],
                                "focusBorderColor": [Function],
                                "focusColor": [Function],
                                "hoverBackgroundColor": [Function],
                                "hoverBorderColor": [Function],
                                "hoverColor": [Function],
                                "textColor": [Function],
                                "type": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "shared__TriggerReplacementVariableSuggestionsButton-lzs0hf-7",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverBackgroundColor="#fff"
                          hoverBorderColor="#888"
                          hoverColor="#000"
                          onClick={[Function]}
                          textColor="#555"
                          type="button"
                        >
                          <button
                            className="c19"
                            onClick={[Function]}
                            type="button"
                          >
                            <SvgIcon
                              color="currentColor"
                              icon="plus-circle"
                              size="16px"
                            >
                              <SvgIcon__StyledSvg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="16px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <StyledComponent
                                  aria-hidden={true}
                                  className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                  fill="currentColor"
                                  focusable="false"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                        "isStatic": false,
                                        "lastClassName": "c15",
                                        "rules": Array [
                                          "width:",
                                          [Function],
                                          ";height:",
                                          [Function],
                                          ";flex:none;",
                                        ],
                                      },
                                      "displayName": "SvgIcon__StyledSvg",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                      "target": "svg",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  role="img"
                                  size="16px"
                                  viewBox="0 0 1792 1792"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="yoast-svg-icon yoast-svg-icon-plus-circle c15"
                                    fill="currentColor"
                                    focusable="false"
                                    role="img"
                                    size="16px"
                                    viewBox="0 0 1792 1792"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M1344 960v-128q0-26-19-45t-45-19h-256v-256q0-26-19-45t-45-19h-128q-26 0-45 19t-19 45v256h-256q-26 0-45 19t-19 45v128q0 26 19 45t45 19h256v256q0 26 19 45t45 19h128q26 0 45-19t19-45v-256h256q26 0 45-19t19-45zm320-64q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"
                                    />
                                  </svg>
                                </StyledComponent>
                              </SvgIcon__StyledSvg>
                            </SvgIcon>
                            Insert snippet variable
                          </button>
                        </StyledComponent>
                      </shared__TriggerReplacementVariableSuggestionsButton>
                      <shared
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {},
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared-lzs0hf-1",
                                "isStatic": false,
                                "lastClassName": "c24",
                                "rules": Array [
                                  "flex:0 1 100%;border:1px solid ",
                                  [Function],
                                  ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                  [Function],
                                  ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                  "min-height:72px;padding:2px 6px;line-height:24px;.public-DraftEditorPlaceholder-root{color:",
                                  "#616161",
                                  ";}.public-DraftEditorPlaceholder-hasFocus{color:",
                                  "#616161",
                                  ";}",
                                  "&::before{display:block;position:absolute;top:-1px;",
                                  [Function],
                                  ":-25px;width:24px;height:24px;background-image:url( ",
                                  [Function],
                                  " );background-size:25px;content:\\"\\";}",
                                ],
                              },
                              "displayName": "shared",
                              "foldedComponentIds": Array [
                                "shared__InputContainer-lzs0hf-0",
                                "shared__DescriptionInputContainer-lzs0hf-3",
                              ],
                              "render": [Function],
                              "styledComponentId": "shared-lzs0hf-1",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isActive={false}
                          isHovered={false}
                          onClick={[Function]}
                        >
                          <div
                            className="c24"
                            onClick={[Function]}
                          >
                            <ReplacementVariableEditorStandalone
                              ariaLabelledBy="22"
                              content="Test description, %%replacement_variable%%"
                              fieldId="snippet-editor-field-description"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              placeholder="Modify your meta description by editing it right here"
                              recommendedReplacementVariables={Array []}
                              replacementVariables={Array []}
                            >
                              <div />
                            </ReplacementVariableEditorStandalone>
                          </div>
                        </StyledComponent>
                      </shared>
                    </ReplacementVariableEditor>
                    <ProgressBar
                      aria-hidden="true"
                      backgroundColor="#f7f7f7"
                      borderColor="#ddd"
                      max={156}
                      progressColor="#ee7c1b"
                      value={42}
                    >
                      <StyledComponent
                        aria-hidden="true"
                        backgroundColor="#f7f7f7"
                        borderColor="#ddd"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ProgressBar-sc-9g9yx6-0",
                              "isStatic": false,
                              "lastClassName": "c25",
                              "rules": Array [
                                "box-sizing:border-box;width:100%;height:8px;display:block;margin-top:8px;appearance:none;background-color:",
                                [Function],
                                ";border:1px solid ",
                                [Function],
                                ";::-webkit-progress-bar{background-color:",
                                [Function],
                                ";}::-webkit-progress-value{background-color:",
                                [Function],
                                ";transition:width 250ms;}::-moz-progress-bar{background-color:",
                                [Function],
                                ";}::-ms-fill{background-color:",
                                [Function],
                                ";border:0;}",
                              ],
                            },
                            "defaultProps": Object {
                              "aria-hidden": "true",
                              "backgroundColor": "#f7f7f7",
                              "borderColor": "#ddd",
                              "max": 1,
                              "progressColor": "#7ad03a",
                              "value": 0,
                            },
                            "displayName": "ProgressBar",
                            "foldedComponentIds": Array [],
                            "propTypes": Object {
                              "aria-hidden": [Function],
                              "backgroundColor": [Function],
                              "borderColor": [Function],
                              "max": [Function],
                              "progressColor": [Function],
                              "value": [Function],
                            },
                            "render": [Function],
                            "styledComponentId": "ProgressBar-sc-9g9yx6-0",
                            "target": "progress",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        max={156}
                        progressColor="#ee7c1b"
                        value={42}
                      >
                        <progress
                          aria-hidden="true"
                          className="c25"
                          max={156}
                          value={42}
                        />
                      </StyledComponent>
                    </ProgressBar>
                  </div>
                </StyledComponent>
              </shared__FormSection>
            </section>
          </StyledComponent>
        </shared__StyledEditor>
      </SnippetEditorFields>
      <SnippetEditor__CloseEditorButton
        activeBackgroundColor="#f7f7f7"
        activeBorderColor="#888"
        activeColor="#000"
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        focusBackgroundColor="#fff"
        focusBorderColor="#0066cd"
        focusColor="#000"
        hoverBackgroundColor="#fff"
        hoverBorderColor="#888"
        hoverColor="#000"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <StyledComponent
          activeBackgroundColor="#f7f7f7"
          activeBorderColor="#888"
          activeColor="#000"
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          focusBackgroundColor="#fff"
          focusBorderColor="#0066cd"
          focusColor="#000"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "SnippetEditor__CloseEditorButton-sc-144bmm3-2",
                "isStatic": false,
                "lastClassName": "c26",
                "rules": Array [
                  "color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";background:",
                  [Function],
                  ";box-shadow:0 1px 0 ",
                  [Function],
                  ";",
                  "&:active{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";box-shadow:inset 0 2px 5px -3px ",
                  "rgba( 0, 0, 0, 0.5 )",
                  ";}",
                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                  [Function],
                  ";color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";box-shadow:0 0 3px ",
                  "rgba( 8, 74, 103, 0.8 )",
                  ";}",
                  "&:hover{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";}",
                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                  "1px",
                  ";border-style:solid;margin:0;padding:",
                  "4px",
                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                  [Function],
                  ";overflow:visible;min-height:",
                  "32px",
                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                  "22px",
                  ";}}",
                  "height:33px;border:1px solid #dbdbdb;box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;",
                  "margin-top:24px;",
                ],
              },
              "defaultProps": Object {
                "activeBackgroundColor": "#f7f7f7",
                "activeBorderColor": "#888",
                "activeColor": "#000",
                "backgroundColor": "#f7f7f7",
                "borderColor": "#ccc",
                "boxShadowColor": "#ccc",
                "focusBackgroundColor": "#fff",
                "focusBorderColor": "#0066cd",
                "focusColor": "#000",
                "hoverBackgroundColor": "#fff",
                "hoverBorderColor": "#888",
                "hoverColor": "#000",
                "textColor": "#555",
                "type": "button",
              },
              "displayName": "SnippetEditor__CloseEditorButton",
              "foldedComponentIds": Array [
                "Button__BaseButton-sc-32rbq-4",
                "Button-sc-32rbq-3",
                "Button-sc-32rbq-1",
                "Button-sc-32rbq-2",
                "Button-sc-32rbq-0",
                "SnippetEditor__SnippetEditorButton-sc-144bmm3-0",
              ],
              "propTypes": Object {
                "activeBackgroundColor": [Function],
                "activeBorderColor": [Function],
                "activeColor": [Function],
                "backgroundColor": [Function],
                "borderColor": [Function],
                "boxShadowColor": [Function],
                "focusBackgroundColor": [Function],
                "focusBorderColor": [Function],
                "focusColor": [Function],
                "hoverBackgroundColor": [Function],
                "hoverBorderColor": [Function],
                "hoverColor": [Function],
                "textColor": [Function],
                "type": [Function],
              },
              "render": [Function],
              "styledComponentId": "SnippetEditor__CloseEditorButton-sc-144bmm3-2",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          hoverBackgroundColor="#fff"
          hoverBorderColor="#888"
          hoverColor="#000"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <button
            className="c26"
            onClick={[Function]}
            type="button"
          >
            Close snippet editor
          </button>
        </StyledComponent>
      </SnippetEditor__CloseEditorButton>
    </div>
  </ErrorBoundary>
</SnippetEditor>
`;

exports[`SnippetEditor calls callbacks when the editors are focused or changed 2`] = `
.c21 {
  box-sizing: border-box;
  width: 100%;
  height: 8px;
  display: block;
  margin-top: 8px;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background-color: #f7f7f7;
  border: 1px solid #ddd;
}

.c21::-webkit-progress-bar {
  background-color: #f7f7f7;
}

.c21::-webkit-progress-value {
  background-color: #dc3232;
  -webkit-transition: width 250ms;
  transition: width 250ms;
}

.c21::-moz-progress-bar {
  background-color: #dc3232;
}

.c21::-ms-fill {
  background-color: #dc3232;
  border: 0;
}

.c25 {
  box-sizing: border-box;
  width: 100%;
  height: 8px;
  display: block;
  margin-top: 8px;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background-color: #f7f7f7;
  border: 1px solid #ddd;
}

.c25::-webkit-progress-bar {
  background-color: #f7f7f7;
}

.c25::-webkit-progress-value {
  background-color: #ee7c1b;
  -webkit-transition: width 250ms;
  transition: width 250ms;
}

.c25::-moz-progress-bar {
  background-color: #ee7c1b;
}

.c25::-ms-fill {
  background-color: #ee7c1b;
  border: 0;
}

.c17 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  margin: 24px 0 0 0;
}

.c16 {
  padding: 0 20px;
}

.c18 {
  -webkit-flex: 1 1 200px;
  -ms-flex: 1 1 200px;
  flex: 1 1 200px;
  min-width: 200px;
  cursor: pointer;
  font-size: 16px;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin: 4px 0;
}

.c19 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  padding-left: 8px;
  height: 33px;
  border: 1px solid #dbdbdb;
  font-size: 13px;
}

.c19:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c19::-moz-focus-inner {
  border-width: 0;
}

.c19:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c19:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c19 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c19 svg {
  margin-right: 7px;
  fill: #555;
}

.c0 {
  border-bottom: 1px hidden #fff;
  border-radius: 2px;
  box-shadow: 0 1px 2px rgba(0,0,0,.2);
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  max-width: 600px;
  box-sizing: border-box;
  font-size: 14px;
}

.c2 {
  cursor: pointer;
  position: relative;
}

.c3 {
  color: #1e0fbe;
  -webkit-text-decoration: none;
  text-decoration: none;
  font-size: 18px;
  line-height: 1.2;
  font-weight: normal;
  margin: 0;
  display: inline-block;
  overflow: hidden;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c4 {
  display: inline-block;
  font-size: 16px;
  line-height: 1.2em;
  max-height: 2.4em;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c5 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  white-space: nowrap;
  font-size: 14px;
}

.c6 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  white-space: nowrap;
  font-size: 14px;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 100%;
}

.c8 {
  color: #545454;
  cursor: pointer;
  position: relative;
  max-width: 600px;
  font-size: 13px;
  font-size: 14px;
  line-height: 20px;
}

.c1 {
  padding: 8px 16px;
}

.c7 {
  border: 0;
  border-bottom: 1px solid #DFE1E5;
  margin: 0;
}

.c23 {
  border: none;
  width: 100%;
  height: inherit;
  line-height: inherit;
  font-family: inherit;
  font-size: inherit;
  color: inherit;
}

.c23:focus {
  outline: 0;
}

.c20 {
  -webkit-flex: 0 1 100%;
  -ms-flex: 0 1 100%;
  flex: 0 1 100%;
  border: 1px solid #ddd;
  padding: 3px 5px;
  box-sizing: border-box;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  cursor: text;
}

.c20 .public-DraftStyleDefault-block {
  line-height: 24px;
}

.c20::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width%3D%221792%22%20height%3D%221792%22%20viewBox%3D%220%200%201792%201792%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20fill%3D%22transparent%22%20d%3D%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20%2F%3E%3C%2Fsvg%3E );
  background-size: 25px;
  content: "";
}

.c22 {
  -webkit-flex: 0 1 100%;
  -ms-flex: 0 1 100%;
  flex: 0 1 100%;
  border: 1px solid #ddd;
  padding: 3px 5px;
  box-sizing: border-box;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  cursor: text;
}

.c22::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width%3D%221792%22%20height%3D%221792%22%20viewBox%3D%220%200%201792%201792%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20fill%3D%22transparent%22%20d%3D%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20%2F%3E%3C%2Fsvg%3E );
  background-size: 25px;
  content: "";
}

.c24 {
  -webkit-flex: 0 1 100%;
  -ms-flex: 0 1 100%;
  flex: 0 1 100%;
  border: 1px solid #ddd;
  padding: 3px 5px;
  box-sizing: border-box;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  cursor: text;
  min-height: 72px;
  padding: 2px 6px;
  line-height: 24px;
}

.c24 .public-DraftEditorPlaceholder-root {
  color: #616161;
}

.c24 .public-DraftEditorPlaceholder-hasFocus {
  color: #616161;
}

.c24::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width%3D%221792%22%20height%3D%221792%22%20viewBox%3D%220%200%201792%201792%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20fill%3D%22transparent%22%20d%3D%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20%2F%3E%3C%2Fsvg%3E );
  background-size: 25px;
  content: "";
}

.c10 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: #555;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 3px 0 0 3px;
}

.c10:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c10::-moz-focus-inner {
  border-width: 0;
}

.c10:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c10:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c10 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c10:hover,
.c10:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
  box-shadow: none;
}

.c12 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: transparent;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 0 3px 3px 0;
}

.c12:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c12::-moz-focus-inner {
  border-width: 0;
}

.c12:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c12:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c12 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c12:hover,
.c12:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
  box-shadow: none;
}

.c9 {
  display: inline-block;
  margin-top: 10px;
  border: 1px solid #dbdbdb;
  border-radius: 4px;
  background-color: #f7f7f7;
  vertical-align: top;
}

.c14 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin: 10px 0 0 4px;
  fill: #555;
  padding-left: 8px;
}

.c14:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c14::-moz-focus-inner {
  border-width: 0;
}

.c14:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c14:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c14 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c14 svg {
  margin-right: 7px;
}

.c26 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin-top: 24px;
}

.c26:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c26::-moz-focus-inner {
  border-width: 0;
}

.c26:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c26:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c26 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c11 {
  width: 22px;
  height: 22px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c13 {
  width: 18px;
  height: 18px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c15 {
  width: 16px;
  height: 16px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c19::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c10::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c12::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c14::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c26::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

<SnippetEditor
  baseUrl="http://example.org/"
  data={
    Object {
      "description": "Test description, %%replacement_variable%%",
      "slug": "test-slug",
      "title": "Test title",
    }
  }
  date=""
  descriptionEditorFieldPlaceholder=""
  descriptionLengthProgress={
    Object {
      "actual": 0,
      "max": 156,
      "score": 0,
    }
  }
  hasPaperStyle={true}
  locale="en"
  mapEditorDataToPreview={null}
  mode="mobile"
  onChange={[MockFunction]}
  onChangeAnalysisData={[Function]}
  recommendedReplacementVariables={Array []}
  replacementVariables={Array []}
  showCloseButton={true}
  titleLengthProgress={
    Object {
      "actual": 0,
      "max": 600,
      "score": 0,
    }
  }
  wordsToHighlight={Array []}
>
  <ErrorBoundary>
    <div>
      <SnippetPreview
        activeField={null}
        breadcrumbs={null}
        date=""
        description="Test description, %%replacement_variable%%"
        hoveredField={null}
        isAmp={false}
        keyword=""
        locale="en"
        mode="mobile"
        onHover={[Function]}
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        title="Test title"
        url="example.org/test-slug"
        wordsToHighlight={Array []}
      >
        <section>
          <SnippetPreview__MobileContainer
            padding={20}
            width={640}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "SnippetPreview__MobileContainer-sc-1hxg8jo-1",
                    "isStatic": true,
                    "lastClassName": "c0",
                    "rules": Array [
                      "border-bottom:1px hidden #fff;border-radius:2px;box-shadow:0 1px 2px rgba(0,0,0,.2);font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;max-width:",
                      "600",
                      "px;box-sizing:border-box;font-size:14px;",
                    ],
                  },
                  "displayName": "SnippetPreview__MobileContainer",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "SnippetPreview__MobileContainer-sc-1hxg8jo-1",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              padding={20}
              width={640}
            >
              <div
                className="c0"
                width={640}
              >
                <SnippetPreview__MobilePartContainer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__MobilePartContainer-sc-1hxg8jo-12",
                          "isStatic": true,
                          "lastClassName": "c1",
                          "rules": Array [
                            "padding:8px 16px;",
                          ],
                        },
                        "displayName": "SnippetPreview__MobilePartContainer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__MobilePartContainer-sc-1hxg8jo-12",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="c1"
                    >
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          SEO title preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__BaseTitle
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__BaseTitle-sc-1hxg8jo-2",
                                "isStatic": true,
                                "lastClassName": "c2",
                                "rules": Array [
                                  "cursor:pointer;position:relative;",
                                ],
                              },
                              "displayName": "SnippetPreview__BaseTitle",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__BaseTitle-sc-1hxg8jo-2",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                        >
                          <div
                            className="c2"
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                          >
                            <SnippetPreview__TitleBounded>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__TitleBounded-sc-1hxg8jo-5",
                                      "isStatic": true,
                                      "lastClassName": "c3",
                                      "rules": Array [
                                        "color:",
                                        "#1e0fbe",
                                        ";text-decoration:none;font-size:18px;line-height:1.2;font-weight:normal;margin:0;display:inline-block;overflow:hidden;max-width:",
                                        "600",
                                        "px;vertical-align:top;text-overflow:ellipsis;",
                                        "max-width:",
                                        "600",
                                        "px;vertical-align:top;text-overflow:ellipsis;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__TitleBounded",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__Title-sc-1hxg8jo-4",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__TitleBounded-sc-1hxg8jo-5",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="c3"
                                >
                                  <SnippetPreview__TitleUnboundedMobile>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "SnippetPreview__TitleUnboundedMobile-sc-1hxg8jo-7",
                                            "isStatic": true,
                                            "lastClassName": "c4",
                                            "rules": Array [
                                              "display:inline-block;font-size:16px;line-height:1.2em;max-height:2.4em;overflow:hidden;text-overflow:ellipsis;",
                                            ],
                                          },
                                          "displayName": "SnippetPreview__TitleUnboundedMobile",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "SnippetPreview__TitleUnboundedMobile-sc-1hxg8jo-7",
                                          "target": "span",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={[Function]}
                                    >
                                      <span
                                        className="c4"
                                      >
                                        Test title
                                      </span>
                                    </StyledComponent>
                                  </SnippetPreview__TitleUnboundedMobile>
                                </div>
                              </StyledComponent>
                            </SnippetPreview__TitleBounded>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__BaseTitle>
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          Url preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__BaseUrl>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__BaseUrl-sc-1hxg8jo-8",
                                "isStatic": true,
                                "lastClassName": "c5",
                                "rules": Array [
                                  "display:inline-block;color:",
                                  "#006621",
                                  ";cursor:pointer;position:relative;max-width:90%;white-space:nowrap;font-size:14px;",
                                ],
                              },
                              "displayName": "SnippetPreview__BaseUrl",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__BaseUrl-sc-1hxg8jo-8",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <div
                            className="c5"
                          >
                            <SnippetPreview__BaseUrlOverflowContainer
                              onMouseEnter={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__BaseUrlOverflowContainer-sc-1hxg8jo-9",
                                      "isStatic": true,
                                      "lastClassName": "c6",
                                      "rules": Array [
                                        "display:inline-block;color:",
                                        "#006621",
                                        ";cursor:pointer;position:relative;max-width:90%;white-space:nowrap;font-size:14px;",
                                        "overflow:hidden;text-overflow:ellipsis;max-width:100%;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__BaseUrlOverflowContainer",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__BaseUrl-sc-1hxg8jo-8",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__BaseUrlOverflowContainer-sc-1hxg8jo-9",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                onMouseEnter={[Function]}
                                onMouseLeave={[Function]}
                                onMouseUp={[Function]}
                              >
                                <div
                                  className="c6"
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseUp={[Function]}
                                >
                                  example.org â€º test-slug
                                </div>
                              </StyledComponent>
                            </SnippetPreview__BaseUrlOverflowContainer>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__BaseUrl>
                    </div>
                  </StyledComponent>
                </SnippetPreview__MobilePartContainer>
                <SnippetPreview__Separator>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__Separator-sc-1hxg8jo-16",
                          "isStatic": true,
                          "lastClassName": "c7",
                          "rules": Array [
                            "border:0;border-bottom:1px solid #DFE1E5;margin:0;",
                          ],
                        },
                        "displayName": "SnippetPreview__Separator",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__Separator-sc-1hxg8jo-16",
                        "target": "hr",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <hr
                      className="c7"
                    />
                  </StyledComponent>
                </SnippetPreview__Separator>
                <SnippetPreview__MobilePartContainer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__MobilePartContainer-sc-1hxg8jo-12",
                          "isStatic": true,
                          "lastClassName": "c1",
                          "rules": Array [
                            "padding:8px 16px;",
                          ],
                        },
                        "displayName": "SnippetPreview__MobilePartContainer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__MobilePartContainer-sc-1hxg8jo-12",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="c1"
                    >
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          Meta description preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__MobileDescription
                        isDescriptionPlaceholder={false}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__MobileDescription-sc-1hxg8jo-11",
                                "isStatic": false,
                                "lastClassName": "c8",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";cursor:pointer;position:relative;max-width:",
                                  "600",
                                  "px;font-size:13px;",
                                  "font-size:14px;line-height:20px;",
                                ],
                              },
                              "displayName": "SnippetPreview__MobileDescription",
                              "foldedComponentIds": Array [
                                "SnippetPreview__DesktopDescription-sc-1hxg8jo-10",
                              ],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__MobileDescription-sc-1hxg8jo-11",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isDescriptionPlaceholder={false}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                        >
                          <div
                            className="c8"
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                          >
                            <SnippetPreview__MobileDescription
                              isDescriptionPlaceholder={false}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__MobileDescription-sc-1hxg8jo-11",
                                      "isStatic": false,
                                      "lastClassName": "c8",
                                      "rules": Array [
                                        "color:",
                                        [Function],
                                        ";cursor:pointer;position:relative;max-width:",
                                        "600",
                                        "px;font-size:13px;",
                                        "font-size:14px;line-height:20px;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__MobileDescription",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__DesktopDescription-sc-1hxg8jo-10",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__MobileDescription-sc-1hxg8jo-11",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={[Function]}
                                isDescriptionPlaceholder={false}
                              >
                                <div
                                  className="c8"
                                >
                                  Test description, %%replacement_variable%%
                                </div>
                              </StyledComponent>
                            </SnippetPreview__MobileDescription>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__MobileDescription>
                    </div>
                  </StyledComponent>
                </SnippetPreview__MobilePartContainer>
              </div>
            </StyledComponent>
          </SnippetPreview__MobileContainer>
        </section>
      </SnippetPreview>
      <ModeSwitcher
        active="mobile"
        onChange={[Function]}
      >
        <ModeSwitcher__Switcher>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "ModeSwitcher__Switcher-sc-9lbpr3-3",
                  "isStatic": true,
                  "lastClassName": "c9",
                  "rules": Array [
                    "display:inline-block;margin-top:10px;border:1px solid #dbdbdb;border-radius:4px;background-color:#f7f7f7;vertical-align:top;",
                  ],
                },
                "displayName": "ModeSwitcher__Switcher",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModeSwitcher__Switcher-sc-9lbpr3-3",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="c9"
            >
              <ModeSwitcher__MobileButton
                activeBackgroundColor="#f7f7f7"
                activeBorderColor="#888"
                activeColor="#000"
                aria-pressed={true}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                focusBackgroundColor="#fff"
                focusBorderColor="#0066cd"
                focusColor="#000"
                hoverBackgroundColor="#fff"
                hoverBorderColor="#888"
                hoverColor="#000"
                isActive={true}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <StyledComponent
                  activeBackgroundColor="#f7f7f7"
                  activeBorderColor="#888"
                  activeColor="#000"
                  aria-pressed={true}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  focusBackgroundColor="#fff"
                  focusBorderColor="#0066cd"
                  focusColor="#000"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "ModeSwitcher__MobileButton-sc-9lbpr3-1",
                        "isStatic": false,
                        "lastClassName": "c10",
                        "rules": Array [
                          "color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";box-shadow:0 1px 0 ",
                          [Function],
                          ";",
                          "&:active{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";box-shadow:inset 0 2px 5px -3px ",
                          "rgba( 0, 0, 0, 0.5 )",
                          ";}",
                          "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                          [Function],
                          ";color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";box-shadow:0 0 3px ",
                          "rgba( 8, 74, 103, 0.8 )",
                          ";}",
                          "&:hover{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";}",
                          "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                          "1px",
                          ";border-style:solid;margin:0;padding:",
                          "4px",
                          " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                          [Function],
                          ";overflow:visible;min-height:",
                          "32px",
                          ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                          "22px",
                          ";}}",
                          "border:none;border-bottom:4px solid transparent;width:31px;height:31px;border-color:",
                          [Function],
                          ";color:",
                          "#555",
                          ";transition:0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;transition-property:border-color;&:hover,&:focus{background-color:",
                          "#fff",
                          ";border:none;border-bottom:4px solid transparent;border-color:",
                          "#1e8cbe",
                          ";color:",
                          "#1e8cbe",
                          ";box-shadow:none;}",
                          "border-radius:3px 0 0 3px;",
                        ],
                      },
                      "defaultProps": Object {
                        "activeBackgroundColor": "#f7f7f7",
                        "activeBorderColor": "#888",
                        "activeColor": "#000",
                        "backgroundColor": "#f7f7f7",
                        "borderColor": "#ccc",
                        "boxShadowColor": "#ccc",
                        "focusBackgroundColor": "#fff",
                        "focusBorderColor": "#0066cd",
                        "focusColor": "#000",
                        "hoverBackgroundColor": "#fff",
                        "hoverBorderColor": "#888",
                        "hoverColor": "#000",
                        "textColor": "#555",
                        "type": "button",
                      },
                      "displayName": "ModeSwitcher__MobileButton",
                      "foldedComponentIds": Array [
                        "Button__BaseButton-sc-32rbq-4",
                        "Button-sc-32rbq-3",
                        "Button-sc-32rbq-1",
                        "Button-sc-32rbq-2",
                        "Button-sc-32rbq-0",
                        "ModeSwitcher__SwitcherButton-sc-9lbpr3-0",
                      ],
                      "propTypes": Object {
                        "activeBackgroundColor": [Function],
                        "activeBorderColor": [Function],
                        "activeColor": [Function],
                        "backgroundColor": [Function],
                        "borderColor": [Function],
                        "boxShadowColor": [Function],
                        "focusBackgroundColor": [Function],
                        "focusBorderColor": [Function],
                        "focusColor": [Function],
                        "hoverBackgroundColor": [Function],
                        "hoverBorderColor": [Function],
                        "hoverColor": [Function],
                        "textColor": [Function],
                        "type": [Function],
                      },
                      "render": [Function],
                      "styledComponentId": "ModeSwitcher__MobileButton-sc-9lbpr3-1",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hoverBackgroundColor="#fff"
                  hoverBorderColor="#888"
                  hoverColor="#000"
                  isActive={true}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <button
                    aria-pressed={true}
                    className="c10"
                    onClick={[Function]}
                    type="button"
                  >
                    <SvgIcon
                      color="currentColor"
                      icon="mobile"
                      size="22px"
                    >
                      <SvgIcon__StyledSvg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-mobile"
                        fill="currentColor"
                        focusable="false"
                        role="img"
                        size="22px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <StyledComponent
                          aria-hidden={true}
                          className="yoast-svg-icon yoast-svg-icon-mobile"
                          fill="currentColor"
                          focusable="false"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                "isStatic": false,
                                "lastClassName": "c11",
                                "rules": Array [
                                  "width:",
                                  [Function],
                                  ";height:",
                                  [Function],
                                  ";flex:none;",
                                ],
                              },
                              "displayName": "SvgIcon__StyledSvg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          role="img"
                          size="22px"
                          viewBox="0 0 1792 1792"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <svg
                            aria-hidden={true}
                            className="yoast-svg-icon yoast-svg-icon-mobile c11"
                            fill="currentColor"
                            focusable="false"
                            role="img"
                            size="22px"
                            viewBox="0 0 1792 1792"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
                            />
                          </svg>
                        </StyledComponent>
                      </SvgIcon__StyledSvg>
                    </SvgIcon>
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Mobile preview
                      </span>
                    </ScreenReaderText>
                  </button>
                </StyledComponent>
              </ModeSwitcher__MobileButton>
              <ModeSwitcher__DesktopButton
                activeBackgroundColor="#f7f7f7"
                activeBorderColor="#888"
                activeColor="#000"
                aria-pressed={false}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                focusBackgroundColor="#fff"
                focusBorderColor="#0066cd"
                focusColor="#000"
                hoverBackgroundColor="#fff"
                hoverBorderColor="#888"
                hoverColor="#000"
                isActive={false}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <StyledComponent
                  activeBackgroundColor="#f7f7f7"
                  activeBorderColor="#888"
                  activeColor="#000"
                  aria-pressed={false}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  focusBackgroundColor="#fff"
                  focusBorderColor="#0066cd"
                  focusColor="#000"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "ModeSwitcher__DesktopButton-sc-9lbpr3-2",
                        "isStatic": false,
                        "lastClassName": "c12",
                        "rules": Array [
                          "color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";box-shadow:0 1px 0 ",
                          [Function],
                          ";",
                          "&:active{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";box-shadow:inset 0 2px 5px -3px ",
                          "rgba( 0, 0, 0, 0.5 )",
                          ";}",
                          "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                          [Function],
                          ";color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";box-shadow:0 0 3px ",
                          "rgba( 8, 74, 103, 0.8 )",
                          ";}",
                          "&:hover{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";}",
                          "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                          "1px",
                          ";border-style:solid;margin:0;padding:",
                          "4px",
                          " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                          [Function],
                          ";overflow:visible;min-height:",
                          "32px",
                          ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                          "22px",
                          ";}}",
                          "border:none;border-bottom:4px solid transparent;width:31px;height:31px;border-color:",
                          [Function],
                          ";color:",
                          "#555",
                          ";transition:0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;transition-property:border-color;&:hover,&:focus{background-color:",
                          "#fff",
                          ";border:none;border-bottom:4px solid transparent;border-color:",
                          "#1e8cbe",
                          ";color:",
                          "#1e8cbe",
                          ";box-shadow:none;}",
                          "border-radius:0 3px 3px 0;",
                        ],
                      },
                      "defaultProps": Object {
                        "activeBackgroundColor": "#f7f7f7",
                        "activeBorderColor": "#888",
                        "activeColor": "#000",
                        "backgroundColor": "#f7f7f7",
                        "borderColor": "#ccc",
                        "boxShadowColor": "#ccc",
                        "focusBackgroundColor": "#fff",
                        "focusBorderColor": "#0066cd",
                        "focusColor": "#000",
                        "hoverBackgroundColor": "#fff",
                        "hoverBorderColor": "#888",
                        "hoverColor": "#000",
                        "textColor": "#555",
                        "type": "button",
                      },
                      "displayName": "ModeSwitcher__DesktopButton",
                      "foldedComponentIds": Array [
                        "Button__BaseButton-sc-32rbq-4",
                        "Button-sc-32rbq-3",
                        "Button-sc-32rbq-1",
                        "Button-sc-32rbq-2",
                        "Button-sc-32rbq-0",
                        "ModeSwitcher__SwitcherButton-sc-9lbpr3-0",
                      ],
                      "propTypes": Object {
                        "activeBackgroundColor": [Function],
                        "activeBorderColor": [Function],
                        "activeColor": [Function],
                        "backgroundColor": [Function],
                        "borderColor": [Function],
                        "boxShadowColor": [Function],
                        "focusBackgroundColor": [Function],
                        "focusBorderColor": [Function],
                        "focusColor": [Function],
                        "hoverBackgroundColor": [Function],
                        "hoverBorderColor": [Function],
                        "hoverColor": [Function],
                        "textColor": [Function],
                        "type": [Function],
                      },
                      "render": [Function],
                      "styledComponentId": "ModeSwitcher__DesktopButton-sc-9lbpr3-2",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hoverBackgroundColor="#fff"
                  hoverBorderColor="#888"
                  hoverColor="#000"
                  isActive={false}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <button
                    aria-pressed={false}
                    className="c12"
                    onClick={[Function]}
                    type="button"
                  >
                    <SvgIcon
                      color="currentColor"
                      icon="desktop"
                      size="18px"
                    >
                      <SvgIcon__StyledSvg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-desktop"
                        fill="currentColor"
                        focusable="false"
                        role="img"
                        size="18px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <StyledComponent
                          aria-hidden={true}
                          className="yoast-svg-icon yoast-svg-icon-desktop"
                          fill="currentColor"
                          focusable="false"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                "isStatic": false,
                                "lastClassName": "c13",
                                "rules": Array [
                                  "width:",
                                  [Function],
                                  ";height:",
                                  [Function],
                                  ";flex:none;",
                                ],
                              },
                              "displayName": "SvgIcon__StyledSvg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          role="img"
                          size="18px"
                          viewBox="0 0 1792 1792"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <svg
                            aria-hidden={true}
                            className="yoast-svg-icon yoast-svg-icon-desktop c13"
                            fill="currentColor"
                            focusable="false"
                            role="img"
                            size="18px"
                            viewBox="0 0 1792 1792"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
                            />
                          </svg>
                        </StyledComponent>
                      </SvgIcon__StyledSvg>
                    </SvgIcon>
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Desktop preview
                      </span>
                    </ScreenReaderText>
                  </button>
                </StyledComponent>
              </ModeSwitcher__DesktopButton>
            </div>
          </StyledComponent>
        </ModeSwitcher__Switcher>
      </ModeSwitcher>
      <SnippetEditor__EditSnippetButton
        activeBackgroundColor="#f7f7f7"
        activeBorderColor="#888"
        activeColor="#000"
        aria-expanded={true}
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        focusBackgroundColor="#fff"
        focusBorderColor="#0066cd"
        focusColor="#000"
        hoverBackgroundColor="#fff"
        hoverBorderColor="#888"
        hoverColor="#000"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <StyledComponent
          activeBackgroundColor="#f7f7f7"
          activeBorderColor="#888"
          activeColor="#000"
          aria-expanded={true}
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          focusBackgroundColor="#fff"
          focusBorderColor="#0066cd"
          focusColor="#000"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "SnippetEditor__EditSnippetButton-sc-144bmm3-1",
                "isStatic": false,
                "lastClassName": "c14",
                "rules": Array [
                  "color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";background:",
                  [Function],
                  ";box-shadow:0 1px 0 ",
                  [Function],
                  ";",
                  "&:active{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";box-shadow:inset 0 2px 5px -3px ",
                  "rgba( 0, 0, 0, 0.5 )",
                  ";}",
                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                  [Function],
                  ";color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";box-shadow:0 0 3px ",
                  "rgba( 8, 74, 103, 0.8 )",
                  ";}",
                  "&:hover{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";}",
                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                  "1px",
                  ";border-style:solid;margin:0;padding:",
                  "4px",
                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                  [Function],
                  ";overflow:visible;min-height:",
                  "32px",
                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                  "22px",
                  ";}}",
                  "height:33px;border:1px solid #dbdbdb;box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;",
                  "margin:",
                  [Function],
                  ";fill:",
                  "#555",
                  ";padding-left:8px;& svg{",
                  [Function],
                  ":7px;}",
                ],
              },
              "defaultProps": Object {
                "activeBackgroundColor": "#f7f7f7",
                "activeBorderColor": "#888",
                "activeColor": "#000",
                "backgroundColor": "#f7f7f7",
                "borderColor": "#ccc",
                "boxShadowColor": "#ccc",
                "focusBackgroundColor": "#fff",
                "focusBorderColor": "#0066cd",
                "focusColor": "#000",
                "hoverBackgroundColor": "#fff",
                "hoverBorderColor": "#888",
                "hoverColor": "#000",
                "textColor": "#555",
                "type": "button",
              },
              "displayName": "SnippetEditor__EditSnippetButton",
              "foldedComponentIds": Array [
                "Button__BaseButton-sc-32rbq-4",
                "Button-sc-32rbq-3",
                "Button-sc-32rbq-1",
                "Button-sc-32rbq-2",
                "Button-sc-32rbq-0",
                "SnippetEditor__SnippetEditorButton-sc-144bmm3-0",
              ],
              "propTypes": Object {
                "activeBackgroundColor": [Function],
                "activeBorderColor": [Function],
                "activeColor": [Function],
                "backgroundColor": [Function],
                "borderColor": [Function],
                "boxShadowColor": [Function],
                "focusBackgroundColor": [Function],
                "focusBorderColor": [Function],
                "focusColor": [Function],
                "hoverBackgroundColor": [Function],
                "hoverBorderColor": [Function],
                "hoverColor": [Function],
                "textColor": [Function],
                "type": [Function],
              },
              "render": [Function],
              "styledComponentId": "SnippetEditor__EditSnippetButton-sc-144bmm3-1",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={[Function]}
          hoverBackgroundColor="#fff"
          hoverBorderColor="#888"
          hoverColor="#000"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <button
            aria-expanded={true}
            className="c14"
            onClick={[Function]}
            type="button"
          >
            <SvgIcon
              color="currentColor"
              icon="edit"
              size="16px"
            >
              <SvgIcon__StyledSvg
                aria-hidden={true}
                className="yoast-svg-icon yoast-svg-icon-edit"
                fill="currentColor"
                focusable="false"
                role="img"
                size="16px"
                viewBox="0 0 1792 1792"
                xmlns="http://www.w3.org/2000/svg"
              >
                <StyledComponent
                  aria-hidden={true}
                  className="yoast-svg-icon yoast-svg-icon-edit"
                  fill="currentColor"
                  focusable="false"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                        "isStatic": false,
                        "lastClassName": "c15",
                        "rules": Array [
                          "width:",
                          [Function],
                          ";height:",
                          [Function],
                          ";flex:none;",
                        ],
                      },
                      "displayName": "SvgIcon__StyledSvg",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                      "target": "svg",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  role="img"
                  size="16px"
                  viewBox="0 0 1792 1792"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <svg
                    aria-hidden={true}
                    className="yoast-svg-icon yoast-svg-icon-edit c15"
                    fill="currentColor"
                    focusable="false"
                    role="img"
                    size="16px"
                    viewBox="0 0 1792 1792"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
                    />
                  </svg>
                </StyledComponent>
              </SvgIcon__StyledSvg>
            </SvgIcon>
            Edit snippet
          </button>
        </StyledComponent>
      </SnippetEditor__EditSnippetButton>
      <SnippetEditorFields
        activeField={null}
        containerPadding="0 20px"
        data={
          Object {
            "description": "Test description, %%replacement_variable%%",
            "slug": "test-slug",
            "title": "Test title",
          }
        }
        descriptionEditorFieldPlaceholder="Modify your meta description by editing it right here"
        descriptionLengthProgress={
          Object {
            "actual": 42,
            "max": 156,
            "score": 6,
          }
        }
        hoveredField={null}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        recommendedReplacementVariables={Array []}
        replacementVariables={Array []}
        titleLengthProgress={
          Object {
            "actual": 0,
            "max": 600,
            "score": 1,
          }
        }
      >
        <shared__StyledEditor
          padding="0 20px"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "shared__StyledEditor-lzs0hf-5",
                  "isStatic": false,
                  "lastClassName": "c16",
                  "rules": Array [
                    "padding:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "shared__StyledEditor",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "shared__StyledEditor-lzs0hf-5",
                "target": "section",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            padding="0 20px"
          >
            <section
              className="c16"
            >
              <shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "shared__FormSection-lzs0hf-4",
                        "isStatic": true,
                        "lastClassName": "c17",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "shared__FormSection-lzs0hf-4",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="c17"
                  >
                    <ReplacementVariableEditor
                      content="Test title"
                      editorRef={[Function]}
                      fieldId="snippet-editor-field-title"
                      isActive={false}
                      isHovered={false}
                      label="SEO title"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      recommendedReplacementVariables={Array []}
                      replacementVariables={Array []}
                      withCaret={true}
                    >
                      <shared__SimulatedLabel
                        id="21"
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared__SimulatedLabel-lzs0hf-6",
                                "isStatic": true,
                                "lastClassName": "c18",
                                "rules": Array [
                                  "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                                ],
                              },
                              "displayName": "shared__SimulatedLabel",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "shared__SimulatedLabel-lzs0hf-6",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          id="21"
                          onClick={[Function]}
                        >
                          <div
                            className="c18"
                            id="21"
                            onClick={[Function]}
                          >
                            SEO title
                          </div>
                        </StyledComponent>
                      </shared__SimulatedLabel>
                      <shared__TriggerReplacementVariableSuggestionsButton
                        activeBackgroundColor="#f7f7f7"
                        activeBorderColor="#888"
                        activeColor="#000"
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        focusBackgroundColor="#fff"
                        focusBorderColor="#0066cd"
                        focusColor="#000"
                        hoverBackgroundColor="#fff"
                        hoverBorderColor="#888"
                        hoverColor="#000"
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <StyledComponent
                          activeBackgroundColor="#f7f7f7"
                          activeBorderColor="#888"
                          activeColor="#000"
                          backgroundColor="#f7f7f7"
                          borderColor="#ccc"
                          boxShadowColor="#ccc"
                          focusBackgroundColor="#fff"
                          focusBorderColor="#0066cd"
                          focusColor="#000"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared__TriggerReplacementVariableSuggestionsButton-lzs0hf-7",
                                "isStatic": false,
                                "lastClassName": "c19",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";background:",
                                  [Function],
                                  ";box-shadow:0 1px 0 ",
                                  [Function],
                                  ";",
                                  "&:active{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";box-shadow:inset 0 2px 5px -3px ",
                                  "rgba( 0, 0, 0, 0.5 )",
                                  ";}",
                                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                                  [Function],
                                  ";color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";box-shadow:0 0 3px ",
                                  "rgba( 8, 74, 103, 0.8 )",
                                  ";}",
                                  "&:hover{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";}",
                                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                                  "1px",
                                  ";border-style:solid;margin:0;padding:",
                                  "4px",
                                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                                  [Function],
                                  ";overflow:visible;min-height:",
                                  "32px",
                                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                                  "22px",
                                  ";}}",
                                  "box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;padding-left:8px;height:33px;border:1px solid #dbdbdb;font-size:13px;& svg{",
                                  [Function],
                                  ":7px;fill:",
                                  "#555",
                                  ";}",
                                ],
                              },
                              "defaultProps": Object {
                                "activeBackgroundColor": "#f7f7f7",
                                "activeBorderColor": "#888",
                                "activeColor": "#000",
                                "backgroundColor": "#f7f7f7",
                                "borderColor": "#ccc",
                                "boxShadowColor": "#ccc",
                                "focusBackgroundColor": "#fff",
                                "focusBorderColor": "#0066cd",
                                "focusColor": "#000",
                                "hoverBackgroundColor": "#fff",
                                "hoverBorderColor": "#888",
                                "hoverColor": "#000",
                                "textColor": "#555",
                                "type": "button",
                              },
                              "displayName": "shared__TriggerReplacementVariableSuggestionsButton",
                              "foldedComponentIds": Array [
                                "Button__BaseButton-sc-32rbq-4",
                                "Button-sc-32rbq-3",
                                "Button-sc-32rbq-1",
                                "Button-sc-32rbq-2",
                                "Button-sc-32rbq-0",
                              ],
                              "propTypes": Object {
                                "activeBackgroundColor": [Function],
                                "activeBorderColor": [Function],
                                "activeColor": [Function],
                                "backgroundColor": [Function],
                                "borderColor": [Function],
                                "boxShadowColor": [Function],
                                "focusBackgroundColor": [Function],
                                "focusBorderColor": [Function],
                                "focusColor": [Function],
                                "hoverBackgroundColor": [Function],
                                "hoverBorderColor": [Function],
                                "hoverColor": [Function],
                                "textColor": [Function],
                                "type": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "shared__TriggerReplacementVariableSuggestionsButton-lzs0hf-7",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverBackgroundColor="#fff"
                          hoverBorderColor="#888"
                          hoverColor="#000"
                          onClick={[Function]}
                          textColor="#555"
                          type="button"
                        >
                          <button
                            className="c19"
                            onClick={[Function]}
                            type="button"
                          >
                            <SvgIcon
                              color="currentColor"
                              icon="plus-circle"
                              size="16px"
                            >
                              <SvgIcon__StyledSvg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="16px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <StyledComponent
                                  aria-hidden={true}
                                  className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                  fill="currentColor"
                                  focusable="false"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                        "isStatic": false,
                                        "lastClassName": "c15",
                                        "rules": Array [
                                          "width:",
                                          [Function],
                                          ";height:",
                                          [Function],
                                          ";flex:none;",
                                        ],
                                      },
                                      "displayName": "SvgIcon__StyledSvg",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                      "target": "svg",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  role="img"
                                  size="16px"
                                  viewBox="0 0 1792 1792"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="yoast-svg-icon yoast-svg-icon-plus-circle c15"
                                    fill="currentColor"
                                    focusable="false"
                                    role="img"
                                    size="16px"
                                    viewBox="0 0 1792 1792"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M1344 960v-128q0-26-19-45t-45-19h-256v-256q0-26-19-45t-45-19h-128q-26 0-45 19t-19 45v256h-256q-26 0-45 19t-19 45v128q0 26 19 45t45 19h256v256q0 26 19 45t45 19h128q26 0 45-19t19-45v-256h256q26 0 45-19t19-45zm320-64q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"
                                    />
                                  </svg>
                                </StyledComponent>
                              </SvgIcon__StyledSvg>
                            </SvgIcon>
                            Insert snippet variable
                          </button>
                        </StyledComponent>
                      </shared__TriggerReplacementVariableSuggestionsButton>
                      <shared
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {},
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared-lzs0hf-1",
                                "isStatic": false,
                                "lastClassName": "c20",
                                "rules": Array [
                                  "flex:0 1 100%;border:1px solid ",
                                  [Function],
                                  ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                  [Function],
                                  ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                  ".public-DraftStyleDefault-block{line-height:24px;}",
                                  "&::before{display:block;position:absolute;top:-1px;",
                                  [Function],
                                  ":-25px;width:24px;height:24px;background-image:url( ",
                                  [Function],
                                  " );background-size:25px;content:\\"\\";}",
                                ],
                              },
                              "displayName": "shared",
                              "foldedComponentIds": Array [
                                "shared__InputContainer-lzs0hf-0",
                                "shared__TitleInputContainer-lzs0hf-2",
                              ],
                              "render": [Function],
                              "styledComponentId": "shared-lzs0hf-1",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isActive={false}
                          isHovered={false}
                          onClick={[Function]}
                        >
                          <div
                            className="c20"
                            onClick={[Function]}
                          >
                            <ReplacementVariableEditorStandalone
                              ariaLabelledBy="21"
                              content="Test title"
                              fieldId="snippet-editor-field-title"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              recommendedReplacementVariables={Array []}
                              replacementVariables={Array []}
                            >
                              <div />
                            </ReplacementVariableEditorStandalone>
                          </div>
                        </StyledComponent>
                      </shared>
                    </ReplacementVariableEditor>
                    <ProgressBar
                      aria-hidden="true"
                      backgroundColor="#f7f7f7"
                      borderColor="#ddd"
                      max={600}
                      progressColor="#dc3232"
                      value={0}
                    >
                      <StyledComponent
                        aria-hidden="true"
                        backgroundColor="#f7f7f7"
                        borderColor="#ddd"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ProgressBar-sc-9g9yx6-0",
                              "isStatic": false,
                              "lastClassName": "c25",
                              "rules": Array [
                                "box-sizing:border-box;width:100%;height:8px;display:block;margin-top:8px;appearance:none;background-color:",
                                [Function],
                                ";border:1px solid ",
                                [Function],
                                ";::-webkit-progress-bar{background-color:",
                                [Function],
                                ";}::-webkit-progress-value{background-color:",
                                [Function],
                                ";transition:width 250ms;}::-moz-progress-bar{background-color:",
                                [Function],
                                ";}::-ms-fill{background-color:",
                                [Function],
                                ";border:0;}",
                              ],
                            },
                            "defaultProps": Object {
                              "aria-hidden": "true",
                              "backgroundColor": "#f7f7f7",
                              "borderColor": "#ddd",
                              "max": 1,
                              "progressColor": "#7ad03a",
                              "value": 0,
                            },
                            "displayName": "ProgressBar",
                            "foldedComponentIds": Array [],
                            "propTypes": Object {
                              "aria-hidden": [Function],
                              "backgroundColor": [Function],
                              "borderColor": [Function],
                              "max": [Function],
                              "progressColor": [Function],
                              "value": [Function],
                            },
                            "render": [Function],
                            "styledComponentId": "ProgressBar-sc-9g9yx6-0",
                            "target": "progress",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        max={600}
                        progressColor="#dc3232"
                        value={0}
                      >
                        <progress
                          aria-hidden="true"
                          className="c21"
                          max={600}
                          value={0}
                        />
                      </StyledComponent>
                    </ProgressBar>
                  </div>
                </StyledComponent>
              </shared__FormSection>
              <shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "shared__FormSection-lzs0hf-4",
                        "isStatic": true,
                        "lastClassName": "c17",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "shared__FormSection-lzs0hf-4",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="c17"
                  >
                    <shared__SimulatedLabel
                      id="snippet-editor-field-20-slug"
                      onClick={[Function]}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "shared__SimulatedLabel-lzs0hf-6",
                              "isStatic": true,
                              "lastClassName": "c18",
                              "rules": Array [
                                "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                              ],
                            },
                            "displayName": "shared__SimulatedLabel",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "shared__SimulatedLabel-lzs0hf-6",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        id="snippet-editor-field-20-slug"
                        onClick={[Function]}
                      >
                        <div
                          className="c18"
                          id="snippet-editor-field-20-slug"
                          onClick={[Function]}
                        >
                          Slug
                        </div>
                      </StyledComponent>
                    </shared__SimulatedLabel>
                    <shared
                      isActive={false}
                      isHovered={false}
                      onClick={[Function]}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [
                              Object {},
                            ],
                            "componentStyle": ComponentStyle {
                              "componentId": "shared-lzs0hf-1",
                              "isStatic": false,
                              "lastClassName": "cNPYhM",
                              "rules": Array [
                                "flex:0 1 100%;border:1px solid ",
                                [Function],
                                ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                [Function],
                                ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                "&::before{display:block;position:absolute;top:-1px;",
                                [Function],
                                ":-25px;width:24px;height:24px;background-image:url( ",
                                [Function],
                                " );background-size:25px;content:\\"\\";}",
                              ],
                            },
                            "displayName": "shared",
                            "foldedComponentIds": Array [
                              "shared__InputContainer-lzs0hf-0",
                            ],
                            "render": [Function],
                            "styledComponentId": "shared-lzs0hf-1",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <div
                          className="c22"
                          onClick={[Function]}
                        >
                          <SnippetEditorFields__SlugInput
                            aria-labelledby="snippet-editor-field-20-slug"
                            id="snippet-editor-field-slug"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            value="test-slug"
                          >
                            <StyledComponent
                              aria-labelledby="snippet-editor-field-20-slug"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "SnippetEditorFields__SlugInput-sc-1ioqi3y-0",
                                    "isStatic": true,
                                    "lastClassName": "c23",
                                    "rules": Array [
                                      "border:none;width:100%;height:inherit;line-height:inherit;font-family:inherit;font-size:inherit;color:inherit;&:focus{outline:0;}",
                                    ],
                                  },
                                  "displayName": "SnippetEditorFields__SlugInput",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "SnippetEditorFields__SlugInput-sc-1ioqi3y-0",
                                  "target": "input",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={[Function]}
                              id="snippet-editor-field-slug"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              value="test-slug"
                            >
                              <input
                                aria-labelledby="snippet-editor-field-20-slug"
                                className="c23"
                                id="snippet-editor-field-slug"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                value="test-slug"
                              />
                            </StyledComponent>
                          </SnippetEditorFields__SlugInput>
                        </div>
                      </StyledComponent>
                    </shared>
                  </div>
                </StyledComponent>
              </shared__FormSection>
              <shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "shared__FormSection-lzs0hf-4",
                        "isStatic": true,
                        "lastClassName": "c17",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "shared__FormSection-lzs0hf-4",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="c17"
                  >
                    <ReplacementVariableEditor
                      content="Test description, %%replacement_variable%%"
                      editorRef={[Function]}
                      fieldId="snippet-editor-field-description"
                      isActive={false}
                      isHovered={false}
                      label="Meta description"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      placeholder="Modify your meta description by editing it right here"
                      recommendedReplacementVariables={Array []}
                      replacementVariables={Array []}
                      type="description"
                      withCaret={true}
                    >
                      <shared__SimulatedLabel
                        id="22"
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared__SimulatedLabel-lzs0hf-6",
                                "isStatic": true,
                                "lastClassName": "c18",
                                "rules": Array [
                                  "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                                ],
                              },
                              "displayName": "shared__SimulatedLabel",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "shared__SimulatedLabel-lzs0hf-6",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          id="22"
                          onClick={[Function]}
                        >
                          <div
                            className="c18"
                            id="22"
                            onClick={[Function]}
                          >
                            Meta description
                          </div>
                        </StyledComponent>
                      </shared__SimulatedLabel>
                      <shared__TriggerReplacementVariableSuggestionsButton
                        activeBackgroundColor="#f7f7f7"
                        activeBorderColor="#888"
                        activeColor="#000"
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        focusBackgroundColor="#fff"
                        focusBorderColor="#0066cd"
                        focusColor="#000"
                        hoverBackgroundColor="#fff"
                        hoverBorderColor="#888"
                        hoverColor="#000"
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <StyledComponent
                          activeBackgroundColor="#f7f7f7"
                          activeBorderColor="#888"
                          activeColor="#000"
                          backgroundColor="#f7f7f7"
                          borderColor="#ccc"
                          boxShadowColor="#ccc"
                          focusBackgroundColor="#fff"
                          focusBorderColor="#0066cd"
                          focusColor="#000"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared__TriggerReplacementVariableSuggestionsButton-lzs0hf-7",
                                "isStatic": false,
                                "lastClassName": "c19",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";background:",
                                  [Function],
                                  ";box-shadow:0 1px 0 ",
                                  [Function],
                                  ";",
                                  "&:active{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";box-shadow:inset 0 2px 5px -3px ",
                                  "rgba( 0, 0, 0, 0.5 )",
                                  ";}",
                                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                                  [Function],
                                  ";color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";box-shadow:0 0 3px ",
                                  "rgba( 8, 74, 103, 0.8 )",
                                  ";}",
                                  "&:hover{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";}",
                                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                                  "1px",
                                  ";border-style:solid;margin:0;padding:",
                                  "4px",
                                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                                  [Function],
                                  ";overflow:visible;min-height:",
                                  "32px",
                                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                                  "22px",
                                  ";}}",
                                  "box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;padding-left:8px;height:33px;border:1px solid #dbdbdb;font-size:13px;& svg{",
                                  [Function],
                                  ":7px;fill:",
                                  "#555",
                                  ";}",
                                ],
                              },
                              "defaultProps": Object {
                                "activeBackgroundColor": "#f7f7f7",
                                "activeBorderColor": "#888",
                                "activeColor": "#000",
                                "backgroundColor": "#f7f7f7",
                                "borderColor": "#ccc",
                                "boxShadowColor": "#ccc",
                                "focusBackgroundColor": "#fff",
                                "focusBorderColor": "#0066cd",
                                "focusColor": "#000",
                                "hoverBackgroundColor": "#fff",
                                "hoverBorderColor": "#888",
                                "hoverColor": "#000",
                                "textColor": "#555",
                                "type": "button",
                              },
                              "displayName": "shared__TriggerReplacementVariableSuggestionsButton",
                              "foldedComponentIds": Array [
                                "Button__BaseButton-sc-32rbq-4",
                                "Button-sc-32rbq-3",
                                "Button-sc-32rbq-1",
                                "Button-sc-32rbq-2",
                                "Button-sc-32rbq-0",
                              ],
                              "propTypes": Object {
                                "activeBackgroundColor": [Function],
                                "activeBorderColor": [Function],
                                "activeColor": [Function],
                                "backgroundColor": [Function],
                                "borderColor": [Function],
                                "boxShadowColor": [Function],
                                "focusBackgroundColor": [Function],
                                "focusBorderColor": [Function],
                                "focusColor": [Function],
                                "hoverBackgroundColor": [Function],
                                "hoverBorderColor": [Function],
                                "hoverColor": [Function],
                                "textColor": [Function],
                                "type": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "shared__TriggerReplacementVariableSuggestionsButton-lzs0hf-7",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverBackgroundColor="#fff"
                          hoverBorderColor="#888"
                          hoverColor="#000"
                          onClick={[Function]}
                          textColor="#555"
                          type="button"
                        >
                          <button
                            className="c19"
                            onClick={[Function]}
                            type="button"
                          >
                            <SvgIcon
                              color="currentColor"
                              icon="plus-circle"
                              size="16px"
                            >
                              <SvgIcon__StyledSvg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="16px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <StyledComponent
                                  aria-hidden={true}
                                  className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                  fill="currentColor"
                                  focusable="false"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                        "isStatic": false,
                                        "lastClassName": "c15",
                                        "rules": Array [
                                          "width:",
                                          [Function],
                                          ";height:",
                                          [Function],
                                          ";flex:none;",
                                        ],
                                      },
                                      "displayName": "SvgIcon__StyledSvg",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                      "target": "svg",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  role="img"
                                  size="16px"
                                  viewBox="0 0 1792 1792"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="yoast-svg-icon yoast-svg-icon-plus-circle c15"
                                    fill="currentColor"
                                    focusable="false"
                                    role="img"
                                    size="16px"
                                    viewBox="0 0 1792 1792"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M1344 960v-128q0-26-19-45t-45-19h-256v-256q0-26-19-45t-45-19h-128q-26 0-45 19t-19 45v256h-256q-26 0-45 19t-19 45v128q0 26 19 45t45 19h256v256q0 26 19 45t45 19h128q26 0 45-19t19-45v-256h256q26 0 45-19t19-45zm320-64q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"
                                    />
                                  </svg>
                                </StyledComponent>
                              </SvgIcon__StyledSvg>
                            </SvgIcon>
                            Insert snippet variable
                          </button>
                        </StyledComponent>
                      </shared__TriggerReplacementVariableSuggestionsButton>
                      <shared
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {},
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared-lzs0hf-1",
                                "isStatic": false,
                                "lastClassName": "c24",
                                "rules": Array [
                                  "flex:0 1 100%;border:1px solid ",
                                  [Function],
                                  ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                  [Function],
                                  ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                  "min-height:72px;padding:2px 6px;line-height:24px;.public-DraftEditorPlaceholder-root{color:",
                                  "#616161",
                                  ";}.public-DraftEditorPlaceholder-hasFocus{color:",
                                  "#616161",
                                  ";}",
                                  "&::before{display:block;position:absolute;top:-1px;",
                                  [Function],
                                  ":-25px;width:24px;height:24px;background-image:url( ",
                                  [Function],
                                  " );background-size:25px;content:\\"\\";}",
                                ],
                              },
                              "displayName": "shared",
                              "foldedComponentIds": Array [
                                "shared__InputContainer-lzs0hf-0",
                                "shared__DescriptionInputContainer-lzs0hf-3",
                              ],
                              "render": [Function],
                              "styledComponentId": "shared-lzs0hf-1",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isActive={false}
                          isHovered={false}
                          onClick={[Function]}
                        >
                          <div
                            className="c24"
                            onClick={[Function]}
                          >
                            <ReplacementVariableEditorStandalone
                              ariaLabelledBy="22"
                              content="Test description, %%replacement_variable%%"
                              fieldId="snippet-editor-field-description"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              placeholder="Modify your meta description by editing it right here"
                              recommendedReplacementVariables={Array []}
                              replacementVariables={Array []}
                            >
                              <div />
                            </ReplacementVariableEditorStandalone>
                          </div>
                        </StyledComponent>
                      </shared>
                    </ReplacementVariableEditor>
                    <ProgressBar
                      aria-hidden="true"
                      backgroundColor="#f7f7f7"
                      borderColor="#ddd"
                      max={156}
                      progressColor="#ee7c1b"
                      value={42}
                    >
                      <StyledComponent
                        aria-hidden="true"
                        backgroundColor="#f7f7f7"
                        borderColor="#ddd"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ProgressBar-sc-9g9yx6-0",
                              "isStatic": false,
                              "lastClassName": "c25",
                              "rules": Array [
                                "box-sizing:border-box;width:100%;height:8px;display:block;margin-top:8px;appearance:none;background-color:",
                                [Function],
                                ";border:1px solid ",
                                [Function],
                                ";::-webkit-progress-bar{background-color:",
                                [Function],
                                ";}::-webkit-progress-value{background-color:",
                                [Function],
                                ";transition:width 250ms;}::-moz-progress-bar{background-color:",
                                [Function],
                                ";}::-ms-fill{background-color:",
                                [Function],
                                ";border:0;}",
                              ],
                            },
                            "defaultProps": Object {
                              "aria-hidden": "true",
                              "backgroundColor": "#f7f7f7",
                              "borderColor": "#ddd",
                              "max": 1,
                              "progressColor": "#7ad03a",
                              "value": 0,
                            },
                            "displayName": "ProgressBar",
                            "foldedComponentIds": Array [],
                            "propTypes": Object {
                              "aria-hidden": [Function],
                              "backgroundColor": [Function],
                              "borderColor": [Function],
                              "max": [Function],
                              "progressColor": [Function],
                              "value": [Function],
                            },
                            "render": [Function],
                            "styledComponentId": "ProgressBar-sc-9g9yx6-0",
                            "target": "progress",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        max={156}
                        progressColor="#ee7c1b"
                        value={42}
                      >
                        <progress
                          aria-hidden="true"
                          className="c25"
                          max={156}
                          value={42}
                        />
                      </StyledComponent>
                    </ProgressBar>
                  </div>
                </StyledComponent>
              </shared__FormSection>
            </section>
          </StyledComponent>
        </shared__StyledEditor>
      </SnippetEditorFields>
      <SnippetEditor__CloseEditorButton
        activeBackgroundColor="#f7f7f7"
        activeBorderColor="#888"
        activeColor="#000"
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        focusBackgroundColor="#fff"
        focusBorderColor="#0066cd"
        focusColor="#000"
        hoverBackgroundColor="#fff"
        hoverBorderColor="#888"
        hoverColor="#000"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <StyledComponent
          activeBackgroundColor="#f7f7f7"
          activeBorderColor="#888"
          activeColor="#000"
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          focusBackgroundColor="#fff"
          focusBorderColor="#0066cd"
          focusColor="#000"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "SnippetEditor__CloseEditorButton-sc-144bmm3-2",
                "isStatic": false,
                "lastClassName": "c26",
                "rules": Array [
                  "color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";background:",
                  [Function],
                  ";box-shadow:0 1px 0 ",
                  [Function],
                  ";",
                  "&:active{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";box-shadow:inset 0 2px 5px -3px ",
                  "rgba( 0, 0, 0, 0.5 )",
                  ";}",
                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                  [Function],
                  ";color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";box-shadow:0 0 3px ",
                  "rgba( 8, 74, 103, 0.8 )",
                  ";}",
                  "&:hover{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";}",
                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                  "1px",
                  ";border-style:solid;margin:0;padding:",
                  "4px",
                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                  [Function],
                  ";overflow:visible;min-height:",
                  "32px",
                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                  "22px",
                  ";}}",
                  "height:33px;border:1px solid #dbdbdb;box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;",
                  "margin-top:24px;",
                ],
              },
              "defaultProps": Object {
                "activeBackgroundColor": "#f7f7f7",
                "activeBorderColor": "#888",
                "activeColor": "#000",
                "backgroundColor": "#f7f7f7",
                "borderColor": "#ccc",
                "boxShadowColor": "#ccc",
                "focusBackgroundColor": "#fff",
                "focusBorderColor": "#0066cd",
                "focusColor": "#000",
                "hoverBackgroundColor": "#fff",
                "hoverBorderColor": "#888",
                "hoverColor": "#000",
                "textColor": "#555",
                "type": "button",
              },
              "displayName": "SnippetEditor__CloseEditorButton",
              "foldedComponentIds": Array [
                "Button__BaseButton-sc-32rbq-4",
                "Button-sc-32rbq-3",
                "Button-sc-32rbq-1",
                "Button-sc-32rbq-2",
                "Button-sc-32rbq-0",
                "SnippetEditor__SnippetEditorButton-sc-144bmm3-0",
              ],
              "propTypes": Object {
                "activeBackgroundColor": [Function],
                "activeBorderColor": [Function],
                "activeColor": [Function],
                "backgroundColor": [Function],
                "borderColor": [Function],
                "boxShadowColor": [Function],
                "focusBackgroundColor": [Function],
                "focusBorderColor": [Function],
                "focusColor": [Function],
                "hoverBackgroundColor": [Function],
                "hoverBorderColor": [Function],
                "hoverColor": [Function],
                "textColor": [Function],
                "type": [Function],
              },
              "render": [Function],
              "styledComponentId": "SnippetEditor__CloseEditorButton-sc-144bmm3-2",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          hoverBackgroundColor="#fff"
          hoverBorderColor="#888"
          hoverColor="#000"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <button
            className="c26"
            onClick={[Function]}
            type="button"
          >
            Close snippet editor
          </button>
        </StyledComponent>
      </SnippetEditor__CloseEditorButton>
    </div>
  </ErrorBoundary>
</SnippetEditor>
`;

exports[`SnippetEditor calls callbacks when the editors are focused or changed 3`] = `
.c21 {
  box-sizing: border-box;
  width: 100%;
  height: 8px;
  display: block;
  margin-top: 8px;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background-color: #f7f7f7;
  border: 1px solid #ddd;
}

.c21::-webkit-progress-bar {
  background-color: #f7f7f7;
}

.c21::-webkit-progress-value {
  background-color: #dc3232;
  -webkit-transition: width 250ms;
  transition: width 250ms;
}

.c21::-moz-progress-bar {
  background-color: #dc3232;
}

.c21::-ms-fill {
  background-color: #dc3232;
  border: 0;
}

.c25 {
  box-sizing: border-box;
  width: 100%;
  height: 8px;
  display: block;
  margin-top: 8px;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background-color: #f7f7f7;
  border: 1px solid #ddd;
}

.c25::-webkit-progress-bar {
  background-color: #f7f7f7;
}

.c25::-webkit-progress-value {
  background-color: #ee7c1b;
  -webkit-transition: width 250ms;
  transition: width 250ms;
}

.c25::-moz-progress-bar {
  background-color: #ee7c1b;
}

.c25::-ms-fill {
  background-color: #ee7c1b;
  border: 0;
}

.c17 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  margin: 24px 0 0 0;
}

.c16 {
  padding: 0 20px;
}

.c18 {
  -webkit-flex: 1 1 200px;
  -ms-flex: 1 1 200px;
  flex: 1 1 200px;
  min-width: 200px;
  cursor: pointer;
  font-size: 16px;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin: 4px 0;
}

.c19 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  padding-left: 8px;
  height: 33px;
  border: 1px solid #dbdbdb;
  font-size: 13px;
}

.c19:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c19::-moz-focus-inner {
  border-width: 0;
}

.c19:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c19:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c19 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c19 svg {
  margin-right: 7px;
  fill: #555;
}

.c0 {
  border-bottom: 1px hidden #fff;
  border-radius: 2px;
  box-shadow: 0 1px 2px rgba(0,0,0,.2);
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  max-width: 600px;
  box-sizing: border-box;
  font-size: 14px;
}

.c2 {
  cursor: pointer;
  position: relative;
}

.c3 {
  color: #1e0fbe;
  -webkit-text-decoration: none;
  text-decoration: none;
  font-size: 18px;
  line-height: 1.2;
  font-weight: normal;
  margin: 0;
  display: inline-block;
  overflow: hidden;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c4 {
  display: inline-block;
  font-size: 16px;
  line-height: 1.2em;
  max-height: 2.4em;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c5 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  white-space: nowrap;
  font-size: 14px;
}

.c6 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  white-space: nowrap;
  font-size: 14px;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 100%;
}

.c8 {
  color: #545454;
  cursor: pointer;
  position: relative;
  max-width: 600px;
  font-size: 13px;
  font-size: 14px;
  line-height: 20px;
}

.c1 {
  padding: 8px 16px;
}

.c7 {
  border: 0;
  border-bottom: 1px solid #DFE1E5;
  margin: 0;
}

.c23 {
  border: none;
  width: 100%;
  height: inherit;
  line-height: inherit;
  font-family: inherit;
  font-size: inherit;
  color: inherit;
}

.c23:focus {
  outline: 0;
}

.c20 {
  -webkit-flex: 0 1 100%;
  -ms-flex: 0 1 100%;
  flex: 0 1 100%;
  border: 1px solid #ddd;
  padding: 3px 5px;
  box-sizing: border-box;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  cursor: text;
}

.c20 .public-DraftStyleDefault-block {
  line-height: 24px;
}

.c20::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width%3D%221792%22%20height%3D%221792%22%20viewBox%3D%220%200%201792%201792%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20fill%3D%22transparent%22%20d%3D%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20%2F%3E%3C%2Fsvg%3E );
  background-size: 25px;
  content: "";
}

.c22 {
  -webkit-flex: 0 1 100%;
  -ms-flex: 0 1 100%;
  flex: 0 1 100%;
  border: 1px solid #ddd;
  padding: 3px 5px;
  box-sizing: border-box;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  cursor: text;
}

.c22::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width%3D%221792%22%20height%3D%221792%22%20viewBox%3D%220%200%201792%201792%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20fill%3D%22transparent%22%20d%3D%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20%2F%3E%3C%2Fsvg%3E );
  background-size: 25px;
  content: "";
}

.c24 {
  -webkit-flex: 0 1 100%;
  -ms-flex: 0 1 100%;
  flex: 0 1 100%;
  border: 1px solid #ddd;
  padding: 3px 5px;
  box-sizing: border-box;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  cursor: text;
  min-height: 72px;
  padding: 2px 6px;
  line-height: 24px;
}

.c24 .public-DraftEditorPlaceholder-root {
  color: #616161;
}

.c24 .public-DraftEditorPlaceholder-hasFocus {
  color: #616161;
}

.c24::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width%3D%221792%22%20height%3D%221792%22%20viewBox%3D%220%200%201792%201792%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20fill%3D%22transparent%22%20d%3D%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20%2F%3E%3C%2Fsvg%3E );
  background-size: 25px;
  content: "";
}

.c10 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: #555;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 3px 0 0 3px;
}

.c10:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c10::-moz-focus-inner {
  border-width: 0;
}

.c10:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c10:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c10 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c10:hover,
.c10:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
  box-shadow: none;
}

.c12 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: transparent;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 0 3px 3px 0;
}

.c12:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c12::-moz-focus-inner {
  border-width: 0;
}

.c12:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c12:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c12 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c12:hover,
.c12:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
  box-shadow: none;
}

.c9 {
  display: inline-block;
  margin-top: 10px;
  border: 1px solid #dbdbdb;
  border-radius: 4px;
  background-color: #f7f7f7;
  vertical-align: top;
}

.c14 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin: 10px 0 0 4px;
  fill: #555;
  padding-left: 8px;
}

.c14:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c14::-moz-focus-inner {
  border-width: 0;
}

.c14:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c14:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c14 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c14 svg {
  margin-right: 7px;
}

.c26 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin-top: 24px;
}

.c26:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c26::-moz-focus-inner {
  border-width: 0;
}

.c26:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c26:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c26 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c11 {
  width: 22px;
  height: 22px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c13 {
  width: 18px;
  height: 18px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c15 {
  width: 16px;
  height: 16px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c19::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c10::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c12::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c14::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c26::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

<SnippetEditor
  baseUrl="http://example.org/"
  data={
    Object {
      "description": "Test description, %%replacement_variable%%",
      "slug": "test-slug",
      "title": "Test title",
    }
  }
  date=""
  descriptionEditorFieldPlaceholder=""
  descriptionLengthProgress={
    Object {
      "actual": 0,
      "max": 156,
      "score": 0,
    }
  }
  hasPaperStyle={true}
  locale="en"
  mapEditorDataToPreview={null}
  mode="mobile"
  onChange={[MockFunction]}
  onChangeAnalysisData={[Function]}
  recommendedReplacementVariables={Array []}
  replacementVariables={Array []}
  showCloseButton={true}
  titleLengthProgress={
    Object {
      "actual": 0,
      "max": 600,
      "score": 0,
    }
  }
  wordsToHighlight={Array []}
>
  <ErrorBoundary>
    <div>
      <SnippetPreview
        activeField={null}
        breadcrumbs={null}
        date=""
        description="Test description, %%replacement_variable%%"
        hoveredField={null}
        isAmp={false}
        keyword=""
        locale="en"
        mode="mobile"
        onHover={[Function]}
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        title="Test title"
        url="example.org/test-slug"
        wordsToHighlight={Array []}
      >
        <section>
          <SnippetPreview__MobileContainer
            padding={20}
            width={640}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "SnippetPreview__MobileContainer-sc-1hxg8jo-1",
                    "isStatic": true,
                    "lastClassName": "c0",
                    "rules": Array [
                      "border-bottom:1px hidden #fff;border-radius:2px;box-shadow:0 1px 2px rgba(0,0,0,.2);font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;max-width:",
                      "600",
                      "px;box-sizing:border-box;font-size:14px;",
                    ],
                  },
                  "displayName": "SnippetPreview__MobileContainer",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "SnippetPreview__MobileContainer-sc-1hxg8jo-1",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              padding={20}
              width={640}
            >
              <div
                className="c0"
                width={640}
              >
                <SnippetPreview__MobilePartContainer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__MobilePartContainer-sc-1hxg8jo-12",
                          "isStatic": true,
                          "lastClassName": "c1",
                          "rules": Array [
                            "padding:8px 16px;",
                          ],
                        },
                        "displayName": "SnippetPreview__MobilePartContainer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__MobilePartContainer-sc-1hxg8jo-12",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="c1"
                    >
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          SEO title preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__BaseTitle
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__BaseTitle-sc-1hxg8jo-2",
                                "isStatic": true,
                                "lastClassName": "c2",
                                "rules": Array [
                                  "cursor:pointer;position:relative;",
                                ],
                              },
                              "displayName": "SnippetPreview__BaseTitle",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__BaseTitle-sc-1hxg8jo-2",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                        >
                          <div
                            className="c2"
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                          >
                            <SnippetPreview__TitleBounded>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__TitleBounded-sc-1hxg8jo-5",
                                      "isStatic": true,
                                      "lastClassName": "c3",
                                      "rules": Array [
                                        "color:",
                                        "#1e0fbe",
                                        ";text-decoration:none;font-size:18px;line-height:1.2;font-weight:normal;margin:0;display:inline-block;overflow:hidden;max-width:",
                                        "600",
                                        "px;vertical-align:top;text-overflow:ellipsis;",
                                        "max-width:",
                                        "600",
                                        "px;vertical-align:top;text-overflow:ellipsis;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__TitleBounded",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__Title-sc-1hxg8jo-4",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__TitleBounded-sc-1hxg8jo-5",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="c3"
                                >
                                  <SnippetPreview__TitleUnboundedMobile>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "SnippetPreview__TitleUnboundedMobile-sc-1hxg8jo-7",
                                            "isStatic": true,
                                            "lastClassName": "c4",
                                            "rules": Array [
                                              "display:inline-block;font-size:16px;line-height:1.2em;max-height:2.4em;overflow:hidden;text-overflow:ellipsis;",
                                            ],
                                          },
                                          "displayName": "SnippetPreview__TitleUnboundedMobile",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "SnippetPreview__TitleUnboundedMobile-sc-1hxg8jo-7",
                                          "target": "span",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={[Function]}
                                    >
                                      <span
                                        className="c4"
                                      >
                                        Test title
                                      </span>
                                    </StyledComponent>
                                  </SnippetPreview__TitleUnboundedMobile>
                                </div>
                              </StyledComponent>
                            </SnippetPreview__TitleBounded>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__BaseTitle>
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          Url preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__BaseUrl>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__BaseUrl-sc-1hxg8jo-8",
                                "isStatic": true,
                                "lastClassName": "c5",
                                "rules": Array [
                                  "display:inline-block;color:",
                                  "#006621",
                                  ";cursor:pointer;position:relative;max-width:90%;white-space:nowrap;font-size:14px;",
                                ],
                              },
                              "displayName": "SnippetPreview__BaseUrl",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__BaseUrl-sc-1hxg8jo-8",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <div
                            className="c5"
                          >
                            <SnippetPreview__BaseUrlOverflowContainer
                              onMouseEnter={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__BaseUrlOverflowContainer-sc-1hxg8jo-9",
                                      "isStatic": true,
                                      "lastClassName": "c6",
                                      "rules": Array [
                                        "display:inline-block;color:",
                                        "#006621",
                                        ";cursor:pointer;position:relative;max-width:90%;white-space:nowrap;font-size:14px;",
                                        "overflow:hidden;text-overflow:ellipsis;max-width:100%;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__BaseUrlOverflowContainer",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__BaseUrl-sc-1hxg8jo-8",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__BaseUrlOverflowContainer-sc-1hxg8jo-9",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                onMouseEnter={[Function]}
                                onMouseLeave={[Function]}
                                onMouseUp={[Function]}
                              >
                                <div
                                  className="c6"
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseUp={[Function]}
                                >
                                  example.org â€º test-slug
                                </div>
                              </StyledComponent>
                            </SnippetPreview__BaseUrlOverflowContainer>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__BaseUrl>
                    </div>
                  </StyledComponent>
                </SnippetPreview__MobilePartContainer>
                <SnippetPreview__Separator>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__Separator-sc-1hxg8jo-16",
                          "isStatic": true,
                          "lastClassName": "c7",
                          "rules": Array [
                            "border:0;border-bottom:1px solid #DFE1E5;margin:0;",
                          ],
                        },
                        "displayName": "SnippetPreview__Separator",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__Separator-sc-1hxg8jo-16",
                        "target": "hr",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <hr
                      className="c7"
                    />
                  </StyledComponent>
                </SnippetPreview__Separator>
                <SnippetPreview__MobilePartContainer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__MobilePartContainer-sc-1hxg8jo-12",
                          "isStatic": true,
                          "lastClassName": "c1",
                          "rules": Array [
                            "padding:8px 16px;",
                          ],
                        },
                        "displayName": "SnippetPreview__MobilePartContainer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__MobilePartContainer-sc-1hxg8jo-12",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="c1"
                    >
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          Meta description preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__MobileDescription
                        isDescriptionPlaceholder={false}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__MobileDescription-sc-1hxg8jo-11",
                                "isStatic": false,
                                "lastClassName": "c8",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";cursor:pointer;position:relative;max-width:",
                                  "600",
                                  "px;font-size:13px;",
                                  "font-size:14px;line-height:20px;",
                                ],
                              },
                              "displayName": "SnippetPreview__MobileDescription",
                              "foldedComponentIds": Array [
                                "SnippetPreview__DesktopDescription-sc-1hxg8jo-10",
                              ],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__MobileDescription-sc-1hxg8jo-11",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isDescriptionPlaceholder={false}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                        >
                          <div
                            className="c8"
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                          >
                            <SnippetPreview__MobileDescription
                              isDescriptionPlaceholder={false}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__MobileDescription-sc-1hxg8jo-11",
                                      "isStatic": false,
                                      "lastClassName": "c8",
                                      "rules": Array [
                                        "color:",
                                        [Function],
                                        ";cursor:pointer;position:relative;max-width:",
                                        "600",
                                        "px;font-size:13px;",
                                        "font-size:14px;line-height:20px;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__MobileDescription",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__DesktopDescription-sc-1hxg8jo-10",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__MobileDescription-sc-1hxg8jo-11",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={[Function]}
                                isDescriptionPlaceholder={false}
                              >
                                <div
                                  className="c8"
                                >
                                  Test description, %%replacement_variable%%
                                </div>
                              </StyledComponent>
                            </SnippetPreview__MobileDescription>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__MobileDescription>
                    </div>
                  </StyledComponent>
                </SnippetPreview__MobilePartContainer>
              </div>
            </StyledComponent>
          </SnippetPreview__MobileContainer>
        </section>
      </SnippetPreview>
      <ModeSwitcher
        active="mobile"
        onChange={[Function]}
      >
        <ModeSwitcher__Switcher>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "ModeSwitcher__Switcher-sc-9lbpr3-3",
                  "isStatic": true,
                  "lastClassName": "c9",
                  "rules": Array [
                    "display:inline-block;margin-top:10px;border:1px solid #dbdbdb;border-radius:4px;background-color:#f7f7f7;vertical-align:top;",
                  ],
                },
                "displayName": "ModeSwitcher__Switcher",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModeSwitcher__Switcher-sc-9lbpr3-3",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="c9"
            >
              <ModeSwitcher__MobileButton
                activeBackgroundColor="#f7f7f7"
                activeBorderColor="#888"
                activeColor="#000"
                aria-pressed={true}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                focusBackgroundColor="#fff"
                focusBorderColor="#0066cd"
                focusColor="#000"
                hoverBackgroundColor="#fff"
                hoverBorderColor="#888"
                hoverColor="#000"
                isActive={true}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <StyledComponent
                  activeBackgroundColor="#f7f7f7"
                  activeBorderColor="#888"
                  activeColor="#000"
                  aria-pressed={true}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  focusBackgroundColor="#fff"
                  focusBorderColor="#0066cd"
                  focusColor="#000"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "ModeSwitcher__MobileButton-sc-9lbpr3-1",
                        "isStatic": false,
                        "lastClassName": "c10",
                        "rules": Array [
                          "color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";box-shadow:0 1px 0 ",
                          [Function],
                          ";",
                          "&:active{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";box-shadow:inset 0 2px 5px -3px ",
                          "rgba( 0, 0, 0, 0.5 )",
                          ";}",
                          "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                          [Function],
                          ";color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";box-shadow:0 0 3px ",
                          "rgba( 8, 74, 103, 0.8 )",
                          ";}",
                          "&:hover{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";}",
                          "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                          "1px",
                          ";border-style:solid;margin:0;padding:",
                          "4px",
                          " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                          [Function],
                          ";overflow:visible;min-height:",
                          "32px",
                          ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                          "22px",
                          ";}}",
                          "border:none;border-bottom:4px solid transparent;width:31px;height:31px;border-color:",
                          [Function],
                          ";color:",
                          "#555",
                          ";transition:0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;transition-property:border-color;&:hover,&:focus{background-color:",
                          "#fff",
                          ";border:none;border-bottom:4px solid transparent;border-color:",
                          "#1e8cbe",
                          ";color:",
                          "#1e8cbe",
                          ";box-shadow:none;}",
                          "border-radius:3px 0 0 3px;",
                        ],
                      },
                      "defaultProps": Object {
                        "activeBackgroundColor": "#f7f7f7",
                        "activeBorderColor": "#888",
                        "activeColor": "#000",
                        "backgroundColor": "#f7f7f7",
                        "borderColor": "#ccc",
                        "boxShadowColor": "#ccc",
                        "focusBackgroundColor": "#fff",
                        "focusBorderColor": "#0066cd",
                        "focusColor": "#000",
                        "hoverBackgroundColor": "#fff",
                        "hoverBorderColor": "#888",
                        "hoverColor": "#000",
                        "textColor": "#555",
                        "type": "button",
                      },
                      "displayName": "ModeSwitcher__MobileButton",
                      "foldedComponentIds": Array [
                        "Button__BaseButton-sc-32rbq-4",
                        "Button-sc-32rbq-3",
                        "Button-sc-32rbq-1",
                        "Button-sc-32rbq-2",
                        "Button-sc-32rbq-0",
                        "ModeSwitcher__SwitcherButton-sc-9lbpr3-0",
                      ],
                      "propTypes": Object {
                        "activeBackgroundColor": [Function],
                        "activeBorderColor": [Function],
                        "activeColor": [Function],
                        "backgroundColor": [Function],
                        "borderColor": [Function],
                        "boxShadowColor": [Function],
                        "focusBackgroundColor": [Function],
                        "focusBorderColor": [Function],
                        "focusColor": [Function],
                        "hoverBackgroundColor": [Function],
                        "hoverBorderColor": [Function],
                        "hoverColor": [Function],
                        "textColor": [Function],
                        "type": [Function],
                      },
                      "render": [Function],
                      "styledComponentId": "ModeSwitcher__MobileButton-sc-9lbpr3-1",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hoverBackgroundColor="#fff"
                  hoverBorderColor="#888"
                  hoverColor="#000"
                  isActive={true}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <button
                    aria-pressed={true}
                    className="c10"
                    onClick={[Function]}
                    type="button"
                  >
                    <SvgIcon
                      color="currentColor"
                      icon="mobile"
                      size="22px"
                    >
                      <SvgIcon__StyledSvg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-mobile"
                        fill="currentColor"
                        focusable="false"
                        role="img"
                        size="22px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <StyledComponent
                          aria-hidden={true}
                          className="yoast-svg-icon yoast-svg-icon-mobile"
                          fill="currentColor"
                          focusable="false"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                "isStatic": false,
                                "lastClassName": "c11",
                                "rules": Array [
                                  "width:",
                                  [Function],
                                  ";height:",
                                  [Function],
                                  ";flex:none;",
                                ],
                              },
                              "displayName": "SvgIcon__StyledSvg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          role="img"
                          size="22px"
                          viewBox="0 0 1792 1792"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <svg
                            aria-hidden={true}
                            className="yoast-svg-icon yoast-svg-icon-mobile c11"
                            fill="currentColor"
                            focusable="false"
                            role="img"
                            size="22px"
                            viewBox="0 0 1792 1792"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
                            />
                          </svg>
                        </StyledComponent>
                      </SvgIcon__StyledSvg>
                    </SvgIcon>
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Mobile preview
                      </span>
                    </ScreenReaderText>
                  </button>
                </StyledComponent>
              </ModeSwitcher__MobileButton>
              <ModeSwitcher__DesktopButton
                activeBackgroundColor="#f7f7f7"
                activeBorderColor="#888"
                activeColor="#000"
                aria-pressed={false}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                focusBackgroundColor="#fff"
                focusBorderColor="#0066cd"
                focusColor="#000"
                hoverBackgroundColor="#fff"
                hoverBorderColor="#888"
                hoverColor="#000"
                isActive={false}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <StyledComponent
                  activeBackgroundColor="#f7f7f7"
                  activeBorderColor="#888"
                  activeColor="#000"
                  aria-pressed={false}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  focusBackgroundColor="#fff"
                  focusBorderColor="#0066cd"
                  focusColor="#000"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "ModeSwitcher__DesktopButton-sc-9lbpr3-2",
                        "isStatic": false,
                        "lastClassName": "c12",
                        "rules": Array [
                          "color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";box-shadow:0 1px 0 ",
                          [Function],
                          ";",
                          "&:active{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";box-shadow:inset 0 2px 5px -3px ",
                          "rgba( 0, 0, 0, 0.5 )",
                          ";}",
                          "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                          [Function],
                          ";color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";box-shadow:0 0 3px ",
                          "rgba( 8, 74, 103, 0.8 )",
                          ";}",
                          "&:hover{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";}",
                          "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                          "1px",
                          ";border-style:solid;margin:0;padding:",
                          "4px",
                          " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                          [Function],
                          ";overflow:visible;min-height:",
                          "32px",
                          ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                          "22px",
                          ";}}",
                          "border:none;border-bottom:4px solid transparent;width:31px;height:31px;border-color:",
                          [Function],
                          ";color:",
                          "#555",
                          ";transition:0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;transition-property:border-color;&:hover,&:focus{background-color:",
                          "#fff",
                          ";border:none;border-bottom:4px solid transparent;border-color:",
                          "#1e8cbe",
                          ";color:",
                          "#1e8cbe",
                          ";box-shadow:none;}",
                          "border-radius:0 3px 3px 0;",
                        ],
                      },
                      "defaultProps": Object {
                        "activeBackgroundColor": "#f7f7f7",
                        "activeBorderColor": "#888",
                        "activeColor": "#000",
                        "backgroundColor": "#f7f7f7",
                        "borderColor": "#ccc",
                        "boxShadowColor": "#ccc",
                        "focusBackgroundColor": "#fff",
                        "focusBorderColor": "#0066cd",
                        "focusColor": "#000",
                        "hoverBackgroundColor": "#fff",
                        "hoverBorderColor": "#888",
                        "hoverColor": "#000",
                        "textColor": "#555",
                        "type": "button",
                      },
                      "displayName": "ModeSwitcher__DesktopButton",
                      "foldedComponentIds": Array [
                        "Button__BaseButton-sc-32rbq-4",
                        "Button-sc-32rbq-3",
                        "Button-sc-32rbq-1",
                        "Button-sc-32rbq-2",
                        "Button-sc-32rbq-0",
                        "ModeSwitcher__SwitcherButton-sc-9lbpr3-0",
                      ],
                      "propTypes": Object {
                        "activeBackgroundColor": [Function],
                        "activeBorderColor": [Function],
                        "activeColor": [Function],
                        "backgroundColor": [Function],
                        "borderColor": [Function],
                        "boxShadowColor": [Function],
                        "focusBackgroundColor": [Function],
                        "focusBorderColor": [Function],
                        "focusColor": [Function],
                        "hoverBackgroundColor": [Function],
                        "hoverBorderColor": [Function],
                        "hoverColor": [Function],
                        "textColor": [Function],
                        "type": [Function],
                      },
                      "render": [Function],
                      "styledComponentId": "ModeSwitcher__DesktopButton-sc-9lbpr3-2",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hoverBackgroundColor="#fff"
                  hoverBorderColor="#888"
                  hoverColor="#000"
                  isActive={false}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <button
                    aria-pressed={false}
                    className="c12"
                    onClick={[Function]}
                    type="button"
                  >
                    <SvgIcon
                      color="currentColor"
                      icon="desktop"
                      size="18px"
                    >
                      <SvgIcon__StyledSvg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-desktop"
                        fill="currentColor"
                        focusable="false"
                        role="img"
                        size="18px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <StyledComponent
                          aria-hidden={true}
                          className="yoast-svg-icon yoast-svg-icon-desktop"
                          fill="currentColor"
                          focusable="false"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                "isStatic": false,
                                "lastClassName": "c13",
                                "rules": Array [
                                  "width:",
                                  [Function],
                                  ";height:",
                                  [Function],
                                  ";flex:none;",
                                ],
                              },
                              "displayName": "SvgIcon__StyledSvg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          role="img"
                          size="18px"
                          viewBox="0 0 1792 1792"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <svg
                            aria-hidden={true}
                            className="yoast-svg-icon yoast-svg-icon-desktop c13"
                            fill="currentColor"
                            focusable="false"
                            role="img"
                            size="18px"
                            viewBox="0 0 1792 1792"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
                            />
                          </svg>
                        </StyledComponent>
                      </SvgIcon__StyledSvg>
                    </SvgIcon>
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Desktop preview
                      </span>
                    </ScreenReaderText>
                  </button>
                </StyledComponent>
              </ModeSwitcher__DesktopButton>
            </div>
          </StyledComponent>
        </ModeSwitcher__Switcher>
      </ModeSwitcher>
      <SnippetEditor__EditSnippetButton
        activeBackgroundColor="#f7f7f7"
        activeBorderColor="#888"
        activeColor="#000"
        aria-expanded={true}
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        focusBackgroundColor="#fff"
        focusBorderColor="#0066cd"
        focusColor="#000"
        hoverBackgroundColor="#fff"
        hoverBorderColor="#888"
        hoverColor="#000"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <StyledComponent
          activeBackgroundColor="#f7f7f7"
          activeBorderColor="#888"
          activeColor="#000"
          aria-expanded={true}
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          focusBackgroundColor="#fff"
          focusBorderColor="#0066cd"
          focusColor="#000"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "SnippetEditor__EditSnippetButton-sc-144bmm3-1",
                "isStatic": false,
                "lastClassName": "c14",
                "rules": Array [
                  "color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";background:",
                  [Function],
                  ";box-shadow:0 1px 0 ",
                  [Function],
                  ";",
                  "&:active{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";box-shadow:inset 0 2px 5px -3px ",
                  "rgba( 0, 0, 0, 0.5 )",
                  ";}",
                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                  [Function],
                  ";color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";box-shadow:0 0 3px ",
                  "rgba( 8, 74, 103, 0.8 )",
                  ";}",
                  "&:hover{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";}",
                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                  "1px",
                  ";border-style:solid;margin:0;padding:",
                  "4px",
                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                  [Function],
                  ";overflow:visible;min-height:",
                  "32px",
                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                  "22px",
                  ";}}",
                  "height:33px;border:1px solid #dbdbdb;box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;",
                  "margin:",
                  [Function],
                  ";fill:",
                  "#555",
                  ";padding-left:8px;& svg{",
                  [Function],
                  ":7px;}",
                ],
              },
              "defaultProps": Object {
                "activeBackgroundColor": "#f7f7f7",
                "activeBorderColor": "#888",
                "activeColor": "#000",
                "backgroundColor": "#f7f7f7",
                "borderColor": "#ccc",
                "boxShadowColor": "#ccc",
                "focusBackgroundColor": "#fff",
                "focusBorderColor": "#0066cd",
                "focusColor": "#000",
                "hoverBackgroundColor": "#fff",
                "hoverBorderColor": "#888",
                "hoverColor": "#000",
                "textColor": "#555",
                "type": "button",
              },
              "displayName": "SnippetEditor__EditSnippetButton",
              "foldedComponentIds": Array [
                "Button__BaseButton-sc-32rbq-4",
                "Button-sc-32rbq-3",
                "Button-sc-32rbq-1",
                "Button-sc-32rbq-2",
                "Button-sc-32rbq-0",
                "SnippetEditor__SnippetEditorButton-sc-144bmm3-0",
              ],
              "propTypes": Object {
                "activeBackgroundColor": [Function],
                "activeBorderColor": [Function],
                "activeColor": [Function],
                "backgroundColor": [Function],
                "borderColor": [Function],
                "boxShadowColor": [Function],
                "focusBackgroundColor": [Function],
                "focusBorderColor": [Function],
                "focusColor": [Function],
                "hoverBackgroundColor": [Function],
                "hoverBorderColor": [Function],
                "hoverColor": [Function],
                "textColor": [Function],
                "type": [Function],
              },
              "render": [Function],
              "styledComponentId": "SnippetEditor__EditSnippetButton-sc-144bmm3-1",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={[Function]}
          hoverBackgroundColor="#fff"
          hoverBorderColor="#888"
          hoverColor="#000"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <button
            aria-expanded={true}
            className="c14"
            onClick={[Function]}
            type="button"
          >
            <SvgIcon
              color="currentColor"
              icon="edit"
              size="16px"
            >
              <SvgIcon__StyledSvg
                aria-hidden={true}
                className="yoast-svg-icon yoast-svg-icon-edit"
                fill="currentColor"
                focusable="false"
                role="img"
                size="16px"
                viewBox="0 0 1792 1792"
                xmlns="http://www.w3.org/2000/svg"
              >
                <StyledComponent
                  aria-hidden={true}
                  className="yoast-svg-icon yoast-svg-icon-edit"
                  fill="currentColor"
                  focusable="false"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                        "isStatic": false,
                        "lastClassName": "c15",
                        "rules": Array [
                          "width:",
                          [Function],
                          ";height:",
                          [Function],
                          ";flex:none;",
                        ],
                      },
                      "displayName": "SvgIcon__StyledSvg",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                      "target": "svg",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  role="img"
                  size="16px"
                  viewBox="0 0 1792 1792"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <svg
                    aria-hidden={true}
                    className="yoast-svg-icon yoast-svg-icon-edit c15"
                    fill="currentColor"
                    focusable="false"
                    role="img"
                    size="16px"
                    viewBox="0 0 1792 1792"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
                    />
                  </svg>
                </StyledComponent>
              </SvgIcon__StyledSvg>
            </SvgIcon>
            Edit snippet
          </button>
        </StyledComponent>
      </SnippetEditor__EditSnippetButton>
      <SnippetEditorFields
        activeField={null}
        containerPadding="0 20px"
        data={
          Object {
            "description": "Test description, %%replacement_variable%%",
            "slug": "test-slug",
            "title": "Test title",
          }
        }
        descriptionEditorFieldPlaceholder="Modify your meta description by editing it right here"
        descriptionLengthProgress={
          Object {
            "actual": 42,
            "max": 156,
            "score": 6,
          }
        }
        hoveredField={null}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        recommendedReplacementVariables={Array []}
        replacementVariables={Array []}
        titleLengthProgress={
          Object {
            "actual": 0,
            "max": 600,
            "score": 1,
          }
        }
      >
        <shared__StyledEditor
          padding="0 20px"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "shared__StyledEditor-lzs0hf-5",
                  "isStatic": false,
                  "lastClassName": "c16",
                  "rules": Array [
                    "padding:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "shared__StyledEditor",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "shared__StyledEditor-lzs0hf-5",
                "target": "section",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            padding="0 20px"
          >
            <section
              className="c16"
            >
              <shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "shared__FormSection-lzs0hf-4",
                        "isStatic": true,
                        "lastClassName": "c17",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "shared__FormSection-lzs0hf-4",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="c17"
                  >
                    <ReplacementVariableEditor
                      content="Test title"
                      editorRef={[Function]}
                      fieldId="snippet-editor-field-title"
                      isActive={false}
                      isHovered={false}
                      label="SEO title"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      recommendedReplacementVariables={Array []}
                      replacementVariables={Array []}
                      withCaret={true}
                    >
                      <shared__SimulatedLabel
                        id="21"
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared__SimulatedLabel-lzs0hf-6",
                                "isStatic": true,
                                "lastClassName": "c18",
                                "rules": Array [
                                  "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                                ],
                              },
                              "displayName": "shared__SimulatedLabel",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "shared__SimulatedLabel-lzs0hf-6",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          id="21"
                          onClick={[Function]}
                        >
                          <div
                            className="c18"
                            id="21"
                            onClick={[Function]}
                          >
                            SEO title
                          </div>
                        </StyledComponent>
                      </shared__SimulatedLabel>
                      <shared__TriggerReplacementVariableSuggestionsButton
                        activeBackgroundColor="#f7f7f7"
                        activeBorderColor="#888"
                        activeColor="#000"
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        focusBackgroundColor="#fff"
                        focusBorderColor="#0066cd"
                        focusColor="#000"
                        hoverBackgroundColor="#fff"
                        hoverBorderColor="#888"
                        hoverColor="#000"
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <StyledComponent
                          activeBackgroundColor="#f7f7f7"
                          activeBorderColor="#888"
                          activeColor="#000"
                          backgroundColor="#f7f7f7"
                          borderColor="#ccc"
                          boxShadowColor="#ccc"
                          focusBackgroundColor="#fff"
                          focusBorderColor="#0066cd"
                          focusColor="#000"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared__TriggerReplacementVariableSuggestionsButton-lzs0hf-7",
                                "isStatic": false,
                                "lastClassName": "c19",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";background:",
                                  [Function],
                                  ";box-shadow:0 1px 0 ",
                                  [Function],
                                  ";",
                                  "&:active{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";box-shadow:inset 0 2px 5px -3px ",
                                  "rgba( 0, 0, 0, 0.5 )",
                                  ";}",
                                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                                  [Function],
                                  ";color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";box-shadow:0 0 3px ",
                                  "rgba( 8, 74, 103, 0.8 )",
                                  ";}",
                                  "&:hover{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";}",
                                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                                  "1px",
                                  ";border-style:solid;margin:0;padding:",
                                  "4px",
                                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                                  [Function],
                                  ";overflow:visible;min-height:",
                                  "32px",
                                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                                  "22px",
                                  ";}}",
                                  "box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;padding-left:8px;height:33px;border:1px solid #dbdbdb;font-size:13px;& svg{",
                                  [Function],
                                  ":7px;fill:",
                                  "#555",
                                  ";}",
                                ],
                              },
                              "defaultProps": Object {
                                "activeBackgroundColor": "#f7f7f7",
                                "activeBorderColor": "#888",
                                "activeColor": "#000",
                                "backgroundColor": "#f7f7f7",
                                "borderColor": "#ccc",
                                "boxShadowColor": "#ccc",
                                "focusBackgroundColor": "#fff",
                                "focusBorderColor": "#0066cd",
                                "focusColor": "#000",
                                "hoverBackgroundColor": "#fff",
                                "hoverBorderColor": "#888",
                                "hoverColor": "#000",
                                "textColor": "#555",
                                "type": "button",
                              },
                              "displayName": "shared__TriggerReplacementVariableSuggestionsButton",
                              "foldedComponentIds": Array [
                                "Button__BaseButton-sc-32rbq-4",
                                "Button-sc-32rbq-3",
                                "Button-sc-32rbq-1",
                                "Button-sc-32rbq-2",
                                "Button-sc-32rbq-0",
                              ],
                              "propTypes": Object {
                                "activeBackgroundColor": [Function],
                                "activeBorderColor": [Function],
                                "activeColor": [Function],
                                "backgroundColor": [Function],
                                "borderColor": [Function],
                                "boxShadowColor": [Function],
                                "focusBackgroundColor": [Function],
                                "focusBorderColor": [Function],
                                "focusColor": [Function],
                                "hoverBackgroundColor": [Function],
                                "hoverBorderColor": [Function],
                                "hoverColor": [Function],
                                "textColor": [Function],
                                "type": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "shared__TriggerReplacementVariableSuggestionsButton-lzs0hf-7",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverBackgroundColor="#fff"
                          hoverBorderColor="#888"
                          hoverColor="#000"
                          onClick={[Function]}
                          textColor="#555"
                          type="button"
                        >
                          <button
                            className="c19"
                            onClick={[Function]}
                            type="button"
                          >
                            <SvgIcon
                              color="currentColor"
                              icon="plus-circle"
                              size="16px"
                            >
                              <SvgIcon__StyledSvg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="16px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <StyledComponent
                                  aria-hidden={true}
                                  className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                  fill="currentColor"
                                  focusable="false"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                        "isStatic": false,
                                        "lastClassName": "c15",
                                        "rules": Array [
                                          "width:",
                                          [Function],
                                          ";height:",
                                          [Function],
                                          ";flex:none;",
                                        ],
                                      },
                                      "displayName": "SvgIcon__StyledSvg",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                      "target": "svg",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  role="img"
                                  size="16px"
                                  viewBox="0 0 1792 1792"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="yoast-svg-icon yoast-svg-icon-plus-circle c15"
                                    fill="currentColor"
                                    focusable="false"
                                    role="img"
                                    size="16px"
                                    viewBox="0 0 1792 1792"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M1344 960v-128q0-26-19-45t-45-19h-256v-256q0-26-19-45t-45-19h-128q-26 0-45 19t-19 45v256h-256q-26 0-45 19t-19 45v128q0 26 19 45t45 19h256v256q0 26 19 45t45 19h128q26 0 45-19t19-45v-256h256q26 0 45-19t19-45zm320-64q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"
                                    />
                                  </svg>
                                </StyledComponent>
                              </SvgIcon__StyledSvg>
                            </SvgIcon>
                            Insert snippet variable
                          </button>
                        </StyledComponent>
                      </shared__TriggerReplacementVariableSuggestionsButton>
                      <shared
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {},
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared-lzs0hf-1",
                                "isStatic": false,
                                "lastClassName": "c20",
                                "rules": Array [
                                  "flex:0 1 100%;border:1px solid ",
                                  [Function],
                                  ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                  [Function],
                                  ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                  ".public-DraftStyleDefault-block{line-height:24px;}",
                                  "&::before{display:block;position:absolute;top:-1px;",
                                  [Function],
                                  ":-25px;width:24px;height:24px;background-image:url( ",
                                  [Function],
                                  " );background-size:25px;content:\\"\\";}",
                                ],
                              },
                              "displayName": "shared",
                              "foldedComponentIds": Array [
                                "shared__InputContainer-lzs0hf-0",
                                "shared__TitleInputContainer-lzs0hf-2",
                              ],
                              "render": [Function],
                              "styledComponentId": "shared-lzs0hf-1",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isActive={false}
                          isHovered={false}
                          onClick={[Function]}
                        >
                          <div
                            className="c20"
                            onClick={[Function]}
                          >
                            <ReplacementVariableEditorStandalone
                              ariaLabelledBy="21"
                              content="Test title"
                              fieldId="snippet-editor-field-title"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              recommendedReplacementVariables={Array []}
                              replacementVariables={Array []}
                            >
                              <div />
                            </ReplacementVariableEditorStandalone>
                          </div>
                        </StyledComponent>
                      </shared>
                    </ReplacementVariableEditor>
                    <ProgressBar
                      aria-hidden="true"
                      backgroundColor="#f7f7f7"
                      borderColor="#ddd"
                      max={600}
                      progressColor="#dc3232"
                      value={0}
                    >
                      <StyledComponent
                        aria-hidden="true"
                        backgroundColor="#f7f7f7"
                        borderColor="#ddd"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ProgressBar-sc-9g9yx6-0",
                              "isStatic": false,
                              "lastClassName": "c25",
                              "rules": Array [
                                "box-sizing:border-box;width:100%;height:8px;display:block;margin-top:8px;appearance:none;background-color:",
                                [Function],
                                ";border:1px solid ",
                                [Function],
                                ";::-webkit-progress-bar{background-color:",
                                [Function],
                                ";}::-webkit-progress-value{background-color:",
                                [Function],
                                ";transition:width 250ms;}::-moz-progress-bar{background-color:",
                                [Function],
                                ";}::-ms-fill{background-color:",
                                [Function],
                                ";border:0;}",
                              ],
                            },
                            "defaultProps": Object {
                              "aria-hidden": "true",
                              "backgroundColor": "#f7f7f7",
                              "borderColor": "#ddd",
                              "max": 1,
                              "progressColor": "#7ad03a",
                              "value": 0,
                            },
                            "displayName": "ProgressBar",
                            "foldedComponentIds": Array [],
                            "propTypes": Object {
                              "aria-hidden": [Function],
                              "backgroundColor": [Function],
                              "borderColor": [Function],
                              "max": [Function],
                              "progressColor": [Function],
                              "value": [Function],
                            },
                            "render": [Function],
                            "styledComponentId": "ProgressBar-sc-9g9yx6-0",
                            "target": "progress",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        max={600}
                        progressColor="#dc3232"
                        value={0}
                      >
                        <progress
                          aria-hidden="true"
                          className="c21"
                          max={600}
                          value={0}
                        />
                      </StyledComponent>
                    </ProgressBar>
                  </div>
                </StyledComponent>
              </shared__FormSection>
              <shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "shared__FormSection-lzs0hf-4",
                        "isStatic": true,
                        "lastClassName": "c17",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "shared__FormSection-lzs0hf-4",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="c17"
                  >
                    <shared__SimulatedLabel
                      id="snippet-editor-field-20-slug"
                      onClick={[Function]}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "shared__SimulatedLabel-lzs0hf-6",
                              "isStatic": true,
                              "lastClassName": "c18",
                              "rules": Array [
                                "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                              ],
                            },
                            "displayName": "shared__SimulatedLabel",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "shared__SimulatedLabel-lzs0hf-6",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        id="snippet-editor-field-20-slug"
                        onClick={[Function]}
                      >
                        <div
                          className="c18"
                          id="snippet-editor-field-20-slug"
                          onClick={[Function]}
                        >
                          Slug
                        </div>
                      </StyledComponent>
                    </shared__SimulatedLabel>
                    <shared
                      isActive={false}
                      isHovered={false}
                      onClick={[Function]}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [
                              Object {},
                            ],
                            "componentStyle": ComponentStyle {
                              "componentId": "shared-lzs0hf-1",
                              "isStatic": false,
                              "lastClassName": "c22",
                              "rules": Array [
                                "flex:0 1 100%;border:1px solid ",
                                [Function],
                                ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                [Function],
                                ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                "&::before{display:block;position:absolute;top:-1px;",
                                [Function],
                                ":-25px;width:24px;height:24px;background-image:url( ",
                                [Function],
                                " );background-size:25px;content:\\"\\";}",
                              ],
                            },
                            "displayName": "shared",
                            "foldedComponentIds": Array [
                              "shared__InputContainer-lzs0hf-0",
                            ],
                            "render": [Function],
                            "styledComponentId": "shared-lzs0hf-1",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <div
                          className="c22"
                          onClick={[Function]}
                        >
                          <SnippetEditorFields__SlugInput
                            aria-labelledby="snippet-editor-field-20-slug"
                            id="snippet-editor-field-slug"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            value="test-slug"
                          >
                            <StyledComponent
                              aria-labelledby="snippet-editor-field-20-slug"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "SnippetEditorFields__SlugInput-sc-1ioqi3y-0",
                                    "isStatic": true,
                                    "lastClassName": "c23",
                                    "rules": Array [
                                      "border:none;width:100%;height:inherit;line-height:inherit;font-family:inherit;font-size:inherit;color:inherit;&:focus{outline:0;}",
                                    ],
                                  },
                                  "displayName": "SnippetEditorFields__SlugInput",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "SnippetEditorFields__SlugInput-sc-1ioqi3y-0",
                                  "target": "input",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={[Function]}
                              id="snippet-editor-field-slug"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              value="test-slug"
                            >
                              <input
                                aria-labelledby="snippet-editor-field-20-slug"
                                className="c23"
                                id="snippet-editor-field-slug"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                value="test-slug"
                              />
                            </StyledComponent>
                          </SnippetEditorFields__SlugInput>
                        </div>
                      </StyledComponent>
                    </shared>
                  </div>
                </StyledComponent>
              </shared__FormSection>
              <shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "shared__FormSection-lzs0hf-4",
                        "isStatic": true,
                        "lastClassName": "c17",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "shared__FormSection-lzs0hf-4",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="c17"
                  >
                    <ReplacementVariableEditor
                      content="Test description, %%replacement_variable%%"
                      editorRef={[Function]}
                      fieldId="snippet-editor-field-description"
                      isActive={false}
                      isHovered={false}
                      label="Meta description"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      placeholder="Modify your meta description by editing it right here"
                      recommendedReplacementVariables={Array []}
                      replacementVariables={Array []}
                      type="description"
                      withCaret={true}
                    >
                      <shared__SimulatedLabel
                        id="22"
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared__SimulatedLabel-lzs0hf-6",
                                "isStatic": true,
                                "lastClassName": "c18",
                                "rules": Array [
                                  "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                                ],
                              },
                              "displayName": "shared__SimulatedLabel",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "shared__SimulatedLabel-lzs0hf-6",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          id="22"
                          onClick={[Function]}
                        >
                          <div
                            className="c18"
                            id="22"
                            onClick={[Function]}
                          >
                            Meta description
                          </div>
                        </StyledComponent>
                      </shared__SimulatedLabel>
                      <shared__TriggerReplacementVariableSuggestionsButton
                        activeBackgroundColor="#f7f7f7"
                        activeBorderColor="#888"
                        activeColor="#000"
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        focusBackgroundColor="#fff"
                        focusBorderColor="#0066cd"
                        focusColor="#000"
                        hoverBackgroundColor="#fff"
                        hoverBorderColor="#888"
                        hoverColor="#000"
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <StyledComponent
                          activeBackgroundColor="#f7f7f7"
                          activeBorderColor="#888"
                          activeColor="#000"
                          backgroundColor="#f7f7f7"
                          borderColor="#ccc"
                          boxShadowColor="#ccc"
                          focusBackgroundColor="#fff"
                          focusBorderColor="#0066cd"
                          focusColor="#000"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared__TriggerReplacementVariableSuggestionsButton-lzs0hf-7",
                                "isStatic": false,
                                "lastClassName": "c19",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";background:",
                                  [Function],
                                  ";box-shadow:0 1px 0 ",
                                  [Function],
                                  ";",
                                  "&:active{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";box-shadow:inset 0 2px 5px -3px ",
                                  "rgba( 0, 0, 0, 0.5 )",
                                  ";}",
                                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                                  [Function],
                                  ";color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";box-shadow:0 0 3px ",
                                  "rgba( 8, 74, 103, 0.8 )",
                                  ";}",
                                  "&:hover{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";}",
                                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                                  "1px",
                                  ";border-style:solid;margin:0;padding:",
                                  "4px",
                                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                                  [Function],
                                  ";overflow:visible;min-height:",
                                  "32px",
                                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                                  "22px",
                                  ";}}",
                                  "box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;padding-left:8px;height:33px;border:1px solid #dbdbdb;font-size:13px;& svg{",
                                  [Function],
                                  ":7px;fill:",
                                  "#555",
                                  ";}",
                                ],
                              },
                              "defaultProps": Object {
                                "activeBackgroundColor": "#f7f7f7",
                                "activeBorderColor": "#888",
                                "activeColor": "#000",
                                "backgroundColor": "#f7f7f7",
                                "borderColor": "#ccc",
                                "boxShadowColor": "#ccc",
                                "focusBackgroundColor": "#fff",
                                "focusBorderColor": "#0066cd",
                                "focusColor": "#000",
                                "hoverBackgroundColor": "#fff",
                                "hoverBorderColor": "#888",
                                "hoverColor": "#000",
                                "textColor": "#555",
                                "type": "button",
                              },
                              "displayName": "shared__TriggerReplacementVariableSuggestionsButton",
                              "foldedComponentIds": Array [
                                "Button__BaseButton-sc-32rbq-4",
                                "Button-sc-32rbq-3",
                                "Button-sc-32rbq-1",
                                "Button-sc-32rbq-2",
                                "Button-sc-32rbq-0",
                              ],
                              "propTypes": Object {
                                "activeBackgroundColor": [Function],
                                "activeBorderColor": [Function],
                                "activeColor": [Function],
                                "backgroundColor": [Function],
                                "borderColor": [Function],
                                "boxShadowColor": [Function],
                                "focusBackgroundColor": [Function],
                                "focusBorderColor": [Function],
                                "focusColor": [Function],
                                "hoverBackgroundColor": [Function],
                                "hoverBorderColor": [Function],
                                "hoverColor": [Function],
                                "textColor": [Function],
                                "type": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "shared__TriggerReplacementVariableSuggestionsButton-lzs0hf-7",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverBackgroundColor="#fff"
                          hoverBorderColor="#888"
                          hoverColor="#000"
                          onClick={[Function]}
                          textColor="#555"
                          type="button"
                        >
                          <button
                            className="c19"
                            onClick={[Function]}
                            type="button"
                          >
                            <SvgIcon
                              color="currentColor"
                              icon="plus-circle"
                              size="16px"
                            >
                              <SvgIcon__StyledSvg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="16px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <StyledComponent
                                  aria-hidden={true}
                                  className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                  fill="currentColor"
                                  focusable="false"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                        "isStatic": false,
                                        "lastClassName": "c15",
                                        "rules": Array [
                                          "width:",
                                          [Function],
                                          ";height:",
                                          [Function],
                                          ";flex:none;",
                                        ],
                                      },
                                      "displayName": "SvgIcon__StyledSvg",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                      "target": "svg",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  role="img"
                                  size="16px"
                                  viewBox="0 0 1792 1792"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="yoast-svg-icon yoast-svg-icon-plus-circle c15"
                                    fill="currentColor"
                                    focusable="false"
                                    role="img"
                                    size="16px"
                                    viewBox="0 0 1792 1792"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M1344 960v-128q0-26-19-45t-45-19h-256v-256q0-26-19-45t-45-19h-128q-26 0-45 19t-19 45v256h-256q-26 0-45 19t-19 45v128q0 26 19 45t45 19h256v256q0 26 19 45t45 19h128q26 0 45-19t19-45v-256h256q26 0 45-19t19-45zm320-64q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"
                                    />
                                  </svg>
                                </StyledComponent>
                              </SvgIcon__StyledSvg>
                            </SvgIcon>
                            Insert snippet variable
                          </button>
                        </StyledComponent>
                      </shared__TriggerReplacementVariableSuggestionsButton>
                      <shared
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {},
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared-lzs0hf-1",
                                "isStatic": false,
                                "lastClassName": "kunpcg",
                                "rules": Array [
                                  "flex:0 1 100%;border:1px solid ",
                                  [Function],
                                  ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                  [Function],
                                  ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                  "min-height:72px;padding:2px 6px;line-height:24px;.public-DraftEditorPlaceholder-root{color:",
                                  "#616161",
                                  ";}.public-DraftEditorPlaceholder-hasFocus{color:",
                                  "#616161",
                                  ";}",
                                  "&::before{display:block;position:absolute;top:-1px;",
                                  [Function],
                                  ":-25px;width:24px;height:24px;background-image:url( ",
                                  [Function],
                                  " );background-size:25px;content:\\"\\";}",
                                ],
                              },
                              "displayName": "shared",
                              "foldedComponentIds": Array [
                                "shared__InputContainer-lzs0hf-0",
                                "shared__DescriptionInputContainer-lzs0hf-3",
                              ],
                              "render": [Function],
                              "styledComponentId": "shared-lzs0hf-1",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isActive={false}
                          isHovered={false}
                          onClick={[Function]}
                        >
                          <div
                            className="c24"
                            onClick={[Function]}
                          >
                            <ReplacementVariableEditorStandalone
                              ariaLabelledBy="22"
                              content="Test description, %%replacement_variable%%"
                              fieldId="snippet-editor-field-description"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              placeholder="Modify your meta description by editing it right here"
                              recommendedReplacementVariables={Array []}
                              replacementVariables={Array []}
                            >
                              <div />
                            </ReplacementVariableEditorStandalone>
                          </div>
                        </StyledComponent>
                      </shared>
                    </ReplacementVariableEditor>
                    <ProgressBar
                      aria-hidden="true"
                      backgroundColor="#f7f7f7"
                      borderColor="#ddd"
                      max={156}
                      progressColor="#ee7c1b"
                      value={42}
                    >
                      <StyledComponent
                        aria-hidden="true"
                        backgroundColor="#f7f7f7"
                        borderColor="#ddd"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ProgressBar-sc-9g9yx6-0",
                              "isStatic": false,
                              "lastClassName": "c25",
                              "rules": Array [
                                "box-sizing:border-box;width:100%;height:8px;display:block;margin-top:8px;appearance:none;background-color:",
                                [Function],
                                ";border:1px solid ",
                                [Function],
                                ";::-webkit-progress-bar{background-color:",
                                [Function],
                                ";}::-webkit-progress-value{background-color:",
                                [Function],
                                ";transition:width 250ms;}::-moz-progress-bar{background-color:",
                                [Function],
                                ";}::-ms-fill{background-color:",
                                [Function],
                                ";border:0;}",
                              ],
                            },
                            "defaultProps": Object {
                              "aria-hidden": "true",
                              "backgroundColor": "#f7f7f7",
                              "borderColor": "#ddd",
                              "max": 1,
                              "progressColor": "#7ad03a",
                              "value": 0,
                            },
                            "displayName": "ProgressBar",
                            "foldedComponentIds": Array [],
                            "propTypes": Object {
                              "aria-hidden": [Function],
                              "backgroundColor": [Function],
                              "borderColor": [Function],
                              "max": [Function],
                              "progressColor": [Function],
                              "value": [Function],
                            },
                            "render": [Function],
                            "styledComponentId": "ProgressBar-sc-9g9yx6-0",
                            "target": "progress",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        max={156}
                        progressColor="#ee7c1b"
                        value={42}
                      >
                        <progress
                          aria-hidden="true"
                          className="c25"
                          max={156}
                          value={42}
                        />
                      </StyledComponent>
                    </ProgressBar>
                  </div>
                </StyledComponent>
              </shared__FormSection>
            </section>
          </StyledComponent>
        </shared__StyledEditor>
      </SnippetEditorFields>
      <SnippetEditor__CloseEditorButton
        activeBackgroundColor="#f7f7f7"
        activeBorderColor="#888"
        activeColor="#000"
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        focusBackgroundColor="#fff"
        focusBorderColor="#0066cd"
        focusColor="#000"
        hoverBackgroundColor="#fff"
        hoverBorderColor="#888"
        hoverColor="#000"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <StyledComponent
          activeBackgroundColor="#f7f7f7"
          activeBorderColor="#888"
          activeColor="#000"
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          focusBackgroundColor="#fff"
          focusBorderColor="#0066cd"
          focusColor="#000"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "SnippetEditor__CloseEditorButton-sc-144bmm3-2",
                "isStatic": false,
                "lastClassName": "c26",
                "rules": Array [
                  "color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";background:",
                  [Function],
                  ";box-shadow:0 1px 0 ",
                  [Function],
                  ";",
                  "&:active{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";box-shadow:inset 0 2px 5px -3px ",
                  "rgba( 0, 0, 0, 0.5 )",
                  ";}",
                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                  [Function],
                  ";color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";box-shadow:0 0 3px ",
                  "rgba( 8, 74, 103, 0.8 )",
                  ";}",
                  "&:hover{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";}",
                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                  "1px",
                  ";border-style:solid;margin:0;padding:",
                  "4px",
                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                  [Function],
                  ";overflow:visible;min-height:",
                  "32px",
                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                  "22px",
                  ";}}",
                  "height:33px;border:1px solid #dbdbdb;box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;",
                  "margin-top:24px;",
                ],
              },
              "defaultProps": Object {
                "activeBackgroundColor": "#f7f7f7",
                "activeBorderColor": "#888",
                "activeColor": "#000",
                "backgroundColor": "#f7f7f7",
                "borderColor": "#ccc",
                "boxShadowColor": "#ccc",
                "focusBackgroundColor": "#fff",
                "focusBorderColor": "#0066cd",
                "focusColor": "#000",
                "hoverBackgroundColor": "#fff",
                "hoverBorderColor": "#888",
                "hoverColor": "#000",
                "textColor": "#555",
                "type": "button",
              },
              "displayName": "SnippetEditor__CloseEditorButton",
              "foldedComponentIds": Array [
                "Button__BaseButton-sc-32rbq-4",
                "Button-sc-32rbq-3",
                "Button-sc-32rbq-1",
                "Button-sc-32rbq-2",
                "Button-sc-32rbq-0",
                "SnippetEditor__SnippetEditorButton-sc-144bmm3-0",
              ],
              "propTypes": Object {
                "activeBackgroundColor": [Function],
                "activeBorderColor": [Function],
                "activeColor": [Function],
                "backgroundColor": [Function],
                "borderColor": [Function],
                "boxShadowColor": [Function],
                "focusBackgroundColor": [Function],
                "focusBorderColor": [Function],
                "focusColor": [Function],
                "hoverBackgroundColor": [Function],
                "hoverBorderColor": [Function],
                "hoverColor": [Function],
                "textColor": [Function],
                "type": [Function],
              },
              "render": [Function],
              "styledComponentId": "SnippetEditor__CloseEditorButton-sc-144bmm3-2",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          hoverBackgroundColor="#fff"
          hoverBorderColor="#888"
          hoverColor="#000"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <button
            className="c26"
            onClick={[Function]}
            type="button"
          >
            Close snippet editor
          </button>
        </StyledComponent>
      </SnippetEditor__CloseEditorButton>
    </div>
  </ErrorBoundary>
</SnippetEditor>
`;

exports[`SnippetEditor closes when calling close() 1`] = `
.c21 {
  box-sizing: border-box;
  width: 100%;
  height: 8px;
  display: block;
  margin-top: 8px;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background-color: #f7f7f7;
  border: 1px solid #ddd;
}

.c21::-webkit-progress-bar {
  background-color: #f7f7f7;
}

.c21::-webkit-progress-value {
  background-color: #dc3232;
  -webkit-transition: width 250ms;
  transition: width 250ms;
}

.c21::-moz-progress-bar {
  background-color: #dc3232;
}

.c21::-ms-fill {
  background-color: #dc3232;
  border: 0;
}

.c25 {
  box-sizing: border-box;
  width: 100%;
  height: 8px;
  display: block;
  margin-top: 8px;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background-color: #f7f7f7;
  border: 1px solid #ddd;
}

.c25::-webkit-progress-bar {
  background-color: #f7f7f7;
}

.c25::-webkit-progress-value {
  background-color: #ee7c1b;
  -webkit-transition: width 250ms;
  transition: width 250ms;
}

.c25::-moz-progress-bar {
  background-color: #ee7c1b;
}

.c25::-ms-fill {
  background-color: #ee7c1b;
  border: 0;
}

.c17 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  margin: 24px 0 0 0;
}

.c16 {
  padding: 0 20px;
}

.c18 {
  -webkit-flex: 1 1 200px;
  -ms-flex: 1 1 200px;
  flex: 1 1 200px;
  min-width: 200px;
  cursor: pointer;
  font-size: 16px;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin: 4px 0;
}

.c19 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  padding-left: 8px;
  height: 33px;
  border: 1px solid #dbdbdb;
  font-size: 13px;
}

.c19:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c19::-moz-focus-inner {
  border-width: 0;
}

.c19:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c19:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c19 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c19 svg {
  margin-right: 7px;
  fill: #555;
}

.c0 {
  border-bottom: 1px hidden #fff;
  border-radius: 2px;
  box-shadow: 0 1px 2px rgba(0,0,0,.2);
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  max-width: 600px;
  box-sizing: border-box;
  font-size: 14px;
}

.c2 {
  cursor: pointer;
  position: relative;
}

.c3 {
  color: #1e0fbe;
  -webkit-text-decoration: none;
  text-decoration: none;
  font-size: 18px;
  line-height: 1.2;
  font-weight: normal;
  margin: 0;
  display: inline-block;
  overflow: hidden;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c4 {
  display: inline-block;
  font-size: 16px;
  line-height: 1.2em;
  max-height: 2.4em;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c5 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  white-space: nowrap;
  font-size: 14px;
}

.c6 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  white-space: nowrap;
  font-size: 14px;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 100%;
}

.c8 {
  color: #545454;
  cursor: pointer;
  position: relative;
  max-width: 600px;
  font-size: 13px;
  font-size: 14px;
  line-height: 20px;
}

.c1 {
  padding: 8px 16px;
}

.c7 {
  border: 0;
  border-bottom: 1px solid #DFE1E5;
  margin: 0;
}

.c23 {
  border: none;
  width: 100%;
  height: inherit;
  line-height: inherit;
  font-family: inherit;
  font-size: inherit;
  color: inherit;
}

.c23:focus {
  outline: 0;
}

.c20 {
  -webkit-flex: 0 1 100%;
  -ms-flex: 0 1 100%;
  flex: 0 1 100%;
  border: 1px solid #ddd;
  padding: 3px 5px;
  box-sizing: border-box;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  cursor: text;
}

.c20 .public-DraftStyleDefault-block {
  line-height: 24px;
}

.c20::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width%3D%221792%22%20height%3D%221792%22%20viewBox%3D%220%200%201792%201792%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20fill%3D%22transparent%22%20d%3D%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20%2F%3E%3C%2Fsvg%3E );
  background-size: 25px;
  content: "";
}

.c22 {
  -webkit-flex: 0 1 100%;
  -ms-flex: 0 1 100%;
  flex: 0 1 100%;
  border: 1px solid #ddd;
  padding: 3px 5px;
  box-sizing: border-box;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  cursor: text;
}

.c22::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width%3D%221792%22%20height%3D%221792%22%20viewBox%3D%220%200%201792%201792%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20fill%3D%22transparent%22%20d%3D%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20%2F%3E%3C%2Fsvg%3E );
  background-size: 25px;
  content: "";
}

.c24 {
  -webkit-flex: 0 1 100%;
  -ms-flex: 0 1 100%;
  flex: 0 1 100%;
  border: 1px solid #ddd;
  padding: 3px 5px;
  box-sizing: border-box;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  cursor: text;
  min-height: 72px;
  padding: 2px 6px;
  line-height: 24px;
}

.c24 .public-DraftEditorPlaceholder-root {
  color: #616161;
}

.c24 .public-DraftEditorPlaceholder-hasFocus {
  color: #616161;
}

.c24::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width%3D%221792%22%20height%3D%221792%22%20viewBox%3D%220%200%201792%201792%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20fill%3D%22transparent%22%20d%3D%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20%2F%3E%3C%2Fsvg%3E );
  background-size: 25px;
  content: "";
}

.c10 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: #555;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 3px 0 0 3px;
}

.c10:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c10::-moz-focus-inner {
  border-width: 0;
}

.c10:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c10:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c10 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c10:hover,
.c10:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
  box-shadow: none;
}

.c12 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: transparent;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 0 3px 3px 0;
}

.c12:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c12::-moz-focus-inner {
  border-width: 0;
}

.c12:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c12:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c12 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c12:hover,
.c12:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
  box-shadow: none;
}

.c9 {
  display: inline-block;
  margin-top: 10px;
  border: 1px solid #dbdbdb;
  border-radius: 4px;
  background-color: #f7f7f7;
  vertical-align: top;
}

.c14 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin: 10px 0 0 4px;
  fill: #555;
  padding-left: 8px;
}

.c14:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c14::-moz-focus-inner {
  border-width: 0;
}

.c14:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c14:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c14 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c14 svg {
  margin-right: 7px;
}

.c26 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin-top: 24px;
}

.c26:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c26::-moz-focus-inner {
  border-width: 0;
}

.c26:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c26:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c26 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c11 {
  width: 22px;
  height: 22px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c13 {
  width: 18px;
  height: 18px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c15 {
  width: 16px;
  height: 16px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c19::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c10::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c12::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c14::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c26::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

<SnippetEditor
  baseUrl="http://example.org/"
  data={
    Object {
      "description": "Test description, %%replacement_variable%%",
      "slug": "test-slug",
      "title": "Test title",
    }
  }
  date=""
  descriptionEditorFieldPlaceholder=""
  descriptionLengthProgress={
    Object {
      "actual": 0,
      "max": 156,
      "score": 0,
    }
  }
  hasPaperStyle={true}
  locale="en"
  mapEditorDataToPreview={null}
  mode="mobile"
  onChange={[MockFunction]}
  onChangeAnalysisData={[Function]}
  recommendedReplacementVariables={Array []}
  replacementVariables={Array []}
  showCloseButton={true}
  titleLengthProgress={
    Object {
      "actual": 0,
      "max": 600,
      "score": 0,
    }
  }
  wordsToHighlight={Array []}
>
  <ErrorBoundary>
    <div>
      <SnippetPreview
        activeField={null}
        breadcrumbs={null}
        date=""
        description="Test description, %%replacement_variable%%"
        hoveredField={null}
        isAmp={false}
        keyword=""
        locale="en"
        mode="mobile"
        onHover={[Function]}
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        title="Test title"
        url="example.org/test-slug"
        wordsToHighlight={Array []}
      >
        <section>
          <SnippetPreview__MobileContainer
            padding={20}
            width={640}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "SnippetPreview__MobileContainer-sc-1hxg8jo-1",
                    "isStatic": true,
                    "lastClassName": "c0",
                    "rules": Array [
                      "border-bottom:1px hidden #fff;border-radius:2px;box-shadow:0 1px 2px rgba(0,0,0,.2);font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;max-width:",
                      "600",
                      "px;box-sizing:border-box;font-size:14px;",
                    ],
                  },
                  "displayName": "SnippetPreview__MobileContainer",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "SnippetPreview__MobileContainer-sc-1hxg8jo-1",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              padding={20}
              width={640}
            >
              <div
                className="c0"
                width={640}
              >
                <SnippetPreview__MobilePartContainer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__MobilePartContainer-sc-1hxg8jo-12",
                          "isStatic": true,
                          "lastClassName": "c1",
                          "rules": Array [
                            "padding:8px 16px;",
                          ],
                        },
                        "displayName": "SnippetPreview__MobilePartContainer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__MobilePartContainer-sc-1hxg8jo-12",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="c1"
                    >
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          SEO title preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__BaseTitle
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__BaseTitle-sc-1hxg8jo-2",
                                "isStatic": true,
                                "lastClassName": "c2",
                                "rules": Array [
                                  "cursor:pointer;position:relative;",
                                ],
                              },
                              "displayName": "SnippetPreview__BaseTitle",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__BaseTitle-sc-1hxg8jo-2",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                        >
                          <div
                            className="c2"
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                          >
                            <SnippetPreview__TitleBounded>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__TitleBounded-sc-1hxg8jo-5",
                                      "isStatic": true,
                                      "lastClassName": "c3",
                                      "rules": Array [
                                        "color:",
                                        "#1e0fbe",
                                        ";text-decoration:none;font-size:18px;line-height:1.2;font-weight:normal;margin:0;display:inline-block;overflow:hidden;max-width:",
                                        "600",
                                        "px;vertical-align:top;text-overflow:ellipsis;",
                                        "max-width:",
                                        "600",
                                        "px;vertical-align:top;text-overflow:ellipsis;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__TitleBounded",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__Title-sc-1hxg8jo-4",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__TitleBounded-sc-1hxg8jo-5",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="c3"
                                >
                                  <SnippetPreview__TitleUnboundedMobile>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "SnippetPreview__TitleUnboundedMobile-sc-1hxg8jo-7",
                                            "isStatic": true,
                                            "lastClassName": "c4",
                                            "rules": Array [
                                              "display:inline-block;font-size:16px;line-height:1.2em;max-height:2.4em;overflow:hidden;text-overflow:ellipsis;",
                                            ],
                                          },
                                          "displayName": "SnippetPreview__TitleUnboundedMobile",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "SnippetPreview__TitleUnboundedMobile-sc-1hxg8jo-7",
                                          "target": "span",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={[Function]}
                                    >
                                      <span
                                        className="c4"
                                      >
                                        Test title
                                      </span>
                                    </StyledComponent>
                                  </SnippetPreview__TitleUnboundedMobile>
                                </div>
                              </StyledComponent>
                            </SnippetPreview__TitleBounded>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__BaseTitle>
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          Url preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__BaseUrl>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__BaseUrl-sc-1hxg8jo-8",
                                "isStatic": true,
                                "lastClassName": "c5",
                                "rules": Array [
                                  "display:inline-block;color:",
                                  "#006621",
                                  ";cursor:pointer;position:relative;max-width:90%;white-space:nowrap;font-size:14px;",
                                ],
                              },
                              "displayName": "SnippetPreview__BaseUrl",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__BaseUrl-sc-1hxg8jo-8",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <div
                            className="c5"
                          >
                            <SnippetPreview__BaseUrlOverflowContainer
                              onMouseEnter={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__BaseUrlOverflowContainer-sc-1hxg8jo-9",
                                      "isStatic": true,
                                      "lastClassName": "c6",
                                      "rules": Array [
                                        "display:inline-block;color:",
                                        "#006621",
                                        ";cursor:pointer;position:relative;max-width:90%;white-space:nowrap;font-size:14px;",
                                        "overflow:hidden;text-overflow:ellipsis;max-width:100%;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__BaseUrlOverflowContainer",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__BaseUrl-sc-1hxg8jo-8",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__BaseUrlOverflowContainer-sc-1hxg8jo-9",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                onMouseEnter={[Function]}
                                onMouseLeave={[Function]}
                                onMouseUp={[Function]}
                              >
                                <div
                                  className="c6"
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseUp={[Function]}
                                >
                                  example.org â€º test-slug
                                </div>
                              </StyledComponent>
                            </SnippetPreview__BaseUrlOverflowContainer>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__BaseUrl>
                    </div>
                  </StyledComponent>
                </SnippetPreview__MobilePartContainer>
                <SnippetPreview__Separator>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__Separator-sc-1hxg8jo-16",
                          "isStatic": true,
                          "lastClassName": "c7",
                          "rules": Array [
                            "border:0;border-bottom:1px solid #DFE1E5;margin:0;",
                          ],
                        },
                        "displayName": "SnippetPreview__Separator",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__Separator-sc-1hxg8jo-16",
                        "target": "hr",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <hr
                      className="c7"
                    />
                  </StyledComponent>
                </SnippetPreview__Separator>
                <SnippetPreview__MobilePartContainer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__MobilePartContainer-sc-1hxg8jo-12",
                          "isStatic": true,
                          "lastClassName": "c1",
                          "rules": Array [
                            "padding:8px 16px;",
                          ],
                        },
                        "displayName": "SnippetPreview__MobilePartContainer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__MobilePartContainer-sc-1hxg8jo-12",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="c1"
                    >
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          Meta description preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__MobileDescription
                        isDescriptionPlaceholder={false}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__MobileDescription-sc-1hxg8jo-11",
                                "isStatic": false,
                                "lastClassName": "c8",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";cursor:pointer;position:relative;max-width:",
                                  "600",
                                  "px;font-size:13px;",
                                  "font-size:14px;line-height:20px;",
                                ],
                              },
                              "displayName": "SnippetPreview__MobileDescription",
                              "foldedComponentIds": Array [
                                "SnippetPreview__DesktopDescription-sc-1hxg8jo-10",
                              ],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__MobileDescription-sc-1hxg8jo-11",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isDescriptionPlaceholder={false}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                        >
                          <div
                            className="c8"
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                          >
                            <SnippetPreview__MobileDescription
                              isDescriptionPlaceholder={false}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__MobileDescription-sc-1hxg8jo-11",
                                      "isStatic": false,
                                      "lastClassName": "c8",
                                      "rules": Array [
                                        "color:",
                                        [Function],
                                        ";cursor:pointer;position:relative;max-width:",
                                        "600",
                                        "px;font-size:13px;",
                                        "font-size:14px;line-height:20px;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__MobileDescription",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__DesktopDescription-sc-1hxg8jo-10",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__MobileDescription-sc-1hxg8jo-11",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={[Function]}
                                isDescriptionPlaceholder={false}
                              >
                                <div
                                  className="c8"
                                >
                                  Test description, %%replacement_variable%%
                                </div>
                              </StyledComponent>
                            </SnippetPreview__MobileDescription>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__MobileDescription>
                    </div>
                  </StyledComponent>
                </SnippetPreview__MobilePartContainer>
              </div>
            </StyledComponent>
          </SnippetPreview__MobileContainer>
        </section>
      </SnippetPreview>
      <ModeSwitcher
        active="mobile"
        onChange={[Function]}
      >
        <ModeSwitcher__Switcher>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "ModeSwitcher__Switcher-sc-9lbpr3-3",
                  "isStatic": true,
                  "lastClassName": "c9",
                  "rules": Array [
                    "display:inline-block;margin-top:10px;border:1px solid #dbdbdb;border-radius:4px;background-color:#f7f7f7;vertical-align:top;",
                  ],
                },
                "displayName": "ModeSwitcher__Switcher",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModeSwitcher__Switcher-sc-9lbpr3-3",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="c9"
            >
              <ModeSwitcher__MobileButton
                activeBackgroundColor="#f7f7f7"
                activeBorderColor="#888"
                activeColor="#000"
                aria-pressed={true}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                focusBackgroundColor="#fff"
                focusBorderColor="#0066cd"
                focusColor="#000"
                hoverBackgroundColor="#fff"
                hoverBorderColor="#888"
                hoverColor="#000"
                isActive={true}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <StyledComponent
                  activeBackgroundColor="#f7f7f7"
                  activeBorderColor="#888"
                  activeColor="#000"
                  aria-pressed={true}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  focusBackgroundColor="#fff"
                  focusBorderColor="#0066cd"
                  focusColor="#000"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "ModeSwitcher__MobileButton-sc-9lbpr3-1",
                        "isStatic": false,
                        "lastClassName": "c10",
                        "rules": Array [
                          "color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";box-shadow:0 1px 0 ",
                          [Function],
                          ";",
                          "&:active{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";box-shadow:inset 0 2px 5px -3px ",
                          "rgba( 0, 0, 0, 0.5 )",
                          ";}",
                          "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                          [Function],
                          ";color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";box-shadow:0 0 3px ",
                          "rgba( 8, 74, 103, 0.8 )",
                          ";}",
                          "&:hover{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";}",
                          "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                          "1px",
                          ";border-style:solid;margin:0;padding:",
                          "4px",
                          " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                          [Function],
                          ";overflow:visible;min-height:",
                          "32px",
                          ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                          "22px",
                          ";}}",
                          "border:none;border-bottom:4px solid transparent;width:31px;height:31px;border-color:",
                          [Function],
                          ";color:",
                          "#555",
                          ";transition:0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;transition-property:border-color;&:hover,&:focus{background-color:",
                          "#fff",
                          ";border:none;border-bottom:4px solid transparent;border-color:",
                          "#1e8cbe",
                          ";color:",
                          "#1e8cbe",
                          ";box-shadow:none;}",
                          "border-radius:3px 0 0 3px;",
                        ],
                      },
                      "defaultProps": Object {
                        "activeBackgroundColor": "#f7f7f7",
                        "activeBorderColor": "#888",
                        "activeColor": "#000",
                        "backgroundColor": "#f7f7f7",
                        "borderColor": "#ccc",
                        "boxShadowColor": "#ccc",
                        "focusBackgroundColor": "#fff",
                        "focusBorderColor": "#0066cd",
                        "focusColor": "#000",
                        "hoverBackgroundColor": "#fff",
                        "hoverBorderColor": "#888",
                        "hoverColor": "#000",
                        "textColor": "#555",
                        "type": "button",
                      },
                      "displayName": "ModeSwitcher__MobileButton",
                      "foldedComponentIds": Array [
                        "Button__BaseButton-sc-32rbq-4",
                        "Button-sc-32rbq-3",
                        "Button-sc-32rbq-1",
                        "Button-sc-32rbq-2",
                        "Button-sc-32rbq-0",
                        "ModeSwitcher__SwitcherButton-sc-9lbpr3-0",
                      ],
                      "propTypes": Object {
                        "activeBackgroundColor": [Function],
                        "activeBorderColor": [Function],
                        "activeColor": [Function],
                        "backgroundColor": [Function],
                        "borderColor": [Function],
                        "boxShadowColor": [Function],
                        "focusBackgroundColor": [Function],
                        "focusBorderColor": [Function],
                        "focusColor": [Function],
                        "hoverBackgroundColor": [Function],
                        "hoverBorderColor": [Function],
                        "hoverColor": [Function],
                        "textColor": [Function],
                        "type": [Function],
                      },
                      "render": [Function],
                      "styledComponentId": "ModeSwitcher__MobileButton-sc-9lbpr3-1",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hoverBackgroundColor="#fff"
                  hoverBorderColor="#888"
                  hoverColor="#000"
                  isActive={true}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <button
                    aria-pressed={true}
                    className="c10"
                    onClick={[Function]}
                    type="button"
                  >
                    <SvgIcon
                      color="currentColor"
                      icon="mobile"
                      size="22px"
                    >
                      <SvgIcon__StyledSvg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-mobile"
                        fill="currentColor"
                        focusable="false"
                        role="img"
                        size="22px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <StyledComponent
                          aria-hidden={true}
                          className="yoast-svg-icon yoast-svg-icon-mobile"
                          fill="currentColor"
                          focusable="false"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                "isStatic": false,
                                "lastClassName": "c11",
                                "rules": Array [
                                  "width:",
                                  [Function],
                                  ";height:",
                                  [Function],
                                  ";flex:none;",
                                ],
                              },
                              "displayName": "SvgIcon__StyledSvg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          role="img"
                          size="22px"
                          viewBox="0 0 1792 1792"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <svg
                            aria-hidden={true}
                            className="yoast-svg-icon yoast-svg-icon-mobile c11"
                            fill="currentColor"
                            focusable="false"
                            role="img"
                            size="22px"
                            viewBox="0 0 1792 1792"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
                            />
                          </svg>
                        </StyledComponent>
                      </SvgIcon__StyledSvg>
                    </SvgIcon>
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Mobile preview
                      </span>
                    </ScreenReaderText>
                  </button>
                </StyledComponent>
              </ModeSwitcher__MobileButton>
              <ModeSwitcher__DesktopButton
                activeBackgroundColor="#f7f7f7"
                activeBorderColor="#888"
                activeColor="#000"
                aria-pressed={false}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                focusBackgroundColor="#fff"
                focusBorderColor="#0066cd"
                focusColor="#000"
                hoverBackgroundColor="#fff"
                hoverBorderColor="#888"
                hoverColor="#000"
                isActive={false}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <StyledComponent
                  activeBackgroundColor="#f7f7f7"
                  activeBorderColor="#888"
                  activeColor="#000"
                  aria-pressed={false}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  focusBackgroundColor="#fff"
                  focusBorderColor="#0066cd"
                  focusColor="#000"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "ModeSwitcher__DesktopButton-sc-9lbpr3-2",
                        "isStatic": false,
                        "lastClassName": "c12",
                        "rules": Array [
                          "color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";box-shadow:0 1px 0 ",
                          [Function],
                          ";",
                          "&:active{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";box-shadow:inset 0 2px 5px -3px ",
                          "rgba( 0, 0, 0, 0.5 )",
                          ";}",
                          "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                          [Function],
                          ";color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";box-shadow:0 0 3px ",
                          "rgba( 8, 74, 103, 0.8 )",
                          ";}",
                          "&:hover{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";}",
                          "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                          "1px",
                          ";border-style:solid;margin:0;padding:",
                          "4px",
                          " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                          [Function],
                          ";overflow:visible;min-height:",
                          "32px",
                          ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                          "22px",
                          ";}}",
                          "border:none;border-bottom:4px solid transparent;width:31px;height:31px;border-color:",
                          [Function],
                          ";color:",
                          "#555",
                          ";transition:0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;transition-property:border-color;&:hover,&:focus{background-color:",
                          "#fff",
                          ";border:none;border-bottom:4px solid transparent;border-color:",
                          "#1e8cbe",
                          ";color:",
                          "#1e8cbe",
                          ";box-shadow:none;}",
                          "border-radius:0 3px 3px 0;",
                        ],
                      },
                      "defaultProps": Object {
                        "activeBackgroundColor": "#f7f7f7",
                        "activeBorderColor": "#888",
                        "activeColor": "#000",
                        "backgroundColor": "#f7f7f7",
                        "borderColor": "#ccc",
                        "boxShadowColor": "#ccc",
                        "focusBackgroundColor": "#fff",
                        "focusBorderColor": "#0066cd",
                        "focusColor": "#000",
                        "hoverBackgroundColor": "#fff",
                        "hoverBorderColor": "#888",
                        "hoverColor": "#000",
                        "textColor": "#555",
                        "type": "button",
                      },
                      "displayName": "ModeSwitcher__DesktopButton",
                      "foldedComponentIds": Array [
                        "Button__BaseButton-sc-32rbq-4",
                        "Button-sc-32rbq-3",
                        "Button-sc-32rbq-1",
                        "Button-sc-32rbq-2",
                        "Button-sc-32rbq-0",
                        "ModeSwitcher__SwitcherButton-sc-9lbpr3-0",
                      ],
                      "propTypes": Object {
                        "activeBackgroundColor": [Function],
                        "activeBorderColor": [Function],
                        "activeColor": [Function],
                        "backgroundColor": [Function],
                        "borderColor": [Function],
                        "boxShadowColor": [Function],
                        "focusBackgroundColor": [Function],
                        "focusBorderColor": [Function],
                        "focusColor": [Function],
                        "hoverBackgroundColor": [Function],
                        "hoverBorderColor": [Function],
                        "hoverColor": [Function],
                        "textColor": [Function],
                        "type": [Function],
                      },
                      "render": [Function],
                      "styledComponentId": "ModeSwitcher__DesktopButton-sc-9lbpr3-2",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hoverBackgroundColor="#fff"
                  hoverBorderColor="#888"
                  hoverColor="#000"
                  isActive={false}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <button
                    aria-pressed={false}
                    className="c12"
                    onClick={[Function]}
                    type="button"
                  >
                    <SvgIcon
                      color="currentColor"
                      icon="desktop"
                      size="18px"
                    >
                      <SvgIcon__StyledSvg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-desktop"
                        fill="currentColor"
                        focusable="false"
                        role="img"
                        size="18px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <StyledComponent
                          aria-hidden={true}
                          className="yoast-svg-icon yoast-svg-icon-desktop"
                          fill="currentColor"
                          focusable="false"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                "isStatic": false,
                                "lastClassName": "c13",
                                "rules": Array [
                                  "width:",
                                  [Function],
                                  ";height:",
                                  [Function],
                                  ";flex:none;",
                                ],
                              },
                              "displayName": "SvgIcon__StyledSvg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          role="img"
                          size="18px"
                          viewBox="0 0 1792 1792"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <svg
                            aria-hidden={true}
                            className="yoast-svg-icon yoast-svg-icon-desktop c13"
                            fill="currentColor"
                            focusable="false"
                            role="img"
                            size="18px"
                            viewBox="0 0 1792 1792"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
                            />
                          </svg>
                        </StyledComponent>
                      </SvgIcon__StyledSvg>
                    </SvgIcon>
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Desktop preview
                      </span>
                    </ScreenReaderText>
                  </button>
                </StyledComponent>
              </ModeSwitcher__DesktopButton>
            </div>
          </StyledComponent>
        </ModeSwitcher__Switcher>
      </ModeSwitcher>
      <SnippetEditor__EditSnippetButton
        activeBackgroundColor="#f7f7f7"
        activeBorderColor="#888"
        activeColor="#000"
        aria-expanded={true}
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        focusBackgroundColor="#fff"
        focusBorderColor="#0066cd"
        focusColor="#000"
        hoverBackgroundColor="#fff"
        hoverBorderColor="#888"
        hoverColor="#000"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <StyledComponent
          activeBackgroundColor="#f7f7f7"
          activeBorderColor="#888"
          activeColor="#000"
          aria-expanded={true}
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          focusBackgroundColor="#fff"
          focusBorderColor="#0066cd"
          focusColor="#000"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "SnippetEditor__EditSnippetButton-sc-144bmm3-1",
                "isStatic": false,
                "lastClassName": "c14",
                "rules": Array [
                  "color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";background:",
                  [Function],
                  ";box-shadow:0 1px 0 ",
                  [Function],
                  ";",
                  "&:active{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";box-shadow:inset 0 2px 5px -3px ",
                  "rgba( 0, 0, 0, 0.5 )",
                  ";}",
                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                  [Function],
                  ";color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";box-shadow:0 0 3px ",
                  "rgba( 8, 74, 103, 0.8 )",
                  ";}",
                  "&:hover{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";}",
                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                  "1px",
                  ";border-style:solid;margin:0;padding:",
                  "4px",
                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                  [Function],
                  ";overflow:visible;min-height:",
                  "32px",
                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                  "22px",
                  ";}}",
                  "height:33px;border:1px solid #dbdbdb;box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;",
                  "margin:",
                  [Function],
                  ";fill:",
                  "#555",
                  ";padding-left:8px;& svg{",
                  [Function],
                  ":7px;}",
                ],
              },
              "defaultProps": Object {
                "activeBackgroundColor": "#f7f7f7",
                "activeBorderColor": "#888",
                "activeColor": "#000",
                "backgroundColor": "#f7f7f7",
                "borderColor": "#ccc",
                "boxShadowColor": "#ccc",
                "focusBackgroundColor": "#fff",
                "focusBorderColor": "#0066cd",
                "focusColor": "#000",
                "hoverBackgroundColor": "#fff",
                "hoverBorderColor": "#888",
                "hoverColor": "#000",
                "textColor": "#555",
                "type": "button",
              },
              "displayName": "SnippetEditor__EditSnippetButton",
              "foldedComponentIds": Array [
                "Button__BaseButton-sc-32rbq-4",
                "Button-sc-32rbq-3",
                "Button-sc-32rbq-1",
                "Button-sc-32rbq-2",
                "Button-sc-32rbq-0",
                "SnippetEditor__SnippetEditorButton-sc-144bmm3-0",
              ],
              "propTypes": Object {
                "activeBackgroundColor": [Function],
                "activeBorderColor": [Function],
                "activeColor": [Function],
                "backgroundColor": [Function],
                "borderColor": [Function],
                "boxShadowColor": [Function],
                "focusBackgroundColor": [Function],
                "focusBorderColor": [Function],
                "focusColor": [Function],
                "hoverBackgroundColor": [Function],
                "hoverBorderColor": [Function],
                "hoverColor": [Function],
                "textColor": [Function],
                "type": [Function],
              },
              "render": [Function],
              "styledComponentId": "SnippetEditor__EditSnippetButton-sc-144bmm3-1",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={[Function]}
          hoverBackgroundColor="#fff"
          hoverBorderColor="#888"
          hoverColor="#000"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <button
            aria-expanded={true}
            className="c14"
            onClick={[Function]}
            type="button"
          >
            <SvgIcon
              color="currentColor"
              icon="edit"
              size="16px"
            >
              <SvgIcon__StyledSvg
                aria-hidden={true}
                className="yoast-svg-icon yoast-svg-icon-edit"
                fill="currentColor"
                focusable="false"
                role="img"
                size="16px"
                viewBox="0 0 1792 1792"
                xmlns="http://www.w3.org/2000/svg"
              >
                <StyledComponent
                  aria-hidden={true}
                  className="yoast-svg-icon yoast-svg-icon-edit"
                  fill="currentColor"
                  focusable="false"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                        "isStatic": false,
                        "lastClassName": "c15",
                        "rules": Array [
                          "width:",
                          [Function],
                          ";height:",
                          [Function],
                          ";flex:none;",
                        ],
                      },
                      "displayName": "SvgIcon__StyledSvg",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                      "target": "svg",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  role="img"
                  size="16px"
                  viewBox="0 0 1792 1792"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <svg
                    aria-hidden={true}
                    className="yoast-svg-icon yoast-svg-icon-edit c15"
                    fill="currentColor"
                    focusable="false"
                    role="img"
                    size="16px"
                    viewBox="0 0 1792 1792"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
                    />
                  </svg>
                </StyledComponent>
              </SvgIcon__StyledSvg>
            </SvgIcon>
            Edit snippet
          </button>
        </StyledComponent>
      </SnippetEditor__EditSnippetButton>
      <SnippetEditorFields
        activeField={null}
        containerPadding="0 20px"
        data={
          Object {
            "description": "Test description, %%replacement_variable%%",
            "slug": "test-slug",
            "title": "Test title",
          }
        }
        descriptionEditorFieldPlaceholder="Modify your meta description by editing it right here"
        descriptionLengthProgress={
          Object {
            "actual": 42,
            "max": 156,
            "score": 6,
          }
        }
        hoveredField={null}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        recommendedReplacementVariables={Array []}
        replacementVariables={Array []}
        titleLengthProgress={
          Object {
            "actual": 0,
            "max": 600,
            "score": 1,
          }
        }
      >
        <shared__StyledEditor
          padding="0 20px"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "shared__StyledEditor-lzs0hf-5",
                  "isStatic": false,
                  "lastClassName": "c16",
                  "rules": Array [
                    "padding:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "shared__StyledEditor",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "shared__StyledEditor-lzs0hf-5",
                "target": "section",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            padding="0 20px"
          >
            <section
              className="c16"
            >
              <shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "shared__FormSection-lzs0hf-4",
                        "isStatic": true,
                        "lastClassName": "c17",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "shared__FormSection-lzs0hf-4",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="c17"
                  >
                    <ReplacementVariableEditor
                      content="Test title"
                      editorRef={[Function]}
                      fieldId="snippet-editor-field-title"
                      isActive={false}
                      isHovered={false}
                      label="SEO title"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      recommendedReplacementVariables={Array []}
                      replacementVariables={Array []}
                      withCaret={true}
                    >
                      <shared__SimulatedLabel
                        id="9"
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared__SimulatedLabel-lzs0hf-6",
                                "isStatic": true,
                                "lastClassName": "c18",
                                "rules": Array [
                                  "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                                ],
                              },
                              "displayName": "shared__SimulatedLabel",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "shared__SimulatedLabel-lzs0hf-6",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          id="9"
                          onClick={[Function]}
                        >
                          <div
                            className="c18"
                            id="9"
                            onClick={[Function]}
                          >
                            SEO title
                          </div>
                        </StyledComponent>
                      </shared__SimulatedLabel>
                      <shared__TriggerReplacementVariableSuggestionsButton
                        activeBackgroundColor="#f7f7f7"
                        activeBorderColor="#888"
                        activeColor="#000"
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        focusBackgroundColor="#fff"
                        focusBorderColor="#0066cd"
                        focusColor="#000"
                        hoverBackgroundColor="#fff"
                        hoverBorderColor="#888"
                        hoverColor="#000"
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <StyledComponent
                          activeBackgroundColor="#f7f7f7"
                          activeBorderColor="#888"
                          activeColor="#000"
                          backgroundColor="#f7f7f7"
                          borderColor="#ccc"
                          boxShadowColor="#ccc"
                          focusBackgroundColor="#fff"
                          focusBorderColor="#0066cd"
                          focusColor="#000"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared__TriggerReplacementVariableSuggestionsButton-lzs0hf-7",
                                "isStatic": false,
                                "lastClassName": "c19",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";background:",
                                  [Function],
                                  ";box-shadow:0 1px 0 ",
                                  [Function],
                                  ";",
                                  "&:active{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";box-shadow:inset 0 2px 5px -3px ",
                                  "rgba( 0, 0, 0, 0.5 )",
                                  ";}",
                                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                                  [Function],
                                  ";color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";box-shadow:0 0 3px ",
                                  "rgba( 8, 74, 103, 0.8 )",
                                  ";}",
                                  "&:hover{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";}",
                                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                                  "1px",
                                  ";border-style:solid;margin:0;padding:",
                                  "4px",
                                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                                  [Function],
                                  ";overflow:visible;min-height:",
                                  "32px",
                                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                                  "22px",
                                  ";}}",
                                  "box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;padding-left:8px;height:33px;border:1px solid #dbdbdb;font-size:13px;& svg{",
                                  [Function],
                                  ":7px;fill:",
                                  "#555",
                                  ";}",
                                ],
                              },
                              "defaultProps": Object {
                                "activeBackgroundColor": "#f7f7f7",
                                "activeBorderColor": "#888",
                                "activeColor": "#000",
                                "backgroundColor": "#f7f7f7",
                                "borderColor": "#ccc",
                                "boxShadowColor": "#ccc",
                                "focusBackgroundColor": "#fff",
                                "focusBorderColor": "#0066cd",
                                "focusColor": "#000",
                                "hoverBackgroundColor": "#fff",
                                "hoverBorderColor": "#888",
                                "hoverColor": "#000",
                                "textColor": "#555",
                                "type": "button",
                              },
                              "displayName": "shared__TriggerReplacementVariableSuggestionsButton",
                              "foldedComponentIds": Array [
                                "Button__BaseButton-sc-32rbq-4",
                                "Button-sc-32rbq-3",
                                "Button-sc-32rbq-1",
                                "Button-sc-32rbq-2",
                                "Button-sc-32rbq-0",
                              ],
                              "propTypes": Object {
                                "activeBackgroundColor": [Function],
                                "activeBorderColor": [Function],
                                "activeColor": [Function],
                                "backgroundColor": [Function],
                                "borderColor": [Function],
                                "boxShadowColor": [Function],
                                "focusBackgroundColor": [Function],
                                "focusBorderColor": [Function],
                                "focusColor": [Function],
                                "hoverBackgroundColor": [Function],
                                "hoverBorderColor": [Function],
                                "hoverColor": [Function],
                                "textColor": [Function],
                                "type": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "shared__TriggerReplacementVariableSuggestionsButton-lzs0hf-7",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverBackgroundColor="#fff"
                          hoverBorderColor="#888"
                          hoverColor="#000"
                          onClick={[Function]}
                          textColor="#555"
                          type="button"
                        >
                          <button
                            className="c19"
                            onClick={[Function]}
                            type="button"
                          >
                            <SvgIcon
                              color="currentColor"
                              icon="plus-circle"
                              size="16px"
                            >
                              <SvgIcon__StyledSvg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="16px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <StyledComponent
                                  aria-hidden={true}
                                  className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                  fill="currentColor"
                                  focusable="false"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                        "isStatic": false,
                                        "lastClassName": "c15",
                                        "rules": Array [
                                          "width:",
                                          [Function],
                                          ";height:",
                                          [Function],
                                          ";flex:none;",
                                        ],
                                      },
                                      "displayName": "SvgIcon__StyledSvg",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                      "target": "svg",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  role="img"
                                  size="16px"
                                  viewBox="0 0 1792 1792"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="yoast-svg-icon yoast-svg-icon-plus-circle c15"
                                    fill="currentColor"
                                    focusable="false"
                                    role="img"
                                    size="16px"
                                    viewBox="0 0 1792 1792"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M1344 960v-128q0-26-19-45t-45-19h-256v-256q0-26-19-45t-45-19h-128q-26 0-45 19t-19 45v256h-256q-26 0-45 19t-19 45v128q0 26 19 45t45 19h256v256q0 26 19 45t45 19h128q26 0 45-19t19-45v-256h256q26 0 45-19t19-45zm320-64q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"
                                    />
                                  </svg>
                                </StyledComponent>
                              </SvgIcon__StyledSvg>
                            </SvgIcon>
                            Insert snippet variable
                          </button>
                        </StyledComponent>
                      </shared__TriggerReplacementVariableSuggestionsButton>
                      <shared
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {},
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared-lzs0hf-1",
                                "isStatic": false,
                                "lastClassName": "dMDPhh",
                                "rules": Array [
                                  "flex:0 1 100%;border:1px solid ",
                                  [Function],
                                  ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                  [Function],
                                  ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                  ".public-DraftStyleDefault-block{line-height:24px;}",
                                  "&::before{display:block;position:absolute;top:-1px;",
                                  [Function],
                                  ":-25px;width:24px;height:24px;background-image:url( ",
                                  [Function],
                                  " );background-size:25px;content:\\"\\";}",
                                ],
                              },
                              "displayName": "shared",
                              "foldedComponentIds": Array [
                                "shared__InputContainer-lzs0hf-0",
                                "shared__TitleInputContainer-lzs0hf-2",
                              ],
                              "render": [Function],
                              "styledComponentId": "shared-lzs0hf-1",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isActive={false}
                          isHovered={false}
                          onClick={[Function]}
                        >
                          <div
                            className="c20"
                            onClick={[Function]}
                          >
                            <ReplacementVariableEditorStandalone
                              ariaLabelledBy="9"
                              content="Test title"
                              fieldId="snippet-editor-field-title"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              recommendedReplacementVariables={Array []}
                              replacementVariables={Array []}
                            >
                              <div />
                            </ReplacementVariableEditorStandalone>
                          </div>
                        </StyledComponent>
                      </shared>
                    </ReplacementVariableEditor>
                    <ProgressBar
                      aria-hidden="true"
                      backgroundColor="#f7f7f7"
                      borderColor="#ddd"
                      max={600}
                      progressColor="#dc3232"
                      value={0}
                    >
                      <StyledComponent
                        aria-hidden="true"
                        backgroundColor="#f7f7f7"
                        borderColor="#ddd"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ProgressBar-sc-9g9yx6-0",
                              "isStatic": false,
                              "lastClassName": "c25",
                              "rules": Array [
                                "box-sizing:border-box;width:100%;height:8px;display:block;margin-top:8px;appearance:none;background-color:",
                                [Function],
                                ";border:1px solid ",
                                [Function],
                                ";::-webkit-progress-bar{background-color:",
                                [Function],
                                ";}::-webkit-progress-value{background-color:",
                                [Function],
                                ";transition:width 250ms;}::-moz-progress-bar{background-color:",
                                [Function],
                                ";}::-ms-fill{background-color:",
                                [Function],
                                ";border:0;}",
                              ],
                            },
                            "defaultProps": Object {
                              "aria-hidden": "true",
                              "backgroundColor": "#f7f7f7",
                              "borderColor": "#ddd",
                              "max": 1,
                              "progressColor": "#7ad03a",
                              "value": 0,
                            },
                            "displayName": "ProgressBar",
                            "foldedComponentIds": Array [],
                            "propTypes": Object {
                              "aria-hidden": [Function],
                              "backgroundColor": [Function],
                              "borderColor": [Function],
                              "max": [Function],
                              "progressColor": [Function],
                              "value": [Function],
                            },
                            "render": [Function],
                            "styledComponentId": "ProgressBar-sc-9g9yx6-0",
                            "target": "progress",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        max={600}
                        progressColor="#dc3232"
                        value={0}
                      >
                        <progress
                          aria-hidden="true"
                          className="c21"
                          max={600}
                          value={0}
                        />
                      </StyledComponent>
                    </ProgressBar>
                  </div>
                </StyledComponent>
              </shared__FormSection>
              <shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "shared__FormSection-lzs0hf-4",
                        "isStatic": true,
                        "lastClassName": "c17",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "shared__FormSection-lzs0hf-4",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="c17"
                  >
                    <shared__SimulatedLabel
                      id="snippet-editor-field-8-slug"
                      onClick={[Function]}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "shared__SimulatedLabel-lzs0hf-6",
                              "isStatic": true,
                              "lastClassName": "c18",
                              "rules": Array [
                                "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                              ],
                            },
                            "displayName": "shared__SimulatedLabel",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "shared__SimulatedLabel-lzs0hf-6",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        id="snippet-editor-field-8-slug"
                        onClick={[Function]}
                      >
                        <div
                          className="c18"
                          id="snippet-editor-field-8-slug"
                          onClick={[Function]}
                        >
                          Slug
                        </div>
                      </StyledComponent>
                    </shared__SimulatedLabel>
                    <shared
                      isActive={false}
                      isHovered={false}
                      onClick={[Function]}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [
                              Object {},
                            ],
                            "componentStyle": ComponentStyle {
                              "componentId": "shared-lzs0hf-1",
                              "isStatic": false,
                              "lastClassName": "c22",
                              "rules": Array [
                                "flex:0 1 100%;border:1px solid ",
                                [Function],
                                ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                [Function],
                                ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                "&::before{display:block;position:absolute;top:-1px;",
                                [Function],
                                ":-25px;width:24px;height:24px;background-image:url( ",
                                [Function],
                                " );background-size:25px;content:\\"\\";}",
                              ],
                            },
                            "displayName": "shared",
                            "foldedComponentIds": Array [
                              "shared__InputContainer-lzs0hf-0",
                            ],
                            "render": [Function],
                            "styledComponentId": "shared-lzs0hf-1",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <div
                          className="c22"
                          onClick={[Function]}
                        >
                          <SnippetEditorFields__SlugInput
                            aria-labelledby="snippet-editor-field-8-slug"
                            id="snippet-editor-field-slug"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            value="test-slug"
                          >
                            <StyledComponent
                              aria-labelledby="snippet-editor-field-8-slug"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "SnippetEditorFields__SlugInput-sc-1ioqi3y-0",
                                    "isStatic": true,
                                    "lastClassName": "c23",
                                    "rules": Array [
                                      "border:none;width:100%;height:inherit;line-height:inherit;font-family:inherit;font-size:inherit;color:inherit;&:focus{outline:0;}",
                                    ],
                                  },
                                  "displayName": "SnippetEditorFields__SlugInput",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "SnippetEditorFields__SlugInput-sc-1ioqi3y-0",
                                  "target": "input",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={[Function]}
                              id="snippet-editor-field-slug"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              value="test-slug"
                            >
                              <input
                                aria-labelledby="snippet-editor-field-8-slug"
                                className="c23"
                                id="snippet-editor-field-slug"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                value="test-slug"
                              />
                            </StyledComponent>
                          </SnippetEditorFields__SlugInput>
                        </div>
                      </StyledComponent>
                    </shared>
                  </div>
                </StyledComponent>
              </shared__FormSection>
              <shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "shared__FormSection-lzs0hf-4",
                        "isStatic": true,
                        "lastClassName": "c17",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "shared__FormSection-lzs0hf-4",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="c17"
                  >
                    <ReplacementVariableEditor
                      content="Test description, %%replacement_variable%%"
                      editorRef={[Function]}
                      fieldId="snippet-editor-field-description"
                      isActive={false}
                      isHovered={false}
                      label="Meta description"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      placeholder="Modify your meta description by editing it right here"
                      recommendedReplacementVariables={Array []}
                      replacementVariables={Array []}
                      type="description"
                      withCaret={true}
                    >
                      <shared__SimulatedLabel
                        id="10"
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared__SimulatedLabel-lzs0hf-6",
                                "isStatic": true,
                                "lastClassName": "c18",
                                "rules": Array [
                                  "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                                ],
                              },
                              "displayName": "shared__SimulatedLabel",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "shared__SimulatedLabel-lzs0hf-6",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          id="10"
                          onClick={[Function]}
                        >
                          <div
                            className="c18"
                            id="10"
                            onClick={[Function]}
                          >
                            Meta description
                          </div>
                        </StyledComponent>
                      </shared__SimulatedLabel>
                      <shared__TriggerReplacementVariableSuggestionsButton
                        activeBackgroundColor="#f7f7f7"
                        activeBorderColor="#888"
                        activeColor="#000"
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        focusBackgroundColor="#fff"
                        focusBorderColor="#0066cd"
                        focusColor="#000"
                        hoverBackgroundColor="#fff"
                        hoverBorderColor="#888"
                        hoverColor="#000"
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <StyledComponent
                          activeBackgroundColor="#f7f7f7"
                          activeBorderColor="#888"
                          activeColor="#000"
                          backgroundColor="#f7f7f7"
                          borderColor="#ccc"
                          boxShadowColor="#ccc"
                          focusBackgroundColor="#fff"
                          focusBorderColor="#0066cd"
                          focusColor="#000"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared__TriggerReplacementVariableSuggestionsButton-lzs0hf-7",
                                "isStatic": false,
                                "lastClassName": "c19",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";background:",
                                  [Function],
                                  ";box-shadow:0 1px 0 ",
                                  [Function],
                                  ";",
                                  "&:active{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";box-shadow:inset 0 2px 5px -3px ",
                                  "rgba( 0, 0, 0, 0.5 )",
                                  ";}",
                                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                                  [Function],
                                  ";color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";box-shadow:0 0 3px ",
                                  "rgba( 8, 74, 103, 0.8 )",
                                  ";}",
                                  "&:hover{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";}",
                                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                                  "1px",
                                  ";border-style:solid;margin:0;padding:",
                                  "4px",
                                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                                  [Function],
                                  ";overflow:visible;min-height:",
                                  "32px",
                                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                                  "22px",
                                  ";}}",
                                  "box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;padding-left:8px;height:33px;border:1px solid #dbdbdb;font-size:13px;& svg{",
                                  [Function],
                                  ":7px;fill:",
                                  "#555",
                                  ";}",
                                ],
                              },
                              "defaultProps": Object {
                                "activeBackgroundColor": "#f7f7f7",
                                "activeBorderColor": "#888",
                                "activeColor": "#000",
                                "backgroundColor": "#f7f7f7",
                                "borderColor": "#ccc",
                                "boxShadowColor": "#ccc",
                                "focusBackgroundColor": "#fff",
                                "focusBorderColor": "#0066cd",
                                "focusColor": "#000",
                                "hoverBackgroundColor": "#fff",
                                "hoverBorderColor": "#888",
                                "hoverColor": "#000",
                                "textColor": "#555",
                                "type": "button",
                              },
                              "displayName": "shared__TriggerReplacementVariableSuggestionsButton",
                              "foldedComponentIds": Array [
                                "Button__BaseButton-sc-32rbq-4",
                                "Button-sc-32rbq-3",
                                "Button-sc-32rbq-1",
                                "Button-sc-32rbq-2",
                                "Button-sc-32rbq-0",
                              ],
                              "propTypes": Object {
                                "activeBackgroundColor": [Function],
                                "activeBorderColor": [Function],
                                "activeColor": [Function],
                                "backgroundColor": [Function],
                                "borderColor": [Function],
                                "boxShadowColor": [Function],
                                "focusBackgroundColor": [Function],
                                "focusBorderColor": [Function],
                                "focusColor": [Function],
                                "hoverBackgroundColor": [Function],
                                "hoverBorderColor": [Function],
                                "hoverColor": [Function],
                                "textColor": [Function],
                                "type": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "shared__TriggerReplacementVariableSuggestionsButton-lzs0hf-7",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverBackgroundColor="#fff"
                          hoverBorderColor="#888"
                          hoverColor="#000"
                          onClick={[Function]}
                          textColor="#555"
                          type="button"
                        >
                          <button
                            className="c19"
                            onClick={[Function]}
                            type="button"
                          >
                            <SvgIcon
                              color="currentColor"
                              icon="plus-circle"
                              size="16px"
                            >
                              <SvgIcon__StyledSvg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="16px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <StyledComponent
                                  aria-hidden={true}
                                  className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                  fill="currentColor"
                                  focusable="false"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                        "isStatic": false,
                                        "lastClassName": "c15",
                                        "rules": Array [
                                          "width:",
                                          [Function],
                                          ";height:",
                                          [Function],
                                          ";flex:none;",
                                        ],
                                      },
                                      "displayName": "SvgIcon__StyledSvg",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                      "target": "svg",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  role="img"
                                  size="16px"
                                  viewBox="0 0 1792 1792"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="yoast-svg-icon yoast-svg-icon-plus-circle c15"
                                    fill="currentColor"
                                    focusable="false"
                                    role="img"
                                    size="16px"
                                    viewBox="0 0 1792 1792"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M1344 960v-128q0-26-19-45t-45-19h-256v-256q0-26-19-45t-45-19h-128q-26 0-45 19t-19 45v256h-256q-26 0-45 19t-19 45v128q0 26 19 45t45 19h256v256q0 26 19 45t45 19h128q26 0 45-19t19-45v-256h256q26 0 45-19t19-45zm320-64q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"
                                    />
                                  </svg>
                                </StyledComponent>
                              </SvgIcon__StyledSvg>
                            </SvgIcon>
                            Insert snippet variable
                          </button>
                        </StyledComponent>
                      </shared__TriggerReplacementVariableSuggestionsButton>
                      <shared
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {},
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared-lzs0hf-1",
                                "isStatic": false,
                                "lastClassName": "c24",
                                "rules": Array [
                                  "flex:0 1 100%;border:1px solid ",
                                  [Function],
                                  ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                  [Function],
                                  ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                  "min-height:72px;padding:2px 6px;line-height:24px;.public-DraftEditorPlaceholder-root{color:",
                                  "#616161",
                                  ";}.public-DraftEditorPlaceholder-hasFocus{color:",
                                  "#616161",
                                  ";}",
                                  "&::before{display:block;position:absolute;top:-1px;",
                                  [Function],
                                  ":-25px;width:24px;height:24px;background-image:url( ",
                                  [Function],
                                  " );background-size:25px;content:\\"\\";}",
                                ],
                              },
                              "displayName": "shared",
                              "foldedComponentIds": Array [
                                "shared__InputContainer-lzs0hf-0",
                                "shared__DescriptionInputContainer-lzs0hf-3",
                              ],
                              "render": [Function],
                              "styledComponentId": "shared-lzs0hf-1",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isActive={false}
                          isHovered={false}
                          onClick={[Function]}
                        >
                          <div
                            className="c24"
                            onClick={[Function]}
                          >
                            <ReplacementVariableEditorStandalone
                              ariaLabelledBy="10"
                              content="Test description, %%replacement_variable%%"
                              fieldId="snippet-editor-field-description"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              placeholder="Modify your meta description by editing it right here"
                              recommendedReplacementVariables={Array []}
                              replacementVariables={Array []}
                            >
                              <div />
                            </ReplacementVariableEditorStandalone>
                          </div>
                        </StyledComponent>
                      </shared>
                    </ReplacementVariableEditor>
                    <ProgressBar
                      aria-hidden="true"
                      backgroundColor="#f7f7f7"
                      borderColor="#ddd"
                      max={156}
                      progressColor="#ee7c1b"
                      value={42}
                    >
                      <StyledComponent
                        aria-hidden="true"
                        backgroundColor="#f7f7f7"
                        borderColor="#ddd"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ProgressBar-sc-9g9yx6-0",
                              "isStatic": false,
                              "lastClassName": "c25",
                              "rules": Array [
                                "box-sizing:border-box;width:100%;height:8px;display:block;margin-top:8px;appearance:none;background-color:",
                                [Function],
                                ";border:1px solid ",
                                [Function],
                                ";::-webkit-progress-bar{background-color:",
                                [Function],
                                ";}::-webkit-progress-value{background-color:",
                                [Function],
                                ";transition:width 250ms;}::-moz-progress-bar{background-color:",
                                [Function],
                                ";}::-ms-fill{background-color:",
                                [Function],
                                ";border:0;}",
                              ],
                            },
                            "defaultProps": Object {
                              "aria-hidden": "true",
                              "backgroundColor": "#f7f7f7",
                              "borderColor": "#ddd",
                              "max": 1,
                              "progressColor": "#7ad03a",
                              "value": 0,
                            },
                            "displayName": "ProgressBar",
                            "foldedComponentIds": Array [],
                            "propTypes": Object {
                              "aria-hidden": [Function],
                              "backgroundColor": [Function],
                              "borderColor": [Function],
                              "max": [Function],
                              "progressColor": [Function],
                              "value": [Function],
                            },
                            "render": [Function],
                            "styledComponentId": "ProgressBar-sc-9g9yx6-0",
                            "target": "progress",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        max={156}
                        progressColor="#ee7c1b"
                        value={42}
                      >
                        <progress
                          aria-hidden="true"
                          className="c25"
                          max={156}
                          value={42}
                        />
                      </StyledComponent>
                    </ProgressBar>
                  </div>
                </StyledComponent>
              </shared__FormSection>
            </section>
          </StyledComponent>
        </shared__StyledEditor>
      </SnippetEditorFields>
      <SnippetEditor__CloseEditorButton
        activeBackgroundColor="#f7f7f7"
        activeBorderColor="#888"
        activeColor="#000"
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        focusBackgroundColor="#fff"
        focusBorderColor="#0066cd"
        focusColor="#000"
        hoverBackgroundColor="#fff"
        hoverBorderColor="#888"
        hoverColor="#000"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <StyledComponent
          activeBackgroundColor="#f7f7f7"
          activeBorderColor="#888"
          activeColor="#000"
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          focusBackgroundColor="#fff"
          focusBorderColor="#0066cd"
          focusColor="#000"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "SnippetEditor__CloseEditorButton-sc-144bmm3-2",
                "isStatic": false,
                "lastClassName": "c26",
                "rules": Array [
                  "color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";background:",
                  [Function],
                  ";box-shadow:0 1px 0 ",
                  [Function],
                  ";",
                  "&:active{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";box-shadow:inset 0 2px 5px -3px ",
                  "rgba( 0, 0, 0, 0.5 )",
                  ";}",
                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                  [Function],
                  ";color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";box-shadow:0 0 3px ",
                  "rgba( 8, 74, 103, 0.8 )",
                  ";}",
                  "&:hover{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";}",
                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                  "1px",
                  ";border-style:solid;margin:0;padding:",
                  "4px",
                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                  [Function],
                  ";overflow:visible;min-height:",
                  "32px",
                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                  "22px",
                  ";}}",
                  "height:33px;border:1px solid #dbdbdb;box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;",
                  "margin-top:24px;",
                ],
              },
              "defaultProps": Object {
                "activeBackgroundColor": "#f7f7f7",
                "activeBorderColor": "#888",
                "activeColor": "#000",
                "backgroundColor": "#f7f7f7",
                "borderColor": "#ccc",
                "boxShadowColor": "#ccc",
                "focusBackgroundColor": "#fff",
                "focusBorderColor": "#0066cd",
                "focusColor": "#000",
                "hoverBackgroundColor": "#fff",
                "hoverBorderColor": "#888",
                "hoverColor": "#000",
                "textColor": "#555",
                "type": "button",
              },
              "displayName": "SnippetEditor__CloseEditorButton",
              "foldedComponentIds": Array [
                "Button__BaseButton-sc-32rbq-4",
                "Button-sc-32rbq-3",
                "Button-sc-32rbq-1",
                "Button-sc-32rbq-2",
                "Button-sc-32rbq-0",
                "SnippetEditor__SnippetEditorButton-sc-144bmm3-0",
              ],
              "propTypes": Object {
                "activeBackgroundColor": [Function],
                "activeBorderColor": [Function],
                "activeColor": [Function],
                "backgroundColor": [Function],
                "borderColor": [Function],
                "boxShadowColor": [Function],
                "focusBackgroundColor": [Function],
                "focusBorderColor": [Function],
                "focusColor": [Function],
                "hoverBackgroundColor": [Function],
                "hoverBorderColor": [Function],
                "hoverColor": [Function],
                "textColor": [Function],
                "type": [Function],
              },
              "render": [Function],
              "styledComponentId": "SnippetEditor__CloseEditorButton-sc-144bmm3-2",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          hoverBackgroundColor="#fff"
          hoverBorderColor="#888"
          hoverColor="#000"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <button
            className="c26"
            onClick={[Function]}
            type="button"
          >
            Close snippet editor
          </button>
        </StyledComponent>
      </SnippetEditor__CloseEditorButton>
    </div>
  </ErrorBoundary>
</SnippetEditor>
`;

exports[`SnippetEditor closes when calling close() 2`] = `
.c0 {
  border-bottom: 1px hidden #fff;
  border-radius: 2px;
  box-shadow: 0 1px 2px rgba(0,0,0,.2);
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  max-width: 600px;
  box-sizing: border-box;
  font-size: 14px;
}

.c2 {
  cursor: pointer;
  position: relative;
}

.c3 {
  color: #1e0fbe;
  -webkit-text-decoration: none;
  text-decoration: none;
  font-size: 18px;
  line-height: 1.2;
  font-weight: normal;
  margin: 0;
  display: inline-block;
  overflow: hidden;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c4 {
  display: inline-block;
  font-size: 16px;
  line-height: 1.2em;
  max-height: 2.4em;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c5 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  white-space: nowrap;
  font-size: 14px;
}

.c6 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  white-space: nowrap;
  font-size: 14px;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 100%;
}

.c8 {
  color: #545454;
  cursor: pointer;
  position: relative;
  max-width: 600px;
  font-size: 13px;
  font-size: 14px;
  line-height: 20px;
}

.c1 {
  padding: 8px 16px;
}

.c7 {
  border: 0;
  border-bottom: 1px solid #DFE1E5;
  margin: 0;
}

.c10 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: #555;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 3px 0 0 3px;
}

.c10:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c10::-moz-focus-inner {
  border-width: 0;
}

.c10:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c10:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c10 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c10:hover,
.c10:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
  box-shadow: none;
}

.c12 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: transparent;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 0 3px 3px 0;
}

.c12:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c12::-moz-focus-inner {
  border-width: 0;
}

.c12:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c12:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c12 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c12:hover,
.c12:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
  box-shadow: none;
}

.c9 {
  display: inline-block;
  margin-top: 10px;
  border: 1px solid #dbdbdb;
  border-radius: 4px;
  background-color: #f7f7f7;
  vertical-align: top;
}

.c14 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin: 10px 0 0 4px;
  fill: #555;
  padding-left: 8px;
}

.c14:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c14::-moz-focus-inner {
  border-width: 0;
}

.c14:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c14:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c14 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c14 svg {
  margin-right: 7px;
}

.c11 {
  width: 22px;
  height: 22px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c13 {
  width: 18px;
  height: 18px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c15 {
  width: 16px;
  height: 16px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c10::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c12::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c14::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

<SnippetEditor
  baseUrl="http://example.org/"
  data={
    Object {
      "description": "Test description, %%replacement_variable%%",
      "slug": "test-slug",
      "title": "Test title",
    }
  }
  date=""
  descriptionEditorFieldPlaceholder=""
  descriptionLengthProgress={
    Object {
      "actual": 0,
      "max": 156,
      "score": 0,
    }
  }
  hasPaperStyle={true}
  locale="en"
  mapEditorDataToPreview={null}
  mode="mobile"
  onChange={[MockFunction]}
  onChangeAnalysisData={[Function]}
  recommendedReplacementVariables={Array []}
  replacementVariables={Array []}
  showCloseButton={true}
  titleLengthProgress={
    Object {
      "actual": 0,
      "max": 600,
      "score": 0,
    }
  }
  wordsToHighlight={Array []}
>
  <ErrorBoundary>
    <div>
      <SnippetPreview
        activeField={null}
        breadcrumbs={null}
        date=""
        description="Test description, %%replacement_variable%%"
        hoveredField={null}
        isAmp={false}
        keyword=""
        locale="en"
        mode="mobile"
        onHover={[Function]}
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        title="Test title"
        url="example.org/test-slug"
        wordsToHighlight={Array []}
      >
        <section>
          <SnippetPreview__MobileContainer
            padding={20}
            width={640}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "SnippetPreview__MobileContainer-sc-1hxg8jo-1",
                    "isStatic": true,
                    "lastClassName": "c0",
                    "rules": Array [
                      "border-bottom:1px hidden #fff;border-radius:2px;box-shadow:0 1px 2px rgba(0,0,0,.2);font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;max-width:",
                      "600",
                      "px;box-sizing:border-box;font-size:14px;",
                    ],
                  },
                  "displayName": "SnippetPreview__MobileContainer",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "SnippetPreview__MobileContainer-sc-1hxg8jo-1",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              padding={20}
              width={640}
            >
              <div
                className="c0"
                width={640}
              >
                <SnippetPreview__MobilePartContainer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__MobilePartContainer-sc-1hxg8jo-12",
                          "isStatic": true,
                          "lastClassName": "c1",
                          "rules": Array [
                            "padding:8px 16px;",
                          ],
                        },
                        "displayName": "SnippetPreview__MobilePartContainer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__MobilePartContainer-sc-1hxg8jo-12",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="c1"
                    >
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          SEO title preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__BaseTitle
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__BaseTitle-sc-1hxg8jo-2",
                                "isStatic": true,
                                "lastClassName": "c2",
                                "rules": Array [
                                  "cursor:pointer;position:relative;",
                                ],
                              },
                              "displayName": "SnippetPreview__BaseTitle",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__BaseTitle-sc-1hxg8jo-2",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                        >
                          <div
                            className="c2"
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                          >
                            <SnippetPreview__TitleBounded>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__TitleBounded-sc-1hxg8jo-5",
                                      "isStatic": true,
                                      "lastClassName": "c3",
                                      "rules": Array [
                                        "color:",
                                        "#1e0fbe",
                                        ";text-decoration:none;font-size:18px;line-height:1.2;font-weight:normal;margin:0;display:inline-block;overflow:hidden;max-width:",
                                        "600",
                                        "px;vertical-align:top;text-overflow:ellipsis;",
                                        "max-width:",
                                        "600",
                                        "px;vertical-align:top;text-overflow:ellipsis;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__TitleBounded",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__Title-sc-1hxg8jo-4",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__TitleBounded-sc-1hxg8jo-5",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="c3"
                                >
                                  <SnippetPreview__TitleUnboundedMobile>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "SnippetPreview__TitleUnboundedMobile-sc-1hxg8jo-7",
                                            "isStatic": true,
                                            "lastClassName": "c4",
                                            "rules": Array [
                                              "display:inline-block;font-size:16px;line-height:1.2em;max-height:2.4em;overflow:hidden;text-overflow:ellipsis;",
                                            ],
                                          },
                                          "displayName": "SnippetPreview__TitleUnboundedMobile",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "SnippetPreview__TitleUnboundedMobile-sc-1hxg8jo-7",
                                          "target": "span",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={[Function]}
                                    >
                                      <span
                                        className="c4"
                                      >
                                        Test title
                                      </span>
                                    </StyledComponent>
                                  </SnippetPreview__TitleUnboundedMobile>
                                </div>
                              </StyledComponent>
                            </SnippetPreview__TitleBounded>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__BaseTitle>
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          Url preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__BaseUrl>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__BaseUrl-sc-1hxg8jo-8",
                                "isStatic": true,
                                "lastClassName": "c5",
                                "rules": Array [
                                  "display:inline-block;color:",
                                  "#006621",
                                  ";cursor:pointer;position:relative;max-width:90%;white-space:nowrap;font-size:14px;",
                                ],
                              },
                              "displayName": "SnippetPreview__BaseUrl",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__BaseUrl-sc-1hxg8jo-8",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <div
                            className="c5"
                          >
                            <SnippetPreview__BaseUrlOverflowContainer
                              onMouseEnter={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__BaseUrlOverflowContainer-sc-1hxg8jo-9",
                                      "isStatic": true,
                                      "lastClassName": "c6",
                                      "rules": Array [
                                        "display:inline-block;color:",
                                        "#006621",
                                        ";cursor:pointer;position:relative;max-width:90%;white-space:nowrap;font-size:14px;",
                                        "overflow:hidden;text-overflow:ellipsis;max-width:100%;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__BaseUrlOverflowContainer",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__BaseUrl-sc-1hxg8jo-8",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__BaseUrlOverflowContainer-sc-1hxg8jo-9",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                onMouseEnter={[Function]}
                                onMouseLeave={[Function]}
                                onMouseUp={[Function]}
                              >
                                <div
                                  className="c6"
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseUp={[Function]}
                                >
                                  example.org â€º test-slug
                                </div>
                              </StyledComponent>
                            </SnippetPreview__BaseUrlOverflowContainer>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__BaseUrl>
                    </div>
                  </StyledComponent>
                </SnippetPreview__MobilePartContainer>
                <SnippetPreview__Separator>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__Separator-sc-1hxg8jo-16",
                          "isStatic": true,
                          "lastClassName": "c7",
                          "rules": Array [
                            "border:0;border-bottom:1px solid #DFE1E5;margin:0;",
                          ],
                        },
                        "displayName": "SnippetPreview__Separator",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__Separator-sc-1hxg8jo-16",
                        "target": "hr",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <hr
                      className="c7"
                    />
                  </StyledComponent>
                </SnippetPreview__Separator>
                <SnippetPreview__MobilePartContainer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__MobilePartContainer-sc-1hxg8jo-12",
                          "isStatic": true,
                          "lastClassName": "c1",
                          "rules": Array [
                            "padding:8px 16px;",
                          ],
                        },
                        "displayName": "SnippetPreview__MobilePartContainer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__MobilePartContainer-sc-1hxg8jo-12",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="c1"
                    >
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          Meta description preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__MobileDescription
                        isDescriptionPlaceholder={false}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__MobileDescription-sc-1hxg8jo-11",
                                "isStatic": false,
                                "lastClassName": "c8",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";cursor:pointer;position:relative;max-width:",
                                  "600",
                                  "px;font-size:13px;",
                                  "font-size:14px;line-height:20px;",
                                ],
                              },
                              "displayName": "SnippetPreview__MobileDescription",
                              "foldedComponentIds": Array [
                                "SnippetPreview__DesktopDescription-sc-1hxg8jo-10",
                              ],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__MobileDescription-sc-1hxg8jo-11",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isDescriptionPlaceholder={false}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                        >
                          <div
                            className="c8"
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                          >
                            <SnippetPreview__MobileDescription
                              isDescriptionPlaceholder={false}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__MobileDescription-sc-1hxg8jo-11",
                                      "isStatic": false,
                                      "lastClassName": "c8",
                                      "rules": Array [
                                        "color:",
                                        [Function],
                                        ";cursor:pointer;position:relative;max-width:",
                                        "600",
                                        "px;font-size:13px;",
                                        "font-size:14px;line-height:20px;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__MobileDescription",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__DesktopDescription-sc-1hxg8jo-10",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__MobileDescription-sc-1hxg8jo-11",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={[Function]}
                                isDescriptionPlaceholder={false}
                              >
                                <div
                                  className="c8"
                                >
                                  Test description, %%replacement_variable%%
                                </div>
                              </StyledComponent>
                            </SnippetPreview__MobileDescription>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__MobileDescription>
                    </div>
                  </StyledComponent>
                </SnippetPreview__MobilePartContainer>
              </div>
            </StyledComponent>
          </SnippetPreview__MobileContainer>
        </section>
      </SnippetPreview>
      <ModeSwitcher
        active="mobile"
        onChange={[Function]}
      >
        <ModeSwitcher__Switcher>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "ModeSwitcher__Switcher-sc-9lbpr3-3",
                  "isStatic": true,
                  "lastClassName": "c9",
                  "rules": Array [
                    "display:inline-block;margin-top:10px;border:1px solid #dbdbdb;border-radius:4px;background-color:#f7f7f7;vertical-align:top;",
                  ],
                },
                "displayName": "ModeSwitcher__Switcher",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModeSwitcher__Switcher-sc-9lbpr3-3",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="c9"
            >
              <ModeSwitcher__MobileButton
                activeBackgroundColor="#f7f7f7"
                activeBorderColor="#888"
                activeColor="#000"
                aria-pressed={true}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                focusBackgroundColor="#fff"
                focusBorderColor="#0066cd"
                focusColor="#000"
                hoverBackgroundColor="#fff"
                hoverBorderColor="#888"
                hoverColor="#000"
                isActive={true}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <StyledComponent
                  activeBackgroundColor="#f7f7f7"
                  activeBorderColor="#888"
                  activeColor="#000"
                  aria-pressed={true}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  focusBackgroundColor="#fff"
                  focusBorderColor="#0066cd"
                  focusColor="#000"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "ModeSwitcher__MobileButton-sc-9lbpr3-1",
                        "isStatic": false,
                        "lastClassName": "c10",
                        "rules": Array [
                          "color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";box-shadow:0 1px 0 ",
                          [Function],
                          ";",
                          "&:active{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";box-shadow:inset 0 2px 5px -3px ",
                          "rgba( 0, 0, 0, 0.5 )",
                          ";}",
                          "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                          [Function],
                          ";color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";box-shadow:0 0 3px ",
                          "rgba( 8, 74, 103, 0.8 )",
                          ";}",
                          "&:hover{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";}",
                          "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                          "1px",
                          ";border-style:solid;margin:0;padding:",
                          "4px",
                          " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                          [Function],
                          ";overflow:visible;min-height:",
                          "32px",
                          ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                          "22px",
                          ";}}",
                          "border:none;border-bottom:4px solid transparent;width:31px;height:31px;border-color:",
                          [Function],
                          ";color:",
                          "#555",
                          ";transition:0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;transition-property:border-color;&:hover,&:focus{background-color:",
                          "#fff",
                          ";border:none;border-bottom:4px solid transparent;border-color:",
                          "#1e8cbe",
                          ";color:",
                          "#1e8cbe",
                          ";box-shadow:none;}",
                          "border-radius:3px 0 0 3px;",
                        ],
                      },
                      "defaultProps": Object {
                        "activeBackgroundColor": "#f7f7f7",
                        "activeBorderColor": "#888",
                        "activeColor": "#000",
                        "backgroundColor": "#f7f7f7",
                        "borderColor": "#ccc",
                        "boxShadowColor": "#ccc",
                        "focusBackgroundColor": "#fff",
                        "focusBorderColor": "#0066cd",
                        "focusColor": "#000",
                        "hoverBackgroundColor": "#fff",
                        "hoverBorderColor": "#888",
                        "hoverColor": "#000",
                        "textColor": "#555",
                        "type": "button",
                      },
                      "displayName": "ModeSwitcher__MobileButton",
                      "foldedComponentIds": Array [
                        "Button__BaseButton-sc-32rbq-4",
                        "Button-sc-32rbq-3",
                        "Button-sc-32rbq-1",
                        "Button-sc-32rbq-2",
                        "Button-sc-32rbq-0",
                        "ModeSwitcher__SwitcherButton-sc-9lbpr3-0",
                      ],
                      "propTypes": Object {
                        "activeBackgroundColor": [Function],
                        "activeBorderColor": [Function],
                        "activeColor": [Function],
                        "backgroundColor": [Function],
                        "borderColor": [Function],
                        "boxShadowColor": [Function],
                        "focusBackgroundColor": [Function],
                        "focusBorderColor": [Function],
                        "focusColor": [Function],
                        "hoverBackgroundColor": [Function],
                        "hoverBorderColor": [Function],
                        "hoverColor": [Function],
                        "textColor": [Function],
                        "type": [Function],
                      },
                      "render": [Function],
                      "styledComponentId": "ModeSwitcher__MobileButton-sc-9lbpr3-1",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hoverBackgroundColor="#fff"
                  hoverBorderColor="#888"
                  hoverColor="#000"
                  isActive={true}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <button
                    aria-pressed={true}
                    className="c10"
                    onClick={[Function]}
                    type="button"
                  >
                    <SvgIcon
                      color="currentColor"
                      icon="mobile"
                      size="22px"
                    >
                      <SvgIcon__StyledSvg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-mobile"
                        fill="currentColor"
                        focusable="false"
                        role="img"
                        size="22px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <StyledComponent
                          aria-hidden={true}
                          className="yoast-svg-icon yoast-svg-icon-mobile"
                          fill="currentColor"
                          focusable="false"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                "isStatic": false,
                                "lastClassName": "c11",
                                "rules": Array [
                                  "width:",
                                  [Function],
                                  ";height:",
                                  [Function],
                                  ";flex:none;",
                                ],
                              },
                              "displayName": "SvgIcon__StyledSvg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          role="img"
                          size="22px"
                          viewBox="0 0 1792 1792"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <svg
                            aria-hidden={true}
                            className="yoast-svg-icon yoast-svg-icon-mobile c11"
                            fill="currentColor"
                            focusable="false"
                            role="img"
                            size="22px"
                            viewBox="0 0 1792 1792"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
                            />
                          </svg>
                        </StyledComponent>
                      </SvgIcon__StyledSvg>
                    </SvgIcon>
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Mobile preview
                      </span>
                    </ScreenReaderText>
                  </button>
                </StyledComponent>
              </ModeSwitcher__MobileButton>
              <ModeSwitcher__DesktopButton
                activeBackgroundColor="#f7f7f7"
                activeBorderColor="#888"
                activeColor="#000"
                aria-pressed={false}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                focusBackgroundColor="#fff"
                focusBorderColor="#0066cd"
                focusColor="#000"
                hoverBackgroundColor="#fff"
                hoverBorderColor="#888"
                hoverColor="#000"
                isActive={false}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <StyledComponent
                  activeBackgroundColor="#f7f7f7"
                  activeBorderColor="#888"
                  activeColor="#000"
                  aria-pressed={false}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  focusBackgroundColor="#fff"
                  focusBorderColor="#0066cd"
                  focusColor="#000"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "ModeSwitcher__DesktopButton-sc-9lbpr3-2",
                        "isStatic": false,
                        "lastClassName": "c12",
                        "rules": Array [
                          "color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";box-shadow:0 1px 0 ",
                          [Function],
                          ";",
                          "&:active{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";box-shadow:inset 0 2px 5px -3px ",
                          "rgba( 0, 0, 0, 0.5 )",
                          ";}",
                          "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                          [Function],
                          ";color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";box-shadow:0 0 3px ",
                          "rgba( 8, 74, 103, 0.8 )",
                          ";}",
                          "&:hover{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";}",
                          "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                          "1px",
                          ";border-style:solid;margin:0;padding:",
                          "4px",
                          " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                          [Function],
                          ";overflow:visible;min-height:",
                          "32px",
                          ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                          "22px",
                          ";}}",
                          "border:none;border-bottom:4px solid transparent;width:31px;height:31px;border-color:",
                          [Function],
                          ";color:",
                          "#555",
                          ";transition:0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;transition-property:border-color;&:hover,&:focus{background-color:",
                          "#fff",
                          ";border:none;border-bottom:4px solid transparent;border-color:",
                          "#1e8cbe",
                          ";color:",
                          "#1e8cbe",
                          ";box-shadow:none;}",
                          "border-radius:0 3px 3px 0;",
                        ],
                      },
                      "defaultProps": Object {
                        "activeBackgroundColor": "#f7f7f7",
                        "activeBorderColor": "#888",
                        "activeColor": "#000",
                        "backgroundColor": "#f7f7f7",
                        "borderColor": "#ccc",
                        "boxShadowColor": "#ccc",
                        "focusBackgroundColor": "#fff",
                        "focusBorderColor": "#0066cd",
                        "focusColor": "#000",
                        "hoverBackgroundColor": "#fff",
                        "hoverBorderColor": "#888",
                        "hoverColor": "#000",
                        "textColor": "#555",
                        "type": "button",
                      },
                      "displayName": "ModeSwitcher__DesktopButton",
                      "foldedComponentIds": Array [
                        "Button__BaseButton-sc-32rbq-4",
                        "Button-sc-32rbq-3",
                        "Button-sc-32rbq-1",
                        "Button-sc-32rbq-2",
                        "Button-sc-32rbq-0",
                        "ModeSwitcher__SwitcherButton-sc-9lbpr3-0",
                      ],
                      "propTypes": Object {
                        "activeBackgroundColor": [Function],
                        "activeBorderColor": [Function],
                        "activeColor": [Function],
                        "backgroundColor": [Function],
                        "borderColor": [Function],
                        "boxShadowColor": [Function],
                        "focusBackgroundColor": [Function],
                        "focusBorderColor": [Function],
                        "focusColor": [Function],
                        "hoverBackgroundColor": [Function],
                        "hoverBorderColor": [Function],
                        "hoverColor": [Function],
                        "textColor": [Function],
                        "type": [Function],
                      },
                      "render": [Function],
                      "styledComponentId": "ModeSwitcher__DesktopButton-sc-9lbpr3-2",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hoverBackgroundColor="#fff"
                  hoverBorderColor="#888"
                  hoverColor="#000"
                  isActive={false}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <button
                    aria-pressed={false}
                    className="c12"
                    onClick={[Function]}
                    type="button"
                  >
                    <SvgIcon
                      color="currentColor"
                      icon="desktop"
                      size="18px"
                    >
                      <SvgIcon__StyledSvg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-desktop"
                        fill="currentColor"
                        focusable="false"
                        role="img"
                        size="18px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <StyledComponent
                          aria-hidden={true}
                          className="yoast-svg-icon yoast-svg-icon-desktop"
                          fill="currentColor"
                          focusable="false"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                "isStatic": false,
                                "lastClassName": "c13",
                                "rules": Array [
                                  "width:",
                                  [Function],
                                  ";height:",
                                  [Function],
                                  ";flex:none;",
                                ],
                              },
                              "displayName": "SvgIcon__StyledSvg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          role="img"
                          size="18px"
                          viewBox="0 0 1792 1792"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <svg
                            aria-hidden={true}
                            className="yoast-svg-icon yoast-svg-icon-desktop c13"
                            fill="currentColor"
                            focusable="false"
                            role="img"
                            size="18px"
                            viewBox="0 0 1792 1792"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
                            />
                          </svg>
                        </StyledComponent>
                      </SvgIcon__StyledSvg>
                    </SvgIcon>
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Desktop preview
                      </span>
                    </ScreenReaderText>
                  </button>
                </StyledComponent>
              </ModeSwitcher__DesktopButton>
            </div>
          </StyledComponent>
        </ModeSwitcher__Switcher>
      </ModeSwitcher>
      <SnippetEditor__EditSnippetButton
        activeBackgroundColor="#f7f7f7"
        activeBorderColor="#888"
        activeColor="#000"
        aria-expanded={false}
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        focusBackgroundColor="#fff"
        focusBorderColor="#0066cd"
        focusColor="#000"
        hoverBackgroundColor="#fff"
        hoverBorderColor="#888"
        hoverColor="#000"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <StyledComponent
          activeBackgroundColor="#f7f7f7"
          activeBorderColor="#888"
          activeColor="#000"
          aria-expanded={false}
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          focusBackgroundColor="#fff"
          focusBorderColor="#0066cd"
          focusColor="#000"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "SnippetEditor__EditSnippetButton-sc-144bmm3-1",
                "isStatic": false,
                "lastClassName": "c14",
                "rules": Array [
                  "color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";background:",
                  [Function],
                  ";box-shadow:0 1px 0 ",
                  [Function],
                  ";",
                  "&:active{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";box-shadow:inset 0 2px 5px -3px ",
                  "rgba( 0, 0, 0, 0.5 )",
                  ";}",
                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                  [Function],
                  ";color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";box-shadow:0 0 3px ",
                  "rgba( 8, 74, 103, 0.8 )",
                  ";}",
                  "&:hover{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";}",
                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                  "1px",
                  ";border-style:solid;margin:0;padding:",
                  "4px",
                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                  [Function],
                  ";overflow:visible;min-height:",
                  "32px",
                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                  "22px",
                  ";}}",
                  "height:33px;border:1px solid #dbdbdb;box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;",
                  "margin:",
                  [Function],
                  ";fill:",
                  "#555",
                  ";padding-left:8px;& svg{",
                  [Function],
                  ":7px;}",
                ],
              },
              "defaultProps": Object {
                "activeBackgroundColor": "#f7f7f7",
                "activeBorderColor": "#888",
                "activeColor": "#000",
                "backgroundColor": "#f7f7f7",
                "borderColor": "#ccc",
                "boxShadowColor": "#ccc",
                "focusBackgroundColor": "#fff",
                "focusBorderColor": "#0066cd",
                "focusColor": "#000",
                "hoverBackgroundColor": "#fff",
                "hoverBorderColor": "#888",
                "hoverColor": "#000",
                "textColor": "#555",
                "type": "button",
              },
              "displayName": "SnippetEditor__EditSnippetButton",
              "foldedComponentIds": Array [
                "Button__BaseButton-sc-32rbq-4",
                "Button-sc-32rbq-3",
                "Button-sc-32rbq-1",
                "Button-sc-32rbq-2",
                "Button-sc-32rbq-0",
                "SnippetEditor__SnippetEditorButton-sc-144bmm3-0",
              ],
              "propTypes": Object {
                "activeBackgroundColor": [Function],
                "activeBorderColor": [Function],
                "activeColor": [Function],
                "backgroundColor": [Function],
                "borderColor": [Function],
                "boxShadowColor": [Function],
                "focusBackgroundColor": [Function],
                "focusBorderColor": [Function],
                "focusColor": [Function],
                "hoverBackgroundColor": [Function],
                "hoverBorderColor": [Function],
                "hoverColor": [Function],
                "textColor": [Function],
                "type": [Function],
              },
              "render": [Function],
              "styledComponentId": "SnippetEditor__EditSnippetButton-sc-144bmm3-1",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={[Function]}
          hoverBackgroundColor="#fff"
          hoverBorderColor="#888"
          hoverColor="#000"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <button
            aria-expanded={false}
            className="c14"
            onClick={[Function]}
            type="button"
          >
            <SvgIcon
              color="currentColor"
              icon="edit"
              size="16px"
            >
              <SvgIcon__StyledSvg
                aria-hidden={true}
                className="yoast-svg-icon yoast-svg-icon-edit"
                fill="currentColor"
                focusable="false"
                role="img"
                size="16px"
                viewBox="0 0 1792 1792"
                xmlns="http://www.w3.org/2000/svg"
              >
                <StyledComponent
                  aria-hidden={true}
                  className="yoast-svg-icon yoast-svg-icon-edit"
                  fill="currentColor"
                  focusable="false"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                        "isStatic": false,
                        "lastClassName": "c15",
                        "rules": Array [
                          "width:",
                          [Function],
                          ";height:",
                          [Function],
                          ";flex:none;",
                        ],
                      },
                      "displayName": "SvgIcon__StyledSvg",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                      "target": "svg",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  role="img"
                  size="16px"
                  viewBox="0 0 1792 1792"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <svg
                    aria-hidden={true}
                    className="yoast-svg-icon yoast-svg-icon-edit c15"
                    fill="currentColor"
                    focusable="false"
                    role="img"
                    size="16px"
                    viewBox="0 0 1792 1792"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
                    />
                  </svg>
                </StyledComponent>
              </SvgIcon__StyledSvg>
            </SvgIcon>
            Edit snippet
          </button>
        </StyledComponent>
      </SnippetEditor__EditSnippetButton>
    </div>
  </ErrorBoundary>
</SnippetEditor>
`;

exports[`SnippetEditor colored progress bars can handle a score of 6 1`] = `
.c21 {
  box-sizing: border-box;
  width: 100%;
  height: 8px;
  display: block;
  margin-top: 8px;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background-color: #f7f7f7;
  border: 1px solid #ddd;
}

.c21::-webkit-progress-bar {
  background-color: #f7f7f7;
}

.c21::-webkit-progress-value {
  background-color: #dc3232;
  -webkit-transition: width 250ms;
  transition: width 250ms;
}

.c21::-moz-progress-bar {
  background-color: #dc3232;
}

.c21::-ms-fill {
  background-color: #dc3232;
  border: 0;
}

.c25 {
  box-sizing: border-box;
  width: 100%;
  height: 8px;
  display: block;
  margin-top: 8px;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background-color: #f7f7f7;
  border: 1px solid #ddd;
}

.c25::-webkit-progress-bar {
  background-color: #f7f7f7;
}

.c25::-webkit-progress-value {
  background-color: #ee7c1b;
  -webkit-transition: width 250ms;
  transition: width 250ms;
}

.c25::-moz-progress-bar {
  background-color: #ee7c1b;
}

.c25::-ms-fill {
  background-color: #ee7c1b;
  border: 0;
}

.c17 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  margin: 24px 0 0 0;
}

.c16 {
  padding: 0 20px;
}

.c18 {
  -webkit-flex: 1 1 200px;
  -ms-flex: 1 1 200px;
  flex: 1 1 200px;
  min-width: 200px;
  cursor: pointer;
  font-size: 16px;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin: 4px 0;
}

.c19 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  padding-left: 8px;
  height: 33px;
  border: 1px solid #dbdbdb;
  font-size: 13px;
}

.c19:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c19::-moz-focus-inner {
  border-width: 0;
}

.c19:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c19:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c19 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c19 svg {
  margin-right: 7px;
  fill: #555;
}

.c0 {
  border-bottom: 1px hidden #fff;
  border-radius: 2px;
  box-shadow: 0 1px 2px rgba(0,0,0,.2);
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  max-width: 600px;
  box-sizing: border-box;
  font-size: 14px;
}

.c2 {
  cursor: pointer;
  position: relative;
}

.c3 {
  color: #1e0fbe;
  -webkit-text-decoration: none;
  text-decoration: none;
  font-size: 18px;
  line-height: 1.2;
  font-weight: normal;
  margin: 0;
  display: inline-block;
  overflow: hidden;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c4 {
  display: inline-block;
  font-size: 16px;
  line-height: 1.2em;
  max-height: 2.4em;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c5 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  white-space: nowrap;
  font-size: 14px;
}

.c6 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  white-space: nowrap;
  font-size: 14px;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 100%;
}

.c8 {
  color: #545454;
  cursor: pointer;
  position: relative;
  max-width: 600px;
  font-size: 13px;
  font-size: 14px;
  line-height: 20px;
}

.c1 {
  padding: 8px 16px;
}

.c7 {
  border: 0;
  border-bottom: 1px solid #DFE1E5;
  margin: 0;
}

.c23 {
  border: none;
  width: 100%;
  height: inherit;
  line-height: inherit;
  font-family: inherit;
  font-size: inherit;
  color: inherit;
}

.c23:focus {
  outline: 0;
}

.c20 {
  -webkit-flex: 0 1 100%;
  -ms-flex: 0 1 100%;
  flex: 0 1 100%;
  border: 1px solid #ddd;
  padding: 3px 5px;
  box-sizing: border-box;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  cursor: text;
}

.c20 .public-DraftStyleDefault-block {
  line-height: 24px;
}

.c20::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width%3D%221792%22%20height%3D%221792%22%20viewBox%3D%220%200%201792%201792%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20fill%3D%22transparent%22%20d%3D%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20%2F%3E%3C%2Fsvg%3E );
  background-size: 25px;
  content: "";
}

.c22 {
  -webkit-flex: 0 1 100%;
  -ms-flex: 0 1 100%;
  flex: 0 1 100%;
  border: 1px solid #ddd;
  padding: 3px 5px;
  box-sizing: border-box;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  cursor: text;
}

.c22::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width%3D%221792%22%20height%3D%221792%22%20viewBox%3D%220%200%201792%201792%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20fill%3D%22transparent%22%20d%3D%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20%2F%3E%3C%2Fsvg%3E );
  background-size: 25px;
  content: "";
}

.c24 {
  -webkit-flex: 0 1 100%;
  -ms-flex: 0 1 100%;
  flex: 0 1 100%;
  border: 1px solid #ddd;
  padding: 3px 5px;
  box-sizing: border-box;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  cursor: text;
  min-height: 72px;
  padding: 2px 6px;
  line-height: 24px;
}

.c24 .public-DraftEditorPlaceholder-root {
  color: #616161;
}

.c24 .public-DraftEditorPlaceholder-hasFocus {
  color: #616161;
}

.c24::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width%3D%221792%22%20height%3D%221792%22%20viewBox%3D%220%200%201792%201792%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20fill%3D%22transparent%22%20d%3D%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20%2F%3E%3C%2Fsvg%3E );
  background-size: 25px;
  content: "";
}

.c10 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: #555;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 3px 0 0 3px;
}

.c10:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c10::-moz-focus-inner {
  border-width: 0;
}

.c10:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c10:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c10 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c10:hover,
.c10:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
  box-shadow: none;
}

.c12 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: transparent;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 0 3px 3px 0;
}

.c12:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c12::-moz-focus-inner {
  border-width: 0;
}

.c12:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c12:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c12 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c12:hover,
.c12:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
  box-shadow: none;
}

.c9 {
  display: inline-block;
  margin-top: 10px;
  border: 1px solid #dbdbdb;
  border-radius: 4px;
  background-color: #f7f7f7;
  vertical-align: top;
}

.c14 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin: 10px 0 0 4px;
  fill: #555;
  padding-left: 8px;
}

.c14:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c14::-moz-focus-inner {
  border-width: 0;
}

.c14:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c14:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c14 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c14 svg {
  margin-right: 7px;
}

.c26 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin-top: 24px;
}

.c26:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c26::-moz-focus-inner {
  border-width: 0;
}

.c26:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c26:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c26 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c11 {
  width: 22px;
  height: 22px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c13 {
  width: 18px;
  height: 18px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c15 {
  width: 16px;
  height: 16px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c19::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c10::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c12::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c14::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c26::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

<SnippetEditor
  baseUrl="http://example.org/"
  data={
    Object {
      "description": "Test description, %%replacement_variable%%",
      "slug": "test-slug",
      "title": "Test title",
    }
  }
  date=""
  descriptionEditorFieldPlaceholder=""
  descriptionLengthProgress={
    Object {
      "actual": 0,
      "max": 156,
      "score": 0,
    }
  }
  hasPaperStyle={true}
  locale="en"
  mapEditorDataToPreview={null}
  mode="mobile"
  onChange={[MockFunction]}
  onChangeAnalysisData={[Function]}
  recommendedReplacementVariables={Array []}
  replacementVariables={Array []}
  showCloseButton={true}
  titleLengthProgress={
    Object {
      "actual": 361,
      "max": 550,
      "score": 6,
    }
  }
  wordsToHighlight={Array []}
>
  <ErrorBoundary>
    <div>
      <SnippetPreview
        activeField={null}
        breadcrumbs={null}
        date=""
        description="Test description, %%replacement_variable%%"
        hoveredField={null}
        isAmp={false}
        keyword=""
        locale="en"
        mode="mobile"
        onHover={[Function]}
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        title="Test title"
        url="example.org/test-slug"
        wordsToHighlight={Array []}
      >
        <section>
          <SnippetPreview__MobileContainer
            padding={20}
            width={640}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "SnippetPreview__MobileContainer-sc-1hxg8jo-1",
                    "isStatic": true,
                    "lastClassName": "c0",
                    "rules": Array [
                      "border-bottom:1px hidden #fff;border-radius:2px;box-shadow:0 1px 2px rgba(0,0,0,.2);font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;max-width:",
                      "600",
                      "px;box-sizing:border-box;font-size:14px;",
                    ],
                  },
                  "displayName": "SnippetPreview__MobileContainer",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "SnippetPreview__MobileContainer-sc-1hxg8jo-1",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              padding={20}
              width={640}
            >
              <div
                className="c0"
                width={640}
              >
                <SnippetPreview__MobilePartContainer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__MobilePartContainer-sc-1hxg8jo-12",
                          "isStatic": true,
                          "lastClassName": "c1",
                          "rules": Array [
                            "padding:8px 16px;",
                          ],
                        },
                        "displayName": "SnippetPreview__MobilePartContainer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__MobilePartContainer-sc-1hxg8jo-12",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="c1"
                    >
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          SEO title preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__BaseTitle
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__BaseTitle-sc-1hxg8jo-2",
                                "isStatic": true,
                                "lastClassName": "c2",
                                "rules": Array [
                                  "cursor:pointer;position:relative;",
                                ],
                              },
                              "displayName": "SnippetPreview__BaseTitle",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__BaseTitle-sc-1hxg8jo-2",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                        >
                          <div
                            className="c2"
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                          >
                            <SnippetPreview__TitleBounded>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__TitleBounded-sc-1hxg8jo-5",
                                      "isStatic": true,
                                      "lastClassName": "c3",
                                      "rules": Array [
                                        "color:",
                                        "#1e0fbe",
                                        ";text-decoration:none;font-size:18px;line-height:1.2;font-weight:normal;margin:0;display:inline-block;overflow:hidden;max-width:",
                                        "600",
                                        "px;vertical-align:top;text-overflow:ellipsis;",
                                        "max-width:",
                                        "600",
                                        "px;vertical-align:top;text-overflow:ellipsis;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__TitleBounded",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__Title-sc-1hxg8jo-4",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__TitleBounded-sc-1hxg8jo-5",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="c3"
                                >
                                  <SnippetPreview__TitleUnboundedMobile>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "SnippetPreview__TitleUnboundedMobile-sc-1hxg8jo-7",
                                            "isStatic": true,
                                            "lastClassName": "c4",
                                            "rules": Array [
                                              "display:inline-block;font-size:16px;line-height:1.2em;max-height:2.4em;overflow:hidden;text-overflow:ellipsis;",
                                            ],
                                          },
                                          "displayName": "SnippetPreview__TitleUnboundedMobile",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "SnippetPreview__TitleUnboundedMobile-sc-1hxg8jo-7",
                                          "target": "span",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={[Function]}
                                    >
                                      <span
                                        className="c4"
                                      >
                                        Test title
                                      </span>
                                    </StyledComponent>
                                  </SnippetPreview__TitleUnboundedMobile>
                                </div>
                              </StyledComponent>
                            </SnippetPreview__TitleBounded>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__BaseTitle>
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          Url preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__BaseUrl>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__BaseUrl-sc-1hxg8jo-8",
                                "isStatic": true,
                                "lastClassName": "c5",
                                "rules": Array [
                                  "display:inline-block;color:",
                                  "#006621",
                                  ";cursor:pointer;position:relative;max-width:90%;white-space:nowrap;font-size:14px;",
                                ],
                              },
                              "displayName": "SnippetPreview__BaseUrl",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__BaseUrl-sc-1hxg8jo-8",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <div
                            className="c5"
                          >
                            <SnippetPreview__BaseUrlOverflowContainer
                              onMouseEnter={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__BaseUrlOverflowContainer-sc-1hxg8jo-9",
                                      "isStatic": true,
                                      "lastClassName": "c6",
                                      "rules": Array [
                                        "display:inline-block;color:",
                                        "#006621",
                                        ";cursor:pointer;position:relative;max-width:90%;white-space:nowrap;font-size:14px;",
                                        "overflow:hidden;text-overflow:ellipsis;max-width:100%;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__BaseUrlOverflowContainer",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__BaseUrl-sc-1hxg8jo-8",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__BaseUrlOverflowContainer-sc-1hxg8jo-9",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                onMouseEnter={[Function]}
                                onMouseLeave={[Function]}
                                onMouseUp={[Function]}
                              >
                                <div
                                  className="c6"
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseUp={[Function]}
                                >
                                  example.org â€º test-slug
                                </div>
                              </StyledComponent>
                            </SnippetPreview__BaseUrlOverflowContainer>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__BaseUrl>
                    </div>
                  </StyledComponent>
                </SnippetPreview__MobilePartContainer>
                <SnippetPreview__Separator>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__Separator-sc-1hxg8jo-16",
                          "isStatic": true,
                          "lastClassName": "c7",
                          "rules": Array [
                            "border:0;border-bottom:1px solid #DFE1E5;margin:0;",
                          ],
                        },
                        "displayName": "SnippetPreview__Separator",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__Separator-sc-1hxg8jo-16",
                        "target": "hr",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <hr
                      className="c7"
                    />
                  </StyledComponent>
                </SnippetPreview__Separator>
                <SnippetPreview__MobilePartContainer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__MobilePartContainer-sc-1hxg8jo-12",
                          "isStatic": true,
                          "lastClassName": "c1",
                          "rules": Array [
                            "padding:8px 16px;",
                          ],
                        },
                        "displayName": "SnippetPreview__MobilePartContainer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__MobilePartContainer-sc-1hxg8jo-12",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="c1"
                    >
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          Meta description preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__MobileDescription
                        isDescriptionPlaceholder={false}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__MobileDescription-sc-1hxg8jo-11",
                                "isStatic": false,
                                "lastClassName": "c8",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";cursor:pointer;position:relative;max-width:",
                                  "600",
                                  "px;font-size:13px;",
                                  "font-size:14px;line-height:20px;",
                                ],
                              },
                              "displayName": "SnippetPreview__MobileDescription",
                              "foldedComponentIds": Array [
                                "SnippetPreview__DesktopDescription-sc-1hxg8jo-10",
                              ],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__MobileDescription-sc-1hxg8jo-11",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isDescriptionPlaceholder={false}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                        >
                          <div
                            className="c8"
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                          >
                            <SnippetPreview__MobileDescription
                              isDescriptionPlaceholder={false}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__MobileDescription-sc-1hxg8jo-11",
                                      "isStatic": false,
                                      "lastClassName": "c8",
                                      "rules": Array [
                                        "color:",
                                        [Function],
                                        ";cursor:pointer;position:relative;max-width:",
                                        "600",
                                        "px;font-size:13px;",
                                        "font-size:14px;line-height:20px;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__MobileDescription",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__DesktopDescription-sc-1hxg8jo-10",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__MobileDescription-sc-1hxg8jo-11",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={[Function]}
                                isDescriptionPlaceholder={false}
                              >
                                <div
                                  className="c8"
                                >
                                  Test description, %%replacement_variable%%
                                </div>
                              </StyledComponent>
                            </SnippetPreview__MobileDescription>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__MobileDescription>
                    </div>
                  </StyledComponent>
                </SnippetPreview__MobilePartContainer>
              </div>
            </StyledComponent>
          </SnippetPreview__MobileContainer>
        </section>
      </SnippetPreview>
      <ModeSwitcher
        active="mobile"
        onChange={[Function]}
      >
        <ModeSwitcher__Switcher>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "ModeSwitcher__Switcher-sc-9lbpr3-3",
                  "isStatic": true,
                  "lastClassName": "c9",
                  "rules": Array [
                    "display:inline-block;margin-top:10px;border:1px solid #dbdbdb;border-radius:4px;background-color:#f7f7f7;vertical-align:top;",
                  ],
                },
                "displayName": "ModeSwitcher__Switcher",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModeSwitcher__Switcher-sc-9lbpr3-3",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="c9"
            >
              <ModeSwitcher__MobileButton
                activeBackgroundColor="#f7f7f7"
                activeBorderColor="#888"
                activeColor="#000"
                aria-pressed={true}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                focusBackgroundColor="#fff"
                focusBorderColor="#0066cd"
                focusColor="#000"
                hoverBackgroundColor="#fff"
                hoverBorderColor="#888"
                hoverColor="#000"
                isActive={true}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <StyledComponent
                  activeBackgroundColor="#f7f7f7"
                  activeBorderColor="#888"
                  activeColor="#000"
                  aria-pressed={true}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  focusBackgroundColor="#fff"
                  focusBorderColor="#0066cd"
                  focusColor="#000"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "ModeSwitcher__MobileButton-sc-9lbpr3-1",
                        "isStatic": false,
                        "lastClassName": "c10",
                        "rules": Array [
                          "color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";box-shadow:0 1px 0 ",
                          [Function],
                          ";",
                          "&:active{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";box-shadow:inset 0 2px 5px -3px ",
                          "rgba( 0, 0, 0, 0.5 )",
                          ";}",
                          "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                          [Function],
                          ";color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";box-shadow:0 0 3px ",
                          "rgba( 8, 74, 103, 0.8 )",
                          ";}",
                          "&:hover{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";}",
                          "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                          "1px",
                          ";border-style:solid;margin:0;padding:",
                          "4px",
                          " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                          [Function],
                          ";overflow:visible;min-height:",
                          "32px",
                          ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                          "22px",
                          ";}}",
                          "border:none;border-bottom:4px solid transparent;width:31px;height:31px;border-color:",
                          [Function],
                          ";color:",
                          "#555",
                          ";transition:0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;transition-property:border-color;&:hover,&:focus{background-color:",
                          "#fff",
                          ";border:none;border-bottom:4px solid transparent;border-color:",
                          "#1e8cbe",
                          ";color:",
                          "#1e8cbe",
                          ";box-shadow:none;}",
                          "border-radius:3px 0 0 3px;",
                        ],
                      },
                      "defaultProps": Object {
                        "activeBackgroundColor": "#f7f7f7",
                        "activeBorderColor": "#888",
                        "activeColor": "#000",
                        "backgroundColor": "#f7f7f7",
                        "borderColor": "#ccc",
                        "boxShadowColor": "#ccc",
                        "focusBackgroundColor": "#fff",
                        "focusBorderColor": "#0066cd",
                        "focusColor": "#000",
                        "hoverBackgroundColor": "#fff",
                        "hoverBorderColor": "#888",
                        "hoverColor": "#000",
                        "textColor": "#555",
                        "type": "button",
                      },
                      "displayName": "ModeSwitcher__MobileButton",
                      "foldedComponentIds": Array [
                        "Button__BaseButton-sc-32rbq-4",
                        "Button-sc-32rbq-3",
                        "Button-sc-32rbq-1",
                        "Button-sc-32rbq-2",
                        "Button-sc-32rbq-0",
                        "ModeSwitcher__SwitcherButton-sc-9lbpr3-0",
                      ],
                      "propTypes": Object {
                        "activeBackgroundColor": [Function],
                        "activeBorderColor": [Function],
                        "activeColor": [Function],
                        "backgroundColor": [Function],
                        "borderColor": [Function],
                        "boxShadowColor": [Function],
                        "focusBackgroundColor": [Function],
                        "focusBorderColor": [Function],
                        "focusColor": [Function],
                        "hoverBackgroundColor": [Function],
                        "hoverBorderColor": [Function],
                        "hoverColor": [Function],
                        "textColor": [Function],
                        "type": [Function],
                      },
                      "render": [Function],
                      "styledComponentId": "ModeSwitcher__MobileButton-sc-9lbpr3-1",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hoverBackgroundColor="#fff"
                  hoverBorderColor="#888"
                  hoverColor="#000"
                  isActive={true}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <button
                    aria-pressed={true}
                    className="c10"
                    onClick={[Function]}
                    type="button"
                  >
                    <SvgIcon
                      color="currentColor"
                      icon="mobile"
                      size="22px"
                    >
                      <SvgIcon__StyledSvg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-mobile"
                        fill="currentColor"
                        focusable="false"
                        role="img"
                        size="22px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <StyledComponent
                          aria-hidden={true}
                          className="yoast-svg-icon yoast-svg-icon-mobile"
                          fill="currentColor"
                          focusable="false"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                "isStatic": false,
                                "lastClassName": "c11",
                                "rules": Array [
                                  "width:",
                                  [Function],
                                  ";height:",
                                  [Function],
                                  ";flex:none;",
                                ],
                              },
                              "displayName": "SvgIcon__StyledSvg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          role="img"
                          size="22px"
                          viewBox="0 0 1792 1792"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <svg
                            aria-hidden={true}
                            className="yoast-svg-icon yoast-svg-icon-mobile c11"
                            fill="currentColor"
                            focusable="false"
                            role="img"
                            size="22px"
                            viewBox="0 0 1792 1792"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
                            />
                          </svg>
                        </StyledComponent>
                      </SvgIcon__StyledSvg>
                    </SvgIcon>
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Mobile preview
                      </span>
                    </ScreenReaderText>
                  </button>
                </StyledComponent>
              </ModeSwitcher__MobileButton>
              <ModeSwitcher__DesktopButton
                activeBackgroundColor="#f7f7f7"
                activeBorderColor="#888"
                activeColor="#000"
                aria-pressed={false}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                focusBackgroundColor="#fff"
                focusBorderColor="#0066cd"
                focusColor="#000"
                hoverBackgroundColor="#fff"
                hoverBorderColor="#888"
                hoverColor="#000"
                isActive={false}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <StyledComponent
                  activeBackgroundColor="#f7f7f7"
                  activeBorderColor="#888"
                  activeColor="#000"
                  aria-pressed={false}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  focusBackgroundColor="#fff"
                  focusBorderColor="#0066cd"
                  focusColor="#000"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "ModeSwitcher__DesktopButton-sc-9lbpr3-2",
                        "isStatic": false,
                        "lastClassName": "c12",
                        "rules": Array [
                          "color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";box-shadow:0 1px 0 ",
                          [Function],
                          ";",
                          "&:active{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";box-shadow:inset 0 2px 5px -3px ",
                          "rgba( 0, 0, 0, 0.5 )",
                          ";}",
                          "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                          [Function],
                          ";color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";box-shadow:0 0 3px ",
                          "rgba( 8, 74, 103, 0.8 )",
                          ";}",
                          "&:hover{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";}",
                          "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                          "1px",
                          ";border-style:solid;margin:0;padding:",
                          "4px",
                          " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                          [Function],
                          ";overflow:visible;min-height:",
                          "32px",
                          ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                          "22px",
                          ";}}",
                          "border:none;border-bottom:4px solid transparent;width:31px;height:31px;border-color:",
                          [Function],
                          ";color:",
                          "#555",
                          ";transition:0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;transition-property:border-color;&:hover,&:focus{background-color:",
                          "#fff",
                          ";border:none;border-bottom:4px solid transparent;border-color:",
                          "#1e8cbe",
                          ";color:",
                          "#1e8cbe",
                          ";box-shadow:none;}",
                          "border-radius:0 3px 3px 0;",
                        ],
                      },
                      "defaultProps": Object {
                        "activeBackgroundColor": "#f7f7f7",
                        "activeBorderColor": "#888",
                        "activeColor": "#000",
                        "backgroundColor": "#f7f7f7",
                        "borderColor": "#ccc",
                        "boxShadowColor": "#ccc",
                        "focusBackgroundColor": "#fff",
                        "focusBorderColor": "#0066cd",
                        "focusColor": "#000",
                        "hoverBackgroundColor": "#fff",
                        "hoverBorderColor": "#888",
                        "hoverColor": "#000",
                        "textColor": "#555",
                        "type": "button",
                      },
                      "displayName": "ModeSwitcher__DesktopButton",
                      "foldedComponentIds": Array [
                        "Button__BaseButton-sc-32rbq-4",
                        "Button-sc-32rbq-3",
                        "Button-sc-32rbq-1",
                        "Button-sc-32rbq-2",
                        "Button-sc-32rbq-0",
                        "ModeSwitcher__SwitcherButton-sc-9lbpr3-0",
                      ],
                      "propTypes": Object {
                        "activeBackgroundColor": [Function],
                        "activeBorderColor": [Function],
                        "activeColor": [Function],
                        "backgroundColor": [Function],
                        "borderColor": [Function],
                        "boxShadowColor": [Function],
                        "focusBackgroundColor": [Function],
                        "focusBorderColor": [Function],
                        "focusColor": [Function],
                        "hoverBackgroundColor": [Function],
                        "hoverBorderColor": [Function],
                        "hoverColor": [Function],
                        "textColor": [Function],
                        "type": [Function],
                      },
                      "render": [Function],
                      "styledComponentId": "ModeSwitcher__DesktopButton-sc-9lbpr3-2",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hoverBackgroundColor="#fff"
                  hoverBorderColor="#888"
                  hoverColor="#000"
                  isActive={false}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <button
                    aria-pressed={false}
                    className="c12"
                    onClick={[Function]}
                    type="button"
                  >
                    <SvgIcon
                      color="currentColor"
                      icon="desktop"
                      size="18px"
                    >
                      <SvgIcon__StyledSvg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-desktop"
                        fill="currentColor"
                        focusable="false"
                        role="img"
                        size="18px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <StyledComponent
                          aria-hidden={true}
                          className="yoast-svg-icon yoast-svg-icon-desktop"
                          fill="currentColor"
                          focusable="false"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                "isStatic": false,
                                "lastClassName": "c13",
                                "rules": Array [
                                  "width:",
                                  [Function],
                                  ";height:",
                                  [Function],
                                  ";flex:none;",
                                ],
                              },
                              "displayName": "SvgIcon__StyledSvg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          role="img"
                          size="18px"
                          viewBox="0 0 1792 1792"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <svg
                            aria-hidden={true}
                            className="yoast-svg-icon yoast-svg-icon-desktop c13"
                            fill="currentColor"
                            focusable="false"
                            role="img"
                            size="18px"
                            viewBox="0 0 1792 1792"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
                            />
                          </svg>
                        </StyledComponent>
                      </SvgIcon__StyledSvg>
                    </SvgIcon>
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Desktop preview
                      </span>
                    </ScreenReaderText>
                  </button>
                </StyledComponent>
              </ModeSwitcher__DesktopButton>
            </div>
          </StyledComponent>
        </ModeSwitcher__Switcher>
      </ModeSwitcher>
      <SnippetEditor__EditSnippetButton
        activeBackgroundColor="#f7f7f7"
        activeBorderColor="#888"
        activeColor="#000"
        aria-expanded={true}
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        focusBackgroundColor="#fff"
        focusBorderColor="#0066cd"
        focusColor="#000"
        hoverBackgroundColor="#fff"
        hoverBorderColor="#888"
        hoverColor="#000"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <StyledComponent
          activeBackgroundColor="#f7f7f7"
          activeBorderColor="#888"
          activeColor="#000"
          aria-expanded={true}
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          focusBackgroundColor="#fff"
          focusBorderColor="#0066cd"
          focusColor="#000"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "SnippetEditor__EditSnippetButton-sc-144bmm3-1",
                "isStatic": false,
                "lastClassName": "c14",
                "rules": Array [
                  "color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";background:",
                  [Function],
                  ";box-shadow:0 1px 0 ",
                  [Function],
                  ";",
                  "&:active{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";box-shadow:inset 0 2px 5px -3px ",
                  "rgba( 0, 0, 0, 0.5 )",
                  ";}",
                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                  [Function],
                  ";color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";box-shadow:0 0 3px ",
                  "rgba( 8, 74, 103, 0.8 )",
                  ";}",
                  "&:hover{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";}",
                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                  "1px",
                  ";border-style:solid;margin:0;padding:",
                  "4px",
                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                  [Function],
                  ";overflow:visible;min-height:",
                  "32px",
                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                  "22px",
                  ";}}",
                  "height:33px;border:1px solid #dbdbdb;box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;",
                  "margin:",
                  [Function],
                  ";fill:",
                  "#555",
                  ";padding-left:8px;& svg{",
                  [Function],
                  ":7px;}",
                ],
              },
              "defaultProps": Object {
                "activeBackgroundColor": "#f7f7f7",
                "activeBorderColor": "#888",
                "activeColor": "#000",
                "backgroundColor": "#f7f7f7",
                "borderColor": "#ccc",
                "boxShadowColor": "#ccc",
                "focusBackgroundColor": "#fff",
                "focusBorderColor": "#0066cd",
                "focusColor": "#000",
                "hoverBackgroundColor": "#fff",
                "hoverBorderColor": "#888",
                "hoverColor": "#000",
                "textColor": "#555",
                "type": "button",
              },
              "displayName": "SnippetEditor__EditSnippetButton",
              "foldedComponentIds": Array [
                "Button__BaseButton-sc-32rbq-4",
                "Button-sc-32rbq-3",
                "Button-sc-32rbq-1",
                "Button-sc-32rbq-2",
                "Button-sc-32rbq-0",
                "SnippetEditor__SnippetEditorButton-sc-144bmm3-0",
              ],
              "propTypes": Object {
                "activeBackgroundColor": [Function],
                "activeBorderColor": [Function],
                "activeColor": [Function],
                "backgroundColor": [Function],
                "borderColor": [Function],
                "boxShadowColor": [Function],
                "focusBackgroundColor": [Function],
                "focusBorderColor": [Function],
                "focusColor": [Function],
                "hoverBackgroundColor": [Function],
                "hoverBorderColor": [Function],
                "hoverColor": [Function],
                "textColor": [Function],
                "type": [Function],
              },
              "render": [Function],
              "styledComponentId": "SnippetEditor__EditSnippetButton-sc-144bmm3-1",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={[Function]}
          hoverBackgroundColor="#fff"
          hoverBorderColor="#888"
          hoverColor="#000"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <button
            aria-expanded={true}
            className="c14"
            onClick={[Function]}
            type="button"
          >
            <SvgIcon
              color="currentColor"
              icon="edit"
              size="16px"
            >
              <SvgIcon__StyledSvg
                aria-hidden={true}
                className="yoast-svg-icon yoast-svg-icon-edit"
                fill="currentColor"
                focusable="false"
                role="img"
                size="16px"
                viewBox="0 0 1792 1792"
                xmlns="http://www.w3.org/2000/svg"
              >
                <StyledComponent
                  aria-hidden={true}
                  className="yoast-svg-icon yoast-svg-icon-edit"
                  fill="currentColor"
                  focusable="false"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                        "isStatic": false,
                        "lastClassName": "c15",
                        "rules": Array [
                          "width:",
                          [Function],
                          ";height:",
                          [Function],
                          ";flex:none;",
                        ],
                      },
                      "displayName": "SvgIcon__StyledSvg",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                      "target": "svg",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  role="img"
                  size="16px"
                  viewBox="0 0 1792 1792"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <svg
                    aria-hidden={true}
                    className="yoast-svg-icon yoast-svg-icon-edit c15"
                    fill="currentColor"
                    focusable="false"
                    role="img"
                    size="16px"
                    viewBox="0 0 1792 1792"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
                    />
                  </svg>
                </StyledComponent>
              </SvgIcon__StyledSvg>
            </SvgIcon>
            Edit snippet
          </button>
        </StyledComponent>
      </SnippetEditor__EditSnippetButton>
      <SnippetEditorFields
        activeField={null}
        containerPadding="0 20px"
        data={
          Object {
            "description": "Test description, %%replacement_variable%%",
            "slug": "test-slug",
            "title": "Test title",
          }
        }
        descriptionEditorFieldPlaceholder="Modify your meta description by editing it right here"
        descriptionLengthProgress={
          Object {
            "actual": 42,
            "max": 156,
            "score": 6,
          }
        }
        hoveredField={null}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        recommendedReplacementVariables={Array []}
        replacementVariables={Array []}
        titleLengthProgress={
          Object {
            "actual": 0,
            "max": 600,
            "score": 1,
          }
        }
      >
        <shared__StyledEditor
          padding="0 20px"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "shared__StyledEditor-lzs0hf-5",
                  "isStatic": false,
                  "lastClassName": "c16",
                  "rules": Array [
                    "padding:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "shared__StyledEditor",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "shared__StyledEditor-lzs0hf-5",
                "target": "section",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            padding="0 20px"
          >
            <section
              className="c16"
            >
              <shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "shared__FormSection-lzs0hf-4",
                        "isStatic": true,
                        "lastClassName": "c17",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "shared__FormSection-lzs0hf-4",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="c17"
                  >
                    <ReplacementVariableEditor
                      content="Test title"
                      editorRef={[Function]}
                      fieldId="snippet-editor-field-title"
                      isActive={false}
                      isHovered={false}
                      label="SEO title"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      recommendedReplacementVariables={Array []}
                      replacementVariables={Array []}
                      withCaret={true}
                    >
                      <shared__SimulatedLabel
                        id="30"
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared__SimulatedLabel-lzs0hf-6",
                                "isStatic": true,
                                "lastClassName": "c18",
                                "rules": Array [
                                  "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                                ],
                              },
                              "displayName": "shared__SimulatedLabel",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "shared__SimulatedLabel-lzs0hf-6",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          id="30"
                          onClick={[Function]}
                        >
                          <div
                            className="c18"
                            id="30"
                            onClick={[Function]}
                          >
                            SEO title
                          </div>
                        </StyledComponent>
                      </shared__SimulatedLabel>
                      <shared__TriggerReplacementVariableSuggestionsButton
                        activeBackgroundColor="#f7f7f7"
                        activeBorderColor="#888"
                        activeColor="#000"
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        focusBackgroundColor="#fff"
                        focusBorderColor="#0066cd"
                        focusColor="#000"
                        hoverBackgroundColor="#fff"
                        hoverBorderColor="#888"
                        hoverColor="#000"
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <StyledComponent
                          activeBackgroundColor="#f7f7f7"
                          activeBorderColor="#888"
                          activeColor="#000"
                          backgroundColor="#f7f7f7"
                          borderColor="#ccc"
                          boxShadowColor="#ccc"
                          focusBackgroundColor="#fff"
                          focusBorderColor="#0066cd"
                          focusColor="#000"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared__TriggerReplacementVariableSuggestionsButton-lzs0hf-7",
                                "isStatic": false,
                                "lastClassName": "c19",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";background:",
                                  [Function],
                                  ";box-shadow:0 1px 0 ",
                                  [Function],
                                  ";",
                                  "&:active{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";box-shadow:inset 0 2px 5px -3px ",
                                  "rgba( 0, 0, 0, 0.5 )",
                                  ";}",
                                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                                  [Function],
                                  ";color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";box-shadow:0 0 3px ",
                                  "rgba( 8, 74, 103, 0.8 )",
                                  ";}",
                                  "&:hover{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";}",
                                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                                  "1px",
                                  ";border-style:solid;margin:0;padding:",
                                  "4px",
                                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                                  [Function],
                                  ";overflow:visible;min-height:",
                                  "32px",
                                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                                  "22px",
                                  ";}}",
                                  "box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;padding-left:8px;height:33px;border:1px solid #dbdbdb;font-size:13px;& svg{",
                                  [Function],
                                  ":7px;fill:",
                                  "#555",
                                  ";}",
                                ],
                              },
                              "defaultProps": Object {
                                "activeBackgroundColor": "#f7f7f7",
                                "activeBorderColor": "#888",
                                "activeColor": "#000",
                                "backgroundColor": "#f7f7f7",
                                "borderColor": "#ccc",
                                "boxShadowColor": "#ccc",
                                "focusBackgroundColor": "#fff",
                                "focusBorderColor": "#0066cd",
                                "focusColor": "#000",
                                "hoverBackgroundColor": "#fff",
                                "hoverBorderColor": "#888",
                                "hoverColor": "#000",
                                "textColor": "#555",
                                "type": "button",
                              },
                              "displayName": "shared__TriggerReplacementVariableSuggestionsButton",
                              "foldedComponentIds": Array [
                                "Button__BaseButton-sc-32rbq-4",
                                "Button-sc-32rbq-3",
                                "Button-sc-32rbq-1",
                                "Button-sc-32rbq-2",
                                "Button-sc-32rbq-0",
                              ],
                              "propTypes": Object {
                                "activeBackgroundColor": [Function],
                                "activeBorderColor": [Function],
                                "activeColor": [Function],
                                "backgroundColor": [Function],
                                "borderColor": [Function],
                                "boxShadowColor": [Function],
                                "focusBackgroundColor": [Function],
                                "focusBorderColor": [Function],
                                "focusColor": [Function],
                                "hoverBackgroundColor": [Function],
                                "hoverBorderColor": [Function],
                                "hoverColor": [Function],
                                "textColor": [Function],
                                "type": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "shared__TriggerReplacementVariableSuggestionsButton-lzs0hf-7",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverBackgroundColor="#fff"
                          hoverBorderColor="#888"
                          hoverColor="#000"
                          onClick={[Function]}
                          textColor="#555"
                          type="button"
                        >
                          <button
                            className="c19"
                            onClick={[Function]}
                            type="button"
                          >
                            <SvgIcon
                              color="currentColor"
                              icon="plus-circle"
                              size="16px"
                            >
                              <SvgIcon__StyledSvg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="16px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <StyledComponent
                                  aria-hidden={true}
                                  className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                  fill="currentColor"
                                  focusable="false"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                        "isStatic": false,
                                        "lastClassName": "c15",
                                        "rules": Array [
                                          "width:",
                                          [Function],
                                          ";height:",
                                          [Function],
                                          ";flex:none;",
                                        ],
                                      },
                                      "displayName": "SvgIcon__StyledSvg",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                      "target": "svg",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  role="img"
                                  size="16px"
                                  viewBox="0 0 1792 1792"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="yoast-svg-icon yoast-svg-icon-plus-circle c15"
                                    fill="currentColor"
                                    focusable="false"
                                    role="img"
                                    size="16px"
                                    viewBox="0 0 1792 1792"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M1344 960v-128q0-26-19-45t-45-19h-256v-256q0-26-19-45t-45-19h-128q-26 0-45 19t-19 45v256h-256q-26 0-45 19t-19 45v128q0 26 19 45t45 19h256v256q0 26 19 45t45 19h128q26 0 45-19t19-45v-256h256q26 0 45-19t19-45zm320-64q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"
                                    />
                                  </svg>
                                </StyledComponent>
                              </SvgIcon__StyledSvg>
                            </SvgIcon>
                            Insert snippet variable
                          </button>
                        </StyledComponent>
                      </shared__TriggerReplacementVariableSuggestionsButton>
                      <shared
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {},
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared-lzs0hf-1",
                                "isStatic": false,
                                "lastClassName": "c20",
                                "rules": Array [
                                  "flex:0 1 100%;border:1px solid ",
                                  [Function],
                                  ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                  [Function],
                                  ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                  ".public-DraftStyleDefault-block{line-height:24px;}",
                                  "&::before{display:block;position:absolute;top:-1px;",
                                  [Function],
                                  ":-25px;width:24px;height:24px;background-image:url( ",
                                  [Function],
                                  " );background-size:25px;content:\\"\\";}",
                                ],
                              },
                              "displayName": "shared",
                              "foldedComponentIds": Array [
                                "shared__InputContainer-lzs0hf-0",
                                "shared__TitleInputContainer-lzs0hf-2",
                              ],
                              "render": [Function],
                              "styledComponentId": "shared-lzs0hf-1",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isActive={false}
                          isHovered={false}
                          onClick={[Function]}
                        >
                          <div
                            className="c20"
                            onClick={[Function]}
                          >
                            <ReplacementVariableEditorStandalone
                              ariaLabelledBy="30"
                              content="Test title"
                              fieldId="snippet-editor-field-title"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              recommendedReplacementVariables={Array []}
                              replacementVariables={Array []}
                            >
                              <div />
                            </ReplacementVariableEditorStandalone>
                          </div>
                        </StyledComponent>
                      </shared>
                    </ReplacementVariableEditor>
                    <ProgressBar
                      aria-hidden="true"
                      backgroundColor="#f7f7f7"
                      borderColor="#ddd"
                      max={600}
                      progressColor="#dc3232"
                      value={0}
                    >
                      <StyledComponent
                        aria-hidden="true"
                        backgroundColor="#f7f7f7"
                        borderColor="#ddd"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ProgressBar-sc-9g9yx6-0",
                              "isStatic": false,
                              "lastClassName": "c25",
                              "rules": Array [
                                "box-sizing:border-box;width:100%;height:8px;display:block;margin-top:8px;appearance:none;background-color:",
                                [Function],
                                ";border:1px solid ",
                                [Function],
                                ";::-webkit-progress-bar{background-color:",
                                [Function],
                                ";}::-webkit-progress-value{background-color:",
                                [Function],
                                ";transition:width 250ms;}::-moz-progress-bar{background-color:",
                                [Function],
                                ";}::-ms-fill{background-color:",
                                [Function],
                                ";border:0;}",
                              ],
                            },
                            "defaultProps": Object {
                              "aria-hidden": "true",
                              "backgroundColor": "#f7f7f7",
                              "borderColor": "#ddd",
                              "max": 1,
                              "progressColor": "#7ad03a",
                              "value": 0,
                            },
                            "displayName": "ProgressBar",
                            "foldedComponentIds": Array [],
                            "propTypes": Object {
                              "aria-hidden": [Function],
                              "backgroundColor": [Function],
                              "borderColor": [Function],
                              "max": [Function],
                              "progressColor": [Function],
                              "value": [Function],
                            },
                            "render": [Function],
                            "styledComponentId": "ProgressBar-sc-9g9yx6-0",
                            "target": "progress",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        max={600}
                        progressColor="#dc3232"
                        value={0}
                      >
                        <progress
                          aria-hidden="true"
                          className="c21"
                          max={600}
                          value={0}
                        />
                      </StyledComponent>
                    </ProgressBar>
                  </div>
                </StyledComponent>
              </shared__FormSection>
              <shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "shared__FormSection-lzs0hf-4",
                        "isStatic": true,
                        "lastClassName": "c17",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "shared__FormSection-lzs0hf-4",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="c17"
                  >
                    <shared__SimulatedLabel
                      id="snippet-editor-field-29-slug"
                      onClick={[Function]}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "shared__SimulatedLabel-lzs0hf-6",
                              "isStatic": true,
                              "lastClassName": "c18",
                              "rules": Array [
                                "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                              ],
                            },
                            "displayName": "shared__SimulatedLabel",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "shared__SimulatedLabel-lzs0hf-6",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        id="snippet-editor-field-29-slug"
                        onClick={[Function]}
                      >
                        <div
                          className="c18"
                          id="snippet-editor-field-29-slug"
                          onClick={[Function]}
                        >
                          Slug
                        </div>
                      </StyledComponent>
                    </shared__SimulatedLabel>
                    <shared
                      isActive={false}
                      isHovered={false}
                      onClick={[Function]}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [
                              Object {},
                            ],
                            "componentStyle": ComponentStyle {
                              "componentId": "shared-lzs0hf-1",
                              "isStatic": false,
                              "lastClassName": "c22",
                              "rules": Array [
                                "flex:0 1 100%;border:1px solid ",
                                [Function],
                                ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                [Function],
                                ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                "&::before{display:block;position:absolute;top:-1px;",
                                [Function],
                                ":-25px;width:24px;height:24px;background-image:url( ",
                                [Function],
                                " );background-size:25px;content:\\"\\";}",
                              ],
                            },
                            "displayName": "shared",
                            "foldedComponentIds": Array [
                              "shared__InputContainer-lzs0hf-0",
                            ],
                            "render": [Function],
                            "styledComponentId": "shared-lzs0hf-1",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <div
                          className="c22"
                          onClick={[Function]}
                        >
                          <SnippetEditorFields__SlugInput
                            aria-labelledby="snippet-editor-field-29-slug"
                            id="snippet-editor-field-slug"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            value="test-slug"
                          >
                            <StyledComponent
                              aria-labelledby="snippet-editor-field-29-slug"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "SnippetEditorFields__SlugInput-sc-1ioqi3y-0",
                                    "isStatic": true,
                                    "lastClassName": "c23",
                                    "rules": Array [
                                      "border:none;width:100%;height:inherit;line-height:inherit;font-family:inherit;font-size:inherit;color:inherit;&:focus{outline:0;}",
                                    ],
                                  },
                                  "displayName": "SnippetEditorFields__SlugInput",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "SnippetEditorFields__SlugInput-sc-1ioqi3y-0",
                                  "target": "input",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={[Function]}
                              id="snippet-editor-field-slug"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              value="test-slug"
                            >
                              <input
                                aria-labelledby="snippet-editor-field-29-slug"
                                className="c23"
                                id="snippet-editor-field-slug"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                value="test-slug"
                              />
                            </StyledComponent>
                          </SnippetEditorFields__SlugInput>
                        </div>
                      </StyledComponent>
                    </shared>
                  </div>
                </StyledComponent>
              </shared__FormSection>
              <shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "shared__FormSection-lzs0hf-4",
                        "isStatic": true,
                        "lastClassName": "c17",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "shared__FormSection-lzs0hf-4",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="c17"
                  >
                    <ReplacementVariableEditor
                      content="Test description, %%replacement_variable%%"
                      editorRef={[Function]}
                      fieldId="snippet-editor-field-description"
                      isActive={false}
                      isHovered={false}
                      label="Meta description"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      placeholder="Modify your meta description by editing it right here"
                      recommendedReplacementVariables={Array []}
                      replacementVariables={Array []}
                      type="description"
                      withCaret={true}
                    >
                      <shared__SimulatedLabel
                        id="31"
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared__SimulatedLabel-lzs0hf-6",
                                "isStatic": true,
                                "lastClassName": "c18",
                                "rules": Array [
                                  "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                                ],
                              },
                              "displayName": "shared__SimulatedLabel",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "shared__SimulatedLabel-lzs0hf-6",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          id="31"
                          onClick={[Function]}
                        >
                          <div
                            className="c18"
                            id="31"
                            onClick={[Function]}
                          >
                            Meta description
                          </div>
                        </StyledComponent>
                      </shared__SimulatedLabel>
                      <shared__TriggerReplacementVariableSuggestionsButton
                        activeBackgroundColor="#f7f7f7"
                        activeBorderColor="#888"
                        activeColor="#000"
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        focusBackgroundColor="#fff"
                        focusBorderColor="#0066cd"
                        focusColor="#000"
                        hoverBackgroundColor="#fff"
                        hoverBorderColor="#888"
                        hoverColor="#000"
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <StyledComponent
                          activeBackgroundColor="#f7f7f7"
                          activeBorderColor="#888"
                          activeColor="#000"
                          backgroundColor="#f7f7f7"
                          borderColor="#ccc"
                          boxShadowColor="#ccc"
                          focusBackgroundColor="#fff"
                          focusBorderColor="#0066cd"
                          focusColor="#000"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared__TriggerReplacementVariableSuggestionsButton-lzs0hf-7",
                                "isStatic": false,
                                "lastClassName": "c19",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";background:",
                                  [Function],
                                  ";box-shadow:0 1px 0 ",
                                  [Function],
                                  ";",
                                  "&:active{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";box-shadow:inset 0 2px 5px -3px ",
                                  "rgba( 0, 0, 0, 0.5 )",
                                  ";}",
                                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                                  [Function],
                                  ";color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";box-shadow:0 0 3px ",
                                  "rgba( 8, 74, 103, 0.8 )",
                                  ";}",
                                  "&:hover{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";}",
                                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                                  "1px",
                                  ";border-style:solid;margin:0;padding:",
                                  "4px",
                                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                                  [Function],
                                  ";overflow:visible;min-height:",
                                  "32px",
                                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                                  "22px",
                                  ";}}",
                                  "box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;padding-left:8px;height:33px;border:1px solid #dbdbdb;font-size:13px;& svg{",
                                  [Function],
                                  ":7px;fill:",
                                  "#555",
                                  ";}",
                                ],
                              },
                              "defaultProps": Object {
                                "activeBackgroundColor": "#f7f7f7",
                                "activeBorderColor": "#888",
                                "activeColor": "#000",
                                "backgroundColor": "#f7f7f7",
                                "borderColor": "#ccc",
                                "boxShadowColor": "#ccc",
                                "focusBackgroundColor": "#fff",
                                "focusBorderColor": "#0066cd",
                                "focusColor": "#000",
                                "hoverBackgroundColor": "#fff",
                                "hoverBorderColor": "#888",
                                "hoverColor": "#000",
                                "textColor": "#555",
                                "type": "button",
                              },
                              "displayName": "shared__TriggerReplacementVariableSuggestionsButton",
                              "foldedComponentIds": Array [
                                "Button__BaseButton-sc-32rbq-4",
                                "Button-sc-32rbq-3",
                                "Button-sc-32rbq-1",
                                "Button-sc-32rbq-2",
                                "Button-sc-32rbq-0",
                              ],
                              "propTypes": Object {
                                "activeBackgroundColor": [Function],
                                "activeBorderColor": [Function],
                                "activeColor": [Function],
                                "backgroundColor": [Function],
                                "borderColor": [Function],
                                "boxShadowColor": [Function],
                                "focusBackgroundColor": [Function],
                                "focusBorderColor": [Function],
                                "focusColor": [Function],
                                "hoverBackgroundColor": [Function],
                                "hoverBorderColor": [Function],
                                "hoverColor": [Function],
                                "textColor": [Function],
                                "type": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "shared__TriggerReplacementVariableSuggestionsButton-lzs0hf-7",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverBackgroundColor="#fff"
                          hoverBorderColor="#888"
                          hoverColor="#000"
                          onClick={[Function]}
                          textColor="#555"
                          type="button"
                        >
                          <button
                            className="c19"
                            onClick={[Function]}
                            type="button"
                          >
                            <SvgIcon
                              color="currentColor"
                              icon="plus-circle"
                              size="16px"
                            >
                              <SvgIcon__StyledSvg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="16px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <StyledComponent
                                  aria-hidden={true}
                                  className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                  fill="currentColor"
                                  focusable="false"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                        "isStatic": false,
                                        "lastClassName": "c15",
                                        "rules": Array [
                                          "width:",
                                          [Function],
                                          ";height:",
                                          [Function],
                                          ";flex:none;",
                                        ],
                                      },
                                      "displayName": "SvgIcon__StyledSvg",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                      "target": "svg",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  role="img"
                                  size="16px"
                                  viewBox="0 0 1792 1792"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="yoast-svg-icon yoast-svg-icon-plus-circle c15"
                                    fill="currentColor"
                                    focusable="false"
                                    role="img"
                                    size="16px"
                                    viewBox="0 0 1792 1792"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M1344 960v-128q0-26-19-45t-45-19h-256v-256q0-26-19-45t-45-19h-128q-26 0-45 19t-19 45v256h-256q-26 0-45 19t-19 45v128q0 26 19 45t45 19h256v256q0 26 19 45t45 19h128q26 0 45-19t19-45v-256h256q26 0 45-19t19-45zm320-64q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"
                                    />
                                  </svg>
                                </StyledComponent>
                              </SvgIcon__StyledSvg>
                            </SvgIcon>
                            Insert snippet variable
                          </button>
                        </StyledComponent>
                      </shared__TriggerReplacementVariableSuggestionsButton>
                      <shared
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {},
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared-lzs0hf-1",
                                "isStatic": false,
                                "lastClassName": "c24",
                                "rules": Array [
                                  "flex:0 1 100%;border:1px solid ",
                                  [Function],
                                  ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                  [Function],
                                  ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                  "min-height:72px;padding:2px 6px;line-height:24px;.public-DraftEditorPlaceholder-root{color:",
                                  "#616161",
                                  ";}.public-DraftEditorPlaceholder-hasFocus{color:",
                                  "#616161",
                                  ";}",
                                  "&::before{display:block;position:absolute;top:-1px;",
                                  [Function],
                                  ":-25px;width:24px;height:24px;background-image:url( ",
                                  [Function],
                                  " );background-size:25px;content:\\"\\";}",
                                ],
                              },
                              "displayName": "shared",
                              "foldedComponentIds": Array [
                                "shared__InputContainer-lzs0hf-0",
                                "shared__DescriptionInputContainer-lzs0hf-3",
                              ],
                              "render": [Function],
                              "styledComponentId": "shared-lzs0hf-1",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isActive={false}
                          isHovered={false}
                          onClick={[Function]}
                        >
                          <div
                            className="c24"
                            onClick={[Function]}
                          >
                            <ReplacementVariableEditorStandalone
                              ariaLabelledBy="31"
                              content="Test description, %%replacement_variable%%"
                              fieldId="snippet-editor-field-description"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              placeholder="Modify your meta description by editing it right here"
                              recommendedReplacementVariables={Array []}
                              replacementVariables={Array []}
                            >
                              <div />
                            </ReplacementVariableEditorStandalone>
                          </div>
                        </StyledComponent>
                      </shared>
                    </ReplacementVariableEditor>
                    <ProgressBar
                      aria-hidden="true"
                      backgroundColor="#f7f7f7"
                      borderColor="#ddd"
                      max={156}
                      progressColor="#ee7c1b"
                      value={42}
                    >
                      <StyledComponent
                        aria-hidden="true"
                        backgroundColor="#f7f7f7"
                        borderColor="#ddd"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ProgressBar-sc-9g9yx6-0",
                              "isStatic": false,
                              "lastClassName": "c25",
                              "rules": Array [
                                "box-sizing:border-box;width:100%;height:8px;display:block;margin-top:8px;appearance:none;background-color:",
                                [Function],
                                ";border:1px solid ",
                                [Function],
                                ";::-webkit-progress-bar{background-color:",
                                [Function],
                                ";}::-webkit-progress-value{background-color:",
                                [Function],
                                ";transition:width 250ms;}::-moz-progress-bar{background-color:",
                                [Function],
                                ";}::-ms-fill{background-color:",
                                [Function],
                                ";border:0;}",
                              ],
                            },
                            "defaultProps": Object {
                              "aria-hidden": "true",
                              "backgroundColor": "#f7f7f7",
                              "borderColor": "#ddd",
                              "max": 1,
                              "progressColor": "#7ad03a",
                              "value": 0,
                            },
                            "displayName": "ProgressBar",
                            "foldedComponentIds": Array [],
                            "propTypes": Object {
                              "aria-hidden": [Function],
                              "backgroundColor": [Function],
                              "borderColor": [Function],
                              "max": [Function],
                              "progressColor": [Function],
                              "value": [Function],
                            },
                            "render": [Function],
                            "styledComponentId": "ProgressBar-sc-9g9yx6-0",
                            "target": "progress",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        max={156}
                        progressColor="#ee7c1b"
                        value={42}
                      >
                        <progress
                          aria-hidden="true"
                          className="c25"
                          max={156}
                          value={42}
                        />
                      </StyledComponent>
                    </ProgressBar>
                  </div>
                </StyledComponent>
              </shared__FormSection>
            </section>
          </StyledComponent>
        </shared__StyledEditor>
      </SnippetEditorFields>
      <SnippetEditor__CloseEditorButton
        activeBackgroundColor="#f7f7f7"
        activeBorderColor="#888"
        activeColor="#000"
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        focusBackgroundColor="#fff"
        focusBorderColor="#0066cd"
        focusColor="#000"
        hoverBackgroundColor="#fff"
        hoverBorderColor="#888"
        hoverColor="#000"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <StyledComponent
          activeBackgroundColor="#f7f7f7"
          activeBorderColor="#888"
          activeColor="#000"
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          focusBackgroundColor="#fff"
          focusBorderColor="#0066cd"
          focusColor="#000"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "SnippetEditor__CloseEditorButton-sc-144bmm3-2",
                "isStatic": false,
                "lastClassName": "c26",
                "rules": Array [
                  "color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";background:",
                  [Function],
                  ";box-shadow:0 1px 0 ",
                  [Function],
                  ";",
                  "&:active{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";box-shadow:inset 0 2px 5px -3px ",
                  "rgba( 0, 0, 0, 0.5 )",
                  ";}",
                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                  [Function],
                  ";color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";box-shadow:0 0 3px ",
                  "rgba( 8, 74, 103, 0.8 )",
                  ";}",
                  "&:hover{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";}",
                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                  "1px",
                  ";border-style:solid;margin:0;padding:",
                  "4px",
                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                  [Function],
                  ";overflow:visible;min-height:",
                  "32px",
                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                  "22px",
                  ";}}",
                  "height:33px;border:1px solid #dbdbdb;box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;",
                  "margin-top:24px;",
                ],
              },
              "defaultProps": Object {
                "activeBackgroundColor": "#f7f7f7",
                "activeBorderColor": "#888",
                "activeColor": "#000",
                "backgroundColor": "#f7f7f7",
                "borderColor": "#ccc",
                "boxShadowColor": "#ccc",
                "focusBackgroundColor": "#fff",
                "focusBorderColor": "#0066cd",
                "focusColor": "#000",
                "hoverBackgroundColor": "#fff",
                "hoverBorderColor": "#888",
                "hoverColor": "#000",
                "textColor": "#555",
                "type": "button",
              },
              "displayName": "SnippetEditor__CloseEditorButton",
              "foldedComponentIds": Array [
                "Button__BaseButton-sc-32rbq-4",
                "Button-sc-32rbq-3",
                "Button-sc-32rbq-1",
                "Button-sc-32rbq-2",
                "Button-sc-32rbq-0",
                "SnippetEditor__SnippetEditorButton-sc-144bmm3-0",
              ],
              "propTypes": Object {
                "activeBackgroundColor": [Function],
                "activeBorderColor": [Function],
                "activeColor": [Function],
                "backgroundColor": [Function],
                "borderColor": [Function],
                "boxShadowColor": [Function],
                "focusBackgroundColor": [Function],
                "focusBorderColor": [Function],
                "focusColor": [Function],
                "hoverBackgroundColor": [Function],
                "hoverBorderColor": [Function],
                "hoverColor": [Function],
                "textColor": [Function],
                "type": [Function],
              },
              "render": [Function],
              "styledComponentId": "SnippetEditor__CloseEditorButton-sc-144bmm3-2",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          hoverBackgroundColor="#fff"
          hoverBorderColor="#888"
          hoverColor="#000"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <button
            className="c26"
            onClick={[Function]}
            type="button"
          >
            Close snippet editor
          </button>
        </StyledComponent>
      </SnippetEditor__CloseEditorButton>
    </div>
  </ErrorBoundary>
</SnippetEditor>
`;

exports[`SnippetEditor colored progress bars can handle scores of 3 and 9 1`] = `
.c21 {
  box-sizing: border-box;
  width: 100%;
  height: 8px;
  display: block;
  margin-top: 8px;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background-color: #f7f7f7;
  border: 1px solid #ddd;
}

.c21::-webkit-progress-bar {
  background-color: #f7f7f7;
}

.c21::-webkit-progress-value {
  background-color: #dc3232;
  -webkit-transition: width 250ms;
  transition: width 250ms;
}

.c21::-moz-progress-bar {
  background-color: #dc3232;
}

.c21::-ms-fill {
  background-color: #dc3232;
  border: 0;
}

.c25 {
  box-sizing: border-box;
  width: 100%;
  height: 8px;
  display: block;
  margin-top: 8px;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background-color: #f7f7f7;
  border: 1px solid #ddd;
}

.c25::-webkit-progress-bar {
  background-color: #f7f7f7;
}

.c25::-webkit-progress-value {
  background-color: #ee7c1b;
  -webkit-transition: width 250ms;
  transition: width 250ms;
}

.c25::-moz-progress-bar {
  background-color: #ee7c1b;
}

.c25::-ms-fill {
  background-color: #ee7c1b;
  border: 0;
}

.c17 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  margin: 24px 0 0 0;
}

.c16 {
  padding: 0 20px;
}

.c18 {
  -webkit-flex: 1 1 200px;
  -ms-flex: 1 1 200px;
  flex: 1 1 200px;
  min-width: 200px;
  cursor: pointer;
  font-size: 16px;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin: 4px 0;
}

.c19 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  padding-left: 8px;
  height: 33px;
  border: 1px solid #dbdbdb;
  font-size: 13px;
}

.c19:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c19::-moz-focus-inner {
  border-width: 0;
}

.c19:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c19:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c19 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c19 svg {
  margin-right: 7px;
  fill: #555;
}

.c0 {
  border-bottom: 1px hidden #fff;
  border-radius: 2px;
  box-shadow: 0 1px 2px rgba(0,0,0,.2);
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  max-width: 600px;
  box-sizing: border-box;
  font-size: 14px;
}

.c2 {
  cursor: pointer;
  position: relative;
}

.c3 {
  color: #1e0fbe;
  -webkit-text-decoration: none;
  text-decoration: none;
  font-size: 18px;
  line-height: 1.2;
  font-weight: normal;
  margin: 0;
  display: inline-block;
  overflow: hidden;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c4 {
  display: inline-block;
  font-size: 16px;
  line-height: 1.2em;
  max-height: 2.4em;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c5 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  white-space: nowrap;
  font-size: 14px;
}

.c6 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  white-space: nowrap;
  font-size: 14px;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 100%;
}

.c8 {
  color: #545454;
  cursor: pointer;
  position: relative;
  max-width: 600px;
  font-size: 13px;
  font-size: 14px;
  line-height: 20px;
}

.c1 {
  padding: 8px 16px;
}

.c7 {
  border: 0;
  border-bottom: 1px solid #DFE1E5;
  margin: 0;
}

.c23 {
  border: none;
  width: 100%;
  height: inherit;
  line-height: inherit;
  font-family: inherit;
  font-size: inherit;
  color: inherit;
}

.c23:focus {
  outline: 0;
}

.c20 {
  -webkit-flex: 0 1 100%;
  -ms-flex: 0 1 100%;
  flex: 0 1 100%;
  border: 1px solid #ddd;
  padding: 3px 5px;
  box-sizing: border-box;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  cursor: text;
}

.c20 .public-DraftStyleDefault-block {
  line-height: 24px;
}

.c20::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width%3D%221792%22%20height%3D%221792%22%20viewBox%3D%220%200%201792%201792%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20fill%3D%22transparent%22%20d%3D%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20%2F%3E%3C%2Fsvg%3E );
  background-size: 25px;
  content: "";
}

.c22 {
  -webkit-flex: 0 1 100%;
  -ms-flex: 0 1 100%;
  flex: 0 1 100%;
  border: 1px solid #ddd;
  padding: 3px 5px;
  box-sizing: border-box;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  cursor: text;
}

.c22::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width%3D%221792%22%20height%3D%221792%22%20viewBox%3D%220%200%201792%201792%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20fill%3D%22transparent%22%20d%3D%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20%2F%3E%3C%2Fsvg%3E );
  background-size: 25px;
  content: "";
}

.c24 {
  -webkit-flex: 0 1 100%;
  -ms-flex: 0 1 100%;
  flex: 0 1 100%;
  border: 1px solid #ddd;
  padding: 3px 5px;
  box-sizing: border-box;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  cursor: text;
  min-height: 72px;
  padding: 2px 6px;
  line-height: 24px;
}

.c24 .public-DraftEditorPlaceholder-root {
  color: #616161;
}

.c24 .public-DraftEditorPlaceholder-hasFocus {
  color: #616161;
}

.c24::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width%3D%221792%22%20height%3D%221792%22%20viewBox%3D%220%200%201792%201792%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20fill%3D%22transparent%22%20d%3D%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20%2F%3E%3C%2Fsvg%3E );
  background-size: 25px;
  content: "";
}

.c10 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: #555;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 3px 0 0 3px;
}

.c10:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c10::-moz-focus-inner {
  border-width: 0;
}

.c10:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c10:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c10 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c10:hover,
.c10:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
  box-shadow: none;
}

.c12 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: transparent;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 0 3px 3px 0;
}

.c12:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c12::-moz-focus-inner {
  border-width: 0;
}

.c12:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c12:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c12 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c12:hover,
.c12:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
  box-shadow: none;
}

.c9 {
  display: inline-block;
  margin-top: 10px;
  border: 1px solid #dbdbdb;
  border-radius: 4px;
  background-color: #f7f7f7;
  vertical-align: top;
}

.c14 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin: 10px 0 0 4px;
  fill: #555;
  padding-left: 8px;
}

.c14:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c14::-moz-focus-inner {
  border-width: 0;
}

.c14:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c14:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c14 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c14 svg {
  margin-right: 7px;
}

.c26 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin-top: 24px;
}

.c26:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c26::-moz-focus-inner {
  border-width: 0;
}

.c26:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c26:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c26 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c11 {
  width: 22px;
  height: 22px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c13 {
  width: 18px;
  height: 18px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c15 {
  width: 16px;
  height: 16px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c19::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c10::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c12::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c14::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c26::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

<SnippetEditor
  baseUrl="http://example.org/"
  data={
    Object {
      "description": "Test description, %%replacement_variable%%",
      "slug": "test-slug",
      "title": "Test title",
    }
  }
  date=""
  descriptionEditorFieldPlaceholder=""
  descriptionLengthProgress={
    Object {
      "actual": 330,
      "max": 650,
      "score": 9,
    }
  }
  hasPaperStyle={true}
  locale="en"
  mapEditorDataToPreview={null}
  mode="mobile"
  onChange={[MockFunction]}
  onChangeAnalysisData={[Function]}
  recommendedReplacementVariables={Array []}
  replacementVariables={Array []}
  showCloseButton={true}
  titleLengthProgress={
    Object {
      "actual": 100,
      "max": 550,
      "score": 3,
    }
  }
  wordsToHighlight={Array []}
>
  <ErrorBoundary>
    <div>
      <SnippetPreview
        activeField={null}
        breadcrumbs={null}
        date=""
        description="Test description, %%replacement_variable%%"
        hoveredField={null}
        isAmp={false}
        keyword=""
        locale="en"
        mode="mobile"
        onHover={[Function]}
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        title="Test title"
        url="example.org/test-slug"
        wordsToHighlight={Array []}
      >
        <section>
          <SnippetPreview__MobileContainer
            padding={20}
            width={640}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "SnippetPreview__MobileContainer-sc-1hxg8jo-1",
                    "isStatic": true,
                    "lastClassName": "c0",
                    "rules": Array [
                      "border-bottom:1px hidden #fff;border-radius:2px;box-shadow:0 1px 2px rgba(0,0,0,.2);font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;max-width:",
                      "600",
                      "px;box-sizing:border-box;font-size:14px;",
                    ],
                  },
                  "displayName": "SnippetPreview__MobileContainer",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "SnippetPreview__MobileContainer-sc-1hxg8jo-1",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              padding={20}
              width={640}
            >
              <div
                className="c0"
                width={640}
              >
                <SnippetPreview__MobilePartContainer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__MobilePartContainer-sc-1hxg8jo-12",
                          "isStatic": true,
                          "lastClassName": "c1",
                          "rules": Array [
                            "padding:8px 16px;",
                          ],
                        },
                        "displayName": "SnippetPreview__MobilePartContainer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__MobilePartContainer-sc-1hxg8jo-12",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="c1"
                    >
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          SEO title preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__BaseTitle
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__BaseTitle-sc-1hxg8jo-2",
                                "isStatic": true,
                                "lastClassName": "c2",
                                "rules": Array [
                                  "cursor:pointer;position:relative;",
                                ],
                              },
                              "displayName": "SnippetPreview__BaseTitle",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__BaseTitle-sc-1hxg8jo-2",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                        >
                          <div
                            className="c2"
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                          >
                            <SnippetPreview__TitleBounded>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__TitleBounded-sc-1hxg8jo-5",
                                      "isStatic": true,
                                      "lastClassName": "c3",
                                      "rules": Array [
                                        "color:",
                                        "#1e0fbe",
                                        ";text-decoration:none;font-size:18px;line-height:1.2;font-weight:normal;margin:0;display:inline-block;overflow:hidden;max-width:",
                                        "600",
                                        "px;vertical-align:top;text-overflow:ellipsis;",
                                        "max-width:",
                                        "600",
                                        "px;vertical-align:top;text-overflow:ellipsis;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__TitleBounded",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__Title-sc-1hxg8jo-4",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__TitleBounded-sc-1hxg8jo-5",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="c3"
                                >
                                  <SnippetPreview__TitleUnboundedMobile>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "SnippetPreview__TitleUnboundedMobile-sc-1hxg8jo-7",
                                            "isStatic": true,
                                            "lastClassName": "c4",
                                            "rules": Array [
                                              "display:inline-block;font-size:16px;line-height:1.2em;max-height:2.4em;overflow:hidden;text-overflow:ellipsis;",
                                            ],
                                          },
                                          "displayName": "SnippetPreview__TitleUnboundedMobile",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "SnippetPreview__TitleUnboundedMobile-sc-1hxg8jo-7",
                                          "target": "span",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={[Function]}
                                    >
                                      <span
                                        className="c4"
                                      >
                                        Test title
                                      </span>
                                    </StyledComponent>
                                  </SnippetPreview__TitleUnboundedMobile>
                                </div>
                              </StyledComponent>
                            </SnippetPreview__TitleBounded>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__BaseTitle>
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          Url preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__BaseUrl>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__BaseUrl-sc-1hxg8jo-8",
                                "isStatic": true,
                                "lastClassName": "c5",
                                "rules": Array [
                                  "display:inline-block;color:",
                                  "#006621",
                                  ";cursor:pointer;position:relative;max-width:90%;white-space:nowrap;font-size:14px;",
                                ],
                              },
                              "displayName": "SnippetPreview__BaseUrl",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__BaseUrl-sc-1hxg8jo-8",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <div
                            className="c5"
                          >
                            <SnippetPreview__BaseUrlOverflowContainer
                              onMouseEnter={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__BaseUrlOverflowContainer-sc-1hxg8jo-9",
                                      "isStatic": true,
                                      "lastClassName": "c6",
                                      "rules": Array [
                                        "display:inline-block;color:",
                                        "#006621",
                                        ";cursor:pointer;position:relative;max-width:90%;white-space:nowrap;font-size:14px;",
                                        "overflow:hidden;text-overflow:ellipsis;max-width:100%;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__BaseUrlOverflowContainer",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__BaseUrl-sc-1hxg8jo-8",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__BaseUrlOverflowContainer-sc-1hxg8jo-9",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                onMouseEnter={[Function]}
                                onMouseLeave={[Function]}
                                onMouseUp={[Function]}
                              >
                                <div
                                  className="c6"
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseUp={[Function]}
                                >
                                  example.org â€º test-slug
                                </div>
                              </StyledComponent>
                            </SnippetPreview__BaseUrlOverflowContainer>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__BaseUrl>
                    </div>
                  </StyledComponent>
                </SnippetPreview__MobilePartContainer>
                <SnippetPreview__Separator>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__Separator-sc-1hxg8jo-16",
                          "isStatic": true,
                          "lastClassName": "c7",
                          "rules": Array [
                            "border:0;border-bottom:1px solid #DFE1E5;margin:0;",
                          ],
                        },
                        "displayName": "SnippetPreview__Separator",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__Separator-sc-1hxg8jo-16",
                        "target": "hr",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <hr
                      className="c7"
                    />
                  </StyledComponent>
                </SnippetPreview__Separator>
                <SnippetPreview__MobilePartContainer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__MobilePartContainer-sc-1hxg8jo-12",
                          "isStatic": true,
                          "lastClassName": "c1",
                          "rules": Array [
                            "padding:8px 16px;",
                          ],
                        },
                        "displayName": "SnippetPreview__MobilePartContainer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__MobilePartContainer-sc-1hxg8jo-12",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="c1"
                    >
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          Meta description preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__MobileDescription
                        isDescriptionPlaceholder={false}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__MobileDescription-sc-1hxg8jo-11",
                                "isStatic": false,
                                "lastClassName": "c8",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";cursor:pointer;position:relative;max-width:",
                                  "600",
                                  "px;font-size:13px;",
                                  "font-size:14px;line-height:20px;",
                                ],
                              },
                              "displayName": "SnippetPreview__MobileDescription",
                              "foldedComponentIds": Array [
                                "SnippetPreview__DesktopDescription-sc-1hxg8jo-10",
                              ],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__MobileDescription-sc-1hxg8jo-11",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isDescriptionPlaceholder={false}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                        >
                          <div
                            className="c8"
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                          >
                            <SnippetPreview__MobileDescription
                              isDescriptionPlaceholder={false}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__MobileDescription-sc-1hxg8jo-11",
                                      "isStatic": false,
                                      "lastClassName": "c8",
                                      "rules": Array [
                                        "color:",
                                        [Function],
                                        ";cursor:pointer;position:relative;max-width:",
                                        "600",
                                        "px;font-size:13px;",
                                        "font-size:14px;line-height:20px;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__MobileDescription",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__DesktopDescription-sc-1hxg8jo-10",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__MobileDescription-sc-1hxg8jo-11",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={[Function]}
                                isDescriptionPlaceholder={false}
                              >
                                <div
                                  className="c8"
                                >
                                  Test description, %%replacement_variable%%
                                </div>
                              </StyledComponent>
                            </SnippetPreview__MobileDescription>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__MobileDescription>
                    </div>
                  </StyledComponent>
                </SnippetPreview__MobilePartContainer>
              </div>
            </StyledComponent>
          </SnippetPreview__MobileContainer>
        </section>
      </SnippetPreview>
      <ModeSwitcher
        active="mobile"
        onChange={[Function]}
      >
        <ModeSwitcher__Switcher>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "ModeSwitcher__Switcher-sc-9lbpr3-3",
                  "isStatic": true,
                  "lastClassName": "c9",
                  "rules": Array [
                    "display:inline-block;margin-top:10px;border:1px solid #dbdbdb;border-radius:4px;background-color:#f7f7f7;vertical-align:top;",
                  ],
                },
                "displayName": "ModeSwitcher__Switcher",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModeSwitcher__Switcher-sc-9lbpr3-3",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="c9"
            >
              <ModeSwitcher__MobileButton
                activeBackgroundColor="#f7f7f7"
                activeBorderColor="#888"
                activeColor="#000"
                aria-pressed={true}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                focusBackgroundColor="#fff"
                focusBorderColor="#0066cd"
                focusColor="#000"
                hoverBackgroundColor="#fff"
                hoverBorderColor="#888"
                hoverColor="#000"
                isActive={true}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <StyledComponent
                  activeBackgroundColor="#f7f7f7"
                  activeBorderColor="#888"
                  activeColor="#000"
                  aria-pressed={true}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  focusBackgroundColor="#fff"
                  focusBorderColor="#0066cd"
                  focusColor="#000"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "ModeSwitcher__MobileButton-sc-9lbpr3-1",
                        "isStatic": false,
                        "lastClassName": "c10",
                        "rules": Array [
                          "color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";box-shadow:0 1px 0 ",
                          [Function],
                          ";",
                          "&:active{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";box-shadow:inset 0 2px 5px -3px ",
                          "rgba( 0, 0, 0, 0.5 )",
                          ";}",
                          "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                          [Function],
                          ";color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";box-shadow:0 0 3px ",
                          "rgba( 8, 74, 103, 0.8 )",
                          ";}",
                          "&:hover{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";}",
                          "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                          "1px",
                          ";border-style:solid;margin:0;padding:",
                          "4px",
                          " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                          [Function],
                          ";overflow:visible;min-height:",
                          "32px",
                          ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                          "22px",
                          ";}}",
                          "border:none;border-bottom:4px solid transparent;width:31px;height:31px;border-color:",
                          [Function],
                          ";color:",
                          "#555",
                          ";transition:0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;transition-property:border-color;&:hover,&:focus{background-color:",
                          "#fff",
                          ";border:none;border-bottom:4px solid transparent;border-color:",
                          "#1e8cbe",
                          ";color:",
                          "#1e8cbe",
                          ";box-shadow:none;}",
                          "border-radius:3px 0 0 3px;",
                        ],
                      },
                      "defaultProps": Object {
                        "activeBackgroundColor": "#f7f7f7",
                        "activeBorderColor": "#888",
                        "activeColor": "#000",
                        "backgroundColor": "#f7f7f7",
                        "borderColor": "#ccc",
                        "boxShadowColor": "#ccc",
                        "focusBackgroundColor": "#fff",
                        "focusBorderColor": "#0066cd",
                        "focusColor": "#000",
                        "hoverBackgroundColor": "#fff",
                        "hoverBorderColor": "#888",
                        "hoverColor": "#000",
                        "textColor": "#555",
                        "type": "button",
                      },
                      "displayName": "ModeSwitcher__MobileButton",
                      "foldedComponentIds": Array [
                        "Button__BaseButton-sc-32rbq-4",
                        "Button-sc-32rbq-3",
                        "Button-sc-32rbq-1",
                        "Button-sc-32rbq-2",
                        "Button-sc-32rbq-0",
                        "ModeSwitcher__SwitcherButton-sc-9lbpr3-0",
                      ],
                      "propTypes": Object {
                        "activeBackgroundColor": [Function],
                        "activeBorderColor": [Function],
                        "activeColor": [Function],
                        "backgroundColor": [Function],
                        "borderColor": [Function],
                        "boxShadowColor": [Function],
                        "focusBackgroundColor": [Function],
                        "focusBorderColor": [Function],
                        "focusColor": [Function],
                        "hoverBackgroundColor": [Function],
                        "hoverBorderColor": [Function],
                        "hoverColor": [Function],
                        "textColor": [Function],
                        "type": [Function],
                      },
                      "render": [Function],
                      "styledComponentId": "ModeSwitcher__MobileButton-sc-9lbpr3-1",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hoverBackgroundColor="#fff"
                  hoverBorderColor="#888"
                  hoverColor="#000"
                  isActive={true}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <button
                    aria-pressed={true}
                    className="c10"
                    onClick={[Function]}
                    type="button"
                  >
                    <SvgIcon
                      color="currentColor"
                      icon="mobile"
                      size="22px"
                    >
                      <SvgIcon__StyledSvg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-mobile"
                        fill="currentColor"
                        focusable="false"
                        role="img"
                        size="22px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <StyledComponent
                          aria-hidden={true}
                          className="yoast-svg-icon yoast-svg-icon-mobile"
                          fill="currentColor"
                          focusable="false"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                "isStatic": false,
                                "lastClassName": "c11",
                                "rules": Array [
                                  "width:",
                                  [Function],
                                  ";height:",
                                  [Function],
                                  ";flex:none;",
                                ],
                              },
                              "displayName": "SvgIcon__StyledSvg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          role="img"
                          size="22px"
                          viewBox="0 0 1792 1792"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <svg
                            aria-hidden={true}
                            className="yoast-svg-icon yoast-svg-icon-mobile c11"
                            fill="currentColor"
                            focusable="false"
                            role="img"
                            size="22px"
                            viewBox="0 0 1792 1792"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
                            />
                          </svg>
                        </StyledComponent>
                      </SvgIcon__StyledSvg>
                    </SvgIcon>
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Mobile preview
                      </span>
                    </ScreenReaderText>
                  </button>
                </StyledComponent>
              </ModeSwitcher__MobileButton>
              <ModeSwitcher__DesktopButton
                activeBackgroundColor="#f7f7f7"
                activeBorderColor="#888"
                activeColor="#000"
                aria-pressed={false}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                focusBackgroundColor="#fff"
                focusBorderColor="#0066cd"
                focusColor="#000"
                hoverBackgroundColor="#fff"
                hoverBorderColor="#888"
                hoverColor="#000"
                isActive={false}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <StyledComponent
                  activeBackgroundColor="#f7f7f7"
                  activeBorderColor="#888"
                  activeColor="#000"
                  aria-pressed={false}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  focusBackgroundColor="#fff"
                  focusBorderColor="#0066cd"
                  focusColor="#000"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "ModeSwitcher__DesktopButton-sc-9lbpr3-2",
                        "isStatic": false,
                        "lastClassName": "c12",
                        "rules": Array [
                          "color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";box-shadow:0 1px 0 ",
                          [Function],
                          ";",
                          "&:active{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";box-shadow:inset 0 2px 5px -3px ",
                          "rgba( 0, 0, 0, 0.5 )",
                          ";}",
                          "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                          [Function],
                          ";color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";box-shadow:0 0 3px ",
                          "rgba( 8, 74, 103, 0.8 )",
                          ";}",
                          "&:hover{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";}",
                          "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                          "1px",
                          ";border-style:solid;margin:0;padding:",
                          "4px",
                          " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                          [Function],
                          ";overflow:visible;min-height:",
                          "32px",
                          ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                          "22px",
                          ";}}",
                          "border:none;border-bottom:4px solid transparent;width:31px;height:31px;border-color:",
                          [Function],
                          ";color:",
                          "#555",
                          ";transition:0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;transition-property:border-color;&:hover,&:focus{background-color:",
                          "#fff",
                          ";border:none;border-bottom:4px solid transparent;border-color:",
                          "#1e8cbe",
                          ";color:",
                          "#1e8cbe",
                          ";box-shadow:none;}",
                          "border-radius:0 3px 3px 0;",
                        ],
                      },
                      "defaultProps": Object {
                        "activeBackgroundColor": "#f7f7f7",
                        "activeBorderColor": "#888",
                        "activeColor": "#000",
                        "backgroundColor": "#f7f7f7",
                        "borderColor": "#ccc",
                        "boxShadowColor": "#ccc",
                        "focusBackgroundColor": "#fff",
                        "focusBorderColor": "#0066cd",
                        "focusColor": "#000",
                        "hoverBackgroundColor": "#fff",
                        "hoverBorderColor": "#888",
                        "hoverColor": "#000",
                        "textColor": "#555",
                        "type": "button",
                      },
                      "displayName": "ModeSwitcher__DesktopButton",
                      "foldedComponentIds": Array [
                        "Button__BaseButton-sc-32rbq-4",
                        "Button-sc-32rbq-3",
                        "Button-sc-32rbq-1",
                        "Button-sc-32rbq-2",
                        "Button-sc-32rbq-0",
                        "ModeSwitcher__SwitcherButton-sc-9lbpr3-0",
                      ],
                      "propTypes": Object {
                        "activeBackgroundColor": [Function],
                        "activeBorderColor": [Function],
                        "activeColor": [Function],
                        "backgroundColor": [Function],
                        "borderColor": [Function],
                        "boxShadowColor": [Function],
                        "focusBackgroundColor": [Function],
                        "focusBorderColor": [Function],
                        "focusColor": [Function],
                        "hoverBackgroundColor": [Function],
                        "hoverBorderColor": [Function],
                        "hoverColor": [Function],
                        "textColor": [Function],
                        "type": [Function],
                      },
                      "render": [Function],
                      "styledComponentId": "ModeSwitcher__DesktopButton-sc-9lbpr3-2",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hoverBackgroundColor="#fff"
                  hoverBorderColor="#888"
                  hoverColor="#000"
                  isActive={false}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <button
                    aria-pressed={false}
                    className="c12"
                    onClick={[Function]}
                    type="button"
                  >
                    <SvgIcon
                      color="currentColor"
                      icon="desktop"
                      size="18px"
                    >
                      <SvgIcon__StyledSvg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-desktop"
                        fill="currentColor"
                        focusable="false"
                        role="img"
                        size="18px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <StyledComponent
                          aria-hidden={true}
                          className="yoast-svg-icon yoast-svg-icon-desktop"
                          fill="currentColor"
                          focusable="false"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                "isStatic": false,
                                "lastClassName": "c13",
                                "rules": Array [
                                  "width:",
                                  [Function],
                                  ";height:",
                                  [Function],
                                  ";flex:none;",
                                ],
                              },
                              "displayName": "SvgIcon__StyledSvg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          role="img"
                          size="18px"
                          viewBox="0 0 1792 1792"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <svg
                            aria-hidden={true}
                            className="yoast-svg-icon yoast-svg-icon-desktop c13"
                            fill="currentColor"
                            focusable="false"
                            role="img"
                            size="18px"
                            viewBox="0 0 1792 1792"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
                            />
                          </svg>
                        </StyledComponent>
                      </SvgIcon__StyledSvg>
                    </SvgIcon>
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Desktop preview
                      </span>
                    </ScreenReaderText>
                  </button>
                </StyledComponent>
              </ModeSwitcher__DesktopButton>
            </div>
          </StyledComponent>
        </ModeSwitcher__Switcher>
      </ModeSwitcher>
      <SnippetEditor__EditSnippetButton
        activeBackgroundColor="#f7f7f7"
        activeBorderColor="#888"
        activeColor="#000"
        aria-expanded={true}
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        focusBackgroundColor="#fff"
        focusBorderColor="#0066cd"
        focusColor="#000"
        hoverBackgroundColor="#fff"
        hoverBorderColor="#888"
        hoverColor="#000"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <StyledComponent
          activeBackgroundColor="#f7f7f7"
          activeBorderColor="#888"
          activeColor="#000"
          aria-expanded={true}
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          focusBackgroundColor="#fff"
          focusBorderColor="#0066cd"
          focusColor="#000"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "SnippetEditor__EditSnippetButton-sc-144bmm3-1",
                "isStatic": false,
                "lastClassName": "c14",
                "rules": Array [
                  "color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";background:",
                  [Function],
                  ";box-shadow:0 1px 0 ",
                  [Function],
                  ";",
                  "&:active{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";box-shadow:inset 0 2px 5px -3px ",
                  "rgba( 0, 0, 0, 0.5 )",
                  ";}",
                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                  [Function],
                  ";color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";box-shadow:0 0 3px ",
                  "rgba( 8, 74, 103, 0.8 )",
                  ";}",
                  "&:hover{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";}",
                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                  "1px",
                  ";border-style:solid;margin:0;padding:",
                  "4px",
                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                  [Function],
                  ";overflow:visible;min-height:",
                  "32px",
                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                  "22px",
                  ";}}",
                  "height:33px;border:1px solid #dbdbdb;box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;",
                  "margin:",
                  [Function],
                  ";fill:",
                  "#555",
                  ";padding-left:8px;& svg{",
                  [Function],
                  ":7px;}",
                ],
              },
              "defaultProps": Object {
                "activeBackgroundColor": "#f7f7f7",
                "activeBorderColor": "#888",
                "activeColor": "#000",
                "backgroundColor": "#f7f7f7",
                "borderColor": "#ccc",
                "boxShadowColor": "#ccc",
                "focusBackgroundColor": "#fff",
                "focusBorderColor": "#0066cd",
                "focusColor": "#000",
                "hoverBackgroundColor": "#fff",
                "hoverBorderColor": "#888",
                "hoverColor": "#000",
                "textColor": "#555",
                "type": "button",
              },
              "displayName": "SnippetEditor__EditSnippetButton",
              "foldedComponentIds": Array [
                "Button__BaseButton-sc-32rbq-4",
                "Button-sc-32rbq-3",
                "Button-sc-32rbq-1",
                "Button-sc-32rbq-2",
                "Button-sc-32rbq-0",
                "SnippetEditor__SnippetEditorButton-sc-144bmm3-0",
              ],
              "propTypes": Object {
                "activeBackgroundColor": [Function],
                "activeBorderColor": [Function],
                "activeColor": [Function],
                "backgroundColor": [Function],
                "borderColor": [Function],
                "boxShadowColor": [Function],
                "focusBackgroundColor": [Function],
                "focusBorderColor": [Function],
                "focusColor": [Function],
                "hoverBackgroundColor": [Function],
                "hoverBorderColor": [Function],
                "hoverColor": [Function],
                "textColor": [Function],
                "type": [Function],
              },
              "render": [Function],
              "styledComponentId": "SnippetEditor__EditSnippetButton-sc-144bmm3-1",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={[Function]}
          hoverBackgroundColor="#fff"
          hoverBorderColor="#888"
          hoverColor="#000"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <button
            aria-expanded={true}
            className="c14"
            onClick={[Function]}
            type="button"
          >
            <SvgIcon
              color="currentColor"
              icon="edit"
              size="16px"
            >
              <SvgIcon__StyledSvg
                aria-hidden={true}
                className="yoast-svg-icon yoast-svg-icon-edit"
                fill="currentColor"
                focusable="false"
                role="img"
                size="16px"
                viewBox="0 0 1792 1792"
                xmlns="http://www.w3.org/2000/svg"
              >
                <StyledComponent
                  aria-hidden={true}
                  className="yoast-svg-icon yoast-svg-icon-edit"
                  fill="currentColor"
                  focusable="false"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                        "isStatic": false,
                        "lastClassName": "c15",
                        "rules": Array [
                          "width:",
                          [Function],
                          ";height:",
                          [Function],
                          ";flex:none;",
                        ],
                      },
                      "displayName": "SvgIcon__StyledSvg",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                      "target": "svg",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  role="img"
                  size="16px"
                  viewBox="0 0 1792 1792"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <svg
                    aria-hidden={true}
                    className="yoast-svg-icon yoast-svg-icon-edit c15"
                    fill="currentColor"
                    focusable="false"
                    role="img"
                    size="16px"
                    viewBox="0 0 1792 1792"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
                    />
                  </svg>
                </StyledComponent>
              </SvgIcon__StyledSvg>
            </SvgIcon>
            Edit snippet
          </button>
        </StyledComponent>
      </SnippetEditor__EditSnippetButton>
      <SnippetEditorFields
        activeField={null}
        containerPadding="0 20px"
        data={
          Object {
            "description": "Test description, %%replacement_variable%%",
            "slug": "test-slug",
            "title": "Test title",
          }
        }
        descriptionEditorFieldPlaceholder="Modify your meta description by editing it right here"
        descriptionLengthProgress={
          Object {
            "actual": 42,
            "max": 156,
            "score": 6,
          }
        }
        hoveredField={null}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        recommendedReplacementVariables={Array []}
        replacementVariables={Array []}
        titleLengthProgress={
          Object {
            "actual": 0,
            "max": 600,
            "score": 1,
          }
        }
      >
        <shared__StyledEditor
          padding="0 20px"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "shared__StyledEditor-lzs0hf-5",
                  "isStatic": false,
                  "lastClassName": "c16",
                  "rules": Array [
                    "padding:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "shared__StyledEditor",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "shared__StyledEditor-lzs0hf-5",
                "target": "section",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            padding="0 20px"
          >
            <section
              className="c16"
            >
              <shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "shared__FormSection-lzs0hf-4",
                        "isStatic": true,
                        "lastClassName": "c17",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "shared__FormSection-lzs0hf-4",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="c17"
                  >
                    <ReplacementVariableEditor
                      content="Test title"
                      editorRef={[Function]}
                      fieldId="snippet-editor-field-title"
                      isActive={false}
                      isHovered={false}
                      label="SEO title"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      recommendedReplacementVariables={Array []}
                      replacementVariables={Array []}
                      withCaret={true}
                    >
                      <shared__SimulatedLabel
                        id="27"
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared__SimulatedLabel-lzs0hf-6",
                                "isStatic": true,
                                "lastClassName": "c18",
                                "rules": Array [
                                  "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                                ],
                              },
                              "displayName": "shared__SimulatedLabel",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "shared__SimulatedLabel-lzs0hf-6",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          id="27"
                          onClick={[Function]}
                        >
                          <div
                            className="c18"
                            id="27"
                            onClick={[Function]}
                          >
                            SEO title
                          </div>
                        </StyledComponent>
                      </shared__SimulatedLabel>
                      <shared__TriggerReplacementVariableSuggestionsButton
                        activeBackgroundColor="#f7f7f7"
                        activeBorderColor="#888"
                        activeColor="#000"
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        focusBackgroundColor="#fff"
                        focusBorderColor="#0066cd"
                        focusColor="#000"
                        hoverBackgroundColor="#fff"
                        hoverBorderColor="#888"
                        hoverColor="#000"
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <StyledComponent
                          activeBackgroundColor="#f7f7f7"
                          activeBorderColor="#888"
                          activeColor="#000"
                          backgroundColor="#f7f7f7"
                          borderColor="#ccc"
                          boxShadowColor="#ccc"
                          focusBackgroundColor="#fff"
                          focusBorderColor="#0066cd"
                          focusColor="#000"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared__TriggerReplacementVariableSuggestionsButton-lzs0hf-7",
                                "isStatic": false,
                                "lastClassName": "c19",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";background:",
                                  [Function],
                                  ";box-shadow:0 1px 0 ",
                                  [Function],
                                  ";",
                                  "&:active{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";box-shadow:inset 0 2px 5px -3px ",
                                  "rgba( 0, 0, 0, 0.5 )",
                                  ";}",
                                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                                  [Function],
                                  ";color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";box-shadow:0 0 3px ",
                                  "rgba( 8, 74, 103, 0.8 )",
                                  ";}",
                                  "&:hover{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";}",
                                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                                  "1px",
                                  ";border-style:solid;margin:0;padding:",
                                  "4px",
                                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                                  [Function],
                                  ";overflow:visible;min-height:",
                                  "32px",
                                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                                  "22px",
                                  ";}}",
                                  "box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;padding-left:8px;height:33px;border:1px solid #dbdbdb;font-size:13px;& svg{",
                                  [Function],
                                  ":7px;fill:",
                                  "#555",
                                  ";}",
                                ],
                              },
                              "defaultProps": Object {
                                "activeBackgroundColor": "#f7f7f7",
                                "activeBorderColor": "#888",
                                "activeColor": "#000",
                                "backgroundColor": "#f7f7f7",
                                "borderColor": "#ccc",
                                "boxShadowColor": "#ccc",
                                "focusBackgroundColor": "#fff",
                                "focusBorderColor": "#0066cd",
                                "focusColor": "#000",
                                "hoverBackgroundColor": "#fff",
                                "hoverBorderColor": "#888",
                                "hoverColor": "#000",
                                "textColor": "#555",
                                "type": "button",
                              },
                              "displayName": "shared__TriggerReplacementVariableSuggestionsButton",
                              "foldedComponentIds": Array [
                                "Button__BaseButton-sc-32rbq-4",
                                "Button-sc-32rbq-3",
                                "Button-sc-32rbq-1",
                                "Button-sc-32rbq-2",
                                "Button-sc-32rbq-0",
                              ],
                              "propTypes": Object {
                                "activeBackgroundColor": [Function],
                                "activeBorderColor": [Function],
                                "activeColor": [Function],
                                "backgroundColor": [Function],
                                "borderColor": [Function],
                                "boxShadowColor": [Function],
                                "focusBackgroundColor": [Function],
                                "focusBorderColor": [Function],
                                "focusColor": [Function],
                                "hoverBackgroundColor": [Function],
                                "hoverBorderColor": [Function],
                                "hoverColor": [Function],
                                "textColor": [Function],
                                "type": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "shared__TriggerReplacementVariableSuggestionsButton-lzs0hf-7",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverBackgroundColor="#fff"
                          hoverBorderColor="#888"
                          hoverColor="#000"
                          onClick={[Function]}
                          textColor="#555"
                          type="button"
                        >
                          <button
                            className="c19"
                            onClick={[Function]}
                            type="button"
                          >
                            <SvgIcon
                              color="currentColor"
                              icon="plus-circle"
                              size="16px"
                            >
                              <SvgIcon__StyledSvg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="16px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <StyledComponent
                                  aria-hidden={true}
                                  className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                  fill="currentColor"
                                  focusable="false"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                        "isStatic": false,
                                        "lastClassName": "c15",
                                        "rules": Array [
                                          "width:",
                                          [Function],
                                          ";height:",
                                          [Function],
                                          ";flex:none;",
                                        ],
                                      },
                                      "displayName": "SvgIcon__StyledSvg",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                      "target": "svg",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  role="img"
                                  size="16px"
                                  viewBox="0 0 1792 1792"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="yoast-svg-icon yoast-svg-icon-plus-circle c15"
                                    fill="currentColor"
                                    focusable="false"
                                    role="img"
                                    size="16px"
                                    viewBox="0 0 1792 1792"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M1344 960v-128q0-26-19-45t-45-19h-256v-256q0-26-19-45t-45-19h-128q-26 0-45 19t-19 45v256h-256q-26 0-45 19t-19 45v128q0 26 19 45t45 19h256v256q0 26 19 45t45 19h128q26 0 45-19t19-45v-256h256q26 0 45-19t19-45zm320-64q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"
                                    />
                                  </svg>
                                </StyledComponent>
                              </SvgIcon__StyledSvg>
                            </SvgIcon>
                            Insert snippet variable
                          </button>
                        </StyledComponent>
                      </shared__TriggerReplacementVariableSuggestionsButton>
                      <shared
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {},
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared-lzs0hf-1",
                                "isStatic": false,
                                "lastClassName": "c20",
                                "rules": Array [
                                  "flex:0 1 100%;border:1px solid ",
                                  [Function],
                                  ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                  [Function],
                                  ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                  ".public-DraftStyleDefault-block{line-height:24px;}",
                                  "&::before{display:block;position:absolute;top:-1px;",
                                  [Function],
                                  ":-25px;width:24px;height:24px;background-image:url( ",
                                  [Function],
                                  " );background-size:25px;content:\\"\\";}",
                                ],
                              },
                              "displayName": "shared",
                              "foldedComponentIds": Array [
                                "shared__InputContainer-lzs0hf-0",
                                "shared__TitleInputContainer-lzs0hf-2",
                              ],
                              "render": [Function],
                              "styledComponentId": "shared-lzs0hf-1",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isActive={false}
                          isHovered={false}
                          onClick={[Function]}
                        >
                          <div
                            className="c20"
                            onClick={[Function]}
                          >
                            <ReplacementVariableEditorStandalone
                              ariaLabelledBy="27"
                              content="Test title"
                              fieldId="snippet-editor-field-title"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              recommendedReplacementVariables={Array []}
                              replacementVariables={Array []}
                            >
                              <div />
                            </ReplacementVariableEditorStandalone>
                          </div>
                        </StyledComponent>
                      </shared>
                    </ReplacementVariableEditor>
                    <ProgressBar
                      aria-hidden="true"
                      backgroundColor="#f7f7f7"
                      borderColor="#ddd"
                      max={600}
                      progressColor="#dc3232"
                      value={0}
                    >
                      <StyledComponent
                        aria-hidden="true"
                        backgroundColor="#f7f7f7"
                        borderColor="#ddd"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ProgressBar-sc-9g9yx6-0",
                              "isStatic": false,
                              "lastClassName": "c25",
                              "rules": Array [
                                "box-sizing:border-box;width:100%;height:8px;display:block;margin-top:8px;appearance:none;background-color:",
                                [Function],
                                ";border:1px solid ",
                                [Function],
                                ";::-webkit-progress-bar{background-color:",
                                [Function],
                                ";}::-webkit-progress-value{background-color:",
                                [Function],
                                ";transition:width 250ms;}::-moz-progress-bar{background-color:",
                                [Function],
                                ";}::-ms-fill{background-color:",
                                [Function],
                                ";border:0;}",
                              ],
                            },
                            "defaultProps": Object {
                              "aria-hidden": "true",
                              "backgroundColor": "#f7f7f7",
                              "borderColor": "#ddd",
                              "max": 1,
                              "progressColor": "#7ad03a",
                              "value": 0,
                            },
                            "displayName": "ProgressBar",
                            "foldedComponentIds": Array [],
                            "propTypes": Object {
                              "aria-hidden": [Function],
                              "backgroundColor": [Function],
                              "borderColor": [Function],
                              "max": [Function],
                              "progressColor": [Function],
                              "value": [Function],
                            },
                            "render": [Function],
                            "styledComponentId": "ProgressBar-sc-9g9yx6-0",
                            "target": "progress",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        max={600}
                        progressColor="#dc3232"
                        value={0}
                      >
                        <progress
                          aria-hidden="true"
                          className="c21"
                          max={600}
                          value={0}
                        />
                      </StyledComponent>
                    </ProgressBar>
                  </div>
                </StyledComponent>
              </shared__FormSection>
              <shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "shared__FormSection-lzs0hf-4",
                        "isStatic": true,
                        "lastClassName": "c17",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "shared__FormSection-lzs0hf-4",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="c17"
                  >
                    <shared__SimulatedLabel
                      id="snippet-editor-field-26-slug"
                      onClick={[Function]}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "shared__SimulatedLabel-lzs0hf-6",
                              "isStatic": true,
                              "lastClassName": "c18",
                              "rules": Array [
                                "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                              ],
                            },
                            "displayName": "shared__SimulatedLabel",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "shared__SimulatedLabel-lzs0hf-6",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        id="snippet-editor-field-26-slug"
                        onClick={[Function]}
                      >
                        <div
                          className="c18"
                          id="snippet-editor-field-26-slug"
                          onClick={[Function]}
                        >
                          Slug
                        </div>
                      </StyledComponent>
                    </shared__SimulatedLabel>
                    <shared
                      isActive={false}
                      isHovered={false}
                      onClick={[Function]}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [
                              Object {},
                            ],
                            "componentStyle": ComponentStyle {
                              "componentId": "shared-lzs0hf-1",
                              "isStatic": false,
                              "lastClassName": "c22",
                              "rules": Array [
                                "flex:0 1 100%;border:1px solid ",
                                [Function],
                                ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                [Function],
                                ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                "&::before{display:block;position:absolute;top:-1px;",
                                [Function],
                                ":-25px;width:24px;height:24px;background-image:url( ",
                                [Function],
                                " );background-size:25px;content:\\"\\";}",
                              ],
                            },
                            "displayName": "shared",
                            "foldedComponentIds": Array [
                              "shared__InputContainer-lzs0hf-0",
                            ],
                            "render": [Function],
                            "styledComponentId": "shared-lzs0hf-1",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <div
                          className="c22"
                          onClick={[Function]}
                        >
                          <SnippetEditorFields__SlugInput
                            aria-labelledby="snippet-editor-field-26-slug"
                            id="snippet-editor-field-slug"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            value="test-slug"
                          >
                            <StyledComponent
                              aria-labelledby="snippet-editor-field-26-slug"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "SnippetEditorFields__SlugInput-sc-1ioqi3y-0",
                                    "isStatic": true,
                                    "lastClassName": "c23",
                                    "rules": Array [
                                      "border:none;width:100%;height:inherit;line-height:inherit;font-family:inherit;font-size:inherit;color:inherit;&:focus{outline:0;}",
                                    ],
                                  },
                                  "displayName": "SnippetEditorFields__SlugInput",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "SnippetEditorFields__SlugInput-sc-1ioqi3y-0",
                                  "target": "input",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={[Function]}
                              id="snippet-editor-field-slug"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              value="test-slug"
                            >
                              <input
                                aria-labelledby="snippet-editor-field-26-slug"
                                className="c23"
                                id="snippet-editor-field-slug"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                value="test-slug"
                              />
                            </StyledComponent>
                          </SnippetEditorFields__SlugInput>
                        </div>
                      </StyledComponent>
                    </shared>
                  </div>
                </StyledComponent>
              </shared__FormSection>
              <shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "shared__FormSection-lzs0hf-4",
                        "isStatic": true,
                        "lastClassName": "c17",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "shared__FormSection-lzs0hf-4",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="c17"
                  >
                    <ReplacementVariableEditor
                      content="Test description, %%replacement_variable%%"
                      editorRef={[Function]}
                      fieldId="snippet-editor-field-description"
                      isActive={false}
                      isHovered={false}
                      label="Meta description"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      placeholder="Modify your meta description by editing it right here"
                      recommendedReplacementVariables={Array []}
                      replacementVariables={Array []}
                      type="description"
                      withCaret={true}
                    >
                      <shared__SimulatedLabel
                        id="28"
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared__SimulatedLabel-lzs0hf-6",
                                "isStatic": true,
                                "lastClassName": "c18",
                                "rules": Array [
                                  "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                                ],
                              },
                              "displayName": "shared__SimulatedLabel",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "shared__SimulatedLabel-lzs0hf-6",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          id="28"
                          onClick={[Function]}
                        >
                          <div
                            className="c18"
                            id="28"
                            onClick={[Function]}
                          >
                            Meta description
                          </div>
                        </StyledComponent>
                      </shared__SimulatedLabel>
                      <shared__TriggerReplacementVariableSuggestionsButton
                        activeBackgroundColor="#f7f7f7"
                        activeBorderColor="#888"
                        activeColor="#000"
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        focusBackgroundColor="#fff"
                        focusBorderColor="#0066cd"
                        focusColor="#000"
                        hoverBackgroundColor="#fff"
                        hoverBorderColor="#888"
                        hoverColor="#000"
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <StyledComponent
                          activeBackgroundColor="#f7f7f7"
                          activeBorderColor="#888"
                          activeColor="#000"
                          backgroundColor="#f7f7f7"
                          borderColor="#ccc"
                          boxShadowColor="#ccc"
                          focusBackgroundColor="#fff"
                          focusBorderColor="#0066cd"
                          focusColor="#000"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared__TriggerReplacementVariableSuggestionsButton-lzs0hf-7",
                                "isStatic": false,
                                "lastClassName": "c19",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";background:",
                                  [Function],
                                  ";box-shadow:0 1px 0 ",
                                  [Function],
                                  ";",
                                  "&:active{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";box-shadow:inset 0 2px 5px -3px ",
                                  "rgba( 0, 0, 0, 0.5 )",
                                  ";}",
                                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                                  [Function],
                                  ";color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";box-shadow:0 0 3px ",
                                  "rgba( 8, 74, 103, 0.8 )",
                                  ";}",
                                  "&:hover{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";}",
                                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                                  "1px",
                                  ";border-style:solid;margin:0;padding:",
                                  "4px",
                                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                                  [Function],
                                  ";overflow:visible;min-height:",
                                  "32px",
                                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                                  "22px",
                                  ";}}",
                                  "box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;padding-left:8px;height:33px;border:1px solid #dbdbdb;font-size:13px;& svg{",
                                  [Function],
                                  ":7px;fill:",
                                  "#555",
                                  ";}",
                                ],
                              },
                              "defaultProps": Object {
                                "activeBackgroundColor": "#f7f7f7",
                                "activeBorderColor": "#888",
                                "activeColor": "#000",
                                "backgroundColor": "#f7f7f7",
                                "borderColor": "#ccc",
                                "boxShadowColor": "#ccc",
                                "focusBackgroundColor": "#fff",
                                "focusBorderColor": "#0066cd",
                                "focusColor": "#000",
                                "hoverBackgroundColor": "#fff",
                                "hoverBorderColor": "#888",
                                "hoverColor": "#000",
                                "textColor": "#555",
                                "type": "button",
                              },
                              "displayName": "shared__TriggerReplacementVariableSuggestionsButton",
                              "foldedComponentIds": Array [
                                "Button__BaseButton-sc-32rbq-4",
                                "Button-sc-32rbq-3",
                                "Button-sc-32rbq-1",
                                "Button-sc-32rbq-2",
                                "Button-sc-32rbq-0",
                              ],
                              "propTypes": Object {
                                "activeBackgroundColor": [Function],
                                "activeBorderColor": [Function],
                                "activeColor": [Function],
                                "backgroundColor": [Function],
                                "borderColor": [Function],
                                "boxShadowColor": [Function],
                                "focusBackgroundColor": [Function],
                                "focusBorderColor": [Function],
                                "focusColor": [Function],
                                "hoverBackgroundColor": [Function],
                                "hoverBorderColor": [Function],
                                "hoverColor": [Function],
                                "textColor": [Function],
                                "type": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "shared__TriggerReplacementVariableSuggestionsButton-lzs0hf-7",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverBackgroundColor="#fff"
                          hoverBorderColor="#888"
                          hoverColor="#000"
                          onClick={[Function]}
                          textColor="#555"
                          type="button"
                        >
                          <button
                            className="c19"
                            onClick={[Function]}
                            type="button"
                          >
                            <SvgIcon
                              color="currentColor"
                              icon="plus-circle"
                              size="16px"
                            >
                              <SvgIcon__StyledSvg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="16px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <StyledComponent
                                  aria-hidden={true}
                                  className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                  fill="currentColor"
                                  focusable="false"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                        "isStatic": false,
                                        "lastClassName": "c15",
                                        "rules": Array [
                                          "width:",
                                          [Function],
                                          ";height:",
                                          [Function],
                                          ";flex:none;",
                                        ],
                                      },
                                      "displayName": "SvgIcon__StyledSvg",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                      "target": "svg",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  role="img"
                                  size="16px"
                                  viewBox="0 0 1792 1792"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="yoast-svg-icon yoast-svg-icon-plus-circle c15"
                                    fill="currentColor"
                                    focusable="false"
                                    role="img"
                                    size="16px"
                                    viewBox="0 0 1792 1792"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M1344 960v-128q0-26-19-45t-45-19h-256v-256q0-26-19-45t-45-19h-128q-26 0-45 19t-19 45v256h-256q-26 0-45 19t-19 45v128q0 26 19 45t45 19h256v256q0 26 19 45t45 19h128q26 0 45-19t19-45v-256h256q26 0 45-19t19-45zm320-64q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"
                                    />
                                  </svg>
                                </StyledComponent>
                              </SvgIcon__StyledSvg>
                            </SvgIcon>
                            Insert snippet variable
                          </button>
                        </StyledComponent>
                      </shared__TriggerReplacementVariableSuggestionsButton>
                      <shared
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {},
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared-lzs0hf-1",
                                "isStatic": false,
                                "lastClassName": "c24",
                                "rules": Array [
                                  "flex:0 1 100%;border:1px solid ",
                                  [Function],
                                  ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                  [Function],
                                  ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                  "min-height:72px;padding:2px 6px;line-height:24px;.public-DraftEditorPlaceholder-root{color:",
                                  "#616161",
                                  ";}.public-DraftEditorPlaceholder-hasFocus{color:",
                                  "#616161",
                                  ";}",
                                  "&::before{display:block;position:absolute;top:-1px;",
                                  [Function],
                                  ":-25px;width:24px;height:24px;background-image:url( ",
                                  [Function],
                                  " );background-size:25px;content:\\"\\";}",
                                ],
                              },
                              "displayName": "shared",
                              "foldedComponentIds": Array [
                                "shared__InputContainer-lzs0hf-0",
                                "shared__DescriptionInputContainer-lzs0hf-3",
                              ],
                              "render": [Function],
                              "styledComponentId": "shared-lzs0hf-1",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isActive={false}
                          isHovered={false}
                          onClick={[Function]}
                        >
                          <div
                            className="c24"
                            onClick={[Function]}
                          >
                            <ReplacementVariableEditorStandalone
                              ariaLabelledBy="28"
                              content="Test description, %%replacement_variable%%"
                              fieldId="snippet-editor-field-description"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              placeholder="Modify your meta description by editing it right here"
                              recommendedReplacementVariables={Array []}
                              replacementVariables={Array []}
                            >
                              <div />
                            </ReplacementVariableEditorStandalone>
                          </div>
                        </StyledComponent>
                      </shared>
                    </ReplacementVariableEditor>
                    <ProgressBar
                      aria-hidden="true"
                      backgroundColor="#f7f7f7"
                      borderColor="#ddd"
                      max={156}
                      progressColor="#ee7c1b"
                      value={42}
                    >
                      <StyledComponent
                        aria-hidden="true"
                        backgroundColor="#f7f7f7"
                        borderColor="#ddd"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ProgressBar-sc-9g9yx6-0",
                              "isStatic": false,
                              "lastClassName": "c25",
                              "rules": Array [
                                "box-sizing:border-box;width:100%;height:8px;display:block;margin-top:8px;appearance:none;background-color:",
                                [Function],
                                ";border:1px solid ",
                                [Function],
                                ";::-webkit-progress-bar{background-color:",
                                [Function],
                                ";}::-webkit-progress-value{background-color:",
                                [Function],
                                ";transition:width 250ms;}::-moz-progress-bar{background-color:",
                                [Function],
                                ";}::-ms-fill{background-color:",
                                [Function],
                                ";border:0;}",
                              ],
                            },
                            "defaultProps": Object {
                              "aria-hidden": "true",
                              "backgroundColor": "#f7f7f7",
                              "borderColor": "#ddd",
                              "max": 1,
                              "progressColor": "#7ad03a",
                              "value": 0,
                            },
                            "displayName": "ProgressBar",
                            "foldedComponentIds": Array [],
                            "propTypes": Object {
                              "aria-hidden": [Function],
                              "backgroundColor": [Function],
                              "borderColor": [Function],
                              "max": [Function],
                              "progressColor": [Function],
                              "value": [Function],
                            },
                            "render": [Function],
                            "styledComponentId": "ProgressBar-sc-9g9yx6-0",
                            "target": "progress",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        max={156}
                        progressColor="#ee7c1b"
                        value={42}
                      >
                        <progress
                          aria-hidden="true"
                          className="c25"
                          max={156}
                          value={42}
                        />
                      </StyledComponent>
                    </ProgressBar>
                  </div>
                </StyledComponent>
              </shared__FormSection>
            </section>
          </StyledComponent>
        </shared__StyledEditor>
      </SnippetEditorFields>
      <SnippetEditor__CloseEditorButton
        activeBackgroundColor="#f7f7f7"
        activeBorderColor="#888"
        activeColor="#000"
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        focusBackgroundColor="#fff"
        focusBorderColor="#0066cd"
        focusColor="#000"
        hoverBackgroundColor="#fff"
        hoverBorderColor="#888"
        hoverColor="#000"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <StyledComponent
          activeBackgroundColor="#f7f7f7"
          activeBorderColor="#888"
          activeColor="#000"
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          focusBackgroundColor="#fff"
          focusBorderColor="#0066cd"
          focusColor="#000"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "SnippetEditor__CloseEditorButton-sc-144bmm3-2",
                "isStatic": false,
                "lastClassName": "c26",
                "rules": Array [
                  "color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";background:",
                  [Function],
                  ";box-shadow:0 1px 0 ",
                  [Function],
                  ";",
                  "&:active{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";box-shadow:inset 0 2px 5px -3px ",
                  "rgba( 0, 0, 0, 0.5 )",
                  ";}",
                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                  [Function],
                  ";color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";box-shadow:0 0 3px ",
                  "rgba( 8, 74, 103, 0.8 )",
                  ";}",
                  "&:hover{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";}",
                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                  "1px",
                  ";border-style:solid;margin:0;padding:",
                  "4px",
                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                  [Function],
                  ";overflow:visible;min-height:",
                  "32px",
                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                  "22px",
                  ";}}",
                  "height:33px;border:1px solid #dbdbdb;box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;",
                  "margin-top:24px;",
                ],
              },
              "defaultProps": Object {
                "activeBackgroundColor": "#f7f7f7",
                "activeBorderColor": "#888",
                "activeColor": "#000",
                "backgroundColor": "#f7f7f7",
                "borderColor": "#ccc",
                "boxShadowColor": "#ccc",
                "focusBackgroundColor": "#fff",
                "focusBorderColor": "#0066cd",
                "focusColor": "#000",
                "hoverBackgroundColor": "#fff",
                "hoverBorderColor": "#888",
                "hoverColor": "#000",
                "textColor": "#555",
                "type": "button",
              },
              "displayName": "SnippetEditor__CloseEditorButton",
              "foldedComponentIds": Array [
                "Button__BaseButton-sc-32rbq-4",
                "Button-sc-32rbq-3",
                "Button-sc-32rbq-1",
                "Button-sc-32rbq-2",
                "Button-sc-32rbq-0",
                "SnippetEditor__SnippetEditorButton-sc-144bmm3-0",
              ],
              "propTypes": Object {
                "activeBackgroundColor": [Function],
                "activeBorderColor": [Function],
                "activeColor": [Function],
                "backgroundColor": [Function],
                "borderColor": [Function],
                "boxShadowColor": [Function],
                "focusBackgroundColor": [Function],
                "focusBorderColor": [Function],
                "focusColor": [Function],
                "hoverBackgroundColor": [Function],
                "hoverBorderColor": [Function],
                "hoverColor": [Function],
                "textColor": [Function],
                "type": [Function],
              },
              "render": [Function],
              "styledComponentId": "SnippetEditor__CloseEditorButton-sc-144bmm3-2",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          hoverBackgroundColor="#fff"
          hoverBorderColor="#888"
          hoverColor="#000"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <button
            className="c26"
            onClick={[Function]}
            type="button"
          >
            Close snippet editor
          </button>
        </StyledComponent>
      </SnippetEditor__CloseEditorButton>
    </div>
  </ErrorBoundary>
</SnippetEditor>
`;

exports[`SnippetEditor highlights a focused field 1`] = `
.c0 {
  border-bottom: 1px hidden #fff;
  border-radius: 2px;
  box-shadow: 0 1px 2px rgba(0,0,0,.2);
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  max-width: 600px;
  box-sizing: border-box;
  font-size: 14px;
}

.c2 {
  cursor: pointer;
  position: relative;
}

.c3 {
  color: #1e0fbe;
  -webkit-text-decoration: none;
  text-decoration: none;
  font-size: 18px;
  line-height: 1.2;
  font-weight: normal;
  margin: 0;
  display: inline-block;
  overflow: hidden;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c4 {
  display: inline-block;
  font-size: 16px;
  line-height: 1.2em;
  max-height: 2.4em;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c5 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  white-space: nowrap;
  font-size: 14px;
}

.c6 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  white-space: nowrap;
  font-size: 14px;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 100%;
}

.c8 {
  color: #545454;
  cursor: pointer;
  position: relative;
  max-width: 600px;
  font-size: 13px;
  font-size: 14px;
  line-height: 20px;
}

.c1 {
  padding: 8px 16px;
}

.c7 {
  border: 0;
  border-bottom: 1px solid #DFE1E5;
  margin: 0;
}

.c10 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: #555;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 3px 0 0 3px;
}

.c10:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c10::-moz-focus-inner {
  border-width: 0;
}

.c10:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c10:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c10 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c10:hover,
.c10:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
  box-shadow: none;
}

.c12 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: transparent;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 0 3px 3px 0;
}

.c12:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c12::-moz-focus-inner {
  border-width: 0;
}

.c12:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c12:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c12 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c12:hover,
.c12:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
  box-shadow: none;
}

.c9 {
  display: inline-block;
  margin-top: 10px;
  border: 1px solid #dbdbdb;
  border-radius: 4px;
  background-color: #f7f7f7;
  vertical-align: top;
}

.c14 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin: 10px 0 0 4px;
  fill: #555;
  padding-left: 8px;
}

.c14:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c14::-moz-focus-inner {
  border-width: 0;
}

.c14:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c14:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c14 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c14 svg {
  margin-right: 7px;
}

.c11 {
  width: 22px;
  height: 22px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c13 {
  width: 18px;
  height: 18px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c15 {
  width: 16px;
  height: 16px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c10::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c12::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c14::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

<div>
  <section>
    <div
      className="c0"
      onMouseLeave={undefined}
      width={640}
    >
      <div
        className="c1"
      >
        <span
          className="screen-reader-text"
          style={
            Object {
              "clip": "rect(1px, 1px, 1px, 1px)",
              "height": "1px",
              "overflow": "hidden",
              "position": "absolute",
              "width": "1px",
            }
          }
        >
          SEO title preview:
        </span>
        <div
          className="c2"
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
        >
          <div
            className="c3"
          >
            <span
              className="c4"
            >
              Test title
            </span>
          </div>
        </div>
        <span
          className="screen-reader-text"
          style={
            Object {
              "clip": "rect(1px, 1px, 1px, 1px)",
              "height": "1px",
              "overflow": "hidden",
              "position": "absolute",
              "width": "1px",
            }
          }
        >
          Url preview:
        </span>
        <div
          className="c5"
        >
          <div
            className="c6"
            onMouseEnter={[Function]}
            onMouseLeave={[Function]}
            onMouseUp={[Function]}
          >
            example.org â€º test-slug
          </div>
        </div>
      </div>
      <hr
        className="c7"
      />
      <div
        className="c1"
      >
        <span
          className="screen-reader-text"
          style={
            Object {
              "clip": "rect(1px, 1px, 1px, 1px)",
              "height": "1px",
              "overflow": "hidden",
              "position": "absolute",
              "width": "1px",
            }
          }
        >
          Meta description preview:
        </span>
        <div
          className="c8"
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
        >
          <div
            className="c8"
          >
            Test description, %%replacement_variable%%
          </div>
        </div>
      </div>
    </div>
  </section>
  <div
    className="c9"
  >
    <button
      aria-pressed={true}
      className="c10"
      onClick={[Function]}
      type="button"
    >
      <svg
        aria-hidden={true}
        className="yoast-svg-icon yoast-svg-icon-mobile c11"
        fill="currentColor"
        focusable="false"
        role="img"
        size="22px"
        viewBox="0 0 1792 1792"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
        />
      </svg>
      <span
        className="screen-reader-text"
        style={
          Object {
            "clip": "rect(1px, 1px, 1px, 1px)",
            "height": "1px",
            "overflow": "hidden",
            "position": "absolute",
            "width": "1px",
          }
        }
      >
        Mobile preview
      </span>
    </button>
    <button
      aria-pressed={false}
      className="c12"
      onClick={[Function]}
      type="button"
    >
      <svg
        aria-hidden={true}
        className="yoast-svg-icon yoast-svg-icon-desktop c13"
        fill="currentColor"
        focusable="false"
        role="img"
        size="18px"
        viewBox="0 0 1792 1792"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
        />
      </svg>
      <span
        className="screen-reader-text"
        style={
          Object {
            "clip": "rect(1px, 1px, 1px, 1px)",
            "height": "1px",
            "overflow": "hidden",
            "position": "absolute",
            "width": "1px",
          }
        }
      >
        Desktop preview
      </span>
    </button>
  </div>
  <button
    aria-expanded={false}
    className="c14"
    onClick={[Function]}
    type="button"
  >
    <svg
      aria-hidden={true}
      className="yoast-svg-icon yoast-svg-icon-edit c15"
      fill="currentColor"
      focusable="false"
      role="img"
      size="16px"
      viewBox="0 0 1792 1792"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
      />
    </svg>
    Edit snippet
  </button>
</div>
`;

exports[`SnippetEditor highlights a hovered field 1`] = `
.c0 {
  border-bottom: 1px hidden #fff;
  border-radius: 2px;
  box-shadow: 0 1px 2px rgba(0,0,0,.2);
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  max-width: 600px;
  box-sizing: border-box;
  font-size: 14px;
}

.c2 {
  cursor: pointer;
  position: relative;
}

.c3 {
  color: #1e0fbe;
  -webkit-text-decoration: none;
  text-decoration: none;
  font-size: 18px;
  line-height: 1.2;
  font-weight: normal;
  margin: 0;
  display: inline-block;
  overflow: hidden;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c4 {
  display: inline-block;
  font-size: 16px;
  line-height: 1.2em;
  max-height: 2.4em;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c5 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  white-space: nowrap;
  font-size: 14px;
}

.c6 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  white-space: nowrap;
  font-size: 14px;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 100%;
}

.c8 {
  color: #545454;
  cursor: pointer;
  position: relative;
  max-width: 600px;
  font-size: 13px;
  font-size: 14px;
  line-height: 20px;
}

.c1 {
  padding: 8px 16px;
}

.c7 {
  border: 0;
  border-bottom: 1px solid #DFE1E5;
  margin: 0;
}

.c10 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: #555;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 3px 0 0 3px;
}

.c10:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c10::-moz-focus-inner {
  border-width: 0;
}

.c10:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c10:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c10 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c10:hover,
.c10:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
  box-shadow: none;
}

.c12 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: transparent;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 0 3px 3px 0;
}

.c12:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c12::-moz-focus-inner {
  border-width: 0;
}

.c12:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c12:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c12 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c12:hover,
.c12:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
  box-shadow: none;
}

.c9 {
  display: inline-block;
  margin-top: 10px;
  border: 1px solid #dbdbdb;
  border-radius: 4px;
  background-color: #f7f7f7;
  vertical-align: top;
}

.c14 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin: 10px 0 0 4px;
  fill: #555;
  padding-left: 8px;
}

.c14:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c14::-moz-focus-inner {
  border-width: 0;
}

.c14:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c14:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c14 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c14 svg {
  margin-right: 7px;
}

.c11 {
  width: 22px;
  height: 22px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c13 {
  width: 18px;
  height: 18px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c15 {
  width: 16px;
  height: 16px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c10::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c12::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c14::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

<div>
  <section>
    <div
      className="c0"
      onMouseLeave={undefined}
      width={640}
    >
      <div
        className="c1"
      >
        <span
          className="screen-reader-text"
          style={
            Object {
              "clip": "rect(1px, 1px, 1px, 1px)",
              "height": "1px",
              "overflow": "hidden",
              "position": "absolute",
              "width": "1px",
            }
          }
        >
          SEO title preview:
        </span>
        <div
          className="c2"
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
        >
          <div
            className="c3"
          >
            <span
              className="c4"
            >
              Test title
            </span>
          </div>
        </div>
        <span
          className="screen-reader-text"
          style={
            Object {
              "clip": "rect(1px, 1px, 1px, 1px)",
              "height": "1px",
              "overflow": "hidden",
              "position": "absolute",
              "width": "1px",
            }
          }
        >
          Url preview:
        </span>
        <div
          className="c5"
        >
          <div
            className="c6"
            onMouseEnter={[Function]}
            onMouseLeave={[Function]}
            onMouseUp={[Function]}
          >
            example.org â€º test-slug
          </div>
        </div>
      </div>
      <hr
        className="c7"
      />
      <div
        className="c1"
      >
        <span
          className="screen-reader-text"
          style={
            Object {
              "clip": "rect(1px, 1px, 1px, 1px)",
              "height": "1px",
              "overflow": "hidden",
              "position": "absolute",
              "width": "1px",
            }
          }
        >
          Meta description preview:
        </span>
        <div
          className="c8"
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
        >
          <div
            className="c8"
          >
            Test description, %%replacement_variable%%
          </div>
        </div>
      </div>
    </div>
  </section>
  <div
    className="c9"
  >
    <button
      aria-pressed={true}
      className="c10"
      onClick={[Function]}
      type="button"
    >
      <svg
        aria-hidden={true}
        className="yoast-svg-icon yoast-svg-icon-mobile c11"
        fill="currentColor"
        focusable="false"
        role="img"
        size="22px"
        viewBox="0 0 1792 1792"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
        />
      </svg>
      <span
        className="screen-reader-text"
        style={
          Object {
            "clip": "rect(1px, 1px, 1px, 1px)",
            "height": "1px",
            "overflow": "hidden",
            "position": "absolute",
            "width": "1px",
          }
        }
      >
        Mobile preview
      </span>
    </button>
    <button
      aria-pressed={false}
      className="c12"
      onClick={[Function]}
      type="button"
    >
      <svg
        aria-hidden={true}
        className="yoast-svg-icon yoast-svg-icon-desktop c13"
        fill="currentColor"
        focusable="false"
        role="img"
        size="18px"
        viewBox="0 0 1792 1792"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
        />
      </svg>
      <span
        className="screen-reader-text"
        style={
          Object {
            "clip": "rect(1px, 1px, 1px, 1px)",
            "height": "1px",
            "overflow": "hidden",
            "position": "absolute",
            "width": "1px",
          }
        }
      >
        Desktop preview
      </span>
    </button>
  </div>
  <button
    aria-expanded={false}
    className="c14"
    onClick={[Function]}
    type="button"
  >
    <svg
      aria-hidden={true}
      className="yoast-svg-icon yoast-svg-icon-edit c15"
      fill="currentColor"
      focusable="false"
      role="img"
      size="16px"
      viewBox="0 0 1792 1792"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
      />
    </svg>
    Edit snippet
  </button>
</div>
`;

exports[`SnippetEditor highlights the active ReplacementVariableEditor when calling setFieldFocus 1`] = `
.c22 {
  box-sizing: border-box;
  width: 100%;
  height: 8px;
  display: block;
  margin-top: 8px;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background-color: #f7f7f7;
  border: 1px solid #ddd;
}

.c22::-webkit-progress-bar {
  background-color: #f7f7f7;
}

.c22::-webkit-progress-value {
  background-color: #dc3232;
  -webkit-transition: width 250ms;
  transition: width 250ms;
}

.c22::-moz-progress-bar {
  background-color: #dc3232;
}

.c22::-ms-fill {
  background-color: #dc3232;
  border: 0;
}

.c26 {
  box-sizing: border-box;
  width: 100%;
  height: 8px;
  display: block;
  margin-top: 8px;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background-color: #f7f7f7;
  border: 1px solid #ddd;
}

.c26::-webkit-progress-bar {
  background-color: #f7f7f7;
}

.c26::-webkit-progress-value {
  background-color: #ee7c1b;
  -webkit-transition: width 250ms;
  transition: width 250ms;
}

.c26::-moz-progress-bar {
  background-color: #ee7c1b;
}

.c26::-ms-fill {
  background-color: #ee7c1b;
  border: 0;
}

.c18 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  margin: 24px 0 0 0;
}

.c17 {
  padding: 0 20px;
}

.c19 {
  -webkit-flex: 1 1 200px;
  -ms-flex: 1 1 200px;
  flex: 1 1 200px;
  min-width: 200px;
  cursor: pointer;
  font-size: 16px;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin: 4px 0;
}

.c20 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  padding-left: 8px;
  height: 33px;
  border: 1px solid #dbdbdb;
  font-size: 13px;
}

.c20:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c20::-moz-focus-inner {
  border-width: 0;
}

.c20:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c20:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c20 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c20 svg {
  margin-right: 7px;
  fill: #555;
}

.c0 {
  border-bottom: 1px hidden #fff;
  border-radius: 2px;
  box-shadow: 0 1px 2px rgba(0,0,0,.2);
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  max-width: 600px;
  box-sizing: border-box;
  font-size: 14px;
}

.c2 {
  cursor: pointer;
  position: relative;
}

.c3 {
  color: #1e0fbe;
  -webkit-text-decoration: none;
  text-decoration: none;
  font-size: 18px;
  line-height: 1.2;
  font-weight: normal;
  margin: 0;
  display: inline-block;
  overflow: hidden;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c4 {
  display: inline-block;
  font-size: 16px;
  line-height: 1.2em;
  max-height: 2.4em;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c5 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  white-space: nowrap;
  font-size: 14px;
}

.c6 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  white-space: nowrap;
  font-size: 14px;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 100%;
}

.c9 {
  color: #545454;
  cursor: pointer;
  position: relative;
  max-width: 600px;
  font-size: 13px;
  font-size: 14px;
  line-height: 20px;
}

.c1 {
  padding: 8px 16px;
}

.c7 {
  border: 0;
  border-bottom: 1px solid #DFE1E5;
  margin: 0;
}

.c24 {
  border: none;
  width: 100%;
  height: inherit;
  line-height: inherit;
  font-family: inherit;
  font-size: inherit;
  color: inherit;
}

.c24:focus {
  outline: 0;
}

.c21 {
  -webkit-flex: 0 1 100%;
  -ms-flex: 0 1 100%;
  flex: 0 1 100%;
  border: 1px solid #ddd;
  padding: 3px 5px;
  box-sizing: border-box;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  cursor: text;
}

.c21 .public-DraftStyleDefault-block {
  line-height: 24px;
}

.c21::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width%3D%221792%22%20height%3D%221792%22%20viewBox%3D%220%200%201792%201792%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20fill%3D%22transparent%22%20d%3D%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20%2F%3E%3C%2Fsvg%3E );
  background-size: 25px;
  content: "";
}

.c23 {
  -webkit-flex: 0 1 100%;
  -ms-flex: 0 1 100%;
  flex: 0 1 100%;
  border: 1px solid #ddd;
  padding: 3px 5px;
  box-sizing: border-box;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  cursor: text;
}

.c23::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width%3D%221792%22%20height%3D%221792%22%20viewBox%3D%220%200%201792%201792%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20fill%3D%22transparent%22%20d%3D%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20%2F%3E%3C%2Fsvg%3E );
  background-size: 25px;
  content: "";
}

.c25 {
  -webkit-flex: 0 1 100%;
  -ms-flex: 0 1 100%;
  flex: 0 1 100%;
  border: 1px solid #5b9dd9;
  padding: 3px 5px;
  box-sizing: border-box;
  box-shadow: 0 0 2px rgba(30,140,190,.8);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  cursor: text;
  min-height: 72px;
  padding: 2px 6px;
  line-height: 24px;
}

.c25 .public-DraftEditorPlaceholder-root {
  color: #616161;
}

.c25 .public-DraftEditorPlaceholder-hasFocus {
  color: #616161;
}

.c25::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width%3D%221792%22%20height%3D%221792%22%20viewBox%3D%220%200%201792%201792%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20fill%3D%22%231e8cbe%22%20d%3D%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20%2F%3E%3C%2Fsvg%3E );
  background-size: 25px;
  content: "";
}

.c11 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: #555;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 3px 0 0 3px;
}

.c11:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c11::-moz-focus-inner {
  border-width: 0;
}

.c11:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c11:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c11 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c11:hover,
.c11:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
  box-shadow: none;
}

.c13 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: transparent;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 0 3px 3px 0;
}

.c13:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c13::-moz-focus-inner {
  border-width: 0;
}

.c13:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c13:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c13 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c13:hover,
.c13:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
  box-shadow: none;
}

.c10 {
  display: inline-block;
  margin-top: 10px;
  border: 1px solid #dbdbdb;
  border-radius: 4px;
  background-color: #f7f7f7;
  vertical-align: top;
}

.c15 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin: 10px 0 0 4px;
  fill: #555;
  padding-left: 8px;
}

.c15:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c15::-moz-focus-inner {
  border-width: 0;
}

.c15:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c15:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c15 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c15 svg {
  margin-right: 7px;
}

.c27 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin-top: 24px;
}

.c27:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c27::-moz-focus-inner {
  border-width: 0;
}

.c27:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c27:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c27 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c12 {
  width: 22px;
  height: 22px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c14 {
  width: 18px;
  height: 18px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c16 {
  width: 16px;
  height: 16px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c8 {
  color: #545454;
  cursor: pointer;
  position: relative;
  max-width: 600px;
  font-size: 13px;
  font-size: 14px;
  line-height: 20px;
}

.c8::before {
  display: block;
  position: absolute;
  top: -3px;
  left: -40px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width%3D%221792%22%20height%3D%221792%22%20viewBox%3D%220%200%201792%201792%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20fill%3D%22%23555%22%20d%3D%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20%2F%3E%3C%2Fsvg%3E );
  background-size: 25px;
  content: "";
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c20::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c11::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c13::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c15::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c27::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

<SnippetEditor
  baseUrl="http://example.org/"
  data={
    Object {
      "description": "Test description, %%replacement_variable%%",
      "slug": "test-slug",
      "title": "Test title",
    }
  }
  date=""
  descriptionEditorFieldPlaceholder=""
  descriptionLengthProgress={
    Object {
      "actual": 0,
      "max": 156,
      "score": 0,
    }
  }
  hasPaperStyle={true}
  locale="en"
  mapEditorDataToPreview={null}
  mode="mobile"
  onChange={[MockFunction]}
  onChangeAnalysisData={[Function]}
  recommendedReplacementVariables={Array []}
  replacementVariables={Array []}
  showCloseButton={true}
  titleLengthProgress={
    Object {
      "actual": 0,
      "max": 600,
      "score": 0,
    }
  }
  wordsToHighlight={Array []}
>
  <ErrorBoundary>
    <div>
      <SnippetPreview
        activeField="description"
        breadcrumbs={null}
        date=""
        description="Test description, %%replacement_variable%%"
        hoveredField={null}
        isAmp={false}
        keyword=""
        locale="en"
        mode="mobile"
        onHover={[Function]}
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        title="Test title"
        url="example.org/test-slug"
        wordsToHighlight={Array []}
      >
        <section>
          <SnippetPreview__MobileContainer
            padding={20}
            width={640}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "SnippetPreview__MobileContainer-sc-1hxg8jo-1",
                    "isStatic": true,
                    "lastClassName": "c0",
                    "rules": Array [
                      "border-bottom:1px hidden #fff;border-radius:2px;box-shadow:0 1px 2px rgba(0,0,0,.2);font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;max-width:",
                      "600",
                      "px;box-sizing:border-box;font-size:14px;",
                    ],
                  },
                  "displayName": "SnippetPreview__MobileContainer",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "SnippetPreview__MobileContainer-sc-1hxg8jo-1",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              padding={20}
              width={640}
            >
              <div
                className="c0"
                width={640}
              >
                <SnippetPreview__MobilePartContainer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__MobilePartContainer-sc-1hxg8jo-12",
                          "isStatic": true,
                          "lastClassName": "c1",
                          "rules": Array [
                            "padding:8px 16px;",
                          ],
                        },
                        "displayName": "SnippetPreview__MobilePartContainer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__MobilePartContainer-sc-1hxg8jo-12",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="c1"
                    >
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          SEO title preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__BaseTitle
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__BaseTitle-sc-1hxg8jo-2",
                                "isStatic": true,
                                "lastClassName": "c2",
                                "rules": Array [
                                  "cursor:pointer;position:relative;",
                                ],
                              },
                              "displayName": "SnippetPreview__BaseTitle",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__BaseTitle-sc-1hxg8jo-2",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                        >
                          <div
                            className="c2"
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                          >
                            <SnippetPreview__TitleBounded>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__TitleBounded-sc-1hxg8jo-5",
                                      "isStatic": true,
                                      "lastClassName": "c3",
                                      "rules": Array [
                                        "color:",
                                        "#1e0fbe",
                                        ";text-decoration:none;font-size:18px;line-height:1.2;font-weight:normal;margin:0;display:inline-block;overflow:hidden;max-width:",
                                        "600",
                                        "px;vertical-align:top;text-overflow:ellipsis;",
                                        "max-width:",
                                        "600",
                                        "px;vertical-align:top;text-overflow:ellipsis;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__TitleBounded",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__Title-sc-1hxg8jo-4",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__TitleBounded-sc-1hxg8jo-5",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="c3"
                                >
                                  <SnippetPreview__TitleUnboundedMobile>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "SnippetPreview__TitleUnboundedMobile-sc-1hxg8jo-7",
                                            "isStatic": true,
                                            "lastClassName": "c4",
                                            "rules": Array [
                                              "display:inline-block;font-size:16px;line-height:1.2em;max-height:2.4em;overflow:hidden;text-overflow:ellipsis;",
                                            ],
                                          },
                                          "displayName": "SnippetPreview__TitleUnboundedMobile",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "SnippetPreview__TitleUnboundedMobile-sc-1hxg8jo-7",
                                          "target": "span",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={[Function]}
                                    >
                                      <span
                                        className="c4"
                                      >
                                        Test title
                                      </span>
                                    </StyledComponent>
                                  </SnippetPreview__TitleUnboundedMobile>
                                </div>
                              </StyledComponent>
                            </SnippetPreview__TitleBounded>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__BaseTitle>
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          Url preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__BaseUrl>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__BaseUrl-sc-1hxg8jo-8",
                                "isStatic": true,
                                "lastClassName": "c5",
                                "rules": Array [
                                  "display:inline-block;color:",
                                  "#006621",
                                  ";cursor:pointer;position:relative;max-width:90%;white-space:nowrap;font-size:14px;",
                                ],
                              },
                              "displayName": "SnippetPreview__BaseUrl",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__BaseUrl-sc-1hxg8jo-8",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <div
                            className="c5"
                          >
                            <SnippetPreview__BaseUrlOverflowContainer
                              onMouseEnter={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__BaseUrlOverflowContainer-sc-1hxg8jo-9",
                                      "isStatic": true,
                                      "lastClassName": "c6",
                                      "rules": Array [
                                        "display:inline-block;color:",
                                        "#006621",
                                        ";cursor:pointer;position:relative;max-width:90%;white-space:nowrap;font-size:14px;",
                                        "overflow:hidden;text-overflow:ellipsis;max-width:100%;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__BaseUrlOverflowContainer",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__BaseUrl-sc-1hxg8jo-8",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__BaseUrlOverflowContainer-sc-1hxg8jo-9",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                onMouseEnter={[Function]}
                                onMouseLeave={[Function]}
                                onMouseUp={[Function]}
                              >
                                <div
                                  className="c6"
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseUp={[Function]}
                                >
                                  example.org â€º test-slug
                                </div>
                              </StyledComponent>
                            </SnippetPreview__BaseUrlOverflowContainer>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__BaseUrl>
                    </div>
                  </StyledComponent>
                </SnippetPreview__MobilePartContainer>
                <SnippetPreview__Separator>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__Separator-sc-1hxg8jo-16",
                          "isStatic": true,
                          "lastClassName": "c7",
                          "rules": Array [
                            "border:0;border-bottom:1px solid #DFE1E5;margin:0;",
                          ],
                        },
                        "displayName": "SnippetPreview__Separator",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__Separator-sc-1hxg8jo-16",
                        "target": "hr",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <hr
                      className="c7"
                    />
                  </StyledComponent>
                </SnippetPreview__Separator>
                <SnippetPreview__MobilePartContainer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__MobilePartContainer-sc-1hxg8jo-12",
                          "isStatic": true,
                          "lastClassName": "c1",
                          "rules": Array [
                            "padding:8px 16px;",
                          ],
                        },
                        "displayName": "SnippetPreview__MobilePartContainer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__MobilePartContainer-sc-1hxg8jo-12",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="c1"
                    >
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          Meta description preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview
                        isDescriptionPlaceholder={false}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview-sc-1hxg8jo-3",
                                "isStatic": false,
                                "lastClassName": "c8",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";cursor:pointer;position:relative;max-width:",
                                  "600",
                                  "px;font-size:13px;",
                                  "font-size:14px;line-height:20px;",
                                  "&::before{display:block;position:absolute;top:-3px;",
                                  [Function],
                                  ":",
                                  [Function],
                                  ";width:24px;height:24px;background-image:url( ",
                                  [Function],
                                  " );background-size:25px;content:\\"\\";}",
                                ],
                              },
                              "displayName": "SnippetPreview",
                              "foldedComponentIds": Array [
                                "SnippetPreview__DesktopDescription-sc-1hxg8jo-10",
                                "SnippetPreview__MobileDescription-sc-1hxg8jo-11",
                              ],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview-sc-1hxg8jo-3",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isDescriptionPlaceholder={false}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                        >
                          <div
                            className="c8"
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                          >
                            <SnippetPreview__MobileDescription
                              isDescriptionPlaceholder={false}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__MobileDescription-sc-1hxg8jo-11",
                                      "isStatic": false,
                                      "lastClassName": "c9",
                                      "rules": Array [
                                        "color:",
                                        [Function],
                                        ";cursor:pointer;position:relative;max-width:",
                                        "600",
                                        "px;font-size:13px;",
                                        "font-size:14px;line-height:20px;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__MobileDescription",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__DesktopDescription-sc-1hxg8jo-10",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__MobileDescription-sc-1hxg8jo-11",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={[Function]}
                                isDescriptionPlaceholder={false}
                              >
                                <div
                                  className="c9"
                                >
                                  Test description, %%replacement_variable%%
                                </div>
                              </StyledComponent>
                            </SnippetPreview__MobileDescription>
                          </div>
                        </StyledComponent>
                      </SnippetPreview>
                    </div>
                  </StyledComponent>
                </SnippetPreview__MobilePartContainer>
              </div>
            </StyledComponent>
          </SnippetPreview__MobileContainer>
        </section>
      </SnippetPreview>
      <ModeSwitcher
        active="mobile"
        onChange={[Function]}
      >
        <ModeSwitcher__Switcher>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "ModeSwitcher__Switcher-sc-9lbpr3-3",
                  "isStatic": true,
                  "lastClassName": "c10",
                  "rules": Array [
                    "display:inline-block;margin-top:10px;border:1px solid #dbdbdb;border-radius:4px;background-color:#f7f7f7;vertical-align:top;",
                  ],
                },
                "displayName": "ModeSwitcher__Switcher",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModeSwitcher__Switcher-sc-9lbpr3-3",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="c10"
            >
              <ModeSwitcher__MobileButton
                activeBackgroundColor="#f7f7f7"
                activeBorderColor="#888"
                activeColor="#000"
                aria-pressed={true}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                focusBackgroundColor="#fff"
                focusBorderColor="#0066cd"
                focusColor="#000"
                hoverBackgroundColor="#fff"
                hoverBorderColor="#888"
                hoverColor="#000"
                isActive={true}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <StyledComponent
                  activeBackgroundColor="#f7f7f7"
                  activeBorderColor="#888"
                  activeColor="#000"
                  aria-pressed={true}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  focusBackgroundColor="#fff"
                  focusBorderColor="#0066cd"
                  focusColor="#000"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "ModeSwitcher__MobileButton-sc-9lbpr3-1",
                        "isStatic": false,
                        "lastClassName": "c11",
                        "rules": Array [
                          "color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";box-shadow:0 1px 0 ",
                          [Function],
                          ";",
                          "&:active{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";box-shadow:inset 0 2px 5px -3px ",
                          "rgba( 0, 0, 0, 0.5 )",
                          ";}",
                          "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                          [Function],
                          ";color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";box-shadow:0 0 3px ",
                          "rgba( 8, 74, 103, 0.8 )",
                          ";}",
                          "&:hover{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";}",
                          "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                          "1px",
                          ";border-style:solid;margin:0;padding:",
                          "4px",
                          " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                          [Function],
                          ";overflow:visible;min-height:",
                          "32px",
                          ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                          "22px",
                          ";}}",
                          "border:none;border-bottom:4px solid transparent;width:31px;height:31px;border-color:",
                          [Function],
                          ";color:",
                          "#555",
                          ";transition:0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;transition-property:border-color;&:hover,&:focus{background-color:",
                          "#fff",
                          ";border:none;border-bottom:4px solid transparent;border-color:",
                          "#1e8cbe",
                          ";color:",
                          "#1e8cbe",
                          ";box-shadow:none;}",
                          "border-radius:3px 0 0 3px;",
                        ],
                      },
                      "defaultProps": Object {
                        "activeBackgroundColor": "#f7f7f7",
                        "activeBorderColor": "#888",
                        "activeColor": "#000",
                        "backgroundColor": "#f7f7f7",
                        "borderColor": "#ccc",
                        "boxShadowColor": "#ccc",
                        "focusBackgroundColor": "#fff",
                        "focusBorderColor": "#0066cd",
                        "focusColor": "#000",
                        "hoverBackgroundColor": "#fff",
                        "hoverBorderColor": "#888",
                        "hoverColor": "#000",
                        "textColor": "#555",
                        "type": "button",
                      },
                      "displayName": "ModeSwitcher__MobileButton",
                      "foldedComponentIds": Array [
                        "Button__BaseButton-sc-32rbq-4",
                        "Button-sc-32rbq-3",
                        "Button-sc-32rbq-1",
                        "Button-sc-32rbq-2",
                        "Button-sc-32rbq-0",
                        "ModeSwitcher__SwitcherButton-sc-9lbpr3-0",
                      ],
                      "propTypes": Object {
                        "activeBackgroundColor": [Function],
                        "activeBorderColor": [Function],
                        "activeColor": [Function],
                        "backgroundColor": [Function],
                        "borderColor": [Function],
                        "boxShadowColor": [Function],
                        "focusBackgroundColor": [Function],
                        "focusBorderColor": [Function],
                        "focusColor": [Function],
                        "hoverBackgroundColor": [Function],
                        "hoverBorderColor": [Function],
                        "hoverColor": [Function],
                        "textColor": [Function],
                        "type": [Function],
                      },
                      "render": [Function],
                      "styledComponentId": "ModeSwitcher__MobileButton-sc-9lbpr3-1",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hoverBackgroundColor="#fff"
                  hoverBorderColor="#888"
                  hoverColor="#000"
                  isActive={true}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <button
                    aria-pressed={true}
                    className="c11"
                    onClick={[Function]}
                    type="button"
                  >
                    <SvgIcon
                      color="currentColor"
                      icon="mobile"
                      size="22px"
                    >
                      <SvgIcon__StyledSvg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-mobile"
                        fill="currentColor"
                        focusable="false"
                        role="img"
                        size="22px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <StyledComponent
                          aria-hidden={true}
                          className="yoast-svg-icon yoast-svg-icon-mobile"
                          fill="currentColor"
                          focusable="false"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                "isStatic": false,
                                "lastClassName": "c12",
                                "rules": Array [
                                  "width:",
                                  [Function],
                                  ";height:",
                                  [Function],
                                  ";flex:none;",
                                ],
                              },
                              "displayName": "SvgIcon__StyledSvg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          role="img"
                          size="22px"
                          viewBox="0 0 1792 1792"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <svg
                            aria-hidden={true}
                            className="yoast-svg-icon yoast-svg-icon-mobile c12"
                            fill="currentColor"
                            focusable="false"
                            role="img"
                            size="22px"
                            viewBox="0 0 1792 1792"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
                            />
                          </svg>
                        </StyledComponent>
                      </SvgIcon__StyledSvg>
                    </SvgIcon>
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Mobile preview
                      </span>
                    </ScreenReaderText>
                  </button>
                </StyledComponent>
              </ModeSwitcher__MobileButton>
              <ModeSwitcher__DesktopButton
                activeBackgroundColor="#f7f7f7"
                activeBorderColor="#888"
                activeColor="#000"
                aria-pressed={false}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                focusBackgroundColor="#fff"
                focusBorderColor="#0066cd"
                focusColor="#000"
                hoverBackgroundColor="#fff"
                hoverBorderColor="#888"
                hoverColor="#000"
                isActive={false}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <StyledComponent
                  activeBackgroundColor="#f7f7f7"
                  activeBorderColor="#888"
                  activeColor="#000"
                  aria-pressed={false}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  focusBackgroundColor="#fff"
                  focusBorderColor="#0066cd"
                  focusColor="#000"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "ModeSwitcher__DesktopButton-sc-9lbpr3-2",
                        "isStatic": false,
                        "lastClassName": "c13",
                        "rules": Array [
                          "color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";box-shadow:0 1px 0 ",
                          [Function],
                          ";",
                          "&:active{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";box-shadow:inset 0 2px 5px -3px ",
                          "rgba( 0, 0, 0, 0.5 )",
                          ";}",
                          "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                          [Function],
                          ";color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";box-shadow:0 0 3px ",
                          "rgba( 8, 74, 103, 0.8 )",
                          ";}",
                          "&:hover{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";}",
                          "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                          "1px",
                          ";border-style:solid;margin:0;padding:",
                          "4px",
                          " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                          [Function],
                          ";overflow:visible;min-height:",
                          "32px",
                          ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                          "22px",
                          ";}}",
                          "border:none;border-bottom:4px solid transparent;width:31px;height:31px;border-color:",
                          [Function],
                          ";color:",
                          "#555",
                          ";transition:0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;transition-property:border-color;&:hover,&:focus{background-color:",
                          "#fff",
                          ";border:none;border-bottom:4px solid transparent;border-color:",
                          "#1e8cbe",
                          ";color:",
                          "#1e8cbe",
                          ";box-shadow:none;}",
                          "border-radius:0 3px 3px 0;",
                        ],
                      },
                      "defaultProps": Object {
                        "activeBackgroundColor": "#f7f7f7",
                        "activeBorderColor": "#888",
                        "activeColor": "#000",
                        "backgroundColor": "#f7f7f7",
                        "borderColor": "#ccc",
                        "boxShadowColor": "#ccc",
                        "focusBackgroundColor": "#fff",
                        "focusBorderColor": "#0066cd",
                        "focusColor": "#000",
                        "hoverBackgroundColor": "#fff",
                        "hoverBorderColor": "#888",
                        "hoverColor": "#000",
                        "textColor": "#555",
                        "type": "button",
                      },
                      "displayName": "ModeSwitcher__DesktopButton",
                      "foldedComponentIds": Array [
                        "Button__BaseButton-sc-32rbq-4",
                        "Button-sc-32rbq-3",
                        "Button-sc-32rbq-1",
                        "Button-sc-32rbq-2",
                        "Button-sc-32rbq-0",
                        "ModeSwitcher__SwitcherButton-sc-9lbpr3-0",
                      ],
                      "propTypes": Object {
                        "activeBackgroundColor": [Function],
                        "activeBorderColor": [Function],
                        "activeColor": [Function],
                        "backgroundColor": [Function],
                        "borderColor": [Function],
                        "boxShadowColor": [Function],
                        "focusBackgroundColor": [Function],
                        "focusBorderColor": [Function],
                        "focusColor": [Function],
                        "hoverBackgroundColor": [Function],
                        "hoverBorderColor": [Function],
                        "hoverColor": [Function],
                        "textColor": [Function],
                        "type": [Function],
                      },
                      "render": [Function],
                      "styledComponentId": "ModeSwitcher__DesktopButton-sc-9lbpr3-2",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hoverBackgroundColor="#fff"
                  hoverBorderColor="#888"
                  hoverColor="#000"
                  isActive={false}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <button
                    aria-pressed={false}
                    className="c13"
                    onClick={[Function]}
                    type="button"
                  >
                    <SvgIcon
                      color="currentColor"
                      icon="desktop"
                      size="18px"
                    >
                      <SvgIcon__StyledSvg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-desktop"
                        fill="currentColor"
                        focusable="false"
                        role="img"
                        size="18px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <StyledComponent
                          aria-hidden={true}
                          className="yoast-svg-icon yoast-svg-icon-desktop"
                          fill="currentColor"
                          focusable="false"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                "isStatic": false,
                                "lastClassName": "c14",
                                "rules": Array [
                                  "width:",
                                  [Function],
                                  ";height:",
                                  [Function],
                                  ";flex:none;",
                                ],
                              },
                              "displayName": "SvgIcon__StyledSvg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          role="img"
                          size="18px"
                          viewBox="0 0 1792 1792"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <svg
                            aria-hidden={true}
                            className="yoast-svg-icon yoast-svg-icon-desktop c14"
                            fill="currentColor"
                            focusable="false"
                            role="img"
                            size="18px"
                            viewBox="0 0 1792 1792"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
                            />
                          </svg>
                        </StyledComponent>
                      </SvgIcon__StyledSvg>
                    </SvgIcon>
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Desktop preview
                      </span>
                    </ScreenReaderText>
                  </button>
                </StyledComponent>
              </ModeSwitcher__DesktopButton>
            </div>
          </StyledComponent>
        </ModeSwitcher__Switcher>
      </ModeSwitcher>
      <SnippetEditor__EditSnippetButton
        activeBackgroundColor="#f7f7f7"
        activeBorderColor="#888"
        activeColor="#000"
        aria-expanded={true}
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        focusBackgroundColor="#fff"
        focusBorderColor="#0066cd"
        focusColor="#000"
        hoverBackgroundColor="#fff"
        hoverBorderColor="#888"
        hoverColor="#000"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <StyledComponent
          activeBackgroundColor="#f7f7f7"
          activeBorderColor="#888"
          activeColor="#000"
          aria-expanded={true}
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          focusBackgroundColor="#fff"
          focusBorderColor="#0066cd"
          focusColor="#000"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "SnippetEditor__EditSnippetButton-sc-144bmm3-1",
                "isStatic": false,
                "lastClassName": "c15",
                "rules": Array [
                  "color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";background:",
                  [Function],
                  ";box-shadow:0 1px 0 ",
                  [Function],
                  ";",
                  "&:active{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";box-shadow:inset 0 2px 5px -3px ",
                  "rgba( 0, 0, 0, 0.5 )",
                  ";}",
                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                  [Function],
                  ";color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";box-shadow:0 0 3px ",
                  "rgba( 8, 74, 103, 0.8 )",
                  ";}",
                  "&:hover{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";}",
                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                  "1px",
                  ";border-style:solid;margin:0;padding:",
                  "4px",
                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                  [Function],
                  ";overflow:visible;min-height:",
                  "32px",
                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                  "22px",
                  ";}}",
                  "height:33px;border:1px solid #dbdbdb;box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;",
                  "margin:",
                  [Function],
                  ";fill:",
                  "#555",
                  ";padding-left:8px;& svg{",
                  [Function],
                  ":7px;}",
                ],
              },
              "defaultProps": Object {
                "activeBackgroundColor": "#f7f7f7",
                "activeBorderColor": "#888",
                "activeColor": "#000",
                "backgroundColor": "#f7f7f7",
                "borderColor": "#ccc",
                "boxShadowColor": "#ccc",
                "focusBackgroundColor": "#fff",
                "focusBorderColor": "#0066cd",
                "focusColor": "#000",
                "hoverBackgroundColor": "#fff",
                "hoverBorderColor": "#888",
                "hoverColor": "#000",
                "textColor": "#555",
                "type": "button",
              },
              "displayName": "SnippetEditor__EditSnippetButton",
              "foldedComponentIds": Array [
                "Button__BaseButton-sc-32rbq-4",
                "Button-sc-32rbq-3",
                "Button-sc-32rbq-1",
                "Button-sc-32rbq-2",
                "Button-sc-32rbq-0",
                "SnippetEditor__SnippetEditorButton-sc-144bmm3-0",
              ],
              "propTypes": Object {
                "activeBackgroundColor": [Function],
                "activeBorderColor": [Function],
                "activeColor": [Function],
                "backgroundColor": [Function],
                "borderColor": [Function],
                "boxShadowColor": [Function],
                "focusBackgroundColor": [Function],
                "focusBorderColor": [Function],
                "focusColor": [Function],
                "hoverBackgroundColor": [Function],
                "hoverBorderColor": [Function],
                "hoverColor": [Function],
                "textColor": [Function],
                "type": [Function],
              },
              "render": [Function],
              "styledComponentId": "SnippetEditor__EditSnippetButton-sc-144bmm3-1",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={[Function]}
          hoverBackgroundColor="#fff"
          hoverBorderColor="#888"
          hoverColor="#000"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <button
            aria-expanded={true}
            className="c15"
            onClick={[Function]}
            type="button"
          >
            <SvgIcon
              color="currentColor"
              icon="edit"
              size="16px"
            >
              <SvgIcon__StyledSvg
                aria-hidden={true}
                className="yoast-svg-icon yoast-svg-icon-edit"
                fill="currentColor"
                focusable="false"
                role="img"
                size="16px"
                viewBox="0 0 1792 1792"
                xmlns="http://www.w3.org/2000/svg"
              >
                <StyledComponent
                  aria-hidden={true}
                  className="yoast-svg-icon yoast-svg-icon-edit"
                  fill="currentColor"
                  focusable="false"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                        "isStatic": false,
                        "lastClassName": "c16",
                        "rules": Array [
                          "width:",
                          [Function],
                          ";height:",
                          [Function],
                          ";flex:none;",
                        ],
                      },
                      "displayName": "SvgIcon__StyledSvg",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                      "target": "svg",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  role="img"
                  size="16px"
                  viewBox="0 0 1792 1792"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <svg
                    aria-hidden={true}
                    className="yoast-svg-icon yoast-svg-icon-edit c16"
                    fill="currentColor"
                    focusable="false"
                    role="img"
                    size="16px"
                    viewBox="0 0 1792 1792"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
                    />
                  </svg>
                </StyledComponent>
              </SvgIcon__StyledSvg>
            </SvgIcon>
            Edit snippet
          </button>
        </StyledComponent>
      </SnippetEditor__EditSnippetButton>
      <SnippetEditorFields
        activeField="description"
        containerPadding="0 20px"
        data={
          Object {
            "description": "Test description, %%replacement_variable%%",
            "slug": "test-slug",
            "title": "Test title",
          }
        }
        descriptionEditorFieldPlaceholder="Modify your meta description by editing it right here"
        descriptionLengthProgress={
          Object {
            "actual": 42,
            "max": 156,
            "score": 6,
          }
        }
        hoveredField={null}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        recommendedReplacementVariables={Array []}
        replacementVariables={Array []}
        titleLengthProgress={
          Object {
            "actual": 0,
            "max": 600,
            "score": 1,
          }
        }
      >
        <shared__StyledEditor
          padding="0 20px"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "shared__StyledEditor-lzs0hf-5",
                  "isStatic": false,
                  "lastClassName": "c17",
                  "rules": Array [
                    "padding:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "shared__StyledEditor",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "shared__StyledEditor-lzs0hf-5",
                "target": "section",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            padding="0 20px"
          >
            <section
              className="c17"
            >
              <shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "shared__FormSection-lzs0hf-4",
                        "isStatic": true,
                        "lastClassName": "c18",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "shared__FormSection-lzs0hf-4",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="c18"
                  >
                    <ReplacementVariableEditor
                      content="Test title"
                      editorRef={[Function]}
                      fieldId="snippet-editor-field-title"
                      isActive={false}
                      isHovered={false}
                      label="SEO title"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      recommendedReplacementVariables={Array []}
                      replacementVariables={Array []}
                      withCaret={true}
                    >
                      <shared__SimulatedLabel
                        id="15"
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared__SimulatedLabel-lzs0hf-6",
                                "isStatic": true,
                                "lastClassName": "c19",
                                "rules": Array [
                                  "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                                ],
                              },
                              "displayName": "shared__SimulatedLabel",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "shared__SimulatedLabel-lzs0hf-6",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          id="15"
                          onClick={[Function]}
                        >
                          <div
                            className="c19"
                            id="15"
                            onClick={[Function]}
                          >
                            SEO title
                          </div>
                        </StyledComponent>
                      </shared__SimulatedLabel>
                      <shared__TriggerReplacementVariableSuggestionsButton
                        activeBackgroundColor="#f7f7f7"
                        activeBorderColor="#888"
                        activeColor="#000"
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        focusBackgroundColor="#fff"
                        focusBorderColor="#0066cd"
                        focusColor="#000"
                        hoverBackgroundColor="#fff"
                        hoverBorderColor="#888"
                        hoverColor="#000"
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <StyledComponent
                          activeBackgroundColor="#f7f7f7"
                          activeBorderColor="#888"
                          activeColor="#000"
                          backgroundColor="#f7f7f7"
                          borderColor="#ccc"
                          boxShadowColor="#ccc"
                          focusBackgroundColor="#fff"
                          focusBorderColor="#0066cd"
                          focusColor="#000"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared__TriggerReplacementVariableSuggestionsButton-lzs0hf-7",
                                "isStatic": false,
                                "lastClassName": "c20",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";background:",
                                  [Function],
                                  ";box-shadow:0 1px 0 ",
                                  [Function],
                                  ";",
                                  "&:active{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";box-shadow:inset 0 2px 5px -3px ",
                                  "rgba( 0, 0, 0, 0.5 )",
                                  ";}",
                                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                                  [Function],
                                  ";color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";box-shadow:0 0 3px ",
                                  "rgba( 8, 74, 103, 0.8 )",
                                  ";}",
                                  "&:hover{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";}",
                                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                                  "1px",
                                  ";border-style:solid;margin:0;padding:",
                                  "4px",
                                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                                  [Function],
                                  ";overflow:visible;min-height:",
                                  "32px",
                                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                                  "22px",
                                  ";}}",
                                  "box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;padding-left:8px;height:33px;border:1px solid #dbdbdb;font-size:13px;& svg{",
                                  [Function],
                                  ":7px;fill:",
                                  "#555",
                                  ";}",
                                ],
                              },
                              "defaultProps": Object {
                                "activeBackgroundColor": "#f7f7f7",
                                "activeBorderColor": "#888",
                                "activeColor": "#000",
                                "backgroundColor": "#f7f7f7",
                                "borderColor": "#ccc",
                                "boxShadowColor": "#ccc",
                                "focusBackgroundColor": "#fff",
                                "focusBorderColor": "#0066cd",
                                "focusColor": "#000",
                                "hoverBackgroundColor": "#fff",
                                "hoverBorderColor": "#888",
                                "hoverColor": "#000",
                                "textColor": "#555",
                                "type": "button",
                              },
                              "displayName": "shared__TriggerReplacementVariableSuggestionsButton",
                              "foldedComponentIds": Array [
                                "Button__BaseButton-sc-32rbq-4",
                                "Button-sc-32rbq-3",
                                "Button-sc-32rbq-1",
                                "Button-sc-32rbq-2",
                                "Button-sc-32rbq-0",
                              ],
                              "propTypes": Object {
                                "activeBackgroundColor": [Function],
                                "activeBorderColor": [Function],
                                "activeColor": [Function],
                                "backgroundColor": [Function],
                                "borderColor": [Function],
                                "boxShadowColor": [Function],
                                "focusBackgroundColor": [Function],
                                "focusBorderColor": [Function],
                                "focusColor": [Function],
                                "hoverBackgroundColor": [Function],
                                "hoverBorderColor": [Function],
                                "hoverColor": [Function],
                                "textColor": [Function],
                                "type": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "shared__TriggerReplacementVariableSuggestionsButton-lzs0hf-7",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverBackgroundColor="#fff"
                          hoverBorderColor="#888"
                          hoverColor="#000"
                          onClick={[Function]}
                          textColor="#555"
                          type="button"
                        >
                          <button
                            className="c20"
                            onClick={[Function]}
                            type="button"
                          >
                            <SvgIcon
                              color="currentColor"
                              icon="plus-circle"
                              size="16px"
                            >
                              <SvgIcon__StyledSvg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="16px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <StyledComponent
                                  aria-hidden={true}
                                  className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                  fill="currentColor"
                                  focusable="false"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                        "isStatic": false,
                                        "lastClassName": "c16",
                                        "rules": Array [
                                          "width:",
                                          [Function],
                                          ";height:",
                                          [Function],
                                          ";flex:none;",
                                        ],
                                      },
                                      "displayName": "SvgIcon__StyledSvg",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                      "target": "svg",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  role="img"
                                  size="16px"
                                  viewBox="0 0 1792 1792"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="yoast-svg-icon yoast-svg-icon-plus-circle c16"
                                    fill="currentColor"
                                    focusable="false"
                                    role="img"
                                    size="16px"
                                    viewBox="0 0 1792 1792"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M1344 960v-128q0-26-19-45t-45-19h-256v-256q0-26-19-45t-45-19h-128q-26 0-45 19t-19 45v256h-256q-26 0-45 19t-19 45v128q0 26 19 45t45 19h256v256q0 26 19 45t45 19h128q26 0 45-19t19-45v-256h256q26 0 45-19t19-45zm320-64q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"
                                    />
                                  </svg>
                                </StyledComponent>
                              </SvgIcon__StyledSvg>
                            </SvgIcon>
                            Insert snippet variable
                          </button>
                        </StyledComponent>
                      </shared__TriggerReplacementVariableSuggestionsButton>
                      <shared
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {},
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared-lzs0hf-1",
                                "isStatic": false,
                                "lastClassName": "c21",
                                "rules": Array [
                                  "flex:0 1 100%;border:1px solid ",
                                  [Function],
                                  ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                  [Function],
                                  ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                  ".public-DraftStyleDefault-block{line-height:24px;}",
                                  "&::before{display:block;position:absolute;top:-1px;",
                                  [Function],
                                  ":-25px;width:24px;height:24px;background-image:url( ",
                                  [Function],
                                  " );background-size:25px;content:\\"\\";}",
                                ],
                              },
                              "displayName": "shared",
                              "foldedComponentIds": Array [
                                "shared__InputContainer-lzs0hf-0",
                                "shared__TitleInputContainer-lzs0hf-2",
                              ],
                              "render": [Function],
                              "styledComponentId": "shared-lzs0hf-1",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isActive={false}
                          isHovered={false}
                          onClick={[Function]}
                        >
                          <div
                            className="c21"
                            onClick={[Function]}
                          >
                            <ReplacementVariableEditorStandalone
                              ariaLabelledBy="15"
                              content="Test title"
                              fieldId="snippet-editor-field-title"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              recommendedReplacementVariables={Array []}
                              replacementVariables={Array []}
                            >
                              <div />
                            </ReplacementVariableEditorStandalone>
                          </div>
                        </StyledComponent>
                      </shared>
                    </ReplacementVariableEditor>
                    <ProgressBar
                      aria-hidden="true"
                      backgroundColor="#f7f7f7"
                      borderColor="#ddd"
                      max={600}
                      progressColor="#dc3232"
                      value={0}
                    >
                      <StyledComponent
                        aria-hidden="true"
                        backgroundColor="#f7f7f7"
                        borderColor="#ddd"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ProgressBar-sc-9g9yx6-0",
                              "isStatic": false,
                              "lastClassName": "c26",
                              "rules": Array [
                                "box-sizing:border-box;width:100%;height:8px;display:block;margin-top:8px;appearance:none;background-color:",
                                [Function],
                                ";border:1px solid ",
                                [Function],
                                ";::-webkit-progress-bar{background-color:",
                                [Function],
                                ";}::-webkit-progress-value{background-color:",
                                [Function],
                                ";transition:width 250ms;}::-moz-progress-bar{background-color:",
                                [Function],
                                ";}::-ms-fill{background-color:",
                                [Function],
                                ";border:0;}",
                              ],
                            },
                            "defaultProps": Object {
                              "aria-hidden": "true",
                              "backgroundColor": "#f7f7f7",
                              "borderColor": "#ddd",
                              "max": 1,
                              "progressColor": "#7ad03a",
                              "value": 0,
                            },
                            "displayName": "ProgressBar",
                            "foldedComponentIds": Array [],
                            "propTypes": Object {
                              "aria-hidden": [Function],
                              "backgroundColor": [Function],
                              "borderColor": [Function],
                              "max": [Function],
                              "progressColor": [Function],
                              "value": [Function],
                            },
                            "render": [Function],
                            "styledComponentId": "ProgressBar-sc-9g9yx6-0",
                            "target": "progress",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        max={600}
                        progressColor="#dc3232"
                        value={0}
                      >
                        <progress
                          aria-hidden="true"
                          className="c22"
                          max={600}
                          value={0}
                        />
                      </StyledComponent>
                    </ProgressBar>
                  </div>
                </StyledComponent>
              </shared__FormSection>
              <shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "shared__FormSection-lzs0hf-4",
                        "isStatic": true,
                        "lastClassName": "c18",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "shared__FormSection-lzs0hf-4",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="c18"
                  >
                    <shared__SimulatedLabel
                      id="snippet-editor-field-14-slug"
                      onClick={[Function]}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "shared__SimulatedLabel-lzs0hf-6",
                              "isStatic": true,
                              "lastClassName": "c19",
                              "rules": Array [
                                "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                              ],
                            },
                            "displayName": "shared__SimulatedLabel",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "shared__SimulatedLabel-lzs0hf-6",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        id="snippet-editor-field-14-slug"
                        onClick={[Function]}
                      >
                        <div
                          className="c19"
                          id="snippet-editor-field-14-slug"
                          onClick={[Function]}
                        >
                          Slug
                        </div>
                      </StyledComponent>
                    </shared__SimulatedLabel>
                    <shared
                      isActive={false}
                      isHovered={false}
                      onClick={[Function]}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [
                              Object {},
                            ],
                            "componentStyle": ComponentStyle {
                              "componentId": "shared-lzs0hf-1",
                              "isStatic": false,
                              "lastClassName": "c23",
                              "rules": Array [
                                "flex:0 1 100%;border:1px solid ",
                                [Function],
                                ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                [Function],
                                ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                "&::before{display:block;position:absolute;top:-1px;",
                                [Function],
                                ":-25px;width:24px;height:24px;background-image:url( ",
                                [Function],
                                " );background-size:25px;content:\\"\\";}",
                              ],
                            },
                            "displayName": "shared",
                            "foldedComponentIds": Array [
                              "shared__InputContainer-lzs0hf-0",
                            ],
                            "render": [Function],
                            "styledComponentId": "shared-lzs0hf-1",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <div
                          className="c23"
                          onClick={[Function]}
                        >
                          <SnippetEditorFields__SlugInput
                            aria-labelledby="snippet-editor-field-14-slug"
                            id="snippet-editor-field-slug"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            value="test-slug"
                          >
                            <StyledComponent
                              aria-labelledby="snippet-editor-field-14-slug"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "SnippetEditorFields__SlugInput-sc-1ioqi3y-0",
                                    "isStatic": true,
                                    "lastClassName": "c24",
                                    "rules": Array [
                                      "border:none;width:100%;height:inherit;line-height:inherit;font-family:inherit;font-size:inherit;color:inherit;&:focus{outline:0;}",
                                    ],
                                  },
                                  "displayName": "SnippetEditorFields__SlugInput",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "SnippetEditorFields__SlugInput-sc-1ioqi3y-0",
                                  "target": "input",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={[Function]}
                              id="snippet-editor-field-slug"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              value="test-slug"
                            >
                              <input
                                aria-labelledby="snippet-editor-field-14-slug"
                                className="c24"
                                id="snippet-editor-field-slug"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                value="test-slug"
                              />
                            </StyledComponent>
                          </SnippetEditorFields__SlugInput>
                        </div>
                      </StyledComponent>
                    </shared>
                  </div>
                </StyledComponent>
              </shared__FormSection>
              <shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "shared__FormSection-lzs0hf-4",
                        "isStatic": true,
                        "lastClassName": "c18",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "shared__FormSection-lzs0hf-4",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="c18"
                  >
                    <ReplacementVariableEditor
                      content="Test description, %%replacement_variable%%"
                      editorRef={[Function]}
                      fieldId="snippet-editor-field-description"
                      isActive={true}
                      isHovered={false}
                      label="Meta description"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      placeholder="Modify your meta description by editing it right here"
                      recommendedReplacementVariables={Array []}
                      replacementVariables={Array []}
                      type="description"
                      withCaret={true}
                    >
                      <shared__SimulatedLabel
                        id="16"
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared__SimulatedLabel-lzs0hf-6",
                                "isStatic": true,
                                "lastClassName": "c19",
                                "rules": Array [
                                  "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                                ],
                              },
                              "displayName": "shared__SimulatedLabel",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "shared__SimulatedLabel-lzs0hf-6",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          id="16"
                          onClick={[Function]}
                        >
                          <div
                            className="c19"
                            id="16"
                            onClick={[Function]}
                          >
                            Meta description
                          </div>
                        </StyledComponent>
                      </shared__SimulatedLabel>
                      <shared__TriggerReplacementVariableSuggestionsButton
                        activeBackgroundColor="#f7f7f7"
                        activeBorderColor="#888"
                        activeColor="#000"
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        focusBackgroundColor="#fff"
                        focusBorderColor="#0066cd"
                        focusColor="#000"
                        hoverBackgroundColor="#fff"
                        hoverBorderColor="#888"
                        hoverColor="#000"
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <StyledComponent
                          activeBackgroundColor="#f7f7f7"
                          activeBorderColor="#888"
                          activeColor="#000"
                          backgroundColor="#f7f7f7"
                          borderColor="#ccc"
                          boxShadowColor="#ccc"
                          focusBackgroundColor="#fff"
                          focusBorderColor="#0066cd"
                          focusColor="#000"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared__TriggerReplacementVariableSuggestionsButton-lzs0hf-7",
                                "isStatic": false,
                                "lastClassName": "c20",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";background:",
                                  [Function],
                                  ";box-shadow:0 1px 0 ",
                                  [Function],
                                  ";",
                                  "&:active{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";box-shadow:inset 0 2px 5px -3px ",
                                  "rgba( 0, 0, 0, 0.5 )",
                                  ";}",
                                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                                  [Function],
                                  ";color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";box-shadow:0 0 3px ",
                                  "rgba( 8, 74, 103, 0.8 )",
                                  ";}",
                                  "&:hover{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";}",
                                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                                  "1px",
                                  ";border-style:solid;margin:0;padding:",
                                  "4px",
                                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                                  [Function],
                                  ";overflow:visible;min-height:",
                                  "32px",
                                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                                  "22px",
                                  ";}}",
                                  "box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;padding-left:8px;height:33px;border:1px solid #dbdbdb;font-size:13px;& svg{",
                                  [Function],
                                  ":7px;fill:",
                                  "#555",
                                  ";}",
                                ],
                              },
                              "defaultProps": Object {
                                "activeBackgroundColor": "#f7f7f7",
                                "activeBorderColor": "#888",
                                "activeColor": "#000",
                                "backgroundColor": "#f7f7f7",
                                "borderColor": "#ccc",
                                "boxShadowColor": "#ccc",
                                "focusBackgroundColor": "#fff",
                                "focusBorderColor": "#0066cd",
                                "focusColor": "#000",
                                "hoverBackgroundColor": "#fff",
                                "hoverBorderColor": "#888",
                                "hoverColor": "#000",
                                "textColor": "#555",
                                "type": "button",
                              },
                              "displayName": "shared__TriggerReplacementVariableSuggestionsButton",
                              "foldedComponentIds": Array [
                                "Button__BaseButton-sc-32rbq-4",
                                "Button-sc-32rbq-3",
                                "Button-sc-32rbq-1",
                                "Button-sc-32rbq-2",
                                "Button-sc-32rbq-0",
                              ],
                              "propTypes": Object {
                                "activeBackgroundColor": [Function],
                                "activeBorderColor": [Function],
                                "activeColor": [Function],
                                "backgroundColor": [Function],
                                "borderColor": [Function],
                                "boxShadowColor": [Function],
                                "focusBackgroundColor": [Function],
                                "focusBorderColor": [Function],
                                "focusColor": [Function],
                                "hoverBackgroundColor": [Function],
                                "hoverBorderColor": [Function],
                                "hoverColor": [Function],
                                "textColor": [Function],
                                "type": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "shared__TriggerReplacementVariableSuggestionsButton-lzs0hf-7",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverBackgroundColor="#fff"
                          hoverBorderColor="#888"
                          hoverColor="#000"
                          onClick={[Function]}
                          textColor="#555"
                          type="button"
                        >
                          <button
                            className="c20"
                            onClick={[Function]}
                            type="button"
                          >
                            <SvgIcon
                              color="currentColor"
                              icon="plus-circle"
                              size="16px"
                            >
                              <SvgIcon__StyledSvg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="16px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <StyledComponent
                                  aria-hidden={true}
                                  className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                  fill="currentColor"
                                  focusable="false"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                        "isStatic": false,
                                        "lastClassName": "c16",
                                        "rules": Array [
                                          "width:",
                                          [Function],
                                          ";height:",
                                          [Function],
                                          ";flex:none;",
                                        ],
                                      },
                                      "displayName": "SvgIcon__StyledSvg",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                      "target": "svg",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  role="img"
                                  size="16px"
                                  viewBox="0 0 1792 1792"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="yoast-svg-icon yoast-svg-icon-plus-circle c16"
                                    fill="currentColor"
                                    focusable="false"
                                    role="img"
                                    size="16px"
                                    viewBox="0 0 1792 1792"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M1344 960v-128q0-26-19-45t-45-19h-256v-256q0-26-19-45t-45-19h-128q-26 0-45 19t-19 45v256h-256q-26 0-45 19t-19 45v128q0 26 19 45t45 19h256v256q0 26 19 45t45 19h128q26 0 45-19t19-45v-256h256q26 0 45-19t19-45zm320-64q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"
                                    />
                                  </svg>
                                </StyledComponent>
                              </SvgIcon__StyledSvg>
                            </SvgIcon>
                            Insert snippet variable
                          </button>
                        </StyledComponent>
                      </shared__TriggerReplacementVariableSuggestionsButton>
                      <shared
                        isActive={true}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {},
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared-lzs0hf-1",
                                "isStatic": false,
                                "lastClassName": "c25",
                                "rules": Array [
                                  "flex:0 1 100%;border:1px solid ",
                                  [Function],
                                  ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                  [Function],
                                  ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                  "min-height:72px;padding:2px 6px;line-height:24px;.public-DraftEditorPlaceholder-root{color:",
                                  "#616161",
                                  ";}.public-DraftEditorPlaceholder-hasFocus{color:",
                                  "#616161",
                                  ";}",
                                  "&::before{display:block;position:absolute;top:-1px;",
                                  [Function],
                                  ":-25px;width:24px;height:24px;background-image:url( ",
                                  [Function],
                                  " );background-size:25px;content:\\"\\";}",
                                ],
                              },
                              "displayName": "shared",
                              "foldedComponentIds": Array [
                                "shared__InputContainer-lzs0hf-0",
                                "shared__DescriptionInputContainer-lzs0hf-3",
                              ],
                              "render": [Function],
                              "styledComponentId": "shared-lzs0hf-1",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isActive={true}
                          isHovered={false}
                          onClick={[Function]}
                        >
                          <div
                            className="c25"
                            onClick={[Function]}
                          >
                            <ReplacementVariableEditorStandalone
                              ariaLabelledBy="16"
                              content="Test description, %%replacement_variable%%"
                              fieldId="snippet-editor-field-description"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              placeholder="Modify your meta description by editing it right here"
                              recommendedReplacementVariables={Array []}
                              replacementVariables={Array []}
                            >
                              <div />
                            </ReplacementVariableEditorStandalone>
                          </div>
                        </StyledComponent>
                      </shared>
                    </ReplacementVariableEditor>
                    <ProgressBar
                      aria-hidden="true"
                      backgroundColor="#f7f7f7"
                      borderColor="#ddd"
                      max={156}
                      progressColor="#ee7c1b"
                      value={42}
                    >
                      <StyledComponent
                        aria-hidden="true"
                        backgroundColor="#f7f7f7"
                        borderColor="#ddd"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ProgressBar-sc-9g9yx6-0",
                              "isStatic": false,
                              "lastClassName": "c26",
                              "rules": Array [
                                "box-sizing:border-box;width:100%;height:8px;display:block;margin-top:8px;appearance:none;background-color:",
                                [Function],
                                ";border:1px solid ",
                                [Function],
                                ";::-webkit-progress-bar{background-color:",
                                [Function],
                                ";}::-webkit-progress-value{background-color:",
                                [Function],
                                ";transition:width 250ms;}::-moz-progress-bar{background-color:",
                                [Function],
                                ";}::-ms-fill{background-color:",
                                [Function],
                                ";border:0;}",
                              ],
                            },
                            "defaultProps": Object {
                              "aria-hidden": "true",
                              "backgroundColor": "#f7f7f7",
                              "borderColor": "#ddd",
                              "max": 1,
                              "progressColor": "#7ad03a",
                              "value": 0,
                            },
                            "displayName": "ProgressBar",
                            "foldedComponentIds": Array [],
                            "propTypes": Object {
                              "aria-hidden": [Function],
                              "backgroundColor": [Function],
                              "borderColor": [Function],
                              "max": [Function],
                              "progressColor": [Function],
                              "value": [Function],
                            },
                            "render": [Function],
                            "styledComponentId": "ProgressBar-sc-9g9yx6-0",
                            "target": "progress",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        max={156}
                        progressColor="#ee7c1b"
                        value={42}
                      >
                        <progress
                          aria-hidden="true"
                          className="c26"
                          max={156}
                          value={42}
                        />
                      </StyledComponent>
                    </ProgressBar>
                  </div>
                </StyledComponent>
              </shared__FormSection>
            </section>
          </StyledComponent>
        </shared__StyledEditor>
      </SnippetEditorFields>
      <SnippetEditor__CloseEditorButton
        activeBackgroundColor="#f7f7f7"
        activeBorderColor="#888"
        activeColor="#000"
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        focusBackgroundColor="#fff"
        focusBorderColor="#0066cd"
        focusColor="#000"
        hoverBackgroundColor="#fff"
        hoverBorderColor="#888"
        hoverColor="#000"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <StyledComponent
          activeBackgroundColor="#f7f7f7"
          activeBorderColor="#888"
          activeColor="#000"
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          focusBackgroundColor="#fff"
          focusBorderColor="#0066cd"
          focusColor="#000"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "SnippetEditor__CloseEditorButton-sc-144bmm3-2",
                "isStatic": false,
                "lastClassName": "c27",
                "rules": Array [
                  "color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";background:",
                  [Function],
                  ";box-shadow:0 1px 0 ",
                  [Function],
                  ";",
                  "&:active{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";box-shadow:inset 0 2px 5px -3px ",
                  "rgba( 0, 0, 0, 0.5 )",
                  ";}",
                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                  [Function],
                  ";color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";box-shadow:0 0 3px ",
                  "rgba( 8, 74, 103, 0.8 )",
                  ";}",
                  "&:hover{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";}",
                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                  "1px",
                  ";border-style:solid;margin:0;padding:",
                  "4px",
                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                  [Function],
                  ";overflow:visible;min-height:",
                  "32px",
                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                  "22px",
                  ";}}",
                  "height:33px;border:1px solid #dbdbdb;box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;",
                  "margin-top:24px;",
                ],
              },
              "defaultProps": Object {
                "activeBackgroundColor": "#f7f7f7",
                "activeBorderColor": "#888",
                "activeColor": "#000",
                "backgroundColor": "#f7f7f7",
                "borderColor": "#ccc",
                "boxShadowColor": "#ccc",
                "focusBackgroundColor": "#fff",
                "focusBorderColor": "#0066cd",
                "focusColor": "#000",
                "hoverBackgroundColor": "#fff",
                "hoverBorderColor": "#888",
                "hoverColor": "#000",
                "textColor": "#555",
                "type": "button",
              },
              "displayName": "SnippetEditor__CloseEditorButton",
              "foldedComponentIds": Array [
                "Button__BaseButton-sc-32rbq-4",
                "Button-sc-32rbq-3",
                "Button-sc-32rbq-1",
                "Button-sc-32rbq-2",
                "Button-sc-32rbq-0",
                "SnippetEditor__SnippetEditorButton-sc-144bmm3-0",
              ],
              "propTypes": Object {
                "activeBackgroundColor": [Function],
                "activeBorderColor": [Function],
                "activeColor": [Function],
                "backgroundColor": [Function],
                "borderColor": [Function],
                "boxShadowColor": [Function],
                "focusBackgroundColor": [Function],
                "focusBorderColor": [Function],
                "focusColor": [Function],
                "hoverBackgroundColor": [Function],
                "hoverBorderColor": [Function],
                "hoverColor": [Function],
                "textColor": [Function],
                "type": [Function],
              },
              "render": [Function],
              "styledComponentId": "SnippetEditor__CloseEditorButton-sc-144bmm3-2",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          hoverBackgroundColor="#fff"
          hoverBorderColor="#888"
          hoverColor="#000"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <button
            className="c27"
            onClick={[Function]}
            type="button"
          >
            Close snippet editor
          </button>
        </StyledComponent>
      </SnippetEditor__CloseEditorButton>
    </div>
  </ErrorBoundary>
</SnippetEditor>
`;

exports[`SnippetEditor highlights the hovered field when onMouseEnter() is called 1`] = `
.c22 {
  box-sizing: border-box;
  width: 100%;
  height: 8px;
  display: block;
  margin-top: 8px;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background-color: #f7f7f7;
  border: 1px solid #ddd;
}

.c22::-webkit-progress-bar {
  background-color: #f7f7f7;
}

.c22::-webkit-progress-value {
  background-color: #dc3232;
  -webkit-transition: width 250ms;
  transition: width 250ms;
}

.c22::-moz-progress-bar {
  background-color: #dc3232;
}

.c22::-ms-fill {
  background-color: #dc3232;
  border: 0;
}

.c26 {
  box-sizing: border-box;
  width: 100%;
  height: 8px;
  display: block;
  margin-top: 8px;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background-color: #f7f7f7;
  border: 1px solid #ddd;
}

.c26::-webkit-progress-bar {
  background-color: #f7f7f7;
}

.c26::-webkit-progress-value {
  background-color: #ee7c1b;
  -webkit-transition: width 250ms;
  transition: width 250ms;
}

.c26::-moz-progress-bar {
  background-color: #ee7c1b;
}

.c26::-ms-fill {
  background-color: #ee7c1b;
  border: 0;
}

.c18 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  margin: 24px 0 0 0;
}

.c17 {
  padding: 0 20px;
}

.c19 {
  -webkit-flex: 1 1 200px;
  -ms-flex: 1 1 200px;
  flex: 1 1 200px;
  min-width: 200px;
  cursor: pointer;
  font-size: 16px;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin: 4px 0;
}

.c20 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  padding-left: 8px;
  height: 33px;
  border: 1px solid #dbdbdb;
  font-size: 13px;
}

.c20:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c20::-moz-focus-inner {
  border-width: 0;
}

.c20:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c20:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c20 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c20 svg {
  margin-right: 7px;
  fill: #555;
}

.c0 {
  border-bottom: 1px hidden #fff;
  border-radius: 2px;
  box-shadow: 0 1px 2px rgba(0,0,0,.2);
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  max-width: 600px;
  box-sizing: border-box;
  font-size: 14px;
}

.c2 {
  cursor: pointer;
  position: relative;
}

.c3 {
  color: #1e0fbe;
  -webkit-text-decoration: none;
  text-decoration: none;
  font-size: 18px;
  line-height: 1.2;
  font-weight: normal;
  margin: 0;
  display: inline-block;
  overflow: hidden;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c4 {
  display: inline-block;
  font-size: 16px;
  line-height: 1.2em;
  max-height: 2.4em;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c5 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  white-space: nowrap;
  font-size: 14px;
}

.c6 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  white-space: nowrap;
  font-size: 14px;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 100%;
}

.c9 {
  color: #545454;
  cursor: pointer;
  position: relative;
  max-width: 600px;
  font-size: 13px;
  font-size: 14px;
  line-height: 20px;
}

.c1 {
  padding: 8px 16px;
}

.c7 {
  border: 0;
  border-bottom: 1px solid #DFE1E5;
  margin: 0;
}

.c24 {
  border: none;
  width: 100%;
  height: inherit;
  line-height: inherit;
  font-family: inherit;
  font-size: inherit;
  color: inherit;
}

.c24:focus {
  outline: 0;
}

.c21 {
  -webkit-flex: 0 1 100%;
  -ms-flex: 0 1 100%;
  flex: 0 1 100%;
  border: 1px solid #ddd;
  padding: 3px 5px;
  box-sizing: border-box;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  cursor: text;
}

.c21 .public-DraftStyleDefault-block {
  line-height: 24px;
}

.c21::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width%3D%221792%22%20height%3D%221792%22%20viewBox%3D%220%200%201792%201792%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20fill%3D%22transparent%22%20d%3D%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20%2F%3E%3C%2Fsvg%3E );
  background-size: 25px;
  content: "";
}

.c23 {
  -webkit-flex: 0 1 100%;
  -ms-flex: 0 1 100%;
  flex: 0 1 100%;
  border: 1px solid #ddd;
  padding: 3px 5px;
  box-sizing: border-box;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  cursor: text;
}

.c23::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width%3D%221792%22%20height%3D%221792%22%20viewBox%3D%220%200%201792%201792%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20fill%3D%22transparent%22%20d%3D%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20%2F%3E%3C%2Fsvg%3E );
  background-size: 25px;
  content: "";
}

.c25 {
  -webkit-flex: 0 1 100%;
  -ms-flex: 0 1 100%;
  flex: 0 1 100%;
  border: 1px solid #ddd;
  padding: 3px 5px;
  box-sizing: border-box;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  cursor: text;
  min-height: 72px;
  padding: 2px 6px;
  line-height: 24px;
}

.c25 .public-DraftEditorPlaceholder-root {
  color: #616161;
}

.c25 .public-DraftEditorPlaceholder-hasFocus {
  color: #616161;
}

.c25::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width%3D%221792%22%20height%3D%221792%22%20viewBox%3D%220%200%201792%201792%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20fill%3D%22%23ccc%22%20d%3D%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20%2F%3E%3C%2Fsvg%3E );
  background-size: 25px;
  content: "";
}

.c11 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: #555;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 3px 0 0 3px;
}

.c11:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c11::-moz-focus-inner {
  border-width: 0;
}

.c11:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c11:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c11 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c11:hover,
.c11:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
  box-shadow: none;
}

.c13 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: transparent;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 0 3px 3px 0;
}

.c13:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c13::-moz-focus-inner {
  border-width: 0;
}

.c13:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c13:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c13 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c13:hover,
.c13:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
  box-shadow: none;
}

.c10 {
  display: inline-block;
  margin-top: 10px;
  border: 1px solid #dbdbdb;
  border-radius: 4px;
  background-color: #f7f7f7;
  vertical-align: top;
}

.c15 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin: 10px 0 0 4px;
  fill: #555;
  padding-left: 8px;
}

.c15:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c15::-moz-focus-inner {
  border-width: 0;
}

.c15:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c15:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c15 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c15 svg {
  margin-right: 7px;
}

.c27 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin-top: 24px;
}

.c27:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c27::-moz-focus-inner {
  border-width: 0;
}

.c27:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c27:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c27 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c12 {
  width: 22px;
  height: 22px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c14 {
  width: 18px;
  height: 18px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c16 {
  width: 16px;
  height: 16px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c8 {
  color: #545454;
  cursor: pointer;
  position: relative;
  max-width: 600px;
  font-size: 13px;
  font-size: 14px;
  line-height: 20px;
}

.c8::before {
  display: block;
  position: absolute;
  top: -3px;
  left: -40px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width%3D%221792%22%20height%3D%221792%22%20viewBox%3D%220%200%201792%201792%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20fill%3D%22%23ccc%22%20d%3D%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20%2F%3E%3C%2Fsvg%3E );
  background-size: 25px;
  content: "";
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c20::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c11::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c13::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c15::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c27::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

<SnippetEditor
  baseUrl="http://example.org/"
  data={
    Object {
      "description": "Test description, %%replacement_variable%%",
      "slug": "test-slug",
      "title": "Test title",
    }
  }
  date=""
  descriptionEditorFieldPlaceholder=""
  descriptionLengthProgress={
    Object {
      "actual": 0,
      "max": 156,
      "score": 0,
    }
  }
  hasPaperStyle={true}
  locale="en"
  mapEditorDataToPreview={null}
  mode="mobile"
  onChange={[MockFunction]}
  onChangeAnalysisData={[Function]}
  recommendedReplacementVariables={Array []}
  replacementVariables={Array []}
  showCloseButton={true}
  titleLengthProgress={
    Object {
      "actual": 0,
      "max": 600,
      "score": 0,
    }
  }
  wordsToHighlight={Array []}
>
  <ErrorBoundary>
    <div>
      <SnippetPreview
        activeField={null}
        breadcrumbs={null}
        date=""
        description="Test description, %%replacement_variable%%"
        hoveredField="description"
        isAmp={false}
        keyword=""
        locale="en"
        mode="mobile"
        onHover={[Function]}
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        title="Test title"
        url="example.org/test-slug"
        wordsToHighlight={Array []}
      >
        <section>
          <SnippetPreview__MobileContainer
            padding={20}
            width={640}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "SnippetPreview__MobileContainer-sc-1hxg8jo-1",
                    "isStatic": true,
                    "lastClassName": "c0",
                    "rules": Array [
                      "border-bottom:1px hidden #fff;border-radius:2px;box-shadow:0 1px 2px rgba(0,0,0,.2);font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;max-width:",
                      "600",
                      "px;box-sizing:border-box;font-size:14px;",
                    ],
                  },
                  "displayName": "SnippetPreview__MobileContainer",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "SnippetPreview__MobileContainer-sc-1hxg8jo-1",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              padding={20}
              width={640}
            >
              <div
                className="c0"
                width={640}
              >
                <SnippetPreview__MobilePartContainer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__MobilePartContainer-sc-1hxg8jo-12",
                          "isStatic": true,
                          "lastClassName": "c1",
                          "rules": Array [
                            "padding:8px 16px;",
                          ],
                        },
                        "displayName": "SnippetPreview__MobilePartContainer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__MobilePartContainer-sc-1hxg8jo-12",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="c1"
                    >
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          SEO title preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__BaseTitle
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__BaseTitle-sc-1hxg8jo-2",
                                "isStatic": true,
                                "lastClassName": "c2",
                                "rules": Array [
                                  "cursor:pointer;position:relative;",
                                ],
                              },
                              "displayName": "SnippetPreview__BaseTitle",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__BaseTitle-sc-1hxg8jo-2",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                        >
                          <div
                            className="c2"
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                          >
                            <SnippetPreview__TitleBounded>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__TitleBounded-sc-1hxg8jo-5",
                                      "isStatic": true,
                                      "lastClassName": "c3",
                                      "rules": Array [
                                        "color:",
                                        "#1e0fbe",
                                        ";text-decoration:none;font-size:18px;line-height:1.2;font-weight:normal;margin:0;display:inline-block;overflow:hidden;max-width:",
                                        "600",
                                        "px;vertical-align:top;text-overflow:ellipsis;",
                                        "max-width:",
                                        "600",
                                        "px;vertical-align:top;text-overflow:ellipsis;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__TitleBounded",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__Title-sc-1hxg8jo-4",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__TitleBounded-sc-1hxg8jo-5",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="c3"
                                >
                                  <SnippetPreview__TitleUnboundedMobile>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "SnippetPreview__TitleUnboundedMobile-sc-1hxg8jo-7",
                                            "isStatic": true,
                                            "lastClassName": "c4",
                                            "rules": Array [
                                              "display:inline-block;font-size:16px;line-height:1.2em;max-height:2.4em;overflow:hidden;text-overflow:ellipsis;",
                                            ],
                                          },
                                          "displayName": "SnippetPreview__TitleUnboundedMobile",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "SnippetPreview__TitleUnboundedMobile-sc-1hxg8jo-7",
                                          "target": "span",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={[Function]}
                                    >
                                      <span
                                        className="c4"
                                      >
                                        Test title
                                      </span>
                                    </StyledComponent>
                                  </SnippetPreview__TitleUnboundedMobile>
                                </div>
                              </StyledComponent>
                            </SnippetPreview__TitleBounded>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__BaseTitle>
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          Url preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__BaseUrl>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__BaseUrl-sc-1hxg8jo-8",
                                "isStatic": true,
                                "lastClassName": "c5",
                                "rules": Array [
                                  "display:inline-block;color:",
                                  "#006621",
                                  ";cursor:pointer;position:relative;max-width:90%;white-space:nowrap;font-size:14px;",
                                ],
                              },
                              "displayName": "SnippetPreview__BaseUrl",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__BaseUrl-sc-1hxg8jo-8",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <div
                            className="c5"
                          >
                            <SnippetPreview__BaseUrlOverflowContainer
                              onMouseEnter={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__BaseUrlOverflowContainer-sc-1hxg8jo-9",
                                      "isStatic": true,
                                      "lastClassName": "c6",
                                      "rules": Array [
                                        "display:inline-block;color:",
                                        "#006621",
                                        ";cursor:pointer;position:relative;max-width:90%;white-space:nowrap;font-size:14px;",
                                        "overflow:hidden;text-overflow:ellipsis;max-width:100%;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__BaseUrlOverflowContainer",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__BaseUrl-sc-1hxg8jo-8",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__BaseUrlOverflowContainer-sc-1hxg8jo-9",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                onMouseEnter={[Function]}
                                onMouseLeave={[Function]}
                                onMouseUp={[Function]}
                              >
                                <div
                                  className="c6"
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseUp={[Function]}
                                >
                                  example.org â€º test-slug
                                </div>
                              </StyledComponent>
                            </SnippetPreview__BaseUrlOverflowContainer>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__BaseUrl>
                    </div>
                  </StyledComponent>
                </SnippetPreview__MobilePartContainer>
                <SnippetPreview__Separator>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__Separator-sc-1hxg8jo-16",
                          "isStatic": true,
                          "lastClassName": "c7",
                          "rules": Array [
                            "border:0;border-bottom:1px solid #DFE1E5;margin:0;",
                          ],
                        },
                        "displayName": "SnippetPreview__Separator",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__Separator-sc-1hxg8jo-16",
                        "target": "hr",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <hr
                      className="c7"
                    />
                  </StyledComponent>
                </SnippetPreview__Separator>
                <SnippetPreview__MobilePartContainer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__MobilePartContainer-sc-1hxg8jo-12",
                          "isStatic": true,
                          "lastClassName": "c1",
                          "rules": Array [
                            "padding:8px 16px;",
                          ],
                        },
                        "displayName": "SnippetPreview__MobilePartContainer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__MobilePartContainer-sc-1hxg8jo-12",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="c1"
                    >
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          Meta description preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview
                        isDescriptionPlaceholder={false}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview-sc-1hxg8jo-3",
                                "isStatic": false,
                                "lastClassName": "c8",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";cursor:pointer;position:relative;max-width:",
                                  "600",
                                  "px;font-size:13px;",
                                  "font-size:14px;line-height:20px;",
                                  "&::before{display:block;position:absolute;top:-3px;",
                                  [Function],
                                  ":",
                                  [Function],
                                  ";width:24px;height:24px;background-image:url( ",
                                  [Function],
                                  " );background-size:25px;content:\\"\\";}",
                                ],
                              },
                              "displayName": "SnippetPreview",
                              "foldedComponentIds": Array [
                                "SnippetPreview__DesktopDescription-sc-1hxg8jo-10",
                                "SnippetPreview__MobileDescription-sc-1hxg8jo-11",
                              ],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview-sc-1hxg8jo-3",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isDescriptionPlaceholder={false}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                        >
                          <div
                            className="c8"
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                          >
                            <SnippetPreview__MobileDescription
                              isDescriptionPlaceholder={false}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__MobileDescription-sc-1hxg8jo-11",
                                      "isStatic": false,
                                      "lastClassName": "c9",
                                      "rules": Array [
                                        "color:",
                                        [Function],
                                        ";cursor:pointer;position:relative;max-width:",
                                        "600",
                                        "px;font-size:13px;",
                                        "font-size:14px;line-height:20px;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__MobileDescription",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__DesktopDescription-sc-1hxg8jo-10",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__MobileDescription-sc-1hxg8jo-11",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={[Function]}
                                isDescriptionPlaceholder={false}
                              >
                                <div
                                  className="c9"
                                >
                                  Test description, %%replacement_variable%%
                                </div>
                              </StyledComponent>
                            </SnippetPreview__MobileDescription>
                          </div>
                        </StyledComponent>
                      </SnippetPreview>
                    </div>
                  </StyledComponent>
                </SnippetPreview__MobilePartContainer>
              </div>
            </StyledComponent>
          </SnippetPreview__MobileContainer>
        </section>
      </SnippetPreview>
      <ModeSwitcher
        active="mobile"
        onChange={[Function]}
      >
        <ModeSwitcher__Switcher>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "ModeSwitcher__Switcher-sc-9lbpr3-3",
                  "isStatic": true,
                  "lastClassName": "c10",
                  "rules": Array [
                    "display:inline-block;margin-top:10px;border:1px solid #dbdbdb;border-radius:4px;background-color:#f7f7f7;vertical-align:top;",
                  ],
                },
                "displayName": "ModeSwitcher__Switcher",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModeSwitcher__Switcher-sc-9lbpr3-3",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="c10"
            >
              <ModeSwitcher__MobileButton
                activeBackgroundColor="#f7f7f7"
                activeBorderColor="#888"
                activeColor="#000"
                aria-pressed={true}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                focusBackgroundColor="#fff"
                focusBorderColor="#0066cd"
                focusColor="#000"
                hoverBackgroundColor="#fff"
                hoverBorderColor="#888"
                hoverColor="#000"
                isActive={true}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <StyledComponent
                  activeBackgroundColor="#f7f7f7"
                  activeBorderColor="#888"
                  activeColor="#000"
                  aria-pressed={true}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  focusBackgroundColor="#fff"
                  focusBorderColor="#0066cd"
                  focusColor="#000"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "ModeSwitcher__MobileButton-sc-9lbpr3-1",
                        "isStatic": false,
                        "lastClassName": "c11",
                        "rules": Array [
                          "color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";box-shadow:0 1px 0 ",
                          [Function],
                          ";",
                          "&:active{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";box-shadow:inset 0 2px 5px -3px ",
                          "rgba( 0, 0, 0, 0.5 )",
                          ";}",
                          "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                          [Function],
                          ";color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";box-shadow:0 0 3px ",
                          "rgba( 8, 74, 103, 0.8 )",
                          ";}",
                          "&:hover{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";}",
                          "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                          "1px",
                          ";border-style:solid;margin:0;padding:",
                          "4px",
                          " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                          [Function],
                          ";overflow:visible;min-height:",
                          "32px",
                          ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                          "22px",
                          ";}}",
                          "border:none;border-bottom:4px solid transparent;width:31px;height:31px;border-color:",
                          [Function],
                          ";color:",
                          "#555",
                          ";transition:0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;transition-property:border-color;&:hover,&:focus{background-color:",
                          "#fff",
                          ";border:none;border-bottom:4px solid transparent;border-color:",
                          "#1e8cbe",
                          ";color:",
                          "#1e8cbe",
                          ";box-shadow:none;}",
                          "border-radius:3px 0 0 3px;",
                        ],
                      },
                      "defaultProps": Object {
                        "activeBackgroundColor": "#f7f7f7",
                        "activeBorderColor": "#888",
                        "activeColor": "#000",
                        "backgroundColor": "#f7f7f7",
                        "borderColor": "#ccc",
                        "boxShadowColor": "#ccc",
                        "focusBackgroundColor": "#fff",
                        "focusBorderColor": "#0066cd",
                        "focusColor": "#000",
                        "hoverBackgroundColor": "#fff",
                        "hoverBorderColor": "#888",
                        "hoverColor": "#000",
                        "textColor": "#555",
                        "type": "button",
                      },
                      "displayName": "ModeSwitcher__MobileButton",
                      "foldedComponentIds": Array [
                        "Button__BaseButton-sc-32rbq-4",
                        "Button-sc-32rbq-3",
                        "Button-sc-32rbq-1",
                        "Button-sc-32rbq-2",
                        "Button-sc-32rbq-0",
                        "ModeSwitcher__SwitcherButton-sc-9lbpr3-0",
                      ],
                      "propTypes": Object {
                        "activeBackgroundColor": [Function],
                        "activeBorderColor": [Function],
                        "activeColor": [Function],
                        "backgroundColor": [Function],
                        "borderColor": [Function],
                        "boxShadowColor": [Function],
                        "focusBackgroundColor": [Function],
                        "focusBorderColor": [Function],
                        "focusColor": [Function],
                        "hoverBackgroundColor": [Function],
                        "hoverBorderColor": [Function],
                        "hoverColor": [Function],
                        "textColor": [Function],
                        "type": [Function],
                      },
                      "render": [Function],
                      "styledComponentId": "ModeSwitcher__MobileButton-sc-9lbpr3-1",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hoverBackgroundColor="#fff"
                  hoverBorderColor="#888"
                  hoverColor="#000"
                  isActive={true}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <button
                    aria-pressed={true}
                    className="c11"
                    onClick={[Function]}
                    type="button"
                  >
                    <SvgIcon
                      color="currentColor"
                      icon="mobile"
                      size="22px"
                    >
                      <SvgIcon__StyledSvg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-mobile"
                        fill="currentColor"
                        focusable="false"
                        role="img"
                        size="22px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <StyledComponent
                          aria-hidden={true}
                          className="yoast-svg-icon yoast-svg-icon-mobile"
                          fill="currentColor"
                          focusable="false"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                "isStatic": false,
                                "lastClassName": "c12",
                                "rules": Array [
                                  "width:",
                                  [Function],
                                  ";height:",
                                  [Function],
                                  ";flex:none;",
                                ],
                              },
                              "displayName": "SvgIcon__StyledSvg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          role="img"
                          size="22px"
                          viewBox="0 0 1792 1792"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <svg
                            aria-hidden={true}
                            className="yoast-svg-icon yoast-svg-icon-mobile c12"
                            fill="currentColor"
                            focusable="false"
                            role="img"
                            size="22px"
                            viewBox="0 0 1792 1792"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
                            />
                          </svg>
                        </StyledComponent>
                      </SvgIcon__StyledSvg>
                    </SvgIcon>
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Mobile preview
                      </span>
                    </ScreenReaderText>
                  </button>
                </StyledComponent>
              </ModeSwitcher__MobileButton>
              <ModeSwitcher__DesktopButton
                activeBackgroundColor="#f7f7f7"
                activeBorderColor="#888"
                activeColor="#000"
                aria-pressed={false}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                focusBackgroundColor="#fff"
                focusBorderColor="#0066cd"
                focusColor="#000"
                hoverBackgroundColor="#fff"
                hoverBorderColor="#888"
                hoverColor="#000"
                isActive={false}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <StyledComponent
                  activeBackgroundColor="#f7f7f7"
                  activeBorderColor="#888"
                  activeColor="#000"
                  aria-pressed={false}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  focusBackgroundColor="#fff"
                  focusBorderColor="#0066cd"
                  focusColor="#000"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "ModeSwitcher__DesktopButton-sc-9lbpr3-2",
                        "isStatic": false,
                        "lastClassName": "c13",
                        "rules": Array [
                          "color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";box-shadow:0 1px 0 ",
                          [Function],
                          ";",
                          "&:active{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";box-shadow:inset 0 2px 5px -3px ",
                          "rgba( 0, 0, 0, 0.5 )",
                          ";}",
                          "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                          [Function],
                          ";color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";box-shadow:0 0 3px ",
                          "rgba( 8, 74, 103, 0.8 )",
                          ";}",
                          "&:hover{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";}",
                          "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                          "1px",
                          ";border-style:solid;margin:0;padding:",
                          "4px",
                          " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                          [Function],
                          ";overflow:visible;min-height:",
                          "32px",
                          ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                          "22px",
                          ";}}",
                          "border:none;border-bottom:4px solid transparent;width:31px;height:31px;border-color:",
                          [Function],
                          ";color:",
                          "#555",
                          ";transition:0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;transition-property:border-color;&:hover,&:focus{background-color:",
                          "#fff",
                          ";border:none;border-bottom:4px solid transparent;border-color:",
                          "#1e8cbe",
                          ";color:",
                          "#1e8cbe",
                          ";box-shadow:none;}",
                          "border-radius:0 3px 3px 0;",
                        ],
                      },
                      "defaultProps": Object {
                        "activeBackgroundColor": "#f7f7f7",
                        "activeBorderColor": "#888",
                        "activeColor": "#000",
                        "backgroundColor": "#f7f7f7",
                        "borderColor": "#ccc",
                        "boxShadowColor": "#ccc",
                        "focusBackgroundColor": "#fff",
                        "focusBorderColor": "#0066cd",
                        "focusColor": "#000",
                        "hoverBackgroundColor": "#fff",
                        "hoverBorderColor": "#888",
                        "hoverColor": "#000",
                        "textColor": "#555",
                        "type": "button",
                      },
                      "displayName": "ModeSwitcher__DesktopButton",
                      "foldedComponentIds": Array [
                        "Button__BaseButton-sc-32rbq-4",
                        "Button-sc-32rbq-3",
                        "Button-sc-32rbq-1",
                        "Button-sc-32rbq-2",
                        "Button-sc-32rbq-0",
                        "ModeSwitcher__SwitcherButton-sc-9lbpr3-0",
                      ],
                      "propTypes": Object {
                        "activeBackgroundColor": [Function],
                        "activeBorderColor": [Function],
                        "activeColor": [Function],
                        "backgroundColor": [Function],
                        "borderColor": [Function],
                        "boxShadowColor": [Function],
                        "focusBackgroundColor": [Function],
                        "focusBorderColor": [Function],
                        "focusColor": [Function],
                        "hoverBackgroundColor": [Function],
                        "hoverBorderColor": [Function],
                        "hoverColor": [Function],
                        "textColor": [Function],
                        "type": [Function],
                      },
                      "render": [Function],
                      "styledComponentId": "ModeSwitcher__DesktopButton-sc-9lbpr3-2",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hoverBackgroundColor="#fff"
                  hoverBorderColor="#888"
                  hoverColor="#000"
                  isActive={false}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <button
                    aria-pressed={false}
                    className="c13"
                    onClick={[Function]}
                    type="button"
                  >
                    <SvgIcon
                      color="currentColor"
                      icon="desktop"
                      size="18px"
                    >
                      <SvgIcon__StyledSvg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-desktop"
                        fill="currentColor"
                        focusable="false"
                        role="img"
                        size="18px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <StyledComponent
                          aria-hidden={true}
                          className="yoast-svg-icon yoast-svg-icon-desktop"
                          fill="currentColor"
                          focusable="false"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                "isStatic": false,
                                "lastClassName": "c14",
                                "rules": Array [
                                  "width:",
                                  [Function],
                                  ";height:",
                                  [Function],
                                  ";flex:none;",
                                ],
                              },
                              "displayName": "SvgIcon__StyledSvg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          role="img"
                          size="18px"
                          viewBox="0 0 1792 1792"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <svg
                            aria-hidden={true}
                            className="yoast-svg-icon yoast-svg-icon-desktop c14"
                            fill="currentColor"
                            focusable="false"
                            role="img"
                            size="18px"
                            viewBox="0 0 1792 1792"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
                            />
                          </svg>
                        </StyledComponent>
                      </SvgIcon__StyledSvg>
                    </SvgIcon>
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Desktop preview
                      </span>
                    </ScreenReaderText>
                  </button>
                </StyledComponent>
              </ModeSwitcher__DesktopButton>
            </div>
          </StyledComponent>
        </ModeSwitcher__Switcher>
      </ModeSwitcher>
      <SnippetEditor__EditSnippetButton
        activeBackgroundColor="#f7f7f7"
        activeBorderColor="#888"
        activeColor="#000"
        aria-expanded={true}
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        focusBackgroundColor="#fff"
        focusBorderColor="#0066cd"
        focusColor="#000"
        hoverBackgroundColor="#fff"
        hoverBorderColor="#888"
        hoverColor="#000"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <StyledComponent
          activeBackgroundColor="#f7f7f7"
          activeBorderColor="#888"
          activeColor="#000"
          aria-expanded={true}
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          focusBackgroundColor="#fff"
          focusBorderColor="#0066cd"
          focusColor="#000"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "SnippetEditor__EditSnippetButton-sc-144bmm3-1",
                "isStatic": false,
                "lastClassName": "c15",
                "rules": Array [
                  "color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";background:",
                  [Function],
                  ";box-shadow:0 1px 0 ",
                  [Function],
                  ";",
                  "&:active{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";box-shadow:inset 0 2px 5px -3px ",
                  "rgba( 0, 0, 0, 0.5 )",
                  ";}",
                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                  [Function],
                  ";color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";box-shadow:0 0 3px ",
                  "rgba( 8, 74, 103, 0.8 )",
                  ";}",
                  "&:hover{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";}",
                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                  "1px",
                  ";border-style:solid;margin:0;padding:",
                  "4px",
                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                  [Function],
                  ";overflow:visible;min-height:",
                  "32px",
                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                  "22px",
                  ";}}",
                  "height:33px;border:1px solid #dbdbdb;box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;",
                  "margin:",
                  [Function],
                  ";fill:",
                  "#555",
                  ";padding-left:8px;& svg{",
                  [Function],
                  ":7px;}",
                ],
              },
              "defaultProps": Object {
                "activeBackgroundColor": "#f7f7f7",
                "activeBorderColor": "#888",
                "activeColor": "#000",
                "backgroundColor": "#f7f7f7",
                "borderColor": "#ccc",
                "boxShadowColor": "#ccc",
                "focusBackgroundColor": "#fff",
                "focusBorderColor": "#0066cd",
                "focusColor": "#000",
                "hoverBackgroundColor": "#fff",
                "hoverBorderColor": "#888",
                "hoverColor": "#000",
                "textColor": "#555",
                "type": "button",
              },
              "displayName": "SnippetEditor__EditSnippetButton",
              "foldedComponentIds": Array [
                "Button__BaseButton-sc-32rbq-4",
                "Button-sc-32rbq-3",
                "Button-sc-32rbq-1",
                "Button-sc-32rbq-2",
                "Button-sc-32rbq-0",
                "SnippetEditor__SnippetEditorButton-sc-144bmm3-0",
              ],
              "propTypes": Object {
                "activeBackgroundColor": [Function],
                "activeBorderColor": [Function],
                "activeColor": [Function],
                "backgroundColor": [Function],
                "borderColor": [Function],
                "boxShadowColor": [Function],
                "focusBackgroundColor": [Function],
                "focusBorderColor": [Function],
                "focusColor": [Function],
                "hoverBackgroundColor": [Function],
                "hoverBorderColor": [Function],
                "hoverColor": [Function],
                "textColor": [Function],
                "type": [Function],
              },
              "render": [Function],
              "styledComponentId": "SnippetEditor__EditSnippetButton-sc-144bmm3-1",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={[Function]}
          hoverBackgroundColor="#fff"
          hoverBorderColor="#888"
          hoverColor="#000"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <button
            aria-expanded={true}
            className="c15"
            onClick={[Function]}
            type="button"
          >
            <SvgIcon
              color="currentColor"
              icon="edit"
              size="16px"
            >
              <SvgIcon__StyledSvg
                aria-hidden={true}
                className="yoast-svg-icon yoast-svg-icon-edit"
                fill="currentColor"
                focusable="false"
                role="img"
                size="16px"
                viewBox="0 0 1792 1792"
                xmlns="http://www.w3.org/2000/svg"
              >
                <StyledComponent
                  aria-hidden={true}
                  className="yoast-svg-icon yoast-svg-icon-edit"
                  fill="currentColor"
                  focusable="false"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                        "isStatic": false,
                        "lastClassName": "c16",
                        "rules": Array [
                          "width:",
                          [Function],
                          ";height:",
                          [Function],
                          ";flex:none;",
                        ],
                      },
                      "displayName": "SvgIcon__StyledSvg",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                      "target": "svg",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  role="img"
                  size="16px"
                  viewBox="0 0 1792 1792"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <svg
                    aria-hidden={true}
                    className="yoast-svg-icon yoast-svg-icon-edit c16"
                    fill="currentColor"
                    focusable="false"
                    role="img"
                    size="16px"
                    viewBox="0 0 1792 1792"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
                    />
                  </svg>
                </StyledComponent>
              </SvgIcon__StyledSvg>
            </SvgIcon>
            Edit snippet
          </button>
        </StyledComponent>
      </SnippetEditor__EditSnippetButton>
      <SnippetEditorFields
        activeField={null}
        containerPadding="0 20px"
        data={
          Object {
            "description": "Test description, %%replacement_variable%%",
            "slug": "test-slug",
            "title": "Test title",
          }
        }
        descriptionEditorFieldPlaceholder="Modify your meta description by editing it right here"
        descriptionLengthProgress={
          Object {
            "actual": 42,
            "max": 156,
            "score": 6,
          }
        }
        hoveredField="description"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        recommendedReplacementVariables={Array []}
        replacementVariables={Array []}
        titleLengthProgress={
          Object {
            "actual": 0,
            "max": 600,
            "score": 1,
          }
        }
      >
        <shared__StyledEditor
          padding="0 20px"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "shared__StyledEditor-lzs0hf-5",
                  "isStatic": false,
                  "lastClassName": "c17",
                  "rules": Array [
                    "padding:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "shared__StyledEditor",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "shared__StyledEditor-lzs0hf-5",
                "target": "section",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            padding="0 20px"
          >
            <section
              className="c17"
            >
              <shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "shared__FormSection-lzs0hf-4",
                        "isStatic": true,
                        "lastClassName": "c18",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "shared__FormSection-lzs0hf-4",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="c18"
                  >
                    <ReplacementVariableEditor
                      content="Test title"
                      editorRef={[Function]}
                      fieldId="snippet-editor-field-title"
                      isActive={false}
                      isHovered={false}
                      label="SEO title"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      recommendedReplacementVariables={Array []}
                      replacementVariables={Array []}
                      withCaret={true}
                    >
                      <shared__SimulatedLabel
                        id="12"
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared__SimulatedLabel-lzs0hf-6",
                                "isStatic": true,
                                "lastClassName": "c19",
                                "rules": Array [
                                  "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                                ],
                              },
                              "displayName": "shared__SimulatedLabel",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "shared__SimulatedLabel-lzs0hf-6",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          id="12"
                          onClick={[Function]}
                        >
                          <div
                            className="c19"
                            id="12"
                            onClick={[Function]}
                          >
                            SEO title
                          </div>
                        </StyledComponent>
                      </shared__SimulatedLabel>
                      <shared__TriggerReplacementVariableSuggestionsButton
                        activeBackgroundColor="#f7f7f7"
                        activeBorderColor="#888"
                        activeColor="#000"
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        focusBackgroundColor="#fff"
                        focusBorderColor="#0066cd"
                        focusColor="#000"
                        hoverBackgroundColor="#fff"
                        hoverBorderColor="#888"
                        hoverColor="#000"
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <StyledComponent
                          activeBackgroundColor="#f7f7f7"
                          activeBorderColor="#888"
                          activeColor="#000"
                          backgroundColor="#f7f7f7"
                          borderColor="#ccc"
                          boxShadowColor="#ccc"
                          focusBackgroundColor="#fff"
                          focusBorderColor="#0066cd"
                          focusColor="#000"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared__TriggerReplacementVariableSuggestionsButton-lzs0hf-7",
                                "isStatic": false,
                                "lastClassName": "c20",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";background:",
                                  [Function],
                                  ";box-shadow:0 1px 0 ",
                                  [Function],
                                  ";",
                                  "&:active{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";box-shadow:inset 0 2px 5px -3px ",
                                  "rgba( 0, 0, 0, 0.5 )",
                                  ";}",
                                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                                  [Function],
                                  ";color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";box-shadow:0 0 3px ",
                                  "rgba( 8, 74, 103, 0.8 )",
                                  ";}",
                                  "&:hover{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";}",
                                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                                  "1px",
                                  ";border-style:solid;margin:0;padding:",
                                  "4px",
                                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                                  [Function],
                                  ";overflow:visible;min-height:",
                                  "32px",
                                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                                  "22px",
                                  ";}}",
                                  "box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;padding-left:8px;height:33px;border:1px solid #dbdbdb;font-size:13px;& svg{",
                                  [Function],
                                  ":7px;fill:",
                                  "#555",
                                  ";}",
                                ],
                              },
                              "defaultProps": Object {
                                "activeBackgroundColor": "#f7f7f7",
                                "activeBorderColor": "#888",
                                "activeColor": "#000",
                                "backgroundColor": "#f7f7f7",
                                "borderColor": "#ccc",
                                "boxShadowColor": "#ccc",
                                "focusBackgroundColor": "#fff",
                                "focusBorderColor": "#0066cd",
                                "focusColor": "#000",
                                "hoverBackgroundColor": "#fff",
                                "hoverBorderColor": "#888",
                                "hoverColor": "#000",
                                "textColor": "#555",
                                "type": "button",
                              },
                              "displayName": "shared__TriggerReplacementVariableSuggestionsButton",
                              "foldedComponentIds": Array [
                                "Button__BaseButton-sc-32rbq-4",
                                "Button-sc-32rbq-3",
                                "Button-sc-32rbq-1",
                                "Button-sc-32rbq-2",
                                "Button-sc-32rbq-0",
                              ],
                              "propTypes": Object {
                                "activeBackgroundColor": [Function],
                                "activeBorderColor": [Function],
                                "activeColor": [Function],
                                "backgroundColor": [Function],
                                "borderColor": [Function],
                                "boxShadowColor": [Function],
                                "focusBackgroundColor": [Function],
                                "focusBorderColor": [Function],
                                "focusColor": [Function],
                                "hoverBackgroundColor": [Function],
                                "hoverBorderColor": [Function],
                                "hoverColor": [Function],
                                "textColor": [Function],
                                "type": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "shared__TriggerReplacementVariableSuggestionsButton-lzs0hf-7",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverBackgroundColor="#fff"
                          hoverBorderColor="#888"
                          hoverColor="#000"
                          onClick={[Function]}
                          textColor="#555"
                          type="button"
                        >
                          <button
                            className="c20"
                            onClick={[Function]}
                            type="button"
                          >
                            <SvgIcon
                              color="currentColor"
                              icon="plus-circle"
                              size="16px"
                            >
                              <SvgIcon__StyledSvg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="16px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <StyledComponent
                                  aria-hidden={true}
                                  className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                  fill="currentColor"
                                  focusable="false"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                        "isStatic": false,
                                        "lastClassName": "c16",
                                        "rules": Array [
                                          "width:",
                                          [Function],
                                          ";height:",
                                          [Function],
                                          ";flex:none;",
                                        ],
                                      },
                                      "displayName": "SvgIcon__StyledSvg",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                      "target": "svg",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  role="img"
                                  size="16px"
                                  viewBox="0 0 1792 1792"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="yoast-svg-icon yoast-svg-icon-plus-circle c16"
                                    fill="currentColor"
                                    focusable="false"
                                    role="img"
                                    size="16px"
                                    viewBox="0 0 1792 1792"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M1344 960v-128q0-26-19-45t-45-19h-256v-256q0-26-19-45t-45-19h-128q-26 0-45 19t-19 45v256h-256q-26 0-45 19t-19 45v128q0 26 19 45t45 19h256v256q0 26 19 45t45 19h128q26 0 45-19t19-45v-256h256q26 0 45-19t19-45zm320-64q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"
                                    />
                                  </svg>
                                </StyledComponent>
                              </SvgIcon__StyledSvg>
                            </SvgIcon>
                            Insert snippet variable
                          </button>
                        </StyledComponent>
                      </shared__TriggerReplacementVariableSuggestionsButton>
                      <shared
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {},
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared-lzs0hf-1",
                                "isStatic": false,
                                "lastClassName": "c21",
                                "rules": Array [
                                  "flex:0 1 100%;border:1px solid ",
                                  [Function],
                                  ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                  [Function],
                                  ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                  ".public-DraftStyleDefault-block{line-height:24px;}",
                                  "&::before{display:block;position:absolute;top:-1px;",
                                  [Function],
                                  ":-25px;width:24px;height:24px;background-image:url( ",
                                  [Function],
                                  " );background-size:25px;content:\\"\\";}",
                                ],
                              },
                              "displayName": "shared",
                              "foldedComponentIds": Array [
                                "shared__InputContainer-lzs0hf-0",
                                "shared__TitleInputContainer-lzs0hf-2",
                              ],
                              "render": [Function],
                              "styledComponentId": "shared-lzs0hf-1",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isActive={false}
                          isHovered={false}
                          onClick={[Function]}
                        >
                          <div
                            className="c21"
                            onClick={[Function]}
                          >
                            <ReplacementVariableEditorStandalone
                              ariaLabelledBy="12"
                              content="Test title"
                              fieldId="snippet-editor-field-title"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              recommendedReplacementVariables={Array []}
                              replacementVariables={Array []}
                            >
                              <div />
                            </ReplacementVariableEditorStandalone>
                          </div>
                        </StyledComponent>
                      </shared>
                    </ReplacementVariableEditor>
                    <ProgressBar
                      aria-hidden="true"
                      backgroundColor="#f7f7f7"
                      borderColor="#ddd"
                      max={600}
                      progressColor="#dc3232"
                      value={0}
                    >
                      <StyledComponent
                        aria-hidden="true"
                        backgroundColor="#f7f7f7"
                        borderColor="#ddd"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ProgressBar-sc-9g9yx6-0",
                              "isStatic": false,
                              "lastClassName": "c26",
                              "rules": Array [
                                "box-sizing:border-box;width:100%;height:8px;display:block;margin-top:8px;appearance:none;background-color:",
                                [Function],
                                ";border:1px solid ",
                                [Function],
                                ";::-webkit-progress-bar{background-color:",
                                [Function],
                                ";}::-webkit-progress-value{background-color:",
                                [Function],
                                ";transition:width 250ms;}::-moz-progress-bar{background-color:",
                                [Function],
                                ";}::-ms-fill{background-color:",
                                [Function],
                                ";border:0;}",
                              ],
                            },
                            "defaultProps": Object {
                              "aria-hidden": "true",
                              "backgroundColor": "#f7f7f7",
                              "borderColor": "#ddd",
                              "max": 1,
                              "progressColor": "#7ad03a",
                              "value": 0,
                            },
                            "displayName": "ProgressBar",
                            "foldedComponentIds": Array [],
                            "propTypes": Object {
                              "aria-hidden": [Function],
                              "backgroundColor": [Function],
                              "borderColor": [Function],
                              "max": [Function],
                              "progressColor": [Function],
                              "value": [Function],
                            },
                            "render": [Function],
                            "styledComponentId": "ProgressBar-sc-9g9yx6-0",
                            "target": "progress",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        max={600}
                        progressColor="#dc3232"
                        value={0}
                      >
                        <progress
                          aria-hidden="true"
                          className="c22"
                          max={600}
                          value={0}
                        />
                      </StyledComponent>
                    </ProgressBar>
                  </div>
                </StyledComponent>
              </shared__FormSection>
              <shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "shared__FormSection-lzs0hf-4",
                        "isStatic": true,
                        "lastClassName": "c18",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "shared__FormSection-lzs0hf-4",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="c18"
                  >
                    <shared__SimulatedLabel
                      id="snippet-editor-field-11-slug"
                      onClick={[Function]}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "shared__SimulatedLabel-lzs0hf-6",
                              "isStatic": true,
                              "lastClassName": "c19",
                              "rules": Array [
                                "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                              ],
                            },
                            "displayName": "shared__SimulatedLabel",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "shared__SimulatedLabel-lzs0hf-6",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        id="snippet-editor-field-11-slug"
                        onClick={[Function]}
                      >
                        <div
                          className="c19"
                          id="snippet-editor-field-11-slug"
                          onClick={[Function]}
                        >
                          Slug
                        </div>
                      </StyledComponent>
                    </shared__SimulatedLabel>
                    <shared
                      isActive={false}
                      isHovered={false}
                      onClick={[Function]}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [
                              Object {},
                            ],
                            "componentStyle": ComponentStyle {
                              "componentId": "shared-lzs0hf-1",
                              "isStatic": false,
                              "lastClassName": "c23",
                              "rules": Array [
                                "flex:0 1 100%;border:1px solid ",
                                [Function],
                                ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                [Function],
                                ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                "&::before{display:block;position:absolute;top:-1px;",
                                [Function],
                                ":-25px;width:24px;height:24px;background-image:url( ",
                                [Function],
                                " );background-size:25px;content:\\"\\";}",
                              ],
                            },
                            "displayName": "shared",
                            "foldedComponentIds": Array [
                              "shared__InputContainer-lzs0hf-0",
                            ],
                            "render": [Function],
                            "styledComponentId": "shared-lzs0hf-1",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <div
                          className="c23"
                          onClick={[Function]}
                        >
                          <SnippetEditorFields__SlugInput
                            aria-labelledby="snippet-editor-field-11-slug"
                            id="snippet-editor-field-slug"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            value="test-slug"
                          >
                            <StyledComponent
                              aria-labelledby="snippet-editor-field-11-slug"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "SnippetEditorFields__SlugInput-sc-1ioqi3y-0",
                                    "isStatic": true,
                                    "lastClassName": "c24",
                                    "rules": Array [
                                      "border:none;width:100%;height:inherit;line-height:inherit;font-family:inherit;font-size:inherit;color:inherit;&:focus{outline:0;}",
                                    ],
                                  },
                                  "displayName": "SnippetEditorFields__SlugInput",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "SnippetEditorFields__SlugInput-sc-1ioqi3y-0",
                                  "target": "input",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={[Function]}
                              id="snippet-editor-field-slug"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              value="test-slug"
                            >
                              <input
                                aria-labelledby="snippet-editor-field-11-slug"
                                className="c24"
                                id="snippet-editor-field-slug"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                value="test-slug"
                              />
                            </StyledComponent>
                          </SnippetEditorFields__SlugInput>
                        </div>
                      </StyledComponent>
                    </shared>
                  </div>
                </StyledComponent>
              </shared__FormSection>
              <shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "shared__FormSection-lzs0hf-4",
                        "isStatic": true,
                        "lastClassName": "c18",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "shared__FormSection-lzs0hf-4",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="c18"
                  >
                    <ReplacementVariableEditor
                      content="Test description, %%replacement_variable%%"
                      editorRef={[Function]}
                      fieldId="snippet-editor-field-description"
                      isActive={false}
                      isHovered={true}
                      label="Meta description"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      placeholder="Modify your meta description by editing it right here"
                      recommendedReplacementVariables={Array []}
                      replacementVariables={Array []}
                      type="description"
                      withCaret={true}
                    >
                      <shared__SimulatedLabel
                        id="13"
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared__SimulatedLabel-lzs0hf-6",
                                "isStatic": true,
                                "lastClassName": "c19",
                                "rules": Array [
                                  "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                                ],
                              },
                              "displayName": "shared__SimulatedLabel",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "shared__SimulatedLabel-lzs0hf-6",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          id="13"
                          onClick={[Function]}
                        >
                          <div
                            className="c19"
                            id="13"
                            onClick={[Function]}
                          >
                            Meta description
                          </div>
                        </StyledComponent>
                      </shared__SimulatedLabel>
                      <shared__TriggerReplacementVariableSuggestionsButton
                        activeBackgroundColor="#f7f7f7"
                        activeBorderColor="#888"
                        activeColor="#000"
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        focusBackgroundColor="#fff"
                        focusBorderColor="#0066cd"
                        focusColor="#000"
                        hoverBackgroundColor="#fff"
                        hoverBorderColor="#888"
                        hoverColor="#000"
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <StyledComponent
                          activeBackgroundColor="#f7f7f7"
                          activeBorderColor="#888"
                          activeColor="#000"
                          backgroundColor="#f7f7f7"
                          borderColor="#ccc"
                          boxShadowColor="#ccc"
                          focusBackgroundColor="#fff"
                          focusBorderColor="#0066cd"
                          focusColor="#000"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared__TriggerReplacementVariableSuggestionsButton-lzs0hf-7",
                                "isStatic": false,
                                "lastClassName": "c20",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";background:",
                                  [Function],
                                  ";box-shadow:0 1px 0 ",
                                  [Function],
                                  ";",
                                  "&:active{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";box-shadow:inset 0 2px 5px -3px ",
                                  "rgba( 0, 0, 0, 0.5 )",
                                  ";}",
                                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                                  [Function],
                                  ";color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";box-shadow:0 0 3px ",
                                  "rgba( 8, 74, 103, 0.8 )",
                                  ";}",
                                  "&:hover{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";}",
                                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                                  "1px",
                                  ";border-style:solid;margin:0;padding:",
                                  "4px",
                                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                                  [Function],
                                  ";overflow:visible;min-height:",
                                  "32px",
                                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                                  "22px",
                                  ";}}",
                                  "box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;padding-left:8px;height:33px;border:1px solid #dbdbdb;font-size:13px;& svg{",
                                  [Function],
                                  ":7px;fill:",
                                  "#555",
                                  ";}",
                                ],
                              },
                              "defaultProps": Object {
                                "activeBackgroundColor": "#f7f7f7",
                                "activeBorderColor": "#888",
                                "activeColor": "#000",
                                "backgroundColor": "#f7f7f7",
                                "borderColor": "#ccc",
                                "boxShadowColor": "#ccc",
                                "focusBackgroundColor": "#fff",
                                "focusBorderColor": "#0066cd",
                                "focusColor": "#000",
                                "hoverBackgroundColor": "#fff",
                                "hoverBorderColor": "#888",
                                "hoverColor": "#000",
                                "textColor": "#555",
                                "type": "button",
                              },
                              "displayName": "shared__TriggerReplacementVariableSuggestionsButton",
                              "foldedComponentIds": Array [
                                "Button__BaseButton-sc-32rbq-4",
                                "Button-sc-32rbq-3",
                                "Button-sc-32rbq-1",
                                "Button-sc-32rbq-2",
                                "Button-sc-32rbq-0",
                              ],
                              "propTypes": Object {
                                "activeBackgroundColor": [Function],
                                "activeBorderColor": [Function],
                                "activeColor": [Function],
                                "backgroundColor": [Function],
                                "borderColor": [Function],
                                "boxShadowColor": [Function],
                                "focusBackgroundColor": [Function],
                                "focusBorderColor": [Function],
                                "focusColor": [Function],
                                "hoverBackgroundColor": [Function],
                                "hoverBorderColor": [Function],
                                "hoverColor": [Function],
                                "textColor": [Function],
                                "type": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "shared__TriggerReplacementVariableSuggestionsButton-lzs0hf-7",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverBackgroundColor="#fff"
                          hoverBorderColor="#888"
                          hoverColor="#000"
                          onClick={[Function]}
                          textColor="#555"
                          type="button"
                        >
                          <button
                            className="c20"
                            onClick={[Function]}
                            type="button"
                          >
                            <SvgIcon
                              color="currentColor"
                              icon="plus-circle"
                              size="16px"
                            >
                              <SvgIcon__StyledSvg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="16px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <StyledComponent
                                  aria-hidden={true}
                                  className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                  fill="currentColor"
                                  focusable="false"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                        "isStatic": false,
                                        "lastClassName": "c16",
                                        "rules": Array [
                                          "width:",
                                          [Function],
                                          ";height:",
                                          [Function],
                                          ";flex:none;",
                                        ],
                                      },
                                      "displayName": "SvgIcon__StyledSvg",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                      "target": "svg",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  role="img"
                                  size="16px"
                                  viewBox="0 0 1792 1792"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="yoast-svg-icon yoast-svg-icon-plus-circle c16"
                                    fill="currentColor"
                                    focusable="false"
                                    role="img"
                                    size="16px"
                                    viewBox="0 0 1792 1792"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M1344 960v-128q0-26-19-45t-45-19h-256v-256q0-26-19-45t-45-19h-128q-26 0-45 19t-19 45v256h-256q-26 0-45 19t-19 45v128q0 26 19 45t45 19h256v256q0 26 19 45t45 19h128q26 0 45-19t19-45v-256h256q26 0 45-19t19-45zm320-64q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"
                                    />
                                  </svg>
                                </StyledComponent>
                              </SvgIcon__StyledSvg>
                            </SvgIcon>
                            Insert snippet variable
                          </button>
                        </StyledComponent>
                      </shared__TriggerReplacementVariableSuggestionsButton>
                      <shared
                        isActive={false}
                        isHovered={true}
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {},
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared-lzs0hf-1",
                                "isStatic": false,
                                "lastClassName": "c25",
                                "rules": Array [
                                  "flex:0 1 100%;border:1px solid ",
                                  [Function],
                                  ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                  [Function],
                                  ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                  "min-height:72px;padding:2px 6px;line-height:24px;.public-DraftEditorPlaceholder-root{color:",
                                  "#616161",
                                  ";}.public-DraftEditorPlaceholder-hasFocus{color:",
                                  "#616161",
                                  ";}",
                                  "&::before{display:block;position:absolute;top:-1px;",
                                  [Function],
                                  ":-25px;width:24px;height:24px;background-image:url( ",
                                  [Function],
                                  " );background-size:25px;content:\\"\\";}",
                                ],
                              },
                              "displayName": "shared",
                              "foldedComponentIds": Array [
                                "shared__InputContainer-lzs0hf-0",
                                "shared__DescriptionInputContainer-lzs0hf-3",
                              ],
                              "render": [Function],
                              "styledComponentId": "shared-lzs0hf-1",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isActive={false}
                          isHovered={true}
                          onClick={[Function]}
                        >
                          <div
                            className="c25"
                            onClick={[Function]}
                          >
                            <ReplacementVariableEditorStandalone
                              ariaLabelledBy="13"
                              content="Test description, %%replacement_variable%%"
                              fieldId="snippet-editor-field-description"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              placeholder="Modify your meta description by editing it right here"
                              recommendedReplacementVariables={Array []}
                              replacementVariables={Array []}
                            >
                              <div />
                            </ReplacementVariableEditorStandalone>
                          </div>
                        </StyledComponent>
                      </shared>
                    </ReplacementVariableEditor>
                    <ProgressBar
                      aria-hidden="true"
                      backgroundColor="#f7f7f7"
                      borderColor="#ddd"
                      max={156}
                      progressColor="#ee7c1b"
                      value={42}
                    >
                      <StyledComponent
                        aria-hidden="true"
                        backgroundColor="#f7f7f7"
                        borderColor="#ddd"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ProgressBar-sc-9g9yx6-0",
                              "isStatic": false,
                              "lastClassName": "c26",
                              "rules": Array [
                                "box-sizing:border-box;width:100%;height:8px;display:block;margin-top:8px;appearance:none;background-color:",
                                [Function],
                                ";border:1px solid ",
                                [Function],
                                ";::-webkit-progress-bar{background-color:",
                                [Function],
                                ";}::-webkit-progress-value{background-color:",
                                [Function],
                                ";transition:width 250ms;}::-moz-progress-bar{background-color:",
                                [Function],
                                ";}::-ms-fill{background-color:",
                                [Function],
                                ";border:0;}",
                              ],
                            },
                            "defaultProps": Object {
                              "aria-hidden": "true",
                              "backgroundColor": "#f7f7f7",
                              "borderColor": "#ddd",
                              "max": 1,
                              "progressColor": "#7ad03a",
                              "value": 0,
                            },
                            "displayName": "ProgressBar",
                            "foldedComponentIds": Array [],
                            "propTypes": Object {
                              "aria-hidden": [Function],
                              "backgroundColor": [Function],
                              "borderColor": [Function],
                              "max": [Function],
                              "progressColor": [Function],
                              "value": [Function],
                            },
                            "render": [Function],
                            "styledComponentId": "ProgressBar-sc-9g9yx6-0",
                            "target": "progress",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        max={156}
                        progressColor="#ee7c1b"
                        value={42}
                      >
                        <progress
                          aria-hidden="true"
                          className="c26"
                          max={156}
                          value={42}
                        />
                      </StyledComponent>
                    </ProgressBar>
                  </div>
                </StyledComponent>
              </shared__FormSection>
            </section>
          </StyledComponent>
        </shared__StyledEditor>
      </SnippetEditorFields>
      <SnippetEditor__CloseEditorButton
        activeBackgroundColor="#f7f7f7"
        activeBorderColor="#888"
        activeColor="#000"
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        focusBackgroundColor="#fff"
        focusBorderColor="#0066cd"
        focusColor="#000"
        hoverBackgroundColor="#fff"
        hoverBorderColor="#888"
        hoverColor="#000"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <StyledComponent
          activeBackgroundColor="#f7f7f7"
          activeBorderColor="#888"
          activeColor="#000"
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          focusBackgroundColor="#fff"
          focusBorderColor="#0066cd"
          focusColor="#000"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "SnippetEditor__CloseEditorButton-sc-144bmm3-2",
                "isStatic": false,
                "lastClassName": "c27",
                "rules": Array [
                  "color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";background:",
                  [Function],
                  ";box-shadow:0 1px 0 ",
                  [Function],
                  ";",
                  "&:active{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";box-shadow:inset 0 2px 5px -3px ",
                  "rgba( 0, 0, 0, 0.5 )",
                  ";}",
                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                  [Function],
                  ";color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";box-shadow:0 0 3px ",
                  "rgba( 8, 74, 103, 0.8 )",
                  ";}",
                  "&:hover{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";}",
                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                  "1px",
                  ";border-style:solid;margin:0;padding:",
                  "4px",
                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                  [Function],
                  ";overflow:visible;min-height:",
                  "32px",
                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                  "22px",
                  ";}}",
                  "height:33px;border:1px solid #dbdbdb;box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;",
                  "margin-top:24px;",
                ],
              },
              "defaultProps": Object {
                "activeBackgroundColor": "#f7f7f7",
                "activeBorderColor": "#888",
                "activeColor": "#000",
                "backgroundColor": "#f7f7f7",
                "borderColor": "#ccc",
                "boxShadowColor": "#ccc",
                "focusBackgroundColor": "#fff",
                "focusBorderColor": "#0066cd",
                "focusColor": "#000",
                "hoverBackgroundColor": "#fff",
                "hoverBorderColor": "#888",
                "hoverColor": "#000",
                "textColor": "#555",
                "type": "button",
              },
              "displayName": "SnippetEditor__CloseEditorButton",
              "foldedComponentIds": Array [
                "Button__BaseButton-sc-32rbq-4",
                "Button-sc-32rbq-3",
                "Button-sc-32rbq-1",
                "Button-sc-32rbq-2",
                "Button-sc-32rbq-0",
                "SnippetEditor__SnippetEditorButton-sc-144bmm3-0",
              ],
              "propTypes": Object {
                "activeBackgroundColor": [Function],
                "activeBorderColor": [Function],
                "activeColor": [Function],
                "backgroundColor": [Function],
                "borderColor": [Function],
                "boxShadowColor": [Function],
                "focusBackgroundColor": [Function],
                "focusBorderColor": [Function],
                "focusColor": [Function],
                "hoverBackgroundColor": [Function],
                "hoverBorderColor": [Function],
                "hoverColor": [Function],
                "textColor": [Function],
                "type": [Function],
              },
              "render": [Function],
              "styledComponentId": "SnippetEditor__CloseEditorButton-sc-144bmm3-2",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          hoverBackgroundColor="#fff"
          hoverBorderColor="#888"
          hoverColor="#000"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <button
            className="c27"
            onClick={[Function]}
            type="button"
          >
            Close snippet editor
          </button>
        </StyledComponent>
      </SnippetEditor__CloseEditorButton>
    </div>
  </ErrorBoundary>
</SnippetEditor>
`;

exports[`SnippetEditor opens when calling open() 1`] = `
.c21 {
  box-sizing: border-box;
  width: 100%;
  height: 8px;
  display: block;
  margin-top: 8px;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background-color: #f7f7f7;
  border: 1px solid #ddd;
}

.c21::-webkit-progress-bar {
  background-color: #f7f7f7;
}

.c21::-webkit-progress-value {
  background-color: #dc3232;
  -webkit-transition: width 250ms;
  transition: width 250ms;
}

.c21::-moz-progress-bar {
  background-color: #dc3232;
}

.c21::-ms-fill {
  background-color: #dc3232;
  border: 0;
}

.c25 {
  box-sizing: border-box;
  width: 100%;
  height: 8px;
  display: block;
  margin-top: 8px;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background-color: #f7f7f7;
  border: 1px solid #ddd;
}

.c25::-webkit-progress-bar {
  background-color: #f7f7f7;
}

.c25::-webkit-progress-value {
  background-color: #ee7c1b;
  -webkit-transition: width 250ms;
  transition: width 250ms;
}

.c25::-moz-progress-bar {
  background-color: #ee7c1b;
}

.c25::-ms-fill {
  background-color: #ee7c1b;
  border: 0;
}

.c17 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  margin: 24px 0 0 0;
}

.c16 {
  padding: 0 20px;
}

.c18 {
  -webkit-flex: 1 1 200px;
  -ms-flex: 1 1 200px;
  flex: 1 1 200px;
  min-width: 200px;
  cursor: pointer;
  font-size: 16px;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin: 4px 0;
}

.c19 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  padding-left: 8px;
  height: 33px;
  border: 1px solid #dbdbdb;
  font-size: 13px;
}

.c19:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c19::-moz-focus-inner {
  border-width: 0;
}

.c19:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c19:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c19 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c19 svg {
  margin-right: 7px;
  fill: #555;
}

.c0 {
  border-bottom: 1px hidden #fff;
  border-radius: 2px;
  box-shadow: 0 1px 2px rgba(0,0,0,.2);
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  max-width: 600px;
  box-sizing: border-box;
  font-size: 14px;
}

.c2 {
  cursor: pointer;
  position: relative;
}

.c3 {
  color: #1e0fbe;
  -webkit-text-decoration: none;
  text-decoration: none;
  font-size: 18px;
  line-height: 1.2;
  font-weight: normal;
  margin: 0;
  display: inline-block;
  overflow: hidden;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c4 {
  display: inline-block;
  font-size: 16px;
  line-height: 1.2em;
  max-height: 2.4em;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c5 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  white-space: nowrap;
  font-size: 14px;
}

.c6 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  white-space: nowrap;
  font-size: 14px;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 100%;
}

.c8 {
  color: #545454;
  cursor: pointer;
  position: relative;
  max-width: 600px;
  font-size: 13px;
  font-size: 14px;
  line-height: 20px;
}

.c1 {
  padding: 8px 16px;
}

.c7 {
  border: 0;
  border-bottom: 1px solid #DFE1E5;
  margin: 0;
}

.c23 {
  border: none;
  width: 100%;
  height: inherit;
  line-height: inherit;
  font-family: inherit;
  font-size: inherit;
  color: inherit;
}

.c23:focus {
  outline: 0;
}

.c20 {
  -webkit-flex: 0 1 100%;
  -ms-flex: 0 1 100%;
  flex: 0 1 100%;
  border: 1px solid #ddd;
  padding: 3px 5px;
  box-sizing: border-box;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  cursor: text;
}

.c20 .public-DraftStyleDefault-block {
  line-height: 24px;
}

.c20::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width%3D%221792%22%20height%3D%221792%22%20viewBox%3D%220%200%201792%201792%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20fill%3D%22transparent%22%20d%3D%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20%2F%3E%3C%2Fsvg%3E );
  background-size: 25px;
  content: "";
}

.c22 {
  -webkit-flex: 0 1 100%;
  -ms-flex: 0 1 100%;
  flex: 0 1 100%;
  border: 1px solid #ddd;
  padding: 3px 5px;
  box-sizing: border-box;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  cursor: text;
}

.c22::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width%3D%221792%22%20height%3D%221792%22%20viewBox%3D%220%200%201792%201792%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20fill%3D%22transparent%22%20d%3D%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20%2F%3E%3C%2Fsvg%3E );
  background-size: 25px;
  content: "";
}

.c24 {
  -webkit-flex: 0 1 100%;
  -ms-flex: 0 1 100%;
  flex: 0 1 100%;
  border: 1px solid #ddd;
  padding: 3px 5px;
  box-sizing: border-box;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  cursor: text;
  min-height: 72px;
  padding: 2px 6px;
  line-height: 24px;
}

.c24 .public-DraftEditorPlaceholder-root {
  color: #616161;
}

.c24 .public-DraftEditorPlaceholder-hasFocus {
  color: #616161;
}

.c24::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width%3D%221792%22%20height%3D%221792%22%20viewBox%3D%220%200%201792%201792%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20fill%3D%22transparent%22%20d%3D%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20%2F%3E%3C%2Fsvg%3E );
  background-size: 25px;
  content: "";
}

.c10 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: #555;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 3px 0 0 3px;
}

.c10:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c10::-moz-focus-inner {
  border-width: 0;
}

.c10:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c10:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c10 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c10:hover,
.c10:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
  box-shadow: none;
}

.c12 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: transparent;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 0 3px 3px 0;
}

.c12:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c12::-moz-focus-inner {
  border-width: 0;
}

.c12:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c12:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c12 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c12:hover,
.c12:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
  box-shadow: none;
}

.c9 {
  display: inline-block;
  margin-top: 10px;
  border: 1px solid #dbdbdb;
  border-radius: 4px;
  background-color: #f7f7f7;
  vertical-align: top;
}

.c14 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin: 10px 0 0 4px;
  fill: #555;
  padding-left: 8px;
}

.c14:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c14::-moz-focus-inner {
  border-width: 0;
}

.c14:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c14:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c14 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c14 svg {
  margin-right: 7px;
}

.c26 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin-top: 24px;
}

.c26:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c26::-moz-focus-inner {
  border-width: 0;
}

.c26:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c26:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c26 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c11 {
  width: 22px;
  height: 22px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c13 {
  width: 18px;
  height: 18px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c15 {
  width: 16px;
  height: 16px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c19::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c10::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c12::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c14::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c26::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

<SnippetEditor
  baseUrl="http://example.org/"
  data={
    Object {
      "description": "Test description, %%replacement_variable%%",
      "slug": "test-slug",
      "title": "Test title",
    }
  }
  date=""
  descriptionEditorFieldPlaceholder=""
  descriptionLengthProgress={
    Object {
      "actual": 0,
      "max": 156,
      "score": 0,
    }
  }
  hasPaperStyle={true}
  locale="en"
  mapEditorDataToPreview={null}
  mode="mobile"
  onChange={[MockFunction]}
  onChangeAnalysisData={[Function]}
  recommendedReplacementVariables={Array []}
  replacementVariables={Array []}
  showCloseButton={true}
  titleLengthProgress={
    Object {
      "actual": 0,
      "max": 600,
      "score": 0,
    }
  }
  wordsToHighlight={Array []}
>
  <ErrorBoundary>
    <div>
      <SnippetPreview
        activeField={null}
        breadcrumbs={null}
        date=""
        description="Test description, %%replacement_variable%%"
        hoveredField={null}
        isAmp={false}
        keyword=""
        locale="en"
        mode="mobile"
        onHover={[Function]}
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        title="Test title"
        url="example.org/test-slug"
        wordsToHighlight={Array []}
      >
        <section>
          <SnippetPreview__MobileContainer
            padding={20}
            width={640}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "SnippetPreview__MobileContainer-sc-1hxg8jo-1",
                    "isStatic": true,
                    "lastClassName": "c0",
                    "rules": Array [
                      "border-bottom:1px hidden #fff;border-radius:2px;box-shadow:0 1px 2px rgba(0,0,0,.2);font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;max-width:",
                      "600",
                      "px;box-sizing:border-box;font-size:14px;",
                    ],
                  },
                  "displayName": "SnippetPreview__MobileContainer",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "SnippetPreview__MobileContainer-sc-1hxg8jo-1",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              padding={20}
              width={640}
            >
              <div
                className="c0"
                width={640}
              >
                <SnippetPreview__MobilePartContainer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__MobilePartContainer-sc-1hxg8jo-12",
                          "isStatic": true,
                          "lastClassName": "c1",
                          "rules": Array [
                            "padding:8px 16px;",
                          ],
                        },
                        "displayName": "SnippetPreview__MobilePartContainer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__MobilePartContainer-sc-1hxg8jo-12",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="c1"
                    >
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          SEO title preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__BaseTitle
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__BaseTitle-sc-1hxg8jo-2",
                                "isStatic": true,
                                "lastClassName": "c2",
                                "rules": Array [
                                  "cursor:pointer;position:relative;",
                                ],
                              },
                              "displayName": "SnippetPreview__BaseTitle",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__BaseTitle-sc-1hxg8jo-2",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                        >
                          <div
                            className="c2"
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                          >
                            <SnippetPreview__TitleBounded>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__TitleBounded-sc-1hxg8jo-5",
                                      "isStatic": true,
                                      "lastClassName": "c3",
                                      "rules": Array [
                                        "color:",
                                        "#1e0fbe",
                                        ";text-decoration:none;font-size:18px;line-height:1.2;font-weight:normal;margin:0;display:inline-block;overflow:hidden;max-width:",
                                        "600",
                                        "px;vertical-align:top;text-overflow:ellipsis;",
                                        "max-width:",
                                        "600",
                                        "px;vertical-align:top;text-overflow:ellipsis;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__TitleBounded",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__Title-sc-1hxg8jo-4",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__TitleBounded-sc-1hxg8jo-5",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="c3"
                                >
                                  <SnippetPreview__TitleUnboundedMobile>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "SnippetPreview__TitleUnboundedMobile-sc-1hxg8jo-7",
                                            "isStatic": true,
                                            "lastClassName": "c4",
                                            "rules": Array [
                                              "display:inline-block;font-size:16px;line-height:1.2em;max-height:2.4em;overflow:hidden;text-overflow:ellipsis;",
                                            ],
                                          },
                                          "displayName": "SnippetPreview__TitleUnboundedMobile",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "SnippetPreview__TitleUnboundedMobile-sc-1hxg8jo-7",
                                          "target": "span",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={[Function]}
                                    >
                                      <span
                                        className="c4"
                                      >
                                        Test title
                                      </span>
                                    </StyledComponent>
                                  </SnippetPreview__TitleUnboundedMobile>
                                </div>
                              </StyledComponent>
                            </SnippetPreview__TitleBounded>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__BaseTitle>
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          Url preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__BaseUrl>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__BaseUrl-sc-1hxg8jo-8",
                                "isStatic": true,
                                "lastClassName": "c5",
                                "rules": Array [
                                  "display:inline-block;color:",
                                  "#006621",
                                  ";cursor:pointer;position:relative;max-width:90%;white-space:nowrap;font-size:14px;",
                                ],
                              },
                              "displayName": "SnippetPreview__BaseUrl",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__BaseUrl-sc-1hxg8jo-8",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <div
                            className="c5"
                          >
                            <SnippetPreview__BaseUrlOverflowContainer
                              onMouseEnter={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__BaseUrlOverflowContainer-sc-1hxg8jo-9",
                                      "isStatic": true,
                                      "lastClassName": "c6",
                                      "rules": Array [
                                        "display:inline-block;color:",
                                        "#006621",
                                        ";cursor:pointer;position:relative;max-width:90%;white-space:nowrap;font-size:14px;",
                                        "overflow:hidden;text-overflow:ellipsis;max-width:100%;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__BaseUrlOverflowContainer",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__BaseUrl-sc-1hxg8jo-8",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__BaseUrlOverflowContainer-sc-1hxg8jo-9",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                onMouseEnter={[Function]}
                                onMouseLeave={[Function]}
                                onMouseUp={[Function]}
                              >
                                <div
                                  className="c6"
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseUp={[Function]}
                                >
                                  example.org â€º test-slug
                                </div>
                              </StyledComponent>
                            </SnippetPreview__BaseUrlOverflowContainer>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__BaseUrl>
                    </div>
                  </StyledComponent>
                </SnippetPreview__MobilePartContainer>
                <SnippetPreview__Separator>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__Separator-sc-1hxg8jo-16",
                          "isStatic": true,
                          "lastClassName": "c7",
                          "rules": Array [
                            "border:0;border-bottom:1px solid #DFE1E5;margin:0;",
                          ],
                        },
                        "displayName": "SnippetPreview__Separator",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__Separator-sc-1hxg8jo-16",
                        "target": "hr",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <hr
                      className="c7"
                    />
                  </StyledComponent>
                </SnippetPreview__Separator>
                <SnippetPreview__MobilePartContainer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__MobilePartContainer-sc-1hxg8jo-12",
                          "isStatic": true,
                          "lastClassName": "c1",
                          "rules": Array [
                            "padding:8px 16px;",
                          ],
                        },
                        "displayName": "SnippetPreview__MobilePartContainer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__MobilePartContainer-sc-1hxg8jo-12",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="c1"
                    >
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          Meta description preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__MobileDescription
                        isDescriptionPlaceholder={false}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__MobileDescription-sc-1hxg8jo-11",
                                "isStatic": false,
                                "lastClassName": "c8",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";cursor:pointer;position:relative;max-width:",
                                  "600",
                                  "px;font-size:13px;",
                                  "font-size:14px;line-height:20px;",
                                ],
                              },
                              "displayName": "SnippetPreview__MobileDescription",
                              "foldedComponentIds": Array [
                                "SnippetPreview__DesktopDescription-sc-1hxg8jo-10",
                              ],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__MobileDescription-sc-1hxg8jo-11",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isDescriptionPlaceholder={false}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                        >
                          <div
                            className="c8"
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                          >
                            <SnippetPreview__MobileDescription
                              isDescriptionPlaceholder={false}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__MobileDescription-sc-1hxg8jo-11",
                                      "isStatic": false,
                                      "lastClassName": "c8",
                                      "rules": Array [
                                        "color:",
                                        [Function],
                                        ";cursor:pointer;position:relative;max-width:",
                                        "600",
                                        "px;font-size:13px;",
                                        "font-size:14px;line-height:20px;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__MobileDescription",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__DesktopDescription-sc-1hxg8jo-10",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__MobileDescription-sc-1hxg8jo-11",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={[Function]}
                                isDescriptionPlaceholder={false}
                              >
                                <div
                                  className="c8"
                                >
                                  Test description, %%replacement_variable%%
                                </div>
                              </StyledComponent>
                            </SnippetPreview__MobileDescription>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__MobileDescription>
                    </div>
                  </StyledComponent>
                </SnippetPreview__MobilePartContainer>
              </div>
            </StyledComponent>
          </SnippetPreview__MobileContainer>
        </section>
      </SnippetPreview>
      <ModeSwitcher
        active="mobile"
        onChange={[Function]}
      >
        <ModeSwitcher__Switcher>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "ModeSwitcher__Switcher-sc-9lbpr3-3",
                  "isStatic": true,
                  "lastClassName": "c9",
                  "rules": Array [
                    "display:inline-block;margin-top:10px;border:1px solid #dbdbdb;border-radius:4px;background-color:#f7f7f7;vertical-align:top;",
                  ],
                },
                "displayName": "ModeSwitcher__Switcher",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModeSwitcher__Switcher-sc-9lbpr3-3",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="c9"
            >
              <ModeSwitcher__MobileButton
                activeBackgroundColor="#f7f7f7"
                activeBorderColor="#888"
                activeColor="#000"
                aria-pressed={true}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                focusBackgroundColor="#fff"
                focusBorderColor="#0066cd"
                focusColor="#000"
                hoverBackgroundColor="#fff"
                hoverBorderColor="#888"
                hoverColor="#000"
                isActive={true}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <StyledComponent
                  activeBackgroundColor="#f7f7f7"
                  activeBorderColor="#888"
                  activeColor="#000"
                  aria-pressed={true}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  focusBackgroundColor="#fff"
                  focusBorderColor="#0066cd"
                  focusColor="#000"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "ModeSwitcher__MobileButton-sc-9lbpr3-1",
                        "isStatic": false,
                        "lastClassName": "c10",
                        "rules": Array [
                          "color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";box-shadow:0 1px 0 ",
                          [Function],
                          ";",
                          "&:active{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";box-shadow:inset 0 2px 5px -3px ",
                          "rgba( 0, 0, 0, 0.5 )",
                          ";}",
                          "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                          [Function],
                          ";color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";box-shadow:0 0 3px ",
                          "rgba( 8, 74, 103, 0.8 )",
                          ";}",
                          "&:hover{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";}",
                          "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                          "1px",
                          ";border-style:solid;margin:0;padding:",
                          "4px",
                          " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                          [Function],
                          ";overflow:visible;min-height:",
                          "32px",
                          ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                          "22px",
                          ";}}",
                          "border:none;border-bottom:4px solid transparent;width:31px;height:31px;border-color:",
                          [Function],
                          ";color:",
                          "#555",
                          ";transition:0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;transition-property:border-color;&:hover,&:focus{background-color:",
                          "#fff",
                          ";border:none;border-bottom:4px solid transparent;border-color:",
                          "#1e8cbe",
                          ";color:",
                          "#1e8cbe",
                          ";box-shadow:none;}",
                          "border-radius:3px 0 0 3px;",
                        ],
                      },
                      "defaultProps": Object {
                        "activeBackgroundColor": "#f7f7f7",
                        "activeBorderColor": "#888",
                        "activeColor": "#000",
                        "backgroundColor": "#f7f7f7",
                        "borderColor": "#ccc",
                        "boxShadowColor": "#ccc",
                        "focusBackgroundColor": "#fff",
                        "focusBorderColor": "#0066cd",
                        "focusColor": "#000",
                        "hoverBackgroundColor": "#fff",
                        "hoverBorderColor": "#888",
                        "hoverColor": "#000",
                        "textColor": "#555",
                        "type": "button",
                      },
                      "displayName": "ModeSwitcher__MobileButton",
                      "foldedComponentIds": Array [
                        "Button__BaseButton-sc-32rbq-4",
                        "Button-sc-32rbq-3",
                        "Button-sc-32rbq-1",
                        "Button-sc-32rbq-2",
                        "Button-sc-32rbq-0",
                        "ModeSwitcher__SwitcherButton-sc-9lbpr3-0",
                      ],
                      "propTypes": Object {
                        "activeBackgroundColor": [Function],
                        "activeBorderColor": [Function],
                        "activeColor": [Function],
                        "backgroundColor": [Function],
                        "borderColor": [Function],
                        "boxShadowColor": [Function],
                        "focusBackgroundColor": [Function],
                        "focusBorderColor": [Function],
                        "focusColor": [Function],
                        "hoverBackgroundColor": [Function],
                        "hoverBorderColor": [Function],
                        "hoverColor": [Function],
                        "textColor": [Function],
                        "type": [Function],
                      },
                      "render": [Function],
                      "styledComponentId": "ModeSwitcher__MobileButton-sc-9lbpr3-1",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hoverBackgroundColor="#fff"
                  hoverBorderColor="#888"
                  hoverColor="#000"
                  isActive={true}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <button
                    aria-pressed={true}
                    className="c10"
                    onClick={[Function]}
                    type="button"
                  >
                    <SvgIcon
                      color="currentColor"
                      icon="mobile"
                      size="22px"
                    >
                      <SvgIcon__StyledSvg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-mobile"
                        fill="currentColor"
                        focusable="false"
                        role="img"
                        size="22px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <StyledComponent
                          aria-hidden={true}
                          className="yoast-svg-icon yoast-svg-icon-mobile"
                          fill="currentColor"
                          focusable="false"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                "isStatic": false,
                                "lastClassName": "c11",
                                "rules": Array [
                                  "width:",
                                  [Function],
                                  ";height:",
                                  [Function],
                                  ";flex:none;",
                                ],
                              },
                              "displayName": "SvgIcon__StyledSvg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          role="img"
                          size="22px"
                          viewBox="0 0 1792 1792"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <svg
                            aria-hidden={true}
                            className="yoast-svg-icon yoast-svg-icon-mobile c11"
                            fill="currentColor"
                            focusable="false"
                            role="img"
                            size="22px"
                            viewBox="0 0 1792 1792"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
                            />
                          </svg>
                        </StyledComponent>
                      </SvgIcon__StyledSvg>
                    </SvgIcon>
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Mobile preview
                      </span>
                    </ScreenReaderText>
                  </button>
                </StyledComponent>
              </ModeSwitcher__MobileButton>
              <ModeSwitcher__DesktopButton
                activeBackgroundColor="#f7f7f7"
                activeBorderColor="#888"
                activeColor="#000"
                aria-pressed={false}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                focusBackgroundColor="#fff"
                focusBorderColor="#0066cd"
                focusColor="#000"
                hoverBackgroundColor="#fff"
                hoverBorderColor="#888"
                hoverColor="#000"
                isActive={false}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <StyledComponent
                  activeBackgroundColor="#f7f7f7"
                  activeBorderColor="#888"
                  activeColor="#000"
                  aria-pressed={false}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  focusBackgroundColor="#fff"
                  focusBorderColor="#0066cd"
                  focusColor="#000"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "ModeSwitcher__DesktopButton-sc-9lbpr3-2",
                        "isStatic": false,
                        "lastClassName": "c12",
                        "rules": Array [
                          "color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";box-shadow:0 1px 0 ",
                          [Function],
                          ";",
                          "&:active{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";box-shadow:inset 0 2px 5px -3px ",
                          "rgba( 0, 0, 0, 0.5 )",
                          ";}",
                          "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                          [Function],
                          ";color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";box-shadow:0 0 3px ",
                          "rgba( 8, 74, 103, 0.8 )",
                          ";}",
                          "&:hover{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";}",
                          "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                          "1px",
                          ";border-style:solid;margin:0;padding:",
                          "4px",
                          " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                          [Function],
                          ";overflow:visible;min-height:",
                          "32px",
                          ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                          "22px",
                          ";}}",
                          "border:none;border-bottom:4px solid transparent;width:31px;height:31px;border-color:",
                          [Function],
                          ";color:",
                          "#555",
                          ";transition:0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;transition-property:border-color;&:hover,&:focus{background-color:",
                          "#fff",
                          ";border:none;border-bottom:4px solid transparent;border-color:",
                          "#1e8cbe",
                          ";color:",
                          "#1e8cbe",
                          ";box-shadow:none;}",
                          "border-radius:0 3px 3px 0;",
                        ],
                      },
                      "defaultProps": Object {
                        "activeBackgroundColor": "#f7f7f7",
                        "activeBorderColor": "#888",
                        "activeColor": "#000",
                        "backgroundColor": "#f7f7f7",
                        "borderColor": "#ccc",
                        "boxShadowColor": "#ccc",
                        "focusBackgroundColor": "#fff",
                        "focusBorderColor": "#0066cd",
                        "focusColor": "#000",
                        "hoverBackgroundColor": "#fff",
                        "hoverBorderColor": "#888",
                        "hoverColor": "#000",
                        "textColor": "#555",
                        "type": "button",
                      },
                      "displayName": "ModeSwitcher__DesktopButton",
                      "foldedComponentIds": Array [
                        "Button__BaseButton-sc-32rbq-4",
                        "Button-sc-32rbq-3",
                        "Button-sc-32rbq-1",
                        "Button-sc-32rbq-2",
                        "Button-sc-32rbq-0",
                        "ModeSwitcher__SwitcherButton-sc-9lbpr3-0",
                      ],
                      "propTypes": Object {
                        "activeBackgroundColor": [Function],
                        "activeBorderColor": [Function],
                        "activeColor": [Function],
                        "backgroundColor": [Function],
                        "borderColor": [Function],
                        "boxShadowColor": [Function],
                        "focusBackgroundColor": [Function],
                        "focusBorderColor": [Function],
                        "focusColor": [Function],
                        "hoverBackgroundColor": [Function],
                        "hoverBorderColor": [Function],
                        "hoverColor": [Function],
                        "textColor": [Function],
                        "type": [Function],
                      },
                      "render": [Function],
                      "styledComponentId": "ModeSwitcher__DesktopButton-sc-9lbpr3-2",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hoverBackgroundColor="#fff"
                  hoverBorderColor="#888"
                  hoverColor="#000"
                  isActive={false}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <button
                    aria-pressed={false}
                    className="c12"
                    onClick={[Function]}
                    type="button"
                  >
                    <SvgIcon
                      color="currentColor"
                      icon="desktop"
                      size="18px"
                    >
                      <SvgIcon__StyledSvg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-desktop"
                        fill="currentColor"
                        focusable="false"
                        role="img"
                        size="18px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <StyledComponent
                          aria-hidden={true}
                          className="yoast-svg-icon yoast-svg-icon-desktop"
                          fill="currentColor"
                          focusable="false"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                "isStatic": false,
                                "lastClassName": "c13",
                                "rules": Array [
                                  "width:",
                                  [Function],
                                  ";height:",
                                  [Function],
                                  ";flex:none;",
                                ],
                              },
                              "displayName": "SvgIcon__StyledSvg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          role="img"
                          size="18px"
                          viewBox="0 0 1792 1792"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <svg
                            aria-hidden={true}
                            className="yoast-svg-icon yoast-svg-icon-desktop c13"
                            fill="currentColor"
                            focusable="false"
                            role="img"
                            size="18px"
                            viewBox="0 0 1792 1792"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
                            />
                          </svg>
                        </StyledComponent>
                      </SvgIcon__StyledSvg>
                    </SvgIcon>
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Desktop preview
                      </span>
                    </ScreenReaderText>
                  </button>
                </StyledComponent>
              </ModeSwitcher__DesktopButton>
            </div>
          </StyledComponent>
        </ModeSwitcher__Switcher>
      </ModeSwitcher>
      <SnippetEditor__EditSnippetButton
        activeBackgroundColor="#f7f7f7"
        activeBorderColor="#888"
        activeColor="#000"
        aria-expanded={true}
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        focusBackgroundColor="#fff"
        focusBorderColor="#0066cd"
        focusColor="#000"
        hoverBackgroundColor="#fff"
        hoverBorderColor="#888"
        hoverColor="#000"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <StyledComponent
          activeBackgroundColor="#f7f7f7"
          activeBorderColor="#888"
          activeColor="#000"
          aria-expanded={true}
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          focusBackgroundColor="#fff"
          focusBorderColor="#0066cd"
          focusColor="#000"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "SnippetEditor__EditSnippetButton-sc-144bmm3-1",
                "isStatic": false,
                "lastClassName": "c14",
                "rules": Array [
                  "color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";background:",
                  [Function],
                  ";box-shadow:0 1px 0 ",
                  [Function],
                  ";",
                  "&:active{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";box-shadow:inset 0 2px 5px -3px ",
                  "rgba( 0, 0, 0, 0.5 )",
                  ";}",
                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                  [Function],
                  ";color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";box-shadow:0 0 3px ",
                  "rgba( 8, 74, 103, 0.8 )",
                  ";}",
                  "&:hover{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";}",
                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                  "1px",
                  ";border-style:solid;margin:0;padding:",
                  "4px",
                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                  [Function],
                  ";overflow:visible;min-height:",
                  "32px",
                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                  "22px",
                  ";}}",
                  "height:33px;border:1px solid #dbdbdb;box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;",
                  "margin:",
                  [Function],
                  ";fill:",
                  "#555",
                  ";padding-left:8px;& svg{",
                  [Function],
                  ":7px;}",
                ],
              },
              "defaultProps": Object {
                "activeBackgroundColor": "#f7f7f7",
                "activeBorderColor": "#888",
                "activeColor": "#000",
                "backgroundColor": "#f7f7f7",
                "borderColor": "#ccc",
                "boxShadowColor": "#ccc",
                "focusBackgroundColor": "#fff",
                "focusBorderColor": "#0066cd",
                "focusColor": "#000",
                "hoverBackgroundColor": "#fff",
                "hoverBorderColor": "#888",
                "hoverColor": "#000",
                "textColor": "#555",
                "type": "button",
              },
              "displayName": "SnippetEditor__EditSnippetButton",
              "foldedComponentIds": Array [
                "Button__BaseButton-sc-32rbq-4",
                "Button-sc-32rbq-3",
                "Button-sc-32rbq-1",
                "Button-sc-32rbq-2",
                "Button-sc-32rbq-0",
                "SnippetEditor__SnippetEditorButton-sc-144bmm3-0",
              ],
              "propTypes": Object {
                "activeBackgroundColor": [Function],
                "activeBorderColor": [Function],
                "activeColor": [Function],
                "backgroundColor": [Function],
                "borderColor": [Function],
                "boxShadowColor": [Function],
                "focusBackgroundColor": [Function],
                "focusBorderColor": [Function],
                "focusColor": [Function],
                "hoverBackgroundColor": [Function],
                "hoverBorderColor": [Function],
                "hoverColor": [Function],
                "textColor": [Function],
                "type": [Function],
              },
              "render": [Function],
              "styledComponentId": "SnippetEditor__EditSnippetButton-sc-144bmm3-1",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={[Function]}
          hoverBackgroundColor="#fff"
          hoverBorderColor="#888"
          hoverColor="#000"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <button
            aria-expanded={true}
            className="c14"
            onClick={[Function]}
            type="button"
          >
            <SvgIcon
              color="currentColor"
              icon="edit"
              size="16px"
            >
              <SvgIcon__StyledSvg
                aria-hidden={true}
                className="yoast-svg-icon yoast-svg-icon-edit"
                fill="currentColor"
                focusable="false"
                role="img"
                size="16px"
                viewBox="0 0 1792 1792"
                xmlns="http://www.w3.org/2000/svg"
              >
                <StyledComponent
                  aria-hidden={true}
                  className="yoast-svg-icon yoast-svg-icon-edit"
                  fill="currentColor"
                  focusable="false"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                        "isStatic": false,
                        "lastClassName": "c15",
                        "rules": Array [
                          "width:",
                          [Function],
                          ";height:",
                          [Function],
                          ";flex:none;",
                        ],
                      },
                      "displayName": "SvgIcon__StyledSvg",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                      "target": "svg",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  role="img"
                  size="16px"
                  viewBox="0 0 1792 1792"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <svg
                    aria-hidden={true}
                    className="yoast-svg-icon yoast-svg-icon-edit c15"
                    fill="currentColor"
                    focusable="false"
                    role="img"
                    size="16px"
                    viewBox="0 0 1792 1792"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
                    />
                  </svg>
                </StyledComponent>
              </SvgIcon__StyledSvg>
            </SvgIcon>
            Edit snippet
          </button>
        </StyledComponent>
      </SnippetEditor__EditSnippetButton>
      <SnippetEditorFields
        activeField={null}
        containerPadding="0 20px"
        data={
          Object {
            "description": "Test description, %%replacement_variable%%",
            "slug": "test-slug",
            "title": "Test title",
          }
        }
        descriptionEditorFieldPlaceholder="Modify your meta description by editing it right here"
        descriptionLengthProgress={
          Object {
            "actual": 42,
            "max": 156,
            "score": 6,
          }
        }
        hoveredField={null}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        recommendedReplacementVariables={Array []}
        replacementVariables={Array []}
        titleLengthProgress={
          Object {
            "actual": 0,
            "max": 600,
            "score": 1,
          }
        }
      >
        <shared__StyledEditor
          padding="0 20px"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "shared__StyledEditor-lzs0hf-5",
                  "isStatic": false,
                  "lastClassName": "c16",
                  "rules": Array [
                    "padding:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "shared__StyledEditor",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "shared__StyledEditor-lzs0hf-5",
                "target": "section",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            padding="0 20px"
          >
            <section
              className="c16"
            >
              <shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "shared__FormSection-lzs0hf-4",
                        "isStatic": true,
                        "lastClassName": "c17",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "shared__FormSection-lzs0hf-4",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="c17"
                  >
                    <ReplacementVariableEditor
                      content="Test title"
                      editorRef={[Function]}
                      fieldId="snippet-editor-field-title"
                      isActive={false}
                      isHovered={false}
                      label="SEO title"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      recommendedReplacementVariables={Array []}
                      replacementVariables={Array []}
                      withCaret={true}
                    >
                      <shared__SimulatedLabel
                        id="6"
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared__SimulatedLabel-lzs0hf-6",
                                "isStatic": true,
                                "lastClassName": "c18",
                                "rules": Array [
                                  "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                                ],
                              },
                              "displayName": "shared__SimulatedLabel",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "shared__SimulatedLabel-lzs0hf-6",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          id="6"
                          onClick={[Function]}
                        >
                          <div
                            className="c18"
                            id="6"
                            onClick={[Function]}
                          >
                            SEO title
                          </div>
                        </StyledComponent>
                      </shared__SimulatedLabel>
                      <shared__TriggerReplacementVariableSuggestionsButton
                        activeBackgroundColor="#f7f7f7"
                        activeBorderColor="#888"
                        activeColor="#000"
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        focusBackgroundColor="#fff"
                        focusBorderColor="#0066cd"
                        focusColor="#000"
                        hoverBackgroundColor="#fff"
                        hoverBorderColor="#888"
                        hoverColor="#000"
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <StyledComponent
                          activeBackgroundColor="#f7f7f7"
                          activeBorderColor="#888"
                          activeColor="#000"
                          backgroundColor="#f7f7f7"
                          borderColor="#ccc"
                          boxShadowColor="#ccc"
                          focusBackgroundColor="#fff"
                          focusBorderColor="#0066cd"
                          focusColor="#000"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared__TriggerReplacementVariableSuggestionsButton-lzs0hf-7",
                                "isStatic": false,
                                "lastClassName": "c19",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";background:",
                                  [Function],
                                  ";box-shadow:0 1px 0 ",
                                  [Function],
                                  ";",
                                  "&:active{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";box-shadow:inset 0 2px 5px -3px ",
                                  "rgba( 0, 0, 0, 0.5 )",
                                  ";}",
                                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                                  [Function],
                                  ";color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";box-shadow:0 0 3px ",
                                  "rgba( 8, 74, 103, 0.8 )",
                                  ";}",
                                  "&:hover{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";}",
                                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                                  "1px",
                                  ";border-style:solid;margin:0;padding:",
                                  "4px",
                                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                                  [Function],
                                  ";overflow:visible;min-height:",
                                  "32px",
                                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                                  "22px",
                                  ";}}",
                                  "box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;padding-left:8px;height:33px;border:1px solid #dbdbdb;font-size:13px;& svg{",
                                  [Function],
                                  ":7px;fill:",
                                  "#555",
                                  ";}",
                                ],
                              },
                              "defaultProps": Object {
                                "activeBackgroundColor": "#f7f7f7",
                                "activeBorderColor": "#888",
                                "activeColor": "#000",
                                "backgroundColor": "#f7f7f7",
                                "borderColor": "#ccc",
                                "boxShadowColor": "#ccc",
                                "focusBackgroundColor": "#fff",
                                "focusBorderColor": "#0066cd",
                                "focusColor": "#000",
                                "hoverBackgroundColor": "#fff",
                                "hoverBorderColor": "#888",
                                "hoverColor": "#000",
                                "textColor": "#555",
                                "type": "button",
                              },
                              "displayName": "shared__TriggerReplacementVariableSuggestionsButton",
                              "foldedComponentIds": Array [
                                "Button__BaseButton-sc-32rbq-4",
                                "Button-sc-32rbq-3",
                                "Button-sc-32rbq-1",
                                "Button-sc-32rbq-2",
                                "Button-sc-32rbq-0",
                              ],
                              "propTypes": Object {
                                "activeBackgroundColor": [Function],
                                "activeBorderColor": [Function],
                                "activeColor": [Function],
                                "backgroundColor": [Function],
                                "borderColor": [Function],
                                "boxShadowColor": [Function],
                                "focusBackgroundColor": [Function],
                                "focusBorderColor": [Function],
                                "focusColor": [Function],
                                "hoverBackgroundColor": [Function],
                                "hoverBorderColor": [Function],
                                "hoverColor": [Function],
                                "textColor": [Function],
                                "type": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "shared__TriggerReplacementVariableSuggestionsButton-lzs0hf-7",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverBackgroundColor="#fff"
                          hoverBorderColor="#888"
                          hoverColor="#000"
                          onClick={[Function]}
                          textColor="#555"
                          type="button"
                        >
                          <button
                            className="c19"
                            onClick={[Function]}
                            type="button"
                          >
                            <SvgIcon
                              color="currentColor"
                              icon="plus-circle"
                              size="16px"
                            >
                              <SvgIcon__StyledSvg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="16px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <StyledComponent
                                  aria-hidden={true}
                                  className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                  fill="currentColor"
                                  focusable="false"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                        "isStatic": false,
                                        "lastClassName": "c15",
                                        "rules": Array [
                                          "width:",
                                          [Function],
                                          ";height:",
                                          [Function],
                                          ";flex:none;",
                                        ],
                                      },
                                      "displayName": "SvgIcon__StyledSvg",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                      "target": "svg",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  role="img"
                                  size="16px"
                                  viewBox="0 0 1792 1792"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="yoast-svg-icon yoast-svg-icon-plus-circle c15"
                                    fill="currentColor"
                                    focusable="false"
                                    role="img"
                                    size="16px"
                                    viewBox="0 0 1792 1792"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M1344 960v-128q0-26-19-45t-45-19h-256v-256q0-26-19-45t-45-19h-128q-26 0-45 19t-19 45v256h-256q-26 0-45 19t-19 45v128q0 26 19 45t45 19h256v256q0 26 19 45t45 19h128q26 0 45-19t19-45v-256h256q26 0 45-19t19-45zm320-64q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"
                                    />
                                  </svg>
                                </StyledComponent>
                              </SvgIcon__StyledSvg>
                            </SvgIcon>
                            Insert snippet variable
                          </button>
                        </StyledComponent>
                      </shared__TriggerReplacementVariableSuggestionsButton>
                      <shared
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {},
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared-lzs0hf-1",
                                "isStatic": false,
                                "lastClassName": "c20",
                                "rules": Array [
                                  "flex:0 1 100%;border:1px solid ",
                                  [Function],
                                  ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                  [Function],
                                  ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                  ".public-DraftStyleDefault-block{line-height:24px;}",
                                  "&::before{display:block;position:absolute;top:-1px;",
                                  [Function],
                                  ":-25px;width:24px;height:24px;background-image:url( ",
                                  [Function],
                                  " );background-size:25px;content:\\"\\";}",
                                ],
                              },
                              "displayName": "shared",
                              "foldedComponentIds": Array [
                                "shared__InputContainer-lzs0hf-0",
                                "shared__TitleInputContainer-lzs0hf-2",
                              ],
                              "render": [Function],
                              "styledComponentId": "shared-lzs0hf-1",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isActive={false}
                          isHovered={false}
                          onClick={[Function]}
                        >
                          <div
                            className="c20"
                            onClick={[Function]}
                          >
                            <ReplacementVariableEditorStandalone
                              ariaLabelledBy="6"
                              content="Test title"
                              fieldId="snippet-editor-field-title"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              recommendedReplacementVariables={Array []}
                              replacementVariables={Array []}
                            >
                              <div />
                            </ReplacementVariableEditorStandalone>
                          </div>
                        </StyledComponent>
                      </shared>
                    </ReplacementVariableEditor>
                    <ProgressBar
                      aria-hidden="true"
                      backgroundColor="#f7f7f7"
                      borderColor="#ddd"
                      max={600}
                      progressColor="#dc3232"
                      value={0}
                    >
                      <StyledComponent
                        aria-hidden="true"
                        backgroundColor="#f7f7f7"
                        borderColor="#ddd"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ProgressBar-sc-9g9yx6-0",
                              "isStatic": false,
                              "lastClassName": "c25",
                              "rules": Array [
                                "box-sizing:border-box;width:100%;height:8px;display:block;margin-top:8px;appearance:none;background-color:",
                                [Function],
                                ";border:1px solid ",
                                [Function],
                                ";::-webkit-progress-bar{background-color:",
                                [Function],
                                ";}::-webkit-progress-value{background-color:",
                                [Function],
                                ";transition:width 250ms;}::-moz-progress-bar{background-color:",
                                [Function],
                                ";}::-ms-fill{background-color:",
                                [Function],
                                ";border:0;}",
                              ],
                            },
                            "defaultProps": Object {
                              "aria-hidden": "true",
                              "backgroundColor": "#f7f7f7",
                              "borderColor": "#ddd",
                              "max": 1,
                              "progressColor": "#7ad03a",
                              "value": 0,
                            },
                            "displayName": "ProgressBar",
                            "foldedComponentIds": Array [],
                            "propTypes": Object {
                              "aria-hidden": [Function],
                              "backgroundColor": [Function],
                              "borderColor": [Function],
                              "max": [Function],
                              "progressColor": [Function],
                              "value": [Function],
                            },
                            "render": [Function],
                            "styledComponentId": "ProgressBar-sc-9g9yx6-0",
                            "target": "progress",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        max={600}
                        progressColor="#dc3232"
                        value={0}
                      >
                        <progress
                          aria-hidden="true"
                          className="c21"
                          max={600}
                          value={0}
                        />
                      </StyledComponent>
                    </ProgressBar>
                  </div>
                </StyledComponent>
              </shared__FormSection>
              <shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "shared__FormSection-lzs0hf-4",
                        "isStatic": true,
                        "lastClassName": "c17",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "shared__FormSection-lzs0hf-4",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="c17"
                  >
                    <shared__SimulatedLabel
                      id="snippet-editor-field-5-slug"
                      onClick={[Function]}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "shared__SimulatedLabel-lzs0hf-6",
                              "isStatic": true,
                              "lastClassName": "c18",
                              "rules": Array [
                                "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                              ],
                            },
                            "displayName": "shared__SimulatedLabel",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "shared__SimulatedLabel-lzs0hf-6",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        id="snippet-editor-field-5-slug"
                        onClick={[Function]}
                      >
                        <div
                          className="c18"
                          id="snippet-editor-field-5-slug"
                          onClick={[Function]}
                        >
                          Slug
                        </div>
                      </StyledComponent>
                    </shared__SimulatedLabel>
                    <shared
                      isActive={false}
                      isHovered={false}
                      onClick={[Function]}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [
                              Object {},
                            ],
                            "componentStyle": ComponentStyle {
                              "componentId": "shared-lzs0hf-1",
                              "isStatic": false,
                              "lastClassName": "c22",
                              "rules": Array [
                                "flex:0 1 100%;border:1px solid ",
                                [Function],
                                ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                [Function],
                                ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                "&::before{display:block;position:absolute;top:-1px;",
                                [Function],
                                ":-25px;width:24px;height:24px;background-image:url( ",
                                [Function],
                                " );background-size:25px;content:\\"\\";}",
                              ],
                            },
                            "displayName": "shared",
                            "foldedComponentIds": Array [
                              "shared__InputContainer-lzs0hf-0",
                            ],
                            "render": [Function],
                            "styledComponentId": "shared-lzs0hf-1",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <div
                          className="c22"
                          onClick={[Function]}
                        >
                          <SnippetEditorFields__SlugInput
                            aria-labelledby="snippet-editor-field-5-slug"
                            id="snippet-editor-field-slug"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            value="test-slug"
                          >
                            <StyledComponent
                              aria-labelledby="snippet-editor-field-5-slug"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "SnippetEditorFields__SlugInput-sc-1ioqi3y-0",
                                    "isStatic": true,
                                    "lastClassName": "c23",
                                    "rules": Array [
                                      "border:none;width:100%;height:inherit;line-height:inherit;font-family:inherit;font-size:inherit;color:inherit;&:focus{outline:0;}",
                                    ],
                                  },
                                  "displayName": "SnippetEditorFields__SlugInput",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "SnippetEditorFields__SlugInput-sc-1ioqi3y-0",
                                  "target": "input",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={[Function]}
                              id="snippet-editor-field-slug"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              value="test-slug"
                            >
                              <input
                                aria-labelledby="snippet-editor-field-5-slug"
                                className="c23"
                                id="snippet-editor-field-slug"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                value="test-slug"
                              />
                            </StyledComponent>
                          </SnippetEditorFields__SlugInput>
                        </div>
                      </StyledComponent>
                    </shared>
                  </div>
                </StyledComponent>
              </shared__FormSection>
              <shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "shared__FormSection-lzs0hf-4",
                        "isStatic": true,
                        "lastClassName": "c17",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "shared__FormSection-lzs0hf-4",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="c17"
                  >
                    <ReplacementVariableEditor
                      content="Test description, %%replacement_variable%%"
                      editorRef={[Function]}
                      fieldId="snippet-editor-field-description"
                      isActive={false}
                      isHovered={false}
                      label="Meta description"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      placeholder="Modify your meta description by editing it right here"
                      recommendedReplacementVariables={Array []}
                      replacementVariables={Array []}
                      type="description"
                      withCaret={true}
                    >
                      <shared__SimulatedLabel
                        id="7"
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared__SimulatedLabel-lzs0hf-6",
                                "isStatic": true,
                                "lastClassName": "c18",
                                "rules": Array [
                                  "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                                ],
                              },
                              "displayName": "shared__SimulatedLabel",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "shared__SimulatedLabel-lzs0hf-6",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          id="7"
                          onClick={[Function]}
                        >
                          <div
                            className="c18"
                            id="7"
                            onClick={[Function]}
                          >
                            Meta description
                          </div>
                        </StyledComponent>
                      </shared__SimulatedLabel>
                      <shared__TriggerReplacementVariableSuggestionsButton
                        activeBackgroundColor="#f7f7f7"
                        activeBorderColor="#888"
                        activeColor="#000"
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        focusBackgroundColor="#fff"
                        focusBorderColor="#0066cd"
                        focusColor="#000"
                        hoverBackgroundColor="#fff"
                        hoverBorderColor="#888"
                        hoverColor="#000"
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <StyledComponent
                          activeBackgroundColor="#f7f7f7"
                          activeBorderColor="#888"
                          activeColor="#000"
                          backgroundColor="#f7f7f7"
                          borderColor="#ccc"
                          boxShadowColor="#ccc"
                          focusBackgroundColor="#fff"
                          focusBorderColor="#0066cd"
                          focusColor="#000"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared__TriggerReplacementVariableSuggestionsButton-lzs0hf-7",
                                "isStatic": false,
                                "lastClassName": "c19",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";background:",
                                  [Function],
                                  ";box-shadow:0 1px 0 ",
                                  [Function],
                                  ";",
                                  "&:active{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";box-shadow:inset 0 2px 5px -3px ",
                                  "rgba( 0, 0, 0, 0.5 )",
                                  ";}",
                                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                                  [Function],
                                  ";color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";box-shadow:0 0 3px ",
                                  "rgba( 8, 74, 103, 0.8 )",
                                  ";}",
                                  "&:hover{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";}",
                                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                                  "1px",
                                  ";border-style:solid;margin:0;padding:",
                                  "4px",
                                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                                  [Function],
                                  ";overflow:visible;min-height:",
                                  "32px",
                                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                                  "22px",
                                  ";}}",
                                  "box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;padding-left:8px;height:33px;border:1px solid #dbdbdb;font-size:13px;& svg{",
                                  [Function],
                                  ":7px;fill:",
                                  "#555",
                                  ";}",
                                ],
                              },
                              "defaultProps": Object {
                                "activeBackgroundColor": "#f7f7f7",
                                "activeBorderColor": "#888",
                                "activeColor": "#000",
                                "backgroundColor": "#f7f7f7",
                                "borderColor": "#ccc",
                                "boxShadowColor": "#ccc",
                                "focusBackgroundColor": "#fff",
                                "focusBorderColor": "#0066cd",
                                "focusColor": "#000",
                                "hoverBackgroundColor": "#fff",
                                "hoverBorderColor": "#888",
                                "hoverColor": "#000",
                                "textColor": "#555",
                                "type": "button",
                              },
                              "displayName": "shared__TriggerReplacementVariableSuggestionsButton",
                              "foldedComponentIds": Array [
                                "Button__BaseButton-sc-32rbq-4",
                                "Button-sc-32rbq-3",
                                "Button-sc-32rbq-1",
                                "Button-sc-32rbq-2",
                                "Button-sc-32rbq-0",
                              ],
                              "propTypes": Object {
                                "activeBackgroundColor": [Function],
                                "activeBorderColor": [Function],
                                "activeColor": [Function],
                                "backgroundColor": [Function],
                                "borderColor": [Function],
                                "boxShadowColor": [Function],
                                "focusBackgroundColor": [Function],
                                "focusBorderColor": [Function],
                                "focusColor": [Function],
                                "hoverBackgroundColor": [Function],
                                "hoverBorderColor": [Function],
                                "hoverColor": [Function],
                                "textColor": [Function],
                                "type": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "shared__TriggerReplacementVariableSuggestionsButton-lzs0hf-7",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverBackgroundColor="#fff"
                          hoverBorderColor="#888"
                          hoverColor="#000"
                          onClick={[Function]}
                          textColor="#555"
                          type="button"
                        >
                          <button
                            className="c19"
                            onClick={[Function]}
                            type="button"
                          >
                            <SvgIcon
                              color="currentColor"
                              icon="plus-circle"
                              size="16px"
                            >
                              <SvgIcon__StyledSvg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="16px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <StyledComponent
                                  aria-hidden={true}
                                  className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                  fill="currentColor"
                                  focusable="false"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                        "isStatic": false,
                                        "lastClassName": "c15",
                                        "rules": Array [
                                          "width:",
                                          [Function],
                                          ";height:",
                                          [Function],
                                          ";flex:none;",
                                        ],
                                      },
                                      "displayName": "SvgIcon__StyledSvg",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                      "target": "svg",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  role="img"
                                  size="16px"
                                  viewBox="0 0 1792 1792"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="yoast-svg-icon yoast-svg-icon-plus-circle c15"
                                    fill="currentColor"
                                    focusable="false"
                                    role="img"
                                    size="16px"
                                    viewBox="0 0 1792 1792"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M1344 960v-128q0-26-19-45t-45-19h-256v-256q0-26-19-45t-45-19h-128q-26 0-45 19t-19 45v256h-256q-26 0-45 19t-19 45v128q0 26 19 45t45 19h256v256q0 26 19 45t45 19h128q26 0 45-19t19-45v-256h256q26 0 45-19t19-45zm320-64q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"
                                    />
                                  </svg>
                                </StyledComponent>
                              </SvgIcon__StyledSvg>
                            </SvgIcon>
                            Insert snippet variable
                          </button>
                        </StyledComponent>
                      </shared__TriggerReplacementVariableSuggestionsButton>
                      <shared
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {},
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared-lzs0hf-1",
                                "isStatic": false,
                                "lastClassName": "c24",
                                "rules": Array [
                                  "flex:0 1 100%;border:1px solid ",
                                  [Function],
                                  ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                  [Function],
                                  ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                  "min-height:72px;padding:2px 6px;line-height:24px;.public-DraftEditorPlaceholder-root{color:",
                                  "#616161",
                                  ";}.public-DraftEditorPlaceholder-hasFocus{color:",
                                  "#616161",
                                  ";}",
                                  "&::before{display:block;position:absolute;top:-1px;",
                                  [Function],
                                  ":-25px;width:24px;height:24px;background-image:url( ",
                                  [Function],
                                  " );background-size:25px;content:\\"\\";}",
                                ],
                              },
                              "displayName": "shared",
                              "foldedComponentIds": Array [
                                "shared__InputContainer-lzs0hf-0",
                                "shared__DescriptionInputContainer-lzs0hf-3",
                              ],
                              "render": [Function],
                              "styledComponentId": "shared-lzs0hf-1",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isActive={false}
                          isHovered={false}
                          onClick={[Function]}
                        >
                          <div
                            className="c24"
                            onClick={[Function]}
                          >
                            <ReplacementVariableEditorStandalone
                              ariaLabelledBy="7"
                              content="Test description, %%replacement_variable%%"
                              fieldId="snippet-editor-field-description"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              placeholder="Modify your meta description by editing it right here"
                              recommendedReplacementVariables={Array []}
                              replacementVariables={Array []}
                            >
                              <div />
                            </ReplacementVariableEditorStandalone>
                          </div>
                        </StyledComponent>
                      </shared>
                    </ReplacementVariableEditor>
                    <ProgressBar
                      aria-hidden="true"
                      backgroundColor="#f7f7f7"
                      borderColor="#ddd"
                      max={156}
                      progressColor="#ee7c1b"
                      value={42}
                    >
                      <StyledComponent
                        aria-hidden="true"
                        backgroundColor="#f7f7f7"
                        borderColor="#ddd"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ProgressBar-sc-9g9yx6-0",
                              "isStatic": false,
                              "lastClassName": "c25",
                              "rules": Array [
                                "box-sizing:border-box;width:100%;height:8px;display:block;margin-top:8px;appearance:none;background-color:",
                                [Function],
                                ";border:1px solid ",
                                [Function],
                                ";::-webkit-progress-bar{background-color:",
                                [Function],
                                ";}::-webkit-progress-value{background-color:",
                                [Function],
                                ";transition:width 250ms;}::-moz-progress-bar{background-color:",
                                [Function],
                                ";}::-ms-fill{background-color:",
                                [Function],
                                ";border:0;}",
                              ],
                            },
                            "defaultProps": Object {
                              "aria-hidden": "true",
                              "backgroundColor": "#f7f7f7",
                              "borderColor": "#ddd",
                              "max": 1,
                              "progressColor": "#7ad03a",
                              "value": 0,
                            },
                            "displayName": "ProgressBar",
                            "foldedComponentIds": Array [],
                            "propTypes": Object {
                              "aria-hidden": [Function],
                              "backgroundColor": [Function],
                              "borderColor": [Function],
                              "max": [Function],
                              "progressColor": [Function],
                              "value": [Function],
                            },
                            "render": [Function],
                            "styledComponentId": "ProgressBar-sc-9g9yx6-0",
                            "target": "progress",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        max={156}
                        progressColor="#ee7c1b"
                        value={42}
                      >
                        <progress
                          aria-hidden="true"
                          className="c25"
                          max={156}
                          value={42}
                        />
                      </StyledComponent>
                    </ProgressBar>
                  </div>
                </StyledComponent>
              </shared__FormSection>
            </section>
          </StyledComponent>
        </shared__StyledEditor>
      </SnippetEditorFields>
      <SnippetEditor__CloseEditorButton
        activeBackgroundColor="#f7f7f7"
        activeBorderColor="#888"
        activeColor="#000"
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        focusBackgroundColor="#fff"
        focusBorderColor="#0066cd"
        focusColor="#000"
        hoverBackgroundColor="#fff"
        hoverBorderColor="#888"
        hoverColor="#000"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <StyledComponent
          activeBackgroundColor="#f7f7f7"
          activeBorderColor="#888"
          activeColor="#000"
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          focusBackgroundColor="#fff"
          focusBorderColor="#0066cd"
          focusColor="#000"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "SnippetEditor__CloseEditorButton-sc-144bmm3-2",
                "isStatic": false,
                "lastClassName": "c26",
                "rules": Array [
                  "color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";background:",
                  [Function],
                  ";box-shadow:0 1px 0 ",
                  [Function],
                  ";",
                  "&:active{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";box-shadow:inset 0 2px 5px -3px ",
                  "rgba( 0, 0, 0, 0.5 )",
                  ";}",
                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                  [Function],
                  ";color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";box-shadow:0 0 3px ",
                  "rgba( 8, 74, 103, 0.8 )",
                  ";}",
                  "&:hover{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";}",
                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                  "1px",
                  ";border-style:solid;margin:0;padding:",
                  "4px",
                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                  [Function],
                  ";overflow:visible;min-height:",
                  "32px",
                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                  "22px",
                  ";}}",
                  "height:33px;border:1px solid #dbdbdb;box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;",
                  "margin-top:24px;",
                ],
              },
              "defaultProps": Object {
                "activeBackgroundColor": "#f7f7f7",
                "activeBorderColor": "#888",
                "activeColor": "#000",
                "backgroundColor": "#f7f7f7",
                "borderColor": "#ccc",
                "boxShadowColor": "#ccc",
                "focusBackgroundColor": "#fff",
                "focusBorderColor": "#0066cd",
                "focusColor": "#000",
                "hoverBackgroundColor": "#fff",
                "hoverBorderColor": "#888",
                "hoverColor": "#000",
                "textColor": "#555",
                "type": "button",
              },
              "displayName": "SnippetEditor__CloseEditorButton",
              "foldedComponentIds": Array [
                "Button__BaseButton-sc-32rbq-4",
                "Button-sc-32rbq-3",
                "Button-sc-32rbq-1",
                "Button-sc-32rbq-2",
                "Button-sc-32rbq-0",
                "SnippetEditor__SnippetEditorButton-sc-144bmm3-0",
              ],
              "propTypes": Object {
                "activeBackgroundColor": [Function],
                "activeBorderColor": [Function],
                "activeColor": [Function],
                "backgroundColor": [Function],
                "borderColor": [Function],
                "boxShadowColor": [Function],
                "focusBackgroundColor": [Function],
                "focusBorderColor": [Function],
                "focusColor": [Function],
                "hoverBackgroundColor": [Function],
                "hoverBorderColor": [Function],
                "hoverColor": [Function],
                "textColor": [Function],
                "type": [Function],
              },
              "render": [Function],
              "styledComponentId": "SnippetEditor__CloseEditorButton-sc-144bmm3-2",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          hoverBackgroundColor="#fff"
          hoverBorderColor="#888"
          hoverColor="#000"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <button
            className="c26"
            onClick={[Function]}
            type="button"
          >
            Close snippet editor
          </button>
        </StyledComponent>
      </SnippetEditor__CloseEditorButton>
    </div>
  </ErrorBoundary>
</SnippetEditor>
`;

exports[`SnippetEditor passes replacement variables to the title and description editor 1`] = `
.c21 {
  box-sizing: border-box;
  width: 100%;
  height: 8px;
  display: block;
  margin-top: 8px;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background-color: #f7f7f7;
  border: 1px solid #ddd;
}

.c21::-webkit-progress-bar {
  background-color: #f7f7f7;
}

.c21::-webkit-progress-value {
  background-color: #dc3232;
  -webkit-transition: width 250ms;
  transition: width 250ms;
}

.c21::-moz-progress-bar {
  background-color: #dc3232;
}

.c21::-ms-fill {
  background-color: #dc3232;
  border: 0;
}

.c25 {
  box-sizing: border-box;
  width: 100%;
  height: 8px;
  display: block;
  margin-top: 8px;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background-color: #f7f7f7;
  border: 1px solid #ddd;
}

.c25::-webkit-progress-bar {
  background-color: #f7f7f7;
}

.c25::-webkit-progress-value {
  background-color: #ee7c1b;
  -webkit-transition: width 250ms;
  transition: width 250ms;
}

.c25::-moz-progress-bar {
  background-color: #ee7c1b;
}

.c25::-ms-fill {
  background-color: #ee7c1b;
  border: 0;
}

.c17 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  margin: 24px 0 0 0;
}

.c16 {
  padding: 0 20px;
}

.c18 {
  -webkit-flex: 1 1 200px;
  -ms-flex: 1 1 200px;
  flex: 1 1 200px;
  min-width: 200px;
  cursor: pointer;
  font-size: 16px;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin: 4px 0;
}

.c19 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  padding-left: 8px;
  height: 33px;
  border: 1px solid #dbdbdb;
  font-size: 13px;
}

.c19:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c19::-moz-focus-inner {
  border-width: 0;
}

.c19:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c19:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c19 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c19 svg {
  margin-right: 7px;
  fill: #555;
}

.c0 {
  border-bottom: 1px hidden #fff;
  border-radius: 2px;
  box-shadow: 0 1px 2px rgba(0,0,0,.2);
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  max-width: 600px;
  box-sizing: border-box;
  font-size: 14px;
}

.c2 {
  cursor: pointer;
  position: relative;
}

.c3 {
  color: #1e0fbe;
  -webkit-text-decoration: none;
  text-decoration: none;
  font-size: 18px;
  line-height: 1.2;
  font-weight: normal;
  margin: 0;
  display: inline-block;
  overflow: hidden;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c4 {
  display: inline-block;
  font-size: 16px;
  line-height: 1.2em;
  max-height: 2.4em;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c5 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  white-space: nowrap;
  font-size: 14px;
}

.c6 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  white-space: nowrap;
  font-size: 14px;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 100%;
}

.c8 {
  color: #545454;
  cursor: pointer;
  position: relative;
  max-width: 600px;
  font-size: 13px;
  font-size: 14px;
  line-height: 20px;
}

.c1 {
  padding: 8px 16px;
}

.c7 {
  border: 0;
  border-bottom: 1px solid #DFE1E5;
  margin: 0;
}

.c23 {
  border: none;
  width: 100%;
  height: inherit;
  line-height: inherit;
  font-family: inherit;
  font-size: inherit;
  color: inherit;
}

.c23:focus {
  outline: 0;
}

.c20 {
  -webkit-flex: 0 1 100%;
  -ms-flex: 0 1 100%;
  flex: 0 1 100%;
  border: 1px solid #ddd;
  padding: 3px 5px;
  box-sizing: border-box;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  cursor: text;
}

.c20 .public-DraftStyleDefault-block {
  line-height: 24px;
}

.c20::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width%3D%221792%22%20height%3D%221792%22%20viewBox%3D%220%200%201792%201792%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20fill%3D%22transparent%22%20d%3D%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20%2F%3E%3C%2Fsvg%3E );
  background-size: 25px;
  content: "";
}

.c22 {
  -webkit-flex: 0 1 100%;
  -ms-flex: 0 1 100%;
  flex: 0 1 100%;
  border: 1px solid #ddd;
  padding: 3px 5px;
  box-sizing: border-box;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  cursor: text;
}

.c22::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width%3D%221792%22%20height%3D%221792%22%20viewBox%3D%220%200%201792%201792%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20fill%3D%22transparent%22%20d%3D%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20%2F%3E%3C%2Fsvg%3E );
  background-size: 25px;
  content: "";
}

.c24 {
  -webkit-flex: 0 1 100%;
  -ms-flex: 0 1 100%;
  flex: 0 1 100%;
  border: 1px solid #ddd;
  padding: 3px 5px;
  box-sizing: border-box;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  cursor: text;
  min-height: 72px;
  padding: 2px 6px;
  line-height: 24px;
}

.c24 .public-DraftEditorPlaceholder-root {
  color: #616161;
}

.c24 .public-DraftEditorPlaceholder-hasFocus {
  color: #616161;
}

.c24::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width%3D%221792%22%20height%3D%221792%22%20viewBox%3D%220%200%201792%201792%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20fill%3D%22transparent%22%20d%3D%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20%2F%3E%3C%2Fsvg%3E );
  background-size: 25px;
  content: "";
}

.c10 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: #555;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 3px 0 0 3px;
}

.c10:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c10::-moz-focus-inner {
  border-width: 0;
}

.c10:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c10:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c10 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c10:hover,
.c10:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
  box-shadow: none;
}

.c12 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: transparent;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 0 3px 3px 0;
}

.c12:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c12::-moz-focus-inner {
  border-width: 0;
}

.c12:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c12:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c12 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c12:hover,
.c12:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
  box-shadow: none;
}

.c9 {
  display: inline-block;
  margin-top: 10px;
  border: 1px solid #dbdbdb;
  border-radius: 4px;
  background-color: #f7f7f7;
  vertical-align: top;
}

.c14 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin: 10px 0 0 4px;
  fill: #555;
  padding-left: 8px;
}

.c14:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c14::-moz-focus-inner {
  border-width: 0;
}

.c14:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c14:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c14 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c14 svg {
  margin-right: 7px;
}

.c26 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin-top: 24px;
}

.c26:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c26::-moz-focus-inner {
  border-width: 0;
}

.c26:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c26:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c26 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c11 {
  width: 22px;
  height: 22px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c13 {
  width: 18px;
  height: 18px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c15 {
  width: 16px;
  height: 16px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c19::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c10::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c12::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c14::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c26::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

<SnippetEditor
  baseUrl="http://example.org/"
  data={
    Object {
      "description": "Test description, %%replacement_variable%%",
      "slug": "test-slug",
      "title": "Test title",
    }
  }
  date=""
  descriptionEditorFieldPlaceholder=""
  descriptionLengthProgress={
    Object {
      "actual": 0,
      "max": 156,
      "score": 0,
    }
  }
  hasPaperStyle={true}
  locale="en"
  mapEditorDataToPreview={null}
  mode="mobile"
  onChange={[MockFunction]}
  onChangeAnalysisData={[Function]}
  recommendedReplacementVariables={Array []}
  replacementVariables={
    Array [
      Object {
        "name": "title",
        "value": "Title!!!",
      },
      Object {
        "name": "excerpt",
        "value": "Excerpt!!!",
      },
    ]
  }
  showCloseButton={true}
  titleLengthProgress={
    Object {
      "actual": 0,
      "max": 600,
      "score": 0,
    }
  }
  wordsToHighlight={Array []}
>
  <ErrorBoundary>
    <div>
      <SnippetPreview
        activeField={null}
        breadcrumbs={null}
        date=""
        description="Test description, %%replacement_variable%%"
        hoveredField={null}
        isAmp={false}
        keyword=""
        locale="en"
        mode="mobile"
        onHover={[Function]}
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        title="Test title"
        url="example.org/test-slug"
        wordsToHighlight={Array []}
      >
        <section>
          <SnippetPreview__MobileContainer
            padding={20}
            width={640}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "SnippetPreview__MobileContainer-sc-1hxg8jo-1",
                    "isStatic": true,
                    "lastClassName": "c0",
                    "rules": Array [
                      "border-bottom:1px hidden #fff;border-radius:2px;box-shadow:0 1px 2px rgba(0,0,0,.2);font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;max-width:",
                      "600",
                      "px;box-sizing:border-box;font-size:14px;",
                    ],
                  },
                  "displayName": "SnippetPreview__MobileContainer",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "SnippetPreview__MobileContainer-sc-1hxg8jo-1",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              padding={20}
              width={640}
            >
              <div
                className="c0"
                width={640}
              >
                <SnippetPreview__MobilePartContainer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__MobilePartContainer-sc-1hxg8jo-12",
                          "isStatic": true,
                          "lastClassName": "c1",
                          "rules": Array [
                            "padding:8px 16px;",
                          ],
                        },
                        "displayName": "SnippetPreview__MobilePartContainer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__MobilePartContainer-sc-1hxg8jo-12",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="c1"
                    >
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          SEO title preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__BaseTitle
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__BaseTitle-sc-1hxg8jo-2",
                                "isStatic": true,
                                "lastClassName": "c2",
                                "rules": Array [
                                  "cursor:pointer;position:relative;",
                                ],
                              },
                              "displayName": "SnippetPreview__BaseTitle",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__BaseTitle-sc-1hxg8jo-2",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                        >
                          <div
                            className="c2"
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                          >
                            <SnippetPreview__TitleBounded>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__TitleBounded-sc-1hxg8jo-5",
                                      "isStatic": true,
                                      "lastClassName": "c3",
                                      "rules": Array [
                                        "color:",
                                        "#1e0fbe",
                                        ";text-decoration:none;font-size:18px;line-height:1.2;font-weight:normal;margin:0;display:inline-block;overflow:hidden;max-width:",
                                        "600",
                                        "px;vertical-align:top;text-overflow:ellipsis;",
                                        "max-width:",
                                        "600",
                                        "px;vertical-align:top;text-overflow:ellipsis;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__TitleBounded",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__Title-sc-1hxg8jo-4",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__TitleBounded-sc-1hxg8jo-5",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="c3"
                                >
                                  <SnippetPreview__TitleUnboundedMobile>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "SnippetPreview__TitleUnboundedMobile-sc-1hxg8jo-7",
                                            "isStatic": true,
                                            "lastClassName": "c4",
                                            "rules": Array [
                                              "display:inline-block;font-size:16px;line-height:1.2em;max-height:2.4em;overflow:hidden;text-overflow:ellipsis;",
                                            ],
                                          },
                                          "displayName": "SnippetPreview__TitleUnboundedMobile",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "SnippetPreview__TitleUnboundedMobile-sc-1hxg8jo-7",
                                          "target": "span",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={[Function]}
                                    >
                                      <span
                                        className="c4"
                                      >
                                        Test title
                                      </span>
                                    </StyledComponent>
                                  </SnippetPreview__TitleUnboundedMobile>
                                </div>
                              </StyledComponent>
                            </SnippetPreview__TitleBounded>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__BaseTitle>
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          Url preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__BaseUrl>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__BaseUrl-sc-1hxg8jo-8",
                                "isStatic": true,
                                "lastClassName": "c5",
                                "rules": Array [
                                  "display:inline-block;color:",
                                  "#006621",
                                  ";cursor:pointer;position:relative;max-width:90%;white-space:nowrap;font-size:14px;",
                                ],
                              },
                              "displayName": "SnippetPreview__BaseUrl",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__BaseUrl-sc-1hxg8jo-8",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <div
                            className="c5"
                          >
                            <SnippetPreview__BaseUrlOverflowContainer
                              onMouseEnter={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__BaseUrlOverflowContainer-sc-1hxg8jo-9",
                                      "isStatic": true,
                                      "lastClassName": "c6",
                                      "rules": Array [
                                        "display:inline-block;color:",
                                        "#006621",
                                        ";cursor:pointer;position:relative;max-width:90%;white-space:nowrap;font-size:14px;",
                                        "overflow:hidden;text-overflow:ellipsis;max-width:100%;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__BaseUrlOverflowContainer",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__BaseUrl-sc-1hxg8jo-8",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__BaseUrlOverflowContainer-sc-1hxg8jo-9",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                onMouseEnter={[Function]}
                                onMouseLeave={[Function]}
                                onMouseUp={[Function]}
                              >
                                <div
                                  className="c6"
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseUp={[Function]}
                                >
                                  example.org â€º test-slug
                                </div>
                              </StyledComponent>
                            </SnippetPreview__BaseUrlOverflowContainer>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__BaseUrl>
                    </div>
                  </StyledComponent>
                </SnippetPreview__MobilePartContainer>
                <SnippetPreview__Separator>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__Separator-sc-1hxg8jo-16",
                          "isStatic": true,
                          "lastClassName": "c7",
                          "rules": Array [
                            "border:0;border-bottom:1px solid #DFE1E5;margin:0;",
                          ],
                        },
                        "displayName": "SnippetPreview__Separator",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__Separator-sc-1hxg8jo-16",
                        "target": "hr",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <hr
                      className="c7"
                    />
                  </StyledComponent>
                </SnippetPreview__Separator>
                <SnippetPreview__MobilePartContainer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__MobilePartContainer-sc-1hxg8jo-12",
                          "isStatic": true,
                          "lastClassName": "c1",
                          "rules": Array [
                            "padding:8px 16px;",
                          ],
                        },
                        "displayName": "SnippetPreview__MobilePartContainer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__MobilePartContainer-sc-1hxg8jo-12",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="c1"
                    >
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          Meta description preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__MobileDescription
                        isDescriptionPlaceholder={false}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__MobileDescription-sc-1hxg8jo-11",
                                "isStatic": false,
                                "lastClassName": "c8",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";cursor:pointer;position:relative;max-width:",
                                  "600",
                                  "px;font-size:13px;",
                                  "font-size:14px;line-height:20px;",
                                ],
                              },
                              "displayName": "SnippetPreview__MobileDescription",
                              "foldedComponentIds": Array [
                                "SnippetPreview__DesktopDescription-sc-1hxg8jo-10",
                              ],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__MobileDescription-sc-1hxg8jo-11",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isDescriptionPlaceholder={false}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                        >
                          <div
                            className="c8"
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                          >
                            <SnippetPreview__MobileDescription
                              isDescriptionPlaceholder={false}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__MobileDescription-sc-1hxg8jo-11",
                                      "isStatic": false,
                                      "lastClassName": "c8",
                                      "rules": Array [
                                        "color:",
                                        [Function],
                                        ";cursor:pointer;position:relative;max-width:",
                                        "600",
                                        "px;font-size:13px;",
                                        "font-size:14px;line-height:20px;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__MobileDescription",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__DesktopDescription-sc-1hxg8jo-10",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__MobileDescription-sc-1hxg8jo-11",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={[Function]}
                                isDescriptionPlaceholder={false}
                              >
                                <div
                                  className="c8"
                                >
                                  Test description, %%replacement_variable%%
                                </div>
                              </StyledComponent>
                            </SnippetPreview__MobileDescription>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__MobileDescription>
                    </div>
                  </StyledComponent>
                </SnippetPreview__MobilePartContainer>
              </div>
            </StyledComponent>
          </SnippetPreview__MobileContainer>
        </section>
      </SnippetPreview>
      <ModeSwitcher
        active="mobile"
        onChange={[Function]}
      >
        <ModeSwitcher__Switcher>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "ModeSwitcher__Switcher-sc-9lbpr3-3",
                  "isStatic": true,
                  "lastClassName": "c9",
                  "rules": Array [
                    "display:inline-block;margin-top:10px;border:1px solid #dbdbdb;border-radius:4px;background-color:#f7f7f7;vertical-align:top;",
                  ],
                },
                "displayName": "ModeSwitcher__Switcher",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModeSwitcher__Switcher-sc-9lbpr3-3",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="c9"
            >
              <ModeSwitcher__MobileButton
                activeBackgroundColor="#f7f7f7"
                activeBorderColor="#888"
                activeColor="#000"
                aria-pressed={true}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                focusBackgroundColor="#fff"
                focusBorderColor="#0066cd"
                focusColor="#000"
                hoverBackgroundColor="#fff"
                hoverBorderColor="#888"
                hoverColor="#000"
                isActive={true}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <StyledComponent
                  activeBackgroundColor="#f7f7f7"
                  activeBorderColor="#888"
                  activeColor="#000"
                  aria-pressed={true}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  focusBackgroundColor="#fff"
                  focusBorderColor="#0066cd"
                  focusColor="#000"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "ModeSwitcher__MobileButton-sc-9lbpr3-1",
                        "isStatic": false,
                        "lastClassName": "c10",
                        "rules": Array [
                          "color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";box-shadow:0 1px 0 ",
                          [Function],
                          ";",
                          "&:active{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";box-shadow:inset 0 2px 5px -3px ",
                          "rgba( 0, 0, 0, 0.5 )",
                          ";}",
                          "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                          [Function],
                          ";color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";box-shadow:0 0 3px ",
                          "rgba( 8, 74, 103, 0.8 )",
                          ";}",
                          "&:hover{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";}",
                          "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                          "1px",
                          ";border-style:solid;margin:0;padding:",
                          "4px",
                          " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                          [Function],
                          ";overflow:visible;min-height:",
                          "32px",
                          ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                          "22px",
                          ";}}",
                          "border:none;border-bottom:4px solid transparent;width:31px;height:31px;border-color:",
                          [Function],
                          ";color:",
                          "#555",
                          ";transition:0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;transition-property:border-color;&:hover,&:focus{background-color:",
                          "#fff",
                          ";border:none;border-bottom:4px solid transparent;border-color:",
                          "#1e8cbe",
                          ";color:",
                          "#1e8cbe",
                          ";box-shadow:none;}",
                          "border-radius:3px 0 0 3px;",
                        ],
                      },
                      "defaultProps": Object {
                        "activeBackgroundColor": "#f7f7f7",
                        "activeBorderColor": "#888",
                        "activeColor": "#000",
                        "backgroundColor": "#f7f7f7",
                        "borderColor": "#ccc",
                        "boxShadowColor": "#ccc",
                        "focusBackgroundColor": "#fff",
                        "focusBorderColor": "#0066cd",
                        "focusColor": "#000",
                        "hoverBackgroundColor": "#fff",
                        "hoverBorderColor": "#888",
                        "hoverColor": "#000",
                        "textColor": "#555",
                        "type": "button",
                      },
                      "displayName": "ModeSwitcher__MobileButton",
                      "foldedComponentIds": Array [
                        "Button__BaseButton-sc-32rbq-4",
                        "Button-sc-32rbq-3",
                        "Button-sc-32rbq-1",
                        "Button-sc-32rbq-2",
                        "Button-sc-32rbq-0",
                        "ModeSwitcher__SwitcherButton-sc-9lbpr3-0",
                      ],
                      "propTypes": Object {
                        "activeBackgroundColor": [Function],
                        "activeBorderColor": [Function],
                        "activeColor": [Function],
                        "backgroundColor": [Function],
                        "borderColor": [Function],
                        "boxShadowColor": [Function],
                        "focusBackgroundColor": [Function],
                        "focusBorderColor": [Function],
                        "focusColor": [Function],
                        "hoverBackgroundColor": [Function],
                        "hoverBorderColor": [Function],
                        "hoverColor": [Function],
                        "textColor": [Function],
                        "type": [Function],
                      },
                      "render": [Function],
                      "styledComponentId": "ModeSwitcher__MobileButton-sc-9lbpr3-1",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hoverBackgroundColor="#fff"
                  hoverBorderColor="#888"
                  hoverColor="#000"
                  isActive={true}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <button
                    aria-pressed={true}
                    className="c10"
                    onClick={[Function]}
                    type="button"
                  >
                    <SvgIcon
                      color="currentColor"
                      icon="mobile"
                      size="22px"
                    >
                      <SvgIcon__StyledSvg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-mobile"
                        fill="currentColor"
                        focusable="false"
                        role="img"
                        size="22px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <StyledComponent
                          aria-hidden={true}
                          className="yoast-svg-icon yoast-svg-icon-mobile"
                          fill="currentColor"
                          focusable="false"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                "isStatic": false,
                                "lastClassName": "c11",
                                "rules": Array [
                                  "width:",
                                  [Function],
                                  ";height:",
                                  [Function],
                                  ";flex:none;",
                                ],
                              },
                              "displayName": "SvgIcon__StyledSvg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          role="img"
                          size="22px"
                          viewBox="0 0 1792 1792"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <svg
                            aria-hidden={true}
                            className="yoast-svg-icon yoast-svg-icon-mobile c11"
                            fill="currentColor"
                            focusable="false"
                            role="img"
                            size="22px"
                            viewBox="0 0 1792 1792"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
                            />
                          </svg>
                        </StyledComponent>
                      </SvgIcon__StyledSvg>
                    </SvgIcon>
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Mobile preview
                      </span>
                    </ScreenReaderText>
                  </button>
                </StyledComponent>
              </ModeSwitcher__MobileButton>
              <ModeSwitcher__DesktopButton
                activeBackgroundColor="#f7f7f7"
                activeBorderColor="#888"
                activeColor="#000"
                aria-pressed={false}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                focusBackgroundColor="#fff"
                focusBorderColor="#0066cd"
                focusColor="#000"
                hoverBackgroundColor="#fff"
                hoverBorderColor="#888"
                hoverColor="#000"
                isActive={false}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <StyledComponent
                  activeBackgroundColor="#f7f7f7"
                  activeBorderColor="#888"
                  activeColor="#000"
                  aria-pressed={false}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  focusBackgroundColor="#fff"
                  focusBorderColor="#0066cd"
                  focusColor="#000"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "ModeSwitcher__DesktopButton-sc-9lbpr3-2",
                        "isStatic": false,
                        "lastClassName": "c12",
                        "rules": Array [
                          "color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";box-shadow:0 1px 0 ",
                          [Function],
                          ";",
                          "&:active{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";box-shadow:inset 0 2px 5px -3px ",
                          "rgba( 0, 0, 0, 0.5 )",
                          ";}",
                          "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                          [Function],
                          ";color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";box-shadow:0 0 3px ",
                          "rgba( 8, 74, 103, 0.8 )",
                          ";}",
                          "&:hover{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";}",
                          "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                          "1px",
                          ";border-style:solid;margin:0;padding:",
                          "4px",
                          " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                          [Function],
                          ";overflow:visible;min-height:",
                          "32px",
                          ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                          "22px",
                          ";}}",
                          "border:none;border-bottom:4px solid transparent;width:31px;height:31px;border-color:",
                          [Function],
                          ";color:",
                          "#555",
                          ";transition:0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;transition-property:border-color;&:hover,&:focus{background-color:",
                          "#fff",
                          ";border:none;border-bottom:4px solid transparent;border-color:",
                          "#1e8cbe",
                          ";color:",
                          "#1e8cbe",
                          ";box-shadow:none;}",
                          "border-radius:0 3px 3px 0;",
                        ],
                      },
                      "defaultProps": Object {
                        "activeBackgroundColor": "#f7f7f7",
                        "activeBorderColor": "#888",
                        "activeColor": "#000",
                        "backgroundColor": "#f7f7f7",
                        "borderColor": "#ccc",
                        "boxShadowColor": "#ccc",
                        "focusBackgroundColor": "#fff",
                        "focusBorderColor": "#0066cd",
                        "focusColor": "#000",
                        "hoverBackgroundColor": "#fff",
                        "hoverBorderColor": "#888",
                        "hoverColor": "#000",
                        "textColor": "#555",
                        "type": "button",
                      },
                      "displayName": "ModeSwitcher__DesktopButton",
                      "foldedComponentIds": Array [
                        "Button__BaseButton-sc-32rbq-4",
                        "Button-sc-32rbq-3",
                        "Button-sc-32rbq-1",
                        "Button-sc-32rbq-2",
                        "Button-sc-32rbq-0",
                        "ModeSwitcher__SwitcherButton-sc-9lbpr3-0",
                      ],
                      "propTypes": Object {
                        "activeBackgroundColor": [Function],
                        "activeBorderColor": [Function],
                        "activeColor": [Function],
                        "backgroundColor": [Function],
                        "borderColor": [Function],
                        "boxShadowColor": [Function],
                        "focusBackgroundColor": [Function],
                        "focusBorderColor": [Function],
                        "focusColor": [Function],
                        "hoverBackgroundColor": [Function],
                        "hoverBorderColor": [Function],
                        "hoverColor": [Function],
                        "textColor": [Function],
                        "type": [Function],
                      },
                      "render": [Function],
                      "styledComponentId": "ModeSwitcher__DesktopButton-sc-9lbpr3-2",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hoverBackgroundColor="#fff"
                  hoverBorderColor="#888"
                  hoverColor="#000"
                  isActive={false}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <button
                    aria-pressed={false}
                    className="c12"
                    onClick={[Function]}
                    type="button"
                  >
                    <SvgIcon
                      color="currentColor"
                      icon="desktop"
                      size="18px"
                    >
                      <SvgIcon__StyledSvg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-desktop"
                        fill="currentColor"
                        focusable="false"
                        role="img"
                        size="18px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <StyledComponent
                          aria-hidden={true}
                          className="yoast-svg-icon yoast-svg-icon-desktop"
                          fill="currentColor"
                          focusable="false"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                "isStatic": false,
                                "lastClassName": "c13",
                                "rules": Array [
                                  "width:",
                                  [Function],
                                  ";height:",
                                  [Function],
                                  ";flex:none;",
                                ],
                              },
                              "displayName": "SvgIcon__StyledSvg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          role="img"
                          size="18px"
                          viewBox="0 0 1792 1792"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <svg
                            aria-hidden={true}
                            className="yoast-svg-icon yoast-svg-icon-desktop c13"
                            fill="currentColor"
                            focusable="false"
                            role="img"
                            size="18px"
                            viewBox="0 0 1792 1792"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
                            />
                          </svg>
                        </StyledComponent>
                      </SvgIcon__StyledSvg>
                    </SvgIcon>
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Desktop preview
                      </span>
                    </ScreenReaderText>
                  </button>
                </StyledComponent>
              </ModeSwitcher__DesktopButton>
            </div>
          </StyledComponent>
        </ModeSwitcher__Switcher>
      </ModeSwitcher>
      <SnippetEditor__EditSnippetButton
        activeBackgroundColor="#f7f7f7"
        activeBorderColor="#888"
        activeColor="#000"
        aria-expanded={true}
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        focusBackgroundColor="#fff"
        focusBorderColor="#0066cd"
        focusColor="#000"
        hoverBackgroundColor="#fff"
        hoverBorderColor="#888"
        hoverColor="#000"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <StyledComponent
          activeBackgroundColor="#f7f7f7"
          activeBorderColor="#888"
          activeColor="#000"
          aria-expanded={true}
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          focusBackgroundColor="#fff"
          focusBorderColor="#0066cd"
          focusColor="#000"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "SnippetEditor__EditSnippetButton-sc-144bmm3-1",
                "isStatic": false,
                "lastClassName": "c14",
                "rules": Array [
                  "color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";background:",
                  [Function],
                  ";box-shadow:0 1px 0 ",
                  [Function],
                  ";",
                  "&:active{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";box-shadow:inset 0 2px 5px -3px ",
                  "rgba( 0, 0, 0, 0.5 )",
                  ";}",
                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                  [Function],
                  ";color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";box-shadow:0 0 3px ",
                  "rgba( 8, 74, 103, 0.8 )",
                  ";}",
                  "&:hover{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";}",
                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                  "1px",
                  ";border-style:solid;margin:0;padding:",
                  "4px",
                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                  [Function],
                  ";overflow:visible;min-height:",
                  "32px",
                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                  "22px",
                  ";}}",
                  "height:33px;border:1px solid #dbdbdb;box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;",
                  "margin:",
                  [Function],
                  ";fill:",
                  "#555",
                  ";padding-left:8px;& svg{",
                  [Function],
                  ":7px;}",
                ],
              },
              "defaultProps": Object {
                "activeBackgroundColor": "#f7f7f7",
                "activeBorderColor": "#888",
                "activeColor": "#000",
                "backgroundColor": "#f7f7f7",
                "borderColor": "#ccc",
                "boxShadowColor": "#ccc",
                "focusBackgroundColor": "#fff",
                "focusBorderColor": "#0066cd",
                "focusColor": "#000",
                "hoverBackgroundColor": "#fff",
                "hoverBorderColor": "#888",
                "hoverColor": "#000",
                "textColor": "#555",
                "type": "button",
              },
              "displayName": "SnippetEditor__EditSnippetButton",
              "foldedComponentIds": Array [
                "Button__BaseButton-sc-32rbq-4",
                "Button-sc-32rbq-3",
                "Button-sc-32rbq-1",
                "Button-sc-32rbq-2",
                "Button-sc-32rbq-0",
                "SnippetEditor__SnippetEditorButton-sc-144bmm3-0",
              ],
              "propTypes": Object {
                "activeBackgroundColor": [Function],
                "activeBorderColor": [Function],
                "activeColor": [Function],
                "backgroundColor": [Function],
                "borderColor": [Function],
                "boxShadowColor": [Function],
                "focusBackgroundColor": [Function],
                "focusBorderColor": [Function],
                "focusColor": [Function],
                "hoverBackgroundColor": [Function],
                "hoverBorderColor": [Function],
                "hoverColor": [Function],
                "textColor": [Function],
                "type": [Function],
              },
              "render": [Function],
              "styledComponentId": "SnippetEditor__EditSnippetButton-sc-144bmm3-1",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={[Function]}
          hoverBackgroundColor="#fff"
          hoverBorderColor="#888"
          hoverColor="#000"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <button
            aria-expanded={true}
            className="c14"
            onClick={[Function]}
            type="button"
          >
            <SvgIcon
              color="currentColor"
              icon="edit"
              size="16px"
            >
              <SvgIcon__StyledSvg
                aria-hidden={true}
                className="yoast-svg-icon yoast-svg-icon-edit"
                fill="currentColor"
                focusable="false"
                role="img"
                size="16px"
                viewBox="0 0 1792 1792"
                xmlns="http://www.w3.org/2000/svg"
              >
                <StyledComponent
                  aria-hidden={true}
                  className="yoast-svg-icon yoast-svg-icon-edit"
                  fill="currentColor"
                  focusable="false"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                        "isStatic": false,
                        "lastClassName": "c15",
                        "rules": Array [
                          "width:",
                          [Function],
                          ";height:",
                          [Function],
                          ";flex:none;",
                        ],
                      },
                      "displayName": "SvgIcon__StyledSvg",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                      "target": "svg",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  role="img"
                  size="16px"
                  viewBox="0 0 1792 1792"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <svg
                    aria-hidden={true}
                    className="yoast-svg-icon yoast-svg-icon-edit c15"
                    fill="currentColor"
                    focusable="false"
                    role="img"
                    size="16px"
                    viewBox="0 0 1792 1792"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
                    />
                  </svg>
                </StyledComponent>
              </SvgIcon__StyledSvg>
            </SvgIcon>
            Edit snippet
          </button>
        </StyledComponent>
      </SnippetEditor__EditSnippetButton>
      <SnippetEditorFields
        activeField={null}
        containerPadding="0 20px"
        data={
          Object {
            "description": "Test description, %%replacement_variable%%",
            "slug": "test-slug",
            "title": "Test title",
          }
        }
        descriptionEditorFieldPlaceholder="Modify your meta description by editing it right here"
        descriptionLengthProgress={
          Object {
            "actual": 42,
            "max": 156,
            "score": 6,
          }
        }
        hoveredField={null}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        recommendedReplacementVariables={Array []}
        replacementVariables={
          Array [
            Object {
              "name": "title",
              "value": "Title!!!",
            },
            Object {
              "name": "excerpt",
              "value": "Excerpt!!!",
            },
          ]
        }
        titleLengthProgress={
          Object {
            "actual": 0,
            "max": 600,
            "score": 1,
          }
        }
      >
        <shared__StyledEditor
          padding="0 20px"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "shared__StyledEditor-lzs0hf-5",
                  "isStatic": false,
                  "lastClassName": "c16",
                  "rules": Array [
                    "padding:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "shared__StyledEditor",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "shared__StyledEditor-lzs0hf-5",
                "target": "section",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            padding="0 20px"
          >
            <section
              className="c16"
            >
              <shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "shared__FormSection-lzs0hf-4",
                        "isStatic": true,
                        "lastClassName": "c17",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "shared__FormSection-lzs0hf-4",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="c17"
                  >
                    <ReplacementVariableEditor
                      content="Test title"
                      editorRef={[Function]}
                      fieldId="snippet-editor-field-title"
                      isActive={false}
                      isHovered={false}
                      label="SEO title"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      recommendedReplacementVariables={Array []}
                      replacementVariables={
                        Array [
                          Object {
                            "name": "title",
                            "value": "Title!!!",
                          },
                          Object {
                            "name": "excerpt",
                            "value": "Excerpt!!!",
                          },
                        ]
                      }
                      withCaret={true}
                    >
                      <shared__SimulatedLabel
                        id="24"
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared__SimulatedLabel-lzs0hf-6",
                                "isStatic": true,
                                "lastClassName": "c18",
                                "rules": Array [
                                  "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                                ],
                              },
                              "displayName": "shared__SimulatedLabel",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "shared__SimulatedLabel-lzs0hf-6",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          id="24"
                          onClick={[Function]}
                        >
                          <div
                            className="c18"
                            id="24"
                            onClick={[Function]}
                          >
                            SEO title
                          </div>
                        </StyledComponent>
                      </shared__SimulatedLabel>
                      <shared__TriggerReplacementVariableSuggestionsButton
                        activeBackgroundColor="#f7f7f7"
                        activeBorderColor="#888"
                        activeColor="#000"
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        focusBackgroundColor="#fff"
                        focusBorderColor="#0066cd"
                        focusColor="#000"
                        hoverBackgroundColor="#fff"
                        hoverBorderColor="#888"
                        hoverColor="#000"
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <StyledComponent
                          activeBackgroundColor="#f7f7f7"
                          activeBorderColor="#888"
                          activeColor="#000"
                          backgroundColor="#f7f7f7"
                          borderColor="#ccc"
                          boxShadowColor="#ccc"
                          focusBackgroundColor="#fff"
                          focusBorderColor="#0066cd"
                          focusColor="#000"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared__TriggerReplacementVariableSuggestionsButton-lzs0hf-7",
                                "isStatic": false,
                                "lastClassName": "c19",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";background:",
                                  [Function],
                                  ";box-shadow:0 1px 0 ",
                                  [Function],
                                  ";",
                                  "&:active{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";box-shadow:inset 0 2px 5px -3px ",
                                  "rgba( 0, 0, 0, 0.5 )",
                                  ";}",
                                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                                  [Function],
                                  ";color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";box-shadow:0 0 3px ",
                                  "rgba( 8, 74, 103, 0.8 )",
                                  ";}",
                                  "&:hover{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";}",
                                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                                  "1px",
                                  ";border-style:solid;margin:0;padding:",
                                  "4px",
                                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                                  [Function],
                                  ";overflow:visible;min-height:",
                                  "32px",
                                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                                  "22px",
                                  ";}}",
                                  "box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;padding-left:8px;height:33px;border:1px solid #dbdbdb;font-size:13px;& svg{",
                                  [Function],
                                  ":7px;fill:",
                                  "#555",
                                  ";}",
                                ],
                              },
                              "defaultProps": Object {
                                "activeBackgroundColor": "#f7f7f7",
                                "activeBorderColor": "#888",
                                "activeColor": "#000",
                                "backgroundColor": "#f7f7f7",
                                "borderColor": "#ccc",
                                "boxShadowColor": "#ccc",
                                "focusBackgroundColor": "#fff",
                                "focusBorderColor": "#0066cd",
                                "focusColor": "#000",
                                "hoverBackgroundColor": "#fff",
                                "hoverBorderColor": "#888",
                                "hoverColor": "#000",
                                "textColor": "#555",
                                "type": "button",
                              },
                              "displayName": "shared__TriggerReplacementVariableSuggestionsButton",
                              "foldedComponentIds": Array [
                                "Button__BaseButton-sc-32rbq-4",
                                "Button-sc-32rbq-3",
                                "Button-sc-32rbq-1",
                                "Button-sc-32rbq-2",
                                "Button-sc-32rbq-0",
                              ],
                              "propTypes": Object {
                                "activeBackgroundColor": [Function],
                                "activeBorderColor": [Function],
                                "activeColor": [Function],
                                "backgroundColor": [Function],
                                "borderColor": [Function],
                                "boxShadowColor": [Function],
                                "focusBackgroundColor": [Function],
                                "focusBorderColor": [Function],
                                "focusColor": [Function],
                                "hoverBackgroundColor": [Function],
                                "hoverBorderColor": [Function],
                                "hoverColor": [Function],
                                "textColor": [Function],
                                "type": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "shared__TriggerReplacementVariableSuggestionsButton-lzs0hf-7",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverBackgroundColor="#fff"
                          hoverBorderColor="#888"
                          hoverColor="#000"
                          onClick={[Function]}
                          textColor="#555"
                          type="button"
                        >
                          <button
                            className="c19"
                            onClick={[Function]}
                            type="button"
                          >
                            <SvgIcon
                              color="currentColor"
                              icon="plus-circle"
                              size="16px"
                            >
                              <SvgIcon__StyledSvg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="16px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <StyledComponent
                                  aria-hidden={true}
                                  className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                  fill="currentColor"
                                  focusable="false"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                        "isStatic": false,
                                        "lastClassName": "c15",
                                        "rules": Array [
                                          "width:",
                                          [Function],
                                          ";height:",
                                          [Function],
                                          ";flex:none;",
                                        ],
                                      },
                                      "displayName": "SvgIcon__StyledSvg",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                      "target": "svg",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  role="img"
                                  size="16px"
                                  viewBox="0 0 1792 1792"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="yoast-svg-icon yoast-svg-icon-plus-circle c15"
                                    fill="currentColor"
                                    focusable="false"
                                    role="img"
                                    size="16px"
                                    viewBox="0 0 1792 1792"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M1344 960v-128q0-26-19-45t-45-19h-256v-256q0-26-19-45t-45-19h-128q-26 0-45 19t-19 45v256h-256q-26 0-45 19t-19 45v128q0 26 19 45t45 19h256v256q0 26 19 45t45 19h128q26 0 45-19t19-45v-256h256q26 0 45-19t19-45zm320-64q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"
                                    />
                                  </svg>
                                </StyledComponent>
                              </SvgIcon__StyledSvg>
                            </SvgIcon>
                            Insert snippet variable
                          </button>
                        </StyledComponent>
                      </shared__TriggerReplacementVariableSuggestionsButton>
                      <shared
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {},
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared-lzs0hf-1",
                                "isStatic": false,
                                "lastClassName": "c20",
                                "rules": Array [
                                  "flex:0 1 100%;border:1px solid ",
                                  [Function],
                                  ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                  [Function],
                                  ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                  ".public-DraftStyleDefault-block{line-height:24px;}",
                                  "&::before{display:block;position:absolute;top:-1px;",
                                  [Function],
                                  ":-25px;width:24px;height:24px;background-image:url( ",
                                  [Function],
                                  " );background-size:25px;content:\\"\\";}",
                                ],
                              },
                              "displayName": "shared",
                              "foldedComponentIds": Array [
                                "shared__InputContainer-lzs0hf-0",
                                "shared__TitleInputContainer-lzs0hf-2",
                              ],
                              "render": [Function],
                              "styledComponentId": "shared-lzs0hf-1",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isActive={false}
                          isHovered={false}
                          onClick={[Function]}
                        >
                          <div
                            className="c20"
                            onClick={[Function]}
                          >
                            <ReplacementVariableEditorStandalone
                              ariaLabelledBy="24"
                              content="Test title"
                              fieldId="snippet-editor-field-title"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              recommendedReplacementVariables={Array []}
                              replacementVariables={
                                Array [
                                  Object {
                                    "name": "title",
                                    "value": "Title!!!",
                                  },
                                  Object {
                                    "name": "excerpt",
                                    "value": "Excerpt!!!",
                                  },
                                ]
                              }
                            >
                              <div />
                            </ReplacementVariableEditorStandalone>
                          </div>
                        </StyledComponent>
                      </shared>
                    </ReplacementVariableEditor>
                    <ProgressBar
                      aria-hidden="true"
                      backgroundColor="#f7f7f7"
                      borderColor="#ddd"
                      max={600}
                      progressColor="#dc3232"
                      value={0}
                    >
                      <StyledComponent
                        aria-hidden="true"
                        backgroundColor="#f7f7f7"
                        borderColor="#ddd"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ProgressBar-sc-9g9yx6-0",
                              "isStatic": false,
                              "lastClassName": "c25",
                              "rules": Array [
                                "box-sizing:border-box;width:100%;height:8px;display:block;margin-top:8px;appearance:none;background-color:",
                                [Function],
                                ";border:1px solid ",
                                [Function],
                                ";::-webkit-progress-bar{background-color:",
                                [Function],
                                ";}::-webkit-progress-value{background-color:",
                                [Function],
                                ";transition:width 250ms;}::-moz-progress-bar{background-color:",
                                [Function],
                                ";}::-ms-fill{background-color:",
                                [Function],
                                ";border:0;}",
                              ],
                            },
                            "defaultProps": Object {
                              "aria-hidden": "true",
                              "backgroundColor": "#f7f7f7",
                              "borderColor": "#ddd",
                              "max": 1,
                              "progressColor": "#7ad03a",
                              "value": 0,
                            },
                            "displayName": "ProgressBar",
                            "foldedComponentIds": Array [],
                            "propTypes": Object {
                              "aria-hidden": [Function],
                              "backgroundColor": [Function],
                              "borderColor": [Function],
                              "max": [Function],
                              "progressColor": [Function],
                              "value": [Function],
                            },
                            "render": [Function],
                            "styledComponentId": "ProgressBar-sc-9g9yx6-0",
                            "target": "progress",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        max={600}
                        progressColor="#dc3232"
                        value={0}
                      >
                        <progress
                          aria-hidden="true"
                          className="c21"
                          max={600}
                          value={0}
                        />
                      </StyledComponent>
                    </ProgressBar>
                  </div>
                </StyledComponent>
              </shared__FormSection>
              <shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "shared__FormSection-lzs0hf-4",
                        "isStatic": true,
                        "lastClassName": "c17",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "shared__FormSection-lzs0hf-4",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="c17"
                  >
                    <shared__SimulatedLabel
                      id="snippet-editor-field-23-slug"
                      onClick={[Function]}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "shared__SimulatedLabel-lzs0hf-6",
                              "isStatic": true,
                              "lastClassName": "c18",
                              "rules": Array [
                                "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                              ],
                            },
                            "displayName": "shared__SimulatedLabel",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "shared__SimulatedLabel-lzs0hf-6",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        id="snippet-editor-field-23-slug"
                        onClick={[Function]}
                      >
                        <div
                          className="c18"
                          id="snippet-editor-field-23-slug"
                          onClick={[Function]}
                        >
                          Slug
                        </div>
                      </StyledComponent>
                    </shared__SimulatedLabel>
                    <shared
                      isActive={false}
                      isHovered={false}
                      onClick={[Function]}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [
                              Object {},
                            ],
                            "componentStyle": ComponentStyle {
                              "componentId": "shared-lzs0hf-1",
                              "isStatic": false,
                              "lastClassName": "c22",
                              "rules": Array [
                                "flex:0 1 100%;border:1px solid ",
                                [Function],
                                ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                [Function],
                                ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                "&::before{display:block;position:absolute;top:-1px;",
                                [Function],
                                ":-25px;width:24px;height:24px;background-image:url( ",
                                [Function],
                                " );background-size:25px;content:\\"\\";}",
                              ],
                            },
                            "displayName": "shared",
                            "foldedComponentIds": Array [
                              "shared__InputContainer-lzs0hf-0",
                            ],
                            "render": [Function],
                            "styledComponentId": "shared-lzs0hf-1",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <div
                          className="c22"
                          onClick={[Function]}
                        >
                          <SnippetEditorFields__SlugInput
                            aria-labelledby="snippet-editor-field-23-slug"
                            id="snippet-editor-field-slug"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            value="test-slug"
                          >
                            <StyledComponent
                              aria-labelledby="snippet-editor-field-23-slug"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "SnippetEditorFields__SlugInput-sc-1ioqi3y-0",
                                    "isStatic": true,
                                    "lastClassName": "c23",
                                    "rules": Array [
                                      "border:none;width:100%;height:inherit;line-height:inherit;font-family:inherit;font-size:inherit;color:inherit;&:focus{outline:0;}",
                                    ],
                                  },
                                  "displayName": "SnippetEditorFields__SlugInput",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "SnippetEditorFields__SlugInput-sc-1ioqi3y-0",
                                  "target": "input",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={[Function]}
                              id="snippet-editor-field-slug"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              value="test-slug"
                            >
                              <input
                                aria-labelledby="snippet-editor-field-23-slug"
                                className="c23"
                                id="snippet-editor-field-slug"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                value="test-slug"
                              />
                            </StyledComponent>
                          </SnippetEditorFields__SlugInput>
                        </div>
                      </StyledComponent>
                    </shared>
                  </div>
                </StyledComponent>
              </shared__FormSection>
              <shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "shared__FormSection-lzs0hf-4",
                        "isStatic": true,
                        "lastClassName": "c17",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "shared__FormSection-lzs0hf-4",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="c17"
                  >
                    <ReplacementVariableEditor
                      content="Test description, %%replacement_variable%%"
                      editorRef={[Function]}
                      fieldId="snippet-editor-field-description"
                      isActive={false}
                      isHovered={false}
                      label="Meta description"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      placeholder="Modify your meta description by editing it right here"
                      recommendedReplacementVariables={Array []}
                      replacementVariables={
                        Array [
                          Object {
                            "name": "title",
                            "value": "Title!!!",
                          },
                          Object {
                            "name": "excerpt",
                            "value": "Excerpt!!!",
                          },
                        ]
                      }
                      type="description"
                      withCaret={true}
                    >
                      <shared__SimulatedLabel
                        id="25"
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared__SimulatedLabel-lzs0hf-6",
                                "isStatic": true,
                                "lastClassName": "c18",
                                "rules": Array [
                                  "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                                ],
                              },
                              "displayName": "shared__SimulatedLabel",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "shared__SimulatedLabel-lzs0hf-6",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          id="25"
                          onClick={[Function]}
                        >
                          <div
                            className="c18"
                            id="25"
                            onClick={[Function]}
                          >
                            Meta description
                          </div>
                        </StyledComponent>
                      </shared__SimulatedLabel>
                      <shared__TriggerReplacementVariableSuggestionsButton
                        activeBackgroundColor="#f7f7f7"
                        activeBorderColor="#888"
                        activeColor="#000"
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        focusBackgroundColor="#fff"
                        focusBorderColor="#0066cd"
                        focusColor="#000"
                        hoverBackgroundColor="#fff"
                        hoverBorderColor="#888"
                        hoverColor="#000"
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <StyledComponent
                          activeBackgroundColor="#f7f7f7"
                          activeBorderColor="#888"
                          activeColor="#000"
                          backgroundColor="#f7f7f7"
                          borderColor="#ccc"
                          boxShadowColor="#ccc"
                          focusBackgroundColor="#fff"
                          focusBorderColor="#0066cd"
                          focusColor="#000"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared__TriggerReplacementVariableSuggestionsButton-lzs0hf-7",
                                "isStatic": false,
                                "lastClassName": "c19",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";background:",
                                  [Function],
                                  ";box-shadow:0 1px 0 ",
                                  [Function],
                                  ";",
                                  "&:active{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";box-shadow:inset 0 2px 5px -3px ",
                                  "rgba( 0, 0, 0, 0.5 )",
                                  ";}",
                                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                                  [Function],
                                  ";color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";box-shadow:0 0 3px ",
                                  "rgba( 8, 74, 103, 0.8 )",
                                  ";}",
                                  "&:hover{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";}",
                                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                                  "1px",
                                  ";border-style:solid;margin:0;padding:",
                                  "4px",
                                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                                  [Function],
                                  ";overflow:visible;min-height:",
                                  "32px",
                                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                                  "22px",
                                  ";}}",
                                  "box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;padding-left:8px;height:33px;border:1px solid #dbdbdb;font-size:13px;& svg{",
                                  [Function],
                                  ":7px;fill:",
                                  "#555",
                                  ";}",
                                ],
                              },
                              "defaultProps": Object {
                                "activeBackgroundColor": "#f7f7f7",
                                "activeBorderColor": "#888",
                                "activeColor": "#000",
                                "backgroundColor": "#f7f7f7",
                                "borderColor": "#ccc",
                                "boxShadowColor": "#ccc",
                                "focusBackgroundColor": "#fff",
                                "focusBorderColor": "#0066cd",
                                "focusColor": "#000",
                                "hoverBackgroundColor": "#fff",
                                "hoverBorderColor": "#888",
                                "hoverColor": "#000",
                                "textColor": "#555",
                                "type": "button",
                              },
                              "displayName": "shared__TriggerReplacementVariableSuggestionsButton",
                              "foldedComponentIds": Array [
                                "Button__BaseButton-sc-32rbq-4",
                                "Button-sc-32rbq-3",
                                "Button-sc-32rbq-1",
                                "Button-sc-32rbq-2",
                                "Button-sc-32rbq-0",
                              ],
                              "propTypes": Object {
                                "activeBackgroundColor": [Function],
                                "activeBorderColor": [Function],
                                "activeColor": [Function],
                                "backgroundColor": [Function],
                                "borderColor": [Function],
                                "boxShadowColor": [Function],
                                "focusBackgroundColor": [Function],
                                "focusBorderColor": [Function],
                                "focusColor": [Function],
                                "hoverBackgroundColor": [Function],
                                "hoverBorderColor": [Function],
                                "hoverColor": [Function],
                                "textColor": [Function],
                                "type": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "shared__TriggerReplacementVariableSuggestionsButton-lzs0hf-7",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverBackgroundColor="#fff"
                          hoverBorderColor="#888"
                          hoverColor="#000"
                          onClick={[Function]}
                          textColor="#555"
                          type="button"
                        >
                          <button
                            className="c19"
                            onClick={[Function]}
                            type="button"
                          >
                            <SvgIcon
                              color="currentColor"
                              icon="plus-circle"
                              size="16px"
                            >
                              <SvgIcon__StyledSvg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="16px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <StyledComponent
                                  aria-hidden={true}
                                  className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                  fill="currentColor"
                                  focusable="false"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                        "isStatic": false,
                                        "lastClassName": "c15",
                                        "rules": Array [
                                          "width:",
                                          [Function],
                                          ";height:",
                                          [Function],
                                          ";flex:none;",
                                        ],
                                      },
                                      "displayName": "SvgIcon__StyledSvg",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                      "target": "svg",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  role="img"
                                  size="16px"
                                  viewBox="0 0 1792 1792"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="yoast-svg-icon yoast-svg-icon-plus-circle c15"
                                    fill="currentColor"
                                    focusable="false"
                                    role="img"
                                    size="16px"
                                    viewBox="0 0 1792 1792"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M1344 960v-128q0-26-19-45t-45-19h-256v-256q0-26-19-45t-45-19h-128q-26 0-45 19t-19 45v256h-256q-26 0-45 19t-19 45v128q0 26 19 45t45 19h256v256q0 26 19 45t45 19h128q26 0 45-19t19-45v-256h256q26 0 45-19t19-45zm320-64q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"
                                    />
                                  </svg>
                                </StyledComponent>
                              </SvgIcon__StyledSvg>
                            </SvgIcon>
                            Insert snippet variable
                          </button>
                        </StyledComponent>
                      </shared__TriggerReplacementVariableSuggestionsButton>
                      <shared
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {},
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared-lzs0hf-1",
                                "isStatic": false,
                                "lastClassName": "c24",
                                "rules": Array [
                                  "flex:0 1 100%;border:1px solid ",
                                  [Function],
                                  ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                  [Function],
                                  ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                  "min-height:72px;padding:2px 6px;line-height:24px;.public-DraftEditorPlaceholder-root{color:",
                                  "#616161",
                                  ";}.public-DraftEditorPlaceholder-hasFocus{color:",
                                  "#616161",
                                  ";}",
                                  "&::before{display:block;position:absolute;top:-1px;",
                                  [Function],
                                  ":-25px;width:24px;height:24px;background-image:url( ",
                                  [Function],
                                  " );background-size:25px;content:\\"\\";}",
                                ],
                              },
                              "displayName": "shared",
                              "foldedComponentIds": Array [
                                "shared__InputContainer-lzs0hf-0",
                                "shared__DescriptionInputContainer-lzs0hf-3",
                              ],
                              "render": [Function],
                              "styledComponentId": "shared-lzs0hf-1",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isActive={false}
                          isHovered={false}
                          onClick={[Function]}
                        >
                          <div
                            className="c24"
                            onClick={[Function]}
                          >
                            <ReplacementVariableEditorStandalone
                              ariaLabelledBy="25"
                              content="Test description, %%replacement_variable%%"
                              fieldId="snippet-editor-field-description"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              placeholder="Modify your meta description by editing it right here"
                              recommendedReplacementVariables={Array []}
                              replacementVariables={
                                Array [
                                  Object {
                                    "name": "title",
                                    "value": "Title!!!",
                                  },
                                  Object {
                                    "name": "excerpt",
                                    "value": "Excerpt!!!",
                                  },
                                ]
                              }
                            >
                              <div />
                            </ReplacementVariableEditorStandalone>
                          </div>
                        </StyledComponent>
                      </shared>
                    </ReplacementVariableEditor>
                    <ProgressBar
                      aria-hidden="true"
                      backgroundColor="#f7f7f7"
                      borderColor="#ddd"
                      max={156}
                      progressColor="#ee7c1b"
                      value={42}
                    >
                      <StyledComponent
                        aria-hidden="true"
                        backgroundColor="#f7f7f7"
                        borderColor="#ddd"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ProgressBar-sc-9g9yx6-0",
                              "isStatic": false,
                              "lastClassName": "c25",
                              "rules": Array [
                                "box-sizing:border-box;width:100%;height:8px;display:block;margin-top:8px;appearance:none;background-color:",
                                [Function],
                                ";border:1px solid ",
                                [Function],
                                ";::-webkit-progress-bar{background-color:",
                                [Function],
                                ";}::-webkit-progress-value{background-color:",
                                [Function],
                                ";transition:width 250ms;}::-moz-progress-bar{background-color:",
                                [Function],
                                ";}::-ms-fill{background-color:",
                                [Function],
                                ";border:0;}",
                              ],
                            },
                            "defaultProps": Object {
                              "aria-hidden": "true",
                              "backgroundColor": "#f7f7f7",
                              "borderColor": "#ddd",
                              "max": 1,
                              "progressColor": "#7ad03a",
                              "value": 0,
                            },
                            "displayName": "ProgressBar",
                            "foldedComponentIds": Array [],
                            "propTypes": Object {
                              "aria-hidden": [Function],
                              "backgroundColor": [Function],
                              "borderColor": [Function],
                              "max": [Function],
                              "progressColor": [Function],
                              "value": [Function],
                            },
                            "render": [Function],
                            "styledComponentId": "ProgressBar-sc-9g9yx6-0",
                            "target": "progress",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        max={156}
                        progressColor="#ee7c1b"
                        value={42}
                      >
                        <progress
                          aria-hidden="true"
                          className="c25"
                          max={156}
                          value={42}
                        />
                      </StyledComponent>
                    </ProgressBar>
                  </div>
                </StyledComponent>
              </shared__FormSection>
            </section>
          </StyledComponent>
        </shared__StyledEditor>
      </SnippetEditorFields>
      <SnippetEditor__CloseEditorButton
        activeBackgroundColor="#f7f7f7"
        activeBorderColor="#888"
        activeColor="#000"
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        focusBackgroundColor="#fff"
        focusBorderColor="#0066cd"
        focusColor="#000"
        hoverBackgroundColor="#fff"
        hoverBorderColor="#888"
        hoverColor="#000"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <StyledComponent
          activeBackgroundColor="#f7f7f7"
          activeBorderColor="#888"
          activeColor="#000"
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          focusBackgroundColor="#fff"
          focusBorderColor="#0066cd"
          focusColor="#000"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "SnippetEditor__CloseEditorButton-sc-144bmm3-2",
                "isStatic": false,
                "lastClassName": "c26",
                "rules": Array [
                  "color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";background:",
                  [Function],
                  ";box-shadow:0 1px 0 ",
                  [Function],
                  ";",
                  "&:active{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";box-shadow:inset 0 2px 5px -3px ",
                  "rgba( 0, 0, 0, 0.5 )",
                  ";}",
                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                  [Function],
                  ";color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";box-shadow:0 0 3px ",
                  "rgba( 8, 74, 103, 0.8 )",
                  ";}",
                  "&:hover{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";}",
                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                  "1px",
                  ";border-style:solid;margin:0;padding:",
                  "4px",
                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                  [Function],
                  ";overflow:visible;min-height:",
                  "32px",
                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                  "22px",
                  ";}}",
                  "height:33px;border:1px solid #dbdbdb;box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;",
                  "margin-top:24px;",
                ],
              },
              "defaultProps": Object {
                "activeBackgroundColor": "#f7f7f7",
                "activeBorderColor": "#888",
                "activeColor": "#000",
                "backgroundColor": "#f7f7f7",
                "borderColor": "#ccc",
                "boxShadowColor": "#ccc",
                "focusBackgroundColor": "#fff",
                "focusBorderColor": "#0066cd",
                "focusColor": "#000",
                "hoverBackgroundColor": "#fff",
                "hoverBorderColor": "#888",
                "hoverColor": "#000",
                "textColor": "#555",
                "type": "button",
              },
              "displayName": "SnippetEditor__CloseEditorButton",
              "foldedComponentIds": Array [
                "Button__BaseButton-sc-32rbq-4",
                "Button-sc-32rbq-3",
                "Button-sc-32rbq-1",
                "Button-sc-32rbq-2",
                "Button-sc-32rbq-0",
                "SnippetEditor__SnippetEditorButton-sc-144bmm3-0",
              ],
              "propTypes": Object {
                "activeBackgroundColor": [Function],
                "activeBorderColor": [Function],
                "activeColor": [Function],
                "backgroundColor": [Function],
                "borderColor": [Function],
                "boxShadowColor": [Function],
                "focusBackgroundColor": [Function],
                "focusBorderColor": [Function],
                "focusColor": [Function],
                "hoverBackgroundColor": [Function],
                "hoverBorderColor": [Function],
                "hoverColor": [Function],
                "textColor": [Function],
                "type": [Function],
              },
              "render": [Function],
              "styledComponentId": "SnippetEditor__CloseEditorButton-sc-144bmm3-2",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          hoverBackgroundColor="#fff"
          hoverBorderColor="#888"
          hoverColor="#000"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <button
            className="c26"
            onClick={[Function]}
            type="button"
          >
            Close snippet editor
          </button>
        </StyledComponent>
      </SnippetEditor__CloseEditorButton>
    </div>
  </ErrorBoundary>
</SnippetEditor>
`;

exports[`SnippetEditor passes the date prop 1`] = `
.c0 {
  border-bottom: 1px hidden #fff;
  border-radius: 2px;
  box-shadow: 0 1px 2px rgba(0,0,0,.2);
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  max-width: 600px;
  box-sizing: border-box;
  font-size: 14px;
}

.c2 {
  cursor: pointer;
  position: relative;
}

.c3 {
  color: #1e0fbe;
  -webkit-text-decoration: none;
  text-decoration: none;
  font-size: 18px;
  line-height: 1.2;
  font-weight: normal;
  margin: 0;
  display: inline-block;
  overflow: hidden;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c4 {
  display: inline-block;
  font-size: 16px;
  line-height: 1.2em;
  max-height: 2.4em;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c5 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  white-space: nowrap;
  font-size: 14px;
}

.c6 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  white-space: nowrap;
  font-size: 14px;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 100%;
}

.c8 {
  color: #545454;
  cursor: pointer;
  position: relative;
  max-width: 600px;
  font-size: 13px;
  font-size: 14px;
  line-height: 20px;
}

.c1 {
  padding: 8px 16px;
}

.c9 {
  color: #808080;
}

.c7 {
  border: 0;
  border-bottom: 1px solid #DFE1E5;
  margin: 0;
}

.c11 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: #555;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 3px 0 0 3px;
}

.c11:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c11::-moz-focus-inner {
  border-width: 0;
}

.c11:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c11:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c11 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c11:hover,
.c11:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
  box-shadow: none;
}

.c13 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: transparent;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 0 3px 3px 0;
}

.c13:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c13::-moz-focus-inner {
  border-width: 0;
}

.c13:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c13:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c13 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c13:hover,
.c13:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
  box-shadow: none;
}

.c10 {
  display: inline-block;
  margin-top: 10px;
  border: 1px solid #dbdbdb;
  border-radius: 4px;
  background-color: #f7f7f7;
  vertical-align: top;
}

.c15 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin: 10px 0 0 4px;
  fill: #555;
  padding-left: 8px;
}

.c15:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c15::-moz-focus-inner {
  border-width: 0;
}

.c15:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c15:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c15 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c15 svg {
  margin-right: 7px;
}

.c12 {
  width: 22px;
  height: 22px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c14 {
  width: 18px;
  height: 18px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c16 {
  width: 16px;
  height: 16px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c11::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c13::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c15::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

<div>
  <section>
    <div
      className="c0"
      onMouseLeave={undefined}
      width={640}
    >
      <div
        className="c1"
      >
        <span
          className="screen-reader-text"
          style={
            Object {
              "clip": "rect(1px, 1px, 1px, 1px)",
              "height": "1px",
              "overflow": "hidden",
              "position": "absolute",
              "width": "1px",
            }
          }
        >
          SEO title preview:
        </span>
        <div
          className="c2"
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
        >
          <div
            className="c3"
          >
            <span
              className="c4"
            >
              Test title
            </span>
          </div>
        </div>
        <span
          className="screen-reader-text"
          style={
            Object {
              "clip": "rect(1px, 1px, 1px, 1px)",
              "height": "1px",
              "overflow": "hidden",
              "position": "absolute",
              "width": "1px",
            }
          }
        >
          Url preview:
        </span>
        <div
          className="c5"
        >
          <div
            className="c6"
            onMouseEnter={[Function]}
            onMouseLeave={[Function]}
            onMouseUp={[Function]}
          >
            example.org â€º test-slug
          </div>
        </div>
      </div>
      <hr
        className="c7"
      />
      <div
        className="c1"
      >
        <span
          className="screen-reader-text"
          style={
            Object {
              "clip": "rect(1px, 1px, 1px, 1px)",
              "height": "1px",
              "overflow": "hidden",
              "position": "absolute",
              "width": "1px",
            }
          }
        >
          Meta description preview:
        </span>
        <div
          className="c8"
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
        >
          <div
            className="c8"
          >
            <span
              className="c9"
            >
              date string
               - 
            </span>
            Test description, %%replacement_variable%%
          </div>
        </div>
      </div>
    </div>
  </section>
  <div
    className="c10"
  >
    <button
      aria-pressed={true}
      className="c11"
      onClick={[Function]}
      type="button"
    >
      <svg
        aria-hidden={true}
        className="yoast-svg-icon yoast-svg-icon-mobile c12"
        fill="currentColor"
        focusable="false"
        role="img"
        size="22px"
        viewBox="0 0 1792 1792"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
        />
      </svg>
      <span
        className="screen-reader-text"
        style={
          Object {
            "clip": "rect(1px, 1px, 1px, 1px)",
            "height": "1px",
            "overflow": "hidden",
            "position": "absolute",
            "width": "1px",
          }
        }
      >
        Mobile preview
      </span>
    </button>
    <button
      aria-pressed={false}
      className="c13"
      onClick={[Function]}
      type="button"
    >
      <svg
        aria-hidden={true}
        className="yoast-svg-icon yoast-svg-icon-desktop c14"
        fill="currentColor"
        focusable="false"
        role="img"
        size="18px"
        viewBox="0 0 1792 1792"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
        />
      </svg>
      <span
        className="screen-reader-text"
        style={
          Object {
            "clip": "rect(1px, 1px, 1px, 1px)",
            "height": "1px",
            "overflow": "hidden",
            "position": "absolute",
            "width": "1px",
          }
        }
      >
        Desktop preview
      </span>
    </button>
  </div>
  <button
    aria-expanded={false}
    className="c15"
    onClick={[Function]}
    type="button"
  >
    <svg
      aria-hidden={true}
      className="yoast-svg-icon yoast-svg-icon-edit c16"
      fill="currentColor"
      focusable="false"
      role="img"
      size="16px"
      viewBox="0 0 1792 1792"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
      />
    </svg>
    Edit snippet
  </button>
</div>
`;

exports[`SnippetEditor removes the highlight from the hovered field on calling onMouseLeave() 1`] = `
<ErrorBoundary>
  <div>
    <SnippetPreview
      activeField={null}
      breadcrumbs={null}
      date=""
      description="Test description, %%replacement_variable%%"
      hoveredField={null}
      isAmp={false}
      keyword=""
      locale="en"
      mode="mobile"
      onHover={[Function]}
      onMouseEnter={[Function]}
      onMouseLeave={[Function]}
      onMouseUp={[Function]}
      title="Test title"
      url="example.org/test-slug"
      wordsToHighlight={Array []}
    />
    <ModeSwitcher
      active="mobile"
      onChange={[Function]}
    />
    <SnippetEditor__EditSnippetButton
      activeBackgroundColor="#f7f7f7"
      activeBorderColor="#888"
      activeColor="#000"
      aria-expanded={true}
      backgroundColor="#f7f7f7"
      borderColor="#ccc"
      boxShadowColor="#ccc"
      focusBackgroundColor="#fff"
      focusBorderColor="#0066cd"
      focusColor="#000"
      hoverBackgroundColor="#fff"
      hoverBorderColor="#888"
      hoverColor="#000"
      onClick={[Function]}
      textColor="#555"
      type="button"
    >
      <SvgIcon
        color="currentColor"
        icon="edit"
        size="16px"
      />
      Edit snippet
    </SnippetEditor__EditSnippetButton>
    <SnippetEditorFields
      activeField={null}
      containerPadding="0 20px"
      data={
        Object {
          "description": "Test description, %%replacement_variable%%",
          "slug": "test-slug",
          "title": "Test title",
        }
      }
      descriptionEditorFieldPlaceholder="Modify your meta description by editing it right here"
      descriptionLengthProgress={
        Object {
          "actual": 42,
          "max": 156,
          "score": 6,
        }
      }
      hoveredField={null}
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      recommendedReplacementVariables={Array []}
      replacementVariables={Array []}
      titleLengthProgress={
        Object {
          "actual": 0,
          "max": 600,
          "score": 1,
        }
      }
    />
    <SnippetEditor__CloseEditorButton
      activeBackgroundColor="#f7f7f7"
      activeBorderColor="#888"
      activeColor="#000"
      backgroundColor="#f7f7f7"
      borderColor="#ccc"
      boxShadowColor="#ccc"
      focusBackgroundColor="#fff"
      focusBorderColor="#0066cd"
      focusColor="#000"
      hoverBackgroundColor="#fff"
      hoverBorderColor="#888"
      hoverColor="#000"
      onClick={[Function]}
      textColor="#555"
      type="button"
    >
      Close snippet editor
    </SnippetEditor__CloseEditorButton>
  </div>
</ErrorBoundary>
`;

exports[`SnippetEditor removes the highlight when calling unsetFieldFocus 1`] = `
.c21 {
  box-sizing: border-box;
  width: 100%;
  height: 8px;
  display: block;
  margin-top: 8px;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background-color: #f7f7f7;
  border: 1px solid #ddd;
}

.c21::-webkit-progress-bar {
  background-color: #f7f7f7;
}

.c21::-webkit-progress-value {
  background-color: #dc3232;
  -webkit-transition: width 250ms;
  transition: width 250ms;
}

.c21::-moz-progress-bar {
  background-color: #dc3232;
}

.c21::-ms-fill {
  background-color: #dc3232;
  border: 0;
}

.c25 {
  box-sizing: border-box;
  width: 100%;
  height: 8px;
  display: block;
  margin-top: 8px;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background-color: #f7f7f7;
  border: 1px solid #ddd;
}

.c25::-webkit-progress-bar {
  background-color: #f7f7f7;
}

.c25::-webkit-progress-value {
  background-color: #ee7c1b;
  -webkit-transition: width 250ms;
  transition: width 250ms;
}

.c25::-moz-progress-bar {
  background-color: #ee7c1b;
}

.c25::-ms-fill {
  background-color: #ee7c1b;
  border: 0;
}

.c17 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  margin: 24px 0 0 0;
}

.c16 {
  padding: 0 20px;
}

.c18 {
  -webkit-flex: 1 1 200px;
  -ms-flex: 1 1 200px;
  flex: 1 1 200px;
  min-width: 200px;
  cursor: pointer;
  font-size: 16px;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin: 4px 0;
}

.c19 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  padding-left: 8px;
  height: 33px;
  border: 1px solid #dbdbdb;
  font-size: 13px;
}

.c19:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c19::-moz-focus-inner {
  border-width: 0;
}

.c19:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c19:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c19 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c19 svg {
  margin-right: 7px;
  fill: #555;
}

.c0 {
  border-bottom: 1px hidden #fff;
  border-radius: 2px;
  box-shadow: 0 1px 2px rgba(0,0,0,.2);
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  max-width: 600px;
  box-sizing: border-box;
  font-size: 14px;
}

.c2 {
  cursor: pointer;
  position: relative;
}

.c3 {
  color: #1e0fbe;
  -webkit-text-decoration: none;
  text-decoration: none;
  font-size: 18px;
  line-height: 1.2;
  font-weight: normal;
  margin: 0;
  display: inline-block;
  overflow: hidden;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c4 {
  display: inline-block;
  font-size: 16px;
  line-height: 1.2em;
  max-height: 2.4em;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c5 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  white-space: nowrap;
  font-size: 14px;
}

.c6 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  white-space: nowrap;
  font-size: 14px;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 100%;
}

.c8 {
  color: #545454;
  cursor: pointer;
  position: relative;
  max-width: 600px;
  font-size: 13px;
  font-size: 14px;
  line-height: 20px;
}

.c1 {
  padding: 8px 16px;
}

.c7 {
  border: 0;
  border-bottom: 1px solid #DFE1E5;
  margin: 0;
}

.c23 {
  border: none;
  width: 100%;
  height: inherit;
  line-height: inherit;
  font-family: inherit;
  font-size: inherit;
  color: inherit;
}

.c23:focus {
  outline: 0;
}

.c20 {
  -webkit-flex: 0 1 100%;
  -ms-flex: 0 1 100%;
  flex: 0 1 100%;
  border: 1px solid #ddd;
  padding: 3px 5px;
  box-sizing: border-box;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  cursor: text;
}

.c20 .public-DraftStyleDefault-block {
  line-height: 24px;
}

.c20::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width%3D%221792%22%20height%3D%221792%22%20viewBox%3D%220%200%201792%201792%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20fill%3D%22transparent%22%20d%3D%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20%2F%3E%3C%2Fsvg%3E );
  background-size: 25px;
  content: "";
}

.c22 {
  -webkit-flex: 0 1 100%;
  -ms-flex: 0 1 100%;
  flex: 0 1 100%;
  border: 1px solid #ddd;
  padding: 3px 5px;
  box-sizing: border-box;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  cursor: text;
}

.c22::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width%3D%221792%22%20height%3D%221792%22%20viewBox%3D%220%200%201792%201792%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20fill%3D%22transparent%22%20d%3D%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20%2F%3E%3C%2Fsvg%3E );
  background-size: 25px;
  content: "";
}

.c24 {
  -webkit-flex: 0 1 100%;
  -ms-flex: 0 1 100%;
  flex: 0 1 100%;
  border: 1px solid #ddd;
  padding: 3px 5px;
  box-sizing: border-box;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  cursor: text;
  min-height: 72px;
  padding: 2px 6px;
  line-height: 24px;
}

.c24 .public-DraftEditorPlaceholder-root {
  color: #616161;
}

.c24 .public-DraftEditorPlaceholder-hasFocus {
  color: #616161;
}

.c24::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width%3D%221792%22%20height%3D%221792%22%20viewBox%3D%220%200%201792%201792%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20fill%3D%22transparent%22%20d%3D%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20%2F%3E%3C%2Fsvg%3E );
  background-size: 25px;
  content: "";
}

.c10 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: #555;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 3px 0 0 3px;
}

.c10:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c10::-moz-focus-inner {
  border-width: 0;
}

.c10:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c10:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c10 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c10:hover,
.c10:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
  box-shadow: none;
}

.c12 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: transparent;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 0 3px 3px 0;
}

.c12:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c12::-moz-focus-inner {
  border-width: 0;
}

.c12:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c12:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c12 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c12:hover,
.c12:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
  box-shadow: none;
}

.c9 {
  display: inline-block;
  margin-top: 10px;
  border: 1px solid #dbdbdb;
  border-radius: 4px;
  background-color: #f7f7f7;
  vertical-align: top;
}

.c14 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin: 10px 0 0 4px;
  fill: #555;
  padding-left: 8px;
}

.c14:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c14::-moz-focus-inner {
  border-width: 0;
}

.c14:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c14:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c14 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c14 svg {
  margin-right: 7px;
}

.c26 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin-top: 24px;
}

.c26:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c26::-moz-focus-inner {
  border-width: 0;
}

.c26:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c26:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c26 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c11 {
  width: 22px;
  height: 22px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c13 {
  width: 18px;
  height: 18px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c15 {
  width: 16px;
  height: 16px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c19::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c10::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c12::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c14::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c26::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

<SnippetEditor
  baseUrl="http://example.org/"
  data={
    Object {
      "description": "Test description, %%replacement_variable%%",
      "slug": "test-slug",
      "title": "Test title",
    }
  }
  date=""
  descriptionEditorFieldPlaceholder=""
  descriptionLengthProgress={
    Object {
      "actual": 0,
      "max": 156,
      "score": 0,
    }
  }
  hasPaperStyle={true}
  locale="en"
  mapEditorDataToPreview={null}
  mode="mobile"
  onChange={[MockFunction]}
  onChangeAnalysisData={[Function]}
  recommendedReplacementVariables={Array []}
  replacementVariables={Array []}
  showCloseButton={true}
  titleLengthProgress={
    Object {
      "actual": 0,
      "max": 600,
      "score": 0,
    }
  }
  wordsToHighlight={Array []}
>
  <ErrorBoundary>
    <div>
      <SnippetPreview
        activeField={null}
        breadcrumbs={null}
        date=""
        description="Test description, %%replacement_variable%%"
        hoveredField={null}
        isAmp={false}
        keyword=""
        locale="en"
        mode="mobile"
        onHover={[Function]}
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        title="Test title"
        url="example.org/test-slug"
        wordsToHighlight={Array []}
      >
        <section>
          <SnippetPreview__MobileContainer
            padding={20}
            width={640}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "SnippetPreview__MobileContainer-sc-1hxg8jo-1",
                    "isStatic": true,
                    "lastClassName": "c0",
                    "rules": Array [
                      "border-bottom:1px hidden #fff;border-radius:2px;box-shadow:0 1px 2px rgba(0,0,0,.2);font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;max-width:",
                      "600",
                      "px;box-sizing:border-box;font-size:14px;",
                    ],
                  },
                  "displayName": "SnippetPreview__MobileContainer",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "SnippetPreview__MobileContainer-sc-1hxg8jo-1",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              padding={20}
              width={640}
            >
              <div
                className="c0"
                width={640}
              >
                <SnippetPreview__MobilePartContainer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__MobilePartContainer-sc-1hxg8jo-12",
                          "isStatic": true,
                          "lastClassName": "c1",
                          "rules": Array [
                            "padding:8px 16px;",
                          ],
                        },
                        "displayName": "SnippetPreview__MobilePartContainer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__MobilePartContainer-sc-1hxg8jo-12",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="c1"
                    >
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          SEO title preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__BaseTitle
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__BaseTitle-sc-1hxg8jo-2",
                                "isStatic": true,
                                "lastClassName": "c2",
                                "rules": Array [
                                  "cursor:pointer;position:relative;",
                                ],
                              },
                              "displayName": "SnippetPreview__BaseTitle",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__BaseTitle-sc-1hxg8jo-2",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                        >
                          <div
                            className="c2"
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                          >
                            <SnippetPreview__TitleBounded>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__TitleBounded-sc-1hxg8jo-5",
                                      "isStatic": true,
                                      "lastClassName": "c3",
                                      "rules": Array [
                                        "color:",
                                        "#1e0fbe",
                                        ";text-decoration:none;font-size:18px;line-height:1.2;font-weight:normal;margin:0;display:inline-block;overflow:hidden;max-width:",
                                        "600",
                                        "px;vertical-align:top;text-overflow:ellipsis;",
                                        "max-width:",
                                        "600",
                                        "px;vertical-align:top;text-overflow:ellipsis;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__TitleBounded",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__Title-sc-1hxg8jo-4",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__TitleBounded-sc-1hxg8jo-5",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="c3"
                                >
                                  <SnippetPreview__TitleUnboundedMobile>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "SnippetPreview__TitleUnboundedMobile-sc-1hxg8jo-7",
                                            "isStatic": true,
                                            "lastClassName": "c4",
                                            "rules": Array [
                                              "display:inline-block;font-size:16px;line-height:1.2em;max-height:2.4em;overflow:hidden;text-overflow:ellipsis;",
                                            ],
                                          },
                                          "displayName": "SnippetPreview__TitleUnboundedMobile",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "SnippetPreview__TitleUnboundedMobile-sc-1hxg8jo-7",
                                          "target": "span",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={[Function]}
                                    >
                                      <span
                                        className="c4"
                                      >
                                        Test title
                                      </span>
                                    </StyledComponent>
                                  </SnippetPreview__TitleUnboundedMobile>
                                </div>
                              </StyledComponent>
                            </SnippetPreview__TitleBounded>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__BaseTitle>
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          Url preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__BaseUrl>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__BaseUrl-sc-1hxg8jo-8",
                                "isStatic": true,
                                "lastClassName": "c5",
                                "rules": Array [
                                  "display:inline-block;color:",
                                  "#006621",
                                  ";cursor:pointer;position:relative;max-width:90%;white-space:nowrap;font-size:14px;",
                                ],
                              },
                              "displayName": "SnippetPreview__BaseUrl",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__BaseUrl-sc-1hxg8jo-8",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <div
                            className="c5"
                          >
                            <SnippetPreview__BaseUrlOverflowContainer
                              onMouseEnter={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__BaseUrlOverflowContainer-sc-1hxg8jo-9",
                                      "isStatic": true,
                                      "lastClassName": "c6",
                                      "rules": Array [
                                        "display:inline-block;color:",
                                        "#006621",
                                        ";cursor:pointer;position:relative;max-width:90%;white-space:nowrap;font-size:14px;",
                                        "overflow:hidden;text-overflow:ellipsis;max-width:100%;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__BaseUrlOverflowContainer",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__BaseUrl-sc-1hxg8jo-8",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__BaseUrlOverflowContainer-sc-1hxg8jo-9",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                onMouseEnter={[Function]}
                                onMouseLeave={[Function]}
                                onMouseUp={[Function]}
                              >
                                <div
                                  className="c6"
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseUp={[Function]}
                                >
                                  example.org â€º test-slug
                                </div>
                              </StyledComponent>
                            </SnippetPreview__BaseUrlOverflowContainer>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__BaseUrl>
                    </div>
                  </StyledComponent>
                </SnippetPreview__MobilePartContainer>
                <SnippetPreview__Separator>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__Separator-sc-1hxg8jo-16",
                          "isStatic": true,
                          "lastClassName": "c7",
                          "rules": Array [
                            "border:0;border-bottom:1px solid #DFE1E5;margin:0;",
                          ],
                        },
                        "displayName": "SnippetPreview__Separator",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__Separator-sc-1hxg8jo-16",
                        "target": "hr",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <hr
                      className="c7"
                    />
                  </StyledComponent>
                </SnippetPreview__Separator>
                <SnippetPreview__MobilePartContainer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__MobilePartContainer-sc-1hxg8jo-12",
                          "isStatic": true,
                          "lastClassName": "c1",
                          "rules": Array [
                            "padding:8px 16px;",
                          ],
                        },
                        "displayName": "SnippetPreview__MobilePartContainer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__MobilePartContainer-sc-1hxg8jo-12",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="c1"
                    >
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          Meta description preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__MobileDescription
                        isDescriptionPlaceholder={false}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__MobileDescription-sc-1hxg8jo-11",
                                "isStatic": false,
                                "lastClassName": "c8",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";cursor:pointer;position:relative;max-width:",
                                  "600",
                                  "px;font-size:13px;",
                                  "font-size:14px;line-height:20px;",
                                ],
                              },
                              "displayName": "SnippetPreview__MobileDescription",
                              "foldedComponentIds": Array [
                                "SnippetPreview__DesktopDescription-sc-1hxg8jo-10",
                              ],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__MobileDescription-sc-1hxg8jo-11",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isDescriptionPlaceholder={false}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                        >
                          <div
                            className="c8"
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                          >
                            <SnippetPreview__MobileDescription
                              isDescriptionPlaceholder={false}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__MobileDescription-sc-1hxg8jo-11",
                                      "isStatic": false,
                                      "lastClassName": "c8",
                                      "rules": Array [
                                        "color:",
                                        [Function],
                                        ";cursor:pointer;position:relative;max-width:",
                                        "600",
                                        "px;font-size:13px;",
                                        "font-size:14px;line-height:20px;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__MobileDescription",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__DesktopDescription-sc-1hxg8jo-10",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__MobileDescription-sc-1hxg8jo-11",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={[Function]}
                                isDescriptionPlaceholder={false}
                              >
                                <div
                                  className="c8"
                                >
                                  Test description, %%replacement_variable%%
                                </div>
                              </StyledComponent>
                            </SnippetPreview__MobileDescription>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__MobileDescription>
                    </div>
                  </StyledComponent>
                </SnippetPreview__MobilePartContainer>
              </div>
            </StyledComponent>
          </SnippetPreview__MobileContainer>
        </section>
      </SnippetPreview>
      <ModeSwitcher
        active="mobile"
        onChange={[Function]}
      >
        <ModeSwitcher__Switcher>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "ModeSwitcher__Switcher-sc-9lbpr3-3",
                  "isStatic": true,
                  "lastClassName": "c9",
                  "rules": Array [
                    "display:inline-block;margin-top:10px;border:1px solid #dbdbdb;border-radius:4px;background-color:#f7f7f7;vertical-align:top;",
                  ],
                },
                "displayName": "ModeSwitcher__Switcher",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModeSwitcher__Switcher-sc-9lbpr3-3",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="c9"
            >
              <ModeSwitcher__MobileButton
                activeBackgroundColor="#f7f7f7"
                activeBorderColor="#888"
                activeColor="#000"
                aria-pressed={true}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                focusBackgroundColor="#fff"
                focusBorderColor="#0066cd"
                focusColor="#000"
                hoverBackgroundColor="#fff"
                hoverBorderColor="#888"
                hoverColor="#000"
                isActive={true}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <StyledComponent
                  activeBackgroundColor="#f7f7f7"
                  activeBorderColor="#888"
                  activeColor="#000"
                  aria-pressed={true}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  focusBackgroundColor="#fff"
                  focusBorderColor="#0066cd"
                  focusColor="#000"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "ModeSwitcher__MobileButton-sc-9lbpr3-1",
                        "isStatic": false,
                        "lastClassName": "c10",
                        "rules": Array [
                          "color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";box-shadow:0 1px 0 ",
                          [Function],
                          ";",
                          "&:active{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";box-shadow:inset 0 2px 5px -3px ",
                          "rgba( 0, 0, 0, 0.5 )",
                          ";}",
                          "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                          [Function],
                          ";color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";box-shadow:0 0 3px ",
                          "rgba( 8, 74, 103, 0.8 )",
                          ";}",
                          "&:hover{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";}",
                          "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                          "1px",
                          ";border-style:solid;margin:0;padding:",
                          "4px",
                          " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                          [Function],
                          ";overflow:visible;min-height:",
                          "32px",
                          ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                          "22px",
                          ";}}",
                          "border:none;border-bottom:4px solid transparent;width:31px;height:31px;border-color:",
                          [Function],
                          ";color:",
                          "#555",
                          ";transition:0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;transition-property:border-color;&:hover,&:focus{background-color:",
                          "#fff",
                          ";border:none;border-bottom:4px solid transparent;border-color:",
                          "#1e8cbe",
                          ";color:",
                          "#1e8cbe",
                          ";box-shadow:none;}",
                          "border-radius:3px 0 0 3px;",
                        ],
                      },
                      "defaultProps": Object {
                        "activeBackgroundColor": "#f7f7f7",
                        "activeBorderColor": "#888",
                        "activeColor": "#000",
                        "backgroundColor": "#f7f7f7",
                        "borderColor": "#ccc",
                        "boxShadowColor": "#ccc",
                        "focusBackgroundColor": "#fff",
                        "focusBorderColor": "#0066cd",
                        "focusColor": "#000",
                        "hoverBackgroundColor": "#fff",
                        "hoverBorderColor": "#888",
                        "hoverColor": "#000",
                        "textColor": "#555",
                        "type": "button",
                      },
                      "displayName": "ModeSwitcher__MobileButton",
                      "foldedComponentIds": Array [
                        "Button__BaseButton-sc-32rbq-4",
                        "Button-sc-32rbq-3",
                        "Button-sc-32rbq-1",
                        "Button-sc-32rbq-2",
                        "Button-sc-32rbq-0",
                        "ModeSwitcher__SwitcherButton-sc-9lbpr3-0",
                      ],
                      "propTypes": Object {
                        "activeBackgroundColor": [Function],
                        "activeBorderColor": [Function],
                        "activeColor": [Function],
                        "backgroundColor": [Function],
                        "borderColor": [Function],
                        "boxShadowColor": [Function],
                        "focusBackgroundColor": [Function],
                        "focusBorderColor": [Function],
                        "focusColor": [Function],
                        "hoverBackgroundColor": [Function],
                        "hoverBorderColor": [Function],
                        "hoverColor": [Function],
                        "textColor": [Function],
                        "type": [Function],
                      },
                      "render": [Function],
                      "styledComponentId": "ModeSwitcher__MobileButton-sc-9lbpr3-1",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hoverBackgroundColor="#fff"
                  hoverBorderColor="#888"
                  hoverColor="#000"
                  isActive={true}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <button
                    aria-pressed={true}
                    className="c10"
                    onClick={[Function]}
                    type="button"
                  >
                    <SvgIcon
                      color="currentColor"
                      icon="mobile"
                      size="22px"
                    >
                      <SvgIcon__StyledSvg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-mobile"
                        fill="currentColor"
                        focusable="false"
                        role="img"
                        size="22px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <StyledComponent
                          aria-hidden={true}
                          className="yoast-svg-icon yoast-svg-icon-mobile"
                          fill="currentColor"
                          focusable="false"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                "isStatic": false,
                                "lastClassName": "c11",
                                "rules": Array [
                                  "width:",
                                  [Function],
                                  ";height:",
                                  [Function],
                                  ";flex:none;",
                                ],
                              },
                              "displayName": "SvgIcon__StyledSvg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          role="img"
                          size="22px"
                          viewBox="0 0 1792 1792"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <svg
                            aria-hidden={true}
                            className="yoast-svg-icon yoast-svg-icon-mobile c11"
                            fill="currentColor"
                            focusable="false"
                            role="img"
                            size="22px"
                            viewBox="0 0 1792 1792"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
                            />
                          </svg>
                        </StyledComponent>
                      </SvgIcon__StyledSvg>
                    </SvgIcon>
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Mobile preview
                      </span>
                    </ScreenReaderText>
                  </button>
                </StyledComponent>
              </ModeSwitcher__MobileButton>
              <ModeSwitcher__DesktopButton
                activeBackgroundColor="#f7f7f7"
                activeBorderColor="#888"
                activeColor="#000"
                aria-pressed={false}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                focusBackgroundColor="#fff"
                focusBorderColor="#0066cd"
                focusColor="#000"
                hoverBackgroundColor="#fff"
                hoverBorderColor="#888"
                hoverColor="#000"
                isActive={false}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <StyledComponent
                  activeBackgroundColor="#f7f7f7"
                  activeBorderColor="#888"
                  activeColor="#000"
                  aria-pressed={false}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  focusBackgroundColor="#fff"
                  focusBorderColor="#0066cd"
                  focusColor="#000"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "ModeSwitcher__DesktopButton-sc-9lbpr3-2",
                        "isStatic": false,
                        "lastClassName": "c12",
                        "rules": Array [
                          "color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";box-shadow:0 1px 0 ",
                          [Function],
                          ";",
                          "&:active{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";box-shadow:inset 0 2px 5px -3px ",
                          "rgba( 0, 0, 0, 0.5 )",
                          ";}",
                          "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                          [Function],
                          ";color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";box-shadow:0 0 3px ",
                          "rgba( 8, 74, 103, 0.8 )",
                          ";}",
                          "&:hover{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";}",
                          "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                          "1px",
                          ";border-style:solid;margin:0;padding:",
                          "4px",
                          " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                          [Function],
                          ";overflow:visible;min-height:",
                          "32px",
                          ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                          "22px",
                          ";}}",
                          "border:none;border-bottom:4px solid transparent;width:31px;height:31px;border-color:",
                          [Function],
                          ";color:",
                          "#555",
                          ";transition:0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;transition-property:border-color;&:hover,&:focus{background-color:",
                          "#fff",
                          ";border:none;border-bottom:4px solid transparent;border-color:",
                          "#1e8cbe",
                          ";color:",
                          "#1e8cbe",
                          ";box-shadow:none;}",
                          "border-radius:0 3px 3px 0;",
                        ],
                      },
                      "defaultProps": Object {
                        "activeBackgroundColor": "#f7f7f7",
                        "activeBorderColor": "#888",
                        "activeColor": "#000",
                        "backgroundColor": "#f7f7f7",
                        "borderColor": "#ccc",
                        "boxShadowColor": "#ccc",
                        "focusBackgroundColor": "#fff",
                        "focusBorderColor": "#0066cd",
                        "focusColor": "#000",
                        "hoverBackgroundColor": "#fff",
                        "hoverBorderColor": "#888",
                        "hoverColor": "#000",
                        "textColor": "#555",
                        "type": "button",
                      },
                      "displayName": "ModeSwitcher__DesktopButton",
                      "foldedComponentIds": Array [
                        "Button__BaseButton-sc-32rbq-4",
                        "Button-sc-32rbq-3",
                        "Button-sc-32rbq-1",
                        "Button-sc-32rbq-2",
                        "Button-sc-32rbq-0",
                        "ModeSwitcher__SwitcherButton-sc-9lbpr3-0",
                      ],
                      "propTypes": Object {
                        "activeBackgroundColor": [Function],
                        "activeBorderColor": [Function],
                        "activeColor": [Function],
                        "backgroundColor": [Function],
                        "borderColor": [Function],
                        "boxShadowColor": [Function],
                        "focusBackgroundColor": [Function],
                        "focusBorderColor": [Function],
                        "focusColor": [Function],
                        "hoverBackgroundColor": [Function],
                        "hoverBorderColor": [Function],
                        "hoverColor": [Function],
                        "textColor": [Function],
                        "type": [Function],
                      },
                      "render": [Function],
                      "styledComponentId": "ModeSwitcher__DesktopButton-sc-9lbpr3-2",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hoverBackgroundColor="#fff"
                  hoverBorderColor="#888"
                  hoverColor="#000"
                  isActive={false}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <button
                    aria-pressed={false}
                    className="c12"
                    onClick={[Function]}
                    type="button"
                  >
                    <SvgIcon
                      color="currentColor"
                      icon="desktop"
                      size="18px"
                    >
                      <SvgIcon__StyledSvg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-desktop"
                        fill="currentColor"
                        focusable="false"
                        role="img"
                        size="18px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <StyledComponent
                          aria-hidden={true}
                          className="yoast-svg-icon yoast-svg-icon-desktop"
                          fill="currentColor"
                          focusable="false"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                "isStatic": false,
                                "lastClassName": "c13",
                                "rules": Array [
                                  "width:",
                                  [Function],
                                  ";height:",
                                  [Function],
                                  ";flex:none;",
                                ],
                              },
                              "displayName": "SvgIcon__StyledSvg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          role="img"
                          size="18px"
                          viewBox="0 0 1792 1792"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <svg
                            aria-hidden={true}
                            className="yoast-svg-icon yoast-svg-icon-desktop c13"
                            fill="currentColor"
                            focusable="false"
                            role="img"
                            size="18px"
                            viewBox="0 0 1792 1792"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
                            />
                          </svg>
                        </StyledComponent>
                      </SvgIcon__StyledSvg>
                    </SvgIcon>
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Desktop preview
                      </span>
                    </ScreenReaderText>
                  </button>
                </StyledComponent>
              </ModeSwitcher__DesktopButton>
            </div>
          </StyledComponent>
        </ModeSwitcher__Switcher>
      </ModeSwitcher>
      <SnippetEditor__EditSnippetButton
        activeBackgroundColor="#f7f7f7"
        activeBorderColor="#888"
        activeColor="#000"
        aria-expanded={true}
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        focusBackgroundColor="#fff"
        focusBorderColor="#0066cd"
        focusColor="#000"
        hoverBackgroundColor="#fff"
        hoverBorderColor="#888"
        hoverColor="#000"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <StyledComponent
          activeBackgroundColor="#f7f7f7"
          activeBorderColor="#888"
          activeColor="#000"
          aria-expanded={true}
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          focusBackgroundColor="#fff"
          focusBorderColor="#0066cd"
          focusColor="#000"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "SnippetEditor__EditSnippetButton-sc-144bmm3-1",
                "isStatic": false,
                "lastClassName": "c14",
                "rules": Array [
                  "color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";background:",
                  [Function],
                  ";box-shadow:0 1px 0 ",
                  [Function],
                  ";",
                  "&:active{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";box-shadow:inset 0 2px 5px -3px ",
                  "rgba( 0, 0, 0, 0.5 )",
                  ";}",
                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                  [Function],
                  ";color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";box-shadow:0 0 3px ",
                  "rgba( 8, 74, 103, 0.8 )",
                  ";}",
                  "&:hover{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";}",
                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                  "1px",
                  ";border-style:solid;margin:0;padding:",
                  "4px",
                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                  [Function],
                  ";overflow:visible;min-height:",
                  "32px",
                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                  "22px",
                  ";}}",
                  "height:33px;border:1px solid #dbdbdb;box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;",
                  "margin:",
                  [Function],
                  ";fill:",
                  "#555",
                  ";padding-left:8px;& svg{",
                  [Function],
                  ":7px;}",
                ],
              },
              "defaultProps": Object {
                "activeBackgroundColor": "#f7f7f7",
                "activeBorderColor": "#888",
                "activeColor": "#000",
                "backgroundColor": "#f7f7f7",
                "borderColor": "#ccc",
                "boxShadowColor": "#ccc",
                "focusBackgroundColor": "#fff",
                "focusBorderColor": "#0066cd",
                "focusColor": "#000",
                "hoverBackgroundColor": "#fff",
                "hoverBorderColor": "#888",
                "hoverColor": "#000",
                "textColor": "#555",
                "type": "button",
              },
              "displayName": "SnippetEditor__EditSnippetButton",
              "foldedComponentIds": Array [
                "Button__BaseButton-sc-32rbq-4",
                "Button-sc-32rbq-3",
                "Button-sc-32rbq-1",
                "Button-sc-32rbq-2",
                "Button-sc-32rbq-0",
                "SnippetEditor__SnippetEditorButton-sc-144bmm3-0",
              ],
              "propTypes": Object {
                "activeBackgroundColor": [Function],
                "activeBorderColor": [Function],
                "activeColor": [Function],
                "backgroundColor": [Function],
                "borderColor": [Function],
                "boxShadowColor": [Function],
                "focusBackgroundColor": [Function],
                "focusBorderColor": [Function],
                "focusColor": [Function],
                "hoverBackgroundColor": [Function],
                "hoverBorderColor": [Function],
                "hoverColor": [Function],
                "textColor": [Function],
                "type": [Function],
              },
              "render": [Function],
              "styledComponentId": "SnippetEditor__EditSnippetButton-sc-144bmm3-1",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={[Function]}
          hoverBackgroundColor="#fff"
          hoverBorderColor="#888"
          hoverColor="#000"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <button
            aria-expanded={true}
            className="c14"
            onClick={[Function]}
            type="button"
          >
            <SvgIcon
              color="currentColor"
              icon="edit"
              size="16px"
            >
              <SvgIcon__StyledSvg
                aria-hidden={true}
                className="yoast-svg-icon yoast-svg-icon-edit"
                fill="currentColor"
                focusable="false"
                role="img"
                size="16px"
                viewBox="0 0 1792 1792"
                xmlns="http://www.w3.org/2000/svg"
              >
                <StyledComponent
                  aria-hidden={true}
                  className="yoast-svg-icon yoast-svg-icon-edit"
                  fill="currentColor"
                  focusable="false"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                        "isStatic": false,
                        "lastClassName": "c15",
                        "rules": Array [
                          "width:",
                          [Function],
                          ";height:",
                          [Function],
                          ";flex:none;",
                        ],
                      },
                      "displayName": "SvgIcon__StyledSvg",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                      "target": "svg",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  role="img"
                  size="16px"
                  viewBox="0 0 1792 1792"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <svg
                    aria-hidden={true}
                    className="yoast-svg-icon yoast-svg-icon-edit c15"
                    fill="currentColor"
                    focusable="false"
                    role="img"
                    size="16px"
                    viewBox="0 0 1792 1792"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
                    />
                  </svg>
                </StyledComponent>
              </SvgIcon__StyledSvg>
            </SvgIcon>
            Edit snippet
          </button>
        </StyledComponent>
      </SnippetEditor__EditSnippetButton>
      <SnippetEditorFields
        activeField={null}
        containerPadding="0 20px"
        data={
          Object {
            "description": "Test description, %%replacement_variable%%",
            "slug": "test-slug",
            "title": "Test title",
          }
        }
        descriptionEditorFieldPlaceholder="Modify your meta description by editing it right here"
        descriptionLengthProgress={
          Object {
            "actual": 42,
            "max": 156,
            "score": 6,
          }
        }
        hoveredField={null}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        recommendedReplacementVariables={Array []}
        replacementVariables={Array []}
        titleLengthProgress={
          Object {
            "actual": 0,
            "max": 600,
            "score": 1,
          }
        }
      >
        <shared__StyledEditor
          padding="0 20px"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "shared__StyledEditor-lzs0hf-5",
                  "isStatic": false,
                  "lastClassName": "c16",
                  "rules": Array [
                    "padding:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "shared__StyledEditor",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "shared__StyledEditor-lzs0hf-5",
                "target": "section",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            padding="0 20px"
          >
            <section
              className="c16"
            >
              <shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "shared__FormSection-lzs0hf-4",
                        "isStatic": true,
                        "lastClassName": "c17",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "shared__FormSection-lzs0hf-4",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="c17"
                  >
                    <ReplacementVariableEditor
                      content="Test title"
                      editorRef={[Function]}
                      fieldId="snippet-editor-field-title"
                      isActive={false}
                      isHovered={false}
                      label="SEO title"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      recommendedReplacementVariables={Array []}
                      replacementVariables={Array []}
                      withCaret={true}
                    >
                      <shared__SimulatedLabel
                        id="18"
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared__SimulatedLabel-lzs0hf-6",
                                "isStatic": true,
                                "lastClassName": "c18",
                                "rules": Array [
                                  "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                                ],
                              },
                              "displayName": "shared__SimulatedLabel",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "shared__SimulatedLabel-lzs0hf-6",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          id="18"
                          onClick={[Function]}
                        >
                          <div
                            className="c18"
                            id="18"
                            onClick={[Function]}
                          >
                            SEO title
                          </div>
                        </StyledComponent>
                      </shared__SimulatedLabel>
                      <shared__TriggerReplacementVariableSuggestionsButton
                        activeBackgroundColor="#f7f7f7"
                        activeBorderColor="#888"
                        activeColor="#000"
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        focusBackgroundColor="#fff"
                        focusBorderColor="#0066cd"
                        focusColor="#000"
                        hoverBackgroundColor="#fff"
                        hoverBorderColor="#888"
                        hoverColor="#000"
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <StyledComponent
                          activeBackgroundColor="#f7f7f7"
                          activeBorderColor="#888"
                          activeColor="#000"
                          backgroundColor="#f7f7f7"
                          borderColor="#ccc"
                          boxShadowColor="#ccc"
                          focusBackgroundColor="#fff"
                          focusBorderColor="#0066cd"
                          focusColor="#000"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared__TriggerReplacementVariableSuggestionsButton-lzs0hf-7",
                                "isStatic": false,
                                "lastClassName": "c19",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";background:",
                                  [Function],
                                  ";box-shadow:0 1px 0 ",
                                  [Function],
                                  ";",
                                  "&:active{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";box-shadow:inset 0 2px 5px -3px ",
                                  "rgba( 0, 0, 0, 0.5 )",
                                  ";}",
                                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                                  [Function],
                                  ";color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";box-shadow:0 0 3px ",
                                  "rgba( 8, 74, 103, 0.8 )",
                                  ";}",
                                  "&:hover{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";}",
                                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                                  "1px",
                                  ";border-style:solid;margin:0;padding:",
                                  "4px",
                                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                                  [Function],
                                  ";overflow:visible;min-height:",
                                  "32px",
                                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                                  "22px",
                                  ";}}",
                                  "box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;padding-left:8px;height:33px;border:1px solid #dbdbdb;font-size:13px;& svg{",
                                  [Function],
                                  ":7px;fill:",
                                  "#555",
                                  ";}",
                                ],
                              },
                              "defaultProps": Object {
                                "activeBackgroundColor": "#f7f7f7",
                                "activeBorderColor": "#888",
                                "activeColor": "#000",
                                "backgroundColor": "#f7f7f7",
                                "borderColor": "#ccc",
                                "boxShadowColor": "#ccc",
                                "focusBackgroundColor": "#fff",
                                "focusBorderColor": "#0066cd",
                                "focusColor": "#000",
                                "hoverBackgroundColor": "#fff",
                                "hoverBorderColor": "#888",
                                "hoverColor": "#000",
                                "textColor": "#555",
                                "type": "button",
                              },
                              "displayName": "shared__TriggerReplacementVariableSuggestionsButton",
                              "foldedComponentIds": Array [
                                "Button__BaseButton-sc-32rbq-4",
                                "Button-sc-32rbq-3",
                                "Button-sc-32rbq-1",
                                "Button-sc-32rbq-2",
                                "Button-sc-32rbq-0",
                              ],
                              "propTypes": Object {
                                "activeBackgroundColor": [Function],
                                "activeBorderColor": [Function],
                                "activeColor": [Function],
                                "backgroundColor": [Function],
                                "borderColor": [Function],
                                "boxShadowColor": [Function],
                                "focusBackgroundColor": [Function],
                                "focusBorderColor": [Function],
                                "focusColor": [Function],
                                "hoverBackgroundColor": [Function],
                                "hoverBorderColor": [Function],
                                "hoverColor": [Function],
                                "textColor": [Function],
                                "type": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "shared__TriggerReplacementVariableSuggestionsButton-lzs0hf-7",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverBackgroundColor="#fff"
                          hoverBorderColor="#888"
                          hoverColor="#000"
                          onClick={[Function]}
                          textColor="#555"
                          type="button"
                        >
                          <button
                            className="c19"
                            onClick={[Function]}
                            type="button"
                          >
                            <SvgIcon
                              color="currentColor"
                              icon="plus-circle"
                              size="16px"
                            >
                              <SvgIcon__StyledSvg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="16px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <StyledComponent
                                  aria-hidden={true}
                                  className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                  fill="currentColor"
                                  focusable="false"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                        "isStatic": false,
                                        "lastClassName": "c15",
                                        "rules": Array [
                                          "width:",
                                          [Function],
                                          ";height:",
                                          [Function],
                                          ";flex:none;",
                                        ],
                                      },
                                      "displayName": "SvgIcon__StyledSvg",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                      "target": "svg",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  role="img"
                                  size="16px"
                                  viewBox="0 0 1792 1792"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="yoast-svg-icon yoast-svg-icon-plus-circle c15"
                                    fill="currentColor"
                                    focusable="false"
                                    role="img"
                                    size="16px"
                                    viewBox="0 0 1792 1792"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M1344 960v-128q0-26-19-45t-45-19h-256v-256q0-26-19-45t-45-19h-128q-26 0-45 19t-19 45v256h-256q-26 0-45 19t-19 45v128q0 26 19 45t45 19h256v256q0 26 19 45t45 19h128q26 0 45-19t19-45v-256h256q26 0 45-19t19-45zm320-64q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"
                                    />
                                  </svg>
                                </StyledComponent>
                              </SvgIcon__StyledSvg>
                            </SvgIcon>
                            Insert snippet variable
                          </button>
                        </StyledComponent>
                      </shared__TriggerReplacementVariableSuggestionsButton>
                      <shared
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {},
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared-lzs0hf-1",
                                "isStatic": false,
                                "lastClassName": "c20",
                                "rules": Array [
                                  "flex:0 1 100%;border:1px solid ",
                                  [Function],
                                  ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                  [Function],
                                  ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                  ".public-DraftStyleDefault-block{line-height:24px;}",
                                  "&::before{display:block;position:absolute;top:-1px;",
                                  [Function],
                                  ":-25px;width:24px;height:24px;background-image:url( ",
                                  [Function],
                                  " );background-size:25px;content:\\"\\";}",
                                ],
                              },
                              "displayName": "shared",
                              "foldedComponentIds": Array [
                                "shared__InputContainer-lzs0hf-0",
                                "shared__TitleInputContainer-lzs0hf-2",
                              ],
                              "render": [Function],
                              "styledComponentId": "shared-lzs0hf-1",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isActive={false}
                          isHovered={false}
                          onClick={[Function]}
                        >
                          <div
                            className="c20"
                            onClick={[Function]}
                          >
                            <ReplacementVariableEditorStandalone
                              ariaLabelledBy="18"
                              content="Test title"
                              fieldId="snippet-editor-field-title"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              recommendedReplacementVariables={Array []}
                              replacementVariables={Array []}
                            >
                              <div />
                            </ReplacementVariableEditorStandalone>
                          </div>
                        </StyledComponent>
                      </shared>
                    </ReplacementVariableEditor>
                    <ProgressBar
                      aria-hidden="true"
                      backgroundColor="#f7f7f7"
                      borderColor="#ddd"
                      max={600}
                      progressColor="#dc3232"
                      value={0}
                    >
                      <StyledComponent
                        aria-hidden="true"
                        backgroundColor="#f7f7f7"
                        borderColor="#ddd"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ProgressBar-sc-9g9yx6-0",
                              "isStatic": false,
                              "lastClassName": "c25",
                              "rules": Array [
                                "box-sizing:border-box;width:100%;height:8px;display:block;margin-top:8px;appearance:none;background-color:",
                                [Function],
                                ";border:1px solid ",
                                [Function],
                                ";::-webkit-progress-bar{background-color:",
                                [Function],
                                ";}::-webkit-progress-value{background-color:",
                                [Function],
                                ";transition:width 250ms;}::-moz-progress-bar{background-color:",
                                [Function],
                                ";}::-ms-fill{background-color:",
                                [Function],
                                ";border:0;}",
                              ],
                            },
                            "defaultProps": Object {
                              "aria-hidden": "true",
                              "backgroundColor": "#f7f7f7",
                              "borderColor": "#ddd",
                              "max": 1,
                              "progressColor": "#7ad03a",
                              "value": 0,
                            },
                            "displayName": "ProgressBar",
                            "foldedComponentIds": Array [],
                            "propTypes": Object {
                              "aria-hidden": [Function],
                              "backgroundColor": [Function],
                              "borderColor": [Function],
                              "max": [Function],
                              "progressColor": [Function],
                              "value": [Function],
                            },
                            "render": [Function],
                            "styledComponentId": "ProgressBar-sc-9g9yx6-0",
                            "target": "progress",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        max={600}
                        progressColor="#dc3232"
                        value={0}
                      >
                        <progress
                          aria-hidden="true"
                          className="c21"
                          max={600}
                          value={0}
                        />
                      </StyledComponent>
                    </ProgressBar>
                  </div>
                </StyledComponent>
              </shared__FormSection>
              <shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "shared__FormSection-lzs0hf-4",
                        "isStatic": true,
                        "lastClassName": "c17",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "shared__FormSection-lzs0hf-4",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="c17"
                  >
                    <shared__SimulatedLabel
                      id="snippet-editor-field-17-slug"
                      onClick={[Function]}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "shared__SimulatedLabel-lzs0hf-6",
                              "isStatic": true,
                              "lastClassName": "c18",
                              "rules": Array [
                                "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                              ],
                            },
                            "displayName": "shared__SimulatedLabel",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "shared__SimulatedLabel-lzs0hf-6",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        id="snippet-editor-field-17-slug"
                        onClick={[Function]}
                      >
                        <div
                          className="c18"
                          id="snippet-editor-field-17-slug"
                          onClick={[Function]}
                        >
                          Slug
                        </div>
                      </StyledComponent>
                    </shared__SimulatedLabel>
                    <shared
                      isActive={false}
                      isHovered={false}
                      onClick={[Function]}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [
                              Object {},
                            ],
                            "componentStyle": ComponentStyle {
                              "componentId": "shared-lzs0hf-1",
                              "isStatic": false,
                              "lastClassName": "c22",
                              "rules": Array [
                                "flex:0 1 100%;border:1px solid ",
                                [Function],
                                ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                [Function],
                                ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                "&::before{display:block;position:absolute;top:-1px;",
                                [Function],
                                ":-25px;width:24px;height:24px;background-image:url( ",
                                [Function],
                                " );background-size:25px;content:\\"\\";}",
                              ],
                            },
                            "displayName": "shared",
                            "foldedComponentIds": Array [
                              "shared__InputContainer-lzs0hf-0",
                            ],
                            "render": [Function],
                            "styledComponentId": "shared-lzs0hf-1",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <div
                          className="c22"
                          onClick={[Function]}
                        >
                          <SnippetEditorFields__SlugInput
                            aria-labelledby="snippet-editor-field-17-slug"
                            id="snippet-editor-field-slug"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            value="test-slug"
                          >
                            <StyledComponent
                              aria-labelledby="snippet-editor-field-17-slug"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "SnippetEditorFields__SlugInput-sc-1ioqi3y-0",
                                    "isStatic": true,
                                    "lastClassName": "c23",
                                    "rules": Array [
                                      "border:none;width:100%;height:inherit;line-height:inherit;font-family:inherit;font-size:inherit;color:inherit;&:focus{outline:0;}",
                                    ],
                                  },
                                  "displayName": "SnippetEditorFields__SlugInput",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "SnippetEditorFields__SlugInput-sc-1ioqi3y-0",
                                  "target": "input",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={[Function]}
                              id="snippet-editor-field-slug"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              value="test-slug"
                            >
                              <input
                                aria-labelledby="snippet-editor-field-17-slug"
                                className="c23"
                                id="snippet-editor-field-slug"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                value="test-slug"
                              />
                            </StyledComponent>
                          </SnippetEditorFields__SlugInput>
                        </div>
                      </StyledComponent>
                    </shared>
                  </div>
                </StyledComponent>
              </shared__FormSection>
              <shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "shared__FormSection-lzs0hf-4",
                        "isStatic": true,
                        "lastClassName": "c17",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "shared__FormSection-lzs0hf-4",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="c17"
                  >
                    <ReplacementVariableEditor
                      content="Test description, %%replacement_variable%%"
                      editorRef={[Function]}
                      fieldId="snippet-editor-field-description"
                      isActive={false}
                      isHovered={false}
                      label="Meta description"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      placeholder="Modify your meta description by editing it right here"
                      recommendedReplacementVariables={Array []}
                      replacementVariables={Array []}
                      type="description"
                      withCaret={true}
                    >
                      <shared__SimulatedLabel
                        id="19"
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared__SimulatedLabel-lzs0hf-6",
                                "isStatic": true,
                                "lastClassName": "c18",
                                "rules": Array [
                                  "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                                ],
                              },
                              "displayName": "shared__SimulatedLabel",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "shared__SimulatedLabel-lzs0hf-6",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          id="19"
                          onClick={[Function]}
                        >
                          <div
                            className="c18"
                            id="19"
                            onClick={[Function]}
                          >
                            Meta description
                          </div>
                        </StyledComponent>
                      </shared__SimulatedLabel>
                      <shared__TriggerReplacementVariableSuggestionsButton
                        activeBackgroundColor="#f7f7f7"
                        activeBorderColor="#888"
                        activeColor="#000"
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        focusBackgroundColor="#fff"
                        focusBorderColor="#0066cd"
                        focusColor="#000"
                        hoverBackgroundColor="#fff"
                        hoverBorderColor="#888"
                        hoverColor="#000"
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <StyledComponent
                          activeBackgroundColor="#f7f7f7"
                          activeBorderColor="#888"
                          activeColor="#000"
                          backgroundColor="#f7f7f7"
                          borderColor="#ccc"
                          boxShadowColor="#ccc"
                          focusBackgroundColor="#fff"
                          focusBorderColor="#0066cd"
                          focusColor="#000"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared__TriggerReplacementVariableSuggestionsButton-lzs0hf-7",
                                "isStatic": false,
                                "lastClassName": "c19",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";background:",
                                  [Function],
                                  ";box-shadow:0 1px 0 ",
                                  [Function],
                                  ";",
                                  "&:active{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";box-shadow:inset 0 2px 5px -3px ",
                                  "rgba( 0, 0, 0, 0.5 )",
                                  ";}",
                                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                                  [Function],
                                  ";color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";box-shadow:0 0 3px ",
                                  "rgba( 8, 74, 103, 0.8 )",
                                  ";}",
                                  "&:hover{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";}",
                                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                                  "1px",
                                  ";border-style:solid;margin:0;padding:",
                                  "4px",
                                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                                  [Function],
                                  ";overflow:visible;min-height:",
                                  "32px",
                                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                                  "22px",
                                  ";}}",
                                  "box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;padding-left:8px;height:33px;border:1px solid #dbdbdb;font-size:13px;& svg{",
                                  [Function],
                                  ":7px;fill:",
                                  "#555",
                                  ";}",
                                ],
                              },
                              "defaultProps": Object {
                                "activeBackgroundColor": "#f7f7f7",
                                "activeBorderColor": "#888",
                                "activeColor": "#000",
                                "backgroundColor": "#f7f7f7",
                                "borderColor": "#ccc",
                                "boxShadowColor": "#ccc",
                                "focusBackgroundColor": "#fff",
                                "focusBorderColor": "#0066cd",
                                "focusColor": "#000",
                                "hoverBackgroundColor": "#fff",
                                "hoverBorderColor": "#888",
                                "hoverColor": "#000",
                                "textColor": "#555",
                                "type": "button",
                              },
                              "displayName": "shared__TriggerReplacementVariableSuggestionsButton",
                              "foldedComponentIds": Array [
                                "Button__BaseButton-sc-32rbq-4",
                                "Button-sc-32rbq-3",
                                "Button-sc-32rbq-1",
                                "Button-sc-32rbq-2",
                                "Button-sc-32rbq-0",
                              ],
                              "propTypes": Object {
                                "activeBackgroundColor": [Function],
                                "activeBorderColor": [Function],
                                "activeColor": [Function],
                                "backgroundColor": [Function],
                                "borderColor": [Function],
                                "boxShadowColor": [Function],
                                "focusBackgroundColor": [Function],
                                "focusBorderColor": [Function],
                                "focusColor": [Function],
                                "hoverBackgroundColor": [Function],
                                "hoverBorderColor": [Function],
                                "hoverColor": [Function],
                                "textColor": [Function],
                                "type": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "shared__TriggerReplacementVariableSuggestionsButton-lzs0hf-7",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverBackgroundColor="#fff"
                          hoverBorderColor="#888"
                          hoverColor="#000"
                          onClick={[Function]}
                          textColor="#555"
                          type="button"
                        >
                          <button
                            className="c19"
                            onClick={[Function]}
                            type="button"
                          >
                            <SvgIcon
                              color="currentColor"
                              icon="plus-circle"
                              size="16px"
                            >
                              <SvgIcon__StyledSvg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="16px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <StyledComponent
                                  aria-hidden={true}
                                  className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                  fill="currentColor"
                                  focusable="false"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                        "isStatic": false,
                                        "lastClassName": "c15",
                                        "rules": Array [
                                          "width:",
                                          [Function],
                                          ";height:",
                                          [Function],
                                          ";flex:none;",
                                        ],
                                      },
                                      "displayName": "SvgIcon__StyledSvg",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "SvgIcon__StyledSvg-sc-1l8fxgb-0",
                                      "target": "svg",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  role="img"
                                  size="16px"
                                  viewBox="0 0 1792 1792"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="yoast-svg-icon yoast-svg-icon-plus-circle c15"
                                    fill="currentColor"
                                    focusable="false"
                                    role="img"
                                    size="16px"
                                    viewBox="0 0 1792 1792"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M1344 960v-128q0-26-19-45t-45-19h-256v-256q0-26-19-45t-45-19h-128q-26 0-45 19t-19 45v256h-256q-26 0-45 19t-19 45v128q0 26 19 45t45 19h256v256q0 26 19 45t45 19h128q26 0 45-19t19-45v-256h256q26 0 45-19t19-45zm320-64q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"
                                    />
                                  </svg>
                                </StyledComponent>
                              </SvgIcon__StyledSvg>
                            </SvgIcon>
                            Insert snippet variable
                          </button>
                        </StyledComponent>
                      </shared__TriggerReplacementVariableSuggestionsButton>
                      <shared
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {},
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "shared-lzs0hf-1",
                                "isStatic": false,
                                "lastClassName": "c24",
                                "rules": Array [
                                  "flex:0 1 100%;border:1px solid ",
                                  [Function],
                                  ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                  [Function],
                                  ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                  "min-height:72px;padding:2px 6px;line-height:24px;.public-DraftEditorPlaceholder-root{color:",
                                  "#616161",
                                  ";}.public-DraftEditorPlaceholder-hasFocus{color:",
                                  "#616161",
                                  ";}",
                                  "&::before{display:block;position:absolute;top:-1px;",
                                  [Function],
                                  ":-25px;width:24px;height:24px;background-image:url( ",
                                  [Function],
                                  " );background-size:25px;content:\\"\\";}",
                                ],
                              },
                              "displayName": "shared",
                              "foldedComponentIds": Array [
                                "shared__InputContainer-lzs0hf-0",
                                "shared__DescriptionInputContainer-lzs0hf-3",
                              ],
                              "render": [Function],
                              "styledComponentId": "shared-lzs0hf-1",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isActive={false}
                          isHovered={false}
                          onClick={[Function]}
                        >
                          <div
                            className="c24"
                            onClick={[Function]}
                          >
                            <ReplacementVariableEditorStandalone
                              ariaLabelledBy="19"
                              content="Test description, %%replacement_variable%%"
                              fieldId="snippet-editor-field-description"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              placeholder="Modify your meta description by editing it right here"
                              recommendedReplacementVariables={Array []}
                              replacementVariables={Array []}
                            >
                              <div />
                            </ReplacementVariableEditorStandalone>
                          </div>
                        </StyledComponent>
                      </shared>
                    </ReplacementVariableEditor>
                    <ProgressBar
                      aria-hidden="true"
                      backgroundColor="#f7f7f7"
                      borderColor="#ddd"
                      max={156}
                      progressColor="#ee7c1b"
                      value={42}
                    >
                      <StyledComponent
                        aria-hidden="true"
                        backgroundColor="#f7f7f7"
                        borderColor="#ddd"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ProgressBar-sc-9g9yx6-0",
                              "isStatic": false,
                              "lastClassName": "c25",
                              "rules": Array [
                                "box-sizing:border-box;width:100%;height:8px;display:block;margin-top:8px;appearance:none;background-color:",
                                [Function],
                                ";border:1px solid ",
                                [Function],
                                ";::-webkit-progress-bar{background-color:",
                                [Function],
                                ";}::-webkit-progress-value{background-color:",
                                [Function],
                                ";transition:width 250ms;}::-moz-progress-bar{background-color:",
                                [Function],
                                ";}::-ms-fill{background-color:",
                                [Function],
                                ";border:0;}",
                              ],
                            },
                            "defaultProps": Object {
                              "aria-hidden": "true",
                              "backgroundColor": "#f7f7f7",
                              "borderColor": "#ddd",
                              "max": 1,
                              "progressColor": "#7ad03a",
                              "value": 0,
                            },
                            "displayName": "ProgressBar",
                            "foldedComponentIds": Array [],
                            "propTypes": Object {
                              "aria-hidden": [Function],
                              "backgroundColor": [Function],
                              "borderColor": [Function],
                              "max": [Function],
                              "progressColor": [Function],
                              "value": [Function],
                            },
                            "render": [Function],
                            "styledComponentId": "ProgressBar-sc-9g9yx6-0",
                            "target": "progress",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        max={156}
                        progressColor="#ee7c1b"
                        value={42}
                      >
                        <progress
                          aria-hidden="true"
                          className="c25"
                          max={156}
                          value={42}
                        />
                      </StyledComponent>
                    </ProgressBar>
                  </div>
                </StyledComponent>
              </shared__FormSection>
            </section>
          </StyledComponent>
        </shared__StyledEditor>
      </SnippetEditorFields>
      <SnippetEditor__CloseEditorButton
        activeBackgroundColor="#f7f7f7"
        activeBorderColor="#888"
        activeColor="#000"
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        focusBackgroundColor="#fff"
        focusBorderColor="#0066cd"
        focusColor="#000"
        hoverBackgroundColor="#fff"
        hoverBorderColor="#888"
        hoverColor="#000"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <StyledComponent
          activeBackgroundColor="#f7f7f7"
          activeBorderColor="#888"
          activeColor="#000"
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          focusBackgroundColor="#fff"
          focusBorderColor="#0066cd"
          focusColor="#000"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "SnippetEditor__CloseEditorButton-sc-144bmm3-2",
                "isStatic": false,
                "lastClassName": "c26",
                "rules": Array [
                  "color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";background:",
                  [Function],
                  ";box-shadow:0 1px 0 ",
                  [Function],
                  ";",
                  "&:active{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";box-shadow:inset 0 2px 5px -3px ",
                  "rgba( 0, 0, 0, 0.5 )",
                  ";}",
                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                  [Function],
                  ";color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";box-shadow:0 0 3px ",
                  "rgba( 8, 74, 103, 0.8 )",
                  ";}",
                  "&:hover{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";}",
                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                  "1px",
                  ";border-style:solid;margin:0;padding:",
                  "4px",
                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                  [Function],
                  ";overflow:visible;min-height:",
                  "32px",
                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                  "22px",
                  ";}}",
                  "height:33px;border:1px solid #dbdbdb;box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;",
                  "margin-top:24px;",
                ],
              },
              "defaultProps": Object {
                "activeBackgroundColor": "#f7f7f7",
                "activeBorderColor": "#888",
                "activeColor": "#000",
                "backgroundColor": "#f7f7f7",
                "borderColor": "#ccc",
                "boxShadowColor": "#ccc",
                "focusBackgroundColor": "#fff",
                "focusBorderColor": "#0066cd",
                "focusColor": "#000",
                "hoverBackgroundColor": "#fff",
                "hoverBorderColor": "#888",
                "hoverColor": "#000",
                "textColor": "#555",
                "type": "button",
              },
              "displayName": "SnippetEditor__CloseEditorButton",
              "foldedComponentIds": Array [
                "Button__BaseButton-sc-32rbq-4",
                "Button-sc-32rbq-3",
                "Button-sc-32rbq-1",
                "Button-sc-32rbq-2",
                "Button-sc-32rbq-0",
                "SnippetEditor__SnippetEditorButton-sc-144bmm3-0",
              ],
              "propTypes": Object {
                "activeBackgroundColor": [Function],
                "activeBorderColor": [Function],
                "activeColor": [Function],
                "backgroundColor": [Function],
                "borderColor": [Function],
                "boxShadowColor": [Function],
                "focusBackgroundColor": [Function],
                "focusBorderColor": [Function],
                "focusColor": [Function],
                "hoverBackgroundColor": [Function],
                "hoverBorderColor": [Function],
                "hoverColor": [Function],
                "textColor": [Function],
                "type": [Function],
              },
              "render": [Function],
              "styledComponentId": "SnippetEditor__CloseEditorButton-sc-144bmm3-2",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          hoverBackgroundColor="#fff"
          hoverBorderColor="#888"
          hoverColor="#000"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <button
            className="c26"
            onClick={[Function]}
            type="button"
          >
            Close snippet editor
          </button>
        </StyledComponent>
      </SnippetEditor__CloseEditorButton>
    </div>
  </ErrorBoundary>
</SnippetEditor>
`;

exports[`SnippetEditor renders in desktop mode 1`] = `
.c1 {
  overflow: auto;
  width: 640px;
  padding: 0 20px;
  max-width: 100%;
  box-sizing: border-box;
}

.c2 {
  width: 600px;
}

.c0 {
  background-color: white;
  font-family: arial,sans-serif;
  box-sizing: border-box;
}

.c3 {
  cursor: pointer;
  position: relative;
}

.c4 {
  color: #1e0fbe;
  -webkit-text-decoration: none;
  text-decoration: none;
  font-size: 18px;
  line-height: 1.2;
  font-weight: normal;
  margin: 0;
  display: inline-block;
  overflow: hidden;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c5 {
  white-space: nowrap;
}

.c6 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  white-space: nowrap;
  font-size: 14px;
}

.c7 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  white-space: nowrap;
  font-size: 14px;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 100%;
}

.c9 {
  color: #545454;
  cursor: pointer;
  position: relative;
  max-width: 600px;
  font-size: 13px;
}

.c8 {
  display: inline-block;
  margin-top: 6px;
  margin-left: 6px;
  border-top: 5px solid #006621;
  border-right: 4px solid transparent;
  border-left: 4px solid transparent;
  vertical-align: top;
}

.c11 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: transparent;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 3px 0 0 3px;
}

.c11:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c11::-moz-focus-inner {
  border-width: 0;
}

.c11:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c11:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c11 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c11:hover,
.c11:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
  box-shadow: none;
}

.c13 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: #555;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 0 3px 3px 0;
}

.c13:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c13::-moz-focus-inner {
  border-width: 0;
}

.c13:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c13:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c13 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c13:hover,
.c13:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
  box-shadow: none;
}

.c10 {
  display: inline-block;
  margin-top: 10px;
  border: 1px solid #dbdbdb;
  border-radius: 4px;
  background-color: #f7f7f7;
  vertical-align: top;
}

.c15 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin: 10px 0 0 4px;
  fill: #555;
  padding-left: 8px;
}

.c15:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c15::-moz-focus-inner {
  border-width: 0;
}

.c15:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c15:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c15 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c15 svg {
  margin-right: 7px;
}

.c12 {
  width: 22px;
  height: 22px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c14 {
  width: 18px;
  height: 18px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c16 {
  width: 16px;
  height: 16px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c11::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c13::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c15::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

<div>
  <section>
    <div
      className="c0 c1"
      width={640}
    >
      <div
        className="c2"
        width={600}
      >
        <div
          className=""
        >
          <span
            className="screen-reader-text"
            style={
              Object {
                "clip": "rect(1px, 1px, 1px, 1px)",
                "height": "1px",
                "overflow": "hidden",
                "position": "absolute",
                "width": "1px",
              }
            }
          >
            SEO title preview:
          </span>
          <div
            className="c3"
            onMouseEnter={[Function]}
            onMouseLeave={[Function]}
            onMouseUp={[Function]}
          >
            <div
              className="c4"
            >
              <span
                className="c5"
              >
                Test title
              </span>
            </div>
          </div>
          <span
            className="screen-reader-text"
            style={
              Object {
                "clip": "rect(1px, 1px, 1px, 1px)",
                "height": "1px",
                "overflow": "hidden",
                "position": "absolute",
                "width": "1px",
              }
            }
          >
            Url preview:
          </span>
          <div
            className="c6"
          >
            <div
              className="c7"
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
            >
              example.org/test-slug/
            </div>
          </div>
          <div
            className="c8"
          />
        </div>
        <div
          className=""
        >
          <span
            className="screen-reader-text"
            style={
              Object {
                "clip": "rect(1px, 1px, 1px, 1px)",
                "height": "1px",
                "overflow": "hidden",
                "position": "absolute",
                "width": "1px",
              }
            }
          >
            Meta description preview:
          </span>
          <div
            className="c9"
            onMouseEnter={[Function]}
            onMouseLeave={[Function]}
            onMouseUp={[Function]}
          >
            Test description, %%replacement_variable%%
          </div>
        </div>
      </div>
    </div>
  </section>
  <div
    className="c10"
  >
    <button
      aria-pressed={false}
      className="c11"
      onClick={[Function]}
      type="button"
    >
      <svg
        aria-hidden={true}
        className="yoast-svg-icon yoast-svg-icon-mobile c12"
        fill="currentColor"
        focusable="false"
        role="img"
        size="22px"
        viewBox="0 0 1792 1792"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
        />
      </svg>
      <span
        className="screen-reader-text"
        style={
          Object {
            "clip": "rect(1px, 1px, 1px, 1px)",
            "height": "1px",
            "overflow": "hidden",
            "position": "absolute",
            "width": "1px",
          }
        }
      >
        Mobile preview
      </span>
    </button>
    <button
      aria-pressed={true}
      className="c13"
      onClick={[Function]}
      type="button"
    >
      <svg
        aria-hidden={true}
        className="yoast-svg-icon yoast-svg-icon-desktop c14"
        fill="currentColor"
        focusable="false"
        role="img"
        size="18px"
        viewBox="0 0 1792 1792"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
        />
      </svg>
      <span
        className="screen-reader-text"
        style={
          Object {
            "clip": "rect(1px, 1px, 1px, 1px)",
            "height": "1px",
            "overflow": "hidden",
            "position": "absolute",
            "width": "1px",
          }
        }
      >
        Desktop preview
      </span>
    </button>
  </div>
  <button
    aria-expanded={false}
    className="c15"
    onClick={[Function]}
    type="button"
  >
    <svg
      aria-hidden={true}
      className="yoast-svg-icon yoast-svg-icon-edit c16"
      fill="currentColor"
      focusable="false"
      role="img"
      size="16px"
      viewBox="0 0 1792 1792"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
      />
    </svg>
    Edit snippet
  </button>
</div>
`;

exports[`SnippetEditor renders the snippet editor without a close button when showCloseButton is false 1`] = `
.c20 {
  box-sizing: border-box;
  width: 100%;
  height: 8px;
  display: block;
  margin-top: 8px;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background-color: #f7f7f7;
  border: 1px solid #ddd;
}

.c20::-webkit-progress-bar {
  background-color: #f7f7f7;
}

.c20::-webkit-progress-value {
  background-color: #dc3232;
  -webkit-transition: width 250ms;
  transition: width 250ms;
}

.c20::-moz-progress-bar {
  background-color: #dc3232;
}

.c20::-ms-fill {
  background-color: #dc3232;
  border: 0;
}

.c24 {
  box-sizing: border-box;
  width: 100%;
  height: 8px;
  display: block;
  margin-top: 8px;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background-color: #f7f7f7;
  border: 1px solid #ddd;
}

.c24::-webkit-progress-bar {
  background-color: #f7f7f7;
}

.c24::-webkit-progress-value {
  background-color: #ee7c1b;
  -webkit-transition: width 250ms;
  transition: width 250ms;
}

.c24::-moz-progress-bar {
  background-color: #ee7c1b;
}

.c24::-ms-fill {
  background-color: #ee7c1b;
  border: 0;
}

.c15 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  margin: 24px 0 0 0;
}

.c14 {
  padding: 0 20px;
}

.c16 {
  -webkit-flex: 1 1 200px;
  -ms-flex: 1 1 200px;
  flex: 1 1 200px;
  min-width: 200px;
  cursor: pointer;
  font-size: 16px;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin: 4px 0;
}

.c17 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  padding-left: 8px;
  height: 33px;
  border: 1px solid #dbdbdb;
  font-size: 13px;
}

.c17:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c17::-moz-focus-inner {
  border-width: 0;
}

.c17:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c17:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c17 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c17 svg {
  margin-right: 7px;
  fill: #555;
}

.c0 {
  border-bottom: 1px hidden #fff;
  border-radius: 2px;
  box-shadow: 0 1px 2px rgba(0,0,0,.2);
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  max-width: 600px;
  box-sizing: border-box;
  font-size: 14px;
}

.c2 {
  cursor: pointer;
  position: relative;
}

.c3 {
  color: #1e0fbe;
  -webkit-text-decoration: none;
  text-decoration: none;
  font-size: 18px;
  line-height: 1.2;
  font-weight: normal;
  margin: 0;
  display: inline-block;
  overflow: hidden;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c4 {
  display: inline-block;
  font-size: 16px;
  line-height: 1.2em;
  max-height: 2.4em;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c5 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  white-space: nowrap;
  font-size: 14px;
}

.c6 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  white-space: nowrap;
  font-size: 14px;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 100%;
}

.c8 {
  color: #545454;
  cursor: pointer;
  position: relative;
  max-width: 600px;
  font-size: 13px;
  font-size: 14px;
  line-height: 20px;
}

.c1 {
  padding: 8px 16px;
}

.c7 {
  border: 0;
  border-bottom: 1px solid #DFE1E5;
  margin: 0;
}

.c22 {
  border: none;
  width: 100%;
  height: inherit;
  line-height: inherit;
  font-family: inherit;
  font-size: inherit;
  color: inherit;
}

.c22:focus {
  outline: 0;
}

.c19 {
  -webkit-flex: 0 1 100%;
  -ms-flex: 0 1 100%;
  flex: 0 1 100%;
  border: 1px solid #ddd;
  padding: 3px 5px;
  box-sizing: border-box;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  cursor: text;
}

.c19 .public-DraftStyleDefault-block {
  line-height: 24px;
}

.c19::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width%3D%221792%22%20height%3D%221792%22%20viewBox%3D%220%200%201792%201792%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20fill%3D%22transparent%22%20d%3D%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20%2F%3E%3C%2Fsvg%3E );
  background-size: 25px;
  content: "";
}

.c21 {
  -webkit-flex: 0 1 100%;
  -ms-flex: 0 1 100%;
  flex: 0 1 100%;
  border: 1px solid #ddd;
  padding: 3px 5px;
  box-sizing: border-box;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  cursor: text;
}

.c21::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width%3D%221792%22%20height%3D%221792%22%20viewBox%3D%220%200%201792%201792%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20fill%3D%22transparent%22%20d%3D%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20%2F%3E%3C%2Fsvg%3E );
  background-size: 25px;
  content: "";
}

.c23 {
  -webkit-flex: 0 1 100%;
  -ms-flex: 0 1 100%;
  flex: 0 1 100%;
  border: 1px solid #ddd;
  padding: 3px 5px;
  box-sizing: border-box;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  cursor: text;
  min-height: 72px;
  padding: 2px 6px;
  line-height: 24px;
}

.c23 .public-DraftEditorPlaceholder-root {
  color: #616161;
}

.c23 .public-DraftEditorPlaceholder-hasFocus {
  color: #616161;
}

.c23::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width%3D%221792%22%20height%3D%221792%22%20viewBox%3D%220%200%201792%201792%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20fill%3D%22transparent%22%20d%3D%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20%2F%3E%3C%2Fsvg%3E );
  background-size: 25px;
  content: "";
}

.c10 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: #555;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 3px 0 0 3px;
}

.c10:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c10::-moz-focus-inner {
  border-width: 0;
}

.c10:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c10:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c10 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c10:hover,
.c10:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
  box-shadow: none;
}

.c12 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: transparent;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 0 3px 3px 0;
}

.c12:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c12::-moz-focus-inner {
  border-width: 0;
}

.c12:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c12:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c12 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c12:hover,
.c12:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
  box-shadow: none;
}

.c9 {
  display: inline-block;
  margin-top: 10px;
  border: 1px solid #dbdbdb;
  border-radius: 4px;
  background-color: #f7f7f7;
  vertical-align: top;
}

.c11 {
  width: 22px;
  height: 22px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c13 {
  width: 18px;
  height: 18px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c18 {
  width: 16px;
  height: 16px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c17::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c10::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c12::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

<div>
  <section>
    <div
      className="c0"
      onMouseLeave={undefined}
      width={640}
    >
      <div
        className="c1"
      >
        <span
          className="screen-reader-text"
          style={
            Object {
              "clip": "rect(1px, 1px, 1px, 1px)",
              "height": "1px",
              "overflow": "hidden",
              "position": "absolute",
              "width": "1px",
            }
          }
        >
          SEO title preview:
        </span>
        <div
          className="c2"
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
        >
          <div
            className="c3"
          >
            <span
              className="c4"
            >
              Test title
            </span>
          </div>
        </div>
        <span
          className="screen-reader-text"
          style={
            Object {
              "clip": "rect(1px, 1px, 1px, 1px)",
              "height": "1px",
              "overflow": "hidden",
              "position": "absolute",
              "width": "1px",
            }
          }
        >
          Url preview:
        </span>
        <div
          className="c5"
        >
          <div
            className="c6"
            onMouseEnter={[Function]}
            onMouseLeave={[Function]}
            onMouseUp={[Function]}
          >
            example.org â€º test-slug
          </div>
        </div>
      </div>
      <hr
        className="c7"
      />
      <div
        className="c1"
      >
        <span
          className="screen-reader-text"
          style={
            Object {
              "clip": "rect(1px, 1px, 1px, 1px)",
              "height": "1px",
              "overflow": "hidden",
              "position": "absolute",
              "width": "1px",
            }
          }
        >
          Meta description preview:
        </span>
        <div
          className="c8"
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
        >
          <div
            className="c8"
          >
            Test description, %%replacement_variable%%
          </div>
        </div>
      </div>
    </div>
  </section>
  <div
    className="c9"
  >
    <button
      aria-pressed={true}
      className="c10"
      onClick={[Function]}
      type="button"
    >
      <svg
        aria-hidden={true}
        className="yoast-svg-icon yoast-svg-icon-mobile c11"
        fill="currentColor"
        focusable="false"
        role="img"
        size="22px"
        viewBox="0 0 1792 1792"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
        />
      </svg>
      <span
        className="screen-reader-text"
        style={
          Object {
            "clip": "rect(1px, 1px, 1px, 1px)",
            "height": "1px",
            "overflow": "hidden",
            "position": "absolute",
            "width": "1px",
          }
        }
      >
        Mobile preview
      </span>
    </button>
    <button
      aria-pressed={false}
      className="c12"
      onClick={[Function]}
      type="button"
    >
      <svg
        aria-hidden={true}
        className="yoast-svg-icon yoast-svg-icon-desktop c13"
        fill="currentColor"
        focusable="false"
        role="img"
        size="18px"
        viewBox="0 0 1792 1792"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
        />
      </svg>
      <span
        className="screen-reader-text"
        style={
          Object {
            "clip": "rect(1px, 1px, 1px, 1px)",
            "height": "1px",
            "overflow": "hidden",
            "position": "absolute",
            "width": "1px",
          }
        }
      >
        Desktop preview
      </span>
    </button>
  </div>
  <section
    className="c14"
  >
    <div
      className="c15"
    >
      <div
        className="c16"
        id="3"
        onClick={[Function]}
      >
        SEO title
      </div>
      <button
        className="c17"
        onClick={[Function]}
        type="button"
      >
        <svg
          aria-hidden={true}
          className="yoast-svg-icon yoast-svg-icon-plus-circle c18"
          fill="currentColor"
          focusable="false"
          role="img"
          size="16px"
          viewBox="0 0 1792 1792"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M1344 960v-128q0-26-19-45t-45-19h-256v-256q0-26-19-45t-45-19h-128q-26 0-45 19t-19 45v256h-256q-26 0-45 19t-19 45v128q0 26 19 45t45 19h256v256q0 26 19 45t45 19h128q26 0 45-19t19-45v-256h256q26 0 45-19t19-45zm320-64q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"
          />
        </svg>
        Insert snippet variable
      </button>
      <div
        className="c19"
        onClick={[Function]}
      >
        <div />
      </div>
      <progress
        aria-hidden="true"
        className="c20"
        max={600}
        value={0}
      />
    </div>
    <div
      className="c15"
    >
      <div
        className="c16"
        id="snippet-editor-field-2-slug"
        onClick={[Function]}
      >
        Slug
      </div>
      <div
        className="c21"
        onClick={[Function]}
      >
        <input
          aria-labelledby="snippet-editor-field-2-slug"
          className="c22"
          id="snippet-editor-field-slug"
          onBlur={[Function]}
          onChange={[Function]}
          onFocus={[Function]}
          value="test-slug"
        />
      </div>
    </div>
    <div
      className="c15"
    >
      <div
        className="c16"
        id="4"
        onClick={[Function]}
      >
        Meta description
      </div>
      <button
        className="c17"
        onClick={[Function]}
        type="button"
      >
        <svg
          aria-hidden={true}
          className="yoast-svg-icon yoast-svg-icon-plus-circle c18"
          fill="currentColor"
          focusable="false"
          role="img"
          size="16px"
          viewBox="0 0 1792 1792"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M1344 960v-128q0-26-19-45t-45-19h-256v-256q0-26-19-45t-45-19h-128q-26 0-45 19t-19 45v256h-256q-26 0-45 19t-19 45v128q0 26 19 45t45 19h256v256q0 26 19 45t45 19h128q26 0 45-19t19-45v-256h256q26 0 45-19t19-45zm320-64q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"
          />
        </svg>
        Insert snippet variable
      </button>
      <div
        className="c23"
        onClick={[Function]}
      >
        <div />
      </div>
      <progress
        aria-hidden="true"
        className="c24"
        max={156}
        value={42}
      />
    </div>
  </section>
</div>
`;

exports[`SnippetEditor shows the editor 1`] = `
.c0 {
  border-bottom: 1px hidden #fff;
  border-radius: 2px;
  box-shadow: 0 1px 2px rgba(0,0,0,.2);
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  max-width: 600px;
  box-sizing: border-box;
  font-size: 14px;
}

.c2 {
  cursor: pointer;
  position: relative;
}

.c3 {
  color: #1e0fbe;
  -webkit-text-decoration: none;
  text-decoration: none;
  font-size: 18px;
  line-height: 1.2;
  font-weight: normal;
  margin: 0;
  display: inline-block;
  overflow: hidden;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c4 {
  display: inline-block;
  font-size: 16px;
  line-height: 1.2em;
  max-height: 2.4em;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c5 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  white-space: nowrap;
  font-size: 14px;
}

.c6 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  white-space: nowrap;
  font-size: 14px;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 100%;
}

.c8 {
  color: #545454;
  cursor: pointer;
  position: relative;
  max-width: 600px;
  font-size: 13px;
  font-size: 14px;
  line-height: 20px;
}

.c1 {
  padding: 8px 16px;
}

.c7 {
  border: 0;
  border-bottom: 1px solid #DFE1E5;
  margin: 0;
}

.c10 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: #555;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 3px 0 0 3px;
}

.c10:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c10::-moz-focus-inner {
  border-width: 0;
}

.c10:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c10:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c10 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c10:hover,
.c10:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
  box-shadow: none;
}

.c12 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: transparent;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 0 3px 3px 0;
}

.c12:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c12::-moz-focus-inner {
  border-width: 0;
}

.c12:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c12:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c12 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c12:hover,
.c12:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
  box-shadow: none;
}

.c9 {
  display: inline-block;
  margin-top: 10px;
  border: 1px solid #dbdbdb;
  border-radius: 4px;
  background-color: #f7f7f7;
  vertical-align: top;
}

.c14 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin: 10px 0 0 4px;
  fill: #555;
  padding-left: 8px;
}

.c14:active {
  color: #000;
  background-color: #f7f7f7;
  border-color: #888;
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c14::-moz-focus-inner {
  border-width: 0;
}

.c14:focus {
  outline: none;
  border-color: #0066cd;
  color: #000;
  background-color: #fff;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c14:hover {
  color: #000;
  background-color: #fff;
  border-color: #888;
}

.c14 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c14 svg {
  margin-right: 7px;
}

.c11 {
  width: 22px;
  height: 22px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c13 {
  width: 18px;
  height: 18px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c15 {
  width: 16px;
  height: 16px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c10::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c12::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

@media all and (-ms-high-contrast:none),(-ms-high-contrast:active) {
  .c14::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

<div>
  <section>
    <div
      className="c0"
      onMouseLeave={undefined}
      width={640}
    >
      <div
        className="c1"
      >
        <span
          className="screen-reader-text"
          style={
            Object {
              "clip": "rect(1px, 1px, 1px, 1px)",
              "height": "1px",
              "overflow": "hidden",
              "position": "absolute",
              "width": "1px",
            }
          }
        >
          SEO title preview:
        </span>
        <div
          className="c2"
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
        >
          <div
            className="c3"
          >
            <span
              className="c4"
            >
              Test title
            </span>
          </div>
        </div>
        <span
          className="screen-reader-text"
          style={
            Object {
              "clip": "rect(1px, 1px, 1px, 1px)",
              "height": "1px",
              "overflow": "hidden",
              "position": "absolute",
              "width": "1px",
            }
          }
        >
          Url preview:
        </span>
        <div
          className="c5"
        >
          <div
            className="c6"
            onMouseEnter={[Function]}
            onMouseLeave={[Function]}
            onMouseUp={[Function]}
          >
            example.org â€º test-slug
          </div>
        </div>
      </div>
      <hr
        className="c7"
      />
      <div
        className="c1"
      >
        <span
          className="screen-reader-text"
          style={
            Object {
              "clip": "rect(1px, 1px, 1px, 1px)",
              "height": "1px",
              "overflow": "hidden",
              "position": "absolute",
              "width": "1px",
            }
          }
        >
          Meta description preview:
        </span>
        <div
          className="c8"
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
        >
          <div
            className="c8"
          >
            Test description, %%replacement_variable%%
          </div>
        </div>
      </div>
    </div>
  </section>
  <div
    className="c9"
  >
    <button
      aria-pressed={true}
      className="c10"
      onClick={[Function]}
      type="button"
    >
      <svg
        aria-hidden={true}
        className="yoast-svg-icon yoast-svg-icon-mobile c11"
        fill="currentColor"
        focusable="false"
        role="img"
        size="22px"
        viewBox="0 0 1792 1792"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
        />
      </svg>
      <span
        className="screen-reader-text"
        style={
          Object {
            "clip": "rect(1px, 1px, 1px, 1px)",
            "height": "1px",
            "overflow": "hidden",
            "position": "absolute",
            "width": "1px",
          }
        }
      >
        Mobile preview
      </span>
    </button>
    <button
      aria-pressed={false}
      className="c12"
      onClick={[Function]}
      type="button"
    >
      <svg
        aria-hidden={true}
        className="yoast-svg-icon yoast-svg-icon-desktop c13"
        fill="currentColor"
        focusable="false"
        role="img"
        size="18px"
        viewBox="0 0 1792 1792"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
        />
      </svg>
      <span
        className="screen-reader-text"
        style={
          Object {
            "clip": "rect(1px, 1px, 1px, 1px)",
            "height": "1px",
            "overflow": "hidden",
            "position": "absolute",
            "width": "1px",
          }
        }
      >
        Desktop preview
      </span>
    </button>
  </div>
  <button
    aria-expanded={false}
    className="c14"
    onClick={[Function]}
    type="button"
  >
    <svg
      aria-hidden={true}
      className="yoast-svg-icon yoast-svg-icon-edit c15"
      fill="currentColor"
      focusable="false"
      role="img"
      size="16px"
      viewBox="0 0 1792 1792"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
      />
    </svg>
    Edit snippet
  </button>
</div>
`;
