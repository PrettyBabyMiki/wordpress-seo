<?xml version="1.0"?>
<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	name="Yoast SEO Free"
	xsi:noNamespaceSchemaLocation="./vendor/squizlabs/php_codesniffer/phpcs.xsd">

	<description>Yoast SEO Free rules for PHP_CodeSniffer</description>

	<!--
	#############################################################################
	COMMAND LINE ARGUMENTS
	https://github.com/squizlabs/PHP_CodeSniffer/wiki/Annotated-ruleset.xml
	#############################################################################
	-->

	<file>.</file>

	<!-- Exclude dependency related files and generated files from being scanned. -->
	<exclude-pattern type="relative">^artifact/*\.php$</exclude-pattern>
	<exclude-pattern type="relative">^config/php-scoper/*\.php$</exclude-pattern>
	<exclude-pattern type="relative">^src/generated/*\.php$</exclude-pattern>

	<!-- Only check PHP files. -->
	<arg name="extensions" value="php"/>

	<!-- Show progress, show the error codes for each message (source). -->
	<arg value="sp"/>

	<!-- Strip the filepaths down to the relevant bit. -->
	<arg name="basepath" value="."/>

	<!-- Check up to 12 files simultaneously. -->
	<arg name="parallel" value="12"/>

	<!-- Cache the results between runs. -->
	<arg name="cache" value="./.cache/phpcs-free.cache"/>


	<!--
	#############################################################################
	USE THE YoastCS RULESET
	#############################################################################
	-->

	<rule ref="Yoast">
		<properties>
			<!-- Provide the plugin specific prefixes for all naming related sniffs. -->
			<property name="prefixes" type="array">
				<element value="Yoast\WP\SEO"/>
				<element value="yoast_seo"/>
			</property>
		</properties>
	</rule>


	<!--
	#############################################################################
	SNIFF SPECIFIC CONFIGURATION
	#############################################################################
	-->

	<rule ref="WordPress.WP.I18n">
		<properties>
			<property name="text_domain" type="array">
				<element value="wordpress-seo"/>
				<element value="default"/>
			</property>
		</properties>
	</rule>

	<rule ref="Yoast.NamingConventions.NamespaceName">
		<properties>
			<!-- Allow for the tests being in a non-standard directory in YoastSEO Free. -->
			<property name="prefixes" type="array" extend="true">
				<element value="Yoast\WP\SEO\Tests\Unit"/>
			</property>
		</properties>
	</rule>

	<rule ref="WordPress.WP.AlternativeFunctions">
		<properties>
			<!-- We discovered that WP_Filesystem can lead to unexpected behaviour.
				 See https://github.com/Yoast/wordpress-seo/pull/15713 -->
			<property name="exclude" type="array" extend="true">
				<element value="file_system_read"/>
			</property>
		</properties>
	</rule>


	<!--
	##########################################################################
	SELECTIVE EXCLUSIONS
	Exclude specific files for specific sniffs.
	#############################################################################
	-->

	<rule ref="Yoast.Files.FileName.InvalidFunctionsFileName">
		<exclude-pattern>wp-seo-main\.php</exclude-pattern>
	</rule>

	<!-- Exclude migrations folder from filename checks, as we do not have control over this format -->
	<rule ref="WordPress.Files.FileName.UnderscoresNotAllowed">
		<exclude-pattern>migrations/*</exclude-pattern>
	</rule>
	<!-- /Exclude migrations folder -->

	<!-- Exclude old code from filename conventions, new code needs to be added to `src/`. -->
	<rule ref="Yoast.Files.FileName">
		<exclude-pattern>admin/*</exclude-pattern>
		<exclude-pattern>tests/integration/*</exclude-pattern>
		<exclude-pattern>inc/*</exclude-pattern>
	</rule>

	<!-- Composer scripts are not WordPress and have console output. -->
	<rule ref="WordPress.Security.EscapeOutput.OutputNotEscaped">
		<exclude-pattern>config/composer/*</exclude-pattern>
	</rule>

	<!-- Exclude php-codeshift from being checked too roughly. -->
	<rule ref="Yoast.NamingConventions.ObjectNameDepth">
		<exclude-pattern>config/php-codeshift/*</exclude-pattern>
	</rule>

</ruleset>
