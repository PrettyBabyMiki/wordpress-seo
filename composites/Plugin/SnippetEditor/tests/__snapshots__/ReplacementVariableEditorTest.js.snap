// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ReplacementVariableEditor wraps a Draft.js editor instance 1`] = `
<React.Fragment>
  <PluginEditor
    ariaLabelledBy="id"
    customStyleMap={Object {}}
    decorators={Array []}
    defaultBlockRenderMap={true}
    defaultKeyBindings={true}
    editorState={
      EditorState {
        "_immutable": Immutable.Record {
          "allowUndo": true,
          "currentContent": Immutable.Record {
            "entityMap": Object {
              "__add": [Function],
              "__create": [Function],
              "__get": [Function],
              "__getLastCreatedEntityKey": [Function],
              "__mergeData": [Function],
              "__replaceData": [Function],
              "add": [Function],
              "create": [Function],
              "get": [Function],
              "getLastCreatedEntityKey": [Function],
              "mergeData": [Function],
              "replaceData": [Function],
            },
            "blockMap": Immutable.OrderedMap {
              "1": Immutable.Record {
                "key": "1",
                "type": "unstyled",
                "text": "Dummy content",
                "characterList": Immutable.List [
                  Immutable.Record {
                    "style": Immutable.OrderedSet [],
                    "entity": null,
                  },
                  Immutable.Record {
                    "style": Immutable.OrderedSet [],
                    "entity": null,
                  },
                  Immutable.Record {
                    "style": Immutable.OrderedSet [],
                    "entity": null,
                  },
                  Immutable.Record {
                    "style": Immutable.OrderedSet [],
                    "entity": null,
                  },
                  Immutable.Record {
                    "style": Immutable.OrderedSet [],
                    "entity": null,
                  },
                  Immutable.Record {
                    "style": Immutable.OrderedSet [],
                    "entity": null,
                  },
                  Immutable.Record {
                    "style": Immutable.OrderedSet [],
                    "entity": null,
                  },
                  Immutable.Record {
                    "style": Immutable.OrderedSet [],
                    "entity": null,
                  },
                  Immutable.Record {
                    "style": Immutable.OrderedSet [],
                    "entity": null,
                  },
                  Immutable.Record {
                    "style": Immutable.OrderedSet [],
                    "entity": null,
                  },
                  Immutable.Record {
                    "style": Immutable.OrderedSet [],
                    "entity": null,
                  },
                  Immutable.Record {
                    "style": Immutable.OrderedSet [],
                    "entity": null,
                  },
                  Immutable.Record {
                    "style": Immutable.OrderedSet [],
                    "entity": null,
                  },
                ],
                "depth": 0,
                "data": Immutable.Map {},
              },
            },
            "selectionBefore": Immutable.Record {
              "anchorKey": "1",
              "anchorOffset": 0,
              "focusKey": "1",
              "focusOffset": 0,
              "isBackward": false,
              "hasFocus": false,
            },
            "selectionAfter": Immutable.Record {
              "anchorKey": "1",
              "anchorOffset": 0,
              "focusKey": "1",
              "focusOffset": 0,
              "isBackward": false,
              "hasFocus": false,
            },
          },
          "decorator": null,
          "directionMap": Immutable.OrderedMap {
            "1": "LTR",
          },
          "forceSelection": false,
          "inCompositionMode": false,
          "inlineStyleOverride": null,
          "lastChangeType": null,
          "nativelyRenderedContent": null,
          "redoStack": Immutable.Stack [],
          "selection": Immutable.Record {
            "anchorKey": "1",
            "anchorOffset": 0,
            "focusKey": "1",
            "focusOffset": 0,
            "isBackward": false,
            "hasFocus": false,
          },
          "treeMap": Immutable.OrderedMap {
            "1": Immutable.List [
              Immutable.Record {
                "start": 0,
                "end": 13,
                "decoratorKey": null,
                "leaves": Immutable.List [
                  Immutable.Record {
                    "start": 0,
                    "end": 13,
                  },
                ],
              },
            ],
          },
          "undoStack": Immutable.Stack [],
        },
      }
    }
    onBlur={[Function]}
    onChange={[Function]}
    onFocus={[Function]}
    placeholder=""
    plugins={
      Array [
        Object {
          "MentionSuggestions": [Function],
          "decorators": Array [
            Object {
              "component": [Function],
              "strategy": [Function],
            },
            Object {
              "component": [Function],
              "strategy": [Function],
            },
          ],
          "getAccessibilityProps": [Function],
          "handleReturn": [Function],
          "initialize": [Function],
          "onChange": [Function],
          "onDownArrow": [Function],
          "onEscape": [Function],
          "onTab": [Function],
          "onUpArrow": [Function],
        },
        Object {
          "blockRenderMap": Immutable.Map {
            "unstyled": Object {
              "element": "div",
            },
          },
          "handleReturn": [Function],
          "onChange": [Function],
        },
      ]
    }
    stripPastedStyles={true}
  />
  <ReplacementVariableEditorStandalone__ZIndexOverride>
    <Decorated(MentionSuggestions)
      onSearchChange={[Function]}
    />
  </ReplacementVariableEditorStandalone__ZIndexOverride>
</React.Fragment>
`;
