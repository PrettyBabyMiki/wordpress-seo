// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SnippetEditor accepts a custom data mapping function 1`] = `
.c0 {
  border-bottom: 1px hidden #fff;
  border-radius: 2px;
  box-shadow: 0 1px 2px rgba(0,0,0,.2);
  margin: 0 20px 10px;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  max-width: 600px;
  box-sizing: border-box;
  font-size: 14px;
}

.c2 {
  cursor: pointer;
  position: relative;
}

.c4 {
  color: #1e0fbe;
  text-decoration: none;
  font-size: 18px;
  line-height: 1.2;
  font-weight: normal;
  margin: 0;
  display: inline-block;
  overflow: hidden;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c3 {
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c5 {
  display: inline-block;
  line-height: 1.2em;
  max-height: 2.4em;
  overflow: hidden;
  text-overflow: ellipsis;
  font-size: 16px;
}

.c6 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
}

.c9 {
  color: #545454;
  cursor: pointer;
  position: relative;
  max-width: 600px;
  font-size: 13px;
}

.c8 {
  max-height: 4em;
  overflow: hidden;
  font-size: 14px;
  line-height: 20px;
}

.c1 {
  padding: 8px 16px;
}

.c7 {
  border: 0;
  border-bottom: 1px solid #DFE1E5;
  margin: 0;
}

.c17 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
}

.c12 {
  font-size: 0.8rem;
}

.c13:active {
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c14:hover {
  color: #000;
}

.c15::-moz-focus-inner {
  border-width: 0;
}

.c15:focus {
  outline: none;
  border-color: #0066cd;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c16 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
}

.c16 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c21 {
  font-size: 0.8rem;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin: 10px 0 0 4px;
  fill: #555;
  padding-left: 8px;
}

.c21 svg {
  margin-right: 7px;
}

.c11 {
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: #555;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 3px 0 0 3px;
}

.c11:hover,
.c11:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
}

.c19 {
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: transparent;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 0 3px 3px 0;
}

.c19:hover,
.c19:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
}

.c10 {
  display: inline-block;
  margin-top: 10px;
  margin-left: 20px;
  border: 1px solid #dbdbdb;
  border-radius: 4px;
  background-color: #f7f7f7;
  vertical-align: top;
}

.c18 {
  width: 22px;
  height: 22px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c20 {
  width: 18px;
  height: 18px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c22 {
  width: 16px;
  height: 16px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

@media all and ( -ms-high-contrast:none ),( -ms-high-contrast:active ) {
  .c16::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

<div>
  <section>
    <div
      className="c0"
      onMouseLeave={undefined}
      width={640}
    >
      <div
        className="c1"
      >
        <span
          className="screen-reader-text"
          style={
            Object {
              "clip": "rect(1px, 1px, 1px, 1px)",
              "height": "1px",
              "overflow": "hidden",
              "position": "absolute",
              "width": "1px",
            }
          }
        >
          SEO title preview:
        </span>
        <div
          className="c2"
          onClick={[Function]}
          onMouseLeave={[Function]}
          onMouseOver={[Function]}
        >
          <div
            className="c3 c4"
          >
            <span
              className="c5"
            >
              Totally different title
            </span>
          </div>
        </div>
        <span
          className="screen-reader-text"
          style={
            Object {
              "clip": "rect(1px, 1px, 1px, 1px)",
              "height": "1px",
              "overflow": "hidden",
              "position": "absolute",
              "width": "1px",
            }
          }
        >
          Url preview:
        </span>
        <div
          className="c6"
          onClick={[Function]}
          onMouseLeave={[Function]}
          onMouseOver={[Function]}
        >
          example.org â€º totally-different-url
        </div>
      </div>
      <hr
        className="c7"
      />
      <div
        className="c1"
      >
        <span
          className="screen-reader-text"
          style={
            Object {
              "clip": "rect(1px, 1px, 1px, 1px)",
              "height": "1px",
              "overflow": "hidden",
              "position": "absolute",
              "width": "1px",
            }
          }
        >
          Meta description preview:
        </span>
        <div
          className="c8 c9"
          color="#545454"
          onClick={[Function]}
          onMouseLeave={[Function]}
          onMouseOver={[Function]}
        >
          Totally different description
        </div>
      </div>
    </div>
  </section>
  <div
    className="c10"
  >
    <button
      aria-pressed={true}
      className="c11 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 c17"
      onClick={[Function]}
      type="button"
    >
      <svg
        aria-hidden={true}
        className="yoast-svg-icon yoast-svg-icon-mobile c18"
        fill="currentColor"
        focusable="false"
        role="img"
        size="22px"
        viewBox="0 0 1792 1792"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
        />
      </svg>
      <span
        className="screen-reader-text"
        style={
          Object {
            "clip": "rect(1px, 1px, 1px, 1px)",
            "height": "1px",
            "overflow": "hidden",
            "position": "absolute",
            "width": "1px",
          }
        }
      >
        Mobile preview
      </span>
    </button>
    <button
      aria-pressed={false}
      className="c19 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 c17"
      onClick={[Function]}
      type="button"
    >
      <svg
        aria-hidden={true}
        className="yoast-svg-icon yoast-svg-icon-desktop c20"
        fill="currentColor"
        focusable="false"
        role="img"
        size="18px"
        viewBox="0 0 1792 1792"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
        />
      </svg>
      <span
        className="screen-reader-text"
        style={
          Object {
            "clip": "rect(1px, 1px, 1px, 1px)",
            "height": "1px",
            "overflow": "hidden",
            "position": "absolute",
            "width": "1px",
          }
        }
      >
        Desktop preview
      </span>
    </button>
  </div>
  <button
    aria-expanded={false}
    className="c21 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 c17"
    onClick={[Function]}
    type="button"
  >
    <svg
      aria-hidden={true}
      className="yoast-svg-icon yoast-svg-icon-edit c22"
      fill={undefined}
      focusable="false"
      role="img"
      size="16px"
      viewBox="0 0 1792 1792"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
      />
    </svg>
    <span>
      Edit snippet
    </span>
  </button>
</div>
`;

exports[`SnippetEditor activates a field on onClick() and opens the editor 1`] = `
<div>
  <SnippetPreview
    activeField={null}
    breadcrumbs={null}
    date=""
    description="Test description, %%replacement_variable%%"
    hoveredField={null}
    isAmp={false}
    isDescriptionGenerated={false}
    keyword=""
    locale="en_US"
    mode="mobile"
    onClick={[Function]}
    onHover={[Function]}
    onMouseLeave={[Function]}
    onMouseOver={[Function]}
    title="Test title"
    url="example.org/test-slug"
  />
  <ModeSwitcher
    active="mobile"
    onChange={[Function]}
  />
  <Button
    aria-expanded={true}
    innerRef={[Function]}
    onClick={[Function]}
  >
    <SvgIcon
      icon="edit"
      size="16px"
    />
    <FormattedMessage
      defaultMessage="Edit snippet"
      id="snippetEditor.editSnippet"
      values={Object {}}
    />
  </Button>
  <React.Fragment>
    <InjectIntl(SnippetEditorFields)
      activeField={null}
      data={
        Object {
          "description": "Test description, %%replacement_variable%%",
          "slug": "test-slug",
          "title": "Test title",
        }
      }
      descriptionLengthAssessment={
        Object {
          "actual": 0,
          "max": 320,
          "score": 0,
        }
      }
      hoveredField={null}
      onChange={[Function]}
      onFocus={[Function]}
      replacementVariables={Array []}
      titleLengthAssessment={
        Object {
          "actual": 0,
          "max": 600,
          "score": 0,
        }
      }
    />
    <Button
      onClick={[Function]}
    >
      <FormattedMessage
        defaultMessage="Close snippet editor"
        id="snippet-editor.close-editor"
        values={Object {}}
      />
    </Button>
  </React.Fragment>
</div>
`;

exports[`SnippetEditor calls callbacks when the editors are focused or changed 1`] = `
.c0 {
  border-bottom: 1px hidden #fff;
  border-radius: 2px;
  box-shadow: 0 1px 2px rgba(0,0,0,.2);
  margin: 0 20px 10px;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  max-width: 600px;
  box-sizing: border-box;
  font-size: 14px;
}

.c2 {
  cursor: pointer;
  position: relative;
}

.c4 {
  color: #1e0fbe;
  text-decoration: none;
  font-size: 18px;
  line-height: 1.2;
  font-weight: normal;
  margin: 0;
  display: inline-block;
  overflow: hidden;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c3 {
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c5 {
  display: inline-block;
  line-height: 1.2em;
  max-height: 2.4em;
  overflow: hidden;
  text-overflow: ellipsis;
  font-size: 16px;
}

.c6 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
}

.c9 {
  color: #545454;
  cursor: pointer;
  position: relative;
  max-width: 600px;
  font-size: 13px;
}

.c8 {
  max-height: 4em;
  overflow: hidden;
  font-size: 14px;
  line-height: 20px;
}

.c1 {
  padding: 8px 16px;
}

.c7 {
  border: 0;
  border-bottom: 1px solid #DFE1E5;
  margin: 0;
}

.c27 {
  box-sizing: border-box;
  width: 100%;
  height: 8px;
  display: block;
  margin-top: 8px;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background-color: #f7f7f7;
  border: 1px solid #ddd;
}

.c27::-webkit-progress-bar {
  background-color: #f7f7f7;
}

.c27::-webkit-progress-value {
  background-color: #dc3232;
  -webkit-transition: width 250ms;
  transition: width 250ms;
}

.c27::-moz-progress-bar {
  background-color: #dc3232;
}

.c27::-ms-fill {
  background-color: #dc3232;
  border: 0;
}

.c26 {
  padding: 3px 5px;
  border: 1px solid #ddd;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  margin-top: 5px;
}

.c26::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width=%221792%22%20height=%221792%22%20viewBox=%220%200%201792%201792%22%20xmlns=%22http://www.w3.org/2000/svg%22%3E%3Cpath%20fill=%22transparent%22%20d=%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20/%3E%3C/svg%3E);
  background-size: 25px;
  content: "";
}

.c28 {
  padding: 3px 5px;
  border: 1px solid #ddd;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  margin-top: 5px;
  min-height: 60px;
  padding: 2px 6px;
  line-height: 19.6px;
}

.c28::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width=%221792%22%20height=%221792%22%20viewBox=%220%200%201792%201792%22%20xmlns=%22http://www.w3.org/2000/svg%22%3E%3Cpath%20fill=%22transparent%22%20d=%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20/%3E%3C/svg%3E);
  background-size: 25px;
  content: "";
}

.c24 {
  margin: 32px 0;
}

.c23 {
  padding: 10px 20px 20px 20px;
}

.c25 {
  cursor: pointer;
  font-size: 16px;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
}

.c17 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
}

.c12 {
  font-size: 0.8rem;
}

.c13:active {
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c14:hover {
  color: #000;
}

.c15::-moz-focus-inner {
  border-width: 0;
}

.c15:focus {
  outline: none;
  border-color: #0066cd;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c16 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
}

.c16 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c21 {
  font-size: 0.8rem;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin: 10px 0 0 4px;
  fill: #555;
  padding-left: 8px;
}

.c21 svg {
  margin-right: 7px;
}

.c29 {
  font-size: 0.8rem;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin-left: 20px;
}

.c11 {
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: #555;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 3px 0 0 3px;
}

.c11:hover,
.c11:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
}

.c19 {
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: transparent;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 0 3px 3px 0;
}

.c19:hover,
.c19:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
}

.c10 {
  display: inline-block;
  margin-top: 10px;
  margin-left: 20px;
  border: 1px solid #dbdbdb;
  border-radius: 4px;
  background-color: #f7f7f7;
  vertical-align: top;
}

.c18 {
  width: 22px;
  height: 22px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c20 {
  width: 18px;
  height: 18px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c22 {
  width: 16px;
  height: 16px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

@media all and ( -ms-high-contrast:none ),( -ms-high-contrast:active ) {
  .c16::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

<SnippetEditor
  baseUrl="https://example.org/"
  data={
    Object {
      "description": "Test description, %%replacement_variable%%",
      "slug": "test-slug",
      "title": "Test title",
    }
  }
  descriptionLengthAssessment={
    Object {
      "actual": 0,
      "max": 320,
      "score": 0,
    }
  }
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "textComponent": "span",
    }
  }
  mapDataToPreview={null}
  mode="mobile"
  onChange={[MockFunction]}
  replacementVariables={Array []}
  titleLengthAssessment={
    Object {
      "actual": 0,
      "max": 600,
      "score": 0,
    }
  }
>
  <div>
    <SnippetPreview
      activeField={null}
      breadcrumbs={null}
      date=""
      description="Test description, %%replacement_variable%%"
      hoveredField={null}
      isAmp={false}
      isDescriptionGenerated={false}
      keyword=""
      locale="en_US"
      mode="mobile"
      onClick={[Function]}
      onHover={[Function]}
      onMouseLeave={[Function]}
      onMouseOver={[Function]}
      title="Test title"
      url="example.org/test-slug"
    >
      <section>
        <SnippetPreview__MobileContainer
          padding={20}
          width={640}
        >
          <div
            className="c0"
            width={640}
          >
            <SnippetPreview__MobilePartContainer>
              <div
                className="c1"
              >
                <FormattedScreenReaderMessage
                  after=":"
                  defaultMessage="SEO title preview"
                  id="snippetPreview.seoTitlePreview"
                >
                  <FormattedMessage
                    after=":"
                    defaultMessage="SEO title preview"
                    id="snippetPreview.seoTitlePreview"
                    values={Object {}}
                  >
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        SEO title preview:
                      </span>
                    </ScreenReaderText>
                  </FormattedMessage>
                </FormattedScreenReaderMessage>
                <SnippetPreview__BaseTitle
                  onClick={[Function]}
                  onMouseLeave={[Function]}
                  onMouseOver={[Function]}
                >
                  <div
                    className="c2"
                    onClick={[Function]}
                    onMouseLeave={[Function]}
                    onMouseOver={[Function]}
                  >
                    <SnippetPreview__TitleBounded>
                      <SnippetPreview__Title
                        className="c3"
                      >
                        <div
                          className="c3 c4"
                        >
                          <SnippetPreview__TitleUnboundedMobile
                            innerRef={[Function]}
                          >
                            <span
                              className="c5"
                            >
                              Test title
                            </span>
                          </SnippetPreview__TitleUnboundedMobile>
                        </div>
                      </SnippetPreview__Title>
                    </SnippetPreview__TitleBounded>
                  </div>
                </SnippetPreview__BaseTitle>
                <FormattedScreenReaderMessage
                  after=":"
                  defaultMessage="Url preview"
                  id="snippetPreview.urlPreview"
                >
                  <FormattedMessage
                    after=":"
                    defaultMessage="Url preview"
                    id="snippetPreview.urlPreview"
                    values={Object {}}
                  >
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Url preview:
                      </span>
                    </ScreenReaderText>
                  </FormattedMessage>
                </FormattedScreenReaderMessage>
                <SnippetPreview__BaseUrl
                  onClick={[Function]}
                  onMouseLeave={[Function]}
                  onMouseOver={[Function]}
                >
                  <div
                    className="c6"
                    onClick={[Function]}
                    onMouseLeave={[Function]}
                    onMouseOver={[Function]}
                  >
                    example.org â€º test-slug
                  </div>
                </SnippetPreview__BaseUrl>
              </div>
            </SnippetPreview__MobilePartContainer>
            <SnippetPreview__Separator>
              <hr
                className="c7"
              />
            </SnippetPreview__Separator>
            <SnippetPreview__MobilePartContainer>
              <div
                className="c1"
              >
                <FormattedScreenReaderMessage
                  after=":"
                  defaultMessage="Meta description preview"
                  id="snippetPreview.metaDescriptionPreview"
                >
                  <FormattedMessage
                    after=":"
                    defaultMessage="Meta description preview"
                    id="snippetPreview.metaDescriptionPreview"
                    values={Object {}}
                  >
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Meta description preview:
                      </span>
                    </ScreenReaderText>
                  </FormattedMessage>
                </FormattedScreenReaderMessage>
                <SnippetPreview__MobileDescription
                  innerRef={[Function]}
                  isDescriptionGenerated={false}
                  onClick={[Function]}
                  onMouseLeave={[Function]}
                  onMouseOver={[Function]}
                >
                  <SnippetPreview__DesktopDescription
                    className="c8"
                    innerRef={[Function]}
                    isDescriptionGenerated={false}
                    onClick={[Function]}
                    onMouseLeave={[Function]}
                    onMouseOver={[Function]}
                  >
                    <div
                      className="c8 c9"
                      color="#545454"
                      onClick={[Function]}
                      onMouseLeave={[Function]}
                      onMouseOver={[Function]}
                    >
                      Test description, %%replacement_variable%%
                    </div>
                  </SnippetPreview__DesktopDescription>
                </SnippetPreview__MobileDescription>
              </div>
            </SnippetPreview__MobilePartContainer>
          </div>
        </SnippetPreview__MobileContainer>
      </section>
    </SnippetPreview>
    <ModeSwitcher
      active="mobile"
      onChange={[Function]}
    >
      <ModeSwitcher__Switcher>
        <div
          className="c10"
        >
          <ModeSwitcher__SwitcherButton
            aria-pressed={true}
            isActive={true}
            onClick={[Function]}
          >
            <Button
              aria-pressed={true}
              className="c11"
              isActive={true}
              onClick={[Function]}
            >
              <Button
                aria-pressed={true}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                className="c11 c12"
                isActive={true}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <Button
                  aria-pressed={true}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  className="c11 c12 Button-kDSBcD c13"
                  isActive={true}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <Button
                    aria-pressed={true}
                    backgroundColor="#f7f7f7"
                    borderColor="#ccc"
                    boxShadowColor="#ccc"
                    className="c11 c12 Button-kDSBcD c13 Button-kDSBcD c14"
                    isActive={true}
                    onClick={[Function]}
                    textColor="#555"
                    type="button"
                  >
                    <Button
                      aria-pressed={true}
                      backgroundColor="#f7f7f7"
                      borderColor="#ccc"
                      boxShadowColor="#ccc"
                      className="c11 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15"
                      isActive={true}
                      onClick={[Function]}
                      textColor="#555"
                      type="button"
                    >
                      <Button__BaseButton
                        aria-pressed={true}
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        className="c11 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16"
                        isActive={true}
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <button
                          aria-pressed={true}
                          className="c11 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 c17"
                          onClick={[Function]}
                          type="button"
                        >
                          <SvgIcon
                            color="currentColor"
                            icon="mobile"
                            size="22px"
                          >
                            <SvgIcon__StyledSvg
                              aria-hidden={true}
                              className="yoast-svg-icon yoast-svg-icon-mobile"
                              fill="currentColor"
                              focusable="false"
                              role="img"
                              size="22px"
                              viewBox="0 0 1792 1792"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <svg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-mobile c18"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="22px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
                                />
                              </svg>
                            </SvgIcon__StyledSvg>
                          </SvgIcon>
                          <FormattedScreenReaderMessage
                            defaultMessage="Mobile preview"
                            id="snippetEditor.desktopPreview"
                          >
                            <FormattedMessage
                              defaultMessage="Mobile preview"
                              id="snippetEditor.desktopPreview"
                              values={Object {}}
                            >
                              <ScreenReaderText>
                                <span
                                  className="screen-reader-text"
                                  style={
                                    Object {
                                      "clip": "rect(1px, 1px, 1px, 1px)",
                                      "height": "1px",
                                      "overflow": "hidden",
                                      "position": "absolute",
                                      "width": "1px",
                                    }
                                  }
                                >
                                  Mobile preview
                                </span>
                              </ScreenReaderText>
                            </FormattedMessage>
                          </FormattedScreenReaderMessage>
                        </button>
                      </Button__BaseButton>
                    </Button>
                  </Button>
                </Button>
              </Button>
            </Button>
          </ModeSwitcher__SwitcherButton>
          <ModeSwitcher__SwitcherButton
            aria-pressed={false}
            isActive={false}
            onClick={[Function]}
          >
            <Button
              aria-pressed={false}
              className="c19"
              isActive={false}
              onClick={[Function]}
            >
              <Button
                aria-pressed={false}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                className="c19 c12"
                isActive={false}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <Button
                  aria-pressed={false}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  className="c19 c12 Button-kDSBcD c13"
                  isActive={false}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <Button
                    aria-pressed={false}
                    backgroundColor="#f7f7f7"
                    borderColor="#ccc"
                    boxShadowColor="#ccc"
                    className="c19 c12 Button-kDSBcD c13 Button-kDSBcD c14"
                    isActive={false}
                    onClick={[Function]}
                    textColor="#555"
                    type="button"
                  >
                    <Button
                      aria-pressed={false}
                      backgroundColor="#f7f7f7"
                      borderColor="#ccc"
                      boxShadowColor="#ccc"
                      className="c19 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15"
                      isActive={false}
                      onClick={[Function]}
                      textColor="#555"
                      type="button"
                    >
                      <Button__BaseButton
                        aria-pressed={false}
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        className="c19 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16"
                        isActive={false}
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <button
                          aria-pressed={false}
                          className="c19 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 c17"
                          onClick={[Function]}
                          type="button"
                        >
                          <SvgIcon
                            color="currentColor"
                            icon="desktop"
                            size="18px"
                          >
                            <SvgIcon__StyledSvg
                              aria-hidden={true}
                              className="yoast-svg-icon yoast-svg-icon-desktop"
                              fill="currentColor"
                              focusable="false"
                              role="img"
                              size="18px"
                              viewBox="0 0 1792 1792"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <svg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-desktop c20"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="18px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
                                />
                              </svg>
                            </SvgIcon__StyledSvg>
                          </SvgIcon>
                          <FormattedScreenReaderMessage
                            defaultMessage="Desktop preview"
                            id="snippetEditor.desktopPreview"
                          >
                            <FormattedMessage
                              defaultMessage="Desktop preview"
                              id="snippetEditor.desktopPreview"
                              values={Object {}}
                            >
                              <ScreenReaderText>
                                <span
                                  className="screen-reader-text"
                                  style={
                                    Object {
                                      "clip": "rect(1px, 1px, 1px, 1px)",
                                      "height": "1px",
                                      "overflow": "hidden",
                                      "position": "absolute",
                                      "width": "1px",
                                    }
                                  }
                                >
                                  Desktop preview
                                </span>
                              </ScreenReaderText>
                            </FormattedMessage>
                          </FormattedScreenReaderMessage>
                        </button>
                      </Button__BaseButton>
                    </Button>
                  </Button>
                </Button>
              </Button>
            </Button>
          </ModeSwitcher__SwitcherButton>
        </div>
      </ModeSwitcher__Switcher>
    </ModeSwitcher>
    <Button
      aria-expanded={true}
      innerRef={[Function]}
      onClick={[Function]}
    >
      <Button
        aria-expanded={true}
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        className="c21"
        innerRef={[Function]}
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <Button
          aria-expanded={true}
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          className="c21 Button-kDSBcD c13"
          innerRef={[Function]}
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <Button
            aria-expanded={true}
            backgroundColor="#f7f7f7"
            borderColor="#ccc"
            boxShadowColor="#ccc"
            className="c21 Button-kDSBcD c13 Button-kDSBcD c14"
            innerRef={[Function]}
            onClick={[Function]}
            textColor="#555"
            type="button"
          >
            <Button
              aria-expanded={true}
              backgroundColor="#f7f7f7"
              borderColor="#ccc"
              boxShadowColor="#ccc"
              className="c21 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15"
              innerRef={[Function]}
              onClick={[Function]}
              textColor="#555"
              type="button"
            >
              <Button__BaseButton
                aria-expanded={true}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                className="c21 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16"
                innerRef={[Function]}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <button
                  aria-expanded={true}
                  className="c21 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 c17"
                  onClick={[Function]}
                  type="button"
                >
                  <SvgIcon
                    icon="edit"
                    size="16px"
                  >
                    <SvgIcon__StyledSvg
                      aria-hidden={true}
                      className="yoast-svg-icon yoast-svg-icon-edit"
                      focusable="false"
                      role="img"
                      size="16px"
                      viewBox="0 0 1792 1792"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <svg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-edit c22"
                        focusable="false"
                        role="img"
                        size="16px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
                        />
                      </svg>
                    </SvgIcon__StyledSvg>
                  </SvgIcon>
                  <FormattedMessage
                    defaultMessage="Edit snippet"
                    id="snippetEditor.editSnippet"
                    values={Object {}}
                  >
                    <span>
                      Edit snippet
                    </span>
                  </FormattedMessage>
                </button>
              </Button__BaseButton>
            </Button>
          </Button>
        </Button>
      </Button>
    </Button>
    <InjectIntl(SnippetEditorFields)
      activeField={null}
      data={
        Object {
          "description": "Test description, %%replacement_variable%%",
          "slug": "test-slug",
          "title": "Test title",
        }
      }
      descriptionLengthAssessment={
        Object {
          "actual": 0,
          "max": 320,
          "score": 0,
        }
      }
      hoveredField={null}
      onChange={[MockFunction]}
      onFocus={[Function]}
      replacementVariables={Array []}
      titleLengthAssessment={
        Object {
          "actual": 0,
          "max": 600,
          "score": 0,
        }
      }
    >
      <SnippetEditorFields
        activeField={null}
        data={
          Object {
            "description": "Test description, %%replacement_variable%%",
            "slug": "test-slug",
            "title": "Test title",
          }
        }
        descriptionLengthAssessment={
          Object {
            "actual": 0,
            "max": 320,
            "score": 0,
          }
        }
        hoveredField={null}
        intl={
          Object {
            "defaultFormats": Object {},
            "defaultLocale": "en",
            "formatDate": [Function],
            "formatHTMLMessage": [Function],
            "formatMessage": [Function],
            "formatNumber": [Function],
            "formatPlural": [Function],
            "formatRelative": [Function],
            "formatTime": [Function],
            "formats": Object {},
            "formatters": Object {
              "getDateTimeFormat": [Function],
              "getMessageFormat": [Function],
              "getNumberFormat": [Function],
              "getPluralFormat": [Function],
              "getRelativeFormat": [Function],
            },
            "locale": "en",
            "messages": Object {},
            "now": [Function],
            "textComponent": "span",
          }
        }
        onChange={[MockFunction]}
        onFocus={[Function]}
        replacementVariables={Array []}
        titleLengthAssessment={
          Object {
            "actual": 0,
            "max": 600,
            "score": 0,
          }
        }
      >
        <SnippetEditorFields__StyledEditor>
          <section
            className="c23"
          >
            <SnippetEditorFields__FormSection>
              <div
                className="c24"
              >
                <SnippetEditorFields__SimulatedLabel
                  id="snippet-editor-field-5-title"
                  onClick={[Function]}
                >
                  <div
                    className="c25"
                    id="snippet-editor-field-5-title"
                    onClick={[Function]}
                  >
                    SEO title
                  </div>
                </SnippetEditorFields__SimulatedLabel>
                <SnippetEditorFields__InputContainer
                  isActive={false}
                  isHovered={false}
                >
                  <div
                    className="c26"
                  >
                    <ReplacementVariableEditor
                      ariaLabelledBy="snippet-editor-field-5-title"
                      content="Test title"
                      onChange={[Function]}
                      onFocus={[Function]}
                      replacementVariables={Array []}
                    >
                      <div />
                    </ReplacementVariableEditor>
                  </div>
                </SnippetEditorFields__InputContainer>
                <ProgressBar
                  aria-hidden="true"
                  backgroundColor="#f7f7f7"
                  borderColor="#ddd"
                  max={600}
                  progressColor="#dc3232"
                  value={0}
                >
                  <progress
                    aria-hidden="true"
                    className="c27"
                    max={600}
                    value={0}
                  />
                </ProgressBar>
              </div>
            </SnippetEditorFields__FormSection>
            <SnippetEditorFields__FormSection>
              <div
                className="c24"
              >
                <SnippetEditorFields__SimulatedLabel
                  id="snippet-editor-field-5-slug"
                  onClick={[Function]}
                >
                  <div
                    className="c25"
                    id="snippet-editor-field-5-slug"
                    onClick={[Function]}
                  >
                    Slug
                  </div>
                </SnippetEditorFields__SimulatedLabel>
                <SnippetEditorFields__InputContainer
                  isActive={false}
                  isHovered={false}
                >
                  <div
                    className="c26"
                  >
                    <ReplacementVariableEditor
                      ariaLabelledBy="snippet-editor-field-5-slug"
                      content="test-slug"
                      onChange={[Function]}
                      onFocus={[Function]}
                      replacementVariables={Array []}
                    >
                      <div />
                    </ReplacementVariableEditor>
                  </div>
                </SnippetEditorFields__InputContainer>
              </div>
            </SnippetEditorFields__FormSection>
            <SnippetEditorFields__FormSection>
              <div
                className="c24"
              >
                <SnippetEditorFields__SimulatedLabel
                  id="snippet-editor-field-5-description"
                  onClick={[Function]}
                >
                  <div
                    className="c25"
                    id="snippet-editor-field-5-description"
                    onClick={[Function]}
                  >
                    Meta description
                  </div>
                </SnippetEditorFields__SimulatedLabel>
                <SnippetEditorFields__InputContainer
                  isActive={false}
                  isHovered={false}
                >
                  <div
                    className="c28"
                  >
                    <ReplacementVariableEditor
                      ariaLabelledBy="snippet-editor-field-5-description"
                      content="Test description, %%replacement_variable%%"
                      onChange={[Function]}
                      onFocus={[Function]}
                      replacementVariables={Array []}
                    >
                      <div />
                    </ReplacementVariableEditor>
                  </div>
                </SnippetEditorFields__InputContainer>
                <ProgressBar
                  aria-hidden="true"
                  backgroundColor="#f7f7f7"
                  borderColor="#ddd"
                  max={320}
                  progressColor="#dc3232"
                  value={0}
                >
                  <progress
                    aria-hidden="true"
                    className="c27"
                    max={320}
                    value={0}
                  />
                </ProgressBar>
              </div>
            </SnippetEditorFields__FormSection>
          </section>
        </SnippetEditorFields__StyledEditor>
      </SnippetEditorFields>
    </InjectIntl(SnippetEditorFields)>
    <Button
      onClick={[Function]}
    >
      <Button
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        className="c29"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <Button
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          className="c29 Button-kDSBcD c13"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <Button
            backgroundColor="#f7f7f7"
            borderColor="#ccc"
            boxShadowColor="#ccc"
            className="c29 Button-kDSBcD c13 Button-kDSBcD c14"
            onClick={[Function]}
            textColor="#555"
            type="button"
          >
            <Button
              backgroundColor="#f7f7f7"
              borderColor="#ccc"
              boxShadowColor="#ccc"
              className="c29 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15"
              onClick={[Function]}
              textColor="#555"
              type="button"
            >
              <Button__BaseButton
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                className="c29 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16"
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <button
                  className="c29 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 c17"
                  onClick={[Function]}
                  type="button"
                >
                  <FormattedMessage
                    defaultMessage="Close snippet editor"
                    id="snippet-editor.close-editor"
                    values={Object {}}
                  >
                    <span>
                      Close snippet editor
                    </span>
                  </FormattedMessage>
                </button>
              </Button__BaseButton>
            </Button>
          </Button>
        </Button>
      </Button>
    </Button>
  </div>
</SnippetEditor>
`;

exports[`SnippetEditor calls callbacks when the editors are focused or changed 2`] = `
.c0 {
  border-bottom: 1px hidden #fff;
  border-radius: 2px;
  box-shadow: 0 1px 2px rgba(0,0,0,.2);
  margin: 0 20px 10px;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  max-width: 600px;
  box-sizing: border-box;
  font-size: 14px;
}

.c2 {
  cursor: pointer;
  position: relative;
}

.c4 {
  color: #1e0fbe;
  text-decoration: none;
  font-size: 18px;
  line-height: 1.2;
  font-weight: normal;
  margin: 0;
  display: inline-block;
  overflow: hidden;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c3 {
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c5 {
  display: inline-block;
  line-height: 1.2em;
  max-height: 2.4em;
  overflow: hidden;
  text-overflow: ellipsis;
  font-size: 16px;
}

.c6 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
}

.c9 {
  color: #545454;
  cursor: pointer;
  position: relative;
  max-width: 600px;
  font-size: 13px;
}

.c8 {
  max-height: 4em;
  overflow: hidden;
  font-size: 14px;
  line-height: 20px;
}

.c1 {
  padding: 8px 16px;
}

.c7 {
  border: 0;
  border-bottom: 1px solid #DFE1E5;
  margin: 0;
}

.c27 {
  box-sizing: border-box;
  width: 100%;
  height: 8px;
  display: block;
  margin-top: 8px;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background-color: #f7f7f7;
  border: 1px solid #ddd;
}

.c27::-webkit-progress-bar {
  background-color: #f7f7f7;
}

.c27::-webkit-progress-value {
  background-color: #dc3232;
  -webkit-transition: width 250ms;
  transition: width 250ms;
}

.c27::-moz-progress-bar {
  background-color: #dc3232;
}

.c27::-ms-fill {
  background-color: #dc3232;
  border: 0;
}

.c26 {
  padding: 3px 5px;
  border: 1px solid #ddd;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  margin-top: 5px;
}

.c26::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width=%221792%22%20height=%221792%22%20viewBox=%220%200%201792%201792%22%20xmlns=%22http://www.w3.org/2000/svg%22%3E%3Cpath%20fill=%22transparent%22%20d=%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20/%3E%3C/svg%3E);
  background-size: 25px;
  content: "";
}

.c28 {
  padding: 3px 5px;
  border: 1px solid #ddd;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  margin-top: 5px;
  min-height: 60px;
  padding: 2px 6px;
  line-height: 19.6px;
}

.c28::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width=%221792%22%20height=%221792%22%20viewBox=%220%200%201792%201792%22%20xmlns=%22http://www.w3.org/2000/svg%22%3E%3Cpath%20fill=%22transparent%22%20d=%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20/%3E%3C/svg%3E);
  background-size: 25px;
  content: "";
}

.c24 {
  margin: 32px 0;
}

.c23 {
  padding: 10px 20px 20px 20px;
}

.c25 {
  cursor: pointer;
  font-size: 16px;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
}

.c17 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
}

.c12 {
  font-size: 0.8rem;
}

.c13:active {
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c14:hover {
  color: #000;
}

.c15::-moz-focus-inner {
  border-width: 0;
}

.c15:focus {
  outline: none;
  border-color: #0066cd;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c16 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
}

.c16 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c21 {
  font-size: 0.8rem;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin: 10px 0 0 4px;
  fill: #555;
  padding-left: 8px;
}

.c21 svg {
  margin-right: 7px;
}

.c29 {
  font-size: 0.8rem;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin-left: 20px;
}

.c11 {
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: #555;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 3px 0 0 3px;
}

.c11:hover,
.c11:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
}

.c19 {
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: transparent;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 0 3px 3px 0;
}

.c19:hover,
.c19:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
}

.c10 {
  display: inline-block;
  margin-top: 10px;
  margin-left: 20px;
  border: 1px solid #dbdbdb;
  border-radius: 4px;
  background-color: #f7f7f7;
  vertical-align: top;
}

.c18 {
  width: 22px;
  height: 22px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c20 {
  width: 18px;
  height: 18px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c22 {
  width: 16px;
  height: 16px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

@media all and ( -ms-high-contrast:none ),( -ms-high-contrast:active ) {
  .c16::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

<SnippetEditor
  baseUrl="https://example.org/"
  data={
    Object {
      "description": "Test description, %%replacement_variable%%",
      "slug": "test-slug",
      "title": "Test title",
    }
  }
  descriptionLengthAssessment={
    Object {
      "actual": 0,
      "max": 320,
      "score": 0,
    }
  }
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "textComponent": "span",
    }
  }
  mapDataToPreview={null}
  mode="mobile"
  onChange={[MockFunction]}
  replacementVariables={Array []}
  titleLengthAssessment={
    Object {
      "actual": 0,
      "max": 600,
      "score": 0,
    }
  }
>
  <div>
    <SnippetPreview
      activeField={null}
      breadcrumbs={null}
      date=""
      description="Test description, %%replacement_variable%%"
      hoveredField={null}
      isAmp={false}
      isDescriptionGenerated={false}
      keyword=""
      locale="en_US"
      mode="mobile"
      onClick={[Function]}
      onHover={[Function]}
      onMouseLeave={[Function]}
      onMouseOver={[Function]}
      title="Test title"
      url="example.org/test-slug"
    >
      <section>
        <SnippetPreview__MobileContainer
          padding={20}
          width={640}
        >
          <div
            className="c0"
            width={640}
          >
            <SnippetPreview__MobilePartContainer>
              <div
                className="c1"
              >
                <FormattedScreenReaderMessage
                  after=":"
                  defaultMessage="SEO title preview"
                  id="snippetPreview.seoTitlePreview"
                >
                  <FormattedMessage
                    after=":"
                    defaultMessage="SEO title preview"
                    id="snippetPreview.seoTitlePreview"
                    values={Object {}}
                  >
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        SEO title preview:
                      </span>
                    </ScreenReaderText>
                  </FormattedMessage>
                </FormattedScreenReaderMessage>
                <SnippetPreview__BaseTitle
                  onClick={[Function]}
                  onMouseLeave={[Function]}
                  onMouseOver={[Function]}
                >
                  <div
                    className="c2"
                    onClick={[Function]}
                    onMouseLeave={[Function]}
                    onMouseOver={[Function]}
                  >
                    <SnippetPreview__TitleBounded>
                      <SnippetPreview__Title
                        className="c3"
                      >
                        <div
                          className="c3 c4"
                        >
                          <SnippetPreview__TitleUnboundedMobile
                            innerRef={[Function]}
                          >
                            <span
                              className="c5"
                            >
                              Test title
                            </span>
                          </SnippetPreview__TitleUnboundedMobile>
                        </div>
                      </SnippetPreview__Title>
                    </SnippetPreview__TitleBounded>
                  </div>
                </SnippetPreview__BaseTitle>
                <FormattedScreenReaderMessage
                  after=":"
                  defaultMessage="Url preview"
                  id="snippetPreview.urlPreview"
                >
                  <FormattedMessage
                    after=":"
                    defaultMessage="Url preview"
                    id="snippetPreview.urlPreview"
                    values={Object {}}
                  >
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Url preview:
                      </span>
                    </ScreenReaderText>
                  </FormattedMessage>
                </FormattedScreenReaderMessage>
                <SnippetPreview__BaseUrl
                  onClick={[Function]}
                  onMouseLeave={[Function]}
                  onMouseOver={[Function]}
                >
                  <div
                    className="c6"
                    onClick={[Function]}
                    onMouseLeave={[Function]}
                    onMouseOver={[Function]}
                  >
                    example.org â€º test-slug
                  </div>
                </SnippetPreview__BaseUrl>
              </div>
            </SnippetPreview__MobilePartContainer>
            <SnippetPreview__Separator>
              <hr
                className="c7"
              />
            </SnippetPreview__Separator>
            <SnippetPreview__MobilePartContainer>
              <div
                className="c1"
              >
                <FormattedScreenReaderMessage
                  after=":"
                  defaultMessage="Meta description preview"
                  id="snippetPreview.metaDescriptionPreview"
                >
                  <FormattedMessage
                    after=":"
                    defaultMessage="Meta description preview"
                    id="snippetPreview.metaDescriptionPreview"
                    values={Object {}}
                  >
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Meta description preview:
                      </span>
                    </ScreenReaderText>
                  </FormattedMessage>
                </FormattedScreenReaderMessage>
                <SnippetPreview__MobileDescription
                  innerRef={[Function]}
                  isDescriptionGenerated={false}
                  onClick={[Function]}
                  onMouseLeave={[Function]}
                  onMouseOver={[Function]}
                >
                  <SnippetPreview__DesktopDescription
                    className="c8"
                    innerRef={[Function]}
                    isDescriptionGenerated={false}
                    onClick={[Function]}
                    onMouseLeave={[Function]}
                    onMouseOver={[Function]}
                  >
                    <div
                      className="c8 c9"
                      color="#545454"
                      onClick={[Function]}
                      onMouseLeave={[Function]}
                      onMouseOver={[Function]}
                    >
                      Test description, %%replacement_variable%%
                    </div>
                  </SnippetPreview__DesktopDescription>
                </SnippetPreview__MobileDescription>
              </div>
            </SnippetPreview__MobilePartContainer>
          </div>
        </SnippetPreview__MobileContainer>
      </section>
    </SnippetPreview>
    <ModeSwitcher
      active="mobile"
      onChange={[Function]}
    >
      <ModeSwitcher__Switcher>
        <div
          className="c10"
        >
          <ModeSwitcher__SwitcherButton
            aria-pressed={true}
            isActive={true}
            onClick={[Function]}
          >
            <Button
              aria-pressed={true}
              className="c11"
              isActive={true}
              onClick={[Function]}
            >
              <Button
                aria-pressed={true}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                className="c11 c12"
                isActive={true}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <Button
                  aria-pressed={true}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  className="c11 c12 Button-kDSBcD c13"
                  isActive={true}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <Button
                    aria-pressed={true}
                    backgroundColor="#f7f7f7"
                    borderColor="#ccc"
                    boxShadowColor="#ccc"
                    className="c11 c12 Button-kDSBcD c13 Button-kDSBcD c14"
                    isActive={true}
                    onClick={[Function]}
                    textColor="#555"
                    type="button"
                  >
                    <Button
                      aria-pressed={true}
                      backgroundColor="#f7f7f7"
                      borderColor="#ccc"
                      boxShadowColor="#ccc"
                      className="c11 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15"
                      isActive={true}
                      onClick={[Function]}
                      textColor="#555"
                      type="button"
                    >
                      <Button__BaseButton
                        aria-pressed={true}
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        className="c11 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16"
                        isActive={true}
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <button
                          aria-pressed={true}
                          className="c11 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 c17"
                          onClick={[Function]}
                          type="button"
                        >
                          <SvgIcon
                            color="currentColor"
                            icon="mobile"
                            size="22px"
                          >
                            <SvgIcon__StyledSvg
                              aria-hidden={true}
                              className="yoast-svg-icon yoast-svg-icon-mobile"
                              fill="currentColor"
                              focusable="false"
                              role="img"
                              size="22px"
                              viewBox="0 0 1792 1792"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <svg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-mobile c18"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="22px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
                                />
                              </svg>
                            </SvgIcon__StyledSvg>
                          </SvgIcon>
                          <FormattedScreenReaderMessage
                            defaultMessage="Mobile preview"
                            id="snippetEditor.desktopPreview"
                          >
                            <FormattedMessage
                              defaultMessage="Mobile preview"
                              id="snippetEditor.desktopPreview"
                              values={Object {}}
                            >
                              <ScreenReaderText>
                                <span
                                  className="screen-reader-text"
                                  style={
                                    Object {
                                      "clip": "rect(1px, 1px, 1px, 1px)",
                                      "height": "1px",
                                      "overflow": "hidden",
                                      "position": "absolute",
                                      "width": "1px",
                                    }
                                  }
                                >
                                  Mobile preview
                                </span>
                              </ScreenReaderText>
                            </FormattedMessage>
                          </FormattedScreenReaderMessage>
                        </button>
                      </Button__BaseButton>
                    </Button>
                  </Button>
                </Button>
              </Button>
            </Button>
          </ModeSwitcher__SwitcherButton>
          <ModeSwitcher__SwitcherButton
            aria-pressed={false}
            isActive={false}
            onClick={[Function]}
          >
            <Button
              aria-pressed={false}
              className="c19"
              isActive={false}
              onClick={[Function]}
            >
              <Button
                aria-pressed={false}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                className="c19 c12"
                isActive={false}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <Button
                  aria-pressed={false}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  className="c19 c12 Button-kDSBcD c13"
                  isActive={false}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <Button
                    aria-pressed={false}
                    backgroundColor="#f7f7f7"
                    borderColor="#ccc"
                    boxShadowColor="#ccc"
                    className="c19 c12 Button-kDSBcD c13 Button-kDSBcD c14"
                    isActive={false}
                    onClick={[Function]}
                    textColor="#555"
                    type="button"
                  >
                    <Button
                      aria-pressed={false}
                      backgroundColor="#f7f7f7"
                      borderColor="#ccc"
                      boxShadowColor="#ccc"
                      className="c19 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15"
                      isActive={false}
                      onClick={[Function]}
                      textColor="#555"
                      type="button"
                    >
                      <Button__BaseButton
                        aria-pressed={false}
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        className="c19 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16"
                        isActive={false}
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <button
                          aria-pressed={false}
                          className="c19 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 c17"
                          onClick={[Function]}
                          type="button"
                        >
                          <SvgIcon
                            color="currentColor"
                            icon="desktop"
                            size="18px"
                          >
                            <SvgIcon__StyledSvg
                              aria-hidden={true}
                              className="yoast-svg-icon yoast-svg-icon-desktop"
                              fill="currentColor"
                              focusable="false"
                              role="img"
                              size="18px"
                              viewBox="0 0 1792 1792"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <svg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-desktop c20"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="18px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
                                />
                              </svg>
                            </SvgIcon__StyledSvg>
                          </SvgIcon>
                          <FormattedScreenReaderMessage
                            defaultMessage="Desktop preview"
                            id="snippetEditor.desktopPreview"
                          >
                            <FormattedMessage
                              defaultMessage="Desktop preview"
                              id="snippetEditor.desktopPreview"
                              values={Object {}}
                            >
                              <ScreenReaderText>
                                <span
                                  className="screen-reader-text"
                                  style={
                                    Object {
                                      "clip": "rect(1px, 1px, 1px, 1px)",
                                      "height": "1px",
                                      "overflow": "hidden",
                                      "position": "absolute",
                                      "width": "1px",
                                    }
                                  }
                                >
                                  Desktop preview
                                </span>
                              </ScreenReaderText>
                            </FormattedMessage>
                          </FormattedScreenReaderMessage>
                        </button>
                      </Button__BaseButton>
                    </Button>
                  </Button>
                </Button>
              </Button>
            </Button>
          </ModeSwitcher__SwitcherButton>
        </div>
      </ModeSwitcher__Switcher>
    </ModeSwitcher>
    <Button
      aria-expanded={true}
      innerRef={[Function]}
      onClick={[Function]}
    >
      <Button
        aria-expanded={true}
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        className="c21"
        innerRef={[Function]}
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <Button
          aria-expanded={true}
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          className="c21 Button-kDSBcD c13"
          innerRef={[Function]}
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <Button
            aria-expanded={true}
            backgroundColor="#f7f7f7"
            borderColor="#ccc"
            boxShadowColor="#ccc"
            className="c21 Button-kDSBcD c13 Button-kDSBcD c14"
            innerRef={[Function]}
            onClick={[Function]}
            textColor="#555"
            type="button"
          >
            <Button
              aria-expanded={true}
              backgroundColor="#f7f7f7"
              borderColor="#ccc"
              boxShadowColor="#ccc"
              className="c21 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15"
              innerRef={[Function]}
              onClick={[Function]}
              textColor="#555"
              type="button"
            >
              <Button__BaseButton
                aria-expanded={true}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                className="c21 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16"
                innerRef={[Function]}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <button
                  aria-expanded={true}
                  className="c21 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 c17"
                  onClick={[Function]}
                  type="button"
                >
                  <SvgIcon
                    icon="edit"
                    size="16px"
                  >
                    <SvgIcon__StyledSvg
                      aria-hidden={true}
                      className="yoast-svg-icon yoast-svg-icon-edit"
                      focusable="false"
                      role="img"
                      size="16px"
                      viewBox="0 0 1792 1792"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <svg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-edit c22"
                        focusable="false"
                        role="img"
                        size="16px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
                        />
                      </svg>
                    </SvgIcon__StyledSvg>
                  </SvgIcon>
                  <FormattedMessage
                    defaultMessage="Edit snippet"
                    id="snippetEditor.editSnippet"
                    values={Object {}}
                  >
                    <span>
                      Edit snippet
                    </span>
                  </FormattedMessage>
                </button>
              </Button__BaseButton>
            </Button>
          </Button>
        </Button>
      </Button>
    </Button>
    <InjectIntl(SnippetEditorFields)
      activeField={null}
      data={
        Object {
          "description": "Test description, %%replacement_variable%%",
          "slug": "test-slug",
          "title": "Test title",
        }
      }
      descriptionLengthAssessment={
        Object {
          "actual": 0,
          "max": 320,
          "score": 0,
        }
      }
      hoveredField={null}
      onChange={[MockFunction]}
      onFocus={[Function]}
      replacementVariables={Array []}
      titleLengthAssessment={
        Object {
          "actual": 0,
          "max": 600,
          "score": 0,
        }
      }
    >
      <SnippetEditorFields
        activeField={null}
        data={
          Object {
            "description": "Test description, %%replacement_variable%%",
            "slug": "test-slug",
            "title": "Test title",
          }
        }
        descriptionLengthAssessment={
          Object {
            "actual": 0,
            "max": 320,
            "score": 0,
          }
        }
        hoveredField={null}
        intl={
          Object {
            "defaultFormats": Object {},
            "defaultLocale": "en",
            "formatDate": [Function],
            "formatHTMLMessage": [Function],
            "formatMessage": [Function],
            "formatNumber": [Function],
            "formatPlural": [Function],
            "formatRelative": [Function],
            "formatTime": [Function],
            "formats": Object {},
            "formatters": Object {
              "getDateTimeFormat": [Function],
              "getMessageFormat": [Function],
              "getNumberFormat": [Function],
              "getPluralFormat": [Function],
              "getRelativeFormat": [Function],
            },
            "locale": "en",
            "messages": Object {},
            "now": [Function],
            "textComponent": "span",
          }
        }
        onChange={[MockFunction]}
        onFocus={[Function]}
        replacementVariables={Array []}
        titleLengthAssessment={
          Object {
            "actual": 0,
            "max": 600,
            "score": 0,
          }
        }
      >
        <SnippetEditorFields__StyledEditor>
          <section
            className="c23"
          >
            <SnippetEditorFields__FormSection>
              <div
                className="c24"
              >
                <SnippetEditorFields__SimulatedLabel
                  id="snippet-editor-field-5-title"
                  onClick={[Function]}
                >
                  <div
                    className="c25"
                    id="snippet-editor-field-5-title"
                    onClick={[Function]}
                  >
                    SEO title
                  </div>
                </SnippetEditorFields__SimulatedLabel>
                <SnippetEditorFields__InputContainer
                  isActive={false}
                  isHovered={false}
                >
                  <div
                    className="c26"
                  >
                    <ReplacementVariableEditor
                      ariaLabelledBy="snippet-editor-field-5-title"
                      content="Test title"
                      onChange={[Function]}
                      onFocus={[Function]}
                      replacementVariables={Array []}
                    >
                      <div />
                    </ReplacementVariableEditor>
                  </div>
                </SnippetEditorFields__InputContainer>
                <ProgressBar
                  aria-hidden="true"
                  backgroundColor="#f7f7f7"
                  borderColor="#ddd"
                  max={600}
                  progressColor="#dc3232"
                  value={0}
                >
                  <progress
                    aria-hidden="true"
                    className="c27"
                    max={600}
                    value={0}
                  />
                </ProgressBar>
              </div>
            </SnippetEditorFields__FormSection>
            <SnippetEditorFields__FormSection>
              <div
                className="c24"
              >
                <SnippetEditorFields__SimulatedLabel
                  id="snippet-editor-field-5-slug"
                  onClick={[Function]}
                >
                  <div
                    className="c25"
                    id="snippet-editor-field-5-slug"
                    onClick={[Function]}
                  >
                    Slug
                  </div>
                </SnippetEditorFields__SimulatedLabel>
                <SnippetEditorFields__InputContainer
                  isActive={false}
                  isHovered={false}
                >
                  <div
                    className="c26"
                  >
                    <ReplacementVariableEditor
                      ariaLabelledBy="snippet-editor-field-5-slug"
                      content="test-slug"
                      onChange={[Function]}
                      onFocus={[Function]}
                      replacementVariables={Array []}
                    >
                      <div />
                    </ReplacementVariableEditor>
                  </div>
                </SnippetEditorFields__InputContainer>
              </div>
            </SnippetEditorFields__FormSection>
            <SnippetEditorFields__FormSection>
              <div
                className="c24"
              >
                <SnippetEditorFields__SimulatedLabel
                  id="snippet-editor-field-5-description"
                  onClick={[Function]}
                >
                  <div
                    className="c25"
                    id="snippet-editor-field-5-description"
                    onClick={[Function]}
                  >
                    Meta description
                  </div>
                </SnippetEditorFields__SimulatedLabel>
                <SnippetEditorFields__InputContainer
                  isActive={false}
                  isHovered={false}
                >
                  <div
                    className="c28"
                  >
                    <ReplacementVariableEditor
                      ariaLabelledBy="snippet-editor-field-5-description"
                      content="Test description, %%replacement_variable%%"
                      onChange={[Function]}
                      onFocus={[Function]}
                      replacementVariables={Array []}
                    >
                      <div />
                    </ReplacementVariableEditor>
                  </div>
                </SnippetEditorFields__InputContainer>
                <ProgressBar
                  aria-hidden="true"
                  backgroundColor="#f7f7f7"
                  borderColor="#ddd"
                  max={320}
                  progressColor="#dc3232"
                  value={0}
                >
                  <progress
                    aria-hidden="true"
                    className="c27"
                    max={320}
                    value={0}
                  />
                </ProgressBar>
              </div>
            </SnippetEditorFields__FormSection>
          </section>
        </SnippetEditorFields__StyledEditor>
      </SnippetEditorFields>
    </InjectIntl(SnippetEditorFields)>
    <Button
      onClick={[Function]}
    >
      <Button
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        className="c29"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <Button
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          className="c29 Button-kDSBcD c13"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <Button
            backgroundColor="#f7f7f7"
            borderColor="#ccc"
            boxShadowColor="#ccc"
            className="c29 Button-kDSBcD c13 Button-kDSBcD c14"
            onClick={[Function]}
            textColor="#555"
            type="button"
          >
            <Button
              backgroundColor="#f7f7f7"
              borderColor="#ccc"
              boxShadowColor="#ccc"
              className="c29 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15"
              onClick={[Function]}
              textColor="#555"
              type="button"
            >
              <Button__BaseButton
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                className="c29 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16"
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <button
                  className="c29 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 c17"
                  onClick={[Function]}
                  type="button"
                >
                  <FormattedMessage
                    defaultMessage="Close snippet editor"
                    id="snippet-editor.close-editor"
                    values={Object {}}
                  >
                    <span>
                      Close snippet editor
                    </span>
                  </FormattedMessage>
                </button>
              </Button__BaseButton>
            </Button>
          </Button>
        </Button>
      </Button>
    </Button>
  </div>
</SnippetEditor>
`;

exports[`SnippetEditor calls callbacks when the editors are focused or changed 3`] = `
.c0 {
  border-bottom: 1px hidden #fff;
  border-radius: 2px;
  box-shadow: 0 1px 2px rgba(0,0,0,.2);
  margin: 0 20px 10px;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  max-width: 600px;
  box-sizing: border-box;
  font-size: 14px;
}

.c2 {
  cursor: pointer;
  position: relative;
}

.c4 {
  color: #1e0fbe;
  text-decoration: none;
  font-size: 18px;
  line-height: 1.2;
  font-weight: normal;
  margin: 0;
  display: inline-block;
  overflow: hidden;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c3 {
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c5 {
  display: inline-block;
  line-height: 1.2em;
  max-height: 2.4em;
  overflow: hidden;
  text-overflow: ellipsis;
  font-size: 16px;
}

.c6 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
}

.c9 {
  color: #545454;
  cursor: pointer;
  position: relative;
  max-width: 600px;
  font-size: 13px;
}

.c8 {
  max-height: 4em;
  overflow: hidden;
  font-size: 14px;
  line-height: 20px;
}

.c1 {
  padding: 8px 16px;
}

.c7 {
  border: 0;
  border-bottom: 1px solid #DFE1E5;
  margin: 0;
}

.c27 {
  box-sizing: border-box;
  width: 100%;
  height: 8px;
  display: block;
  margin-top: 8px;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background-color: #f7f7f7;
  border: 1px solid #ddd;
}

.c27::-webkit-progress-bar {
  background-color: #f7f7f7;
}

.c27::-webkit-progress-value {
  background-color: #dc3232;
  -webkit-transition: width 250ms;
  transition: width 250ms;
}

.c27::-moz-progress-bar {
  background-color: #dc3232;
}

.c27::-ms-fill {
  background-color: #dc3232;
  border: 0;
}

.c26 {
  padding: 3px 5px;
  border: 1px solid #ddd;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  margin-top: 5px;
}

.c26::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width=%221792%22%20height=%221792%22%20viewBox=%220%200%201792%201792%22%20xmlns=%22http://www.w3.org/2000/svg%22%3E%3Cpath%20fill=%22transparent%22%20d=%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20/%3E%3C/svg%3E);
  background-size: 25px;
  content: "";
}

.c28 {
  padding: 3px 5px;
  border: 1px solid #ddd;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  margin-top: 5px;
  min-height: 60px;
  padding: 2px 6px;
  line-height: 19.6px;
}

.c28::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width=%221792%22%20height=%221792%22%20viewBox=%220%200%201792%201792%22%20xmlns=%22http://www.w3.org/2000/svg%22%3E%3Cpath%20fill=%22transparent%22%20d=%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20/%3E%3C/svg%3E);
  background-size: 25px;
  content: "";
}

.c24 {
  margin: 32px 0;
}

.c23 {
  padding: 10px 20px 20px 20px;
}

.c25 {
  cursor: pointer;
  font-size: 16px;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
}

.c17 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
}

.c12 {
  font-size: 0.8rem;
}

.c13:active {
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c14:hover {
  color: #000;
}

.c15::-moz-focus-inner {
  border-width: 0;
}

.c15:focus {
  outline: none;
  border-color: #0066cd;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c16 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
}

.c16 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c21 {
  font-size: 0.8rem;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin: 10px 0 0 4px;
  fill: #555;
  padding-left: 8px;
}

.c21 svg {
  margin-right: 7px;
}

.c29 {
  font-size: 0.8rem;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin-left: 20px;
}

.c11 {
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: #555;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 3px 0 0 3px;
}

.c11:hover,
.c11:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
}

.c19 {
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: transparent;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 0 3px 3px 0;
}

.c19:hover,
.c19:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
}

.c10 {
  display: inline-block;
  margin-top: 10px;
  margin-left: 20px;
  border: 1px solid #dbdbdb;
  border-radius: 4px;
  background-color: #f7f7f7;
  vertical-align: top;
}

.c18 {
  width: 22px;
  height: 22px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c20 {
  width: 18px;
  height: 18px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c22 {
  width: 16px;
  height: 16px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

@media all and ( -ms-high-contrast:none ),( -ms-high-contrast:active ) {
  .c16::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

<SnippetEditor
  baseUrl="https://example.org/"
  data={
    Object {
      "description": "Test description, %%replacement_variable%%",
      "slug": "test-slug",
      "title": "Test title",
    }
  }
  descriptionLengthAssessment={
    Object {
      "actual": 0,
      "max": 320,
      "score": 0,
    }
  }
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "textComponent": "span",
    }
  }
  mapDataToPreview={null}
  mode="mobile"
  onChange={[MockFunction]}
  replacementVariables={Array []}
  titleLengthAssessment={
    Object {
      "actual": 0,
      "max": 600,
      "score": 0,
    }
  }
>
  <div>
    <SnippetPreview
      activeField={null}
      breadcrumbs={null}
      date=""
      description="Test description, %%replacement_variable%%"
      hoveredField={null}
      isAmp={false}
      isDescriptionGenerated={false}
      keyword=""
      locale="en_US"
      mode="mobile"
      onClick={[Function]}
      onHover={[Function]}
      onMouseLeave={[Function]}
      onMouseOver={[Function]}
      title="Test title"
      url="example.org/test-slug"
    >
      <section>
        <SnippetPreview__MobileContainer
          padding={20}
          width={640}
        >
          <div
            className="c0"
            width={640}
          >
            <SnippetPreview__MobilePartContainer>
              <div
                className="c1"
              >
                <FormattedScreenReaderMessage
                  after=":"
                  defaultMessage="SEO title preview"
                  id="snippetPreview.seoTitlePreview"
                >
                  <FormattedMessage
                    after=":"
                    defaultMessage="SEO title preview"
                    id="snippetPreview.seoTitlePreview"
                    values={Object {}}
                  >
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        SEO title preview:
                      </span>
                    </ScreenReaderText>
                  </FormattedMessage>
                </FormattedScreenReaderMessage>
                <SnippetPreview__BaseTitle
                  onClick={[Function]}
                  onMouseLeave={[Function]}
                  onMouseOver={[Function]}
                >
                  <div
                    className="c2"
                    onClick={[Function]}
                    onMouseLeave={[Function]}
                    onMouseOver={[Function]}
                  >
                    <SnippetPreview__TitleBounded>
                      <SnippetPreview__Title
                        className="c3"
                      >
                        <div
                          className="c3 c4"
                        >
                          <SnippetPreview__TitleUnboundedMobile
                            innerRef={[Function]}
                          >
                            <span
                              className="c5"
                            >
                              Test title
                            </span>
                          </SnippetPreview__TitleUnboundedMobile>
                        </div>
                      </SnippetPreview__Title>
                    </SnippetPreview__TitleBounded>
                  </div>
                </SnippetPreview__BaseTitle>
                <FormattedScreenReaderMessage
                  after=":"
                  defaultMessage="Url preview"
                  id="snippetPreview.urlPreview"
                >
                  <FormattedMessage
                    after=":"
                    defaultMessage="Url preview"
                    id="snippetPreview.urlPreview"
                    values={Object {}}
                  >
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Url preview:
                      </span>
                    </ScreenReaderText>
                  </FormattedMessage>
                </FormattedScreenReaderMessage>
                <SnippetPreview__BaseUrl
                  onClick={[Function]}
                  onMouseLeave={[Function]}
                  onMouseOver={[Function]}
                >
                  <div
                    className="c6"
                    onClick={[Function]}
                    onMouseLeave={[Function]}
                    onMouseOver={[Function]}
                  >
                    example.org â€º test-slug
                  </div>
                </SnippetPreview__BaseUrl>
              </div>
            </SnippetPreview__MobilePartContainer>
            <SnippetPreview__Separator>
              <hr
                className="c7"
              />
            </SnippetPreview__Separator>
            <SnippetPreview__MobilePartContainer>
              <div
                className="c1"
              >
                <FormattedScreenReaderMessage
                  after=":"
                  defaultMessage="Meta description preview"
                  id="snippetPreview.metaDescriptionPreview"
                >
                  <FormattedMessage
                    after=":"
                    defaultMessage="Meta description preview"
                    id="snippetPreview.metaDescriptionPreview"
                    values={Object {}}
                  >
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Meta description preview:
                      </span>
                    </ScreenReaderText>
                  </FormattedMessage>
                </FormattedScreenReaderMessage>
                <SnippetPreview__MobileDescription
                  innerRef={[Function]}
                  isDescriptionGenerated={false}
                  onClick={[Function]}
                  onMouseLeave={[Function]}
                  onMouseOver={[Function]}
                >
                  <SnippetPreview__DesktopDescription
                    className="c8"
                    innerRef={[Function]}
                    isDescriptionGenerated={false}
                    onClick={[Function]}
                    onMouseLeave={[Function]}
                    onMouseOver={[Function]}
                  >
                    <div
                      className="c8 c9"
                      color="#545454"
                      onClick={[Function]}
                      onMouseLeave={[Function]}
                      onMouseOver={[Function]}
                    >
                      Test description, %%replacement_variable%%
                    </div>
                  </SnippetPreview__DesktopDescription>
                </SnippetPreview__MobileDescription>
              </div>
            </SnippetPreview__MobilePartContainer>
          </div>
        </SnippetPreview__MobileContainer>
      </section>
    </SnippetPreview>
    <ModeSwitcher
      active="mobile"
      onChange={[Function]}
    >
      <ModeSwitcher__Switcher>
        <div
          className="c10"
        >
          <ModeSwitcher__SwitcherButton
            aria-pressed={true}
            isActive={true}
            onClick={[Function]}
          >
            <Button
              aria-pressed={true}
              className="c11"
              isActive={true}
              onClick={[Function]}
            >
              <Button
                aria-pressed={true}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                className="c11 c12"
                isActive={true}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <Button
                  aria-pressed={true}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  className="c11 c12 Button-kDSBcD c13"
                  isActive={true}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <Button
                    aria-pressed={true}
                    backgroundColor="#f7f7f7"
                    borderColor="#ccc"
                    boxShadowColor="#ccc"
                    className="c11 c12 Button-kDSBcD c13 Button-kDSBcD c14"
                    isActive={true}
                    onClick={[Function]}
                    textColor="#555"
                    type="button"
                  >
                    <Button
                      aria-pressed={true}
                      backgroundColor="#f7f7f7"
                      borderColor="#ccc"
                      boxShadowColor="#ccc"
                      className="c11 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15"
                      isActive={true}
                      onClick={[Function]}
                      textColor="#555"
                      type="button"
                    >
                      <Button__BaseButton
                        aria-pressed={true}
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        className="c11 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16"
                        isActive={true}
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <button
                          aria-pressed={true}
                          className="c11 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 c17"
                          onClick={[Function]}
                          type="button"
                        >
                          <SvgIcon
                            color="currentColor"
                            icon="mobile"
                            size="22px"
                          >
                            <SvgIcon__StyledSvg
                              aria-hidden={true}
                              className="yoast-svg-icon yoast-svg-icon-mobile"
                              fill="currentColor"
                              focusable="false"
                              role="img"
                              size="22px"
                              viewBox="0 0 1792 1792"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <svg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-mobile c18"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="22px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
                                />
                              </svg>
                            </SvgIcon__StyledSvg>
                          </SvgIcon>
                          <FormattedScreenReaderMessage
                            defaultMessage="Mobile preview"
                            id="snippetEditor.desktopPreview"
                          >
                            <FormattedMessage
                              defaultMessage="Mobile preview"
                              id="snippetEditor.desktopPreview"
                              values={Object {}}
                            >
                              <ScreenReaderText>
                                <span
                                  className="screen-reader-text"
                                  style={
                                    Object {
                                      "clip": "rect(1px, 1px, 1px, 1px)",
                                      "height": "1px",
                                      "overflow": "hidden",
                                      "position": "absolute",
                                      "width": "1px",
                                    }
                                  }
                                >
                                  Mobile preview
                                </span>
                              </ScreenReaderText>
                            </FormattedMessage>
                          </FormattedScreenReaderMessage>
                        </button>
                      </Button__BaseButton>
                    </Button>
                  </Button>
                </Button>
              </Button>
            </Button>
          </ModeSwitcher__SwitcherButton>
          <ModeSwitcher__SwitcherButton
            aria-pressed={false}
            isActive={false}
            onClick={[Function]}
          >
            <Button
              aria-pressed={false}
              className="c19"
              isActive={false}
              onClick={[Function]}
            >
              <Button
                aria-pressed={false}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                className="c19 c12"
                isActive={false}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <Button
                  aria-pressed={false}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  className="c19 c12 Button-kDSBcD c13"
                  isActive={false}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <Button
                    aria-pressed={false}
                    backgroundColor="#f7f7f7"
                    borderColor="#ccc"
                    boxShadowColor="#ccc"
                    className="c19 c12 Button-kDSBcD c13 Button-kDSBcD c14"
                    isActive={false}
                    onClick={[Function]}
                    textColor="#555"
                    type="button"
                  >
                    <Button
                      aria-pressed={false}
                      backgroundColor="#f7f7f7"
                      borderColor="#ccc"
                      boxShadowColor="#ccc"
                      className="c19 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15"
                      isActive={false}
                      onClick={[Function]}
                      textColor="#555"
                      type="button"
                    >
                      <Button__BaseButton
                        aria-pressed={false}
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        className="c19 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16"
                        isActive={false}
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <button
                          aria-pressed={false}
                          className="c19 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 c17"
                          onClick={[Function]}
                          type="button"
                        >
                          <SvgIcon
                            color="currentColor"
                            icon="desktop"
                            size="18px"
                          >
                            <SvgIcon__StyledSvg
                              aria-hidden={true}
                              className="yoast-svg-icon yoast-svg-icon-desktop"
                              fill="currentColor"
                              focusable="false"
                              role="img"
                              size="18px"
                              viewBox="0 0 1792 1792"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <svg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-desktop c20"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="18px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
                                />
                              </svg>
                            </SvgIcon__StyledSvg>
                          </SvgIcon>
                          <FormattedScreenReaderMessage
                            defaultMessage="Desktop preview"
                            id="snippetEditor.desktopPreview"
                          >
                            <FormattedMessage
                              defaultMessage="Desktop preview"
                              id="snippetEditor.desktopPreview"
                              values={Object {}}
                            >
                              <ScreenReaderText>
                                <span
                                  className="screen-reader-text"
                                  style={
                                    Object {
                                      "clip": "rect(1px, 1px, 1px, 1px)",
                                      "height": "1px",
                                      "overflow": "hidden",
                                      "position": "absolute",
                                      "width": "1px",
                                    }
                                  }
                                >
                                  Desktop preview
                                </span>
                              </ScreenReaderText>
                            </FormattedMessage>
                          </FormattedScreenReaderMessage>
                        </button>
                      </Button__BaseButton>
                    </Button>
                  </Button>
                </Button>
              </Button>
            </Button>
          </ModeSwitcher__SwitcherButton>
        </div>
      </ModeSwitcher__Switcher>
    </ModeSwitcher>
    <Button
      aria-expanded={true}
      innerRef={[Function]}
      onClick={[Function]}
    >
      <Button
        aria-expanded={true}
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        className="c21"
        innerRef={[Function]}
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <Button
          aria-expanded={true}
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          className="c21 Button-kDSBcD c13"
          innerRef={[Function]}
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <Button
            aria-expanded={true}
            backgroundColor="#f7f7f7"
            borderColor="#ccc"
            boxShadowColor="#ccc"
            className="c21 Button-kDSBcD c13 Button-kDSBcD c14"
            innerRef={[Function]}
            onClick={[Function]}
            textColor="#555"
            type="button"
          >
            <Button
              aria-expanded={true}
              backgroundColor="#f7f7f7"
              borderColor="#ccc"
              boxShadowColor="#ccc"
              className="c21 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15"
              innerRef={[Function]}
              onClick={[Function]}
              textColor="#555"
              type="button"
            >
              <Button__BaseButton
                aria-expanded={true}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                className="c21 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16"
                innerRef={[Function]}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <button
                  aria-expanded={true}
                  className="c21 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 c17"
                  onClick={[Function]}
                  type="button"
                >
                  <SvgIcon
                    icon="edit"
                    size="16px"
                  >
                    <SvgIcon__StyledSvg
                      aria-hidden={true}
                      className="yoast-svg-icon yoast-svg-icon-edit"
                      focusable="false"
                      role="img"
                      size="16px"
                      viewBox="0 0 1792 1792"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <svg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-edit c22"
                        focusable="false"
                        role="img"
                        size="16px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
                        />
                      </svg>
                    </SvgIcon__StyledSvg>
                  </SvgIcon>
                  <FormattedMessage
                    defaultMessage="Edit snippet"
                    id="snippetEditor.editSnippet"
                    values={Object {}}
                  >
                    <span>
                      Edit snippet
                    </span>
                  </FormattedMessage>
                </button>
              </Button__BaseButton>
            </Button>
          </Button>
        </Button>
      </Button>
    </Button>
    <InjectIntl(SnippetEditorFields)
      activeField={null}
      data={
        Object {
          "description": "Test description, %%replacement_variable%%",
          "slug": "test-slug",
          "title": "Test title",
        }
      }
      descriptionLengthAssessment={
        Object {
          "actual": 0,
          "max": 320,
          "score": 0,
        }
      }
      hoveredField={null}
      onChange={[MockFunction]}
      onFocus={[Function]}
      replacementVariables={Array []}
      titleLengthAssessment={
        Object {
          "actual": 0,
          "max": 600,
          "score": 0,
        }
      }
    >
      <SnippetEditorFields
        activeField={null}
        data={
          Object {
            "description": "Test description, %%replacement_variable%%",
            "slug": "test-slug",
            "title": "Test title",
          }
        }
        descriptionLengthAssessment={
          Object {
            "actual": 0,
            "max": 320,
            "score": 0,
          }
        }
        hoveredField={null}
        intl={
          Object {
            "defaultFormats": Object {},
            "defaultLocale": "en",
            "formatDate": [Function],
            "formatHTMLMessage": [Function],
            "formatMessage": [Function],
            "formatNumber": [Function],
            "formatPlural": [Function],
            "formatRelative": [Function],
            "formatTime": [Function],
            "formats": Object {},
            "formatters": Object {
              "getDateTimeFormat": [Function],
              "getMessageFormat": [Function],
              "getNumberFormat": [Function],
              "getPluralFormat": [Function],
              "getRelativeFormat": [Function],
            },
            "locale": "en",
            "messages": Object {},
            "now": [Function],
            "textComponent": "span",
          }
        }
        onChange={[MockFunction]}
        onFocus={[Function]}
        replacementVariables={Array []}
        titleLengthAssessment={
          Object {
            "actual": 0,
            "max": 600,
            "score": 0,
          }
        }
      >
        <SnippetEditorFields__StyledEditor>
          <section
            className="c23"
          >
            <SnippetEditorFields__FormSection>
              <div
                className="c24"
              >
                <SnippetEditorFields__SimulatedLabel
                  id="snippet-editor-field-5-title"
                  onClick={[Function]}
                >
                  <div
                    className="c25"
                    id="snippet-editor-field-5-title"
                    onClick={[Function]}
                  >
                    SEO title
                  </div>
                </SnippetEditorFields__SimulatedLabel>
                <SnippetEditorFields__InputContainer
                  isActive={false}
                  isHovered={false}
                >
                  <div
                    className="c26"
                  >
                    <ReplacementVariableEditor
                      ariaLabelledBy="snippet-editor-field-5-title"
                      content="Test title"
                      onChange={[Function]}
                      onFocus={[Function]}
                      replacementVariables={Array []}
                    >
                      <div />
                    </ReplacementVariableEditor>
                  </div>
                </SnippetEditorFields__InputContainer>
                <ProgressBar
                  aria-hidden="true"
                  backgroundColor="#f7f7f7"
                  borderColor="#ddd"
                  max={600}
                  progressColor="#dc3232"
                  value={0}
                >
                  <progress
                    aria-hidden="true"
                    className="c27"
                    max={600}
                    value={0}
                  />
                </ProgressBar>
              </div>
            </SnippetEditorFields__FormSection>
            <SnippetEditorFields__FormSection>
              <div
                className="c24"
              >
                <SnippetEditorFields__SimulatedLabel
                  id="snippet-editor-field-5-slug"
                  onClick={[Function]}
                >
                  <div
                    className="c25"
                    id="snippet-editor-field-5-slug"
                    onClick={[Function]}
                  >
                    Slug
                  </div>
                </SnippetEditorFields__SimulatedLabel>
                <SnippetEditorFields__InputContainer
                  isActive={false}
                  isHovered={false}
                >
                  <div
                    className="c26"
                  >
                    <ReplacementVariableEditor
                      ariaLabelledBy="snippet-editor-field-5-slug"
                      content="test-slug"
                      onChange={[Function]}
                      onFocus={[Function]}
                      replacementVariables={Array []}
                    >
                      <div />
                    </ReplacementVariableEditor>
                  </div>
                </SnippetEditorFields__InputContainer>
              </div>
            </SnippetEditorFields__FormSection>
            <SnippetEditorFields__FormSection>
              <div
                className="c24"
              >
                <SnippetEditorFields__SimulatedLabel
                  id="snippet-editor-field-5-description"
                  onClick={[Function]}
                >
                  <div
                    className="c25"
                    id="snippet-editor-field-5-description"
                    onClick={[Function]}
                  >
                    Meta description
                  </div>
                </SnippetEditorFields__SimulatedLabel>
                <SnippetEditorFields__InputContainer
                  isActive={false}
                  isHovered={false}
                >
                  <div
                    className="c28"
                  >
                    <ReplacementVariableEditor
                      ariaLabelledBy="snippet-editor-field-5-description"
                      content="Test description, %%replacement_variable%%"
                      onChange={[Function]}
                      onFocus={[Function]}
                      replacementVariables={Array []}
                    >
                      <div />
                    </ReplacementVariableEditor>
                  </div>
                </SnippetEditorFields__InputContainer>
                <ProgressBar
                  aria-hidden="true"
                  backgroundColor="#f7f7f7"
                  borderColor="#ddd"
                  max={320}
                  progressColor="#dc3232"
                  value={0}
                >
                  <progress
                    aria-hidden="true"
                    className="c27"
                    max={320}
                    value={0}
                  />
                </ProgressBar>
              </div>
            </SnippetEditorFields__FormSection>
          </section>
        </SnippetEditorFields__StyledEditor>
      </SnippetEditorFields>
    </InjectIntl(SnippetEditorFields)>
    <Button
      onClick={[Function]}
    >
      <Button
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        className="c29"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <Button
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          className="c29 Button-kDSBcD c13"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <Button
            backgroundColor="#f7f7f7"
            borderColor="#ccc"
            boxShadowColor="#ccc"
            className="c29 Button-kDSBcD c13 Button-kDSBcD c14"
            onClick={[Function]}
            textColor="#555"
            type="button"
          >
            <Button
              backgroundColor="#f7f7f7"
              borderColor="#ccc"
              boxShadowColor="#ccc"
              className="c29 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15"
              onClick={[Function]}
              textColor="#555"
              type="button"
            >
              <Button__BaseButton
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                className="c29 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16"
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <button
                  className="c29 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 c17"
                  onClick={[Function]}
                  type="button"
                >
                  <FormattedMessage
                    defaultMessage="Close snippet editor"
                    id="snippet-editor.close-editor"
                    values={Object {}}
                  >
                    <span>
                      Close snippet editor
                    </span>
                  </FormattedMessage>
                </button>
              </Button__BaseButton>
            </Button>
          </Button>
        </Button>
      </Button>
    </Button>
  </div>
</SnippetEditor>
`;

exports[`SnippetEditor closes when calling close() 1`] = `
.c0 {
  border-bottom: 1px hidden #fff;
  border-radius: 2px;
  box-shadow: 0 1px 2px rgba(0,0,0,.2);
  margin: 0 20px 10px;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  max-width: 600px;
  box-sizing: border-box;
  font-size: 14px;
}

.c2 {
  cursor: pointer;
  position: relative;
}

.c4 {
  color: #1e0fbe;
  text-decoration: none;
  font-size: 18px;
  line-height: 1.2;
  font-weight: normal;
  margin: 0;
  display: inline-block;
  overflow: hidden;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c3 {
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c5 {
  display: inline-block;
  line-height: 1.2em;
  max-height: 2.4em;
  overflow: hidden;
  text-overflow: ellipsis;
  font-size: 16px;
}

.c6 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
}

.c9 {
  color: #545454;
  cursor: pointer;
  position: relative;
  max-width: 600px;
  font-size: 13px;
}

.c8 {
  max-height: 4em;
  overflow: hidden;
  font-size: 14px;
  line-height: 20px;
}

.c1 {
  padding: 8px 16px;
}

.c7 {
  border: 0;
  border-bottom: 1px solid #DFE1E5;
  margin: 0;
}

.c27 {
  box-sizing: border-box;
  width: 100%;
  height: 8px;
  display: block;
  margin-top: 8px;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background-color: #f7f7f7;
  border: 1px solid #ddd;
}

.c27::-webkit-progress-bar {
  background-color: #f7f7f7;
}

.c27::-webkit-progress-value {
  background-color: #dc3232;
  -webkit-transition: width 250ms;
  transition: width 250ms;
}

.c27::-moz-progress-bar {
  background-color: #dc3232;
}

.c27::-ms-fill {
  background-color: #dc3232;
  border: 0;
}

.c26 {
  padding: 3px 5px;
  border: 1px solid #ddd;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  margin-top: 5px;
}

.c26::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width=%221792%22%20height=%221792%22%20viewBox=%220%200%201792%201792%22%20xmlns=%22http://www.w3.org/2000/svg%22%3E%3Cpath%20fill=%22transparent%22%20d=%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20/%3E%3C/svg%3E);
  background-size: 25px;
  content: "";
}

.c28 {
  padding: 3px 5px;
  border: 1px solid #ddd;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  margin-top: 5px;
  min-height: 60px;
  padding: 2px 6px;
  line-height: 19.6px;
}

.c28::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width=%221792%22%20height=%221792%22%20viewBox=%220%200%201792%201792%22%20xmlns=%22http://www.w3.org/2000/svg%22%3E%3Cpath%20fill=%22transparent%22%20d=%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20/%3E%3C/svg%3E);
  background-size: 25px;
  content: "";
}

.c24 {
  margin: 32px 0;
}

.c23 {
  padding: 10px 20px 20px 20px;
}

.c25 {
  cursor: pointer;
  font-size: 16px;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
}

.c17 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
}

.c12 {
  font-size: 0.8rem;
}

.c13:active {
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c14:hover {
  color: #000;
}

.c15::-moz-focus-inner {
  border-width: 0;
}

.c15:focus {
  outline: none;
  border-color: #0066cd;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c16 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
}

.c16 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c21 {
  font-size: 0.8rem;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin: 10px 0 0 4px;
  fill: #555;
  padding-left: 8px;
}

.c21 svg {
  margin-right: 7px;
}

.c29 {
  font-size: 0.8rem;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin-left: 20px;
}

.c11 {
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: #555;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 3px 0 0 3px;
}

.c11:hover,
.c11:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
}

.c19 {
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: transparent;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 0 3px 3px 0;
}

.c19:hover,
.c19:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
}

.c10 {
  display: inline-block;
  margin-top: 10px;
  margin-left: 20px;
  border: 1px solid #dbdbdb;
  border-radius: 4px;
  background-color: #f7f7f7;
  vertical-align: top;
}

.c18 {
  width: 22px;
  height: 22px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c20 {
  width: 18px;
  height: 18px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c22 {
  width: 16px;
  height: 16px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

@media all and ( -ms-high-contrast:none ),( -ms-high-contrast:active ) {
  .c16::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

<SnippetEditor
  baseUrl="https://example.org/"
  data={
    Object {
      "description": "Test description, %%replacement_variable%%",
      "slug": "test-slug",
      "title": "Test title",
    }
  }
  descriptionLengthAssessment={
    Object {
      "actual": 0,
      "max": 320,
      "score": 0,
    }
  }
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "textComponent": "span",
    }
  }
  mapDataToPreview={null}
  mode="mobile"
  onChange={[Function]}
  replacementVariables={Array []}
  titleLengthAssessment={
    Object {
      "actual": 0,
      "max": 600,
      "score": 0,
    }
  }
>
  <div>
    <SnippetPreview
      activeField={null}
      breadcrumbs={null}
      date=""
      description="Test description, %%replacement_variable%%"
      hoveredField={null}
      isAmp={false}
      isDescriptionGenerated={false}
      keyword=""
      locale="en_US"
      mode="mobile"
      onClick={[Function]}
      onHover={[Function]}
      onMouseLeave={[Function]}
      onMouseOver={[Function]}
      title="Test title"
      url="example.org/test-slug"
    >
      <section>
        <SnippetPreview__MobileContainer
          padding={20}
          width={640}
        >
          <div
            className="c0"
            width={640}
          >
            <SnippetPreview__MobilePartContainer>
              <div
                className="c1"
              >
                <FormattedScreenReaderMessage
                  after=":"
                  defaultMessage="SEO title preview"
                  id="snippetPreview.seoTitlePreview"
                >
                  <FormattedMessage
                    after=":"
                    defaultMessage="SEO title preview"
                    id="snippetPreview.seoTitlePreview"
                    values={Object {}}
                  >
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        SEO title preview:
                      </span>
                    </ScreenReaderText>
                  </FormattedMessage>
                </FormattedScreenReaderMessage>
                <SnippetPreview__BaseTitle
                  onClick={[Function]}
                  onMouseLeave={[Function]}
                  onMouseOver={[Function]}
                >
                  <div
                    className="c2"
                    onClick={[Function]}
                    onMouseLeave={[Function]}
                    onMouseOver={[Function]}
                  >
                    <SnippetPreview__TitleBounded>
                      <SnippetPreview__Title
                        className="c3"
                      >
                        <div
                          className="c3 c4"
                        >
                          <SnippetPreview__TitleUnboundedMobile
                            innerRef={[Function]}
                          >
                            <span
                              className="c5"
                            >
                              Test title
                            </span>
                          </SnippetPreview__TitleUnboundedMobile>
                        </div>
                      </SnippetPreview__Title>
                    </SnippetPreview__TitleBounded>
                  </div>
                </SnippetPreview__BaseTitle>
                <FormattedScreenReaderMessage
                  after=":"
                  defaultMessage="Url preview"
                  id="snippetPreview.urlPreview"
                >
                  <FormattedMessage
                    after=":"
                    defaultMessage="Url preview"
                    id="snippetPreview.urlPreview"
                    values={Object {}}
                  >
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Url preview:
                      </span>
                    </ScreenReaderText>
                  </FormattedMessage>
                </FormattedScreenReaderMessage>
                <SnippetPreview__BaseUrl
                  onClick={[Function]}
                  onMouseLeave={[Function]}
                  onMouseOver={[Function]}
                >
                  <div
                    className="c6"
                    onClick={[Function]}
                    onMouseLeave={[Function]}
                    onMouseOver={[Function]}
                  >
                    example.org â€º test-slug
                  </div>
                </SnippetPreview__BaseUrl>
              </div>
            </SnippetPreview__MobilePartContainer>
            <SnippetPreview__Separator>
              <hr
                className="c7"
              />
            </SnippetPreview__Separator>
            <SnippetPreview__MobilePartContainer>
              <div
                className="c1"
              >
                <FormattedScreenReaderMessage
                  after=":"
                  defaultMessage="Meta description preview"
                  id="snippetPreview.metaDescriptionPreview"
                >
                  <FormattedMessage
                    after=":"
                    defaultMessage="Meta description preview"
                    id="snippetPreview.metaDescriptionPreview"
                    values={Object {}}
                  >
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Meta description preview:
                      </span>
                    </ScreenReaderText>
                  </FormattedMessage>
                </FormattedScreenReaderMessage>
                <SnippetPreview__MobileDescription
                  innerRef={[Function]}
                  isDescriptionGenerated={false}
                  onClick={[Function]}
                  onMouseLeave={[Function]}
                  onMouseOver={[Function]}
                >
                  <SnippetPreview__DesktopDescription
                    className="c8"
                    innerRef={[Function]}
                    isDescriptionGenerated={false}
                    onClick={[Function]}
                    onMouseLeave={[Function]}
                    onMouseOver={[Function]}
                  >
                    <div
                      className="c8 c9"
                      color="#545454"
                      onClick={[Function]}
                      onMouseLeave={[Function]}
                      onMouseOver={[Function]}
                    >
                      Test description, %%replacement_variable%%
                    </div>
                  </SnippetPreview__DesktopDescription>
                </SnippetPreview__MobileDescription>
              </div>
            </SnippetPreview__MobilePartContainer>
          </div>
        </SnippetPreview__MobileContainer>
      </section>
    </SnippetPreview>
    <ModeSwitcher
      active="mobile"
      onChange={[Function]}
    >
      <ModeSwitcher__Switcher>
        <div
          className="c10"
        >
          <ModeSwitcher__SwitcherButton
            aria-pressed={true}
            isActive={true}
            onClick={[Function]}
          >
            <Button
              aria-pressed={true}
              className="c11"
              isActive={true}
              onClick={[Function]}
            >
              <Button
                aria-pressed={true}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                className="c11 c12"
                isActive={true}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <Button
                  aria-pressed={true}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  className="c11 c12 Button-kDSBcD c13"
                  isActive={true}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <Button
                    aria-pressed={true}
                    backgroundColor="#f7f7f7"
                    borderColor="#ccc"
                    boxShadowColor="#ccc"
                    className="c11 c12 Button-kDSBcD c13 Button-kDSBcD c14"
                    isActive={true}
                    onClick={[Function]}
                    textColor="#555"
                    type="button"
                  >
                    <Button
                      aria-pressed={true}
                      backgroundColor="#f7f7f7"
                      borderColor="#ccc"
                      boxShadowColor="#ccc"
                      className="c11 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15"
                      isActive={true}
                      onClick={[Function]}
                      textColor="#555"
                      type="button"
                    >
                      <Button__BaseButton
                        aria-pressed={true}
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        className="c11 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16"
                        isActive={true}
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <button
                          aria-pressed={true}
                          className="c11 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 c17"
                          onClick={[Function]}
                          type="button"
                        >
                          <SvgIcon
                            color="currentColor"
                            icon="mobile"
                            size="22px"
                          >
                            <SvgIcon__StyledSvg
                              aria-hidden={true}
                              className="yoast-svg-icon yoast-svg-icon-mobile"
                              fill="currentColor"
                              focusable="false"
                              role="img"
                              size="22px"
                              viewBox="0 0 1792 1792"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <svg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-mobile c18"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="22px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
                                />
                              </svg>
                            </SvgIcon__StyledSvg>
                          </SvgIcon>
                          <FormattedScreenReaderMessage
                            defaultMessage="Mobile preview"
                            id="snippetEditor.desktopPreview"
                          >
                            <FormattedMessage
                              defaultMessage="Mobile preview"
                              id="snippetEditor.desktopPreview"
                              values={Object {}}
                            >
                              <ScreenReaderText>
                                <span
                                  className="screen-reader-text"
                                  style={
                                    Object {
                                      "clip": "rect(1px, 1px, 1px, 1px)",
                                      "height": "1px",
                                      "overflow": "hidden",
                                      "position": "absolute",
                                      "width": "1px",
                                    }
                                  }
                                >
                                  Mobile preview
                                </span>
                              </ScreenReaderText>
                            </FormattedMessage>
                          </FormattedScreenReaderMessage>
                        </button>
                      </Button__BaseButton>
                    </Button>
                  </Button>
                </Button>
              </Button>
            </Button>
          </ModeSwitcher__SwitcherButton>
          <ModeSwitcher__SwitcherButton
            aria-pressed={false}
            isActive={false}
            onClick={[Function]}
          >
            <Button
              aria-pressed={false}
              className="c19"
              isActive={false}
              onClick={[Function]}
            >
              <Button
                aria-pressed={false}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                className="c19 c12"
                isActive={false}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <Button
                  aria-pressed={false}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  className="c19 c12 Button-kDSBcD c13"
                  isActive={false}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <Button
                    aria-pressed={false}
                    backgroundColor="#f7f7f7"
                    borderColor="#ccc"
                    boxShadowColor="#ccc"
                    className="c19 c12 Button-kDSBcD c13 Button-kDSBcD c14"
                    isActive={false}
                    onClick={[Function]}
                    textColor="#555"
                    type="button"
                  >
                    <Button
                      aria-pressed={false}
                      backgroundColor="#f7f7f7"
                      borderColor="#ccc"
                      boxShadowColor="#ccc"
                      className="c19 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15"
                      isActive={false}
                      onClick={[Function]}
                      textColor="#555"
                      type="button"
                    >
                      <Button__BaseButton
                        aria-pressed={false}
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        className="c19 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16"
                        isActive={false}
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <button
                          aria-pressed={false}
                          className="c19 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 c17"
                          onClick={[Function]}
                          type="button"
                        >
                          <SvgIcon
                            color="currentColor"
                            icon="desktop"
                            size="18px"
                          >
                            <SvgIcon__StyledSvg
                              aria-hidden={true}
                              className="yoast-svg-icon yoast-svg-icon-desktop"
                              fill="currentColor"
                              focusable="false"
                              role="img"
                              size="18px"
                              viewBox="0 0 1792 1792"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <svg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-desktop c20"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="18px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
                                />
                              </svg>
                            </SvgIcon__StyledSvg>
                          </SvgIcon>
                          <FormattedScreenReaderMessage
                            defaultMessage="Desktop preview"
                            id="snippetEditor.desktopPreview"
                          >
                            <FormattedMessage
                              defaultMessage="Desktop preview"
                              id="snippetEditor.desktopPreview"
                              values={Object {}}
                            >
                              <ScreenReaderText>
                                <span
                                  className="screen-reader-text"
                                  style={
                                    Object {
                                      "clip": "rect(1px, 1px, 1px, 1px)",
                                      "height": "1px",
                                      "overflow": "hidden",
                                      "position": "absolute",
                                      "width": "1px",
                                    }
                                  }
                                >
                                  Desktop preview
                                </span>
                              </ScreenReaderText>
                            </FormattedMessage>
                          </FormattedScreenReaderMessage>
                        </button>
                      </Button__BaseButton>
                    </Button>
                  </Button>
                </Button>
              </Button>
            </Button>
          </ModeSwitcher__SwitcherButton>
        </div>
      </ModeSwitcher__Switcher>
    </ModeSwitcher>
    <Button
      aria-expanded={true}
      innerRef={[Function]}
      onClick={[Function]}
    >
      <Button
        aria-expanded={true}
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        className="c21"
        innerRef={[Function]}
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <Button
          aria-expanded={true}
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          className="c21 Button-kDSBcD c13"
          innerRef={[Function]}
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <Button
            aria-expanded={true}
            backgroundColor="#f7f7f7"
            borderColor="#ccc"
            boxShadowColor="#ccc"
            className="c21 Button-kDSBcD c13 Button-kDSBcD c14"
            innerRef={[Function]}
            onClick={[Function]}
            textColor="#555"
            type="button"
          >
            <Button
              aria-expanded={true}
              backgroundColor="#f7f7f7"
              borderColor="#ccc"
              boxShadowColor="#ccc"
              className="c21 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15"
              innerRef={[Function]}
              onClick={[Function]}
              textColor="#555"
              type="button"
            >
              <Button__BaseButton
                aria-expanded={true}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                className="c21 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16"
                innerRef={[Function]}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <button
                  aria-expanded={true}
                  className="c21 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 c17"
                  onClick={[Function]}
                  type="button"
                >
                  <SvgIcon
                    icon="edit"
                    size="16px"
                  >
                    <SvgIcon__StyledSvg
                      aria-hidden={true}
                      className="yoast-svg-icon yoast-svg-icon-edit"
                      focusable="false"
                      role="img"
                      size="16px"
                      viewBox="0 0 1792 1792"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <svg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-edit c22"
                        focusable="false"
                        role="img"
                        size="16px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
                        />
                      </svg>
                    </SvgIcon__StyledSvg>
                  </SvgIcon>
                  <FormattedMessage
                    defaultMessage="Edit snippet"
                    id="snippetEditor.editSnippet"
                    values={Object {}}
                  >
                    <span>
                      Edit snippet
                    </span>
                  </FormattedMessage>
                </button>
              </Button__BaseButton>
            </Button>
          </Button>
        </Button>
      </Button>
    </Button>
    <InjectIntl(SnippetEditorFields)
      activeField={null}
      data={
        Object {
          "description": "Test description, %%replacement_variable%%",
          "slug": "test-slug",
          "title": "Test title",
        }
      }
      descriptionLengthAssessment={
        Object {
          "actual": 0,
          "max": 320,
          "score": 0,
        }
      }
      hoveredField={null}
      onChange={[Function]}
      onFocus={[Function]}
      replacementVariables={Array []}
      titleLengthAssessment={
        Object {
          "actual": 0,
          "max": 600,
          "score": 0,
        }
      }
    >
      <SnippetEditorFields
        activeField={null}
        data={
          Object {
            "description": "Test description, %%replacement_variable%%",
            "slug": "test-slug",
            "title": "Test title",
          }
        }
        descriptionLengthAssessment={
          Object {
            "actual": 0,
            "max": 320,
            "score": 0,
          }
        }
        hoveredField={null}
        intl={
          Object {
            "defaultFormats": Object {},
            "defaultLocale": "en",
            "formatDate": [Function],
            "formatHTMLMessage": [Function],
            "formatMessage": [Function],
            "formatNumber": [Function],
            "formatPlural": [Function],
            "formatRelative": [Function],
            "formatTime": [Function],
            "formats": Object {},
            "formatters": Object {
              "getDateTimeFormat": [Function],
              "getMessageFormat": [Function],
              "getNumberFormat": [Function],
              "getPluralFormat": [Function],
              "getRelativeFormat": [Function],
            },
            "locale": "en",
            "messages": Object {},
            "now": [Function],
            "textComponent": "span",
          }
        }
        onChange={[Function]}
        onFocus={[Function]}
        replacementVariables={Array []}
        titleLengthAssessment={
          Object {
            "actual": 0,
            "max": 600,
            "score": 0,
          }
        }
      >
        <SnippetEditorFields__StyledEditor>
          <section
            className="c23"
          >
            <SnippetEditorFields__FormSection>
              <div
                className="c24"
              >
                <SnippetEditorFields__SimulatedLabel
                  id="snippet-editor-field-2-title"
                  onClick={[Function]}
                >
                  <div
                    className="c25"
                    id="snippet-editor-field-2-title"
                    onClick={[Function]}
                  >
                    SEO title
                  </div>
                </SnippetEditorFields__SimulatedLabel>
                <SnippetEditorFields__InputContainer
                  isActive={false}
                  isHovered={false}
                >
                  <div
                    className="c26"
                  >
                    <ReplacementVariableEditor
                      ariaLabelledBy="snippet-editor-field-2-title"
                      content="Test title"
                      onChange={[Function]}
                      onFocus={[Function]}
                      replacementVariables={Array []}
                    >
                      <div />
                    </ReplacementVariableEditor>
                  </div>
                </SnippetEditorFields__InputContainer>
                <ProgressBar
                  aria-hidden="true"
                  backgroundColor="#f7f7f7"
                  borderColor="#ddd"
                  max={600}
                  progressColor="#dc3232"
                  value={0}
                >
                  <progress
                    aria-hidden="true"
                    className="c27"
                    max={600}
                    value={0}
                  />
                </ProgressBar>
              </div>
            </SnippetEditorFields__FormSection>
            <SnippetEditorFields__FormSection>
              <div
                className="c24"
              >
                <SnippetEditorFields__SimulatedLabel
                  id="snippet-editor-field-2-slug"
                  onClick={[Function]}
                >
                  <div
                    className="c25"
                    id="snippet-editor-field-2-slug"
                    onClick={[Function]}
                  >
                    Slug
                  </div>
                </SnippetEditorFields__SimulatedLabel>
                <SnippetEditorFields__InputContainer
                  isActive={false}
                  isHovered={false}
                >
                  <div
                    className="c26"
                  >
                    <ReplacementVariableEditor
                      ariaLabelledBy="snippet-editor-field-2-slug"
                      content="test-slug"
                      onChange={[Function]}
                      onFocus={[Function]}
                      replacementVariables={Array []}
                    >
                      <div />
                    </ReplacementVariableEditor>
                  </div>
                </SnippetEditorFields__InputContainer>
              </div>
            </SnippetEditorFields__FormSection>
            <SnippetEditorFields__FormSection>
              <div
                className="c24"
              >
                <SnippetEditorFields__SimulatedLabel
                  id="snippet-editor-field-2-description"
                  onClick={[Function]}
                >
                  <div
                    className="c25"
                    id="snippet-editor-field-2-description"
                    onClick={[Function]}
                  >
                    Meta description
                  </div>
                </SnippetEditorFields__SimulatedLabel>
                <SnippetEditorFields__InputContainer
                  isActive={false}
                  isHovered={false}
                >
                  <div
                    className="c28"
                  >
                    <ReplacementVariableEditor
                      ariaLabelledBy="snippet-editor-field-2-description"
                      content="Test description, %%replacement_variable%%"
                      onChange={[Function]}
                      onFocus={[Function]}
                      replacementVariables={Array []}
                    >
                      <div />
                    </ReplacementVariableEditor>
                  </div>
                </SnippetEditorFields__InputContainer>
                <ProgressBar
                  aria-hidden="true"
                  backgroundColor="#f7f7f7"
                  borderColor="#ddd"
                  max={320}
                  progressColor="#dc3232"
                  value={0}
                >
                  <progress
                    aria-hidden="true"
                    className="c27"
                    max={320}
                    value={0}
                  />
                </ProgressBar>
              </div>
            </SnippetEditorFields__FormSection>
          </section>
        </SnippetEditorFields__StyledEditor>
      </SnippetEditorFields>
    </InjectIntl(SnippetEditorFields)>
    <Button
      onClick={[Function]}
    >
      <Button
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        className="c29"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <Button
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          className="c29 Button-kDSBcD c13"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <Button
            backgroundColor="#f7f7f7"
            borderColor="#ccc"
            boxShadowColor="#ccc"
            className="c29 Button-kDSBcD c13 Button-kDSBcD c14"
            onClick={[Function]}
            textColor="#555"
            type="button"
          >
            <Button
              backgroundColor="#f7f7f7"
              borderColor="#ccc"
              boxShadowColor="#ccc"
              className="c29 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15"
              onClick={[Function]}
              textColor="#555"
              type="button"
            >
              <Button__BaseButton
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                className="c29 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16"
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <button
                  className="c29 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 c17"
                  onClick={[Function]}
                  type="button"
                >
                  <FormattedMessage
                    defaultMessage="Close snippet editor"
                    id="snippet-editor.close-editor"
                    values={Object {}}
                  >
                    <span>
                      Close snippet editor
                    </span>
                  </FormattedMessage>
                </button>
              </Button__BaseButton>
            </Button>
          </Button>
        </Button>
      </Button>
    </Button>
  </div>
</SnippetEditor>
`;

exports[`SnippetEditor closes when calling close() 2`] = `
.c0 {
  border-bottom: 1px hidden #fff;
  border-radius: 2px;
  box-shadow: 0 1px 2px rgba(0,0,0,.2);
  margin: 0 20px 10px;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  max-width: 600px;
  box-sizing: border-box;
  font-size: 14px;
}

.c2 {
  cursor: pointer;
  position: relative;
}

.c4 {
  color: #1e0fbe;
  text-decoration: none;
  font-size: 18px;
  line-height: 1.2;
  font-weight: normal;
  margin: 0;
  display: inline-block;
  overflow: hidden;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c3 {
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c5 {
  display: inline-block;
  line-height: 1.2em;
  max-height: 2.4em;
  overflow: hidden;
  text-overflow: ellipsis;
  font-size: 16px;
}

.c6 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
}

.c9 {
  color: #545454;
  cursor: pointer;
  position: relative;
  max-width: 600px;
  font-size: 13px;
}

.c8 {
  max-height: 4em;
  overflow: hidden;
  font-size: 14px;
  line-height: 20px;
}

.c1 {
  padding: 8px 16px;
}

.c7 {
  border: 0;
  border-bottom: 1px solid #DFE1E5;
  margin: 0;
}

.c17 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
}

.c12 {
  font-size: 0.8rem;
}

.c13:active {
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c14:hover {
  color: #000;
}

.c15::-moz-focus-inner {
  border-width: 0;
}

.c15:focus {
  outline: none;
  border-color: #0066cd;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c16 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
}

.c16 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c21 {
  font-size: 0.8rem;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin: 10px 0 0 4px;
  fill: #555;
  padding-left: 8px;
}

.c21 svg {
  margin-right: 7px;
}

.c11 {
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: #555;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 3px 0 0 3px;
}

.c11:hover,
.c11:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
}

.c19 {
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: transparent;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 0 3px 3px 0;
}

.c19:hover,
.c19:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
}

.c10 {
  display: inline-block;
  margin-top: 10px;
  margin-left: 20px;
  border: 1px solid #dbdbdb;
  border-radius: 4px;
  background-color: #f7f7f7;
  vertical-align: top;
}

.c18 {
  width: 22px;
  height: 22px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c20 {
  width: 18px;
  height: 18px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c22 {
  width: 16px;
  height: 16px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

@media all and ( -ms-high-contrast:none ),( -ms-high-contrast:active ) {
  .c16::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

<SnippetEditor
  baseUrl="https://example.org/"
  data={
    Object {
      "description": "Test description, %%replacement_variable%%",
      "slug": "test-slug",
      "title": "Test title",
    }
  }
  descriptionLengthAssessment={
    Object {
      "actual": 0,
      "max": 320,
      "score": 0,
    }
  }
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "textComponent": "span",
    }
  }
  mapDataToPreview={null}
  mode="mobile"
  onChange={[Function]}
  replacementVariables={Array []}
  titleLengthAssessment={
    Object {
      "actual": 0,
      "max": 600,
      "score": 0,
    }
  }
>
  <div>
    <SnippetPreview
      activeField={null}
      breadcrumbs={null}
      date=""
      description="Test description, %%replacement_variable%%"
      hoveredField={null}
      isAmp={false}
      isDescriptionGenerated={false}
      keyword=""
      locale="en_US"
      mode="mobile"
      onClick={[Function]}
      onHover={[Function]}
      onMouseLeave={[Function]}
      onMouseOver={[Function]}
      title="Test title"
      url="example.org/test-slug"
    >
      <section>
        <SnippetPreview__MobileContainer
          padding={20}
          width={640}
        >
          <div
            className="c0"
            width={640}
          >
            <SnippetPreview__MobilePartContainer>
              <div
                className="c1"
              >
                <FormattedScreenReaderMessage
                  after=":"
                  defaultMessage="SEO title preview"
                  id="snippetPreview.seoTitlePreview"
                >
                  <FormattedMessage
                    after=":"
                    defaultMessage="SEO title preview"
                    id="snippetPreview.seoTitlePreview"
                    values={Object {}}
                  >
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        SEO title preview:
                      </span>
                    </ScreenReaderText>
                  </FormattedMessage>
                </FormattedScreenReaderMessage>
                <SnippetPreview__BaseTitle
                  onClick={[Function]}
                  onMouseLeave={[Function]}
                  onMouseOver={[Function]}
                >
                  <div
                    className="c2"
                    onClick={[Function]}
                    onMouseLeave={[Function]}
                    onMouseOver={[Function]}
                  >
                    <SnippetPreview__TitleBounded>
                      <SnippetPreview__Title
                        className="c3"
                      >
                        <div
                          className="c3 c4"
                        >
                          <SnippetPreview__TitleUnboundedMobile
                            innerRef={[Function]}
                          >
                            <span
                              className="c5"
                            >
                              Test title
                            </span>
                          </SnippetPreview__TitleUnboundedMobile>
                        </div>
                      </SnippetPreview__Title>
                    </SnippetPreview__TitleBounded>
                  </div>
                </SnippetPreview__BaseTitle>
                <FormattedScreenReaderMessage
                  after=":"
                  defaultMessage="Url preview"
                  id="snippetPreview.urlPreview"
                >
                  <FormattedMessage
                    after=":"
                    defaultMessage="Url preview"
                    id="snippetPreview.urlPreview"
                    values={Object {}}
                  >
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Url preview:
                      </span>
                    </ScreenReaderText>
                  </FormattedMessage>
                </FormattedScreenReaderMessage>
                <SnippetPreview__BaseUrl
                  onClick={[Function]}
                  onMouseLeave={[Function]}
                  onMouseOver={[Function]}
                >
                  <div
                    className="c6"
                    onClick={[Function]}
                    onMouseLeave={[Function]}
                    onMouseOver={[Function]}
                  >
                    example.org â€º test-slug
                  </div>
                </SnippetPreview__BaseUrl>
              </div>
            </SnippetPreview__MobilePartContainer>
            <SnippetPreview__Separator>
              <hr
                className="c7"
              />
            </SnippetPreview__Separator>
            <SnippetPreview__MobilePartContainer>
              <div
                className="c1"
              >
                <FormattedScreenReaderMessage
                  after=":"
                  defaultMessage="Meta description preview"
                  id="snippetPreview.metaDescriptionPreview"
                >
                  <FormattedMessage
                    after=":"
                    defaultMessage="Meta description preview"
                    id="snippetPreview.metaDescriptionPreview"
                    values={Object {}}
                  >
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Meta description preview:
                      </span>
                    </ScreenReaderText>
                  </FormattedMessage>
                </FormattedScreenReaderMessage>
                <SnippetPreview__MobileDescription
                  innerRef={[Function]}
                  isDescriptionGenerated={false}
                  onClick={[Function]}
                  onMouseLeave={[Function]}
                  onMouseOver={[Function]}
                >
                  <SnippetPreview__DesktopDescription
                    className="c8"
                    innerRef={[Function]}
                    isDescriptionGenerated={false}
                    onClick={[Function]}
                    onMouseLeave={[Function]}
                    onMouseOver={[Function]}
                  >
                    <div
                      className="c8 c9"
                      color="#545454"
                      onClick={[Function]}
                      onMouseLeave={[Function]}
                      onMouseOver={[Function]}
                    >
                      Test description, %%replacement_variable%%
                    </div>
                  </SnippetPreview__DesktopDescription>
                </SnippetPreview__MobileDescription>
              </div>
            </SnippetPreview__MobilePartContainer>
          </div>
        </SnippetPreview__MobileContainer>
      </section>
    </SnippetPreview>
    <ModeSwitcher
      active="mobile"
      onChange={[Function]}
    >
      <ModeSwitcher__Switcher>
        <div
          className="c10"
        >
          <ModeSwitcher__SwitcherButton
            aria-pressed={true}
            isActive={true}
            onClick={[Function]}
          >
            <Button
              aria-pressed={true}
              className="c11"
              isActive={true}
              onClick={[Function]}
            >
              <Button
                aria-pressed={true}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                className="c11 c12"
                isActive={true}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <Button
                  aria-pressed={true}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  className="c11 c12 Button-kDSBcD c13"
                  isActive={true}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <Button
                    aria-pressed={true}
                    backgroundColor="#f7f7f7"
                    borderColor="#ccc"
                    boxShadowColor="#ccc"
                    className="c11 c12 Button-kDSBcD c13 Button-kDSBcD c14"
                    isActive={true}
                    onClick={[Function]}
                    textColor="#555"
                    type="button"
                  >
                    <Button
                      aria-pressed={true}
                      backgroundColor="#f7f7f7"
                      borderColor="#ccc"
                      boxShadowColor="#ccc"
                      className="c11 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15"
                      isActive={true}
                      onClick={[Function]}
                      textColor="#555"
                      type="button"
                    >
                      <Button__BaseButton
                        aria-pressed={true}
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        className="c11 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16"
                        isActive={true}
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <button
                          aria-pressed={true}
                          className="c11 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 c17"
                          onClick={[Function]}
                          type="button"
                        >
                          <SvgIcon
                            color="currentColor"
                            icon="mobile"
                            size="22px"
                          >
                            <SvgIcon__StyledSvg
                              aria-hidden={true}
                              className="yoast-svg-icon yoast-svg-icon-mobile"
                              fill="currentColor"
                              focusable="false"
                              role="img"
                              size="22px"
                              viewBox="0 0 1792 1792"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <svg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-mobile c18"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="22px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
                                />
                              </svg>
                            </SvgIcon__StyledSvg>
                          </SvgIcon>
                          <FormattedScreenReaderMessage
                            defaultMessage="Mobile preview"
                            id="snippetEditor.desktopPreview"
                          >
                            <FormattedMessage
                              defaultMessage="Mobile preview"
                              id="snippetEditor.desktopPreview"
                              values={Object {}}
                            >
                              <ScreenReaderText>
                                <span
                                  className="screen-reader-text"
                                  style={
                                    Object {
                                      "clip": "rect(1px, 1px, 1px, 1px)",
                                      "height": "1px",
                                      "overflow": "hidden",
                                      "position": "absolute",
                                      "width": "1px",
                                    }
                                  }
                                >
                                  Mobile preview
                                </span>
                              </ScreenReaderText>
                            </FormattedMessage>
                          </FormattedScreenReaderMessage>
                        </button>
                      </Button__BaseButton>
                    </Button>
                  </Button>
                </Button>
              </Button>
            </Button>
          </ModeSwitcher__SwitcherButton>
          <ModeSwitcher__SwitcherButton
            aria-pressed={false}
            isActive={false}
            onClick={[Function]}
          >
            <Button
              aria-pressed={false}
              className="c19"
              isActive={false}
              onClick={[Function]}
            >
              <Button
                aria-pressed={false}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                className="c19 c12"
                isActive={false}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <Button
                  aria-pressed={false}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  className="c19 c12 Button-kDSBcD c13"
                  isActive={false}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <Button
                    aria-pressed={false}
                    backgroundColor="#f7f7f7"
                    borderColor="#ccc"
                    boxShadowColor="#ccc"
                    className="c19 c12 Button-kDSBcD c13 Button-kDSBcD c14"
                    isActive={false}
                    onClick={[Function]}
                    textColor="#555"
                    type="button"
                  >
                    <Button
                      aria-pressed={false}
                      backgroundColor="#f7f7f7"
                      borderColor="#ccc"
                      boxShadowColor="#ccc"
                      className="c19 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15"
                      isActive={false}
                      onClick={[Function]}
                      textColor="#555"
                      type="button"
                    >
                      <Button__BaseButton
                        aria-pressed={false}
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        className="c19 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16"
                        isActive={false}
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <button
                          aria-pressed={false}
                          className="c19 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 c17"
                          onClick={[Function]}
                          type="button"
                        >
                          <SvgIcon
                            color="currentColor"
                            icon="desktop"
                            size="18px"
                          >
                            <SvgIcon__StyledSvg
                              aria-hidden={true}
                              className="yoast-svg-icon yoast-svg-icon-desktop"
                              fill="currentColor"
                              focusable="false"
                              role="img"
                              size="18px"
                              viewBox="0 0 1792 1792"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <svg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-desktop c20"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="18px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
                                />
                              </svg>
                            </SvgIcon__StyledSvg>
                          </SvgIcon>
                          <FormattedScreenReaderMessage
                            defaultMessage="Desktop preview"
                            id="snippetEditor.desktopPreview"
                          >
                            <FormattedMessage
                              defaultMessage="Desktop preview"
                              id="snippetEditor.desktopPreview"
                              values={Object {}}
                            >
                              <ScreenReaderText>
                                <span
                                  className="screen-reader-text"
                                  style={
                                    Object {
                                      "clip": "rect(1px, 1px, 1px, 1px)",
                                      "height": "1px",
                                      "overflow": "hidden",
                                      "position": "absolute",
                                      "width": "1px",
                                    }
                                  }
                                >
                                  Desktop preview
                                </span>
                              </ScreenReaderText>
                            </FormattedMessage>
                          </FormattedScreenReaderMessage>
                        </button>
                      </Button__BaseButton>
                    </Button>
                  </Button>
                </Button>
              </Button>
            </Button>
          </ModeSwitcher__SwitcherButton>
        </div>
      </ModeSwitcher__Switcher>
    </ModeSwitcher>
    <Button
      aria-expanded={false}
      innerRef={[Function]}
      onClick={[Function]}
    >
      <Button
        aria-expanded={false}
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        className="c21"
        innerRef={[Function]}
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <Button
          aria-expanded={false}
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          className="c21 Button-kDSBcD c13"
          innerRef={[Function]}
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <Button
            aria-expanded={false}
            backgroundColor="#f7f7f7"
            borderColor="#ccc"
            boxShadowColor="#ccc"
            className="c21 Button-kDSBcD c13 Button-kDSBcD c14"
            innerRef={[Function]}
            onClick={[Function]}
            textColor="#555"
            type="button"
          >
            <Button
              aria-expanded={false}
              backgroundColor="#f7f7f7"
              borderColor="#ccc"
              boxShadowColor="#ccc"
              className="c21 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15"
              innerRef={[Function]}
              onClick={[Function]}
              textColor="#555"
              type="button"
            >
              <Button__BaseButton
                aria-expanded={false}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                className="c21 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16"
                innerRef={[Function]}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <button
                  aria-expanded={false}
                  className="c21 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 c17"
                  onClick={[Function]}
                  type="button"
                >
                  <SvgIcon
                    icon="edit"
                    size="16px"
                  >
                    <SvgIcon__StyledSvg
                      aria-hidden={true}
                      className="yoast-svg-icon yoast-svg-icon-edit"
                      focusable="false"
                      role="img"
                      size="16px"
                      viewBox="0 0 1792 1792"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <svg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-edit c22"
                        focusable="false"
                        role="img"
                        size="16px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
                        />
                      </svg>
                    </SvgIcon__StyledSvg>
                  </SvgIcon>
                  <FormattedMessage
                    defaultMessage="Edit snippet"
                    id="snippetEditor.editSnippet"
                    values={Object {}}
                  >
                    <span>
                      Edit snippet
                    </span>
                  </FormattedMessage>
                </button>
              </Button__BaseButton>
            </Button>
          </Button>
        </Button>
      </Button>
    </Button>
  </div>
</SnippetEditor>
`;

exports[`SnippetEditor colored progress bars can handle a score of 6 1`] = `
.c0 {
  border-bottom: 1px hidden #fff;
  border-radius: 2px;
  box-shadow: 0 1px 2px rgba(0,0,0,.2);
  margin: 0 20px 10px;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  max-width: 600px;
  box-sizing: border-box;
  font-size: 14px;
}

.c2 {
  cursor: pointer;
  position: relative;
}

.c4 {
  color: #1e0fbe;
  text-decoration: none;
  font-size: 18px;
  line-height: 1.2;
  font-weight: normal;
  margin: 0;
  display: inline-block;
  overflow: hidden;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c3 {
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c5 {
  display: inline-block;
  line-height: 1.2em;
  max-height: 2.4em;
  overflow: hidden;
  text-overflow: ellipsis;
  font-size: 16px;
}

.c6 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
}

.c9 {
  color: #545454;
  cursor: pointer;
  position: relative;
  max-width: 600px;
  font-size: 13px;
}

.c8 {
  max-height: 4em;
  overflow: hidden;
  font-size: 14px;
  line-height: 20px;
}

.c1 {
  padding: 8px 16px;
}

.c7 {
  border: 0;
  border-bottom: 1px solid #DFE1E5;
  margin: 0;
}

.c29 {
  box-sizing: border-box;
  width: 100%;
  height: 8px;
  display: block;
  margin-top: 8px;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background-color: #f7f7f7;
  border: 1px solid #ddd;
}

.c29::-webkit-progress-bar {
  background-color: #f7f7f7;
}

.c29::-webkit-progress-value {
  background-color: #dc3232;
  -webkit-transition: width 250ms;
  transition: width 250ms;
}

.c29::-moz-progress-bar {
  background-color: #dc3232;
}

.c29::-ms-fill {
  background-color: #dc3232;
  border: 0;
}

.c27 {
  box-sizing: border-box;
  width: 100%;
  height: 8px;
  display: block;
  margin-top: 8px;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background-color: #f7f7f7;
  border: 1px solid #ddd;
}

.c27::-webkit-progress-bar {
  background-color: #f7f7f7;
}

.c27::-webkit-progress-value {
  background-color: #ee7c1b;
  -webkit-transition: width 250ms;
  transition: width 250ms;
}

.c27::-moz-progress-bar {
  background-color: #ee7c1b;
}

.c27::-ms-fill {
  background-color: #ee7c1b;
  border: 0;
}

.c26 {
  padding: 3px 5px;
  border: 1px solid #ddd;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  margin-top: 5px;
}

.c26::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width=%221792%22%20height=%221792%22%20viewBox=%220%200%201792%201792%22%20xmlns=%22http://www.w3.org/2000/svg%22%3E%3Cpath%20fill=%22transparent%22%20d=%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20/%3E%3C/svg%3E);
  background-size: 25px;
  content: "";
}

.c28 {
  padding: 3px 5px;
  border: 1px solid #ddd;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  margin-top: 5px;
  min-height: 60px;
  padding: 2px 6px;
  line-height: 19.6px;
}

.c28::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width=%221792%22%20height=%221792%22%20viewBox=%220%200%201792%201792%22%20xmlns=%22http://www.w3.org/2000/svg%22%3E%3Cpath%20fill=%22transparent%22%20d=%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20/%3E%3C/svg%3E);
  background-size: 25px;
  content: "";
}

.c24 {
  margin: 32px 0;
}

.c23 {
  padding: 10px 20px 20px 20px;
}

.c25 {
  cursor: pointer;
  font-size: 16px;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
}

.c17 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
}

.c12 {
  font-size: 0.8rem;
}

.c13:active {
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c14:hover {
  color: #000;
}

.c15::-moz-focus-inner {
  border-width: 0;
}

.c15:focus {
  outline: none;
  border-color: #0066cd;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c16 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
}

.c16 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c21 {
  font-size: 0.8rem;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin: 10px 0 0 4px;
  fill: #555;
  padding-left: 8px;
}

.c21 svg {
  margin-right: 7px;
}

.c30 {
  font-size: 0.8rem;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin-left: 20px;
}

.c11 {
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: #555;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 3px 0 0 3px;
}

.c11:hover,
.c11:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
}

.c19 {
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: transparent;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 0 3px 3px 0;
}

.c19:hover,
.c19:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
}

.c10 {
  display: inline-block;
  margin-top: 10px;
  margin-left: 20px;
  border: 1px solid #dbdbdb;
  border-radius: 4px;
  background-color: #f7f7f7;
  vertical-align: top;
}

.c18 {
  width: 22px;
  height: 22px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c20 {
  width: 18px;
  height: 18px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c22 {
  width: 16px;
  height: 16px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

@media all and ( -ms-high-contrast:none ),( -ms-high-contrast:active ) {
  .c16::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

<SnippetEditor
  baseUrl="https://example.org/"
  data={
    Object {
      "description": "Test description, %%replacement_variable%%",
      "slug": "test-slug",
      "title": "Test title",
    }
  }
  descriptionLengthAssessment={
    Object {
      "actual": 0,
      "max": 320,
      "score": 0,
    }
  }
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "textComponent": "span",
    }
  }
  mapDataToPreview={null}
  mode="mobile"
  onChange={[Function]}
  replacementVariables={Array []}
  titleLengthAssessment={
    Object {
      "actual": 361,
      "max": 550,
      "score": 6,
    }
  }
>
  <div>
    <SnippetPreview
      activeField={null}
      breadcrumbs={null}
      date=""
      description="Test description, %%replacement_variable%%"
      hoveredField={null}
      isAmp={false}
      isDescriptionGenerated={false}
      keyword=""
      locale="en_US"
      mode="mobile"
      onClick={[Function]}
      onHover={[Function]}
      onMouseLeave={[Function]}
      onMouseOver={[Function]}
      title="Test title"
      url="example.org/test-slug"
    >
      <section>
        <SnippetPreview__MobileContainer
          padding={20}
          width={640}
        >
          <div
            className="c0"
            width={640}
          >
            <SnippetPreview__MobilePartContainer>
              <div
                className="c1"
              >
                <FormattedScreenReaderMessage
                  after=":"
                  defaultMessage="SEO title preview"
                  id="snippetPreview.seoTitlePreview"
                >
                  <FormattedMessage
                    after=":"
                    defaultMessage="SEO title preview"
                    id="snippetPreview.seoTitlePreview"
                    values={Object {}}
                  >
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        SEO title preview:
                      </span>
                    </ScreenReaderText>
                  </FormattedMessage>
                </FormattedScreenReaderMessage>
                <SnippetPreview__BaseTitle
                  onClick={[Function]}
                  onMouseLeave={[Function]}
                  onMouseOver={[Function]}
                >
                  <div
                    className="c2"
                    onClick={[Function]}
                    onMouseLeave={[Function]}
                    onMouseOver={[Function]}
                  >
                    <SnippetPreview__TitleBounded>
                      <SnippetPreview__Title
                        className="c3"
                      >
                        <div
                          className="c3 c4"
                        >
                          <SnippetPreview__TitleUnboundedMobile
                            innerRef={[Function]}
                          >
                            <span
                              className="c5"
                            >
                              Test title
                            </span>
                          </SnippetPreview__TitleUnboundedMobile>
                        </div>
                      </SnippetPreview__Title>
                    </SnippetPreview__TitleBounded>
                  </div>
                </SnippetPreview__BaseTitle>
                <FormattedScreenReaderMessage
                  after=":"
                  defaultMessage="Url preview"
                  id="snippetPreview.urlPreview"
                >
                  <FormattedMessage
                    after=":"
                    defaultMessage="Url preview"
                    id="snippetPreview.urlPreview"
                    values={Object {}}
                  >
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Url preview:
                      </span>
                    </ScreenReaderText>
                  </FormattedMessage>
                </FormattedScreenReaderMessage>
                <SnippetPreview__BaseUrl
                  onClick={[Function]}
                  onMouseLeave={[Function]}
                  onMouseOver={[Function]}
                >
                  <div
                    className="c6"
                    onClick={[Function]}
                    onMouseLeave={[Function]}
                    onMouseOver={[Function]}
                  >
                    example.org â€º test-slug
                  </div>
                </SnippetPreview__BaseUrl>
              </div>
            </SnippetPreview__MobilePartContainer>
            <SnippetPreview__Separator>
              <hr
                className="c7"
              />
            </SnippetPreview__Separator>
            <SnippetPreview__MobilePartContainer>
              <div
                className="c1"
              >
                <FormattedScreenReaderMessage
                  after=":"
                  defaultMessage="Meta description preview"
                  id="snippetPreview.metaDescriptionPreview"
                >
                  <FormattedMessage
                    after=":"
                    defaultMessage="Meta description preview"
                    id="snippetPreview.metaDescriptionPreview"
                    values={Object {}}
                  >
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Meta description preview:
                      </span>
                    </ScreenReaderText>
                  </FormattedMessage>
                </FormattedScreenReaderMessage>
                <SnippetPreview__MobileDescription
                  innerRef={[Function]}
                  isDescriptionGenerated={false}
                  onClick={[Function]}
                  onMouseLeave={[Function]}
                  onMouseOver={[Function]}
                >
                  <SnippetPreview__DesktopDescription
                    className="c8"
                    innerRef={[Function]}
                    isDescriptionGenerated={false}
                    onClick={[Function]}
                    onMouseLeave={[Function]}
                    onMouseOver={[Function]}
                  >
                    <div
                      className="c8 c9"
                      color="#545454"
                      onClick={[Function]}
                      onMouseLeave={[Function]}
                      onMouseOver={[Function]}
                    >
                      Test description, %%replacement_variable%%
                    </div>
                  </SnippetPreview__DesktopDescription>
                </SnippetPreview__MobileDescription>
              </div>
            </SnippetPreview__MobilePartContainer>
          </div>
        </SnippetPreview__MobileContainer>
      </section>
    </SnippetPreview>
    <ModeSwitcher
      active="mobile"
      onChange={[Function]}
    >
      <ModeSwitcher__Switcher>
        <div
          className="c10"
        >
          <ModeSwitcher__SwitcherButton
            aria-pressed={true}
            isActive={true}
            onClick={[Function]}
          >
            <Button
              aria-pressed={true}
              className="c11"
              isActive={true}
              onClick={[Function]}
            >
              <Button
                aria-pressed={true}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                className="c11 c12"
                isActive={true}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <Button
                  aria-pressed={true}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  className="c11 c12 Button-kDSBcD c13"
                  isActive={true}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <Button
                    aria-pressed={true}
                    backgroundColor="#f7f7f7"
                    borderColor="#ccc"
                    boxShadowColor="#ccc"
                    className="c11 c12 Button-kDSBcD c13 Button-kDSBcD c14"
                    isActive={true}
                    onClick={[Function]}
                    textColor="#555"
                    type="button"
                  >
                    <Button
                      aria-pressed={true}
                      backgroundColor="#f7f7f7"
                      borderColor="#ccc"
                      boxShadowColor="#ccc"
                      className="c11 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15"
                      isActive={true}
                      onClick={[Function]}
                      textColor="#555"
                      type="button"
                    >
                      <Button__BaseButton
                        aria-pressed={true}
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        className="c11 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16"
                        isActive={true}
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <button
                          aria-pressed={true}
                          className="c11 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 c17"
                          onClick={[Function]}
                          type="button"
                        >
                          <SvgIcon
                            color="currentColor"
                            icon="mobile"
                            size="22px"
                          >
                            <SvgIcon__StyledSvg
                              aria-hidden={true}
                              className="yoast-svg-icon yoast-svg-icon-mobile"
                              fill="currentColor"
                              focusable="false"
                              role="img"
                              size="22px"
                              viewBox="0 0 1792 1792"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <svg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-mobile c18"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="22px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
                                />
                              </svg>
                            </SvgIcon__StyledSvg>
                          </SvgIcon>
                          <FormattedScreenReaderMessage
                            defaultMessage="Mobile preview"
                            id="snippetEditor.desktopPreview"
                          >
                            <FormattedMessage
                              defaultMessage="Mobile preview"
                              id="snippetEditor.desktopPreview"
                              values={Object {}}
                            >
                              <ScreenReaderText>
                                <span
                                  className="screen-reader-text"
                                  style={
                                    Object {
                                      "clip": "rect(1px, 1px, 1px, 1px)",
                                      "height": "1px",
                                      "overflow": "hidden",
                                      "position": "absolute",
                                      "width": "1px",
                                    }
                                  }
                                >
                                  Mobile preview
                                </span>
                              </ScreenReaderText>
                            </FormattedMessage>
                          </FormattedScreenReaderMessage>
                        </button>
                      </Button__BaseButton>
                    </Button>
                  </Button>
                </Button>
              </Button>
            </Button>
          </ModeSwitcher__SwitcherButton>
          <ModeSwitcher__SwitcherButton
            aria-pressed={false}
            isActive={false}
            onClick={[Function]}
          >
            <Button
              aria-pressed={false}
              className="c19"
              isActive={false}
              onClick={[Function]}
            >
              <Button
                aria-pressed={false}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                className="c19 c12"
                isActive={false}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <Button
                  aria-pressed={false}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  className="c19 c12 Button-kDSBcD c13"
                  isActive={false}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <Button
                    aria-pressed={false}
                    backgroundColor="#f7f7f7"
                    borderColor="#ccc"
                    boxShadowColor="#ccc"
                    className="c19 c12 Button-kDSBcD c13 Button-kDSBcD c14"
                    isActive={false}
                    onClick={[Function]}
                    textColor="#555"
                    type="button"
                  >
                    <Button
                      aria-pressed={false}
                      backgroundColor="#f7f7f7"
                      borderColor="#ccc"
                      boxShadowColor="#ccc"
                      className="c19 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15"
                      isActive={false}
                      onClick={[Function]}
                      textColor="#555"
                      type="button"
                    >
                      <Button__BaseButton
                        aria-pressed={false}
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        className="c19 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16"
                        isActive={false}
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <button
                          aria-pressed={false}
                          className="c19 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 c17"
                          onClick={[Function]}
                          type="button"
                        >
                          <SvgIcon
                            color="currentColor"
                            icon="desktop"
                            size="18px"
                          >
                            <SvgIcon__StyledSvg
                              aria-hidden={true}
                              className="yoast-svg-icon yoast-svg-icon-desktop"
                              fill="currentColor"
                              focusable="false"
                              role="img"
                              size="18px"
                              viewBox="0 0 1792 1792"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <svg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-desktop c20"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="18px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
                                />
                              </svg>
                            </SvgIcon__StyledSvg>
                          </SvgIcon>
                          <FormattedScreenReaderMessage
                            defaultMessage="Desktop preview"
                            id="snippetEditor.desktopPreview"
                          >
                            <FormattedMessage
                              defaultMessage="Desktop preview"
                              id="snippetEditor.desktopPreview"
                              values={Object {}}
                            >
                              <ScreenReaderText>
                                <span
                                  className="screen-reader-text"
                                  style={
                                    Object {
                                      "clip": "rect(1px, 1px, 1px, 1px)",
                                      "height": "1px",
                                      "overflow": "hidden",
                                      "position": "absolute",
                                      "width": "1px",
                                    }
                                  }
                                >
                                  Desktop preview
                                </span>
                              </ScreenReaderText>
                            </FormattedMessage>
                          </FormattedScreenReaderMessage>
                        </button>
                      </Button__BaseButton>
                    </Button>
                  </Button>
                </Button>
              </Button>
            </Button>
          </ModeSwitcher__SwitcherButton>
        </div>
      </ModeSwitcher__Switcher>
    </ModeSwitcher>
    <Button
      aria-expanded={true}
      innerRef={[Function]}
      onClick={[Function]}
    >
      <Button
        aria-expanded={true}
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        className="c21"
        innerRef={[Function]}
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <Button
          aria-expanded={true}
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          className="c21 Button-kDSBcD c13"
          innerRef={[Function]}
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <Button
            aria-expanded={true}
            backgroundColor="#f7f7f7"
            borderColor="#ccc"
            boxShadowColor="#ccc"
            className="c21 Button-kDSBcD c13 Button-kDSBcD c14"
            innerRef={[Function]}
            onClick={[Function]}
            textColor="#555"
            type="button"
          >
            <Button
              aria-expanded={true}
              backgroundColor="#f7f7f7"
              borderColor="#ccc"
              boxShadowColor="#ccc"
              className="c21 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15"
              innerRef={[Function]}
              onClick={[Function]}
              textColor="#555"
              type="button"
            >
              <Button__BaseButton
                aria-expanded={true}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                className="c21 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16"
                innerRef={[Function]}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <button
                  aria-expanded={true}
                  className="c21 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 c17"
                  onClick={[Function]}
                  type="button"
                >
                  <SvgIcon
                    icon="edit"
                    size="16px"
                  >
                    <SvgIcon__StyledSvg
                      aria-hidden={true}
                      className="yoast-svg-icon yoast-svg-icon-edit"
                      focusable="false"
                      role="img"
                      size="16px"
                      viewBox="0 0 1792 1792"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <svg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-edit c22"
                        focusable="false"
                        role="img"
                        size="16px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
                        />
                      </svg>
                    </SvgIcon__StyledSvg>
                  </SvgIcon>
                  <FormattedMessage
                    defaultMessage="Edit snippet"
                    id="snippetEditor.editSnippet"
                    values={Object {}}
                  >
                    <span>
                      Edit snippet
                    </span>
                  </FormattedMessage>
                </button>
              </Button__BaseButton>
            </Button>
          </Button>
        </Button>
      </Button>
    </Button>
    <InjectIntl(SnippetEditorFields)
      activeField={null}
      data={
        Object {
          "description": "Test description, %%replacement_variable%%",
          "slug": "test-slug",
          "title": "Test title",
        }
      }
      descriptionLengthAssessment={
        Object {
          "actual": 0,
          "max": 320,
          "score": 0,
        }
      }
      hoveredField={null}
      onChange={[Function]}
      onFocus={[Function]}
      replacementVariables={Array []}
      titleLengthAssessment={
        Object {
          "actual": 361,
          "max": 550,
          "score": 6,
        }
      }
    >
      <SnippetEditorFields
        activeField={null}
        data={
          Object {
            "description": "Test description, %%replacement_variable%%",
            "slug": "test-slug",
            "title": "Test title",
          }
        }
        descriptionLengthAssessment={
          Object {
            "actual": 0,
            "max": 320,
            "score": 0,
          }
        }
        hoveredField={null}
        intl={
          Object {
            "defaultFormats": Object {},
            "defaultLocale": "en",
            "formatDate": [Function],
            "formatHTMLMessage": [Function],
            "formatMessage": [Function],
            "formatNumber": [Function],
            "formatPlural": [Function],
            "formatRelative": [Function],
            "formatTime": [Function],
            "formats": Object {},
            "formatters": Object {
              "getDateTimeFormat": [Function],
              "getMessageFormat": [Function],
              "getNumberFormat": [Function],
              "getPluralFormat": [Function],
              "getRelativeFormat": [Function],
            },
            "locale": "en",
            "messages": Object {},
            "now": [Function],
            "textComponent": "span",
          }
        }
        onChange={[Function]}
        onFocus={[Function]}
        replacementVariables={Array []}
        titleLengthAssessment={
          Object {
            "actual": 361,
            "max": 550,
            "score": 6,
          }
        }
      >
        <SnippetEditorFields__StyledEditor>
          <section
            className="c23"
          >
            <SnippetEditorFields__FormSection>
              <div
                className="c24"
              >
                <SnippetEditorFields__SimulatedLabel
                  id="snippet-editor-field-8-title"
                  onClick={[Function]}
                >
                  <div
                    className="c25"
                    id="snippet-editor-field-8-title"
                    onClick={[Function]}
                  >
                    SEO title
                  </div>
                </SnippetEditorFields__SimulatedLabel>
                <SnippetEditorFields__InputContainer
                  isActive={false}
                  isHovered={false}
                >
                  <div
                    className="c26"
                  >
                    <ReplacementVariableEditor
                      ariaLabelledBy="snippet-editor-field-8-title"
                      content="Test title"
                      onChange={[Function]}
                      onFocus={[Function]}
                      replacementVariables={Array []}
                    >
                      <div />
                    </ReplacementVariableEditor>
                  </div>
                </SnippetEditorFields__InputContainer>
                <ProgressBar
                  aria-hidden="true"
                  backgroundColor="#f7f7f7"
                  borderColor="#ddd"
                  max={550}
                  progressColor="#ee7c1b"
                  value={361}
                >
                  <progress
                    aria-hidden="true"
                    className="c27"
                    max={550}
                    value={361}
                  />
                </ProgressBar>
              </div>
            </SnippetEditorFields__FormSection>
            <SnippetEditorFields__FormSection>
              <div
                className="c24"
              >
                <SnippetEditorFields__SimulatedLabel
                  id="snippet-editor-field-8-slug"
                  onClick={[Function]}
                >
                  <div
                    className="c25"
                    id="snippet-editor-field-8-slug"
                    onClick={[Function]}
                  >
                    Slug
                  </div>
                </SnippetEditorFields__SimulatedLabel>
                <SnippetEditorFields__InputContainer
                  isActive={false}
                  isHovered={false}
                >
                  <div
                    className="c26"
                  >
                    <ReplacementVariableEditor
                      ariaLabelledBy="snippet-editor-field-8-slug"
                      content="test-slug"
                      onChange={[Function]}
                      onFocus={[Function]}
                      replacementVariables={Array []}
                    >
                      <div />
                    </ReplacementVariableEditor>
                  </div>
                </SnippetEditorFields__InputContainer>
              </div>
            </SnippetEditorFields__FormSection>
            <SnippetEditorFields__FormSection>
              <div
                className="c24"
              >
                <SnippetEditorFields__SimulatedLabel
                  id="snippet-editor-field-8-description"
                  onClick={[Function]}
                >
                  <div
                    className="c25"
                    id="snippet-editor-field-8-description"
                    onClick={[Function]}
                  >
                    Meta description
                  </div>
                </SnippetEditorFields__SimulatedLabel>
                <SnippetEditorFields__InputContainer
                  isActive={false}
                  isHovered={false}
                >
                  <div
                    className="c28"
                  >
                    <ReplacementVariableEditor
                      ariaLabelledBy="snippet-editor-field-8-description"
                      content="Test description, %%replacement_variable%%"
                      onChange={[Function]}
                      onFocus={[Function]}
                      replacementVariables={Array []}
                    >
                      <div />
                    </ReplacementVariableEditor>
                  </div>
                </SnippetEditorFields__InputContainer>
                <ProgressBar
                  aria-hidden="true"
                  backgroundColor="#f7f7f7"
                  borderColor="#ddd"
                  max={320}
                  progressColor="#dc3232"
                  value={0}
                >
                  <progress
                    aria-hidden="true"
                    className="c29"
                    max={320}
                    value={0}
                  />
                </ProgressBar>
              </div>
            </SnippetEditorFields__FormSection>
          </section>
        </SnippetEditorFields__StyledEditor>
      </SnippetEditorFields>
    </InjectIntl(SnippetEditorFields)>
    <Button
      onClick={[Function]}
    >
      <Button
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        className="c30"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <Button
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          className="c30 Button-kDSBcD c13"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <Button
            backgroundColor="#f7f7f7"
            borderColor="#ccc"
            boxShadowColor="#ccc"
            className="c30 Button-kDSBcD c13 Button-kDSBcD c14"
            onClick={[Function]}
            textColor="#555"
            type="button"
          >
            <Button
              backgroundColor="#f7f7f7"
              borderColor="#ccc"
              boxShadowColor="#ccc"
              className="c30 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15"
              onClick={[Function]}
              textColor="#555"
              type="button"
            >
              <Button__BaseButton
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                className="c30 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16"
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <button
                  className="c30 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 c17"
                  onClick={[Function]}
                  type="button"
                >
                  <FormattedMessage
                    defaultMessage="Close snippet editor"
                    id="snippet-editor.close-editor"
                    values={Object {}}
                  >
                    <span>
                      Close snippet editor
                    </span>
                  </FormattedMessage>
                </button>
              </Button__BaseButton>
            </Button>
          </Button>
        </Button>
      </Button>
    </Button>
  </div>
</SnippetEditor>
`;

exports[`SnippetEditor colored progress bars can handle scores of 3 and 9 1`] = `
.c0 {
  border-bottom: 1px hidden #fff;
  border-radius: 2px;
  box-shadow: 0 1px 2px rgba(0,0,0,.2);
  margin: 0 20px 10px;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  max-width: 600px;
  box-sizing: border-box;
  font-size: 14px;
}

.c2 {
  cursor: pointer;
  position: relative;
}

.c4 {
  color: #1e0fbe;
  text-decoration: none;
  font-size: 18px;
  line-height: 1.2;
  font-weight: normal;
  margin: 0;
  display: inline-block;
  overflow: hidden;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c3 {
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c5 {
  display: inline-block;
  line-height: 1.2em;
  max-height: 2.4em;
  overflow: hidden;
  text-overflow: ellipsis;
  font-size: 16px;
}

.c6 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
}

.c9 {
  color: #545454;
  cursor: pointer;
  position: relative;
  max-width: 600px;
  font-size: 13px;
}

.c8 {
  max-height: 4em;
  overflow: hidden;
  font-size: 14px;
  line-height: 20px;
}

.c1 {
  padding: 8px 16px;
}

.c7 {
  border: 0;
  border-bottom: 1px solid #DFE1E5;
  margin: 0;
}

.c27 {
  box-sizing: border-box;
  width: 100%;
  height: 8px;
  display: block;
  margin-top: 8px;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background-color: #f7f7f7;
  border: 1px solid #ddd;
}

.c27::-webkit-progress-bar {
  background-color: #f7f7f7;
}

.c27::-webkit-progress-value {
  background-color: #dc3232;
  -webkit-transition: width 250ms;
  transition: width 250ms;
}

.c27::-moz-progress-bar {
  background-color: #dc3232;
}

.c27::-ms-fill {
  background-color: #dc3232;
  border: 0;
}

.c29 {
  box-sizing: border-box;
  width: 100%;
  height: 8px;
  display: block;
  margin-top: 8px;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background-color: #f7f7f7;
  border: 1px solid #ddd;
}

.c29::-webkit-progress-bar {
  background-color: #f7f7f7;
}

.c29::-webkit-progress-value {
  background-color: #7ad03a;
  -webkit-transition: width 250ms;
  transition: width 250ms;
}

.c29::-moz-progress-bar {
  background-color: #7ad03a;
}

.c29::-ms-fill {
  background-color: #7ad03a;
  border: 0;
}

.c26 {
  padding: 3px 5px;
  border: 1px solid #ddd;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  margin-top: 5px;
}

.c26::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width=%221792%22%20height=%221792%22%20viewBox=%220%200%201792%201792%22%20xmlns=%22http://www.w3.org/2000/svg%22%3E%3Cpath%20fill=%22transparent%22%20d=%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20/%3E%3C/svg%3E);
  background-size: 25px;
  content: "";
}

.c28 {
  padding: 3px 5px;
  border: 1px solid #ddd;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  margin-top: 5px;
  min-height: 60px;
  padding: 2px 6px;
  line-height: 19.6px;
}

.c28::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width=%221792%22%20height=%221792%22%20viewBox=%220%200%201792%201792%22%20xmlns=%22http://www.w3.org/2000/svg%22%3E%3Cpath%20fill=%22transparent%22%20d=%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20/%3E%3C/svg%3E);
  background-size: 25px;
  content: "";
}

.c24 {
  margin: 32px 0;
}

.c23 {
  padding: 10px 20px 20px 20px;
}

.c25 {
  cursor: pointer;
  font-size: 16px;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
}

.c17 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
}

.c12 {
  font-size: 0.8rem;
}

.c13:active {
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c14:hover {
  color: #000;
}

.c15::-moz-focus-inner {
  border-width: 0;
}

.c15:focus {
  outline: none;
  border-color: #0066cd;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c16 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
}

.c16 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c21 {
  font-size: 0.8rem;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin: 10px 0 0 4px;
  fill: #555;
  padding-left: 8px;
}

.c21 svg {
  margin-right: 7px;
}

.c30 {
  font-size: 0.8rem;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin-left: 20px;
}

.c11 {
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: #555;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 3px 0 0 3px;
}

.c11:hover,
.c11:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
}

.c19 {
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: transparent;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 0 3px 3px 0;
}

.c19:hover,
.c19:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
}

.c10 {
  display: inline-block;
  margin-top: 10px;
  margin-left: 20px;
  border: 1px solid #dbdbdb;
  border-radius: 4px;
  background-color: #f7f7f7;
  vertical-align: top;
}

.c18 {
  width: 22px;
  height: 22px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c20 {
  width: 18px;
  height: 18px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c22 {
  width: 16px;
  height: 16px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

@media all and ( -ms-high-contrast:none ),( -ms-high-contrast:active ) {
  .c16::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

<SnippetEditor
  baseUrl="https://example.org/"
  data={
    Object {
      "description": "Test description, %%replacement_variable%%",
      "slug": "test-slug",
      "title": "Test title",
    }
  }
  descriptionLengthAssessment={
    Object {
      "actual": 330,
      "max": 650,
      "score": 9,
    }
  }
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "textComponent": "span",
    }
  }
  mapDataToPreview={null}
  mode="mobile"
  onChange={[Function]}
  replacementVariables={Array []}
  titleLengthAssessment={
    Object {
      "actual": 100,
      "max": 550,
      "score": 3,
    }
  }
>
  <div>
    <SnippetPreview
      activeField={null}
      breadcrumbs={null}
      date=""
      description="Test description, %%replacement_variable%%"
      hoveredField={null}
      isAmp={false}
      isDescriptionGenerated={false}
      keyword=""
      locale="en_US"
      mode="mobile"
      onClick={[Function]}
      onHover={[Function]}
      onMouseLeave={[Function]}
      onMouseOver={[Function]}
      title="Test title"
      url="example.org/test-slug"
    >
      <section>
        <SnippetPreview__MobileContainer
          padding={20}
          width={640}
        >
          <div
            className="c0"
            width={640}
          >
            <SnippetPreview__MobilePartContainer>
              <div
                className="c1"
              >
                <FormattedScreenReaderMessage
                  after=":"
                  defaultMessage="SEO title preview"
                  id="snippetPreview.seoTitlePreview"
                >
                  <FormattedMessage
                    after=":"
                    defaultMessage="SEO title preview"
                    id="snippetPreview.seoTitlePreview"
                    values={Object {}}
                  >
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        SEO title preview:
                      </span>
                    </ScreenReaderText>
                  </FormattedMessage>
                </FormattedScreenReaderMessage>
                <SnippetPreview__BaseTitle
                  onClick={[Function]}
                  onMouseLeave={[Function]}
                  onMouseOver={[Function]}
                >
                  <div
                    className="c2"
                    onClick={[Function]}
                    onMouseLeave={[Function]}
                    onMouseOver={[Function]}
                  >
                    <SnippetPreview__TitleBounded>
                      <SnippetPreview__Title
                        className="c3"
                      >
                        <div
                          className="c3 c4"
                        >
                          <SnippetPreview__TitleUnboundedMobile
                            innerRef={[Function]}
                          >
                            <span
                              className="c5"
                            >
                              Test title
                            </span>
                          </SnippetPreview__TitleUnboundedMobile>
                        </div>
                      </SnippetPreview__Title>
                    </SnippetPreview__TitleBounded>
                  </div>
                </SnippetPreview__BaseTitle>
                <FormattedScreenReaderMessage
                  after=":"
                  defaultMessage="Url preview"
                  id="snippetPreview.urlPreview"
                >
                  <FormattedMessage
                    after=":"
                    defaultMessage="Url preview"
                    id="snippetPreview.urlPreview"
                    values={Object {}}
                  >
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Url preview:
                      </span>
                    </ScreenReaderText>
                  </FormattedMessage>
                </FormattedScreenReaderMessage>
                <SnippetPreview__BaseUrl
                  onClick={[Function]}
                  onMouseLeave={[Function]}
                  onMouseOver={[Function]}
                >
                  <div
                    className="c6"
                    onClick={[Function]}
                    onMouseLeave={[Function]}
                    onMouseOver={[Function]}
                  >
                    example.org â€º test-slug
                  </div>
                </SnippetPreview__BaseUrl>
              </div>
            </SnippetPreview__MobilePartContainer>
            <SnippetPreview__Separator>
              <hr
                className="c7"
              />
            </SnippetPreview__Separator>
            <SnippetPreview__MobilePartContainer>
              <div
                className="c1"
              >
                <FormattedScreenReaderMessage
                  after=":"
                  defaultMessage="Meta description preview"
                  id="snippetPreview.metaDescriptionPreview"
                >
                  <FormattedMessage
                    after=":"
                    defaultMessage="Meta description preview"
                    id="snippetPreview.metaDescriptionPreview"
                    values={Object {}}
                  >
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Meta description preview:
                      </span>
                    </ScreenReaderText>
                  </FormattedMessage>
                </FormattedScreenReaderMessage>
                <SnippetPreview__MobileDescription
                  innerRef={[Function]}
                  isDescriptionGenerated={false}
                  onClick={[Function]}
                  onMouseLeave={[Function]}
                  onMouseOver={[Function]}
                >
                  <SnippetPreview__DesktopDescription
                    className="c8"
                    innerRef={[Function]}
                    isDescriptionGenerated={false}
                    onClick={[Function]}
                    onMouseLeave={[Function]}
                    onMouseOver={[Function]}
                  >
                    <div
                      className="c8 c9"
                      color="#545454"
                      onClick={[Function]}
                      onMouseLeave={[Function]}
                      onMouseOver={[Function]}
                    >
                      Test description, %%replacement_variable%%
                    </div>
                  </SnippetPreview__DesktopDescription>
                </SnippetPreview__MobileDescription>
              </div>
            </SnippetPreview__MobilePartContainer>
          </div>
        </SnippetPreview__MobileContainer>
      </section>
    </SnippetPreview>
    <ModeSwitcher
      active="mobile"
      onChange={[Function]}
    >
      <ModeSwitcher__Switcher>
        <div
          className="c10"
        >
          <ModeSwitcher__SwitcherButton
            aria-pressed={true}
            isActive={true}
            onClick={[Function]}
          >
            <Button
              aria-pressed={true}
              className="c11"
              isActive={true}
              onClick={[Function]}
            >
              <Button
                aria-pressed={true}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                className="c11 c12"
                isActive={true}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <Button
                  aria-pressed={true}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  className="c11 c12 Button-kDSBcD c13"
                  isActive={true}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <Button
                    aria-pressed={true}
                    backgroundColor="#f7f7f7"
                    borderColor="#ccc"
                    boxShadowColor="#ccc"
                    className="c11 c12 Button-kDSBcD c13 Button-kDSBcD c14"
                    isActive={true}
                    onClick={[Function]}
                    textColor="#555"
                    type="button"
                  >
                    <Button
                      aria-pressed={true}
                      backgroundColor="#f7f7f7"
                      borderColor="#ccc"
                      boxShadowColor="#ccc"
                      className="c11 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15"
                      isActive={true}
                      onClick={[Function]}
                      textColor="#555"
                      type="button"
                    >
                      <Button__BaseButton
                        aria-pressed={true}
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        className="c11 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16"
                        isActive={true}
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <button
                          aria-pressed={true}
                          className="c11 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 c17"
                          onClick={[Function]}
                          type="button"
                        >
                          <SvgIcon
                            color="currentColor"
                            icon="mobile"
                            size="22px"
                          >
                            <SvgIcon__StyledSvg
                              aria-hidden={true}
                              className="yoast-svg-icon yoast-svg-icon-mobile"
                              fill="currentColor"
                              focusable="false"
                              role="img"
                              size="22px"
                              viewBox="0 0 1792 1792"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <svg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-mobile c18"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="22px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
                                />
                              </svg>
                            </SvgIcon__StyledSvg>
                          </SvgIcon>
                          <FormattedScreenReaderMessage
                            defaultMessage="Mobile preview"
                            id="snippetEditor.desktopPreview"
                          >
                            <FormattedMessage
                              defaultMessage="Mobile preview"
                              id="snippetEditor.desktopPreview"
                              values={Object {}}
                            >
                              <ScreenReaderText>
                                <span
                                  className="screen-reader-text"
                                  style={
                                    Object {
                                      "clip": "rect(1px, 1px, 1px, 1px)",
                                      "height": "1px",
                                      "overflow": "hidden",
                                      "position": "absolute",
                                      "width": "1px",
                                    }
                                  }
                                >
                                  Mobile preview
                                </span>
                              </ScreenReaderText>
                            </FormattedMessage>
                          </FormattedScreenReaderMessage>
                        </button>
                      </Button__BaseButton>
                    </Button>
                  </Button>
                </Button>
              </Button>
            </Button>
          </ModeSwitcher__SwitcherButton>
          <ModeSwitcher__SwitcherButton
            aria-pressed={false}
            isActive={false}
            onClick={[Function]}
          >
            <Button
              aria-pressed={false}
              className="c19"
              isActive={false}
              onClick={[Function]}
            >
              <Button
                aria-pressed={false}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                className="c19 c12"
                isActive={false}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <Button
                  aria-pressed={false}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  className="c19 c12 Button-kDSBcD c13"
                  isActive={false}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <Button
                    aria-pressed={false}
                    backgroundColor="#f7f7f7"
                    borderColor="#ccc"
                    boxShadowColor="#ccc"
                    className="c19 c12 Button-kDSBcD c13 Button-kDSBcD c14"
                    isActive={false}
                    onClick={[Function]}
                    textColor="#555"
                    type="button"
                  >
                    <Button
                      aria-pressed={false}
                      backgroundColor="#f7f7f7"
                      borderColor="#ccc"
                      boxShadowColor="#ccc"
                      className="c19 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15"
                      isActive={false}
                      onClick={[Function]}
                      textColor="#555"
                      type="button"
                    >
                      <Button__BaseButton
                        aria-pressed={false}
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        className="c19 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16"
                        isActive={false}
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <button
                          aria-pressed={false}
                          className="c19 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 c17"
                          onClick={[Function]}
                          type="button"
                        >
                          <SvgIcon
                            color="currentColor"
                            icon="desktop"
                            size="18px"
                          >
                            <SvgIcon__StyledSvg
                              aria-hidden={true}
                              className="yoast-svg-icon yoast-svg-icon-desktop"
                              fill="currentColor"
                              focusable="false"
                              role="img"
                              size="18px"
                              viewBox="0 0 1792 1792"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <svg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-desktop c20"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="18px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
                                />
                              </svg>
                            </SvgIcon__StyledSvg>
                          </SvgIcon>
                          <FormattedScreenReaderMessage
                            defaultMessage="Desktop preview"
                            id="snippetEditor.desktopPreview"
                          >
                            <FormattedMessage
                              defaultMessage="Desktop preview"
                              id="snippetEditor.desktopPreview"
                              values={Object {}}
                            >
                              <ScreenReaderText>
                                <span
                                  className="screen-reader-text"
                                  style={
                                    Object {
                                      "clip": "rect(1px, 1px, 1px, 1px)",
                                      "height": "1px",
                                      "overflow": "hidden",
                                      "position": "absolute",
                                      "width": "1px",
                                    }
                                  }
                                >
                                  Desktop preview
                                </span>
                              </ScreenReaderText>
                            </FormattedMessage>
                          </FormattedScreenReaderMessage>
                        </button>
                      </Button__BaseButton>
                    </Button>
                  </Button>
                </Button>
              </Button>
            </Button>
          </ModeSwitcher__SwitcherButton>
        </div>
      </ModeSwitcher__Switcher>
    </ModeSwitcher>
    <Button
      aria-expanded={true}
      innerRef={[Function]}
      onClick={[Function]}
    >
      <Button
        aria-expanded={true}
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        className="c21"
        innerRef={[Function]}
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <Button
          aria-expanded={true}
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          className="c21 Button-kDSBcD c13"
          innerRef={[Function]}
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <Button
            aria-expanded={true}
            backgroundColor="#f7f7f7"
            borderColor="#ccc"
            boxShadowColor="#ccc"
            className="c21 Button-kDSBcD c13 Button-kDSBcD c14"
            innerRef={[Function]}
            onClick={[Function]}
            textColor="#555"
            type="button"
          >
            <Button
              aria-expanded={true}
              backgroundColor="#f7f7f7"
              borderColor="#ccc"
              boxShadowColor="#ccc"
              className="c21 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15"
              innerRef={[Function]}
              onClick={[Function]}
              textColor="#555"
              type="button"
            >
              <Button__BaseButton
                aria-expanded={true}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                className="c21 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16"
                innerRef={[Function]}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <button
                  aria-expanded={true}
                  className="c21 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 c17"
                  onClick={[Function]}
                  type="button"
                >
                  <SvgIcon
                    icon="edit"
                    size="16px"
                  >
                    <SvgIcon__StyledSvg
                      aria-hidden={true}
                      className="yoast-svg-icon yoast-svg-icon-edit"
                      focusable="false"
                      role="img"
                      size="16px"
                      viewBox="0 0 1792 1792"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <svg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-edit c22"
                        focusable="false"
                        role="img"
                        size="16px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
                        />
                      </svg>
                    </SvgIcon__StyledSvg>
                  </SvgIcon>
                  <FormattedMessage
                    defaultMessage="Edit snippet"
                    id="snippetEditor.editSnippet"
                    values={Object {}}
                  >
                    <span>
                      Edit snippet
                    </span>
                  </FormattedMessage>
                </button>
              </Button__BaseButton>
            </Button>
          </Button>
        </Button>
      </Button>
    </Button>
    <InjectIntl(SnippetEditorFields)
      activeField={null}
      data={
        Object {
          "description": "Test description, %%replacement_variable%%",
          "slug": "test-slug",
          "title": "Test title",
        }
      }
      descriptionLengthAssessment={
        Object {
          "actual": 330,
          "max": 650,
          "score": 9,
        }
      }
      hoveredField={null}
      onChange={[Function]}
      onFocus={[Function]}
      replacementVariables={Array []}
      titleLengthAssessment={
        Object {
          "actual": 100,
          "max": 550,
          "score": 3,
        }
      }
    >
      <SnippetEditorFields
        activeField={null}
        data={
          Object {
            "description": "Test description, %%replacement_variable%%",
            "slug": "test-slug",
            "title": "Test title",
          }
        }
        descriptionLengthAssessment={
          Object {
            "actual": 330,
            "max": 650,
            "score": 9,
          }
        }
        hoveredField={null}
        intl={
          Object {
            "defaultFormats": Object {},
            "defaultLocale": "en",
            "formatDate": [Function],
            "formatHTMLMessage": [Function],
            "formatMessage": [Function],
            "formatNumber": [Function],
            "formatPlural": [Function],
            "formatRelative": [Function],
            "formatTime": [Function],
            "formats": Object {},
            "formatters": Object {
              "getDateTimeFormat": [Function],
              "getMessageFormat": [Function],
              "getNumberFormat": [Function],
              "getPluralFormat": [Function],
              "getRelativeFormat": [Function],
            },
            "locale": "en",
            "messages": Object {},
            "now": [Function],
            "textComponent": "span",
          }
        }
        onChange={[Function]}
        onFocus={[Function]}
        replacementVariables={Array []}
        titleLengthAssessment={
          Object {
            "actual": 100,
            "max": 550,
            "score": 3,
          }
        }
      >
        <SnippetEditorFields__StyledEditor>
          <section
            className="c23"
          >
            <SnippetEditorFields__FormSection>
              <div
                className="c24"
              >
                <SnippetEditorFields__SimulatedLabel
                  id="snippet-editor-field-7-title"
                  onClick={[Function]}
                >
                  <div
                    className="c25"
                    id="snippet-editor-field-7-title"
                    onClick={[Function]}
                  >
                    SEO title
                  </div>
                </SnippetEditorFields__SimulatedLabel>
                <SnippetEditorFields__InputContainer
                  isActive={false}
                  isHovered={false}
                >
                  <div
                    className="c26"
                  >
                    <ReplacementVariableEditor
                      ariaLabelledBy="snippet-editor-field-7-title"
                      content="Test title"
                      onChange={[Function]}
                      onFocus={[Function]}
                      replacementVariables={Array []}
                    >
                      <div />
                    </ReplacementVariableEditor>
                  </div>
                </SnippetEditorFields__InputContainer>
                <ProgressBar
                  aria-hidden="true"
                  backgroundColor="#f7f7f7"
                  borderColor="#ddd"
                  max={550}
                  progressColor="#dc3232"
                  value={100}
                >
                  <progress
                    aria-hidden="true"
                    className="c27"
                    max={550}
                    value={100}
                  />
                </ProgressBar>
              </div>
            </SnippetEditorFields__FormSection>
            <SnippetEditorFields__FormSection>
              <div
                className="c24"
              >
                <SnippetEditorFields__SimulatedLabel
                  id="snippet-editor-field-7-slug"
                  onClick={[Function]}
                >
                  <div
                    className="c25"
                    id="snippet-editor-field-7-slug"
                    onClick={[Function]}
                  >
                    Slug
                  </div>
                </SnippetEditorFields__SimulatedLabel>
                <SnippetEditorFields__InputContainer
                  isActive={false}
                  isHovered={false}
                >
                  <div
                    className="c26"
                  >
                    <ReplacementVariableEditor
                      ariaLabelledBy="snippet-editor-field-7-slug"
                      content="test-slug"
                      onChange={[Function]}
                      onFocus={[Function]}
                      replacementVariables={Array []}
                    >
                      <div />
                    </ReplacementVariableEditor>
                  </div>
                </SnippetEditorFields__InputContainer>
              </div>
            </SnippetEditorFields__FormSection>
            <SnippetEditorFields__FormSection>
              <div
                className="c24"
              >
                <SnippetEditorFields__SimulatedLabel
                  id="snippet-editor-field-7-description"
                  onClick={[Function]}
                >
                  <div
                    className="c25"
                    id="snippet-editor-field-7-description"
                    onClick={[Function]}
                  >
                    Meta description
                  </div>
                </SnippetEditorFields__SimulatedLabel>
                <SnippetEditorFields__InputContainer
                  isActive={false}
                  isHovered={false}
                >
                  <div
                    className="c28"
                  >
                    <ReplacementVariableEditor
                      ariaLabelledBy="snippet-editor-field-7-description"
                      content="Test description, %%replacement_variable%%"
                      onChange={[Function]}
                      onFocus={[Function]}
                      replacementVariables={Array []}
                    >
                      <div />
                    </ReplacementVariableEditor>
                  </div>
                </SnippetEditorFields__InputContainer>
                <ProgressBar
                  aria-hidden="true"
                  backgroundColor="#f7f7f7"
                  borderColor="#ddd"
                  max={650}
                  progressColor="#7ad03a"
                  value={330}
                >
                  <progress
                    aria-hidden="true"
                    className="c29"
                    max={650}
                    value={330}
                  />
                </ProgressBar>
              </div>
            </SnippetEditorFields__FormSection>
          </section>
        </SnippetEditorFields__StyledEditor>
      </SnippetEditorFields>
    </InjectIntl(SnippetEditorFields)>
    <Button
      onClick={[Function]}
    >
      <Button
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        className="c30"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <Button
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          className="c30 Button-kDSBcD c13"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <Button
            backgroundColor="#f7f7f7"
            borderColor="#ccc"
            boxShadowColor="#ccc"
            className="c30 Button-kDSBcD c13 Button-kDSBcD c14"
            onClick={[Function]}
            textColor="#555"
            type="button"
          >
            <Button
              backgroundColor="#f7f7f7"
              borderColor="#ccc"
              boxShadowColor="#ccc"
              className="c30 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15"
              onClick={[Function]}
              textColor="#555"
              type="button"
            >
              <Button__BaseButton
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                className="c30 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16"
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <button
                  className="c30 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 c17"
                  onClick={[Function]}
                  type="button"
                >
                  <FormattedMessage
                    defaultMessage="Close snippet editor"
                    id="snippet-editor.close-editor"
                    values={Object {}}
                  >
                    <span>
                      Close snippet editor
                    </span>
                  </FormattedMessage>
                </button>
              </Button__BaseButton>
            </Button>
          </Button>
        </Button>
      </Button>
    </Button>
  </div>
</SnippetEditor>
`;

exports[`SnippetEditor doesn't remove the highlight if the wrong field is left 1`] = `
<div>
  <SnippetPreview
    activeField={null}
    breadcrumbs={null}
    date=""
    description="Test description, %%replacement_variable%%"
    hoveredField="description"
    isAmp={false}
    isDescriptionGenerated={false}
    keyword=""
    locale="en_US"
    mode="mobile"
    onClick={[Function]}
    onHover={[Function]}
    onMouseLeave={[Function]}
    onMouseOver={[Function]}
    title="Test title"
    url="example.org/test-slug"
  />
  <ModeSwitcher
    active="mobile"
    onChange={[Function]}
  />
  <Button
    aria-expanded={true}
    innerRef={[Function]}
    onClick={[Function]}
  >
    <SvgIcon
      icon="edit"
      size="16px"
    />
    <FormattedMessage
      defaultMessage="Edit snippet"
      id="snippetEditor.editSnippet"
      values={Object {}}
    />
  </Button>
  <React.Fragment>
    <InjectIntl(SnippetEditorFields)
      activeField={null}
      data={
        Object {
          "description": "Test description, %%replacement_variable%%",
          "slug": "test-slug",
          "title": "Test title",
        }
      }
      descriptionLengthAssessment={
        Object {
          "actual": 0,
          "max": 320,
          "score": 0,
        }
      }
      hoveredField="description"
      onChange={[Function]}
      onFocus={[Function]}
      replacementVariables={Array []}
      titleLengthAssessment={
        Object {
          "actual": 0,
          "max": 600,
          "score": 0,
        }
      }
    />
    <Button
      onClick={[Function]}
    >
      <FormattedMessage
        defaultMessage="Close snippet editor"
        id="snippet-editor.close-editor"
        values={Object {}}
      />
    </Button>
  </React.Fragment>
</div>
`;

exports[`SnippetEditor highlights a focused field 1`] = `
.c0 {
  border-bottom: 1px hidden #fff;
  border-radius: 2px;
  box-shadow: 0 1px 2px rgba(0,0,0,.2);
  margin: 0 20px 10px;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  max-width: 600px;
  box-sizing: border-box;
  font-size: 14px;
}

.c2 {
  cursor: pointer;
  position: relative;
}

.c4 {
  color: #1e0fbe;
  text-decoration: none;
  font-size: 18px;
  line-height: 1.2;
  font-weight: normal;
  margin: 0;
  display: inline-block;
  overflow: hidden;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c3 {
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c5 {
  display: inline-block;
  line-height: 1.2em;
  max-height: 2.4em;
  overflow: hidden;
  text-overflow: ellipsis;
  font-size: 16px;
}

.c6 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
}

.c9 {
  color: #545454;
  cursor: pointer;
  position: relative;
  max-width: 600px;
  font-size: 13px;
}

.c8 {
  max-height: 4em;
  overflow: hidden;
  font-size: 14px;
  line-height: 20px;
}

.c1 {
  padding: 8px 16px;
}

.c7 {
  border: 0;
  border-bottom: 1px solid #DFE1E5;
  margin: 0;
}

.c17 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
}

.c12 {
  font-size: 0.8rem;
}

.c13:active {
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c14:hover {
  color: #000;
}

.c15::-moz-focus-inner {
  border-width: 0;
}

.c15:focus {
  outline: none;
  border-color: #0066cd;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c16 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
}

.c16 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c21 {
  font-size: 0.8rem;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin: 10px 0 0 4px;
  fill: #555;
  padding-left: 8px;
}

.c21 svg {
  margin-right: 7px;
}

.c11 {
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: #555;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 3px 0 0 3px;
}

.c11:hover,
.c11:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
}

.c19 {
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: transparent;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 0 3px 3px 0;
}

.c19:hover,
.c19:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
}

.c10 {
  display: inline-block;
  margin-top: 10px;
  margin-left: 20px;
  border: 1px solid #dbdbdb;
  border-radius: 4px;
  background-color: #f7f7f7;
  vertical-align: top;
}

.c18 {
  width: 22px;
  height: 22px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c20 {
  width: 18px;
  height: 18px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c22 {
  width: 16px;
  height: 16px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

@media all and ( -ms-high-contrast:none ),( -ms-high-contrast:active ) {
  .c16::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

<div>
  <section>
    <div
      className="c0"
      onMouseLeave={undefined}
      width={640}
    >
      <div
        className="c1"
      >
        <span
          className="screen-reader-text"
          style={
            Object {
              "clip": "rect(1px, 1px, 1px, 1px)",
              "height": "1px",
              "overflow": "hidden",
              "position": "absolute",
              "width": "1px",
            }
          }
        >
          SEO title preview:
        </span>
        <div
          className="c2"
          onClick={[Function]}
          onMouseLeave={[Function]}
          onMouseOver={[Function]}
        >
          <div
            className="c3 c4"
          >
            <span
              className="c5"
            >
              Test title
            </span>
          </div>
        </div>
        <span
          className="screen-reader-text"
          style={
            Object {
              "clip": "rect(1px, 1px, 1px, 1px)",
              "height": "1px",
              "overflow": "hidden",
              "position": "absolute",
              "width": "1px",
            }
          }
        >
          Url preview:
        </span>
        <div
          className="c6"
          onClick={[Function]}
          onMouseLeave={[Function]}
          onMouseOver={[Function]}
        >
          example.org â€º test-slug
        </div>
      </div>
      <hr
        className="c7"
      />
      <div
        className="c1"
      >
        <span
          className="screen-reader-text"
          style={
            Object {
              "clip": "rect(1px, 1px, 1px, 1px)",
              "height": "1px",
              "overflow": "hidden",
              "position": "absolute",
              "width": "1px",
            }
          }
        >
          Meta description preview:
        </span>
        <div
          className="c8 c9"
          color="#545454"
          onClick={[Function]}
          onMouseLeave={[Function]}
          onMouseOver={[Function]}
        >
          Test description, %%replacement_variable%%
        </div>
      </div>
    </div>
  </section>
  <div
    className="c10"
  >
    <button
      aria-pressed={true}
      className="c11 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 c17"
      onClick={[Function]}
      type="button"
    >
      <svg
        aria-hidden={true}
        className="yoast-svg-icon yoast-svg-icon-mobile c18"
        fill="currentColor"
        focusable="false"
        role="img"
        size="22px"
        viewBox="0 0 1792 1792"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
        />
      </svg>
      <span
        className="screen-reader-text"
        style={
          Object {
            "clip": "rect(1px, 1px, 1px, 1px)",
            "height": "1px",
            "overflow": "hidden",
            "position": "absolute",
            "width": "1px",
          }
        }
      >
        Mobile preview
      </span>
    </button>
    <button
      aria-pressed={false}
      className="c19 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 c17"
      onClick={[Function]}
      type="button"
    >
      <svg
        aria-hidden={true}
        className="yoast-svg-icon yoast-svg-icon-desktop c20"
        fill="currentColor"
        focusable="false"
        role="img"
        size="18px"
        viewBox="0 0 1792 1792"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
        />
      </svg>
      <span
        className="screen-reader-text"
        style={
          Object {
            "clip": "rect(1px, 1px, 1px, 1px)",
            "height": "1px",
            "overflow": "hidden",
            "position": "absolute",
            "width": "1px",
          }
        }
      >
        Desktop preview
      </span>
    </button>
  </div>
  <button
    aria-expanded={false}
    className="c21 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 c17"
    onClick={[Function]}
    type="button"
  >
    <svg
      aria-hidden={true}
      className="yoast-svg-icon yoast-svg-icon-edit c22"
      fill={undefined}
      focusable="false"
      role="img"
      size="16px"
      viewBox="0 0 1792 1792"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
      />
    </svg>
    <span>
      Edit snippet
    </span>
  </button>
</div>
`;

exports[`SnippetEditor highlights a hovered field 1`] = `
.c0 {
  border-bottom: 1px hidden #fff;
  border-radius: 2px;
  box-shadow: 0 1px 2px rgba(0,0,0,.2);
  margin: 0 20px 10px;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  max-width: 600px;
  box-sizing: border-box;
  font-size: 14px;
}

.c2 {
  cursor: pointer;
  position: relative;
}

.c4 {
  color: #1e0fbe;
  text-decoration: none;
  font-size: 18px;
  line-height: 1.2;
  font-weight: normal;
  margin: 0;
  display: inline-block;
  overflow: hidden;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c3 {
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c5 {
  display: inline-block;
  line-height: 1.2em;
  max-height: 2.4em;
  overflow: hidden;
  text-overflow: ellipsis;
  font-size: 16px;
}

.c6 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
}

.c9 {
  color: #545454;
  cursor: pointer;
  position: relative;
  max-width: 600px;
  font-size: 13px;
}

.c8 {
  max-height: 4em;
  overflow: hidden;
  font-size: 14px;
  line-height: 20px;
}

.c1 {
  padding: 8px 16px;
}

.c7 {
  border: 0;
  border-bottom: 1px solid #DFE1E5;
  margin: 0;
}

.c17 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
}

.c12 {
  font-size: 0.8rem;
}

.c13:active {
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c14:hover {
  color: #000;
}

.c15::-moz-focus-inner {
  border-width: 0;
}

.c15:focus {
  outline: none;
  border-color: #0066cd;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c16 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
}

.c16 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c21 {
  font-size: 0.8rem;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin: 10px 0 0 4px;
  fill: #555;
  padding-left: 8px;
}

.c21 svg {
  margin-right: 7px;
}

.c11 {
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: #555;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 3px 0 0 3px;
}

.c11:hover,
.c11:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
}

.c19 {
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: transparent;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 0 3px 3px 0;
}

.c19:hover,
.c19:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
}

.c10 {
  display: inline-block;
  margin-top: 10px;
  margin-left: 20px;
  border: 1px solid #dbdbdb;
  border-radius: 4px;
  background-color: #f7f7f7;
  vertical-align: top;
}

.c18 {
  width: 22px;
  height: 22px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c20 {
  width: 18px;
  height: 18px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c22 {
  width: 16px;
  height: 16px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

@media all and ( -ms-high-contrast:none ),( -ms-high-contrast:active ) {
  .c16::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

<div>
  <section>
    <div
      className="c0"
      onMouseLeave={undefined}
      width={640}
    >
      <div
        className="c1"
      >
        <span
          className="screen-reader-text"
          style={
            Object {
              "clip": "rect(1px, 1px, 1px, 1px)",
              "height": "1px",
              "overflow": "hidden",
              "position": "absolute",
              "width": "1px",
            }
          }
        >
          SEO title preview:
        </span>
        <div
          className="c2"
          onClick={[Function]}
          onMouseLeave={[Function]}
          onMouseOver={[Function]}
        >
          <div
            className="c3 c4"
          >
            <span
              className="c5"
            >
              Test title
            </span>
          </div>
        </div>
        <span
          className="screen-reader-text"
          style={
            Object {
              "clip": "rect(1px, 1px, 1px, 1px)",
              "height": "1px",
              "overflow": "hidden",
              "position": "absolute",
              "width": "1px",
            }
          }
        >
          Url preview:
        </span>
        <div
          className="c6"
          onClick={[Function]}
          onMouseLeave={[Function]}
          onMouseOver={[Function]}
        >
          example.org â€º test-slug
        </div>
      </div>
      <hr
        className="c7"
      />
      <div
        className="c1"
      >
        <span
          className="screen-reader-text"
          style={
            Object {
              "clip": "rect(1px, 1px, 1px, 1px)",
              "height": "1px",
              "overflow": "hidden",
              "position": "absolute",
              "width": "1px",
            }
          }
        >
          Meta description preview:
        </span>
        <div
          className="c8 c9"
          color="#545454"
          onClick={[Function]}
          onMouseLeave={[Function]}
          onMouseOver={[Function]}
        >
          Test description, %%replacement_variable%%
        </div>
      </div>
    </div>
  </section>
  <div
    className="c10"
  >
    <button
      aria-pressed={true}
      className="c11 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 c17"
      onClick={[Function]}
      type="button"
    >
      <svg
        aria-hidden={true}
        className="yoast-svg-icon yoast-svg-icon-mobile c18"
        fill="currentColor"
        focusable="false"
        role="img"
        size="22px"
        viewBox="0 0 1792 1792"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
        />
      </svg>
      <span
        className="screen-reader-text"
        style={
          Object {
            "clip": "rect(1px, 1px, 1px, 1px)",
            "height": "1px",
            "overflow": "hidden",
            "position": "absolute",
            "width": "1px",
          }
        }
      >
        Mobile preview
      </span>
    </button>
    <button
      aria-pressed={false}
      className="c19 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 c17"
      onClick={[Function]}
      type="button"
    >
      <svg
        aria-hidden={true}
        className="yoast-svg-icon yoast-svg-icon-desktop c20"
        fill="currentColor"
        focusable="false"
        role="img"
        size="18px"
        viewBox="0 0 1792 1792"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
        />
      </svg>
      <span
        className="screen-reader-text"
        style={
          Object {
            "clip": "rect(1px, 1px, 1px, 1px)",
            "height": "1px",
            "overflow": "hidden",
            "position": "absolute",
            "width": "1px",
          }
        }
      >
        Desktop preview
      </span>
    </button>
  </div>
  <button
    aria-expanded={false}
    className="c21 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 c17"
    onClick={[Function]}
    type="button"
  >
    <svg
      aria-hidden={true}
      className="yoast-svg-icon yoast-svg-icon-edit c22"
      fill={undefined}
      focusable="false"
      role="img"
      size="16px"
      viewBox="0 0 1792 1792"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
      />
    </svg>
    <span>
      Edit snippet
    </span>
  </button>
</div>
`;

exports[`SnippetEditor highlights the active field when calling setFieldFocus 1`] = `
.c0 {
  border-bottom: 1px hidden #fff;
  border-radius: 2px;
  box-shadow: 0 1px 2px rgba(0,0,0,.2);
  margin: 0 20px 10px;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  max-width: 600px;
  box-sizing: border-box;
  font-size: 14px;
}

.c2 {
  cursor: pointer;
  position: relative;
}

.c4 {
  color: #1e0fbe;
  text-decoration: none;
  font-size: 18px;
  line-height: 1.2;
  font-weight: normal;
  margin: 0;
  display: inline-block;
  overflow: hidden;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c3 {
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c5 {
  display: inline-block;
  line-height: 1.2em;
  max-height: 2.4em;
  overflow: hidden;
  text-overflow: ellipsis;
  font-size: 16px;
}

.c7 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
}

.c10 {
  color: #545454;
  cursor: pointer;
  position: relative;
  max-width: 600px;
  font-size: 13px;
}

.c9 {
  max-height: 4em;
  overflow: hidden;
  font-size: 14px;
  line-height: 20px;
}

.c1 {
  padding: 8px 16px;
}

.c8 {
  border: 0;
  border-bottom: 1px solid #DFE1E5;
  margin: 0;
}

.c28 {
  box-sizing: border-box;
  width: 100%;
  height: 8px;
  display: block;
  margin-top: 8px;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background-color: #f7f7f7;
  border: 1px solid #ddd;
}

.c28::-webkit-progress-bar {
  background-color: #f7f7f7;
}

.c28::-webkit-progress-value {
  background-color: #dc3232;
  -webkit-transition: width 250ms;
  transition: width 250ms;
}

.c28::-moz-progress-bar {
  background-color: #dc3232;
}

.c28::-ms-fill {
  background-color: #dc3232;
  border: 0;
}

.c27 {
  padding: 3px 5px;
  border: 1px solid #ddd;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  margin-top: 5px;
}

.c27::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width=%221792%22%20height=%221792%22%20viewBox=%220%200%201792%201792%22%20xmlns=%22http://www.w3.org/2000/svg%22%3E%3Cpath%20fill=%22transparent%22%20d=%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20/%3E%3C/svg%3E);
  background-size: 25px;
  content: "";
}

.c30 {
  padding: 3px 5px;
  border: 1px solid #ddd;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  margin-top: 5px;
  min-height: 60px;
  padding: 2px 6px;
  line-height: 19.6px;
}

.c30::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width=%221792%22%20height=%221792%22%20viewBox=%220%200%201792%201792%22%20xmlns=%22http://www.w3.org/2000/svg%22%3E%3Cpath%20fill=%22transparent%22%20d=%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20/%3E%3C/svg%3E);
  background-size: 25px;
  content: "";
}

.c29 {
  padding: 3px 5px;
  border: 1px solid #5b9dd9;
  box-shadow: 0 0 2px rgba(30,140,190,.8);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  margin-top: 5px;
}

.c29::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width=%221792%22%20height=%221792%22%20viewBox=%220%200%201792%201792%22%20xmlns=%22http://www.w3.org/2000/svg%22%3E%3Cpath%20fill=%22#1e8cbe%22%20d=%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20/%3E%3C/svg%3E);
  background-size: 25px;
  content: "";
}

.c25 {
  margin: 32px 0;
}

.c24 {
  padding: 10px 20px 20px 20px;
}

.c26 {
  cursor: pointer;
  font-size: 16px;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
}

.c18 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
}

.c13 {
  font-size: 0.8rem;
}

.c14:active {
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c15:hover {
  color: #000;
}

.c16::-moz-focus-inner {
  border-width: 0;
}

.c16:focus {
  outline: none;
  border-color: #0066cd;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c17 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
}

.c17 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c22 {
  font-size: 0.8rem;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin: 10px 0 0 4px;
  fill: #555;
  padding-left: 8px;
}

.c22 svg {
  margin-right: 7px;
}

.c31 {
  font-size: 0.8rem;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin-left: 20px;
}

.c12 {
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: #555;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 3px 0 0 3px;
}

.c12:hover,
.c12:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
}

.c20 {
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: transparent;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 0 3px 3px 0;
}

.c20:hover,
.c20:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
}

.c11 {
  display: inline-block;
  margin-top: 10px;
  margin-left: 20px;
  border: 1px solid #dbdbdb;
  border-radius: 4px;
  background-color: #f7f7f7;
  vertical-align: top;
}

.c19 {
  width: 22px;
  height: 22px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c21 {
  width: 18px;
  height: 18px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c23 {
  width: 16px;
  height: 16px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c6::before {
  display: block;
  position: absolute;
  top: -3px;
  left: -40px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width=%221792%22%20height=%221792%22%20viewBox=%220%200%201792%201792%22%20xmlns=%22http://www.w3.org/2000/svg%22%3E%3Cpath%20fill=%22#555%22%20d=%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20/%3E%3C/svg%3E);
  background-size: 25px;
  content: "";
}

@media all and ( -ms-high-contrast:none ),( -ms-high-contrast:active ) {
  .c17::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

<SnippetEditor
  baseUrl="https://example.org/"
  data={
    Object {
      "description": "Test description, %%replacement_variable%%",
      "slug": "test-slug",
      "title": "Test title",
    }
  }
  descriptionLengthAssessment={
    Object {
      "actual": 0,
      "max": 320,
      "score": 0,
    }
  }
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "textComponent": "span",
    }
  }
  mapDataToPreview={null}
  mode="mobile"
  onChange={[Function]}
  replacementVariables={Array []}
  titleLengthAssessment={
    Object {
      "actual": 0,
      "max": 600,
      "score": 0,
    }
  }
>
  <div>
    <SnippetPreview
      activeField="url"
      breadcrumbs={null}
      date=""
      description="Test description, %%replacement_variable%%"
      hoveredField={null}
      isAmp={false}
      isDescriptionGenerated={false}
      keyword=""
      locale="en_US"
      mode="mobile"
      onClick={[Function]}
      onHover={[Function]}
      onMouseLeave={[Function]}
      onMouseOver={[Function]}
      title="Test title"
      url="example.org/test-slug"
    >
      <section>
        <SnippetPreview__MobileContainer
          padding={20}
          width={640}
        >
          <div
            className="c0"
            width={640}
          >
            <SnippetPreview__MobilePartContainer>
              <div
                className="c1"
              >
                <FormattedScreenReaderMessage
                  after=":"
                  defaultMessage="SEO title preview"
                  id="snippetPreview.seoTitlePreview"
                >
                  <FormattedMessage
                    after=":"
                    defaultMessage="SEO title preview"
                    id="snippetPreview.seoTitlePreview"
                    values={Object {}}
                  >
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        SEO title preview:
                      </span>
                    </ScreenReaderText>
                  </FormattedMessage>
                </FormattedScreenReaderMessage>
                <SnippetPreview__BaseTitle
                  onClick={[Function]}
                  onMouseLeave={[Function]}
                  onMouseOver={[Function]}
                >
                  <div
                    className="c2"
                    onClick={[Function]}
                    onMouseLeave={[Function]}
                    onMouseOver={[Function]}
                  >
                    <SnippetPreview__TitleBounded>
                      <SnippetPreview__Title
                        className="c3"
                      >
                        <div
                          className="c3 c4"
                        >
                          <SnippetPreview__TitleUnboundedMobile
                            innerRef={[Function]}
                          >
                            <span
                              className="c5"
                            >
                              Test title
                            </span>
                          </SnippetPreview__TitleUnboundedMobile>
                        </div>
                      </SnippetPreview__Title>
                    </SnippetPreview__TitleBounded>
                  </div>
                </SnippetPreview__BaseTitle>
                <FormattedScreenReaderMessage
                  after=":"
                  defaultMessage="Url preview"
                  id="snippetPreview.urlPreview"
                >
                  <FormattedMessage
                    after=":"
                    defaultMessage="Url preview"
                    id="snippetPreview.urlPreview"
                    values={Object {}}
                  >
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Url preview:
                      </span>
                    </ScreenReaderText>
                  </FormattedMessage>
                </FormattedScreenReaderMessage>
                <SnippetPreview
                  onClick={[Function]}
                  onMouseLeave={[Function]}
                  onMouseOver={[Function]}
                >
                  <SnippetPreview__BaseUrl
                    className="c6"
                    onClick={[Function]}
                    onMouseLeave={[Function]}
                    onMouseOver={[Function]}
                  >
                    <div
                      className="c6 c7"
                      onClick={[Function]}
                      onMouseLeave={[Function]}
                      onMouseOver={[Function]}
                    >
                      example.org â€º test-slug
                    </div>
                  </SnippetPreview__BaseUrl>
                </SnippetPreview>
              </div>
            </SnippetPreview__MobilePartContainer>
            <SnippetPreview__Separator>
              <hr
                className="c8"
              />
            </SnippetPreview__Separator>
            <SnippetPreview__MobilePartContainer>
              <div
                className="c1"
              >
                <FormattedScreenReaderMessage
                  after=":"
                  defaultMessage="Meta description preview"
                  id="snippetPreview.metaDescriptionPreview"
                >
                  <FormattedMessage
                    after=":"
                    defaultMessage="Meta description preview"
                    id="snippetPreview.metaDescriptionPreview"
                    values={Object {}}
                  >
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Meta description preview:
                      </span>
                    </ScreenReaderText>
                  </FormattedMessage>
                </FormattedScreenReaderMessage>
                <SnippetPreview__MobileDescription
                  innerRef={[Function]}
                  isDescriptionGenerated={false}
                  onClick={[Function]}
                  onMouseLeave={[Function]}
                  onMouseOver={[Function]}
                >
                  <SnippetPreview__DesktopDescription
                    className="c9"
                    innerRef={[Function]}
                    isDescriptionGenerated={false}
                    onClick={[Function]}
                    onMouseLeave={[Function]}
                    onMouseOver={[Function]}
                  >
                    <div
                      className="c9 c10"
                      color="#545454"
                      onClick={[Function]}
                      onMouseLeave={[Function]}
                      onMouseOver={[Function]}
                    >
                      Test description, %%replacement_variable%%
                    </div>
                  </SnippetPreview__DesktopDescription>
                </SnippetPreview__MobileDescription>
              </div>
            </SnippetPreview__MobilePartContainer>
          </div>
        </SnippetPreview__MobileContainer>
      </section>
    </SnippetPreview>
    <ModeSwitcher
      active="mobile"
      onChange={[Function]}
    >
      <ModeSwitcher__Switcher>
        <div
          className="c11"
        >
          <ModeSwitcher__SwitcherButton
            aria-pressed={true}
            isActive={true}
            onClick={[Function]}
          >
            <Button
              aria-pressed={true}
              className="c12"
              isActive={true}
              onClick={[Function]}
            >
              <Button
                aria-pressed={true}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                className="c12 c13"
                isActive={true}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <Button
                  aria-pressed={true}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  className="c12 c13 Button-kDSBcD c14"
                  isActive={true}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <Button
                    aria-pressed={true}
                    backgroundColor="#f7f7f7"
                    borderColor="#ccc"
                    boxShadowColor="#ccc"
                    className="c12 c13 Button-kDSBcD c14 Button-kDSBcD c15"
                    isActive={true}
                    onClick={[Function]}
                    textColor="#555"
                    type="button"
                  >
                    <Button
                      aria-pressed={true}
                      backgroundColor="#f7f7f7"
                      borderColor="#ccc"
                      boxShadowColor="#ccc"
                      className="c12 c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16"
                      isActive={true}
                      onClick={[Function]}
                      textColor="#555"
                      type="button"
                    >
                      <Button__BaseButton
                        aria-pressed={true}
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        className="c12 c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 Button-kDSBcD c17"
                        isActive={true}
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <button
                          aria-pressed={true}
                          className="c12 c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 Button-kDSBcD c17 c18"
                          onClick={[Function]}
                          type="button"
                        >
                          <SvgIcon
                            color="currentColor"
                            icon="mobile"
                            size="22px"
                          >
                            <SvgIcon__StyledSvg
                              aria-hidden={true}
                              className="yoast-svg-icon yoast-svg-icon-mobile"
                              fill="currentColor"
                              focusable="false"
                              role="img"
                              size="22px"
                              viewBox="0 0 1792 1792"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <svg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-mobile c19"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="22px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
                                />
                              </svg>
                            </SvgIcon__StyledSvg>
                          </SvgIcon>
                          <FormattedScreenReaderMessage
                            defaultMessage="Mobile preview"
                            id="snippetEditor.desktopPreview"
                          >
                            <FormattedMessage
                              defaultMessage="Mobile preview"
                              id="snippetEditor.desktopPreview"
                              values={Object {}}
                            >
                              <ScreenReaderText>
                                <span
                                  className="screen-reader-text"
                                  style={
                                    Object {
                                      "clip": "rect(1px, 1px, 1px, 1px)",
                                      "height": "1px",
                                      "overflow": "hidden",
                                      "position": "absolute",
                                      "width": "1px",
                                    }
                                  }
                                >
                                  Mobile preview
                                </span>
                              </ScreenReaderText>
                            </FormattedMessage>
                          </FormattedScreenReaderMessage>
                        </button>
                      </Button__BaseButton>
                    </Button>
                  </Button>
                </Button>
              </Button>
            </Button>
          </ModeSwitcher__SwitcherButton>
          <ModeSwitcher__SwitcherButton
            aria-pressed={false}
            isActive={false}
            onClick={[Function]}
          >
            <Button
              aria-pressed={false}
              className="c20"
              isActive={false}
              onClick={[Function]}
            >
              <Button
                aria-pressed={false}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                className="c20 c13"
                isActive={false}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <Button
                  aria-pressed={false}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  className="c20 c13 Button-kDSBcD c14"
                  isActive={false}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <Button
                    aria-pressed={false}
                    backgroundColor="#f7f7f7"
                    borderColor="#ccc"
                    boxShadowColor="#ccc"
                    className="c20 c13 Button-kDSBcD c14 Button-kDSBcD c15"
                    isActive={false}
                    onClick={[Function]}
                    textColor="#555"
                    type="button"
                  >
                    <Button
                      aria-pressed={false}
                      backgroundColor="#f7f7f7"
                      borderColor="#ccc"
                      boxShadowColor="#ccc"
                      className="c20 c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16"
                      isActive={false}
                      onClick={[Function]}
                      textColor="#555"
                      type="button"
                    >
                      <Button__BaseButton
                        aria-pressed={false}
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        className="c20 c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 Button-kDSBcD c17"
                        isActive={false}
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <button
                          aria-pressed={false}
                          className="c20 c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 Button-kDSBcD c17 c18"
                          onClick={[Function]}
                          type="button"
                        >
                          <SvgIcon
                            color="currentColor"
                            icon="desktop"
                            size="18px"
                          >
                            <SvgIcon__StyledSvg
                              aria-hidden={true}
                              className="yoast-svg-icon yoast-svg-icon-desktop"
                              fill="currentColor"
                              focusable="false"
                              role="img"
                              size="18px"
                              viewBox="0 0 1792 1792"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <svg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-desktop c21"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="18px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
                                />
                              </svg>
                            </SvgIcon__StyledSvg>
                          </SvgIcon>
                          <FormattedScreenReaderMessage
                            defaultMessage="Desktop preview"
                            id="snippetEditor.desktopPreview"
                          >
                            <FormattedMessage
                              defaultMessage="Desktop preview"
                              id="snippetEditor.desktopPreview"
                              values={Object {}}
                            >
                              <ScreenReaderText>
                                <span
                                  className="screen-reader-text"
                                  style={
                                    Object {
                                      "clip": "rect(1px, 1px, 1px, 1px)",
                                      "height": "1px",
                                      "overflow": "hidden",
                                      "position": "absolute",
                                      "width": "1px",
                                    }
                                  }
                                >
                                  Desktop preview
                                </span>
                              </ScreenReaderText>
                            </FormattedMessage>
                          </FormattedScreenReaderMessage>
                        </button>
                      </Button__BaseButton>
                    </Button>
                  </Button>
                </Button>
              </Button>
            </Button>
          </ModeSwitcher__SwitcherButton>
        </div>
      </ModeSwitcher__Switcher>
    </ModeSwitcher>
    <Button
      aria-expanded={true}
      innerRef={[Function]}
      onClick={[Function]}
    >
      <Button
        aria-expanded={true}
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        className="c22"
        innerRef={[Function]}
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <Button
          aria-expanded={true}
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          className="c22 Button-kDSBcD c14"
          innerRef={[Function]}
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <Button
            aria-expanded={true}
            backgroundColor="#f7f7f7"
            borderColor="#ccc"
            boxShadowColor="#ccc"
            className="c22 Button-kDSBcD c14 Button-kDSBcD c15"
            innerRef={[Function]}
            onClick={[Function]}
            textColor="#555"
            type="button"
          >
            <Button
              aria-expanded={true}
              backgroundColor="#f7f7f7"
              borderColor="#ccc"
              boxShadowColor="#ccc"
              className="c22 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16"
              innerRef={[Function]}
              onClick={[Function]}
              textColor="#555"
              type="button"
            >
              <Button__BaseButton
                aria-expanded={true}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                className="c22 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 Button-kDSBcD c17"
                innerRef={[Function]}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <button
                  aria-expanded={true}
                  className="c22 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 Button-kDSBcD c17 c18"
                  onClick={[Function]}
                  type="button"
                >
                  <SvgIcon
                    icon="edit"
                    size="16px"
                  >
                    <SvgIcon__StyledSvg
                      aria-hidden={true}
                      className="yoast-svg-icon yoast-svg-icon-edit"
                      focusable="false"
                      role="img"
                      size="16px"
                      viewBox="0 0 1792 1792"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <svg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-edit c23"
                        focusable="false"
                        role="img"
                        size="16px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
                        />
                      </svg>
                    </SvgIcon__StyledSvg>
                  </SvgIcon>
                  <FormattedMessage
                    defaultMessage="Edit snippet"
                    id="snippetEditor.editSnippet"
                    values={Object {}}
                  >
                    <span>
                      Edit snippet
                    </span>
                  </FormattedMessage>
                </button>
              </Button__BaseButton>
            </Button>
          </Button>
        </Button>
      </Button>
    </Button>
    <InjectIntl(SnippetEditorFields)
      activeField="slug"
      data={
        Object {
          "description": "Test description, %%replacement_variable%%",
          "slug": "test-slug",
          "title": "Test title",
        }
      }
      descriptionLengthAssessment={
        Object {
          "actual": 0,
          "max": 320,
          "score": 0,
        }
      }
      hoveredField={null}
      onChange={[Function]}
      onFocus={[Function]}
      replacementVariables={Array []}
      titleLengthAssessment={
        Object {
          "actual": 0,
          "max": 600,
          "score": 0,
        }
      }
    >
      <SnippetEditorFields
        activeField="slug"
        data={
          Object {
            "description": "Test description, %%replacement_variable%%",
            "slug": "test-slug",
            "title": "Test title",
          }
        }
        descriptionLengthAssessment={
          Object {
            "actual": 0,
            "max": 320,
            "score": 0,
          }
        }
        hoveredField={null}
        intl={
          Object {
            "defaultFormats": Object {},
            "defaultLocale": "en",
            "formatDate": [Function],
            "formatHTMLMessage": [Function],
            "formatMessage": [Function],
            "formatNumber": [Function],
            "formatPlural": [Function],
            "formatRelative": [Function],
            "formatTime": [Function],
            "formats": Object {},
            "formatters": Object {
              "getDateTimeFormat": [Function],
              "getMessageFormat": [Function],
              "getNumberFormat": [Function],
              "getPluralFormat": [Function],
              "getRelativeFormat": [Function],
            },
            "locale": "en",
            "messages": Object {},
            "now": [Function],
            "textComponent": "span",
          }
        }
        onChange={[Function]}
        onFocus={[Function]}
        replacementVariables={Array []}
        titleLengthAssessment={
          Object {
            "actual": 0,
            "max": 600,
            "score": 0,
          }
        }
      >
        <SnippetEditorFields__StyledEditor>
          <section
            className="c24"
          >
            <SnippetEditorFields__FormSection>
              <div
                className="c25"
              >
                <SnippetEditorFields__SimulatedLabel
                  id="snippet-editor-field-4-title"
                  onClick={[Function]}
                >
                  <div
                    className="c26"
                    id="snippet-editor-field-4-title"
                    onClick={[Function]}
                  >
                    SEO title
                  </div>
                </SnippetEditorFields__SimulatedLabel>
                <SnippetEditorFields__InputContainer
                  isActive={false}
                  isHovered={false}
                >
                  <div
                    className="c27"
                  >
                    <ReplacementVariableEditor
                      ariaLabelledBy="snippet-editor-field-4-title"
                      content="Test title"
                      onChange={[Function]}
                      onFocus={[Function]}
                      replacementVariables={Array []}
                    >
                      <div />
                    </ReplacementVariableEditor>
                  </div>
                </SnippetEditorFields__InputContainer>
                <ProgressBar
                  aria-hidden="true"
                  backgroundColor="#f7f7f7"
                  borderColor="#ddd"
                  max={600}
                  progressColor="#dc3232"
                  value={0}
                >
                  <progress
                    aria-hidden="true"
                    className="c28"
                    max={600}
                    value={0}
                  />
                </ProgressBar>
              </div>
            </SnippetEditorFields__FormSection>
            <SnippetEditorFields__FormSection>
              <div
                className="c25"
              >
                <SnippetEditorFields__SimulatedLabel
                  id="snippet-editor-field-4-slug"
                  onClick={[Function]}
                >
                  <div
                    className="c26"
                    id="snippet-editor-field-4-slug"
                    onClick={[Function]}
                  >
                    Slug
                  </div>
                </SnippetEditorFields__SimulatedLabel>
                <SnippetEditorFields__InputContainer
                  isActive={true}
                  isHovered={false}
                >
                  <div
                    className="c29"
                  >
                    <ReplacementVariableEditor
                      ariaLabelledBy="snippet-editor-field-4-slug"
                      content="test-slug"
                      onChange={[Function]}
                      onFocus={[Function]}
                      replacementVariables={Array []}
                    >
                      <div />
                    </ReplacementVariableEditor>
                  </div>
                </SnippetEditorFields__InputContainer>
              </div>
            </SnippetEditorFields__FormSection>
            <SnippetEditorFields__FormSection>
              <div
                className="c25"
              >
                <SnippetEditorFields__SimulatedLabel
                  id="snippet-editor-field-4-description"
                  onClick={[Function]}
                >
                  <div
                    className="c26"
                    id="snippet-editor-field-4-description"
                    onClick={[Function]}
                  >
                    Meta description
                  </div>
                </SnippetEditorFields__SimulatedLabel>
                <SnippetEditorFields__InputContainer
                  isActive={false}
                  isHovered={false}
                >
                  <div
                    className="c30"
                  >
                    <ReplacementVariableEditor
                      ariaLabelledBy="snippet-editor-field-4-description"
                      content="Test description, %%replacement_variable%%"
                      onChange={[Function]}
                      onFocus={[Function]}
                      replacementVariables={Array []}
                    >
                      <div />
                    </ReplacementVariableEditor>
                  </div>
                </SnippetEditorFields__InputContainer>
                <ProgressBar
                  aria-hidden="true"
                  backgroundColor="#f7f7f7"
                  borderColor="#ddd"
                  max={320}
                  progressColor="#dc3232"
                  value={0}
                >
                  <progress
                    aria-hidden="true"
                    className="c28"
                    max={320}
                    value={0}
                  />
                </ProgressBar>
              </div>
            </SnippetEditorFields__FormSection>
          </section>
        </SnippetEditorFields__StyledEditor>
      </SnippetEditorFields>
    </InjectIntl(SnippetEditorFields)>
    <Button
      onClick={[Function]}
    >
      <Button
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        className="c31"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <Button
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          className="c31 Button-kDSBcD c14"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <Button
            backgroundColor="#f7f7f7"
            borderColor="#ccc"
            boxShadowColor="#ccc"
            className="c31 Button-kDSBcD c14 Button-kDSBcD c15"
            onClick={[Function]}
            textColor="#555"
            type="button"
          >
            <Button
              backgroundColor="#f7f7f7"
              borderColor="#ccc"
              boxShadowColor="#ccc"
              className="c31 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16"
              onClick={[Function]}
              textColor="#555"
              type="button"
            >
              <Button__BaseButton
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                className="c31 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 Button-kDSBcD c17"
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <button
                  className="c31 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 Button-kDSBcD c17 c18"
                  onClick={[Function]}
                  type="button"
                >
                  <FormattedMessage
                    defaultMessage="Close snippet editor"
                    id="snippet-editor.close-editor"
                    values={Object {}}
                  >
                    <span>
                      Close snippet editor
                    </span>
                  </FormattedMessage>
                </button>
              </Button__BaseButton>
            </Button>
          </Button>
        </Button>
      </Button>
    </Button>
  </div>
</SnippetEditor>
`;

exports[`SnippetEditor highlights the hovered field when onMouseOver() is called 1`] = `
.c0 {
  border-bottom: 1px hidden #fff;
  border-radius: 2px;
  box-shadow: 0 1px 2px rgba(0,0,0,.2);
  margin: 0 20px 10px;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  max-width: 600px;
  box-sizing: border-box;
  font-size: 14px;
}

.c2 {
  cursor: pointer;
  position: relative;
}

.c4 {
  color: #1e0fbe;
  text-decoration: none;
  font-size: 18px;
  line-height: 1.2;
  font-weight: normal;
  margin: 0;
  display: inline-block;
  overflow: hidden;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c3 {
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c5 {
  display: inline-block;
  line-height: 1.2em;
  max-height: 2.4em;
  overflow: hidden;
  text-overflow: ellipsis;
  font-size: 16px;
}

.c6 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
}

.c10 {
  color: #545454;
  cursor: pointer;
  position: relative;
  max-width: 600px;
  font-size: 13px;
}

.c9 {
  max-height: 4em;
  overflow: hidden;
  font-size: 14px;
  line-height: 20px;
}

.c1 {
  padding: 8px 16px;
}

.c7 {
  border: 0;
  border-bottom: 1px solid #DFE1E5;
  margin: 0;
}

.c28 {
  box-sizing: border-box;
  width: 100%;
  height: 8px;
  display: block;
  margin-top: 8px;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background-color: #f7f7f7;
  border: 1px solid #ddd;
}

.c28::-webkit-progress-bar {
  background-color: #f7f7f7;
}

.c28::-webkit-progress-value {
  background-color: #dc3232;
  -webkit-transition: width 250ms;
  transition: width 250ms;
}

.c28::-moz-progress-bar {
  background-color: #dc3232;
}

.c28::-ms-fill {
  background-color: #dc3232;
  border: 0;
}

.c27 {
  padding: 3px 5px;
  border: 1px solid #ddd;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  margin-top: 5px;
}

.c27::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width=%221792%22%20height=%221792%22%20viewBox=%220%200%201792%201792%22%20xmlns=%22http://www.w3.org/2000/svg%22%3E%3Cpath%20fill=%22transparent%22%20d=%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20/%3E%3C/svg%3E);
  background-size: 25px;
  content: "";
}

.c29 {
  padding: 3px 5px;
  border: 1px solid #ddd;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  margin-top: 5px;
  min-height: 60px;
  padding: 2px 6px;
  line-height: 19.6px;
}

.c29::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width=%221792%22%20height=%221792%22%20viewBox=%220%200%201792%201792%22%20xmlns=%22http://www.w3.org/2000/svg%22%3E%3Cpath%20fill=%22#ccc%22%20d=%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20/%3E%3C/svg%3E);
  background-size: 25px;
  content: "";
}

.c25 {
  margin: 32px 0;
}

.c24 {
  padding: 10px 20px 20px 20px;
}

.c26 {
  cursor: pointer;
  font-size: 16px;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
}

.c18 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
}

.c13 {
  font-size: 0.8rem;
}

.c14:active {
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c15:hover {
  color: #000;
}

.c16::-moz-focus-inner {
  border-width: 0;
}

.c16:focus {
  outline: none;
  border-color: #0066cd;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c17 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
}

.c17 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c22 {
  font-size: 0.8rem;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin: 10px 0 0 4px;
  fill: #555;
  padding-left: 8px;
}

.c22 svg {
  margin-right: 7px;
}

.c30 {
  font-size: 0.8rem;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin-left: 20px;
}

.c12 {
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: #555;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 3px 0 0 3px;
}

.c12:hover,
.c12:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
}

.c20 {
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: transparent;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 0 3px 3px 0;
}

.c20:hover,
.c20:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
}

.c11 {
  display: inline-block;
  margin-top: 10px;
  margin-left: 20px;
  border: 1px solid #dbdbdb;
  border-radius: 4px;
  background-color: #f7f7f7;
  vertical-align: top;
}

.c19 {
  width: 22px;
  height: 22px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c21 {
  width: 18px;
  height: 18px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c23 {
  width: 16px;
  height: 16px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c8::before {
  display: block;
  position: absolute;
  top: -3px;
  left: -40px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width=%221792%22%20height=%221792%22%20viewBox=%220%200%201792%201792%22%20xmlns=%22http://www.w3.org/2000/svg%22%3E%3Cpath%20fill=%22#ccc%22%20d=%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20/%3E%3C/svg%3E);
  background-size: 25px;
  content: "";
}

@media all and ( -ms-high-contrast:none ),( -ms-high-contrast:active ) {
  .c17::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

<SnippetEditor
  baseUrl="https://example.org/"
  data={
    Object {
      "description": "Test description, %%replacement_variable%%",
      "slug": "test-slug",
      "title": "Test title",
    }
  }
  descriptionLengthAssessment={
    Object {
      "actual": 0,
      "max": 320,
      "score": 0,
    }
  }
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "textComponent": "span",
    }
  }
  mapDataToPreview={null}
  mode="mobile"
  onChange={[Function]}
  replacementVariables={Array []}
  titleLengthAssessment={
    Object {
      "actual": 0,
      "max": 600,
      "score": 0,
    }
  }
>
  <div>
    <SnippetPreview
      activeField={null}
      breadcrumbs={null}
      date=""
      description="Test description, %%replacement_variable%%"
      hoveredField="description"
      isAmp={false}
      isDescriptionGenerated={false}
      keyword=""
      locale="en_US"
      mode="mobile"
      onClick={[Function]}
      onHover={[Function]}
      onMouseLeave={[Function]}
      onMouseOver={[Function]}
      title="Test title"
      url="example.org/test-slug"
    >
      <section>
        <SnippetPreview__MobileContainer
          padding={20}
          width={640}
        >
          <div
            className="c0"
            width={640}
          >
            <SnippetPreview__MobilePartContainer>
              <div
                className="c1"
              >
                <FormattedScreenReaderMessage
                  after=":"
                  defaultMessage="SEO title preview"
                  id="snippetPreview.seoTitlePreview"
                >
                  <FormattedMessage
                    after=":"
                    defaultMessage="SEO title preview"
                    id="snippetPreview.seoTitlePreview"
                    values={Object {}}
                  >
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        SEO title preview:
                      </span>
                    </ScreenReaderText>
                  </FormattedMessage>
                </FormattedScreenReaderMessage>
                <SnippetPreview__BaseTitle
                  onClick={[Function]}
                  onMouseLeave={[Function]}
                  onMouseOver={[Function]}
                >
                  <div
                    className="c2"
                    onClick={[Function]}
                    onMouseLeave={[Function]}
                    onMouseOver={[Function]}
                  >
                    <SnippetPreview__TitleBounded>
                      <SnippetPreview__Title
                        className="c3"
                      >
                        <div
                          className="c3 c4"
                        >
                          <SnippetPreview__TitleUnboundedMobile
                            innerRef={[Function]}
                          >
                            <span
                              className="c5"
                            >
                              Test title
                            </span>
                          </SnippetPreview__TitleUnboundedMobile>
                        </div>
                      </SnippetPreview__Title>
                    </SnippetPreview__TitleBounded>
                  </div>
                </SnippetPreview__BaseTitle>
                <FormattedScreenReaderMessage
                  after=":"
                  defaultMessage="Url preview"
                  id="snippetPreview.urlPreview"
                >
                  <FormattedMessage
                    after=":"
                    defaultMessage="Url preview"
                    id="snippetPreview.urlPreview"
                    values={Object {}}
                  >
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Url preview:
                      </span>
                    </ScreenReaderText>
                  </FormattedMessage>
                </FormattedScreenReaderMessage>
                <SnippetPreview__BaseUrl
                  onClick={[Function]}
                  onMouseLeave={[Function]}
                  onMouseOver={[Function]}
                >
                  <div
                    className="c6"
                    onClick={[Function]}
                    onMouseLeave={[Function]}
                    onMouseOver={[Function]}
                  >
                    example.org â€º test-slug
                  </div>
                </SnippetPreview__BaseUrl>
              </div>
            </SnippetPreview__MobilePartContainer>
            <SnippetPreview__Separator>
              <hr
                className="c7"
              />
            </SnippetPreview__Separator>
            <SnippetPreview__MobilePartContainer>
              <div
                className="c1"
              >
                <FormattedScreenReaderMessage
                  after=":"
                  defaultMessage="Meta description preview"
                  id="snippetPreview.metaDescriptionPreview"
                >
                  <FormattedMessage
                    after=":"
                    defaultMessage="Meta description preview"
                    id="snippetPreview.metaDescriptionPreview"
                    values={Object {}}
                  >
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Meta description preview:
                      </span>
                    </ScreenReaderText>
                  </FormattedMessage>
                </FormattedScreenReaderMessage>
                <SnippetPreview
                  innerRef={[Function]}
                  isDescriptionGenerated={false}
                  onClick={[Function]}
                  onMouseLeave={[Function]}
                  onMouseOver={[Function]}
                >
                  <SnippetPreview__MobileDescription
                    className="c8"
                    innerRef={[Function]}
                    isDescriptionGenerated={false}
                    onClick={[Function]}
                    onMouseLeave={[Function]}
                    onMouseOver={[Function]}
                  >
                    <SnippetPreview__DesktopDescription
                      className="c8 c9"
                      innerRef={[Function]}
                      isDescriptionGenerated={false}
                      onClick={[Function]}
                      onMouseLeave={[Function]}
                      onMouseOver={[Function]}
                    >
                      <div
                        className="c8 c9 c10"
                        color="#545454"
                        onClick={[Function]}
                        onMouseLeave={[Function]}
                        onMouseOver={[Function]}
                      >
                        Test description, %%replacement_variable%%
                      </div>
                    </SnippetPreview__DesktopDescription>
                  </SnippetPreview__MobileDescription>
                </SnippetPreview>
              </div>
            </SnippetPreview__MobilePartContainer>
          </div>
        </SnippetPreview__MobileContainer>
      </section>
    </SnippetPreview>
    <ModeSwitcher
      active="mobile"
      onChange={[Function]}
    >
      <ModeSwitcher__Switcher>
        <div
          className="c11"
        >
          <ModeSwitcher__SwitcherButton
            aria-pressed={true}
            isActive={true}
            onClick={[Function]}
          >
            <Button
              aria-pressed={true}
              className="c12"
              isActive={true}
              onClick={[Function]}
            >
              <Button
                aria-pressed={true}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                className="c12 c13"
                isActive={true}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <Button
                  aria-pressed={true}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  className="c12 c13 Button-kDSBcD c14"
                  isActive={true}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <Button
                    aria-pressed={true}
                    backgroundColor="#f7f7f7"
                    borderColor="#ccc"
                    boxShadowColor="#ccc"
                    className="c12 c13 Button-kDSBcD c14 Button-kDSBcD c15"
                    isActive={true}
                    onClick={[Function]}
                    textColor="#555"
                    type="button"
                  >
                    <Button
                      aria-pressed={true}
                      backgroundColor="#f7f7f7"
                      borderColor="#ccc"
                      boxShadowColor="#ccc"
                      className="c12 c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16"
                      isActive={true}
                      onClick={[Function]}
                      textColor="#555"
                      type="button"
                    >
                      <Button__BaseButton
                        aria-pressed={true}
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        className="c12 c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 Button-kDSBcD c17"
                        isActive={true}
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <button
                          aria-pressed={true}
                          className="c12 c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 Button-kDSBcD c17 c18"
                          onClick={[Function]}
                          type="button"
                        >
                          <SvgIcon
                            color="currentColor"
                            icon="mobile"
                            size="22px"
                          >
                            <SvgIcon__StyledSvg
                              aria-hidden={true}
                              className="yoast-svg-icon yoast-svg-icon-mobile"
                              fill="currentColor"
                              focusable="false"
                              role="img"
                              size="22px"
                              viewBox="0 0 1792 1792"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <svg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-mobile c19"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="22px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
                                />
                              </svg>
                            </SvgIcon__StyledSvg>
                          </SvgIcon>
                          <FormattedScreenReaderMessage
                            defaultMessage="Mobile preview"
                            id="snippetEditor.desktopPreview"
                          >
                            <FormattedMessage
                              defaultMessage="Mobile preview"
                              id="snippetEditor.desktopPreview"
                              values={Object {}}
                            >
                              <ScreenReaderText>
                                <span
                                  className="screen-reader-text"
                                  style={
                                    Object {
                                      "clip": "rect(1px, 1px, 1px, 1px)",
                                      "height": "1px",
                                      "overflow": "hidden",
                                      "position": "absolute",
                                      "width": "1px",
                                    }
                                  }
                                >
                                  Mobile preview
                                </span>
                              </ScreenReaderText>
                            </FormattedMessage>
                          </FormattedScreenReaderMessage>
                        </button>
                      </Button__BaseButton>
                    </Button>
                  </Button>
                </Button>
              </Button>
            </Button>
          </ModeSwitcher__SwitcherButton>
          <ModeSwitcher__SwitcherButton
            aria-pressed={false}
            isActive={false}
            onClick={[Function]}
          >
            <Button
              aria-pressed={false}
              className="c20"
              isActive={false}
              onClick={[Function]}
            >
              <Button
                aria-pressed={false}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                className="c20 c13"
                isActive={false}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <Button
                  aria-pressed={false}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  className="c20 c13 Button-kDSBcD c14"
                  isActive={false}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <Button
                    aria-pressed={false}
                    backgroundColor="#f7f7f7"
                    borderColor="#ccc"
                    boxShadowColor="#ccc"
                    className="c20 c13 Button-kDSBcD c14 Button-kDSBcD c15"
                    isActive={false}
                    onClick={[Function]}
                    textColor="#555"
                    type="button"
                  >
                    <Button
                      aria-pressed={false}
                      backgroundColor="#f7f7f7"
                      borderColor="#ccc"
                      boxShadowColor="#ccc"
                      className="c20 c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16"
                      isActive={false}
                      onClick={[Function]}
                      textColor="#555"
                      type="button"
                    >
                      <Button__BaseButton
                        aria-pressed={false}
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        className="c20 c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 Button-kDSBcD c17"
                        isActive={false}
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <button
                          aria-pressed={false}
                          className="c20 c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 Button-kDSBcD c17 c18"
                          onClick={[Function]}
                          type="button"
                        >
                          <SvgIcon
                            color="currentColor"
                            icon="desktop"
                            size="18px"
                          >
                            <SvgIcon__StyledSvg
                              aria-hidden={true}
                              className="yoast-svg-icon yoast-svg-icon-desktop"
                              fill="currentColor"
                              focusable="false"
                              role="img"
                              size="18px"
                              viewBox="0 0 1792 1792"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <svg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-desktop c21"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="18px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
                                />
                              </svg>
                            </SvgIcon__StyledSvg>
                          </SvgIcon>
                          <FormattedScreenReaderMessage
                            defaultMessage="Desktop preview"
                            id="snippetEditor.desktopPreview"
                          >
                            <FormattedMessage
                              defaultMessage="Desktop preview"
                              id="snippetEditor.desktopPreview"
                              values={Object {}}
                            >
                              <ScreenReaderText>
                                <span
                                  className="screen-reader-text"
                                  style={
                                    Object {
                                      "clip": "rect(1px, 1px, 1px, 1px)",
                                      "height": "1px",
                                      "overflow": "hidden",
                                      "position": "absolute",
                                      "width": "1px",
                                    }
                                  }
                                >
                                  Desktop preview
                                </span>
                              </ScreenReaderText>
                            </FormattedMessage>
                          </FormattedScreenReaderMessage>
                        </button>
                      </Button__BaseButton>
                    </Button>
                  </Button>
                </Button>
              </Button>
            </Button>
          </ModeSwitcher__SwitcherButton>
        </div>
      </ModeSwitcher__Switcher>
    </ModeSwitcher>
    <Button
      aria-expanded={true}
      innerRef={[Function]}
      onClick={[Function]}
    >
      <Button
        aria-expanded={true}
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        className="c22"
        innerRef={[Function]}
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <Button
          aria-expanded={true}
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          className="c22 Button-kDSBcD c14"
          innerRef={[Function]}
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <Button
            aria-expanded={true}
            backgroundColor="#f7f7f7"
            borderColor="#ccc"
            boxShadowColor="#ccc"
            className="c22 Button-kDSBcD c14 Button-kDSBcD c15"
            innerRef={[Function]}
            onClick={[Function]}
            textColor="#555"
            type="button"
          >
            <Button
              aria-expanded={true}
              backgroundColor="#f7f7f7"
              borderColor="#ccc"
              boxShadowColor="#ccc"
              className="c22 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16"
              innerRef={[Function]}
              onClick={[Function]}
              textColor="#555"
              type="button"
            >
              <Button__BaseButton
                aria-expanded={true}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                className="c22 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 Button-kDSBcD c17"
                innerRef={[Function]}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <button
                  aria-expanded={true}
                  className="c22 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 Button-kDSBcD c17 c18"
                  onClick={[Function]}
                  type="button"
                >
                  <SvgIcon
                    icon="edit"
                    size="16px"
                  >
                    <SvgIcon__StyledSvg
                      aria-hidden={true}
                      className="yoast-svg-icon yoast-svg-icon-edit"
                      focusable="false"
                      role="img"
                      size="16px"
                      viewBox="0 0 1792 1792"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <svg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-edit c23"
                        focusable="false"
                        role="img"
                        size="16px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
                        />
                      </svg>
                    </SvgIcon__StyledSvg>
                  </SvgIcon>
                  <FormattedMessage
                    defaultMessage="Edit snippet"
                    id="snippetEditor.editSnippet"
                    values={Object {}}
                  >
                    <span>
                      Edit snippet
                    </span>
                  </FormattedMessage>
                </button>
              </Button__BaseButton>
            </Button>
          </Button>
        </Button>
      </Button>
    </Button>
    <InjectIntl(SnippetEditorFields)
      activeField={null}
      data={
        Object {
          "description": "Test description, %%replacement_variable%%",
          "slug": "test-slug",
          "title": "Test title",
        }
      }
      descriptionLengthAssessment={
        Object {
          "actual": 0,
          "max": 320,
          "score": 0,
        }
      }
      hoveredField="description"
      onChange={[Function]}
      onFocus={[Function]}
      replacementVariables={Array []}
      titleLengthAssessment={
        Object {
          "actual": 0,
          "max": 600,
          "score": 0,
        }
      }
    >
      <SnippetEditorFields
        activeField={null}
        data={
          Object {
            "description": "Test description, %%replacement_variable%%",
            "slug": "test-slug",
            "title": "Test title",
          }
        }
        descriptionLengthAssessment={
          Object {
            "actual": 0,
            "max": 320,
            "score": 0,
          }
        }
        hoveredField="description"
        intl={
          Object {
            "defaultFormats": Object {},
            "defaultLocale": "en",
            "formatDate": [Function],
            "formatHTMLMessage": [Function],
            "formatMessage": [Function],
            "formatNumber": [Function],
            "formatPlural": [Function],
            "formatRelative": [Function],
            "formatTime": [Function],
            "formats": Object {},
            "formatters": Object {
              "getDateTimeFormat": [Function],
              "getMessageFormat": [Function],
              "getNumberFormat": [Function],
              "getPluralFormat": [Function],
              "getRelativeFormat": [Function],
            },
            "locale": "en",
            "messages": Object {},
            "now": [Function],
            "textComponent": "span",
          }
        }
        onChange={[Function]}
        onFocus={[Function]}
        replacementVariables={Array []}
        titleLengthAssessment={
          Object {
            "actual": 0,
            "max": 600,
            "score": 0,
          }
        }
      >
        <SnippetEditorFields__StyledEditor>
          <section
            className="c24"
          >
            <SnippetEditorFields__FormSection>
              <div
                className="c25"
              >
                <SnippetEditorFields__SimulatedLabel
                  id="snippet-editor-field-3-title"
                  onClick={[Function]}
                >
                  <div
                    className="c26"
                    id="snippet-editor-field-3-title"
                    onClick={[Function]}
                  >
                    SEO title
                  </div>
                </SnippetEditorFields__SimulatedLabel>
                <SnippetEditorFields__InputContainer
                  isActive={false}
                  isHovered={false}
                >
                  <div
                    className="c27"
                  >
                    <ReplacementVariableEditor
                      ariaLabelledBy="snippet-editor-field-3-title"
                      content="Test title"
                      onChange={[Function]}
                      onFocus={[Function]}
                      replacementVariables={Array []}
                    >
                      <div />
                    </ReplacementVariableEditor>
                  </div>
                </SnippetEditorFields__InputContainer>
                <ProgressBar
                  aria-hidden="true"
                  backgroundColor="#f7f7f7"
                  borderColor="#ddd"
                  max={600}
                  progressColor="#dc3232"
                  value={0}
                >
                  <progress
                    aria-hidden="true"
                    className="c28"
                    max={600}
                    value={0}
                  />
                </ProgressBar>
              </div>
            </SnippetEditorFields__FormSection>
            <SnippetEditorFields__FormSection>
              <div
                className="c25"
              >
                <SnippetEditorFields__SimulatedLabel
                  id="snippet-editor-field-3-slug"
                  onClick={[Function]}
                >
                  <div
                    className="c26"
                    id="snippet-editor-field-3-slug"
                    onClick={[Function]}
                  >
                    Slug
                  </div>
                </SnippetEditorFields__SimulatedLabel>
                <SnippetEditorFields__InputContainer
                  isActive={false}
                  isHovered={false}
                >
                  <div
                    className="c27"
                  >
                    <ReplacementVariableEditor
                      ariaLabelledBy="snippet-editor-field-3-slug"
                      content="test-slug"
                      onChange={[Function]}
                      onFocus={[Function]}
                      replacementVariables={Array []}
                    >
                      <div />
                    </ReplacementVariableEditor>
                  </div>
                </SnippetEditorFields__InputContainer>
              </div>
            </SnippetEditorFields__FormSection>
            <SnippetEditorFields__FormSection>
              <div
                className="c25"
              >
                <SnippetEditorFields__SimulatedLabel
                  id="snippet-editor-field-3-description"
                  onClick={[Function]}
                >
                  <div
                    className="c26"
                    id="snippet-editor-field-3-description"
                    onClick={[Function]}
                  >
                    Meta description
                  </div>
                </SnippetEditorFields__SimulatedLabel>
                <SnippetEditorFields__InputContainer
                  isActive={false}
                  isHovered={true}
                >
                  <div
                    className="c29"
                  >
                    <ReplacementVariableEditor
                      ariaLabelledBy="snippet-editor-field-3-description"
                      content="Test description, %%replacement_variable%%"
                      onChange={[Function]}
                      onFocus={[Function]}
                      replacementVariables={Array []}
                    >
                      <div />
                    </ReplacementVariableEditor>
                  </div>
                </SnippetEditorFields__InputContainer>
                <ProgressBar
                  aria-hidden="true"
                  backgroundColor="#f7f7f7"
                  borderColor="#ddd"
                  max={320}
                  progressColor="#dc3232"
                  value={0}
                >
                  <progress
                    aria-hidden="true"
                    className="c28"
                    max={320}
                    value={0}
                  />
                </ProgressBar>
              </div>
            </SnippetEditorFields__FormSection>
          </section>
        </SnippetEditorFields__StyledEditor>
      </SnippetEditorFields>
    </InjectIntl(SnippetEditorFields)>
    <Button
      onClick={[Function]}
    >
      <Button
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        className="c30"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <Button
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          className="c30 Button-kDSBcD c14"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <Button
            backgroundColor="#f7f7f7"
            borderColor="#ccc"
            boxShadowColor="#ccc"
            className="c30 Button-kDSBcD c14 Button-kDSBcD c15"
            onClick={[Function]}
            textColor="#555"
            type="button"
          >
            <Button
              backgroundColor="#f7f7f7"
              borderColor="#ccc"
              boxShadowColor="#ccc"
              className="c30 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16"
              onClick={[Function]}
              textColor="#555"
              type="button"
            >
              <Button__BaseButton
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                className="c30 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 Button-kDSBcD c17"
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <button
                  className="c30 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 Button-kDSBcD c17 c18"
                  onClick={[Function]}
                  type="button"
                >
                  <FormattedMessage
                    defaultMessage="Close snippet editor"
                    id="snippet-editor.close-editor"
                    values={Object {}}
                  >
                    <span>
                      Close snippet editor
                    </span>
                  </FormattedMessage>
                </button>
              </Button__BaseButton>
            </Button>
          </Button>
        </Button>
      </Button>
    </Button>
  </div>
</SnippetEditor>
`;

exports[`SnippetEditor opens when calling open() 1`] = `
.c0 {
  border-bottom: 1px hidden #fff;
  border-radius: 2px;
  box-shadow: 0 1px 2px rgba(0,0,0,.2);
  margin: 0 20px 10px;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  max-width: 600px;
  box-sizing: border-box;
  font-size: 14px;
}

.c2 {
  cursor: pointer;
  position: relative;
}

.c4 {
  color: #1e0fbe;
  text-decoration: none;
  font-size: 18px;
  line-height: 1.2;
  font-weight: normal;
  margin: 0;
  display: inline-block;
  overflow: hidden;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c3 {
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c5 {
  display: inline-block;
  line-height: 1.2em;
  max-height: 2.4em;
  overflow: hidden;
  text-overflow: ellipsis;
  font-size: 16px;
}

.c6 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
}

.c9 {
  color: #545454;
  cursor: pointer;
  position: relative;
  max-width: 600px;
  font-size: 13px;
}

.c8 {
  max-height: 4em;
  overflow: hidden;
  font-size: 14px;
  line-height: 20px;
}

.c1 {
  padding: 8px 16px;
}

.c7 {
  border: 0;
  border-bottom: 1px solid #DFE1E5;
  margin: 0;
}

.c27 {
  box-sizing: border-box;
  width: 100%;
  height: 8px;
  display: block;
  margin-top: 8px;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background-color: #f7f7f7;
  border: 1px solid #ddd;
}

.c27::-webkit-progress-bar {
  background-color: #f7f7f7;
}

.c27::-webkit-progress-value {
  background-color: #dc3232;
  -webkit-transition: width 250ms;
  transition: width 250ms;
}

.c27::-moz-progress-bar {
  background-color: #dc3232;
}

.c27::-ms-fill {
  background-color: #dc3232;
  border: 0;
}

.c26 {
  padding: 3px 5px;
  border: 1px solid #ddd;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  margin-top: 5px;
}

.c26::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width=%221792%22%20height=%221792%22%20viewBox=%220%200%201792%201792%22%20xmlns=%22http://www.w3.org/2000/svg%22%3E%3Cpath%20fill=%22transparent%22%20d=%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20/%3E%3C/svg%3E);
  background-size: 25px;
  content: "";
}

.c28 {
  padding: 3px 5px;
  border: 1px solid #ddd;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  margin-top: 5px;
  min-height: 60px;
  padding: 2px 6px;
  line-height: 19.6px;
}

.c28::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width=%221792%22%20height=%221792%22%20viewBox=%220%200%201792%201792%22%20xmlns=%22http://www.w3.org/2000/svg%22%3E%3Cpath%20fill=%22transparent%22%20d=%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20/%3E%3C/svg%3E);
  background-size: 25px;
  content: "";
}

.c24 {
  margin: 32px 0;
}

.c23 {
  padding: 10px 20px 20px 20px;
}

.c25 {
  cursor: pointer;
  font-size: 16px;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
}

.c17 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
}

.c12 {
  font-size: 0.8rem;
}

.c13:active {
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c14:hover {
  color: #000;
}

.c15::-moz-focus-inner {
  border-width: 0;
}

.c15:focus {
  outline: none;
  border-color: #0066cd;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c16 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
}

.c16 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c21 {
  font-size: 0.8rem;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin: 10px 0 0 4px;
  fill: #555;
  padding-left: 8px;
}

.c21 svg {
  margin-right: 7px;
}

.c29 {
  font-size: 0.8rem;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin-left: 20px;
}

.c11 {
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: #555;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 3px 0 0 3px;
}

.c11:hover,
.c11:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
}

.c19 {
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: transparent;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 0 3px 3px 0;
}

.c19:hover,
.c19:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
}

.c10 {
  display: inline-block;
  margin-top: 10px;
  margin-left: 20px;
  border: 1px solid #dbdbdb;
  border-radius: 4px;
  background-color: #f7f7f7;
  vertical-align: top;
}

.c18 {
  width: 22px;
  height: 22px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c20 {
  width: 18px;
  height: 18px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c22 {
  width: 16px;
  height: 16px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

@media all and ( -ms-high-contrast:none ),( -ms-high-contrast:active ) {
  .c16::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

<SnippetEditor
  baseUrl="https://example.org/"
  data={
    Object {
      "description": "Test description, %%replacement_variable%%",
      "slug": "test-slug",
      "title": "Test title",
    }
  }
  descriptionLengthAssessment={
    Object {
      "actual": 0,
      "max": 320,
      "score": 0,
    }
  }
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "textComponent": "span",
    }
  }
  mapDataToPreview={null}
  mode="mobile"
  onChange={[Function]}
  replacementVariables={Array []}
  titleLengthAssessment={
    Object {
      "actual": 0,
      "max": 600,
      "score": 0,
    }
  }
>
  <div>
    <SnippetPreview
      activeField={null}
      breadcrumbs={null}
      date=""
      description="Test description, %%replacement_variable%%"
      hoveredField={null}
      isAmp={false}
      isDescriptionGenerated={false}
      keyword=""
      locale="en_US"
      mode="mobile"
      onClick={[Function]}
      onHover={[Function]}
      onMouseLeave={[Function]}
      onMouseOver={[Function]}
      title="Test title"
      url="example.org/test-slug"
    >
      <section>
        <SnippetPreview__MobileContainer
          padding={20}
          width={640}
        >
          <div
            className="c0"
            width={640}
          >
            <SnippetPreview__MobilePartContainer>
              <div
                className="c1"
              >
                <FormattedScreenReaderMessage
                  after=":"
                  defaultMessage="SEO title preview"
                  id="snippetPreview.seoTitlePreview"
                >
                  <FormattedMessage
                    after=":"
                    defaultMessage="SEO title preview"
                    id="snippetPreview.seoTitlePreview"
                    values={Object {}}
                  >
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        SEO title preview:
                      </span>
                    </ScreenReaderText>
                  </FormattedMessage>
                </FormattedScreenReaderMessage>
                <SnippetPreview__BaseTitle
                  onClick={[Function]}
                  onMouseLeave={[Function]}
                  onMouseOver={[Function]}
                >
                  <div
                    className="c2"
                    onClick={[Function]}
                    onMouseLeave={[Function]}
                    onMouseOver={[Function]}
                  >
                    <SnippetPreview__TitleBounded>
                      <SnippetPreview__Title
                        className="c3"
                      >
                        <div
                          className="c3 c4"
                        >
                          <SnippetPreview__TitleUnboundedMobile
                            innerRef={[Function]}
                          >
                            <span
                              className="c5"
                            >
                              Test title
                            </span>
                          </SnippetPreview__TitleUnboundedMobile>
                        </div>
                      </SnippetPreview__Title>
                    </SnippetPreview__TitleBounded>
                  </div>
                </SnippetPreview__BaseTitle>
                <FormattedScreenReaderMessage
                  after=":"
                  defaultMessage="Url preview"
                  id="snippetPreview.urlPreview"
                >
                  <FormattedMessage
                    after=":"
                    defaultMessage="Url preview"
                    id="snippetPreview.urlPreview"
                    values={Object {}}
                  >
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Url preview:
                      </span>
                    </ScreenReaderText>
                  </FormattedMessage>
                </FormattedScreenReaderMessage>
                <SnippetPreview__BaseUrl
                  onClick={[Function]}
                  onMouseLeave={[Function]}
                  onMouseOver={[Function]}
                >
                  <div
                    className="c6"
                    onClick={[Function]}
                    onMouseLeave={[Function]}
                    onMouseOver={[Function]}
                  >
                    example.org â€º test-slug
                  </div>
                </SnippetPreview__BaseUrl>
              </div>
            </SnippetPreview__MobilePartContainer>
            <SnippetPreview__Separator>
              <hr
                className="c7"
              />
            </SnippetPreview__Separator>
            <SnippetPreview__MobilePartContainer>
              <div
                className="c1"
              >
                <FormattedScreenReaderMessage
                  after=":"
                  defaultMessage="Meta description preview"
                  id="snippetPreview.metaDescriptionPreview"
                >
                  <FormattedMessage
                    after=":"
                    defaultMessage="Meta description preview"
                    id="snippetPreview.metaDescriptionPreview"
                    values={Object {}}
                  >
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Meta description preview:
                      </span>
                    </ScreenReaderText>
                  </FormattedMessage>
                </FormattedScreenReaderMessage>
                <SnippetPreview__MobileDescription
                  innerRef={[Function]}
                  isDescriptionGenerated={false}
                  onClick={[Function]}
                  onMouseLeave={[Function]}
                  onMouseOver={[Function]}
                >
                  <SnippetPreview__DesktopDescription
                    className="c8"
                    innerRef={[Function]}
                    isDescriptionGenerated={false}
                    onClick={[Function]}
                    onMouseLeave={[Function]}
                    onMouseOver={[Function]}
                  >
                    <div
                      className="c8 c9"
                      color="#545454"
                      onClick={[Function]}
                      onMouseLeave={[Function]}
                      onMouseOver={[Function]}
                    >
                      Test description, %%replacement_variable%%
                    </div>
                  </SnippetPreview__DesktopDescription>
                </SnippetPreview__MobileDescription>
              </div>
            </SnippetPreview__MobilePartContainer>
          </div>
        </SnippetPreview__MobileContainer>
      </section>
    </SnippetPreview>
    <ModeSwitcher
      active="mobile"
      onChange={[Function]}
    >
      <ModeSwitcher__Switcher>
        <div
          className="c10"
        >
          <ModeSwitcher__SwitcherButton
            aria-pressed={true}
            isActive={true}
            onClick={[Function]}
          >
            <Button
              aria-pressed={true}
              className="c11"
              isActive={true}
              onClick={[Function]}
            >
              <Button
                aria-pressed={true}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                className="c11 c12"
                isActive={true}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <Button
                  aria-pressed={true}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  className="c11 c12 Button-kDSBcD c13"
                  isActive={true}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <Button
                    aria-pressed={true}
                    backgroundColor="#f7f7f7"
                    borderColor="#ccc"
                    boxShadowColor="#ccc"
                    className="c11 c12 Button-kDSBcD c13 Button-kDSBcD c14"
                    isActive={true}
                    onClick={[Function]}
                    textColor="#555"
                    type="button"
                  >
                    <Button
                      aria-pressed={true}
                      backgroundColor="#f7f7f7"
                      borderColor="#ccc"
                      boxShadowColor="#ccc"
                      className="c11 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15"
                      isActive={true}
                      onClick={[Function]}
                      textColor="#555"
                      type="button"
                    >
                      <Button__BaseButton
                        aria-pressed={true}
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        className="c11 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16"
                        isActive={true}
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <button
                          aria-pressed={true}
                          className="c11 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 c17"
                          onClick={[Function]}
                          type="button"
                        >
                          <SvgIcon
                            color="currentColor"
                            icon="mobile"
                            size="22px"
                          >
                            <SvgIcon__StyledSvg
                              aria-hidden={true}
                              className="yoast-svg-icon yoast-svg-icon-mobile"
                              fill="currentColor"
                              focusable="false"
                              role="img"
                              size="22px"
                              viewBox="0 0 1792 1792"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <svg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-mobile c18"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="22px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
                                />
                              </svg>
                            </SvgIcon__StyledSvg>
                          </SvgIcon>
                          <FormattedScreenReaderMessage
                            defaultMessage="Mobile preview"
                            id="snippetEditor.desktopPreview"
                          >
                            <FormattedMessage
                              defaultMessage="Mobile preview"
                              id="snippetEditor.desktopPreview"
                              values={Object {}}
                            >
                              <ScreenReaderText>
                                <span
                                  className="screen-reader-text"
                                  style={
                                    Object {
                                      "clip": "rect(1px, 1px, 1px, 1px)",
                                      "height": "1px",
                                      "overflow": "hidden",
                                      "position": "absolute",
                                      "width": "1px",
                                    }
                                  }
                                >
                                  Mobile preview
                                </span>
                              </ScreenReaderText>
                            </FormattedMessage>
                          </FormattedScreenReaderMessage>
                        </button>
                      </Button__BaseButton>
                    </Button>
                  </Button>
                </Button>
              </Button>
            </Button>
          </ModeSwitcher__SwitcherButton>
          <ModeSwitcher__SwitcherButton
            aria-pressed={false}
            isActive={false}
            onClick={[Function]}
          >
            <Button
              aria-pressed={false}
              className="c19"
              isActive={false}
              onClick={[Function]}
            >
              <Button
                aria-pressed={false}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                className="c19 c12"
                isActive={false}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <Button
                  aria-pressed={false}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  className="c19 c12 Button-kDSBcD c13"
                  isActive={false}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <Button
                    aria-pressed={false}
                    backgroundColor="#f7f7f7"
                    borderColor="#ccc"
                    boxShadowColor="#ccc"
                    className="c19 c12 Button-kDSBcD c13 Button-kDSBcD c14"
                    isActive={false}
                    onClick={[Function]}
                    textColor="#555"
                    type="button"
                  >
                    <Button
                      aria-pressed={false}
                      backgroundColor="#f7f7f7"
                      borderColor="#ccc"
                      boxShadowColor="#ccc"
                      className="c19 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15"
                      isActive={false}
                      onClick={[Function]}
                      textColor="#555"
                      type="button"
                    >
                      <Button__BaseButton
                        aria-pressed={false}
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        className="c19 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16"
                        isActive={false}
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <button
                          aria-pressed={false}
                          className="c19 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 c17"
                          onClick={[Function]}
                          type="button"
                        >
                          <SvgIcon
                            color="currentColor"
                            icon="desktop"
                            size="18px"
                          >
                            <SvgIcon__StyledSvg
                              aria-hidden={true}
                              className="yoast-svg-icon yoast-svg-icon-desktop"
                              fill="currentColor"
                              focusable="false"
                              role="img"
                              size="18px"
                              viewBox="0 0 1792 1792"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <svg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-desktop c20"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="18px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
                                />
                              </svg>
                            </SvgIcon__StyledSvg>
                          </SvgIcon>
                          <FormattedScreenReaderMessage
                            defaultMessage="Desktop preview"
                            id="snippetEditor.desktopPreview"
                          >
                            <FormattedMessage
                              defaultMessage="Desktop preview"
                              id="snippetEditor.desktopPreview"
                              values={Object {}}
                            >
                              <ScreenReaderText>
                                <span
                                  className="screen-reader-text"
                                  style={
                                    Object {
                                      "clip": "rect(1px, 1px, 1px, 1px)",
                                      "height": "1px",
                                      "overflow": "hidden",
                                      "position": "absolute",
                                      "width": "1px",
                                    }
                                  }
                                >
                                  Desktop preview
                                </span>
                              </ScreenReaderText>
                            </FormattedMessage>
                          </FormattedScreenReaderMessage>
                        </button>
                      </Button__BaseButton>
                    </Button>
                  </Button>
                </Button>
              </Button>
            </Button>
          </ModeSwitcher__SwitcherButton>
        </div>
      </ModeSwitcher__Switcher>
    </ModeSwitcher>
    <Button
      aria-expanded={true}
      innerRef={[Function]}
      onClick={[Function]}
    >
      <Button
        aria-expanded={true}
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        className="c21"
        innerRef={[Function]}
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <Button
          aria-expanded={true}
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          className="c21 Button-kDSBcD c13"
          innerRef={[Function]}
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <Button
            aria-expanded={true}
            backgroundColor="#f7f7f7"
            borderColor="#ccc"
            boxShadowColor="#ccc"
            className="c21 Button-kDSBcD c13 Button-kDSBcD c14"
            innerRef={[Function]}
            onClick={[Function]}
            textColor="#555"
            type="button"
          >
            <Button
              aria-expanded={true}
              backgroundColor="#f7f7f7"
              borderColor="#ccc"
              boxShadowColor="#ccc"
              className="c21 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15"
              innerRef={[Function]}
              onClick={[Function]}
              textColor="#555"
              type="button"
            >
              <Button__BaseButton
                aria-expanded={true}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                className="c21 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16"
                innerRef={[Function]}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <button
                  aria-expanded={true}
                  className="c21 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 c17"
                  onClick={[Function]}
                  type="button"
                >
                  <SvgIcon
                    icon="edit"
                    size="16px"
                  >
                    <SvgIcon__StyledSvg
                      aria-hidden={true}
                      className="yoast-svg-icon yoast-svg-icon-edit"
                      focusable="false"
                      role="img"
                      size="16px"
                      viewBox="0 0 1792 1792"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <svg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-edit c22"
                        focusable="false"
                        role="img"
                        size="16px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
                        />
                      </svg>
                    </SvgIcon__StyledSvg>
                  </SvgIcon>
                  <FormattedMessage
                    defaultMessage="Edit snippet"
                    id="snippetEditor.editSnippet"
                    values={Object {}}
                  >
                    <span>
                      Edit snippet
                    </span>
                  </FormattedMessage>
                </button>
              </Button__BaseButton>
            </Button>
          </Button>
        </Button>
      </Button>
    </Button>
    <InjectIntl(SnippetEditorFields)
      activeField={null}
      data={
        Object {
          "description": "Test description, %%replacement_variable%%",
          "slug": "test-slug",
          "title": "Test title",
        }
      }
      descriptionLengthAssessment={
        Object {
          "actual": 0,
          "max": 320,
          "score": 0,
        }
      }
      hoveredField={null}
      onChange={[Function]}
      onFocus={[Function]}
      replacementVariables={Array []}
      titleLengthAssessment={
        Object {
          "actual": 0,
          "max": 600,
          "score": 0,
        }
      }
    >
      <SnippetEditorFields
        activeField={null}
        data={
          Object {
            "description": "Test description, %%replacement_variable%%",
            "slug": "test-slug",
            "title": "Test title",
          }
        }
        descriptionLengthAssessment={
          Object {
            "actual": 0,
            "max": 320,
            "score": 0,
          }
        }
        hoveredField={null}
        intl={
          Object {
            "defaultFormats": Object {},
            "defaultLocale": "en",
            "formatDate": [Function],
            "formatHTMLMessage": [Function],
            "formatMessage": [Function],
            "formatNumber": [Function],
            "formatPlural": [Function],
            "formatRelative": [Function],
            "formatTime": [Function],
            "formats": Object {},
            "formatters": Object {
              "getDateTimeFormat": [Function],
              "getMessageFormat": [Function],
              "getNumberFormat": [Function],
              "getPluralFormat": [Function],
              "getRelativeFormat": [Function],
            },
            "locale": "en",
            "messages": Object {},
            "now": [Function],
            "textComponent": "span",
          }
        }
        onChange={[Function]}
        onFocus={[Function]}
        replacementVariables={Array []}
        titleLengthAssessment={
          Object {
            "actual": 0,
            "max": 600,
            "score": 0,
          }
        }
      >
        <SnippetEditorFields__StyledEditor>
          <section
            className="c23"
          >
            <SnippetEditorFields__FormSection>
              <div
                className="c24"
              >
                <SnippetEditorFields__SimulatedLabel
                  id="snippet-editor-field-1-title"
                  onClick={[Function]}
                >
                  <div
                    className="c25"
                    id="snippet-editor-field-1-title"
                    onClick={[Function]}
                  >
                    SEO title
                  </div>
                </SnippetEditorFields__SimulatedLabel>
                <SnippetEditorFields__InputContainer
                  isActive={false}
                  isHovered={false}
                >
                  <div
                    className="c26"
                  >
                    <ReplacementVariableEditor
                      ariaLabelledBy="snippet-editor-field-1-title"
                      content="Test title"
                      onChange={[Function]}
                      onFocus={[Function]}
                      replacementVariables={Array []}
                    >
                      <div />
                    </ReplacementVariableEditor>
                  </div>
                </SnippetEditorFields__InputContainer>
                <ProgressBar
                  aria-hidden="true"
                  backgroundColor="#f7f7f7"
                  borderColor="#ddd"
                  max={600}
                  progressColor="#dc3232"
                  value={0}
                >
                  <progress
                    aria-hidden="true"
                    className="c27"
                    max={600}
                    value={0}
                  />
                </ProgressBar>
              </div>
            </SnippetEditorFields__FormSection>
            <SnippetEditorFields__FormSection>
              <div
                className="c24"
              >
                <SnippetEditorFields__SimulatedLabel
                  id="snippet-editor-field-1-slug"
                  onClick={[Function]}
                >
                  <div
                    className="c25"
                    id="snippet-editor-field-1-slug"
                    onClick={[Function]}
                  >
                    Slug
                  </div>
                </SnippetEditorFields__SimulatedLabel>
                <SnippetEditorFields__InputContainer
                  isActive={false}
                  isHovered={false}
                >
                  <div
                    className="c26"
                  >
                    <ReplacementVariableEditor
                      ariaLabelledBy="snippet-editor-field-1-slug"
                      content="test-slug"
                      onChange={[Function]}
                      onFocus={[Function]}
                      replacementVariables={Array []}
                    >
                      <div />
                    </ReplacementVariableEditor>
                  </div>
                </SnippetEditorFields__InputContainer>
              </div>
            </SnippetEditorFields__FormSection>
            <SnippetEditorFields__FormSection>
              <div
                className="c24"
              >
                <SnippetEditorFields__SimulatedLabel
                  id="snippet-editor-field-1-description"
                  onClick={[Function]}
                >
                  <div
                    className="c25"
                    id="snippet-editor-field-1-description"
                    onClick={[Function]}
                  >
                    Meta description
                  </div>
                </SnippetEditorFields__SimulatedLabel>
                <SnippetEditorFields__InputContainer
                  isActive={false}
                  isHovered={false}
                >
                  <div
                    className="c28"
                  >
                    <ReplacementVariableEditor
                      ariaLabelledBy="snippet-editor-field-1-description"
                      content="Test description, %%replacement_variable%%"
                      onChange={[Function]}
                      onFocus={[Function]}
                      replacementVariables={Array []}
                    >
                      <div />
                    </ReplacementVariableEditor>
                  </div>
                </SnippetEditorFields__InputContainer>
                <ProgressBar
                  aria-hidden="true"
                  backgroundColor="#f7f7f7"
                  borderColor="#ddd"
                  max={320}
                  progressColor="#dc3232"
                  value={0}
                >
                  <progress
                    aria-hidden="true"
                    className="c27"
                    max={320}
                    value={0}
                  />
                </ProgressBar>
              </div>
            </SnippetEditorFields__FormSection>
          </section>
        </SnippetEditorFields__StyledEditor>
      </SnippetEditorFields>
    </InjectIntl(SnippetEditorFields)>
    <Button
      onClick={[Function]}
    >
      <Button
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        className="c29"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <Button
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          className="c29 Button-kDSBcD c13"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <Button
            backgroundColor="#f7f7f7"
            borderColor="#ccc"
            boxShadowColor="#ccc"
            className="c29 Button-kDSBcD c13 Button-kDSBcD c14"
            onClick={[Function]}
            textColor="#555"
            type="button"
          >
            <Button
              backgroundColor="#f7f7f7"
              borderColor="#ccc"
              boxShadowColor="#ccc"
              className="c29 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15"
              onClick={[Function]}
              textColor="#555"
              type="button"
            >
              <Button__BaseButton
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                className="c29 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16"
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <button
                  className="c29 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 c17"
                  onClick={[Function]}
                  type="button"
                >
                  <FormattedMessage
                    defaultMessage="Close snippet editor"
                    id="snippet-editor.close-editor"
                    values={Object {}}
                  >
                    <span>
                      Close snippet editor
                    </span>
                  </FormattedMessage>
                </button>
              </Button__BaseButton>
            </Button>
          </Button>
        </Button>
      </Button>
    </Button>
  </div>
</SnippetEditor>
`;

exports[`SnippetEditor passes replacement variables to the title and description editor 1`] = `
.c0 {
  border-bottom: 1px hidden #fff;
  border-radius: 2px;
  box-shadow: 0 1px 2px rgba(0,0,0,.2);
  margin: 0 20px 10px;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  max-width: 600px;
  box-sizing: border-box;
  font-size: 14px;
}

.c2 {
  cursor: pointer;
  position: relative;
}

.c4 {
  color: #1e0fbe;
  text-decoration: none;
  font-size: 18px;
  line-height: 1.2;
  font-weight: normal;
  margin: 0;
  display: inline-block;
  overflow: hidden;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c3 {
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c5 {
  display: inline-block;
  line-height: 1.2em;
  max-height: 2.4em;
  overflow: hidden;
  text-overflow: ellipsis;
  font-size: 16px;
}

.c6 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
}

.c9 {
  color: #545454;
  cursor: pointer;
  position: relative;
  max-width: 600px;
  font-size: 13px;
}

.c8 {
  max-height: 4em;
  overflow: hidden;
  font-size: 14px;
  line-height: 20px;
}

.c1 {
  padding: 8px 16px;
}

.c7 {
  border: 0;
  border-bottom: 1px solid #DFE1E5;
  margin: 0;
}

.c27 {
  box-sizing: border-box;
  width: 100%;
  height: 8px;
  display: block;
  margin-top: 8px;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background-color: #f7f7f7;
  border: 1px solid #ddd;
}

.c27::-webkit-progress-bar {
  background-color: #f7f7f7;
}

.c27::-webkit-progress-value {
  background-color: #dc3232;
  -webkit-transition: width 250ms;
  transition: width 250ms;
}

.c27::-moz-progress-bar {
  background-color: #dc3232;
}

.c27::-ms-fill {
  background-color: #dc3232;
  border: 0;
}

.c26 {
  padding: 3px 5px;
  border: 1px solid #ddd;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  margin-top: 5px;
}

.c26::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width=%221792%22%20height=%221792%22%20viewBox=%220%200%201792%201792%22%20xmlns=%22http://www.w3.org/2000/svg%22%3E%3Cpath%20fill=%22transparent%22%20d=%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20/%3E%3C/svg%3E);
  background-size: 25px;
  content: "";
}

.c28 {
  padding: 3px 5px;
  border: 1px solid #ddd;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.07);
  background-color: #fff;
  color: #32373c;
  outline: 0;
  -webkit-transition: 50ms border-color ease-in-out;
  transition: 50ms border-color ease-in-out;
  position: relative;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  font-size: 14px;
  margin-top: 5px;
  min-height: 60px;
  padding: 2px 6px;
  line-height: 19.6px;
}

.c28::before {
  display: block;
  position: absolute;
  top: -1px;
  left: -25px;
  width: 24px;
  height: 24px;
  background-image: url( data:image/svg+xml;charset=utf8,%3Csvg%20width=%221792%22%20height=%221792%22%20viewBox=%220%200%201792%201792%22%20xmlns=%22http://www.w3.org/2000/svg%22%3E%3Cpath%20fill=%22transparent%22%20d=%22M1152%20896q0%2026-19%2045l-448%20448q-19%2019-45%2019t-45-19-19-45v-896q0-26%2019-45t45-19%2045%2019l448%20448q19%2019%2019%2045z%22%20/%3E%3C/svg%3E);
  background-size: 25px;
  content: "";
}

.c24 {
  margin: 32px 0;
}

.c23 {
  padding: 10px 20px 20px 20px;
}

.c25 {
  cursor: pointer;
  font-size: 16px;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
}

.c17 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
}

.c12 {
  font-size: 0.8rem;
}

.c13:active {
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c14:hover {
  color: #000;
}

.c15::-moz-focus-inner {
  border-width: 0;
}

.c15:focus {
  outline: none;
  border-color: #0066cd;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c16 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
}

.c16 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c21 {
  font-size: 0.8rem;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin: 10px 0 0 4px;
  fill: #555;
  padding-left: 8px;
}

.c21 svg {
  margin-right: 7px;
}

.c29 {
  font-size: 0.8rem;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin-left: 20px;
}

.c11 {
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: #555;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 3px 0 0 3px;
}

.c11:hover,
.c11:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
}

.c19 {
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: transparent;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 0 3px 3px 0;
}

.c19:hover,
.c19:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
}

.c10 {
  display: inline-block;
  margin-top: 10px;
  margin-left: 20px;
  border: 1px solid #dbdbdb;
  border-radius: 4px;
  background-color: #f7f7f7;
  vertical-align: top;
}

.c18 {
  width: 22px;
  height: 22px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c20 {
  width: 18px;
  height: 18px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c22 {
  width: 16px;
  height: 16px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

@media all and ( -ms-high-contrast:none ),( -ms-high-contrast:active ) {
  .c16::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

<SnippetEditor
  baseUrl="https://example.org/"
  data={
    Object {
      "description": "Test description, %%replacement_variable%%",
      "slug": "test-slug",
      "title": "Test title",
    }
  }
  descriptionLengthAssessment={
    Object {
      "actual": 0,
      "max": 320,
      "score": 0,
    }
  }
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "textComponent": "span",
    }
  }
  mapDataToPreview={null}
  mode="mobile"
  onChange={[Function]}
  replacementVariables={
    Array [
      Object {
        "name": "title",
        "value": "Title!!!",
      },
      Object {
        "name": "excerpt",
        "value": "Excerpt!!!",
      },
    ]
  }
  titleLengthAssessment={
    Object {
      "actual": 0,
      "max": 600,
      "score": 0,
    }
  }
>
  <div>
    <SnippetPreview
      activeField={null}
      breadcrumbs={null}
      date=""
      description="Test description, %%replacement_variable%%"
      hoveredField={null}
      isAmp={false}
      isDescriptionGenerated={false}
      keyword=""
      locale="en_US"
      mode="mobile"
      onClick={[Function]}
      onHover={[Function]}
      onMouseLeave={[Function]}
      onMouseOver={[Function]}
      title="Test title"
      url="example.org/test-slug"
    >
      <section>
        <SnippetPreview__MobileContainer
          padding={20}
          width={640}
        >
          <div
            className="c0"
            width={640}
          >
            <SnippetPreview__MobilePartContainer>
              <div
                className="c1"
              >
                <FormattedScreenReaderMessage
                  after=":"
                  defaultMessage="SEO title preview"
                  id="snippetPreview.seoTitlePreview"
                >
                  <FormattedMessage
                    after=":"
                    defaultMessage="SEO title preview"
                    id="snippetPreview.seoTitlePreview"
                    values={Object {}}
                  >
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        SEO title preview:
                      </span>
                    </ScreenReaderText>
                  </FormattedMessage>
                </FormattedScreenReaderMessage>
                <SnippetPreview__BaseTitle
                  onClick={[Function]}
                  onMouseLeave={[Function]}
                  onMouseOver={[Function]}
                >
                  <div
                    className="c2"
                    onClick={[Function]}
                    onMouseLeave={[Function]}
                    onMouseOver={[Function]}
                  >
                    <SnippetPreview__TitleBounded>
                      <SnippetPreview__Title
                        className="c3"
                      >
                        <div
                          className="c3 c4"
                        >
                          <SnippetPreview__TitleUnboundedMobile
                            innerRef={[Function]}
                          >
                            <span
                              className="c5"
                            >
                              Test title
                            </span>
                          </SnippetPreview__TitleUnboundedMobile>
                        </div>
                      </SnippetPreview__Title>
                    </SnippetPreview__TitleBounded>
                  </div>
                </SnippetPreview__BaseTitle>
                <FormattedScreenReaderMessage
                  after=":"
                  defaultMessage="Url preview"
                  id="snippetPreview.urlPreview"
                >
                  <FormattedMessage
                    after=":"
                    defaultMessage="Url preview"
                    id="snippetPreview.urlPreview"
                    values={Object {}}
                  >
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Url preview:
                      </span>
                    </ScreenReaderText>
                  </FormattedMessage>
                </FormattedScreenReaderMessage>
                <SnippetPreview__BaseUrl
                  onClick={[Function]}
                  onMouseLeave={[Function]}
                  onMouseOver={[Function]}
                >
                  <div
                    className="c6"
                    onClick={[Function]}
                    onMouseLeave={[Function]}
                    onMouseOver={[Function]}
                  >
                    example.org â€º test-slug
                  </div>
                </SnippetPreview__BaseUrl>
              </div>
            </SnippetPreview__MobilePartContainer>
            <SnippetPreview__Separator>
              <hr
                className="c7"
              />
            </SnippetPreview__Separator>
            <SnippetPreview__MobilePartContainer>
              <div
                className="c1"
              >
                <FormattedScreenReaderMessage
                  after=":"
                  defaultMessage="Meta description preview"
                  id="snippetPreview.metaDescriptionPreview"
                >
                  <FormattedMessage
                    after=":"
                    defaultMessage="Meta description preview"
                    id="snippetPreview.metaDescriptionPreview"
                    values={Object {}}
                  >
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Meta description preview:
                      </span>
                    </ScreenReaderText>
                  </FormattedMessage>
                </FormattedScreenReaderMessage>
                <SnippetPreview__MobileDescription
                  innerRef={[Function]}
                  isDescriptionGenerated={false}
                  onClick={[Function]}
                  onMouseLeave={[Function]}
                  onMouseOver={[Function]}
                >
                  <SnippetPreview__DesktopDescription
                    className="c8"
                    innerRef={[Function]}
                    isDescriptionGenerated={false}
                    onClick={[Function]}
                    onMouseLeave={[Function]}
                    onMouseOver={[Function]}
                  >
                    <div
                      className="c8 c9"
                      color="#545454"
                      onClick={[Function]}
                      onMouseLeave={[Function]}
                      onMouseOver={[Function]}
                    >
                      Test description, %%replacement_variable%%
                    </div>
                  </SnippetPreview__DesktopDescription>
                </SnippetPreview__MobileDescription>
              </div>
            </SnippetPreview__MobilePartContainer>
          </div>
        </SnippetPreview__MobileContainer>
      </section>
    </SnippetPreview>
    <ModeSwitcher
      active="mobile"
      onChange={[Function]}
    >
      <ModeSwitcher__Switcher>
        <div
          className="c10"
        >
          <ModeSwitcher__SwitcherButton
            aria-pressed={true}
            isActive={true}
            onClick={[Function]}
          >
            <Button
              aria-pressed={true}
              className="c11"
              isActive={true}
              onClick={[Function]}
            >
              <Button
                aria-pressed={true}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                className="c11 c12"
                isActive={true}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <Button
                  aria-pressed={true}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  className="c11 c12 Button-kDSBcD c13"
                  isActive={true}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <Button
                    aria-pressed={true}
                    backgroundColor="#f7f7f7"
                    borderColor="#ccc"
                    boxShadowColor="#ccc"
                    className="c11 c12 Button-kDSBcD c13 Button-kDSBcD c14"
                    isActive={true}
                    onClick={[Function]}
                    textColor="#555"
                    type="button"
                  >
                    <Button
                      aria-pressed={true}
                      backgroundColor="#f7f7f7"
                      borderColor="#ccc"
                      boxShadowColor="#ccc"
                      className="c11 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15"
                      isActive={true}
                      onClick={[Function]}
                      textColor="#555"
                      type="button"
                    >
                      <Button__BaseButton
                        aria-pressed={true}
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        className="c11 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16"
                        isActive={true}
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <button
                          aria-pressed={true}
                          className="c11 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 c17"
                          onClick={[Function]}
                          type="button"
                        >
                          <SvgIcon
                            color="currentColor"
                            icon="mobile"
                            size="22px"
                          >
                            <SvgIcon__StyledSvg
                              aria-hidden={true}
                              className="yoast-svg-icon yoast-svg-icon-mobile"
                              fill="currentColor"
                              focusable="false"
                              role="img"
                              size="22px"
                              viewBox="0 0 1792 1792"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <svg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-mobile c18"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="22px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
                                />
                              </svg>
                            </SvgIcon__StyledSvg>
                          </SvgIcon>
                          <FormattedScreenReaderMessage
                            defaultMessage="Mobile preview"
                            id="snippetEditor.desktopPreview"
                          >
                            <FormattedMessage
                              defaultMessage="Mobile preview"
                              id="snippetEditor.desktopPreview"
                              values={Object {}}
                            >
                              <ScreenReaderText>
                                <span
                                  className="screen-reader-text"
                                  style={
                                    Object {
                                      "clip": "rect(1px, 1px, 1px, 1px)",
                                      "height": "1px",
                                      "overflow": "hidden",
                                      "position": "absolute",
                                      "width": "1px",
                                    }
                                  }
                                >
                                  Mobile preview
                                </span>
                              </ScreenReaderText>
                            </FormattedMessage>
                          </FormattedScreenReaderMessage>
                        </button>
                      </Button__BaseButton>
                    </Button>
                  </Button>
                </Button>
              </Button>
            </Button>
          </ModeSwitcher__SwitcherButton>
          <ModeSwitcher__SwitcherButton
            aria-pressed={false}
            isActive={false}
            onClick={[Function]}
          >
            <Button
              aria-pressed={false}
              className="c19"
              isActive={false}
              onClick={[Function]}
            >
              <Button
                aria-pressed={false}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                className="c19 c12"
                isActive={false}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <Button
                  aria-pressed={false}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  className="c19 c12 Button-kDSBcD c13"
                  isActive={false}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <Button
                    aria-pressed={false}
                    backgroundColor="#f7f7f7"
                    borderColor="#ccc"
                    boxShadowColor="#ccc"
                    className="c19 c12 Button-kDSBcD c13 Button-kDSBcD c14"
                    isActive={false}
                    onClick={[Function]}
                    textColor="#555"
                    type="button"
                  >
                    <Button
                      aria-pressed={false}
                      backgroundColor="#f7f7f7"
                      borderColor="#ccc"
                      boxShadowColor="#ccc"
                      className="c19 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15"
                      isActive={false}
                      onClick={[Function]}
                      textColor="#555"
                      type="button"
                    >
                      <Button__BaseButton
                        aria-pressed={false}
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        className="c19 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16"
                        isActive={false}
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <button
                          aria-pressed={false}
                          className="c19 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 c17"
                          onClick={[Function]}
                          type="button"
                        >
                          <SvgIcon
                            color="currentColor"
                            icon="desktop"
                            size="18px"
                          >
                            <SvgIcon__StyledSvg
                              aria-hidden={true}
                              className="yoast-svg-icon yoast-svg-icon-desktop"
                              fill="currentColor"
                              focusable="false"
                              role="img"
                              size="18px"
                              viewBox="0 0 1792 1792"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <svg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-desktop c20"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="18px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
                                />
                              </svg>
                            </SvgIcon__StyledSvg>
                          </SvgIcon>
                          <FormattedScreenReaderMessage
                            defaultMessage="Desktop preview"
                            id="snippetEditor.desktopPreview"
                          >
                            <FormattedMessage
                              defaultMessage="Desktop preview"
                              id="snippetEditor.desktopPreview"
                              values={Object {}}
                            >
                              <ScreenReaderText>
                                <span
                                  className="screen-reader-text"
                                  style={
                                    Object {
                                      "clip": "rect(1px, 1px, 1px, 1px)",
                                      "height": "1px",
                                      "overflow": "hidden",
                                      "position": "absolute",
                                      "width": "1px",
                                    }
                                  }
                                >
                                  Desktop preview
                                </span>
                              </ScreenReaderText>
                            </FormattedMessage>
                          </FormattedScreenReaderMessage>
                        </button>
                      </Button__BaseButton>
                    </Button>
                  </Button>
                </Button>
              </Button>
            </Button>
          </ModeSwitcher__SwitcherButton>
        </div>
      </ModeSwitcher__Switcher>
    </ModeSwitcher>
    <Button
      aria-expanded={true}
      innerRef={[Function]}
      onClick={[Function]}
    >
      <Button
        aria-expanded={true}
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        className="c21"
        innerRef={[Function]}
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <Button
          aria-expanded={true}
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          className="c21 Button-kDSBcD c13"
          innerRef={[Function]}
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <Button
            aria-expanded={true}
            backgroundColor="#f7f7f7"
            borderColor="#ccc"
            boxShadowColor="#ccc"
            className="c21 Button-kDSBcD c13 Button-kDSBcD c14"
            innerRef={[Function]}
            onClick={[Function]}
            textColor="#555"
            type="button"
          >
            <Button
              aria-expanded={true}
              backgroundColor="#f7f7f7"
              borderColor="#ccc"
              boxShadowColor="#ccc"
              className="c21 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15"
              innerRef={[Function]}
              onClick={[Function]}
              textColor="#555"
              type="button"
            >
              <Button__BaseButton
                aria-expanded={true}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                className="c21 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16"
                innerRef={[Function]}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <button
                  aria-expanded={true}
                  className="c21 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 c17"
                  onClick={[Function]}
                  type="button"
                >
                  <SvgIcon
                    icon="edit"
                    size="16px"
                  >
                    <SvgIcon__StyledSvg
                      aria-hidden={true}
                      className="yoast-svg-icon yoast-svg-icon-edit"
                      focusable="false"
                      role="img"
                      size="16px"
                      viewBox="0 0 1792 1792"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <svg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-edit c22"
                        focusable="false"
                        role="img"
                        size="16px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
                        />
                      </svg>
                    </SvgIcon__StyledSvg>
                  </SvgIcon>
                  <FormattedMessage
                    defaultMessage="Edit snippet"
                    id="snippetEditor.editSnippet"
                    values={Object {}}
                  >
                    <span>
                      Edit snippet
                    </span>
                  </FormattedMessage>
                </button>
              </Button__BaseButton>
            </Button>
          </Button>
        </Button>
      </Button>
    </Button>
    <InjectIntl(SnippetEditorFields)
      activeField={null}
      data={
        Object {
          "description": "Test description, %%replacement_variable%%",
          "slug": "test-slug",
          "title": "Test title",
        }
      }
      descriptionLengthAssessment={
        Object {
          "actual": 0,
          "max": 320,
          "score": 0,
        }
      }
      hoveredField={null}
      onChange={[Function]}
      onFocus={[Function]}
      replacementVariables={
        Array [
          Object {
            "name": "title",
            "value": "Title!!!",
          },
          Object {
            "name": "excerpt",
            "value": "Excerpt!!!",
          },
        ]
      }
      titleLengthAssessment={
        Object {
          "actual": 0,
          "max": 600,
          "score": 0,
        }
      }
    >
      <SnippetEditorFields
        activeField={null}
        data={
          Object {
            "description": "Test description, %%replacement_variable%%",
            "slug": "test-slug",
            "title": "Test title",
          }
        }
        descriptionLengthAssessment={
          Object {
            "actual": 0,
            "max": 320,
            "score": 0,
          }
        }
        hoveredField={null}
        intl={
          Object {
            "defaultFormats": Object {},
            "defaultLocale": "en",
            "formatDate": [Function],
            "formatHTMLMessage": [Function],
            "formatMessage": [Function],
            "formatNumber": [Function],
            "formatPlural": [Function],
            "formatRelative": [Function],
            "formatTime": [Function],
            "formats": Object {},
            "formatters": Object {
              "getDateTimeFormat": [Function],
              "getMessageFormat": [Function],
              "getNumberFormat": [Function],
              "getPluralFormat": [Function],
              "getRelativeFormat": [Function],
            },
            "locale": "en",
            "messages": Object {},
            "now": [Function],
            "textComponent": "span",
          }
        }
        onChange={[Function]}
        onFocus={[Function]}
        replacementVariables={
          Array [
            Object {
              "name": "title",
              "value": "Title!!!",
            },
            Object {
              "name": "excerpt",
              "value": "Excerpt!!!",
            },
          ]
        }
        titleLengthAssessment={
          Object {
            "actual": 0,
            "max": 600,
            "score": 0,
          }
        }
      >
        <SnippetEditorFields__StyledEditor>
          <section
            className="c23"
          >
            <SnippetEditorFields__FormSection>
              <div
                className="c24"
              >
                <SnippetEditorFields__SimulatedLabel
                  id="snippet-editor-field-6-title"
                  onClick={[Function]}
                >
                  <div
                    className="c25"
                    id="snippet-editor-field-6-title"
                    onClick={[Function]}
                  >
                    SEO title
                  </div>
                </SnippetEditorFields__SimulatedLabel>
                <SnippetEditorFields__InputContainer
                  isActive={false}
                  isHovered={false}
                >
                  <div
                    className="c26"
                  >
                    <ReplacementVariableEditor
                      ariaLabelledBy="snippet-editor-field-6-title"
                      content="Test title"
                      onChange={[Function]}
                      onFocus={[Function]}
                      replacementVariables={
                        Array [
                          Object {
                            "name": "title",
                            "value": "Title!!!",
                          },
                          Object {
                            "name": "excerpt",
                            "value": "Excerpt!!!",
                          },
                        ]
                      }
                    >
                      <div />
                    </ReplacementVariableEditor>
                  </div>
                </SnippetEditorFields__InputContainer>
                <ProgressBar
                  aria-hidden="true"
                  backgroundColor="#f7f7f7"
                  borderColor="#ddd"
                  max={600}
                  progressColor="#dc3232"
                  value={0}
                >
                  <progress
                    aria-hidden="true"
                    className="c27"
                    max={600}
                    value={0}
                  />
                </ProgressBar>
              </div>
            </SnippetEditorFields__FormSection>
            <SnippetEditorFields__FormSection>
              <div
                className="c24"
              >
                <SnippetEditorFields__SimulatedLabel
                  id="snippet-editor-field-6-slug"
                  onClick={[Function]}
                >
                  <div
                    className="c25"
                    id="snippet-editor-field-6-slug"
                    onClick={[Function]}
                  >
                    Slug
                  </div>
                </SnippetEditorFields__SimulatedLabel>
                <SnippetEditorFields__InputContainer
                  isActive={false}
                  isHovered={false}
                >
                  <div
                    className="c26"
                  >
                    <ReplacementVariableEditor
                      ariaLabelledBy="snippet-editor-field-6-slug"
                      content="test-slug"
                      onChange={[Function]}
                      onFocus={[Function]}
                      replacementVariables={Array []}
                    >
                      <div />
                    </ReplacementVariableEditor>
                  </div>
                </SnippetEditorFields__InputContainer>
              </div>
            </SnippetEditorFields__FormSection>
            <SnippetEditorFields__FormSection>
              <div
                className="c24"
              >
                <SnippetEditorFields__SimulatedLabel
                  id="snippet-editor-field-6-description"
                  onClick={[Function]}
                >
                  <div
                    className="c25"
                    id="snippet-editor-field-6-description"
                    onClick={[Function]}
                  >
                    Meta description
                  </div>
                </SnippetEditorFields__SimulatedLabel>
                <SnippetEditorFields__InputContainer
                  isActive={false}
                  isHovered={false}
                >
                  <div
                    className="c28"
                  >
                    <ReplacementVariableEditor
                      ariaLabelledBy="snippet-editor-field-6-description"
                      content="Test description, %%replacement_variable%%"
                      onChange={[Function]}
                      onFocus={[Function]}
                      replacementVariables={
                        Array [
                          Object {
                            "name": "title",
                            "value": "Title!!!",
                          },
                          Object {
                            "name": "excerpt",
                            "value": "Excerpt!!!",
                          },
                        ]
                      }
                    >
                      <div />
                    </ReplacementVariableEditor>
                  </div>
                </SnippetEditorFields__InputContainer>
                <ProgressBar
                  aria-hidden="true"
                  backgroundColor="#f7f7f7"
                  borderColor="#ddd"
                  max={320}
                  progressColor="#dc3232"
                  value={0}
                >
                  <progress
                    aria-hidden="true"
                    className="c27"
                    max={320}
                    value={0}
                  />
                </ProgressBar>
              </div>
            </SnippetEditorFields__FormSection>
          </section>
        </SnippetEditorFields__StyledEditor>
      </SnippetEditorFields>
    </InjectIntl(SnippetEditorFields)>
    <Button
      onClick={[Function]}
    >
      <Button
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        className="c29"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <Button
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          className="c29 Button-kDSBcD c13"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <Button
            backgroundColor="#f7f7f7"
            borderColor="#ccc"
            boxShadowColor="#ccc"
            className="c29 Button-kDSBcD c13 Button-kDSBcD c14"
            onClick={[Function]}
            textColor="#555"
            type="button"
          >
            <Button
              backgroundColor="#f7f7f7"
              borderColor="#ccc"
              boxShadowColor="#ccc"
              className="c29 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15"
              onClick={[Function]}
              textColor="#555"
              type="button"
            >
              <Button__BaseButton
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                className="c29 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16"
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <button
                  className="c29 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 c17"
                  onClick={[Function]}
                  type="button"
                >
                  <FormattedMessage
                    defaultMessage="Close snippet editor"
                    id="snippet-editor.close-editor"
                    values={Object {}}
                  >
                    <span>
                      Close snippet editor
                    </span>
                  </FormattedMessage>
                </button>
              </Button__BaseButton>
            </Button>
          </Button>
        </Button>
      </Button>
    </Button>
  </div>
</SnippetEditor>
`;

exports[`SnippetEditor removes the highlight from the hovered field on calling onMouseLeave() 1`] = `
<div>
  <SnippetPreview
    activeField={null}
    breadcrumbs={null}
    date=""
    description="Test description, %%replacement_variable%%"
    hoveredField={null}
    isAmp={false}
    isDescriptionGenerated={false}
    keyword=""
    locale="en_US"
    mode="mobile"
    onClick={[Function]}
    onHover={[Function]}
    onMouseLeave={[Function]}
    onMouseOver={[Function]}
    title="Test title"
    url="example.org/test-slug"
  />
  <ModeSwitcher
    active="mobile"
    onChange={[Function]}
  />
  <Button
    aria-expanded={true}
    innerRef={[Function]}
    onClick={[Function]}
  >
    <SvgIcon
      icon="edit"
      size="16px"
    />
    <FormattedMessage
      defaultMessage="Edit snippet"
      id="snippetEditor.editSnippet"
      values={Object {}}
    />
  </Button>
  <React.Fragment>
    <InjectIntl(SnippetEditorFields)
      activeField={null}
      data={
        Object {
          "description": "Test description, %%replacement_variable%%",
          "slug": "test-slug",
          "title": "Test title",
        }
      }
      descriptionLengthAssessment={
        Object {
          "actual": 0,
          "max": 320,
          "score": 0,
        }
      }
      hoveredField={null}
      onChange={[Function]}
      onFocus={[Function]}
      replacementVariables={Array []}
      titleLengthAssessment={
        Object {
          "actual": 0,
          "max": 600,
          "score": 0,
        }
      }
    />
    <Button
      onClick={[Function]}
    >
      <FormattedMessage
        defaultMessage="Close snippet editor"
        id="snippet-editor.close-editor"
        values={Object {}}
      />
    </Button>
  </React.Fragment>
</div>
`;

exports[`SnippetEditor renders in desktop mode 1`] = `
.c1 {
  overflow: auto;
  width: 640px;
  padding: 0 20px;
  max-width: 100%;
  box-sizing: border-box;
}

.c2 {
  width: 600px;
}

.c0 {
  background-color: white;
  font-family: arial,sans-serif;
  box-sizing: border-box;
}

.c3 {
  cursor: pointer;
  position: relative;
}

.c5 {
  color: #1e0fbe;
  text-decoration: none;
  font-size: 18px;
  line-height: 1.2;
  font-weight: normal;
  margin: 0;
  display: inline-block;
  overflow: hidden;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c4 {
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c6 {
  white-space: nowrap;
}

.c7 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
}

.c9 {
  color: #545454;
  cursor: pointer;
  position: relative;
  max-width: 600px;
  font-size: 13px;
}

.c8 {
  display: inline-block;
  margin-top: 6px;
  margin-left: 6px;
  border-top: 5px solid #006621;
  border-right: 4px solid transparent;
  border-left: 4px solid transparent;
  vertical-align: top;
}

.c17 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
}

.c12 {
  font-size: 0.8rem;
}

.c13:active {
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c14:hover {
  color: #000;
}

.c15::-moz-focus-inner {
  border-width: 0;
}

.c15:focus {
  outline: none;
  border-color: #0066cd;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c16 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
}

.c16 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c21 {
  font-size: 0.8rem;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin: 10px 0 0 4px;
  fill: #555;
  padding-left: 8px;
}

.c21 svg {
  margin-right: 7px;
}

.c11 {
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: transparent;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 3px 0 0 3px;
}

.c11:hover,
.c11:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
}

.c19 {
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: #555;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 0 3px 3px 0;
}

.c19:hover,
.c19:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
}

.c10 {
  display: inline-block;
  margin-top: 10px;
  margin-left: 20px;
  border: 1px solid #dbdbdb;
  border-radius: 4px;
  background-color: #f7f7f7;
  vertical-align: top;
}

.c18 {
  width: 22px;
  height: 22px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c20 {
  width: 18px;
  height: 18px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c22 {
  width: 16px;
  height: 16px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

@media all and ( -ms-high-contrast:none ),( -ms-high-contrast:active ) {
  .c16::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

<div>
  <section>
    <div
      className="c0 c1"
      width={640}
    >
      <div
        className="c2"
        width={600}
      >
        <div
          className=""
        >
          <span
            className="screen-reader-text"
            style={
              Object {
                "clip": "rect(1px, 1px, 1px, 1px)",
                "height": "1px",
                "overflow": "hidden",
                "position": "absolute",
                "width": "1px",
              }
            }
          >
            SEO title preview:
          </span>
          <div
            className="c3"
            onClick={[Function]}
            onMouseLeave={[Function]}
            onMouseOver={[Function]}
          >
            <div
              className="c4 c5"
            >
              <span
                className="c6"
              >
                Test title
              </span>
            </div>
          </div>
          <span
            className="screen-reader-text"
            style={
              Object {
                "clip": "rect(1px, 1px, 1px, 1px)",
                "height": "1px",
                "overflow": "hidden",
                "position": "absolute",
                "width": "1px",
              }
            }
          >
            Url preview:
          </span>
          <div
            className="c7"
            onClick={[Function]}
            onMouseLeave={[Function]}
            onMouseOver={[Function]}
          >
            example.org/test-slug
          </div>
          <div
            className="c8"
          />
        </div>
        <div
          className=""
        >
          <span
            className="screen-reader-text"
            style={
              Object {
                "clip": "rect(1px, 1px, 1px, 1px)",
                "height": "1px",
                "overflow": "hidden",
                "position": "absolute",
                "width": "1px",
              }
            }
          >
            Meta description preview:
          </span>
          <div
            className="c9"
            color="#545454"
            onClick={[Function]}
            onMouseLeave={[Function]}
            onMouseOver={[Function]}
          >
            Test description, %%replacement_variable%%
          </div>
        </div>
      </div>
    </div>
  </section>
  <div
    className="c10"
  >
    <button
      aria-pressed={false}
      className="c11 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 c17"
      onClick={[Function]}
      type="button"
    >
      <svg
        aria-hidden={true}
        className="yoast-svg-icon yoast-svg-icon-mobile c18"
        fill="currentColor"
        focusable="false"
        role="img"
        size="22px"
        viewBox="0 0 1792 1792"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
        />
      </svg>
      <span
        className="screen-reader-text"
        style={
          Object {
            "clip": "rect(1px, 1px, 1px, 1px)",
            "height": "1px",
            "overflow": "hidden",
            "position": "absolute",
            "width": "1px",
          }
        }
      >
        Mobile preview
      </span>
    </button>
    <button
      aria-pressed={true}
      className="c19 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 c17"
      onClick={[Function]}
      type="button"
    >
      <svg
        aria-hidden={true}
        className="yoast-svg-icon yoast-svg-icon-desktop c20"
        fill="currentColor"
        focusable="false"
        role="img"
        size="18px"
        viewBox="0 0 1792 1792"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
        />
      </svg>
      <span
        className="screen-reader-text"
        style={
          Object {
            "clip": "rect(1px, 1px, 1px, 1px)",
            "height": "1px",
            "overflow": "hidden",
            "position": "absolute",
            "width": "1px",
          }
        }
      >
        Desktop preview
      </span>
    </button>
  </div>
  <button
    aria-expanded={false}
    className="c21 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 c17"
    onClick={[Function]}
    type="button"
  >
    <svg
      aria-hidden={true}
      className="yoast-svg-icon yoast-svg-icon-edit c22"
      fill={undefined}
      focusable="false"
      role="img"
      size="16px"
      viewBox="0 0 1792 1792"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
      />
    </svg>
    <span>
      Edit snippet
    </span>
  </button>
</div>
`;

exports[`SnippetEditor shows and editor 1`] = `
.c0 {
  border-bottom: 1px hidden #fff;
  border-radius: 2px;
  box-shadow: 0 1px 2px rgba(0,0,0,.2);
  margin: 0 20px 10px;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  max-width: 600px;
  box-sizing: border-box;
  font-size: 14px;
}

.c2 {
  cursor: pointer;
  position: relative;
}

.c4 {
  color: #1e0fbe;
  text-decoration: none;
  font-size: 18px;
  line-height: 1.2;
  font-weight: normal;
  margin: 0;
  display: inline-block;
  overflow: hidden;
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c3 {
  max-width: 600px;
  vertical-align: top;
  text-overflow: ellipsis;
}

.c5 {
  display: inline-block;
  line-height: 1.2em;
  max-height: 2.4em;
  overflow: hidden;
  text-overflow: ellipsis;
  font-size: 16px;
}

.c6 {
  display: inline-block;
  color: #006621;
  cursor: pointer;
  position: relative;
  max-width: 90%;
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
}

.c9 {
  color: #545454;
  cursor: pointer;
  position: relative;
  max-width: 600px;
  font-size: 13px;
}

.c8 {
  max-height: 4em;
  overflow: hidden;
  font-size: 14px;
  line-height: 20px;
}

.c1 {
  padding: 8px 16px;
}

.c7 {
  border: 0;
  border-bottom: 1px solid #DFE1E5;
  margin: 0;
}

.c17 {
  color: #555;
  border-color: #ccc;
  background: #f7f7f7;
  box-shadow: 0 1px 0 rgba( 204,204,204,1 );
}

.c12 {
  font-size: 0.8rem;
}

.c13:active {
  box-shadow: inset 0 2px 5px -3px rgba( 0,0,0,0.5 );
}

.c14:hover {
  color: #000;
}

.c15::-moz-focus-inner {
  border-width: 0;
}

.c15:focus {
  outline: none;
  border-color: #0066cd;
  box-shadow: 0 0 3px rgba( 8,74,103,0.8 );
}

.c16 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  vertical-align: middle;
  border-width: 1px;
  border-style: solid;
  margin: 0;
  padding: 4px 10px;
  border-radius: 3px;
  cursor: pointer;
  box-sizing: border-box;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  text-align: left;
  overflow: visible;
  min-height: 32px;
}

.c16 svg {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
}

.c21 {
  font-size: 0.8rem;
  height: 33px;
  border: 1px solid #dbdbdb;
  box-shadow: none;
  font-family: Arial,Roboto-Regular,HelveticaNeue,sans-serif;
  margin: 10px 0 0 4px;
  fill: #555;
  padding-left: 8px;
}

.c21 svg {
  margin-right: 7px;
}

.c11 {
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: #555;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 3px 0 0 3px;
}

.c11:hover,
.c11:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
}

.c19 {
  border: none;
  border-bottom: 4px solid transparent;
  width: 31px;
  height: 31px;
  border-color: transparent;
  color: #555;
  -webkit-transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  transition: 0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;
  -webkit-transition-property: border-color;
  transition-property: border-color;
  border-radius: 0 3px 3px 0;
}

.c19:hover,
.c19:focus {
  background-color: #fff;
  border: none;
  border-bottom: 4px solid transparent;
  border-color: #1e8cbe;
  color: #1e8cbe;
}

.c10 {
  display: inline-block;
  margin-top: 10px;
  margin-left: 20px;
  border: 1px solid #dbdbdb;
  border-radius: 4px;
  background-color: #f7f7f7;
  vertical-align: top;
}

.c18 {
  width: 22px;
  height: 22px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c20 {
  width: 18px;
  height: 18px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

.c22 {
  width: 16px;
  height: 16px;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
}

@media all and ( -ms-high-contrast:none ),( -ms-high-contrast:active ) {
  .c16::after {
    display: inline-block;
    content: "";
    min-height: 22px;
  }
}

<div>
  <section>
    <div
      className="c0"
      onMouseLeave={undefined}
      width={640}
    >
      <div
        className="c1"
      >
        <span
          className="screen-reader-text"
          style={
            Object {
              "clip": "rect(1px, 1px, 1px, 1px)",
              "height": "1px",
              "overflow": "hidden",
              "position": "absolute",
              "width": "1px",
            }
          }
        >
          SEO title preview:
        </span>
        <div
          className="c2"
          onClick={[Function]}
          onMouseLeave={[Function]}
          onMouseOver={[Function]}
        >
          <div
            className="c3 c4"
          >
            <span
              className="c5"
            >
              Test title
            </span>
          </div>
        </div>
        <span
          className="screen-reader-text"
          style={
            Object {
              "clip": "rect(1px, 1px, 1px, 1px)",
              "height": "1px",
              "overflow": "hidden",
              "position": "absolute",
              "width": "1px",
            }
          }
        >
          Url preview:
        </span>
        <div
          className="c6"
          onClick={[Function]}
          onMouseLeave={[Function]}
          onMouseOver={[Function]}
        >
          example.org â€º test-slug
        </div>
      </div>
      <hr
        className="c7"
      />
      <div
        className="c1"
      >
        <span
          className="screen-reader-text"
          style={
            Object {
              "clip": "rect(1px, 1px, 1px, 1px)",
              "height": "1px",
              "overflow": "hidden",
              "position": "absolute",
              "width": "1px",
            }
          }
        >
          Meta description preview:
        </span>
        <div
          className="c8 c9"
          color="#545454"
          onClick={[Function]}
          onMouseLeave={[Function]}
          onMouseOver={[Function]}
        >
          Test description, %%replacement_variable%%
        </div>
      </div>
    </div>
  </section>
  <div
    className="c10"
  >
    <button
      aria-pressed={true}
      className="c11 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 c17"
      onClick={[Function]}
      type="button"
    >
      <svg
        aria-hidden={true}
        className="yoast-svg-icon yoast-svg-icon-mobile c18"
        fill="currentColor"
        focusable="false"
        role="img"
        size="22px"
        viewBox="0 0 1792 1792"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
        />
      </svg>
      <span
        className="screen-reader-text"
        style={
          Object {
            "clip": "rect(1px, 1px, 1px, 1px)",
            "height": "1px",
            "overflow": "hidden",
            "position": "absolute",
            "width": "1px",
          }
        }
      >
        Mobile preview
      </span>
    </button>
    <button
      aria-pressed={false}
      className="c19 c12 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 c17"
      onClick={[Function]}
      type="button"
    >
      <svg
        aria-hidden={true}
        className="yoast-svg-icon yoast-svg-icon-desktop c20"
        fill="currentColor"
        focusable="false"
        role="img"
        size="18px"
        viewBox="0 0 1792 1792"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
        />
      </svg>
      <span
        className="screen-reader-text"
        style={
          Object {
            "clip": "rect(1px, 1px, 1px, 1px)",
            "height": "1px",
            "overflow": "hidden",
            "position": "absolute",
            "width": "1px",
          }
        }
      >
        Desktop preview
      </span>
    </button>
  </div>
  <button
    aria-expanded={false}
    className="c21 Button-kDSBcD c13 Button-kDSBcD c14 Button-kDSBcD c15 Button-kDSBcD c16 c17"
    onClick={[Function]}
    type="button"
  >
    <svg
      aria-hidden={true}
      className="yoast-svg-icon yoast-svg-icon-edit c22"
      fill={undefined}
      focusable="false"
      role="img"
      size="16px"
      viewBox="0 0 1792 1792"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
      />
    </svg>
    <span>
      Edit snippet
    </span>
  </button>
</div>
`;
